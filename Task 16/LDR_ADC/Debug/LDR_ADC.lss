
LDR_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000311a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009c  00800060  0000311a  000031ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000fc  008000fc  0000324a  2**0
                  ALLOC
  3 .stab         00002c70  00000000  00000000  0000324c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018ad  00000000  00000000  00005ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00007769  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000078c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00007a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00009a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000ab9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000bb20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000bca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000bf62  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c7f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 fe 07 	jmp	0xffc	; 0xffc <__vector_1>
       8:	0c 94 31 08 	jmp	0x1062	; 0x1062 <__vector_2>
       c:	0c 94 64 08 	jmp	0x10c8	; 0x10c8 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e1       	ldi	r30, 0x1A	; 26
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3f       	cpi	r26, 0xFC	; 252
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac ef       	ldi	r26, 0xFC	; 252
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 30       	cpi	r26, 0x02	; 2
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <main>
      8a:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 54 18 	jmp	0x30a8	; 0x30a8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e7       	ldi	r26, 0x7B	; 123
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 70 18 	jmp	0x30e0	; 0x30e0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 60 18 	jmp	0x30c0	; 0x30c0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7c 18 	jmp	0x30f8	; 0x30f8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 60 18 	jmp	0x30c0	; 0x30c0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7c 18 	jmp	0x30f8	; 0x30f8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 54 18 	jmp	0x30a8	; 0x30a8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e7       	ldi	r24, 0x7B	; 123
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 70 18 	jmp	0x30e0	; 0x30e0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5c 18 	jmp	0x30b8	; 0x30b8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e7       	ldi	r22, 0x7B	; 123
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 78 18 	jmp	0x30f0	; 0x30f0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 60 18 	jmp	0x30c0	; 0x30c0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 7c 18 	jmp	0x30f8	; 0x30f8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 60 18 	jmp	0x30c0	; 0x30c0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 7c 18 	jmp	0x30f8	; 0x30f8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 60 18 	jmp	0x30c0	; 0x30c0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 7c 18 	jmp	0x30f8	; 0x30f8 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 64 18 	jmp	0x30c8	; 0x30c8 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 80 18 	jmp	0x3100	; 0x3100 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <EXI_Set_CallBack>:
/* void (*LocalPtr)(void) is a local pointer to function */
/* The name of function without () is an address to that function */
/* The function he passes must take void and return void also */
/************************************************************************/

void EXI_Set_CallBack(EX_Interrupt_Source_type interrupt, void (*LocalPtr)(void)){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <EXI_Set_CallBack+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <EXI_Set_CallBack+0x8>
     ca6:	0f 92       	push	r0
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	7b 83       	std	Y+3, r23	; 0x03
     cb0:	6a 83       	std	Y+2, r22	; 0x02
	switch(interrupt){
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	3d 83       	std	Y+5, r19	; 0x05
     cba:	2c 83       	std	Y+4, r18	; 0x04
     cbc:	8c 81       	ldd	r24, Y+4	; 0x04
     cbe:	9d 81       	ldd	r25, Y+5	; 0x05
     cc0:	81 30       	cpi	r24, 0x01	; 1
     cc2:	91 05       	cpc	r25, r1
     cc4:	81 f0       	breq	.+32     	; 0xce6 <EXI_Set_CallBack+0x48>
     cc6:	2c 81       	ldd	r18, Y+4	; 0x04
     cc8:	3d 81       	ldd	r19, Y+5	; 0x05
     cca:	22 30       	cpi	r18, 0x02	; 2
     ccc:	31 05       	cpc	r19, r1
     cce:	91 f0       	breq	.+36     	; 0xcf4 <EXI_Set_CallBack+0x56>
     cd0:	8c 81       	ldd	r24, Y+4	; 0x04
     cd2:	9d 81       	ldd	r25, Y+5	; 0x05
     cd4:	00 97       	sbiw	r24, 0x00	; 0
     cd6:	a1 f4       	brne	.+40     	; 0xd00 <EXI_Set_CallBack+0x62>
	case EX_INT0:
		INT0_Fptr = LocalPtr;
     cd8:	8a 81       	ldd	r24, Y+2	; 0x02
     cda:	9b 81       	ldd	r25, Y+3	; 0x03
     cdc:	90 93 fd 00 	sts	0x00FD, r25
     ce0:	80 93 fc 00 	sts	0x00FC, r24
     ce4:	0d c0       	rjmp	.+26     	; 0xd00 <EXI_Set_CallBack+0x62>
		break;
	case EX_INT1:
		INT1_Fptr = LocalPtr;
     ce6:	8a 81       	ldd	r24, Y+2	; 0x02
     ce8:	9b 81       	ldd	r25, Y+3	; 0x03
     cea:	90 93 ff 00 	sts	0x00FF, r25
     cee:	80 93 fe 00 	sts	0x00FE, r24
     cf2:	06 c0       	rjmp	.+12     	; 0xd00 <EXI_Set_CallBack+0x62>
		break;
	case EX_INT2:
		INT2_Fptr = LocalPtr;
     cf4:	8a 81       	ldd	r24, Y+2	; 0x02
     cf6:	9b 81       	ldd	r25, Y+3	; 0x03
     cf8:	90 93 01 01 	sts	0x0101, r25
     cfc:	80 93 00 01 	sts	0x0100, r24
		break;
	}
}
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	cf 91       	pop	r28
     d0c:	df 91       	pop	r29
     d0e:	08 95       	ret

00000d10 <EXI_ENABLE>:
/************************************************************************/
/*  Enabling and disabling the interrupt                                */
/************************************************************************/


void EXI_ENABLE(EX_Interrupt_Source_type interrupt){
     d10:	df 93       	push	r29
     d12:	cf 93       	push	r28
     d14:	00 d0       	rcall	.+0      	; 0xd16 <EXI_ENABLE+0x6>
     d16:	0f 92       	push	r0
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt){
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	3b 83       	std	Y+3, r19	; 0x03
     d26:	2a 83       	std	Y+2, r18	; 0x02
     d28:	8a 81       	ldd	r24, Y+2	; 0x02
     d2a:	9b 81       	ldd	r25, Y+3	; 0x03
     d2c:	81 30       	cpi	r24, 0x01	; 1
     d2e:	91 05       	cpc	r25, r1
     d30:	89 f0       	breq	.+34     	; 0xd54 <EXI_ENABLE+0x44>
     d32:	2a 81       	ldd	r18, Y+2	; 0x02
     d34:	3b 81       	ldd	r19, Y+3	; 0x03
     d36:	22 30       	cpi	r18, 0x02	; 2
     d38:	31 05       	cpc	r19, r1
     d3a:	a1 f0       	breq	.+40     	; 0xd64 <EXI_ENABLE+0x54>
     d3c:	8a 81       	ldd	r24, Y+2	; 0x02
     d3e:	9b 81       	ldd	r25, Y+3	; 0x03
     d40:	00 97       	sbiw	r24, 0x00	; 0
     d42:	b9 f4       	brne	.+46     	; 0xd72 <EXI_ENABLE+0x62>
	case EX_INT0:
		SET_BIT(GICR,INT0);
     d44:	ab e5       	ldi	r26, 0x5B	; 91
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	eb e5       	ldi	r30, 0x5B	; 91
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	80 64       	ori	r24, 0x40	; 64
     d50:	8c 93       	st	X, r24
     d52:	0f c0       	rjmp	.+30     	; 0xd72 <EXI_ENABLE+0x62>
		break;
	case EX_INT1:
		SET_BIT(GICR,INT1);
     d54:	ab e5       	ldi	r26, 0x5B	; 91
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	eb e5       	ldi	r30, 0x5B	; 91
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	80 68       	ori	r24, 0x80	; 128
     d60:	8c 93       	st	X, r24
     d62:	07 c0       	rjmp	.+14     	; 0xd72 <EXI_ENABLE+0x62>
		break;
	case EX_INT2:
		SET_BIT(GICR,INT2);
     d64:	ab e5       	ldi	r26, 0x5B	; 91
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	eb e5       	ldi	r30, 0x5B	; 91
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	80 62       	ori	r24, 0x20	; 32
     d70:	8c 93       	st	X, r24
		break;
	}
}
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	cf 91       	pop	r28
     d7a:	df 91       	pop	r29
     d7c:	08 95       	ret

00000d7e <EXI_DISABLE>:


void EXI_DISABLE(EX_Interrupt_Source_type interrupt){
     d7e:	df 93       	push	r29
     d80:	cf 93       	push	r28
     d82:	00 d0       	rcall	.+0      	; 0xd84 <EXI_DISABLE+0x6>
     d84:	0f 92       	push	r0
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
     d8a:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt){
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	3b 83       	std	Y+3, r19	; 0x03
     d94:	2a 83       	std	Y+2, r18	; 0x02
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	9b 81       	ldd	r25, Y+3	; 0x03
     d9a:	81 30       	cpi	r24, 0x01	; 1
     d9c:	91 05       	cpc	r25, r1
     d9e:	89 f0       	breq	.+34     	; 0xdc2 <EXI_DISABLE+0x44>
     da0:	2a 81       	ldd	r18, Y+2	; 0x02
     da2:	3b 81       	ldd	r19, Y+3	; 0x03
     da4:	22 30       	cpi	r18, 0x02	; 2
     da6:	31 05       	cpc	r19, r1
     da8:	a1 f0       	breq	.+40     	; 0xdd2 <EXI_DISABLE+0x54>
     daa:	8a 81       	ldd	r24, Y+2	; 0x02
     dac:	9b 81       	ldd	r25, Y+3	; 0x03
     dae:	00 97       	sbiw	r24, 0x00	; 0
     db0:	b9 f4       	brne	.+46     	; 0xde0 <EXI_DISABLE+0x62>
	case EX_INT0:
		CLR_BIT(GICR,INT0);
     db2:	ab e5       	ldi	r26, 0x5B	; 91
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e5       	ldi	r30, 0x5B	; 91
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	8f 7b       	andi	r24, 0xBF	; 191
     dbe:	8c 93       	st	X, r24
     dc0:	0f c0       	rjmp	.+30     	; 0xde0 <EXI_DISABLE+0x62>
		break;
	case EX_INT1:
		CLR_BIT(GICR,INT1);
     dc2:	ab e5       	ldi	r26, 0x5B	; 91
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	eb e5       	ldi	r30, 0x5B	; 91
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	8f 77       	andi	r24, 0x7F	; 127
     dce:	8c 93       	st	X, r24
     dd0:	07 c0       	rjmp	.+14     	; 0xde0 <EXI_DISABLE+0x62>
		break;
	case EX_INT2:
		CLR_BIT(GICR,INT2);
     dd2:	ab e5       	ldi	r26, 0x5B	; 91
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	eb e5       	ldi	r30, 0x5B	; 91
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	8f 7d       	andi	r24, 0xDF	; 223
     dde:	8c 93       	st	X, r24
		break;
	}
}
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	cf 91       	pop	r28
     de8:	df 91       	pop	r29
     dea:	08 95       	ret

00000dec <EXI_TriggerEdge>:

void EXI_TriggerEdge(EX_Interrupt_Source_type interrupt,Trigger_Edge_type edge){
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
     df4:	2a 97       	sbiw	r28, 0x0a	; 10
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	f8 94       	cli
     dfa:	de bf       	out	0x3e, r29	; 62
     dfc:	0f be       	out	0x3f, r0	; 63
     dfe:	cd bf       	out	0x3d, r28	; 61
     e00:	89 83       	std	Y+1, r24	; 0x01
     e02:	6a 83       	std	Y+2, r22	; 0x02
	switch(interrupt){
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	28 2f       	mov	r18, r24
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	3a 87       	std	Y+10, r19	; 0x0a
     e0c:	29 87       	std	Y+9, r18	; 0x09
     e0e:	89 85       	ldd	r24, Y+9	; 0x09
     e10:	9a 85       	ldd	r25, Y+10	; 0x0a
     e12:	81 30       	cpi	r24, 0x01	; 1
     e14:	91 05       	cpc	r25, r1
     e16:	09 f4       	brne	.+2      	; 0xe1a <EXI_TriggerEdge+0x2e>
     e18:	66 c0       	rjmp	.+204    	; 0xee6 <EXI_TriggerEdge+0xfa>
     e1a:	29 85       	ldd	r18, Y+9	; 0x09
     e1c:	3a 85       	ldd	r19, Y+10	; 0x0a
     e1e:	22 30       	cpi	r18, 0x02	; 2
     e20:	31 05       	cpc	r19, r1
     e22:	09 f4       	brne	.+2      	; 0xe26 <EXI_TriggerEdge+0x3a>
     e24:	bb c0       	rjmp	.+374    	; 0xf9c <EXI_TriggerEdge+0x1b0>
     e26:	89 85       	ldd	r24, Y+9	; 0x09
     e28:	9a 85       	ldd	r25, Y+10	; 0x0a
     e2a:	00 97       	sbiw	r24, 0x00	; 0
     e2c:	09 f0       	breq	.+2      	; 0xe30 <EXI_TriggerEdge+0x44>
     e2e:	dd c0       	rjmp	.+442    	; 0xfea <EXI_TriggerEdge+0x1fe>
	case EX_INT0:
		switch(edge){
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	38 87       	std	Y+8, r19	; 0x08
     e38:	2f 83       	std	Y+7, r18	; 0x07
     e3a:	8f 81       	ldd	r24, Y+7	; 0x07
     e3c:	98 85       	ldd	r25, Y+8	; 0x08
     e3e:	81 30       	cpi	r24, 0x01	; 1
     e40:	91 05       	cpc	r25, r1
     e42:	21 f1       	breq	.+72     	; 0xe8c <EXI_TriggerEdge+0xa0>
     e44:	2f 81       	ldd	r18, Y+7	; 0x07
     e46:	38 85       	ldd	r19, Y+8	; 0x08
     e48:	22 30       	cpi	r18, 0x02	; 2
     e4a:	31 05       	cpc	r19, r1
     e4c:	2c f4       	brge	.+10     	; 0xe58 <EXI_TriggerEdge+0x6c>
     e4e:	8f 81       	ldd	r24, Y+7	; 0x07
     e50:	98 85       	ldd	r25, Y+8	; 0x08
     e52:	00 97       	sbiw	r24, 0x00	; 0
     e54:	61 f0       	breq	.+24     	; 0xe6e <EXI_TriggerEdge+0x82>
     e56:	c9 c0       	rjmp	.+402    	; 0xfea <EXI_TriggerEdge+0x1fe>
     e58:	2f 81       	ldd	r18, Y+7	; 0x07
     e5a:	38 85       	ldd	r19, Y+8	; 0x08
     e5c:	22 30       	cpi	r18, 0x02	; 2
     e5e:	31 05       	cpc	r19, r1
     e60:	21 f1       	breq	.+72     	; 0xeaa <EXI_TriggerEdge+0xbe>
     e62:	8f 81       	ldd	r24, Y+7	; 0x07
     e64:	98 85       	ldd	r25, Y+8	; 0x08
     e66:	83 30       	cpi	r24, 0x03	; 3
     e68:	91 05       	cpc	r25, r1
     e6a:	71 f1       	breq	.+92     	; 0xec8 <EXI_TriggerEdge+0xdc>
     e6c:	be c0       	rjmp	.+380    	; 0xfea <EXI_TriggerEdge+0x1fe>
		case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC00);
     e6e:	a5 e5       	ldi	r26, 0x55	; 85
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e5 e5       	ldi	r30, 0x55	; 85
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	8e 7f       	andi	r24, 0xFE	; 254
     e7a:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
     e7c:	a5 e5       	ldi	r26, 0x55	; 85
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e5 e5       	ldi	r30, 0x55	; 85
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	8d 7f       	andi	r24, 0xFD	; 253
     e88:	8c 93       	st	X, r24
     e8a:	af c0       	rjmp	.+350    	; 0xfea <EXI_TriggerEdge+0x1fe>
			break;
		case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC00);
     e8c:	a5 e5       	ldi	r26, 0x55	; 85
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e5 e5       	ldi	r30, 0x55	; 85
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	81 60       	ori	r24, 0x01	; 1
     e98:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
     e9a:	a5 e5       	ldi	r26, 0x55	; 85
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e5 e5       	ldi	r30, 0x55	; 85
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	8d 7f       	andi	r24, 0xFD	; 253
     ea6:	8c 93       	st	X, r24
     ea8:	a0 c0       	rjmp	.+320    	; 0xfea <EXI_TriggerEdge+0x1fe>
			break;
		case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC00);
     eaa:	a5 e5       	ldi	r26, 0x55	; 85
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e5 e5       	ldi	r30, 0x55	; 85
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	8e 7f       	andi	r24, 0xFE	; 254
     eb6:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
     eb8:	a5 e5       	ldi	r26, 0x55	; 85
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e5 e5       	ldi	r30, 0x55	; 85
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	82 60       	ori	r24, 0x02	; 2
     ec4:	8c 93       	st	X, r24
     ec6:	91 c0       	rjmp	.+290    	; 0xfea <EXI_TriggerEdge+0x1fe>
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
     ec8:	a5 e5       	ldi	r26, 0x55	; 85
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e5 e5       	ldi	r30, 0x55	; 85
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	81 60       	ori	r24, 0x01	; 1
     ed4:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
     ed6:	a5 e5       	ldi	r26, 0x55	; 85
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e5 e5       	ldi	r30, 0x55	; 85
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	82 60       	ori	r24, 0x02	; 2
     ee2:	8c 93       	st	X, r24
     ee4:	82 c0       	rjmp	.+260    	; 0xfea <EXI_TriggerEdge+0x1fe>
			break;
		}
		break;
		case EX_INT1:
			switch(edge){
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	3e 83       	std	Y+6, r19	; 0x06
     eee:	2d 83       	std	Y+5, r18	; 0x05
     ef0:	8d 81       	ldd	r24, Y+5	; 0x05
     ef2:	9e 81       	ldd	r25, Y+6	; 0x06
     ef4:	81 30       	cpi	r24, 0x01	; 1
     ef6:	91 05       	cpc	r25, r1
     ef8:	21 f1       	breq	.+72     	; 0xf42 <EXI_TriggerEdge+0x156>
     efa:	2d 81       	ldd	r18, Y+5	; 0x05
     efc:	3e 81       	ldd	r19, Y+6	; 0x06
     efe:	22 30       	cpi	r18, 0x02	; 2
     f00:	31 05       	cpc	r19, r1
     f02:	2c f4       	brge	.+10     	; 0xf0e <EXI_TriggerEdge+0x122>
     f04:	8d 81       	ldd	r24, Y+5	; 0x05
     f06:	9e 81       	ldd	r25, Y+6	; 0x06
     f08:	00 97       	sbiw	r24, 0x00	; 0
     f0a:	61 f0       	breq	.+24     	; 0xf24 <EXI_TriggerEdge+0x138>
     f0c:	6e c0       	rjmp	.+220    	; 0xfea <EXI_TriggerEdge+0x1fe>
     f0e:	2d 81       	ldd	r18, Y+5	; 0x05
     f10:	3e 81       	ldd	r19, Y+6	; 0x06
     f12:	22 30       	cpi	r18, 0x02	; 2
     f14:	31 05       	cpc	r19, r1
     f16:	21 f1       	breq	.+72     	; 0xf60 <EXI_TriggerEdge+0x174>
     f18:	8d 81       	ldd	r24, Y+5	; 0x05
     f1a:	9e 81       	ldd	r25, Y+6	; 0x06
     f1c:	83 30       	cpi	r24, 0x03	; 3
     f1e:	91 05       	cpc	r25, r1
     f20:	71 f1       	breq	.+92     	; 0xf7e <EXI_TriggerEdge+0x192>
     f22:	63 c0       	rjmp	.+198    	; 0xfea <EXI_TriggerEdge+0x1fe>
			case LOW_LEVEL:
				CLR_BIT(MCUCR,ISC10);
     f24:	a5 e5       	ldi	r26, 0x55	; 85
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e5 e5       	ldi	r30, 0x55	; 85
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	8b 7f       	andi	r24, 0xFB	; 251
     f30:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC11);
     f32:	a5 e5       	ldi	r26, 0x55	; 85
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e5 e5       	ldi	r30, 0x55	; 85
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	87 7f       	andi	r24, 0xF7	; 247
     f3e:	8c 93       	st	X, r24
     f40:	54 c0       	rjmp	.+168    	; 0xfea <EXI_TriggerEdge+0x1fe>
				break;
			case ANY_LOGIC_CHANGE:
				SET_BIT(MCUCR,ISC10);
     f42:	a5 e5       	ldi	r26, 0x55	; 85
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e5 e5       	ldi	r30, 0x55	; 85
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	84 60       	ori	r24, 0x04	; 4
     f4e:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC11);
     f50:	a5 e5       	ldi	r26, 0x55	; 85
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e5 e5       	ldi	r30, 0x55	; 85
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	87 7f       	andi	r24, 0xF7	; 247
     f5c:	8c 93       	st	X, r24
     f5e:	45 c0       	rjmp	.+138    	; 0xfea <EXI_TriggerEdge+0x1fe>
				break;
			case FALLING_EDGE:
				CLR_BIT(MCUCR,ISC10);
     f60:	a5 e5       	ldi	r26, 0x55	; 85
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e5 e5       	ldi	r30, 0x55	; 85
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	8b 7f       	andi	r24, 0xFB	; 251
     f6c:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
     f6e:	a5 e5       	ldi	r26, 0x55	; 85
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e5 e5       	ldi	r30, 0x55	; 85
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	88 60       	ori	r24, 0x08	; 8
     f7a:	8c 93       	st	X, r24
     f7c:	36 c0       	rjmp	.+108    	; 0xfea <EXI_TriggerEdge+0x1fe>
				break;
			case RISING_EDGE:
				SET_BIT(MCUCR,ISC10);
     f7e:	a5 e5       	ldi	r26, 0x55	; 85
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e5 e5       	ldi	r30, 0x55	; 85
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	84 60       	ori	r24, 0x04	; 4
     f8a:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
     f8c:	a5 e5       	ldi	r26, 0x55	; 85
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e5 e5       	ldi	r30, 0x55	; 85
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	88 60       	ori	r24, 0x08	; 8
     f98:	8c 93       	st	X, r24
     f9a:	27 c0       	rjmp	.+78     	; 0xfea <EXI_TriggerEdge+0x1fe>
				break;
			}
			break;
			case EX_INT2:
				switch(edge){
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	3c 83       	std	Y+4, r19	; 0x04
     fa4:	2b 83       	std	Y+3, r18	; 0x03
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	9c 81       	ldd	r25, Y+4	; 0x04
     faa:	82 30       	cpi	r24, 0x02	; 2
     fac:	91 05       	cpc	r25, r1
     fae:	31 f0       	breq	.+12     	; 0xfbc <EXI_TriggerEdge+0x1d0>
     fb0:	2b 81       	ldd	r18, Y+3	; 0x03
     fb2:	3c 81       	ldd	r19, Y+4	; 0x04
     fb4:	23 30       	cpi	r18, 0x03	; 3
     fb6:	31 05       	cpc	r19, r1
     fb8:	49 f0       	breq	.+18     	; 0xfcc <EXI_TriggerEdge+0x1e0>
     fba:	10 c0       	rjmp	.+32     	; 0xfdc <EXI_TriggerEdge+0x1f0>
				case FALLING_EDGE:
					CLR_BIT(MCUCSR,ISC2);
     fbc:	a4 e5       	ldi	r26, 0x54	; 84
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e4 e5       	ldi	r30, 0x54	; 84
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	8f 7b       	andi	r24, 0xBF	; 191
     fc8:	8c 93       	st	X, r24
     fca:	0f c0       	rjmp	.+30     	; 0xfea <EXI_TriggerEdge+0x1fe>
					break;
				case RISING_EDGE:
					SET_BIT(MCUCSR,ISC2);
     fcc:	a4 e5       	ldi	r26, 0x54	; 84
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e4 e5       	ldi	r30, 0x54	; 84
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	80 64       	ori	r24, 0x40	; 64
     fd8:	8c 93       	st	X, r24
     fda:	07 c0       	rjmp	.+14     	; 0xfea <EXI_TriggerEdge+0x1fe>
					break;
				default:   // Because we haven't handled all cases just cuz of data sheet
					CLR_BIT(MCUCSR,ISC2);
     fdc:	a4 e5       	ldi	r26, 0x54	; 84
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e4 e5       	ldi	r30, 0x54	; 84
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	8f 7b       	andi	r24, 0xBF	; 191
     fe8:	8c 93       	st	X, r24
				}
				break;
	}
}
     fea:	2a 96       	adiw	r28, 0x0a	; 10
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	f8 94       	cli
     ff0:	de bf       	out	0x3e, r29	; 62
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	cd bf       	out	0x3d, r28	; 61
     ff6:	cf 91       	pop	r28
     ff8:	df 91       	pop	r29
     ffa:	08 95       	ret

00000ffc <__vector_1>:
/*                     ISR                                              */
/************************************************************************/

/* What if the user forgot to send a function to SetCallBack, We made an initialization with NULLPTR, So we can't call a NULLPTR, it will give undefined behavior  */

ISR(INT0_vect){
     ffc:	1f 92       	push	r1
     ffe:	0f 92       	push	r0
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	0f 92       	push	r0
    1004:	11 24       	eor	r1, r1
    1006:	2f 93       	push	r18
    1008:	3f 93       	push	r19
    100a:	4f 93       	push	r20
    100c:	5f 93       	push	r21
    100e:	6f 93       	push	r22
    1010:	7f 93       	push	r23
    1012:	8f 93       	push	r24
    1014:	9f 93       	push	r25
    1016:	af 93       	push	r26
    1018:	bf 93       	push	r27
    101a:	ef 93       	push	r30
    101c:	ff 93       	push	r31
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
	if(INT0_Fptr != NULLPTR){
    1026:	80 91 fc 00 	lds	r24, 0x00FC
    102a:	90 91 fd 00 	lds	r25, 0x00FD
    102e:	00 97       	sbiw	r24, 0x00	; 0
    1030:	29 f0       	breq	.+10     	; 0x103c <__vector_1+0x40>
		INT0_Fptr();
    1032:	e0 91 fc 00 	lds	r30, 0x00FC
    1036:	f0 91 fd 00 	lds	r31, 0x00FD
    103a:	09 95       	icall
	}
}
    103c:	cf 91       	pop	r28
    103e:	df 91       	pop	r29
    1040:	ff 91       	pop	r31
    1042:	ef 91       	pop	r30
    1044:	bf 91       	pop	r27
    1046:	af 91       	pop	r26
    1048:	9f 91       	pop	r25
    104a:	8f 91       	pop	r24
    104c:	7f 91       	pop	r23
    104e:	6f 91       	pop	r22
    1050:	5f 91       	pop	r21
    1052:	4f 91       	pop	r20
    1054:	3f 91       	pop	r19
    1056:	2f 91       	pop	r18
    1058:	0f 90       	pop	r0
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	0f 90       	pop	r0
    105e:	1f 90       	pop	r1
    1060:	18 95       	reti

00001062 <__vector_2>:

ISR(INT1_vect){
    1062:	1f 92       	push	r1
    1064:	0f 92       	push	r0
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	0f 92       	push	r0
    106a:	11 24       	eor	r1, r1
    106c:	2f 93       	push	r18
    106e:	3f 93       	push	r19
    1070:	4f 93       	push	r20
    1072:	5f 93       	push	r21
    1074:	6f 93       	push	r22
    1076:	7f 93       	push	r23
    1078:	8f 93       	push	r24
    107a:	9f 93       	push	r25
    107c:	af 93       	push	r26
    107e:	bf 93       	push	r27
    1080:	ef 93       	push	r30
    1082:	ff 93       	push	r31
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
	if(INT1_Fptr != NULLPTR){
    108c:	80 91 fe 00 	lds	r24, 0x00FE
    1090:	90 91 ff 00 	lds	r25, 0x00FF
    1094:	00 97       	sbiw	r24, 0x00	; 0
    1096:	29 f0       	breq	.+10     	; 0x10a2 <__vector_2+0x40>
		INT1_Fptr();
    1098:	e0 91 fe 00 	lds	r30, 0x00FE
    109c:	f0 91 ff 00 	lds	r31, 0x00FF
    10a0:	09 95       	icall
	}
}
    10a2:	cf 91       	pop	r28
    10a4:	df 91       	pop	r29
    10a6:	ff 91       	pop	r31
    10a8:	ef 91       	pop	r30
    10aa:	bf 91       	pop	r27
    10ac:	af 91       	pop	r26
    10ae:	9f 91       	pop	r25
    10b0:	8f 91       	pop	r24
    10b2:	7f 91       	pop	r23
    10b4:	6f 91       	pop	r22
    10b6:	5f 91       	pop	r21
    10b8:	4f 91       	pop	r20
    10ba:	3f 91       	pop	r19
    10bc:	2f 91       	pop	r18
    10be:	0f 90       	pop	r0
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	0f 90       	pop	r0
    10c4:	1f 90       	pop	r1
    10c6:	18 95       	reti

000010c8 <__vector_3>:

ISR(INT2_vect){
    10c8:	1f 92       	push	r1
    10ca:	0f 92       	push	r0
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	0f 92       	push	r0
    10d0:	11 24       	eor	r1, r1
    10d2:	2f 93       	push	r18
    10d4:	3f 93       	push	r19
    10d6:	4f 93       	push	r20
    10d8:	5f 93       	push	r21
    10da:	6f 93       	push	r22
    10dc:	7f 93       	push	r23
    10de:	8f 93       	push	r24
    10e0:	9f 93       	push	r25
    10e2:	af 93       	push	r26
    10e4:	bf 93       	push	r27
    10e6:	ef 93       	push	r30
    10e8:	ff 93       	push	r31
    10ea:	df 93       	push	r29
    10ec:	cf 93       	push	r28
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
	if(INT2_Fptr != NULLPTR){
    10f2:	80 91 00 01 	lds	r24, 0x0100
    10f6:	90 91 01 01 	lds	r25, 0x0101
    10fa:	00 97       	sbiw	r24, 0x00	; 0
    10fc:	29 f0       	breq	.+10     	; 0x1108 <__vector_3+0x40>
		INT2_Fptr();
    10fe:	e0 91 00 01 	lds	r30, 0x0100
    1102:	f0 91 01 01 	lds	r31, 0x0101
    1106:	09 95       	icall
	}
}
    1108:	cf 91       	pop	r28
    110a:	df 91       	pop	r29
    110c:	ff 91       	pop	r31
    110e:	ef 91       	pop	r30
    1110:	bf 91       	pop	r27
    1112:	af 91       	pop	r26
    1114:	9f 91       	pop	r25
    1116:	8f 91       	pop	r24
    1118:	7f 91       	pop	r23
    111a:	6f 91       	pop	r22
    111c:	5f 91       	pop	r21
    111e:	4f 91       	pop	r20
    1120:	3f 91       	pop	r19
    1122:	2f 91       	pop	r18
    1124:	0f 90       	pop	r0
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	0f 90       	pop	r0
    112a:	1f 90       	pop	r1
    112c:	18 95       	reti

0000112e <DIO_ES_tSetPinDirection>:
 * DIO_ES_tSetPinDirection is used to set pin direction
 * ( INPUT or OUTPUT )
 */

ES_t DIO_ES_tSetPinDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Dir_Type copy_u8_PinDirection)
{
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	00 d0       	rcall	.+0      	; 0x1134 <DIO_ES_tSetPinDirection+0x6>
    1134:	00 d0       	rcall	.+0      	; 0x1136 <DIO_ES_tSetPinDirection+0x8>
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	89 83       	std	Y+1, r24	; 0x01
    113c:	6a 83       	std	Y+2, r22	; 0x02
    113e:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	88 30       	cpi	r24, 0x08	; 8
    1144:	18 f0       	brcs	.+6      	; 0x114c <DIO_ES_tSetPinDirection+0x1e>
		return ES_NOT_OK;
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	8c 83       	std	Y+4, r24	; 0x04
    114a:	d8 c0       	rjmp	.+432    	; 0x12fc <DIO_ES_tSetPinDirection+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	88 23       	and	r24, r24
    1150:	91 f5       	brne	.+100    	; 0x11b6 <DIO_ES_tSetPinDirection+0x88>
		if(copy_u8_PinDirection == OUTPUT){
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	81 30       	cpi	r24, 0x01	; 1
    1156:	a1 f4       	brne	.+40     	; 0x1180 <DIO_ES_tSetPinDirection+0x52>
			SET_BIT(DDRA,copy_u8_PinId);
    1158:	aa e3       	ldi	r26, 0x3A	; 58
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	ea e3       	ldi	r30, 0x3A	; 58
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	48 2f       	mov	r20, r24
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	02 2e       	mov	r0, r18
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <DIO_ES_tSetPinDirection+0x48>
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	0a 94       	dec	r0
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <DIO_ES_tSetPinDirection+0x44>
    117a:	84 2b       	or	r24, r20
    117c:	8c 93       	st	X, r24
    117e:	bd c0       	rjmp	.+378    	; 0x12fa <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	88 23       	and	r24, r24
    1184:	a9 f4       	brne	.+42     	; 0x11b0 <DIO_ES_tSetPinDirection+0x82>
			CLR_BIT(DDRA,copy_u8_PinId);
    1186:	aa e3       	ldi	r26, 0x3A	; 58
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	ea e3       	ldi	r30, 0x3A	; 58
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	48 2f       	mov	r20, r24
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 2e       	mov	r0, r18
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <DIO_ES_tSetPinDirection+0x76>
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	0a 94       	dec	r0
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <DIO_ES_tSetPinDirection+0x72>
    11a8:	80 95       	com	r24
    11aa:	84 23       	and	r24, r20
    11ac:	8c 93       	st	X, r24
    11ae:	a5 c0       	rjmp	.+330    	; 0x12fa <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	8c 83       	std	Y+4, r24	; 0x04
    11b4:	a3 c0       	rjmp	.+326    	; 0x12fc <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	91 f5       	brne	.+100    	; 0x1220 <DIO_ES_tSetPinDirection+0xf2>
		if(copy_u8_PinDirection == OUTPUT){
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	81 30       	cpi	r24, 0x01	; 1
    11c0:	a1 f4       	brne	.+40     	; 0x11ea <DIO_ES_tSetPinDirection+0xbc>
			SET_BIT(DDRB,copy_u8_PinId);
    11c2:	a7 e3       	ldi	r26, 0x37	; 55
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e7 e3       	ldi	r30, 0x37	; 55
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	48 2f       	mov	r20, r24
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	02 2e       	mov	r0, r18
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <DIO_ES_tSetPinDirection+0xb2>
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	0a 94       	dec	r0
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <DIO_ES_tSetPinDirection+0xae>
    11e4:	84 2b       	or	r24, r20
    11e6:	8c 93       	st	X, r24
    11e8:	88 c0       	rjmp	.+272    	; 0x12fa <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	88 23       	and	r24, r24
    11ee:	a9 f4       	brne	.+42     	; 0x121a <DIO_ES_tSetPinDirection+0xec>
			CLR_BIT(DDRB,copy_u8_PinId);
    11f0:	a7 e3       	ldi	r26, 0x37	; 55
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e7 e3       	ldi	r30, 0x37	; 55
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	48 2f       	mov	r20, r24
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	02 2e       	mov	r0, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <DIO_ES_tSetPinDirection+0xe0>
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	0a 94       	dec	r0
    1210:	e2 f7       	brpl	.-8      	; 0x120a <DIO_ES_tSetPinDirection+0xdc>
    1212:	80 95       	com	r24
    1214:	84 23       	and	r24, r20
    1216:	8c 93       	st	X, r24
    1218:	70 c0       	rjmp	.+224    	; 0x12fa <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	8c 83       	std	Y+4, r24	; 0x04
    121e:	6e c0       	rjmp	.+220    	; 0x12fc <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	82 30       	cpi	r24, 0x02	; 2
    1224:	91 f5       	brne	.+100    	; 0x128a <DIO_ES_tSetPinDirection+0x15c>
		if(copy_u8_PinDirection == OUTPUT){
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	81 30       	cpi	r24, 0x01	; 1
    122a:	a1 f4       	brne	.+40     	; 0x1254 <DIO_ES_tSetPinDirection+0x126>
			SET_BIT(DDRC,copy_u8_PinId);
    122c:	a4 e3       	ldi	r26, 0x34	; 52
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e4 e3       	ldi	r30, 0x34	; 52
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	48 2f       	mov	r20, r24
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	02 2e       	mov	r0, r18
    1244:	02 c0       	rjmp	.+4      	; 0x124a <DIO_ES_tSetPinDirection+0x11c>
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	0a 94       	dec	r0
    124c:	e2 f7       	brpl	.-8      	; 0x1246 <DIO_ES_tSetPinDirection+0x118>
    124e:	84 2b       	or	r24, r20
    1250:	8c 93       	st	X, r24
    1252:	53 c0       	rjmp	.+166    	; 0x12fa <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	88 23       	and	r24, r24
    1258:	a9 f4       	brne	.+42     	; 0x1284 <DIO_ES_tSetPinDirection+0x156>
			CLR_BIT(DDRC,copy_u8_PinId);
    125a:	a4 e3       	ldi	r26, 0x34	; 52
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e4 e3       	ldi	r30, 0x34	; 52
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	48 2f       	mov	r20, r24
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	02 2e       	mov	r0, r18
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <DIO_ES_tSetPinDirection+0x14a>
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	0a 94       	dec	r0
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <DIO_ES_tSetPinDirection+0x146>
    127c:	80 95       	com	r24
    127e:	84 23       	and	r24, r20
    1280:	8c 93       	st	X, r24
    1282:	3b c0       	rjmp	.+118    	; 0x12fa <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	8c 83       	std	Y+4, r24	; 0x04
    1288:	39 c0       	rjmp	.+114    	; 0x12fc <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	83 30       	cpi	r24, 0x03	; 3
    128e:	91 f5       	brne	.+100    	; 0x12f4 <DIO_ES_tSetPinDirection+0x1c6>
		if(copy_u8_PinDirection == OUTPUT){
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	81 30       	cpi	r24, 0x01	; 1
    1294:	a1 f4       	brne	.+40     	; 0x12be <DIO_ES_tSetPinDirection+0x190>
			SET_BIT(DDRD,copy_u8_PinId);
    1296:	a1 e3       	ldi	r26, 0x31	; 49
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e1 e3       	ldi	r30, 0x31	; 49
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	48 2f       	mov	r20, r24
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	02 2e       	mov	r0, r18
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <DIO_ES_tSetPinDirection+0x186>
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	0a 94       	dec	r0
    12b6:	e2 f7       	brpl	.-8      	; 0x12b0 <DIO_ES_tSetPinDirection+0x182>
    12b8:	84 2b       	or	r24, r20
    12ba:	8c 93       	st	X, r24
    12bc:	1e c0       	rjmp	.+60     	; 0x12fa <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	88 23       	and	r24, r24
    12c2:	a9 f4       	brne	.+42     	; 0x12ee <DIO_ES_tSetPinDirection+0x1c0>
			CLR_BIT(DDRD,copy_u8_PinId);
    12c4:	a1 e3       	ldi	r26, 0x31	; 49
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e1 e3       	ldi	r30, 0x31	; 49
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	48 2f       	mov	r20, r24
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	02 2e       	mov	r0, r18
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <DIO_ES_tSetPinDirection+0x1b4>
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	0a 94       	dec	r0
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <DIO_ES_tSetPinDirection+0x1b0>
    12e6:	80 95       	com	r24
    12e8:	84 23       	and	r24, r20
    12ea:	8c 93       	st	X, r24
    12ec:	06 c0       	rjmp	.+12     	; 0x12fa <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	8c 83       	std	Y+4, r24	; 0x04
    12f2:	04 c0       	rjmp	.+8      	; 0x12fc <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else{
		return ES_NOT_OK;
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	8c 83       	std	Y+4, r24	; 0x04
    12f8:	01 c0       	rjmp	.+2      	; 0x12fc <DIO_ES_tSetPinDirection+0x1ce>
	}
	return ES_OK;
    12fa:	1c 82       	std	Y+4, r1	; 0x04
    12fc:	8c 81       	ldd	r24, Y+4	; 0x04
}
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <DIO_ES_tSetPinValue>:
 * DIO_ES_tSetPinValue is used to set pin value
 * ( LOW or HIGH )
 */

ES_t DIO_ES_tSetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type copy_u8_PinValue)
{
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	00 d0       	rcall	.+0      	; 0x1312 <DIO_ES_tSetPinValue+0x6>
    1312:	00 d0       	rcall	.+0      	; 0x1314 <DIO_ES_tSetPinValue+0x8>
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	89 83       	std	Y+1, r24	; 0x01
    131a:	6a 83       	std	Y+2, r22	; 0x02
    131c:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	88 30       	cpi	r24, 0x08	; 8
    1322:	18 f0       	brcs	.+6      	; 0x132a <DIO_ES_tSetPinValue+0x1e>
		return ES_NOT_OK;
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	8c 83       	std	Y+4, r24	; 0x04
    1328:	d8 c0       	rjmp	.+432    	; 0x14da <DIO_ES_tSetPinValue+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    132a:	89 81       	ldd	r24, Y+1	; 0x01
    132c:	88 23       	and	r24, r24
    132e:	91 f5       	brne	.+100    	; 0x1394 <DIO_ES_tSetPinValue+0x88>
		if(copy_u8_PinValue == HIGH){
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	81 30       	cpi	r24, 0x01	; 1
    1334:	a1 f4       	brne	.+40     	; 0x135e <DIO_ES_tSetPinValue+0x52>
			SET_BIT(PORTA,copy_u8_PinId);
    1336:	ab e3       	ldi	r26, 0x3B	; 59
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	eb e3       	ldi	r30, 0x3B	; 59
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	48 2f       	mov	r20, r24
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	02 2e       	mov	r0, r18
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <DIO_ES_tSetPinValue+0x48>
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	0a 94       	dec	r0
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <DIO_ES_tSetPinValue+0x44>
    1358:	84 2b       	or	r24, r20
    135a:	8c 93       	st	X, r24
    135c:	bd c0       	rjmp	.+378    	; 0x14d8 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	88 23       	and	r24, r24
    1362:	a9 f4       	brne	.+42     	; 0x138e <DIO_ES_tSetPinValue+0x82>
			CLR_BIT(PORTA,copy_u8_PinId);
    1364:	ab e3       	ldi	r26, 0x3B	; 59
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	eb e3       	ldi	r30, 0x3B	; 59
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	48 2f       	mov	r20, r24
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	02 2e       	mov	r0, r18
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <DIO_ES_tSetPinValue+0x76>
    137e:	88 0f       	add	r24, r24
    1380:	99 1f       	adc	r25, r25
    1382:	0a 94       	dec	r0
    1384:	e2 f7       	brpl	.-8      	; 0x137e <DIO_ES_tSetPinValue+0x72>
    1386:	80 95       	com	r24
    1388:	84 23       	and	r24, r20
    138a:	8c 93       	st	X, r24
    138c:	a5 c0       	rjmp	.+330    	; 0x14d8 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	8c 83       	std	Y+4, r24	; 0x04
    1392:	a3 c0       	rjmp	.+326    	; 0x14da <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	81 30       	cpi	r24, 0x01	; 1
    1398:	91 f5       	brne	.+100    	; 0x13fe <DIO_ES_tSetPinValue+0xf2>
		if(copy_u8_PinValue == HIGH){
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	81 30       	cpi	r24, 0x01	; 1
    139e:	a1 f4       	brne	.+40     	; 0x13c8 <DIO_ES_tSetPinValue+0xbc>
			SET_BIT(PORTB,copy_u8_PinId);
    13a0:	a8 e3       	ldi	r26, 0x38	; 56
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	e8 e3       	ldi	r30, 0x38	; 56
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	48 2f       	mov	r20, r24
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	02 2e       	mov	r0, r18
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <DIO_ES_tSetPinValue+0xb2>
    13ba:	88 0f       	add	r24, r24
    13bc:	99 1f       	adc	r25, r25
    13be:	0a 94       	dec	r0
    13c0:	e2 f7       	brpl	.-8      	; 0x13ba <DIO_ES_tSetPinValue+0xae>
    13c2:	84 2b       	or	r24, r20
    13c4:	8c 93       	st	X, r24
    13c6:	88 c0       	rjmp	.+272    	; 0x14d8 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	88 23       	and	r24, r24
    13cc:	a9 f4       	brne	.+42     	; 0x13f8 <DIO_ES_tSetPinValue+0xec>
			CLR_BIT(PORTB,copy_u8_PinId);
    13ce:	a8 e3       	ldi	r26, 0x38	; 56
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	e8 e3       	ldi	r30, 0x38	; 56
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	48 2f       	mov	r20, r24
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	02 2e       	mov	r0, r18
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <DIO_ES_tSetPinValue+0xe0>
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	0a 94       	dec	r0
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <DIO_ES_tSetPinValue+0xdc>
    13f0:	80 95       	com	r24
    13f2:	84 23       	and	r24, r20
    13f4:	8c 93       	st	X, r24
    13f6:	70 c0       	rjmp	.+224    	; 0x14d8 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	8c 83       	std	Y+4, r24	; 0x04
    13fc:	6e c0       	rjmp	.+220    	; 0x14da <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	82 30       	cpi	r24, 0x02	; 2
    1402:	91 f5       	brne	.+100    	; 0x1468 <DIO_ES_tSetPinValue+0x15c>
		if(copy_u8_PinValue == HIGH){
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	81 30       	cpi	r24, 0x01	; 1
    1408:	a1 f4       	brne	.+40     	; 0x1432 <DIO_ES_tSetPinValue+0x126>
			SET_BIT(PORTC,copy_u8_PinId);
    140a:	a5 e3       	ldi	r26, 0x35	; 53
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	e5 e3       	ldi	r30, 0x35	; 53
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	48 2f       	mov	r20, r24
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	02 2e       	mov	r0, r18
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <DIO_ES_tSetPinValue+0x11c>
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	0a 94       	dec	r0
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <DIO_ES_tSetPinValue+0x118>
    142c:	84 2b       	or	r24, r20
    142e:	8c 93       	st	X, r24
    1430:	53 c0       	rjmp	.+166    	; 0x14d8 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	88 23       	and	r24, r24
    1436:	a9 f4       	brne	.+42     	; 0x1462 <DIO_ES_tSetPinValue+0x156>
			CLR_BIT(PORTC,copy_u8_PinId);
    1438:	a5 e3       	ldi	r26, 0x35	; 53
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e5 e3       	ldi	r30, 0x35	; 53
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	48 2f       	mov	r20, r24
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	02 2e       	mov	r0, r18
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <DIO_ES_tSetPinValue+0x14a>
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	0a 94       	dec	r0
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <DIO_ES_tSetPinValue+0x146>
    145a:	80 95       	com	r24
    145c:	84 23       	and	r24, r20
    145e:	8c 93       	st	X, r24
    1460:	3b c0       	rjmp	.+118    	; 0x14d8 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	8c 83       	std	Y+4, r24	; 0x04
    1466:	39 c0       	rjmp	.+114    	; 0x14da <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	83 30       	cpi	r24, 0x03	; 3
    146c:	91 f5       	brne	.+100    	; 0x14d2 <DIO_ES_tSetPinValue+0x1c6>
		if(copy_u8_PinValue == HIGH){
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	81 30       	cpi	r24, 0x01	; 1
    1472:	a1 f4       	brne	.+40     	; 0x149c <DIO_ES_tSetPinValue+0x190>
			SET_BIT(PORTD,copy_u8_PinId);
    1474:	a2 e3       	ldi	r26, 0x32	; 50
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	e2 e3       	ldi	r30, 0x32	; 50
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	48 2f       	mov	r20, r24
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	02 2e       	mov	r0, r18
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <DIO_ES_tSetPinValue+0x186>
    148e:	88 0f       	add	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	0a 94       	dec	r0
    1494:	e2 f7       	brpl	.-8      	; 0x148e <DIO_ES_tSetPinValue+0x182>
    1496:	84 2b       	or	r24, r20
    1498:	8c 93       	st	X, r24
    149a:	1e c0       	rjmp	.+60     	; 0x14d8 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	88 23       	and	r24, r24
    14a0:	a9 f4       	brne	.+42     	; 0x14cc <DIO_ES_tSetPinValue+0x1c0>
			CLR_BIT(PORTD,copy_u8_PinId);
    14a2:	a2 e3       	ldi	r26, 0x32	; 50
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e2 e3       	ldi	r30, 0x32	; 50
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	48 2f       	mov	r20, r24
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	02 2e       	mov	r0, r18
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <DIO_ES_tSetPinValue+0x1b4>
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	0a 94       	dec	r0
    14c2:	e2 f7       	brpl	.-8      	; 0x14bc <DIO_ES_tSetPinValue+0x1b0>
    14c4:	80 95       	com	r24
    14c6:	84 23       	and	r24, r20
    14c8:	8c 93       	st	X, r24
    14ca:	06 c0       	rjmp	.+12     	; 0x14d8 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	8c 83       	std	Y+4, r24	; 0x04
    14d0:	04 c0       	rjmp	.+8      	; 0x14da <DIO_ES_tSetPinValue+0x1ce>
		}
	}else{
		return ES_NOT_OK;
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	8c 83       	std	Y+4, r24	; 0x04
    14d6:	01 c0       	rjmp	.+2      	; 0x14da <DIO_ES_tSetPinValue+0x1ce>
	}
	return ES_OK;
    14d8:	1c 82       	std	Y+4, r1	; 0x04
    14da:	8c 81       	ldd	r24, Y+4	; 0x04
}
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	08 95       	ret

000014ea <DIO_ES_tGetPinValue>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tGetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type* copy_pu8_PinValue)
{
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	00 d0       	rcall	.+0      	; 0x14f0 <DIO_ES_tGetPinValue+0x6>
    14f0:	00 d0       	rcall	.+0      	; 0x14f2 <DIO_ES_tGetPinValue+0x8>
    14f2:	0f 92       	push	r0
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    14f8:	89 83       	std	Y+1, r24	; 0x01
    14fa:	6a 83       	std	Y+2, r22	; 0x02
    14fc:	5c 83       	std	Y+4, r21	; 0x04
    14fe:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	88 30       	cpi	r24, 0x08	; 8
    1504:	18 f0       	brcs	.+6      	; 0x150c <DIO_ES_tGetPinValue+0x22>
		return ES_NOT_OK;
    1506:	41 e0       	ldi	r20, 0x01	; 1
    1508:	4d 83       	std	Y+5, r20	; 0x05
    150a:	60 c0       	rjmp	.+192    	; 0x15cc <DIO_ES_tGetPinValue+0xe2>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	88 23       	and	r24, r24
    1510:	a1 f4       	brne	.+40     	; 0x153a <DIO_ES_tGetPinValue+0x50>
		*copy_pu8_PinValue = GET_BIT(PINA,copy_u8_PinId);
    1512:	e9 e3       	ldi	r30, 0x39	; 57
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	88 2f       	mov	r24, r24
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	a9 01       	movw	r20, r18
    1524:	02 c0       	rjmp	.+4      	; 0x152a <DIO_ES_tGetPinValue+0x40>
    1526:	55 95       	asr	r21
    1528:	47 95       	ror	r20
    152a:	8a 95       	dec	r24
    152c:	e2 f7       	brpl	.-8      	; 0x1526 <DIO_ES_tGetPinValue+0x3c>
    152e:	ca 01       	movw	r24, r20
    1530:	81 70       	andi	r24, 0x01	; 1
    1532:	eb 81       	ldd	r30, Y+3	; 0x03
    1534:	fc 81       	ldd	r31, Y+4	; 0x04
    1536:	80 83       	st	Z, r24
    1538:	48 c0       	rjmp	.+144    	; 0x15ca <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	81 30       	cpi	r24, 0x01	; 1
    153e:	a1 f4       	brne	.+40     	; 0x1568 <DIO_ES_tGetPinValue+0x7e>
		*copy_pu8_PinValue = GET_BIT(PINB,copy_u8_PinId);
    1540:	e6 e3       	ldi	r30, 0x36	; 54
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	88 2f       	mov	r24, r24
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	a9 01       	movw	r20, r18
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <DIO_ES_tGetPinValue+0x6e>
    1554:	55 95       	asr	r21
    1556:	47 95       	ror	r20
    1558:	8a 95       	dec	r24
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <DIO_ES_tGetPinValue+0x6a>
    155c:	ca 01       	movw	r24, r20
    155e:	81 70       	andi	r24, 0x01	; 1
    1560:	eb 81       	ldd	r30, Y+3	; 0x03
    1562:	fc 81       	ldd	r31, Y+4	; 0x04
    1564:	80 83       	st	Z, r24
    1566:	31 c0       	rjmp	.+98     	; 0x15ca <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	82 30       	cpi	r24, 0x02	; 2
    156c:	a1 f4       	brne	.+40     	; 0x1596 <DIO_ES_tGetPinValue+0xac>
		*copy_pu8_PinValue = GET_BIT(PINC,copy_u8_PinId);
    156e:	e3 e3       	ldi	r30, 0x33	; 51
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	88 2f       	mov	r24, r24
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	a9 01       	movw	r20, r18
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <DIO_ES_tGetPinValue+0x9c>
    1582:	55 95       	asr	r21
    1584:	47 95       	ror	r20
    1586:	8a 95       	dec	r24
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <DIO_ES_tGetPinValue+0x98>
    158a:	ca 01       	movw	r24, r20
    158c:	81 70       	andi	r24, 0x01	; 1
    158e:	eb 81       	ldd	r30, Y+3	; 0x03
    1590:	fc 81       	ldd	r31, Y+4	; 0x04
    1592:	80 83       	st	Z, r24
    1594:	1a c0       	rjmp	.+52     	; 0x15ca <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    1596:	89 81       	ldd	r24, Y+1	; 0x01
    1598:	83 30       	cpi	r24, 0x03	; 3
    159a:	a1 f4       	brne	.+40     	; 0x15c4 <DIO_ES_tGetPinValue+0xda>
		*copy_pu8_PinValue = GET_BIT(PIND,copy_u8_PinId);
    159c:	e0 e3       	ldi	r30, 0x30	; 48
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	88 2f       	mov	r24, r24
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	a9 01       	movw	r20, r18
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <DIO_ES_tGetPinValue+0xca>
    15b0:	55 95       	asr	r21
    15b2:	47 95       	ror	r20
    15b4:	8a 95       	dec	r24
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <DIO_ES_tGetPinValue+0xc6>
    15b8:	ca 01       	movw	r24, r20
    15ba:	81 70       	andi	r24, 0x01	; 1
    15bc:	eb 81       	ldd	r30, Y+3	; 0x03
    15be:	fc 81       	ldd	r31, Y+4	; 0x04
    15c0:	80 83       	st	Z, r24
    15c2:	03 c0       	rjmp	.+6      	; 0x15ca <DIO_ES_tGetPinValue+0xe0>
	}else{
		return ES_NOT_OK;
    15c4:	51 e0       	ldi	r21, 0x01	; 1
    15c6:	5d 83       	std	Y+5, r21	; 0x05
    15c8:	01 c0       	rjmp	.+2      	; 0x15cc <DIO_ES_tGetPinValue+0xe2>
	}
	return ES_OK;
    15ca:	1d 82       	std	Y+5, r1	; 0x05
    15cc:	8d 81       	ldd	r24, Y+5	; 0x05
}
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	cf 91       	pop	r28
    15da:	df 91       	pop	r29
    15dc:	08 95       	ret

000015de <DIO_ES_tSetPortDirection>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tSetPortDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Dir_Type copy_u8_PortDirection)
{
    15de:	df 93       	push	r29
    15e0:	cf 93       	push	r28
    15e2:	00 d0       	rcall	.+0      	; 0x15e4 <DIO_ES_tSetPortDirection+0x6>
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <DIO_ES_tSetPortDirection+0x8>
    15e6:	0f 92       	push	r0
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	89 83       	std	Y+1, r24	; 0x01
    15ee:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortDirection != OUTPUT) && (copy_u8_PortDirection != OUTPUT)){
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	81 30       	cpi	r24, 0x01	; 1
    15f4:	31 f0       	breq	.+12     	; 0x1602 <DIO_ES_tSetPortDirection+0x24>
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	81 30       	cpi	r24, 0x01	; 1
    15fa:	19 f0       	breq	.+6      	; 0x1602 <DIO_ES_tSetPortDirection+0x24>
		return ES_NOT_OK;
    15fc:	21 e0       	ldi	r18, 0x01	; 1
    15fe:	2d 83       	std	Y+5, r18	; 0x05
    1600:	53 c0       	rjmp	.+166    	; 0x16a8 <DIO_ES_tSetPortDirection+0xca>
	}
	switch(copy_u8_PortId){
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	3c 83       	std	Y+4, r19	; 0x04
    160a:	2b 83       	std	Y+3, r18	; 0x03
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	9c 81       	ldd	r25, Y+4	; 0x04
    1610:	81 30       	cpi	r24, 0x01	; 1
    1612:	91 05       	cpc	r25, r1
    1614:	09 f1       	breq	.+66     	; 0x1658 <DIO_ES_tSetPortDirection+0x7a>
    1616:	2b 81       	ldd	r18, Y+3	; 0x03
    1618:	3c 81       	ldd	r19, Y+4	; 0x04
    161a:	22 30       	cpi	r18, 0x02	; 2
    161c:	31 05       	cpc	r19, r1
    161e:	2c f4       	brge	.+10     	; 0x162a <DIO_ES_tSetPortDirection+0x4c>
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	9c 81       	ldd	r25, Y+4	; 0x04
    1624:	00 97       	sbiw	r24, 0x00	; 0
    1626:	61 f0       	breq	.+24     	; 0x1640 <DIO_ES_tSetPortDirection+0x62>
    1628:	3b c0       	rjmp	.+118    	; 0x16a0 <DIO_ES_tSetPortDirection+0xc2>
    162a:	2b 81       	ldd	r18, Y+3	; 0x03
    162c:	3c 81       	ldd	r19, Y+4	; 0x04
    162e:	22 30       	cpi	r18, 0x02	; 2
    1630:	31 05       	cpc	r19, r1
    1632:	f1 f0       	breq	.+60     	; 0x1670 <DIO_ES_tSetPortDirection+0x92>
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	9c 81       	ldd	r25, Y+4	; 0x04
    1638:	83 30       	cpi	r24, 0x03	; 3
    163a:	91 05       	cpc	r25, r1
    163c:	29 f1       	breq	.+74     	; 0x1688 <DIO_ES_tSetPortDirection+0xaa>
    163e:	30 c0       	rjmp	.+96     	; 0x16a0 <DIO_ES_tSetPortDirection+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortDirection == OUTPUT)
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	81 30       	cpi	r24, 0x01	; 1
    1644:	29 f4       	brne	.+10     	; 0x1650 <DIO_ES_tSetPortDirection+0x72>
			DDRA = 0xff;
    1646:	ea e3       	ldi	r30, 0x3A	; 58
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	8f ef       	ldi	r24, 0xFF	; 255
    164c:	80 83       	st	Z, r24
    164e:	2b c0       	rjmp	.+86     	; 0x16a6 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRA = 0x00;
    1650:	ea e3       	ldi	r30, 0x3A	; 58
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	10 82       	st	Z, r1
    1656:	27 c0       	rjmp	.+78     	; 0x16a6 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortDirection == OUTPUT)
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	81 30       	cpi	r24, 0x01	; 1
    165c:	29 f4       	brne	.+10     	; 0x1668 <DIO_ES_tSetPortDirection+0x8a>
			DDRB = 0xff;
    165e:	e7 e3       	ldi	r30, 0x37	; 55
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	8f ef       	ldi	r24, 0xFF	; 255
    1664:	80 83       	st	Z, r24
    1666:	1f c0       	rjmp	.+62     	; 0x16a6 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRB = 0x00;
    1668:	e7 e3       	ldi	r30, 0x37	; 55
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	10 82       	st	Z, r1
    166e:	1b c0       	rjmp	.+54     	; 0x16a6 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortDirection == OUTPUT)
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	81 30       	cpi	r24, 0x01	; 1
    1674:	29 f4       	brne	.+10     	; 0x1680 <DIO_ES_tSetPortDirection+0xa2>
			DDRC = 0xff;
    1676:	e4 e3       	ldi	r30, 0x34	; 52
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	8f ef       	ldi	r24, 0xFF	; 255
    167c:	80 83       	st	Z, r24
    167e:	13 c0       	rjmp	.+38     	; 0x16a6 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRC = 0x00;
    1680:	e4 e3       	ldi	r30, 0x34	; 52
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	10 82       	st	Z, r1
    1686:	0f c0       	rjmp	.+30     	; 0x16a6 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortDirection == OUTPUT)
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	81 30       	cpi	r24, 0x01	; 1
    168c:	29 f4       	brne	.+10     	; 0x1698 <DIO_ES_tSetPortDirection+0xba>
			DDRD = 0xff;
    168e:	e1 e3       	ldi	r30, 0x31	; 49
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	8f ef       	ldi	r24, 0xFF	; 255
    1694:	80 83       	st	Z, r24
    1696:	07 c0       	rjmp	.+14     	; 0x16a6 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRD = 0x00;
    1698:	e1 e3       	ldi	r30, 0x31	; 49
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	10 82       	st	Z, r1
    169e:	03 c0       	rjmp	.+6      	; 0x16a6 <DIO_ES_tSetPortDirection+0xc8>
		break;
	default:
		return ES_NOT_OK;
    16a0:	91 e0       	ldi	r25, 0x01	; 1
    16a2:	9d 83       	std	Y+5, r25	; 0x05
    16a4:	01 c0       	rjmp	.+2      	; 0x16a8 <DIO_ES_tSetPortDirection+0xca>
		break;
	}
	return ES_OK;
    16a6:	1d 82       	std	Y+5, r1	; 0x05
    16a8:	8d 81       	ldd	r24, Y+5	; 0x05
}
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

000016ba <DIO_ES_tSetPortValue>:



ES_t DIO_ES_tSetPortValue(DIO_U8_Port_Type copy_u8_PortId, u8 copy_u8_PortValue)
{
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	00 d0       	rcall	.+0      	; 0x16c0 <DIO_ES_tSetPortValue+0x6>
    16c0:	00 d0       	rcall	.+0      	; 0x16c2 <DIO_ES_tSetPortValue+0x8>
    16c2:	0f 92       	push	r0
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	89 83       	std	Y+1, r24	; 0x01
    16ca:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortValue != HIGH) && (copy_u8_PortValue != LOW)){
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	81 30       	cpi	r24, 0x01	; 1
    16d0:	31 f0       	breq	.+12     	; 0x16de <DIO_ES_tSetPortValue+0x24>
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	88 23       	and	r24, r24
    16d6:	19 f0       	breq	.+6      	; 0x16de <DIO_ES_tSetPortValue+0x24>
		return ES_NOT_OK;
    16d8:	21 e0       	ldi	r18, 0x01	; 1
    16da:	2d 83       	std	Y+5, r18	; 0x05
    16dc:	53 c0       	rjmp	.+166    	; 0x1784 <DIO_ES_tSetPortValue+0xca>
	}
	switch(copy_u8_PortId){
    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	28 2f       	mov	r18, r24
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	3c 83       	std	Y+4, r19	; 0x04
    16e6:	2b 83       	std	Y+3, r18	; 0x03
    16e8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ea:	9c 81       	ldd	r25, Y+4	; 0x04
    16ec:	81 30       	cpi	r24, 0x01	; 1
    16ee:	91 05       	cpc	r25, r1
    16f0:	09 f1       	breq	.+66     	; 0x1734 <DIO_ES_tSetPortValue+0x7a>
    16f2:	2b 81       	ldd	r18, Y+3	; 0x03
    16f4:	3c 81       	ldd	r19, Y+4	; 0x04
    16f6:	22 30       	cpi	r18, 0x02	; 2
    16f8:	31 05       	cpc	r19, r1
    16fa:	2c f4       	brge	.+10     	; 0x1706 <DIO_ES_tSetPortValue+0x4c>
    16fc:	8b 81       	ldd	r24, Y+3	; 0x03
    16fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1700:	00 97       	sbiw	r24, 0x00	; 0
    1702:	61 f0       	breq	.+24     	; 0x171c <DIO_ES_tSetPortValue+0x62>
    1704:	3b c0       	rjmp	.+118    	; 0x177c <DIO_ES_tSetPortValue+0xc2>
    1706:	2b 81       	ldd	r18, Y+3	; 0x03
    1708:	3c 81       	ldd	r19, Y+4	; 0x04
    170a:	22 30       	cpi	r18, 0x02	; 2
    170c:	31 05       	cpc	r19, r1
    170e:	f1 f0       	breq	.+60     	; 0x174c <DIO_ES_tSetPortValue+0x92>
    1710:	8b 81       	ldd	r24, Y+3	; 0x03
    1712:	9c 81       	ldd	r25, Y+4	; 0x04
    1714:	83 30       	cpi	r24, 0x03	; 3
    1716:	91 05       	cpc	r25, r1
    1718:	29 f1       	breq	.+74     	; 0x1764 <DIO_ES_tSetPortValue+0xaa>
    171a:	30 c0       	rjmp	.+96     	; 0x177c <DIO_ES_tSetPortValue+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortValue == HIGH)
    171c:	8a 81       	ldd	r24, Y+2	; 0x02
    171e:	81 30       	cpi	r24, 0x01	; 1
    1720:	29 f4       	brne	.+10     	; 0x172c <DIO_ES_tSetPortValue+0x72>
			PORTA = 0xff;
    1722:	eb e3       	ldi	r30, 0x3B	; 59
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	8f ef       	ldi	r24, 0xFF	; 255
    1728:	80 83       	st	Z, r24
    172a:	2b c0       	rjmp	.+86     	; 0x1782 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTA = 0x00;
    172c:	eb e3       	ldi	r30, 0x3B	; 59
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	10 82       	st	Z, r1
    1732:	27 c0       	rjmp	.+78     	; 0x1782 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortValue == HIGH)
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	81 30       	cpi	r24, 0x01	; 1
    1738:	29 f4       	brne	.+10     	; 0x1744 <DIO_ES_tSetPortValue+0x8a>
			PORTB = 0xff;
    173a:	e8 e3       	ldi	r30, 0x38	; 56
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	8f ef       	ldi	r24, 0xFF	; 255
    1740:	80 83       	st	Z, r24
    1742:	1f c0       	rjmp	.+62     	; 0x1782 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTB = 0x00;
    1744:	e8 e3       	ldi	r30, 0x38	; 56
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	10 82       	st	Z, r1
    174a:	1b c0       	rjmp	.+54     	; 0x1782 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortValue == HIGH)
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	81 30       	cpi	r24, 0x01	; 1
    1750:	29 f4       	brne	.+10     	; 0x175c <DIO_ES_tSetPortValue+0xa2>
			PORTC = 0xff;
    1752:	e5 e3       	ldi	r30, 0x35	; 53
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	8f ef       	ldi	r24, 0xFF	; 255
    1758:	80 83       	st	Z, r24
    175a:	13 c0       	rjmp	.+38     	; 0x1782 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTC = 0x00;
    175c:	e5 e3       	ldi	r30, 0x35	; 53
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	10 82       	st	Z, r1
    1762:	0f c0       	rjmp	.+30     	; 0x1782 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortValue == HIGH)
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	81 30       	cpi	r24, 0x01	; 1
    1768:	29 f4       	brne	.+10     	; 0x1774 <DIO_ES_tSetPortValue+0xba>
			PORTD = 0xff;
    176a:	e2 e3       	ldi	r30, 0x32	; 50
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	8f ef       	ldi	r24, 0xFF	; 255
    1770:	80 83       	st	Z, r24
    1772:	07 c0       	rjmp	.+14     	; 0x1782 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTD = 0x00;
    1774:	e2 e3       	ldi	r30, 0x32	; 50
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	10 82       	st	Z, r1
    177a:	03 c0       	rjmp	.+6      	; 0x1782 <DIO_ES_tSetPortValue+0xc8>
		break;
	default:
		return ES_NOT_OK;
    177c:	91 e0       	ldi	r25, 0x01	; 1
    177e:	9d 83       	std	Y+5, r25	; 0x05
    1780:	01 c0       	rjmp	.+2      	; 0x1784 <DIO_ES_tSetPortValue+0xca>
		break;
	}
	return ES_OK;
    1782:	1d 82       	std	Y+5, r1	; 0x05
    1784:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1786:	0f 90       	pop	r0
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	0f 90       	pop	r0
    1790:	cf 91       	pop	r28
    1792:	df 91       	pop	r29
    1794:	08 95       	ret

00001796 <DIO_ES_tTOGPin>:
/*
 * DIO_ES_tTOGPin is used to Toggle a specific pin
 */

ES_t DIO_ES_tTOGPin(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId)
{
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	00 d0       	rcall	.+0      	; 0x179c <DIO_ES_tTOGPin+0x6>
    179c:	0f 92       	push	r0
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
    17a2:	89 83       	std	Y+1, r24	; 0x01
    17a4:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8_PinId > PIN_LIMIT){
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	88 30       	cpi	r24, 0x08	; 8
    17aa:	18 f0       	brcs	.+6      	; 0x17b2 <DIO_ES_tTOGPin+0x1c>
		return ES_NOT_OK;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	8b 83       	std	Y+3, r24	; 0x03
    17b0:	60 c0       	rjmp	.+192    	; 0x1872 <DIO_ES_tTOGPin+0xdc>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	88 23       	and	r24, r24
    17b6:	a1 f4       	brne	.+40     	; 0x17e0 <DIO_ES_tTOGPin+0x4a>
		TOG_BIT(PORTA,copy_u8_PinId);
    17b8:	ab e3       	ldi	r26, 0x3B	; 59
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	eb e3       	ldi	r30, 0x3B	; 59
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	48 2f       	mov	r20, r24
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	02 2e       	mov	r0, r18
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <DIO_ES_tTOGPin+0x40>
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	0a 94       	dec	r0
    17d8:	e2 f7       	brpl	.-8      	; 0x17d2 <DIO_ES_tTOGPin+0x3c>
    17da:	84 27       	eor	r24, r20
    17dc:	8c 93       	st	X, r24
    17de:	48 c0       	rjmp	.+144    	; 0x1870 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	81 30       	cpi	r24, 0x01	; 1
    17e4:	a1 f4       	brne	.+40     	; 0x180e <DIO_ES_tTOGPin+0x78>
		TOG_BIT(PORTB,copy_u8_PinId);
    17e6:	a8 e3       	ldi	r26, 0x38	; 56
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e8 e3       	ldi	r30, 0x38	; 56
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	48 2f       	mov	r20, r24
    17f2:	8a 81       	ldd	r24, Y+2	; 0x02
    17f4:	28 2f       	mov	r18, r24
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	02 2e       	mov	r0, r18
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <DIO_ES_tTOGPin+0x6e>
    1800:	88 0f       	add	r24, r24
    1802:	99 1f       	adc	r25, r25
    1804:	0a 94       	dec	r0
    1806:	e2 f7       	brpl	.-8      	; 0x1800 <DIO_ES_tTOGPin+0x6a>
    1808:	84 27       	eor	r24, r20
    180a:	8c 93       	st	X, r24
    180c:	31 c0       	rjmp	.+98     	; 0x1870 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    180e:	89 81       	ldd	r24, Y+1	; 0x01
    1810:	82 30       	cpi	r24, 0x02	; 2
    1812:	a1 f4       	brne	.+40     	; 0x183c <DIO_ES_tTOGPin+0xa6>
		TOG_BIT(PORTC,copy_u8_PinId);
    1814:	a5 e3       	ldi	r26, 0x35	; 53
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	e5 e3       	ldi	r30, 0x35	; 53
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	48 2f       	mov	r20, r24
    1820:	8a 81       	ldd	r24, Y+2	; 0x02
    1822:	28 2f       	mov	r18, r24
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	02 2e       	mov	r0, r18
    182c:	02 c0       	rjmp	.+4      	; 0x1832 <DIO_ES_tTOGPin+0x9c>
    182e:	88 0f       	add	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	0a 94       	dec	r0
    1834:	e2 f7       	brpl	.-8      	; 0x182e <DIO_ES_tTOGPin+0x98>
    1836:	84 27       	eor	r24, r20
    1838:	8c 93       	st	X, r24
    183a:	1a c0       	rjmp	.+52     	; 0x1870 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	83 30       	cpi	r24, 0x03	; 3
    1840:	a1 f4       	brne	.+40     	; 0x186a <DIO_ES_tTOGPin+0xd4>
		TOG_BIT(PORTD,copy_u8_PinId);
    1842:	a2 e3       	ldi	r26, 0x32	; 50
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	e2 e3       	ldi	r30, 0x32	; 50
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	48 2f       	mov	r20, r24
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	02 2e       	mov	r0, r18
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <DIO_ES_tTOGPin+0xca>
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	0a 94       	dec	r0
    1862:	e2 f7       	brpl	.-8      	; 0x185c <DIO_ES_tTOGPin+0xc6>
    1864:	84 27       	eor	r24, r20
    1866:	8c 93       	st	X, r24
    1868:	03 c0       	rjmp	.+6      	; 0x1870 <DIO_ES_tTOGPin+0xda>
	}else{
		return ES_NOT_OK;
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	8b 83       	std	Y+3, r24	; 0x03
    186e:	01 c0       	rjmp	.+2      	; 0x1872 <DIO_ES_tTOGPin+0xdc>
	}
	return ES_OK;
    1870:	1b 82       	std	Y+3, r1	; 0x03
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	cf 91       	pop	r28
    187c:	df 91       	pop	r29
    187e:	08 95       	ret

00001880 <DIO_ES_tInit>:




ES_t DIO_ES_tInit(void)
{
    1880:	df 93       	push	r29
    1882:	cf 93       	push	r28
    1884:	00 d0       	rcall	.+0      	; 0x1886 <DIO_ES_tInit+0x6>
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
	int i = 0;
    188a:	1a 82       	std	Y+2, r1	; 0x02
    188c:	19 82       	std	Y+1, r1	; 0x01
	for(i=0 ; i<PIN_COUNT ; i++){
    188e:	1a 82       	std	Y+2, r1	; 0x02
    1890:	19 82       	std	Y+1, r1	; 0x01
    1892:	a3 c2       	rjmp	.+1350   	; 0x1dda <DIO_ES_tInit+0x55a>
		if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_A){
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	9a 81       	ldd	r25, Y+2	; 0x02
    1898:	88 0f       	add	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	88 0f       	add	r24, r24
    189e:	99 1f       	adc	r25, r25
    18a0:	fc 01       	movw	r30, r24
    18a2:	ed 57       	subi	r30, 0x7D	; 125
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	80 81       	ld	r24, Z
    18a8:	88 23       	and	r24, r24
    18aa:	09 f0       	breq	.+2      	; 0x18ae <DIO_ES_tInit+0x2e>
    18ac:	9b c0       	rjmp	.+310    	; 0x19e4 <DIO_ES_tInit+0x164>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	9a 81       	ldd	r25, Y+2	; 0x02
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	01 96       	adiw	r24, 0x01	; 1
    18b8:	88 0f       	add	r24, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	fc 01       	movw	r30, r24
    18be:	ed 57       	subi	r30, 0x7D	; 125
    18c0:	ff 4f       	sbci	r31, 0xFF	; 255
    18c2:	80 81       	ld	r24, Z
    18c4:	81 30       	cpi	r24, 0x01	; 1
    18c6:	e9 f4       	brne	.+58     	; 0x1902 <DIO_ES_tInit+0x82>
				SET_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    18c8:	aa e3       	ldi	r26, 0x3A	; 58
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	ea e3       	ldi	r30, 0x3A	; 58
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	48 2f       	mov	r20, r24
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	9a 81       	ldd	r25, Y+2	; 0x02
    18d8:	88 0f       	add	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	88 0f       	add	r24, r24
    18de:	99 1f       	adc	r25, r25
    18e0:	fc 01       	movw	r30, r24
    18e2:	ec 57       	subi	r30, 0x7C	; 124
    18e4:	ff 4f       	sbci	r31, 0xFF	; 255
    18e6:	80 81       	ld	r24, Z
    18e8:	28 2f       	mov	r18, r24
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	02 2e       	mov	r0, r18
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <DIO_ES_tInit+0x78>
    18f4:	88 0f       	add	r24, r24
    18f6:	99 1f       	adc	r25, r25
    18f8:	0a 94       	dec	r0
    18fa:	e2 f7       	brpl	.-8      	; 0x18f4 <DIO_ES_tInit+0x74>
    18fc:	84 2b       	or	r24, r20
    18fe:	8c 93       	st	X, r24
    1900:	67 c2       	rjmp	.+1230   	; 0x1dd0 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    1902:	aa e3       	ldi	r26, 0x3A	; 58
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	ea e3       	ldi	r30, 0x3A	; 58
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	48 2f       	mov	r20, r24
    190e:	89 81       	ldd	r24, Y+1	; 0x01
    1910:	9a 81       	ldd	r25, Y+2	; 0x02
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	88 0f       	add	r24, r24
    1918:	99 1f       	adc	r25, r25
    191a:	fc 01       	movw	r30, r24
    191c:	ec 57       	subi	r30, 0x7C	; 124
    191e:	ff 4f       	sbci	r31, 0xFF	; 255
    1920:	80 81       	ld	r24, Z
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	02 2e       	mov	r0, r18
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <DIO_ES_tInit+0xb2>
    192e:	88 0f       	add	r24, r24
    1930:	99 1f       	adc	r25, r25
    1932:	0a 94       	dec	r0
    1934:	e2 f7       	brpl	.-8      	; 0x192e <DIO_ES_tInit+0xae>
    1936:	80 95       	com	r24
    1938:	84 23       	and	r24, r20
    193a:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	9a 81       	ldd	r25, Y+2	; 0x02
    1940:	88 0f       	add	r24, r24
    1942:	99 1f       	adc	r25, r25
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	fc 01       	movw	r30, r24
    194a:	ea 57       	subi	r30, 0x7A	; 122
    194c:	ff 4f       	sbci	r31, 0xFF	; 255
    194e:	80 81       	ld	r24, Z
    1950:	81 30       	cpi	r24, 0x01	; 1
    1952:	e9 f4       	brne	.+58     	; 0x198e <DIO_ES_tInit+0x10e>
					SET_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    1954:	ab e3       	ldi	r26, 0x3B	; 59
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	eb e3       	ldi	r30, 0x3B	; 59
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	48 2f       	mov	r20, r24
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	9a 81       	ldd	r25, Y+2	; 0x02
    1964:	88 0f       	add	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	88 0f       	add	r24, r24
    196a:	99 1f       	adc	r25, r25
    196c:	fc 01       	movw	r30, r24
    196e:	ec 57       	subi	r30, 0x7C	; 124
    1970:	ff 4f       	sbci	r31, 0xFF	; 255
    1972:	80 81       	ld	r24, Z
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	02 2e       	mov	r0, r18
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <DIO_ES_tInit+0x104>
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	0a 94       	dec	r0
    1986:	e2 f7       	brpl	.-8      	; 0x1980 <DIO_ES_tInit+0x100>
    1988:	84 2b       	or	r24, r20
    198a:	8c 93       	st	X, r24
    198c:	21 c2       	rjmp	.+1090   	; 0x1dd0 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    198e:	89 81       	ldd	r24, Y+1	; 0x01
    1990:	9a 81       	ldd	r25, Y+2	; 0x02
    1992:	88 0f       	add	r24, r24
    1994:	99 1f       	adc	r25, r25
    1996:	88 0f       	add	r24, r24
    1998:	99 1f       	adc	r25, r25
    199a:	fc 01       	movw	r30, r24
    199c:	ea 57       	subi	r30, 0x7A	; 122
    199e:	ff 4f       	sbci	r31, 0xFF	; 255
    19a0:	80 81       	ld	r24, Z
    19a2:	88 23       	and	r24, r24
    19a4:	09 f0       	breq	.+2      	; 0x19a8 <DIO_ES_tInit+0x128>
    19a6:	14 c2       	rjmp	.+1064   	; 0x1dd0 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    19a8:	ab e3       	ldi	r26, 0x3B	; 59
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	eb e3       	ldi	r30, 0x3B	; 59
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	48 2f       	mov	r20, r24
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
    19b6:	9a 81       	ldd	r25, Y+2	; 0x02
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	88 0f       	add	r24, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	fc 01       	movw	r30, r24
    19c2:	ec 57       	subi	r30, 0x7C	; 124
    19c4:	ff 4f       	sbci	r31, 0xFF	; 255
    19c6:	80 81       	ld	r24, Z
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	02 2e       	mov	r0, r18
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <DIO_ES_tInit+0x158>
    19d4:	88 0f       	add	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	0a 94       	dec	r0
    19da:	e2 f7       	brpl	.-8      	; 0x19d4 <DIO_ES_tInit+0x154>
    19dc:	80 95       	com	r24
    19de:	84 23       	and	r24, r20
    19e0:	8c 93       	st	X, r24
    19e2:	f6 c1       	rjmp	.+1004   	; 0x1dd0 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_B){
    19e4:	89 81       	ldd	r24, Y+1	; 0x01
    19e6:	9a 81       	ldd	r25, Y+2	; 0x02
    19e8:	88 0f       	add	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	fc 01       	movw	r30, r24
    19f2:	ed 57       	subi	r30, 0x7D	; 125
    19f4:	ff 4f       	sbci	r31, 0xFF	; 255
    19f6:	80 81       	ld	r24, Z
    19f8:	81 30       	cpi	r24, 0x01	; 1
    19fa:	09 f0       	breq	.+2      	; 0x19fe <DIO_ES_tInit+0x17e>
    19fc:	9b c0       	rjmp	.+310    	; 0x1b34 <DIO_ES_tInit+0x2b4>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	9a 81       	ldd	r25, Y+2	; 0x02
    1a02:	88 0f       	add	r24, r24
    1a04:	99 1f       	adc	r25, r25
    1a06:	01 96       	adiw	r24, 0x01	; 1
    1a08:	88 0f       	add	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	ed 57       	subi	r30, 0x7D	; 125
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	80 81       	ld	r24, Z
    1a14:	81 30       	cpi	r24, 0x01	; 1
    1a16:	e9 f4       	brne	.+58     	; 0x1a52 <DIO_ES_tInit+0x1d2>
				SET_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    1a18:	a7 e3       	ldi	r26, 0x37	; 55
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	e7 e3       	ldi	r30, 0x37	; 55
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	48 2f       	mov	r20, r24
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	9a 81       	ldd	r25, Y+2	; 0x02
    1a28:	88 0f       	add	r24, r24
    1a2a:	99 1f       	adc	r25, r25
    1a2c:	88 0f       	add	r24, r24
    1a2e:	99 1f       	adc	r25, r25
    1a30:	fc 01       	movw	r30, r24
    1a32:	ec 57       	subi	r30, 0x7C	; 124
    1a34:	ff 4f       	sbci	r31, 0xFF	; 255
    1a36:	80 81       	ld	r24, Z
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	02 2e       	mov	r0, r18
    1a42:	02 c0       	rjmp	.+4      	; 0x1a48 <DIO_ES_tInit+0x1c8>
    1a44:	88 0f       	add	r24, r24
    1a46:	99 1f       	adc	r25, r25
    1a48:	0a 94       	dec	r0
    1a4a:	e2 f7       	brpl	.-8      	; 0x1a44 <DIO_ES_tInit+0x1c4>
    1a4c:	84 2b       	or	r24, r20
    1a4e:	8c 93       	st	X, r24
    1a50:	bf c1       	rjmp	.+894    	; 0x1dd0 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    1a52:	a7 e3       	ldi	r26, 0x37	; 55
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	e7 e3       	ldi	r30, 0x37	; 55
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	48 2f       	mov	r20, r24
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	9a 81       	ldd	r25, Y+2	; 0x02
    1a62:	88 0f       	add	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	88 0f       	add	r24, r24
    1a68:	99 1f       	adc	r25, r25
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	ec 57       	subi	r30, 0x7C	; 124
    1a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a70:	80 81       	ld	r24, Z
    1a72:	28 2f       	mov	r18, r24
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	02 2e       	mov	r0, r18
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <DIO_ES_tInit+0x202>
    1a7e:	88 0f       	add	r24, r24
    1a80:	99 1f       	adc	r25, r25
    1a82:	0a 94       	dec	r0
    1a84:	e2 f7       	brpl	.-8      	; 0x1a7e <DIO_ES_tInit+0x1fe>
    1a86:	80 95       	com	r24
    1a88:	84 23       	and	r24, r20
    1a8a:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a90:	88 0f       	add	r24, r24
    1a92:	99 1f       	adc	r25, r25
    1a94:	88 0f       	add	r24, r24
    1a96:	99 1f       	adc	r25, r25
    1a98:	fc 01       	movw	r30, r24
    1a9a:	ea 57       	subi	r30, 0x7A	; 122
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	80 81       	ld	r24, Z
    1aa0:	81 30       	cpi	r24, 0x01	; 1
    1aa2:	e9 f4       	brne	.+58     	; 0x1ade <DIO_ES_tInit+0x25e>
					SET_BIT(PORTB,Dio_CfgPinsArray[i].Pin);
    1aa4:	a8 e3       	ldi	r26, 0x38	; 56
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	e8 e3       	ldi	r30, 0x38	; 56
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	48 2f       	mov	r20, r24
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
    1ab2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab4:	88 0f       	add	r24, r24
    1ab6:	99 1f       	adc	r25, r25
    1ab8:	88 0f       	add	r24, r24
    1aba:	99 1f       	adc	r25, r25
    1abc:	fc 01       	movw	r30, r24
    1abe:	ec 57       	subi	r30, 0x7C	; 124
    1ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac2:	80 81       	ld	r24, Z
    1ac4:	28 2f       	mov	r18, r24
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	02 2e       	mov	r0, r18
    1ace:	02 c0       	rjmp	.+4      	; 0x1ad4 <DIO_ES_tInit+0x254>
    1ad0:	88 0f       	add	r24, r24
    1ad2:	99 1f       	adc	r25, r25
    1ad4:	0a 94       	dec	r0
    1ad6:	e2 f7       	brpl	.-8      	; 0x1ad0 <DIO_ES_tInit+0x250>
    1ad8:	84 2b       	or	r24, r20
    1ada:	8c 93       	st	X, r24
    1adc:	79 c1       	rjmp	.+754    	; 0x1dd0 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    1ade:	89 81       	ldd	r24, Y+1	; 0x01
    1ae0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae2:	88 0f       	add	r24, r24
    1ae4:	99 1f       	adc	r25, r25
    1ae6:	88 0f       	add	r24, r24
    1ae8:	99 1f       	adc	r25, r25
    1aea:	fc 01       	movw	r30, r24
    1aec:	ea 57       	subi	r30, 0x7A	; 122
    1aee:	ff 4f       	sbci	r31, 0xFF	; 255
    1af0:	80 81       	ld	r24, Z
    1af2:	88 23       	and	r24, r24
    1af4:	09 f0       	breq	.+2      	; 0x1af8 <DIO_ES_tInit+0x278>
    1af6:	6c c1       	rjmp	.+728    	; 0x1dd0 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    1af8:	ab e3       	ldi	r26, 0x3B	; 59
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	eb e3       	ldi	r30, 0x3B	; 59
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	48 2f       	mov	r20, r24
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
    1b06:	9a 81       	ldd	r25, Y+2	; 0x02
    1b08:	88 0f       	add	r24, r24
    1b0a:	99 1f       	adc	r25, r25
    1b0c:	88 0f       	add	r24, r24
    1b0e:	99 1f       	adc	r25, r25
    1b10:	fc 01       	movw	r30, r24
    1b12:	ec 57       	subi	r30, 0x7C	; 124
    1b14:	ff 4f       	sbci	r31, 0xFF	; 255
    1b16:	80 81       	ld	r24, Z
    1b18:	28 2f       	mov	r18, r24
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	02 2e       	mov	r0, r18
    1b22:	02 c0       	rjmp	.+4      	; 0x1b28 <DIO_ES_tInit+0x2a8>
    1b24:	88 0f       	add	r24, r24
    1b26:	99 1f       	adc	r25, r25
    1b28:	0a 94       	dec	r0
    1b2a:	e2 f7       	brpl	.-8      	; 0x1b24 <DIO_ES_tInit+0x2a4>
    1b2c:	80 95       	com	r24
    1b2e:	84 23       	and	r24, r20
    1b30:	8c 93       	st	X, r24
    1b32:	4e c1       	rjmp	.+668    	; 0x1dd0 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_C){
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	9a 81       	ldd	r25, Y+2	; 0x02
    1b38:	88 0f       	add	r24, r24
    1b3a:	99 1f       	adc	r25, r25
    1b3c:	88 0f       	add	r24, r24
    1b3e:	99 1f       	adc	r25, r25
    1b40:	fc 01       	movw	r30, r24
    1b42:	ed 57       	subi	r30, 0x7D	; 125
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
    1b46:	80 81       	ld	r24, Z
    1b48:	82 30       	cpi	r24, 0x02	; 2
    1b4a:	09 f0       	breq	.+2      	; 0x1b4e <DIO_ES_tInit+0x2ce>
    1b4c:	9b c0       	rjmp	.+310    	; 0x1c84 <DIO_ES_tInit+0x404>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	9a 81       	ldd	r25, Y+2	; 0x02
    1b52:	88 0f       	add	r24, r24
    1b54:	99 1f       	adc	r25, r25
    1b56:	01 96       	adiw	r24, 0x01	; 1
    1b58:	88 0f       	add	r24, r24
    1b5a:	99 1f       	adc	r25, r25
    1b5c:	fc 01       	movw	r30, r24
    1b5e:	ed 57       	subi	r30, 0x7D	; 125
    1b60:	ff 4f       	sbci	r31, 0xFF	; 255
    1b62:	80 81       	ld	r24, Z
    1b64:	81 30       	cpi	r24, 0x01	; 1
    1b66:	e9 f4       	brne	.+58     	; 0x1ba2 <DIO_ES_tInit+0x322>
				SET_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    1b68:	a4 e3       	ldi	r26, 0x34	; 52
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	e4 e3       	ldi	r30, 0x34	; 52
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	48 2f       	mov	r20, r24
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	9a 81       	ldd	r25, Y+2	; 0x02
    1b78:	88 0f       	add	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	88 0f       	add	r24, r24
    1b7e:	99 1f       	adc	r25, r25
    1b80:	fc 01       	movw	r30, r24
    1b82:	ec 57       	subi	r30, 0x7C	; 124
    1b84:	ff 4f       	sbci	r31, 0xFF	; 255
    1b86:	80 81       	ld	r24, Z
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	02 2e       	mov	r0, r18
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <DIO_ES_tInit+0x318>
    1b94:	88 0f       	add	r24, r24
    1b96:	99 1f       	adc	r25, r25
    1b98:	0a 94       	dec	r0
    1b9a:	e2 f7       	brpl	.-8      	; 0x1b94 <DIO_ES_tInit+0x314>
    1b9c:	84 2b       	or	r24, r20
    1b9e:	8c 93       	st	X, r24
    1ba0:	17 c1       	rjmp	.+558    	; 0x1dd0 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    1ba2:	a4 e3       	ldi	r26, 0x34	; 52
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	e4 e3       	ldi	r30, 0x34	; 52
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	48 2f       	mov	r20, r24
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
    1bb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb2:	88 0f       	add	r24, r24
    1bb4:	99 1f       	adc	r25, r25
    1bb6:	88 0f       	add	r24, r24
    1bb8:	99 1f       	adc	r25, r25
    1bba:	fc 01       	movw	r30, r24
    1bbc:	ec 57       	subi	r30, 0x7C	; 124
    1bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc0:	80 81       	ld	r24, Z
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	02 2e       	mov	r0, r18
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <DIO_ES_tInit+0x352>
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	0a 94       	dec	r0
    1bd4:	e2 f7       	brpl	.-8      	; 0x1bce <DIO_ES_tInit+0x34e>
    1bd6:	80 95       	com	r24
    1bd8:	84 23       	and	r24, r20
    1bda:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	9a 81       	ldd	r25, Y+2	; 0x02
    1be0:	88 0f       	add	r24, r24
    1be2:	99 1f       	adc	r25, r25
    1be4:	88 0f       	add	r24, r24
    1be6:	99 1f       	adc	r25, r25
    1be8:	fc 01       	movw	r30, r24
    1bea:	ea 57       	subi	r30, 0x7A	; 122
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	80 81       	ld	r24, Z
    1bf0:	81 30       	cpi	r24, 0x01	; 1
    1bf2:	e9 f4       	brne	.+58     	; 0x1c2e <DIO_ES_tInit+0x3ae>
					SET_BIT(PORTC,Dio_CfgPinsArray[i].Pin);
    1bf4:	a5 e3       	ldi	r26, 0x35	; 53
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	e5 e3       	ldi	r30, 0x35	; 53
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	48 2f       	mov	r20, r24
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	9a 81       	ldd	r25, Y+2	; 0x02
    1c04:	88 0f       	add	r24, r24
    1c06:	99 1f       	adc	r25, r25
    1c08:	88 0f       	add	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	ec 57       	subi	r30, 0x7C	; 124
    1c10:	ff 4f       	sbci	r31, 0xFF	; 255
    1c12:	80 81       	ld	r24, Z
    1c14:	28 2f       	mov	r18, r24
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	02 2e       	mov	r0, r18
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <DIO_ES_tInit+0x3a4>
    1c20:	88 0f       	add	r24, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	0a 94       	dec	r0
    1c26:	e2 f7       	brpl	.-8      	; 0x1c20 <DIO_ES_tInit+0x3a0>
    1c28:	84 2b       	or	r24, r20
    1c2a:	8c 93       	st	X, r24
    1c2c:	d1 c0       	rjmp	.+418    	; 0x1dd0 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
    1c30:	9a 81       	ldd	r25, Y+2	; 0x02
    1c32:	88 0f       	add	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	88 0f       	add	r24, r24
    1c38:	99 1f       	adc	r25, r25
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	ea 57       	subi	r30, 0x7A	; 122
    1c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c40:	80 81       	ld	r24, Z
    1c42:	88 23       	and	r24, r24
    1c44:	09 f0       	breq	.+2      	; 0x1c48 <DIO_ES_tInit+0x3c8>
    1c46:	c4 c0       	rjmp	.+392    	; 0x1dd0 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    1c48:	ab e3       	ldi	r26, 0x3B	; 59
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	eb e3       	ldi	r30, 0x3B	; 59
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	48 2f       	mov	r20, r24
    1c54:	89 81       	ldd	r24, Y+1	; 0x01
    1c56:	9a 81       	ldd	r25, Y+2	; 0x02
    1c58:	88 0f       	add	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	88 0f       	add	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	fc 01       	movw	r30, r24
    1c62:	ec 57       	subi	r30, 0x7C	; 124
    1c64:	ff 4f       	sbci	r31, 0xFF	; 255
    1c66:	80 81       	ld	r24, Z
    1c68:	28 2f       	mov	r18, r24
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	02 2e       	mov	r0, r18
    1c72:	02 c0       	rjmp	.+4      	; 0x1c78 <DIO_ES_tInit+0x3f8>
    1c74:	88 0f       	add	r24, r24
    1c76:	99 1f       	adc	r25, r25
    1c78:	0a 94       	dec	r0
    1c7a:	e2 f7       	brpl	.-8      	; 0x1c74 <DIO_ES_tInit+0x3f4>
    1c7c:	80 95       	com	r24
    1c7e:	84 23       	and	r24, r20
    1c80:	8c 93       	st	X, r24
    1c82:	a6 c0       	rjmp	.+332    	; 0x1dd0 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_D){
    1c84:	89 81       	ldd	r24, Y+1	; 0x01
    1c86:	9a 81       	ldd	r25, Y+2	; 0x02
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	88 0f       	add	r24, r24
    1c8e:	99 1f       	adc	r25, r25
    1c90:	fc 01       	movw	r30, r24
    1c92:	ed 57       	subi	r30, 0x7D	; 125
    1c94:	ff 4f       	sbci	r31, 0xFF	; 255
    1c96:	80 81       	ld	r24, Z
    1c98:	83 30       	cpi	r24, 0x03	; 3
    1c9a:	09 f0       	breq	.+2      	; 0x1c9e <DIO_ES_tInit+0x41e>
    1c9c:	99 c0       	rjmp	.+306    	; 0x1dd0 <DIO_ES_tInit+0x550>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca2:	88 0f       	add	r24, r24
    1ca4:	99 1f       	adc	r25, r25
    1ca6:	01 96       	adiw	r24, 0x01	; 1
    1ca8:	88 0f       	add	r24, r24
    1caa:	99 1f       	adc	r25, r25
    1cac:	fc 01       	movw	r30, r24
    1cae:	ed 57       	subi	r30, 0x7D	; 125
    1cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb2:	80 81       	ld	r24, Z
    1cb4:	81 30       	cpi	r24, 0x01	; 1
    1cb6:	e9 f4       	brne	.+58     	; 0x1cf2 <DIO_ES_tInit+0x472>
				SET_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    1cb8:	a1 e3       	ldi	r26, 0x31	; 49
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	e1 e3       	ldi	r30, 0x31	; 49
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	48 2f       	mov	r20, r24
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
    1cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc8:	88 0f       	add	r24, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	88 0f       	add	r24, r24
    1cce:	99 1f       	adc	r25, r25
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	ec 57       	subi	r30, 0x7C	; 124
    1cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd6:	80 81       	ld	r24, Z
    1cd8:	28 2f       	mov	r18, r24
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	02 2e       	mov	r0, r18
    1ce2:	02 c0       	rjmp	.+4      	; 0x1ce8 <DIO_ES_tInit+0x468>
    1ce4:	88 0f       	add	r24, r24
    1ce6:	99 1f       	adc	r25, r25
    1ce8:	0a 94       	dec	r0
    1cea:	e2 f7       	brpl	.-8      	; 0x1ce4 <DIO_ES_tInit+0x464>
    1cec:	84 2b       	or	r24, r20
    1cee:	8c 93       	st	X, r24
    1cf0:	6f c0       	rjmp	.+222    	; 0x1dd0 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    1cf2:	a1 e3       	ldi	r26, 0x31	; 49
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	e1 e3       	ldi	r30, 0x31	; 49
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	48 2f       	mov	r20, r24
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	9a 81       	ldd	r25, Y+2	; 0x02
    1d02:	88 0f       	add	r24, r24
    1d04:	99 1f       	adc	r25, r25
    1d06:	88 0f       	add	r24, r24
    1d08:	99 1f       	adc	r25, r25
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	ec 57       	subi	r30, 0x7C	; 124
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	80 81       	ld	r24, Z
    1d12:	28 2f       	mov	r18, r24
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	02 2e       	mov	r0, r18
    1d1c:	02 c0       	rjmp	.+4      	; 0x1d22 <DIO_ES_tInit+0x4a2>
    1d1e:	88 0f       	add	r24, r24
    1d20:	99 1f       	adc	r25, r25
    1d22:	0a 94       	dec	r0
    1d24:	e2 f7       	brpl	.-8      	; 0x1d1e <DIO_ES_tInit+0x49e>
    1d26:	80 95       	com	r24
    1d28:	84 23       	and	r24, r20
    1d2a:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
    1d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d30:	88 0f       	add	r24, r24
    1d32:	99 1f       	adc	r25, r25
    1d34:	88 0f       	add	r24, r24
    1d36:	99 1f       	adc	r25, r25
    1d38:	fc 01       	movw	r30, r24
    1d3a:	ea 57       	subi	r30, 0x7A	; 122
    1d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3e:	80 81       	ld	r24, Z
    1d40:	81 30       	cpi	r24, 0x01	; 1
    1d42:	e9 f4       	brne	.+58     	; 0x1d7e <DIO_ES_tInit+0x4fe>
					SET_BIT(PORTD,Dio_CfgPinsArray[i].Pin);
    1d44:	a2 e3       	ldi	r26, 0x32	; 50
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	e2 e3       	ldi	r30, 0x32	; 50
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	48 2f       	mov	r20, r24
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	9a 81       	ldd	r25, Y+2	; 0x02
    1d54:	88 0f       	add	r24, r24
    1d56:	99 1f       	adc	r25, r25
    1d58:	88 0f       	add	r24, r24
    1d5a:	99 1f       	adc	r25, r25
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	ec 57       	subi	r30, 0x7C	; 124
    1d60:	ff 4f       	sbci	r31, 0xFF	; 255
    1d62:	80 81       	ld	r24, Z
    1d64:	28 2f       	mov	r18, r24
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	02 2e       	mov	r0, r18
    1d6e:	02 c0       	rjmp	.+4      	; 0x1d74 <DIO_ES_tInit+0x4f4>
    1d70:	88 0f       	add	r24, r24
    1d72:	99 1f       	adc	r25, r25
    1d74:	0a 94       	dec	r0
    1d76:	e2 f7       	brpl	.-8      	; 0x1d70 <DIO_ES_tInit+0x4f0>
    1d78:	84 2b       	or	r24, r20
    1d7a:	8c 93       	st	X, r24
    1d7c:	29 c0       	rjmp	.+82     	; 0x1dd0 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    1d7e:	89 81       	ldd	r24, Y+1	; 0x01
    1d80:	9a 81       	ldd	r25, Y+2	; 0x02
    1d82:	88 0f       	add	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	88 0f       	add	r24, r24
    1d88:	99 1f       	adc	r25, r25
    1d8a:	fc 01       	movw	r30, r24
    1d8c:	ea 57       	subi	r30, 0x7A	; 122
    1d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d90:	80 81       	ld	r24, Z
    1d92:	88 23       	and	r24, r24
    1d94:	e9 f4       	brne	.+58     	; 0x1dd0 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    1d96:	ab e3       	ldi	r26, 0x3B	; 59
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	eb e3       	ldi	r30, 0x3B	; 59
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	48 2f       	mov	r20, r24
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	9a 81       	ldd	r25, Y+2	; 0x02
    1da6:	88 0f       	add	r24, r24
    1da8:	99 1f       	adc	r25, r25
    1daa:	88 0f       	add	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	fc 01       	movw	r30, r24
    1db0:	ec 57       	subi	r30, 0x7C	; 124
    1db2:	ff 4f       	sbci	r31, 0xFF	; 255
    1db4:	80 81       	ld	r24, Z
    1db6:	28 2f       	mov	r18, r24
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	02 2e       	mov	r0, r18
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <DIO_ES_tInit+0x546>
    1dc2:	88 0f       	add	r24, r24
    1dc4:	99 1f       	adc	r25, r25
    1dc6:	0a 94       	dec	r0
    1dc8:	e2 f7       	brpl	.-8      	; 0x1dc2 <DIO_ES_tInit+0x542>
    1dca:	80 95       	com	r24
    1dcc:	84 23       	and	r24, r20
    1dce:	8c 93       	st	X, r24


ES_t DIO_ES_tInit(void)
{
	int i = 0;
	for(i=0 ; i<PIN_COUNT ; i++){
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
    1dd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd4:	01 96       	adiw	r24, 0x01	; 1
    1dd6:	9a 83       	std	Y+2, r25	; 0x02
    1dd8:	89 83       	std	Y+1, r24	; 0x01
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dde:	88 31       	cpi	r24, 0x18	; 24
    1de0:	91 05       	cpc	r25, r1
    1de2:	0c f4       	brge	.+2      	; 0x1de6 <DIO_ES_tInit+0x566>
    1de4:	57 cd       	rjmp	.-1362   	; 0x1894 <DIO_ES_tInit+0x14>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
				}
			}
		}
	}
	return ES_OK;
    1de6:	80 e0       	ldi	r24, 0x00	; 0
}
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	08 95       	ret

00001df2 <ADC_init>:
 * 4)SET the ADPS1,ADPS2 (from data sheet)
 * 5)Choose the reference voltage, we choose the internal voltage 2.65v
 * 6)SET REFS1,REFS0 in ADMUX
 */

void ADC_init(void){
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62
	//ADCSRA |= (1<<ADEN) | (1<<ADPS1) | (1<<ADPS2);
	//ADMUX |= (1<<REFS1) | (1<<REFS0);
#if	ADC_ENABLE == ENABLE
	SET_BIT(ADCSRA,ADEN);  // Enable the ADC
    1dfa:	a6 e2       	ldi	r26, 0x26	; 38
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	e6 e2       	ldi	r30, 0x26	; 38
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	80 68       	ori	r24, 0x80	; 128
    1e06:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS2);
#elif Prescalar_Type == Prescalar_64
	SET_BIT(ADCSRA,ADPS1); // Choose the Prescalar
	SET_BIT(ADCSRA,ADPS2);
#elif Prescalar_Type == Prescalar_128
	SET_BIT(ADCSRA,ADPS0);
    1e08:	a6 e2       	ldi	r26, 0x26	; 38
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	e6 e2       	ldi	r30, 0x26	; 38
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	81 60       	ori	r24, 0x01	; 1
    1e14:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
    1e16:	a6 e2       	ldi	r26, 0x26	; 38
    1e18:	b0 e0       	ldi	r27, 0x00	; 0
    1e1a:	e6 e2       	ldi	r30, 0x26	; 38
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	80 81       	ld	r24, Z
    1e20:	82 60       	ori	r24, 0x02	; 2
    1e22:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS2);
    1e24:	a6 e2       	ldi	r26, 0x26	; 38
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	e6 e2       	ldi	r30, 0x26	; 38
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	84 60       	ori	r24, 0x04	; 4
    1e30:	8c 93       	st	X, r24

#if ADC_SOURCE == ADC_SOURCE_VREF
	CLR_BIT(ADMUX,REFS0);
	CLR_BIT(ADMUX,REFS1);
#elif ADC_SOURCE == ADC_SOURCE_AVCC
	SET_BIT(ADMUX,REFS0);
    1e32:	a7 e2       	ldi	r26, 0x27	; 39
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	e7 e2       	ldi	r30, 0x27	; 39
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	80 64       	ori	r24, 0x40	; 64
    1e3e:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,REFS1);
    1e40:	a7 e2       	ldi	r26, 0x27	; 39
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	e7 e2       	ldi	r30, 0x27	; 39
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	8f 77       	andi	r24, 0x7F	; 127
    1e4c:	8c 93       	st	X, r24
	SET_BIT(ADMUX,REFS0);
	SET_BIT(ADMUX,REFS1);
#endif

#endif
}
    1e4e:	cf 91       	pop	r28
    1e50:	df 91       	pop	r29
    1e52:	08 95       	ret

00001e54 <ADC_read>:

 */



u16 ADC_read(u8 channel) {
    1e54:	df 93       	push	r29
    1e56:	cf 93       	push	r28
    1e58:	00 d0       	rcall	.+0      	; 0x1e5a <ADC_read+0x6>
    1e5a:	00 d0       	rcall	.+0      	; 0x1e5c <ADC_read+0x8>
    1e5c:	0f 92       	push	r0
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
    1e62:	8d 83       	std	Y+5, r24	; 0x05
	// Select ADC channel with safety mask
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
    1e64:	a7 e2       	ldi	r26, 0x27	; 39
    1e66:	b0 e0       	ldi	r27, 0x00	; 0
    1e68:	e7 e2       	ldi	r30, 0x27	; 39
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	98 2f       	mov	r25, r24
    1e70:	90 7f       	andi	r25, 0xF0	; 240
    1e72:	8d 81       	ldd	r24, Y+5	; 0x05
    1e74:	8f 70       	andi	r24, 0x0F	; 15
    1e76:	89 2b       	or	r24, r25
    1e78:	8c 93       	st	X, r24
	// Start single conversion
	ADCSRA |= (1 << ADSC);
    1e7a:	a6 e2       	ldi	r26, 0x26	; 38
    1e7c:	b0 e0       	ldi	r27, 0x00	; 0
    1e7e:	e6 e2       	ldi	r30, 0x26	; 38
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	80 64       	ori	r24, 0x40	; 64
    1e86:	8c 93       	st	X, r24
	// Wait for conversion to complete
	while (!GET_BIT(ADCSRA,ADIF));
    1e88:	e6 e2       	ldi	r30, 0x26	; 38
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	82 95       	swap	r24
    1e90:	8f 70       	andi	r24, 0x0F	; 15
    1e92:	88 2f       	mov	r24, r24
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	81 70       	andi	r24, 0x01	; 1
    1e98:	90 70       	andi	r25, 0x00	; 0
    1e9a:	00 97       	sbiw	r24, 0x00	; 0
    1e9c:	a9 f3       	breq	.-22     	; 0x1e88 <ADC_read+0x34>
	CLR_BIT(ADCSRA,ADIF);
    1e9e:	a6 e2       	ldi	r26, 0x26	; 38
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	e6 e2       	ldi	r30, 0x26	; 38
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	8f 7e       	andi	r24, 0xEF	; 239
    1eaa:	8c 93       	st	X, r24

	u8 lowByte = ADCL;
    1eac:	e4 e2       	ldi	r30, 0x24	; 36
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	8c 83       	std	Y+4, r24	; 0x04
	u8 highByte = ADCH;
    1eb4:	e5 e2       	ldi	r30, 0x25	; 37
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	8b 83       	std	Y+3, r24	; 0x03

	// Combine the two 8-bit registers to get the 10-bit ADC result
	u16 result = (highByte << 8) | lowByte;
    1ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebe:	88 2f       	mov	r24, r24
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	38 2f       	mov	r19, r24
    1ec4:	22 27       	eor	r18, r18
    1ec6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec8:	88 2f       	mov	r24, r24
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	82 2b       	or	r24, r18
    1ece:	93 2b       	or	r25, r19
    1ed0:	9a 83       	std	Y+2, r25	; 0x02
    1ed2:	89 83       	std	Y+1, r24	; 0x01


	return result;
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	cf 91       	pop	r28
    1ee4:	df 91       	pop	r29
    1ee6:	08 95       	ret

00001ee8 <LCD_ES_tTrigger_Enable>:
//ProtoType of static is defined in source file itself(Private declaration)
static ES_t LCD_ES_tTrigger_Enable(void);
static ES_t LCD_ES_tSet_Cursor_Pos(u8 row,u8 column);

//We make it static cuz we won't use it anywhere but here
static ES_t LCD_ES_tTrigger_Enable(void){
    1ee8:	df 93       	push	r29
    1eea:	cf 93       	push	r28
    1eec:	cd b7       	in	r28, 0x3d	; 61
    1eee:	de b7       	in	r29, 0x3e	; 62
    1ef0:	e0 97       	sbiw	r28, 0x30	; 48
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	f8 94       	cli
    1ef6:	de bf       	out	0x3e, r29	; 62
    1ef8:	0f be       	out	0x3f, r0	; 63
    1efa:	cd bf       	out	0x3d, r28	; 61
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, HIGH);
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	63 e0       	ldi	r22, 0x03	; 3
    1f00:	41 e0       	ldi	r20, 0x01	; 1
    1f02:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    1f06:	80 e0       	ldi	r24, 0x00	; 0
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	a0 e2       	ldi	r26, 0x20	; 32
    1f0c:	b1 e4       	ldi	r27, 0x41	; 65
    1f0e:	8d a7       	std	Y+45, r24	; 0x2d
    1f10:	9e a7       	std	Y+46, r25	; 0x2e
    1f12:	af a7       	std	Y+47, r26	; 0x2f
    1f14:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f16:	6d a5       	ldd	r22, Y+45	; 0x2d
    1f18:	7e a5       	ldd	r23, Y+46	; 0x2e
    1f1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f1c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f1e:	2b ea       	ldi	r18, 0xAB	; 171
    1f20:	3a ea       	ldi	r19, 0xAA	; 170
    1f22:	4a ea       	ldi	r20, 0xAA	; 170
    1f24:	50 e4       	ldi	r21, 0x40	; 64
    1f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	89 a7       	std	Y+41, r24	; 0x29
    1f30:	9a a7       	std	Y+42, r25	; 0x2a
    1f32:	ab a7       	std	Y+43, r26	; 0x2b
    1f34:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1f36:	69 a5       	ldd	r22, Y+41	; 0x29
    1f38:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f3a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f3c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	40 e8       	ldi	r20, 0x80	; 128
    1f44:	5f e3       	ldi	r21, 0x3F	; 63
    1f46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f4a:	88 23       	and	r24, r24
    1f4c:	1c f4       	brge	.+6      	; 0x1f54 <LCD_ES_tTrigger_Enable+0x6c>
		__ticks = 1;
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	88 a7       	std	Y+40, r24	; 0x28
    1f52:	91 c0       	rjmp	.+290    	; 0x2076 <LCD_ES_tTrigger_Enable+0x18e>
	else if (__tmp > 255)
    1f54:	69 a5       	ldd	r22, Y+41	; 0x29
    1f56:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f58:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f5a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	4f e7       	ldi	r20, 0x7F	; 127
    1f62:	53 e4       	ldi	r21, 0x43	; 67
    1f64:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f68:	18 16       	cp	r1, r24
    1f6a:	0c f0       	brlt	.+2      	; 0x1f6e <LCD_ES_tTrigger_Enable+0x86>
    1f6c:	7b c0       	rjmp	.+246    	; 0x2064 <LCD_ES_tTrigger_Enable+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1f6e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1f70:	7e a5       	ldd	r23, Y+46	; 0x2e
    1f72:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f74:	98 a9       	ldd	r25, Y+48	; 0x30
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	4a e7       	ldi	r20, 0x7A	; 122
    1f7c:	54 e4       	ldi	r21, 0x44	; 68
    1f7e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f82:	dc 01       	movw	r26, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	8c a3       	std	Y+36, r24	; 0x24
    1f88:	9d a3       	std	Y+37, r25	; 0x25
    1f8a:	ae a3       	std	Y+38, r26	; 0x26
    1f8c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f8e:	6c a1       	ldd	r22, Y+36	; 0x24
    1f90:	7d a1       	ldd	r23, Y+37	; 0x25
    1f92:	8e a1       	ldd	r24, Y+38	; 0x26
    1f94:	9f a1       	ldd	r25, Y+39	; 0x27
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	4a e7       	ldi	r20, 0x7A	; 122
    1f9c:	55 e4       	ldi	r21, 0x45	; 69
    1f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	88 a3       	std	Y+32, r24	; 0x20
    1fa8:	99 a3       	std	Y+33, r25	; 0x21
    1faa:	aa a3       	std	Y+34, r26	; 0x22
    1fac:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1fae:	68 a1       	ldd	r22, Y+32	; 0x20
    1fb0:	79 a1       	ldd	r23, Y+33	; 0x21
    1fb2:	8a a1       	ldd	r24, Y+34	; 0x22
    1fb4:	9b a1       	ldd	r25, Y+35	; 0x23
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	40 e8       	ldi	r20, 0x80	; 128
    1fbc:	5f e3       	ldi	r21, 0x3F	; 63
    1fbe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fc2:	88 23       	and	r24, r24
    1fc4:	2c f4       	brge	.+10     	; 0x1fd0 <LCD_ES_tTrigger_Enable+0xe8>
		__ticks = 1;
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	9f 8f       	std	Y+31, r25	; 0x1f
    1fcc:	8e 8f       	std	Y+30, r24	; 0x1e
    1fce:	3f c0       	rjmp	.+126    	; 0x204e <LCD_ES_tTrigger_Enable+0x166>
	else if (__tmp > 65535)
    1fd0:	68 a1       	ldd	r22, Y+32	; 0x20
    1fd2:	79 a1       	ldd	r23, Y+33	; 0x21
    1fd4:	8a a1       	ldd	r24, Y+34	; 0x22
    1fd6:	9b a1       	ldd	r25, Y+35	; 0x23
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	3f ef       	ldi	r19, 0xFF	; 255
    1fdc:	4f e7       	ldi	r20, 0x7F	; 127
    1fde:	57 e4       	ldi	r21, 0x47	; 71
    1fe0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fe4:	18 16       	cp	r1, r24
    1fe6:	4c f5       	brge	.+82     	; 0x203a <LCD_ES_tTrigger_Enable+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe8:	6c a1       	ldd	r22, Y+36	; 0x24
    1fea:	7d a1       	ldd	r23, Y+37	; 0x25
    1fec:	8e a1       	ldd	r24, Y+38	; 0x26
    1fee:	9f a1       	ldd	r25, Y+39	; 0x27
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	40 e2       	ldi	r20, 0x20	; 32
    1ff6:	51 e4       	ldi	r21, 0x41	; 65
    1ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	bc 01       	movw	r22, r24
    2002:	cd 01       	movw	r24, r26
    2004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	9f 8f       	std	Y+31, r25	; 0x1f
    200e:	8e 8f       	std	Y+30, r24	; 0x1e
    2010:	0f c0       	rjmp	.+30     	; 0x2030 <LCD_ES_tTrigger_Enable+0x148>
    2012:	80 e9       	ldi	r24, 0x90	; 144
    2014:	91 e0       	ldi	r25, 0x01	; 1
    2016:	9d 8f       	std	Y+29, r25	; 0x1d
    2018:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    201a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    201c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    201e:	01 97       	sbiw	r24, 0x01	; 1
    2020:	f1 f7       	brne	.-4      	; 0x201e <LCD_ES_tTrigger_Enable+0x136>
    2022:	9d 8f       	std	Y+29, r25	; 0x1d
    2024:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2026:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2028:	9f 8d       	ldd	r25, Y+31	; 0x1f
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	9f 8f       	std	Y+31, r25	; 0x1f
    202e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2030:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2032:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2034:	00 97       	sbiw	r24, 0x00	; 0
    2036:	69 f7       	brne	.-38     	; 0x2012 <LCD_ES_tTrigger_Enable+0x12a>
    2038:	24 c0       	rjmp	.+72     	; 0x2082 <LCD_ES_tTrigger_Enable+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    203a:	68 a1       	ldd	r22, Y+32	; 0x20
    203c:	79 a1       	ldd	r23, Y+33	; 0x21
    203e:	8a a1       	ldd	r24, Y+34	; 0x22
    2040:	9b a1       	ldd	r25, Y+35	; 0x23
    2042:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	9f 8f       	std	Y+31, r25	; 0x1f
    204c:	8e 8f       	std	Y+30, r24	; 0x1e
    204e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2050:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2052:	9b 8f       	std	Y+27, r25	; 0x1b
    2054:	8a 8f       	std	Y+26, r24	; 0x1a
    2056:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2058:	9b 8d       	ldd	r25, Y+27	; 0x1b
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	f1 f7       	brne	.-4      	; 0x205a <LCD_ES_tTrigger_Enable+0x172>
    205e:	9b 8f       	std	Y+27, r25	; 0x1b
    2060:	8a 8f       	std	Y+26, r24	; 0x1a
    2062:	0f c0       	rjmp	.+30     	; 0x2082 <LCD_ES_tTrigger_Enable+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2064:	69 a5       	ldd	r22, Y+41	; 0x29
    2066:	7a a5       	ldd	r23, Y+42	; 0x2a
    2068:	8b a5       	ldd	r24, Y+43	; 0x2b
    206a:	9c a5       	ldd	r25, Y+44	; 0x2c
    206c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	88 a7       	std	Y+40, r24	; 0x28
    2076:	88 a5       	ldd	r24, Y+40	; 0x28
    2078:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    207a:	89 8d       	ldd	r24, Y+25	; 0x19
    207c:	8a 95       	dec	r24
    207e:	f1 f7       	brne	.-4      	; 0x207c <LCD_ES_tTrigger_Enable+0x194>
    2080:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, LOW);
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	63 e0       	ldi	r22, 0x03	; 3
    2086:	40 e0       	ldi	r20, 0x00	; 0
    2088:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	aa ef       	ldi	r26, 0xFA	; 250
    2092:	b4 e4       	ldi	r27, 0x44	; 68
    2094:	8d 8b       	std	Y+21, r24	; 0x15
    2096:	9e 8b       	std	Y+22, r25	; 0x16
    2098:	af 8b       	std	Y+23, r26	; 0x17
    209a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    209c:	6d 89       	ldd	r22, Y+21	; 0x15
    209e:	7e 89       	ldd	r23, Y+22	; 0x16
    20a0:	8f 89       	ldd	r24, Y+23	; 0x17
    20a2:	98 8d       	ldd	r25, Y+24	; 0x18
    20a4:	2b ea       	ldi	r18, 0xAB	; 171
    20a6:	3a ea       	ldi	r19, 0xAA	; 170
    20a8:	4a ea       	ldi	r20, 0xAA	; 170
    20aa:	50 e4       	ldi	r21, 0x40	; 64
    20ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	89 8b       	std	Y+17, r24	; 0x11
    20b6:	9a 8b       	std	Y+18, r25	; 0x12
    20b8:	ab 8b       	std	Y+19, r26	; 0x13
    20ba:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    20bc:	69 89       	ldd	r22, Y+17	; 0x11
    20be:	7a 89       	ldd	r23, Y+18	; 0x12
    20c0:	8b 89       	ldd	r24, Y+19	; 0x13
    20c2:	9c 89       	ldd	r25, Y+20	; 0x14
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	40 e8       	ldi	r20, 0x80	; 128
    20ca:	5f e3       	ldi	r21, 0x3F	; 63
    20cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20d0:	88 23       	and	r24, r24
    20d2:	1c f4       	brge	.+6      	; 0x20da <LCD_ES_tTrigger_Enable+0x1f2>
		__ticks = 1;
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	88 8b       	std	Y+16, r24	; 0x10
    20d8:	91 c0       	rjmp	.+290    	; 0x21fc <LCD_ES_tTrigger_Enable+0x314>
	else if (__tmp > 255)
    20da:	69 89       	ldd	r22, Y+17	; 0x11
    20dc:	7a 89       	ldd	r23, Y+18	; 0x12
    20de:	8b 89       	ldd	r24, Y+19	; 0x13
    20e0:	9c 89       	ldd	r25, Y+20	; 0x14
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	4f e7       	ldi	r20, 0x7F	; 127
    20e8:	53 e4       	ldi	r21, 0x43	; 67
    20ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20ee:	18 16       	cp	r1, r24
    20f0:	0c f0       	brlt	.+2      	; 0x20f4 <LCD_ES_tTrigger_Enable+0x20c>
    20f2:	7b c0       	rjmp	.+246    	; 0x21ea <LCD_ES_tTrigger_Enable+0x302>
	{
		_delay_ms(__us / 1000.0);
    20f4:	6d 89       	ldd	r22, Y+21	; 0x15
    20f6:	7e 89       	ldd	r23, Y+22	; 0x16
    20f8:	8f 89       	ldd	r24, Y+23	; 0x17
    20fa:	98 8d       	ldd	r25, Y+24	; 0x18
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	4a e7       	ldi	r20, 0x7A	; 122
    2102:	54 e4       	ldi	r21, 0x44	; 68
    2104:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	8c 87       	std	Y+12, r24	; 0x0c
    210e:	9d 87       	std	Y+13, r25	; 0x0d
    2110:	ae 87       	std	Y+14, r26	; 0x0e
    2112:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2114:	6c 85       	ldd	r22, Y+12	; 0x0c
    2116:	7d 85       	ldd	r23, Y+13	; 0x0d
    2118:	8e 85       	ldd	r24, Y+14	; 0x0e
    211a:	9f 85       	ldd	r25, Y+15	; 0x0f
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	4a e7       	ldi	r20, 0x7A	; 122
    2122:	55 e4       	ldi	r21, 0x45	; 69
    2124:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2128:	dc 01       	movw	r26, r24
    212a:	cb 01       	movw	r24, r22
    212c:	88 87       	std	Y+8, r24	; 0x08
    212e:	99 87       	std	Y+9, r25	; 0x09
    2130:	aa 87       	std	Y+10, r26	; 0x0a
    2132:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2134:	68 85       	ldd	r22, Y+8	; 0x08
    2136:	79 85       	ldd	r23, Y+9	; 0x09
    2138:	8a 85       	ldd	r24, Y+10	; 0x0a
    213a:	9b 85       	ldd	r25, Y+11	; 0x0b
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	40 e8       	ldi	r20, 0x80	; 128
    2142:	5f e3       	ldi	r21, 0x3F	; 63
    2144:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2148:	88 23       	and	r24, r24
    214a:	2c f4       	brge	.+10     	; 0x2156 <LCD_ES_tTrigger_Enable+0x26e>
		__ticks = 1;
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	9f 83       	std	Y+7, r25	; 0x07
    2152:	8e 83       	std	Y+6, r24	; 0x06
    2154:	3f c0       	rjmp	.+126    	; 0x21d4 <LCD_ES_tTrigger_Enable+0x2ec>
	else if (__tmp > 65535)
    2156:	68 85       	ldd	r22, Y+8	; 0x08
    2158:	79 85       	ldd	r23, Y+9	; 0x09
    215a:	8a 85       	ldd	r24, Y+10	; 0x0a
    215c:	9b 85       	ldd	r25, Y+11	; 0x0b
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	3f ef       	ldi	r19, 0xFF	; 255
    2162:	4f e7       	ldi	r20, 0x7F	; 127
    2164:	57 e4       	ldi	r21, 0x47	; 71
    2166:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    216a:	18 16       	cp	r1, r24
    216c:	4c f5       	brge	.+82     	; 0x21c0 <LCD_ES_tTrigger_Enable+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    216e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2170:	7d 85       	ldd	r23, Y+13	; 0x0d
    2172:	8e 85       	ldd	r24, Y+14	; 0x0e
    2174:	9f 85       	ldd	r25, Y+15	; 0x0f
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	40 e2       	ldi	r20, 0x20	; 32
    217c:	51 e4       	ldi	r21, 0x41	; 65
    217e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	bc 01       	movw	r22, r24
    2188:	cd 01       	movw	r24, r26
    218a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    218e:	dc 01       	movw	r26, r24
    2190:	cb 01       	movw	r24, r22
    2192:	9f 83       	std	Y+7, r25	; 0x07
    2194:	8e 83       	std	Y+6, r24	; 0x06
    2196:	0f c0       	rjmp	.+30     	; 0x21b6 <LCD_ES_tTrigger_Enable+0x2ce>
    2198:	80 e9       	ldi	r24, 0x90	; 144
    219a:	91 e0       	ldi	r25, 0x01	; 1
    219c:	9d 83       	std	Y+5, r25	; 0x05
    219e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21a0:	8c 81       	ldd	r24, Y+4	; 0x04
    21a2:	9d 81       	ldd	r25, Y+5	; 0x05
    21a4:	01 97       	sbiw	r24, 0x01	; 1
    21a6:	f1 f7       	brne	.-4      	; 0x21a4 <LCD_ES_tTrigger_Enable+0x2bc>
    21a8:	9d 83       	std	Y+5, r25	; 0x05
    21aa:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ac:	8e 81       	ldd	r24, Y+6	; 0x06
    21ae:	9f 81       	ldd	r25, Y+7	; 0x07
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	9f 83       	std	Y+7, r25	; 0x07
    21b4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b6:	8e 81       	ldd	r24, Y+6	; 0x06
    21b8:	9f 81       	ldd	r25, Y+7	; 0x07
    21ba:	00 97       	sbiw	r24, 0x00	; 0
    21bc:	69 f7       	brne	.-38     	; 0x2198 <LCD_ES_tTrigger_Enable+0x2b0>
    21be:	24 c0       	rjmp	.+72     	; 0x2208 <LCD_ES_tTrigger_Enable+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c0:	68 85       	ldd	r22, Y+8	; 0x08
    21c2:	79 85       	ldd	r23, Y+9	; 0x09
    21c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    21c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    21c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21cc:	dc 01       	movw	r26, r24
    21ce:	cb 01       	movw	r24, r22
    21d0:	9f 83       	std	Y+7, r25	; 0x07
    21d2:	8e 83       	std	Y+6, r24	; 0x06
    21d4:	8e 81       	ldd	r24, Y+6	; 0x06
    21d6:	9f 81       	ldd	r25, Y+7	; 0x07
    21d8:	9b 83       	std	Y+3, r25	; 0x03
    21da:	8a 83       	std	Y+2, r24	; 0x02
    21dc:	8a 81       	ldd	r24, Y+2	; 0x02
    21de:	9b 81       	ldd	r25, Y+3	; 0x03
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	f1 f7       	brne	.-4      	; 0x21e0 <LCD_ES_tTrigger_Enable+0x2f8>
    21e4:	9b 83       	std	Y+3, r25	; 0x03
    21e6:	8a 83       	std	Y+2, r24	; 0x02
    21e8:	0f c0       	rjmp	.+30     	; 0x2208 <LCD_ES_tTrigger_Enable+0x320>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21ea:	69 89       	ldd	r22, Y+17	; 0x11
    21ec:	7a 89       	ldd	r23, Y+18	; 0x12
    21ee:	8b 89       	ldd	r24, Y+19	; 0x13
    21f0:	9c 89       	ldd	r25, Y+20	; 0x14
    21f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	88 8b       	std	Y+16, r24	; 0x10
    21fc:	88 89       	ldd	r24, Y+16	; 0x10
    21fe:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	8a 95       	dec	r24
    2204:	f1 f7       	brne	.-4      	; 0x2202 <LCD_ES_tTrigger_Enable+0x31a>
    2206:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2000);
	return ES_OK;
    2208:	80 e0       	ldi	r24, 0x00	; 0
}
    220a:	e0 96       	adiw	r28, 0x30	; 48
    220c:	0f b6       	in	r0, 0x3f	; 63
    220e:	f8 94       	cli
    2210:	de bf       	out	0x3e, r29	; 62
    2212:	0f be       	out	0x3f, r0	; 63
    2214:	cd bf       	out	0x3d, r28	; 61
    2216:	cf 91       	pop	r28
    2218:	df 91       	pop	r29
    221a:	08 95       	ret

0000221c <Lcd_ES_tInit>:


ES_t Lcd_ES_tInit(){
    221c:	df 93       	push	r29
    221e:	cf 93       	push	r28
    2220:	cd b7       	in	r28, 0x3d	; 61
    2222:	de b7       	in	r29, 0x3e	; 62
#if LCD_MODE == FOUR_BIT_MODE
	Lcd_ES_tsendCmd(Four_BitMode);   /* Go into 4-bit operating mode*/
    2224:	82 e0       	ldi	r24, 0x02	; 2
    2226:	0e 94 ae 11 	call	0x235c	; 0x235c <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(D4_D7);  /* 2 Line, 5*7 matrix in 4-bit mode */
    222a:	88 e2       	ldi	r24, 0x28	; 40
    222c:	0e 94 ae 11 	call	0x235c	; 0x235c <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
    2230:	8e e0       	ldi	r24, 0x0E	; 14
    2232:	0e 94 ae 11 	call	0x235c	; 0x235c <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
    2236:	86 e0       	ldi	r24, 0x06	; 6
    2238:	0e 94 ae 11 	call	0x235c	; 0x235c <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	0e 94 ae 11 	call	0x235c	; 0x235c <Lcd_ES_tsendCmd>
	return ES_OK;
    2242:	80 e0       	ldi	r24, 0x00	; 0
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
	return ES_OK;
#endif
}
    2244:	cf 91       	pop	r28
    2246:	df 91       	pop	r29
    2248:	08 95       	ret

0000224a <lcd_ES_tclear>:
 *
 *	Ex. 0x28 0b 0010 1000  //Read bit by bit and see if it is low or high
 */

ES_t lcd_ES_tclear()
{
    224a:	df 93       	push	r29
    224c:	cf 93       	push	r28
    224e:	cd b7       	in	r28, 0x3d	; 61
    2250:	de b7       	in	r29, 0x3e	; 62
    2252:	2e 97       	sbiw	r28, 0x0e	; 14
    2254:	0f b6       	in	r0, 0x3f	; 63
    2256:	f8 94       	cli
    2258:	de bf       	out	0x3e, r29	; 62
    225a:	0f be       	out	0x3f, r0	; 63
    225c:	cd bf       	out	0x3d, r28	; 61
	Lcd_ES_tsendCmd(CLR_Display);
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	0e 94 ae 11 	call	0x235c	; 0x235c <Lcd_ES_tsendCmd>
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	a0 e0       	ldi	r26, 0x00	; 0
    226a:	b0 e4       	ldi	r27, 0x40	; 64
    226c:	8b 87       	std	Y+11, r24	; 0x0b
    226e:	9c 87       	std	Y+12, r25	; 0x0c
    2270:	ad 87       	std	Y+13, r26	; 0x0d
    2272:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2274:	6b 85       	ldd	r22, Y+11	; 0x0b
    2276:	7c 85       	ldd	r23, Y+12	; 0x0c
    2278:	8d 85       	ldd	r24, Y+13	; 0x0d
    227a:	9e 85       	ldd	r25, Y+14	; 0x0e
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	4a e7       	ldi	r20, 0x7A	; 122
    2282:	55 e4       	ldi	r21, 0x45	; 69
    2284:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	8f 83       	std	Y+7, r24	; 0x07
    228e:	98 87       	std	Y+8, r25	; 0x08
    2290:	a9 87       	std	Y+9, r26	; 0x09
    2292:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2294:	6f 81       	ldd	r22, Y+7	; 0x07
    2296:	78 85       	ldd	r23, Y+8	; 0x08
    2298:	89 85       	ldd	r24, Y+9	; 0x09
    229a:	9a 85       	ldd	r25, Y+10	; 0x0a
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	40 e8       	ldi	r20, 0x80	; 128
    22a2:	5f e3       	ldi	r21, 0x3F	; 63
    22a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22a8:	88 23       	and	r24, r24
    22aa:	2c f4       	brge	.+10     	; 0x22b6 <lcd_ES_tclear+0x6c>
		__ticks = 1;
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	9e 83       	std	Y+6, r25	; 0x06
    22b2:	8d 83       	std	Y+5, r24	; 0x05
    22b4:	3f c0       	rjmp	.+126    	; 0x2334 <lcd_ES_tclear+0xea>
	else if (__tmp > 65535)
    22b6:	6f 81       	ldd	r22, Y+7	; 0x07
    22b8:	78 85       	ldd	r23, Y+8	; 0x08
    22ba:	89 85       	ldd	r24, Y+9	; 0x09
    22bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	3f ef       	ldi	r19, 0xFF	; 255
    22c2:	4f e7       	ldi	r20, 0x7F	; 127
    22c4:	57 e4       	ldi	r21, 0x47	; 71
    22c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22ca:	18 16       	cp	r1, r24
    22cc:	4c f5       	brge	.+82     	; 0x2320 <lcd_ES_tclear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    22d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	40 e2       	ldi	r20, 0x20	; 32
    22dc:	51 e4       	ldi	r21, 0x41	; 65
    22de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	bc 01       	movw	r22, r24
    22e8:	cd 01       	movw	r24, r26
    22ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	9e 83       	std	Y+6, r25	; 0x06
    22f4:	8d 83       	std	Y+5, r24	; 0x05
    22f6:	0f c0       	rjmp	.+30     	; 0x2316 <lcd_ES_tclear+0xcc>
    22f8:	80 e9       	ldi	r24, 0x90	; 144
    22fa:	91 e0       	ldi	r25, 0x01	; 1
    22fc:	9c 83       	std	Y+4, r25	; 0x04
    22fe:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2300:	8b 81       	ldd	r24, Y+3	; 0x03
    2302:	9c 81       	ldd	r25, Y+4	; 0x04
    2304:	01 97       	sbiw	r24, 0x01	; 1
    2306:	f1 f7       	brne	.-4      	; 0x2304 <lcd_ES_tclear+0xba>
    2308:	9c 83       	std	Y+4, r25	; 0x04
    230a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    230c:	8d 81       	ldd	r24, Y+5	; 0x05
    230e:	9e 81       	ldd	r25, Y+6	; 0x06
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	9e 83       	std	Y+6, r25	; 0x06
    2314:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2316:	8d 81       	ldd	r24, Y+5	; 0x05
    2318:	9e 81       	ldd	r25, Y+6	; 0x06
    231a:	00 97       	sbiw	r24, 0x00	; 0
    231c:	69 f7       	brne	.-38     	; 0x22f8 <lcd_ES_tclear+0xae>
    231e:	14 c0       	rjmp	.+40     	; 0x2348 <lcd_ES_tclear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2320:	6f 81       	ldd	r22, Y+7	; 0x07
    2322:	78 85       	ldd	r23, Y+8	; 0x08
    2324:	89 85       	ldd	r24, Y+9	; 0x09
    2326:	9a 85       	ldd	r25, Y+10	; 0x0a
    2328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	9e 83       	std	Y+6, r25	; 0x06
    2332:	8d 83       	std	Y+5, r24	; 0x05
    2334:	8d 81       	ldd	r24, Y+5	; 0x05
    2336:	9e 81       	ldd	r25, Y+6	; 0x06
    2338:	9a 83       	std	Y+2, r25	; 0x02
    233a:	89 83       	std	Y+1, r24	; 0x01
    233c:	89 81       	ldd	r24, Y+1	; 0x01
    233e:	9a 81       	ldd	r25, Y+2	; 0x02
    2340:	01 97       	sbiw	r24, 0x01	; 1
    2342:	f1 f7       	brne	.-4      	; 0x2340 <lcd_ES_tclear+0xf6>
    2344:	9a 83       	std	Y+2, r25	; 0x02
    2346:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	return ES_OK;
    2348:	80 e0       	ldi	r24, 0x00	; 0
}
    234a:	2e 96       	adiw	r28, 0x0e	; 14
    234c:	0f b6       	in	r0, 0x3f	; 63
    234e:	f8 94       	cli
    2350:	de bf       	out	0x3e, r29	; 62
    2352:	0f be       	out	0x3f, r0	; 63
    2354:	cd bf       	out	0x3d, r28	; 61
    2356:	cf 91       	pop	r28
    2358:	df 91       	pop	r29
    235a:	08 95       	ret

0000235c <Lcd_ES_tsendCmd>:

ES_t Lcd_ES_tsendCmd(u8 cmd){
    235c:	df 93       	push	r29
    235e:	cf 93       	push	r28
    2360:	0f 92       	push	r0
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
    2366:	89 83       	std	Y+1, r24	; 0x01
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, LOW);
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	61 e0       	ldi	r22, 0x01	; 1
    236c:	40 e0       	ldi	r20, 0x00	; 0
    236e:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	60 e0       	ldi	r22, 0x00	; 0
    2376:	40 e0       	ldi	r20, 0x00	; 0
    2378:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	// DIO_ES_tGetPinValue, DIO_ES_tSetPinValue
	// if(GET_BIT(cmd,7)){Dio_Write(D7,HIGH);}else{Dio_write(D7,LOW);}
	// We use ternary operator instead
#if LCD_MODE == FOUR_BIT_MODE
	(GET_BIT(cmd,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	88 23       	and	r24, r24
    2380:	34 f4       	brge	.+12     	; 0x238e <Lcd_ES_tsendCmd+0x32>
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	66 e0       	ldi	r22, 0x06	; 6
    2386:	41 e0       	ldi	r20, 0x01	; 1
    2388:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    238c:	05 c0       	rjmp	.+10     	; 0x2398 <Lcd_ES_tsendCmd+0x3c>
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	66 e0       	ldi	r22, 0x06	; 6
    2392:	40 e0       	ldi	r20, 0x00	; 0
    2394:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    2398:	89 81       	ldd	r24, Y+1	; 0x01
    239a:	82 95       	swap	r24
    239c:	86 95       	lsr	r24
    239e:	86 95       	lsr	r24
    23a0:	83 70       	andi	r24, 0x03	; 3
    23a2:	88 2f       	mov	r24, r24
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	81 70       	andi	r24, 0x01	; 1
    23a8:	90 70       	andi	r25, 0x00	; 0
    23aa:	88 23       	and	r24, r24
    23ac:	31 f0       	breq	.+12     	; 0x23ba <Lcd_ES_tsendCmd+0x5e>
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	65 e0       	ldi	r22, 0x05	; 5
    23b2:	41 e0       	ldi	r20, 0x01	; 1
    23b4:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    23b8:	05 c0       	rjmp	.+10     	; 0x23c4 <Lcd_ES_tsendCmd+0x68>
    23ba:	80 e0       	ldi	r24, 0x00	; 0
    23bc:	65 e0       	ldi	r22, 0x05	; 5
    23be:	40 e0       	ldi	r20, 0x00	; 0
    23c0:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    23c4:	89 81       	ldd	r24, Y+1	; 0x01
    23c6:	82 95       	swap	r24
    23c8:	86 95       	lsr	r24
    23ca:	87 70       	andi	r24, 0x07	; 7
    23cc:	88 2f       	mov	r24, r24
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	81 70       	andi	r24, 0x01	; 1
    23d2:	90 70       	andi	r25, 0x00	; 0
    23d4:	88 23       	and	r24, r24
    23d6:	31 f0       	breq	.+12     	; 0x23e4 <Lcd_ES_tsendCmd+0x88>
    23d8:	80 e0       	ldi	r24, 0x00	; 0
    23da:	64 e0       	ldi	r22, 0x04	; 4
    23dc:	41 e0       	ldi	r20, 0x01	; 1
    23de:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    23e2:	05 c0       	rjmp	.+10     	; 0x23ee <Lcd_ES_tsendCmd+0x92>
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	64 e0       	ldi	r22, 0x04	; 4
    23e8:	40 e0       	ldi	r20, 0x00	; 0
    23ea:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    23ee:	89 81       	ldd	r24, Y+1	; 0x01
    23f0:	82 95       	swap	r24
    23f2:	8f 70       	andi	r24, 0x0F	; 15
    23f4:	88 2f       	mov	r24, r24
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	81 70       	andi	r24, 0x01	; 1
    23fa:	90 70       	andi	r25, 0x00	; 0
    23fc:	88 23       	and	r24, r24
    23fe:	31 f0       	breq	.+12     	; 0x240c <Lcd_ES_tsendCmd+0xb0>
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	63 e0       	ldi	r22, 0x03	; 3
    2404:	41 e0       	ldi	r20, 0x01	; 1
    2406:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    240a:	05 c0       	rjmp	.+10     	; 0x2416 <Lcd_ES_tsendCmd+0xba>
    240c:	80 e0       	ldi	r24, 0x00	; 0
    240e:	63 e0       	ldi	r22, 0x03	; 3
    2410:	40 e0       	ldi	r20, 0x00	; 0
    2412:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    2416:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <LCD_ES_tTrigger_Enable>
	(GET_BIT(cmd,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    241a:	89 81       	ldd	r24, Y+1	; 0x01
    241c:	86 95       	lsr	r24
    241e:	86 95       	lsr	r24
    2420:	86 95       	lsr	r24
    2422:	88 2f       	mov	r24, r24
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	81 70       	andi	r24, 0x01	; 1
    2428:	90 70       	andi	r25, 0x00	; 0
    242a:	88 23       	and	r24, r24
    242c:	31 f0       	breq	.+12     	; 0x243a <Lcd_ES_tsendCmd+0xde>
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	66 e0       	ldi	r22, 0x06	; 6
    2432:	41 e0       	ldi	r20, 0x01	; 1
    2434:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    2438:	05 c0       	rjmp	.+10     	; 0x2444 <Lcd_ES_tsendCmd+0xe8>
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	66 e0       	ldi	r22, 0x06	; 6
    243e:	40 e0       	ldi	r20, 0x00	; 0
    2440:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    2444:	89 81       	ldd	r24, Y+1	; 0x01
    2446:	86 95       	lsr	r24
    2448:	86 95       	lsr	r24
    244a:	88 2f       	mov	r24, r24
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	81 70       	andi	r24, 0x01	; 1
    2450:	90 70       	andi	r25, 0x00	; 0
    2452:	88 23       	and	r24, r24
    2454:	31 f0       	breq	.+12     	; 0x2462 <Lcd_ES_tsendCmd+0x106>
    2456:	80 e0       	ldi	r24, 0x00	; 0
    2458:	65 e0       	ldi	r22, 0x05	; 5
    245a:	41 e0       	ldi	r20, 0x01	; 1
    245c:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    2460:	05 c0       	rjmp	.+10     	; 0x246c <Lcd_ES_tsendCmd+0x110>
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	65 e0       	ldi	r22, 0x05	; 5
    2466:	40 e0       	ldi	r20, 0x00	; 0
    2468:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    246c:	89 81       	ldd	r24, Y+1	; 0x01
    246e:	86 95       	lsr	r24
    2470:	88 2f       	mov	r24, r24
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	81 70       	andi	r24, 0x01	; 1
    2476:	90 70       	andi	r25, 0x00	; 0
    2478:	88 23       	and	r24, r24
    247a:	31 f0       	breq	.+12     	; 0x2488 <Lcd_ES_tsendCmd+0x12c>
    247c:	80 e0       	ldi	r24, 0x00	; 0
    247e:	64 e0       	ldi	r22, 0x04	; 4
    2480:	41 e0       	ldi	r20, 0x01	; 1
    2482:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    2486:	05 c0       	rjmp	.+10     	; 0x2492 <Lcd_ES_tsendCmd+0x136>
    2488:	80 e0       	ldi	r24, 0x00	; 0
    248a:	64 e0       	ldi	r22, 0x04	; 4
    248c:	40 e0       	ldi	r20, 0x00	; 0
    248e:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    2492:	89 81       	ldd	r24, Y+1	; 0x01
    2494:	88 2f       	mov	r24, r24
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	81 70       	andi	r24, 0x01	; 1
    249a:	90 70       	andi	r25, 0x00	; 0
    249c:	88 23       	and	r24, r24
    249e:	31 f0       	breq	.+12     	; 0x24ac <Lcd_ES_tsendCmd+0x150>
    24a0:	80 e0       	ldi	r24, 0x00	; 0
    24a2:	63 e0       	ldi	r22, 0x03	; 3
    24a4:	41 e0       	ldi	r20, 0x01	; 1
    24a6:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    24aa:	05 c0       	rjmp	.+10     	; 0x24b6 <Lcd_ES_tsendCmd+0x15a>
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	63 e0       	ldi	r22, 0x03	; 3
    24b0:	40 e0       	ldi	r20, 0x00	; 0
    24b2:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    24b6:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <LCD_ES_tTrigger_Enable>
	return ES_OK;
    24ba:	80 e0       	ldi	r24, 0x00	; 0
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D0,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D0,LOW);
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif
}
    24bc:	0f 90       	pop	r0
    24be:	cf 91       	pop	r28
    24c0:	df 91       	pop	r29
    24c2:	08 95       	ret

000024c4 <Lcd_ES_tsendChar>:
ES_t Lcd_ES_tsendChar(u8 data){
    24c4:	df 93       	push	r29
    24c6:	cf 93       	push	r28
    24c8:	0f 92       	push	r0
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
    24ce:	89 83       	std	Y+1, r24	; 0x01
#if LCD_MODE == FOUR_BIT_MODE
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	61 e0       	ldi	r22, 0x01	; 1
    24d4:	41 e0       	ldi	r20, 0x01	; 1
    24d6:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	60 e0       	ldi	r22, 0x00	; 0
    24de:	40 e0       	ldi	r20, 0x00	; 0
    24e0:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	(GET_BIT(data,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    24e4:	89 81       	ldd	r24, Y+1	; 0x01
    24e6:	88 23       	and	r24, r24
    24e8:	34 f4       	brge	.+12     	; 0x24f6 <Lcd_ES_tsendChar+0x32>
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	66 e0       	ldi	r22, 0x06	; 6
    24ee:	41 e0       	ldi	r20, 0x01	; 1
    24f0:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    24f4:	05 c0       	rjmp	.+10     	; 0x2500 <Lcd_ES_tsendChar+0x3c>
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	66 e0       	ldi	r22, 0x06	; 6
    24fa:	40 e0       	ldi	r20, 0x00	; 0
    24fc:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	(GET_BIT(data,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    2500:	89 81       	ldd	r24, Y+1	; 0x01
    2502:	82 95       	swap	r24
    2504:	86 95       	lsr	r24
    2506:	86 95       	lsr	r24
    2508:	83 70       	andi	r24, 0x03	; 3
    250a:	88 2f       	mov	r24, r24
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	81 70       	andi	r24, 0x01	; 1
    2510:	90 70       	andi	r25, 0x00	; 0
    2512:	88 23       	and	r24, r24
    2514:	31 f0       	breq	.+12     	; 0x2522 <Lcd_ES_tsendChar+0x5e>
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	65 e0       	ldi	r22, 0x05	; 5
    251a:	41 e0       	ldi	r20, 0x01	; 1
    251c:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    2520:	05 c0       	rjmp	.+10     	; 0x252c <Lcd_ES_tsendChar+0x68>
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	65 e0       	ldi	r22, 0x05	; 5
    2526:	40 e0       	ldi	r20, 0x00	; 0
    2528:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	(GET_BIT(data,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    252c:	89 81       	ldd	r24, Y+1	; 0x01
    252e:	82 95       	swap	r24
    2530:	86 95       	lsr	r24
    2532:	87 70       	andi	r24, 0x07	; 7
    2534:	88 2f       	mov	r24, r24
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	81 70       	andi	r24, 0x01	; 1
    253a:	90 70       	andi	r25, 0x00	; 0
    253c:	88 23       	and	r24, r24
    253e:	31 f0       	breq	.+12     	; 0x254c <Lcd_ES_tsendChar+0x88>
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	64 e0       	ldi	r22, 0x04	; 4
    2544:	41 e0       	ldi	r20, 0x01	; 1
    2546:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    254a:	05 c0       	rjmp	.+10     	; 0x2556 <Lcd_ES_tsendChar+0x92>
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	64 e0       	ldi	r22, 0x04	; 4
    2550:	40 e0       	ldi	r20, 0x00	; 0
    2552:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	(GET_BIT(data,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    2556:	89 81       	ldd	r24, Y+1	; 0x01
    2558:	82 95       	swap	r24
    255a:	8f 70       	andi	r24, 0x0F	; 15
    255c:	88 2f       	mov	r24, r24
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	81 70       	andi	r24, 0x01	; 1
    2562:	90 70       	andi	r25, 0x00	; 0
    2564:	88 23       	and	r24, r24
    2566:	31 f0       	breq	.+12     	; 0x2574 <Lcd_ES_tsendChar+0xb0>
    2568:	80 e0       	ldi	r24, 0x00	; 0
    256a:	63 e0       	ldi	r22, 0x03	; 3
    256c:	41 e0       	ldi	r20, 0x01	; 1
    256e:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    2572:	05 c0       	rjmp	.+10     	; 0x257e <Lcd_ES_tsendChar+0xba>
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	63 e0       	ldi	r22, 0x03	; 3
    2578:	40 e0       	ldi	r20, 0x00	; 0
    257a:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    257e:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <LCD_ES_tTrigger_Enable>
	(GET_BIT(data,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    2582:	89 81       	ldd	r24, Y+1	; 0x01
    2584:	86 95       	lsr	r24
    2586:	86 95       	lsr	r24
    2588:	86 95       	lsr	r24
    258a:	88 2f       	mov	r24, r24
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	81 70       	andi	r24, 0x01	; 1
    2590:	90 70       	andi	r25, 0x00	; 0
    2592:	88 23       	and	r24, r24
    2594:	31 f0       	breq	.+12     	; 0x25a2 <Lcd_ES_tsendChar+0xde>
    2596:	80 e0       	ldi	r24, 0x00	; 0
    2598:	66 e0       	ldi	r22, 0x06	; 6
    259a:	41 e0       	ldi	r20, 0x01	; 1
    259c:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    25a0:	05 c0       	rjmp	.+10     	; 0x25ac <Lcd_ES_tsendChar+0xe8>
    25a2:	80 e0       	ldi	r24, 0x00	; 0
    25a4:	66 e0       	ldi	r22, 0x06	; 6
    25a6:	40 e0       	ldi	r20, 0x00	; 0
    25a8:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	(GET_BIT(data,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    25ac:	89 81       	ldd	r24, Y+1	; 0x01
    25ae:	86 95       	lsr	r24
    25b0:	86 95       	lsr	r24
    25b2:	88 2f       	mov	r24, r24
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	81 70       	andi	r24, 0x01	; 1
    25b8:	90 70       	andi	r25, 0x00	; 0
    25ba:	88 23       	and	r24, r24
    25bc:	31 f0       	breq	.+12     	; 0x25ca <Lcd_ES_tsendChar+0x106>
    25be:	80 e0       	ldi	r24, 0x00	; 0
    25c0:	65 e0       	ldi	r22, 0x05	; 5
    25c2:	41 e0       	ldi	r20, 0x01	; 1
    25c4:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    25c8:	05 c0       	rjmp	.+10     	; 0x25d4 <Lcd_ES_tsendChar+0x110>
    25ca:	80 e0       	ldi	r24, 0x00	; 0
    25cc:	65 e0       	ldi	r22, 0x05	; 5
    25ce:	40 e0       	ldi	r20, 0x00	; 0
    25d0:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	(GET_BIT(data,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    25d4:	89 81       	ldd	r24, Y+1	; 0x01
    25d6:	86 95       	lsr	r24
    25d8:	88 2f       	mov	r24, r24
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	81 70       	andi	r24, 0x01	; 1
    25de:	90 70       	andi	r25, 0x00	; 0
    25e0:	88 23       	and	r24, r24
    25e2:	31 f0       	breq	.+12     	; 0x25f0 <Lcd_ES_tsendChar+0x12c>
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	64 e0       	ldi	r22, 0x04	; 4
    25e8:	41 e0       	ldi	r20, 0x01	; 1
    25ea:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    25ee:	05 c0       	rjmp	.+10     	; 0x25fa <Lcd_ES_tsendChar+0x136>
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	64 e0       	ldi	r22, 0x04	; 4
    25f4:	40 e0       	ldi	r20, 0x00	; 0
    25f6:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	(GET_BIT(data,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    25fa:	89 81       	ldd	r24, Y+1	; 0x01
    25fc:	88 2f       	mov	r24, r24
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	81 70       	andi	r24, 0x01	; 1
    2602:	90 70       	andi	r25, 0x00	; 0
    2604:	88 23       	and	r24, r24
    2606:	31 f0       	breq	.+12     	; 0x2614 <Lcd_ES_tsendChar+0x150>
    2608:	80 e0       	ldi	r24, 0x00	; 0
    260a:	63 e0       	ldi	r22, 0x03	; 3
    260c:	41 e0       	ldi	r20, 0x01	; 1
    260e:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    2612:	05 c0       	rjmp	.+10     	; 0x261e <Lcd_ES_tsendChar+0x15a>
    2614:	80 e0       	ldi	r24, 0x00	; 0
    2616:	63 e0       	ldi	r22, 0x03	; 3
    2618:	40 e0       	ldi	r20, 0x00	; 0
    261a:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    261e:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <LCD_ES_tTrigger_Enable>
	return ES_OK;
    2622:	80 e0       	ldi	r24, 0x00	; 0
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif

}
    2624:	0f 90       	pop	r0
    2626:	cf 91       	pop	r28
    2628:	df 91       	pop	r29
    262a:	08 95       	ret

0000262c <Lcd_ES_tsendString>:

ES_t Lcd_ES_tsendString(char *data)
{
    262c:	df 93       	push	r29
    262e:	cf 93       	push	r28
    2630:	00 d0       	rcall	.+0      	; 0x2632 <Lcd_ES_tsendString+0x6>
    2632:	0f 92       	push	r0
    2634:	cd b7       	in	r28, 0x3d	; 61
    2636:	de b7       	in	r29, 0x3e	; 62
    2638:	9b 83       	std	Y+3, r25	; 0x03
    263a:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	61 e0       	ldi	r22, 0x01	; 1
    2640:	41 e0       	ldi	r20, 0x01	; 1
    2642:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	60 e0       	ldi	r22, 0x00	; 0
    264a:	40 e0       	ldi	r20, 0x00	; 0
    264c:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>

	unsigned char i=0;
    2650:	19 82       	std	Y+1, r1	; 0x01
    2652:	0e c0       	rjmp	.+28     	; 0x2670 <Lcd_ES_tsendString+0x44>
	while(data[i]!=0)
	{
		Lcd_ES_tsendChar(data[i]);
    2654:	89 81       	ldd	r24, Y+1	; 0x01
    2656:	28 2f       	mov	r18, r24
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	8a 81       	ldd	r24, Y+2	; 0x02
    265c:	9b 81       	ldd	r25, Y+3	; 0x03
    265e:	fc 01       	movw	r30, r24
    2660:	e2 0f       	add	r30, r18
    2662:	f3 1f       	adc	r31, r19
    2664:	80 81       	ld	r24, Z
    2666:	0e 94 62 12 	call	0x24c4	; 0x24c4 <Lcd_ES_tsendChar>
		i++;
    266a:	89 81       	ldd	r24, Y+1	; 0x01
    266c:	8f 5f       	subi	r24, 0xFF	; 255
    266e:	89 83       	std	Y+1, r24	; 0x01
{
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);

	unsigned char i=0;
	while(data[i]!=0)
    2670:	89 81       	ldd	r24, Y+1	; 0x01
    2672:	28 2f       	mov	r18, r24
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	8a 81       	ldd	r24, Y+2	; 0x02
    2678:	9b 81       	ldd	r25, Y+3	; 0x03
    267a:	fc 01       	movw	r30, r24
    267c:	e2 0f       	add	r30, r18
    267e:	f3 1f       	adc	r31, r19
    2680:	80 81       	ld	r24, Z
    2682:	88 23       	and	r24, r24
    2684:	39 f7       	brne	.-50     	; 0x2654 <Lcd_ES_tsendString+0x28>
	{
		Lcd_ES_tsendChar(data[i]);
		i++;
	}
	return ES_OK;
    2686:	80 e0       	ldi	r24, 0x00	; 0
}
    2688:	0f 90       	pop	r0
    268a:	0f 90       	pop	r0
    268c:	0f 90       	pop	r0
    268e:	cf 91       	pop	r28
    2690:	df 91       	pop	r29
    2692:	08 95       	ret

00002694 <Lcd_ES_tsendString_xy>:

ES_t Lcd_ES_tsendString_xy(char *data,u8 row,u8 col){
    2694:	df 93       	push	r29
    2696:	cf 93       	push	r28
    2698:	00 d0       	rcall	.+0      	; 0x269a <Lcd_ES_tsendString_xy+0x6>
    269a:	00 d0       	rcall	.+0      	; 0x269c <Lcd_ES_tsendString_xy+0x8>
    269c:	cd b7       	in	r28, 0x3d	; 61
    269e:	de b7       	in	r29, 0x3e	; 62
    26a0:	9a 83       	std	Y+2, r25	; 0x02
    26a2:	89 83       	std	Y+1, r24	; 0x01
    26a4:	6b 83       	std	Y+3, r22	; 0x03
    26a6:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	61 e0       	ldi	r22, 0x01	; 1
    26ac:	41 e0       	ldi	r20, 0x01	; 1
    26ae:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	60 e0       	ldi	r22, 0x00	; 0
    26b6:	40 e0       	ldi	r20, 0x00	; 0
    26b8:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>

	LCD_ES_tSet_Cursor_Pos(row,col);
    26bc:	8b 81       	ldd	r24, Y+3	; 0x03
    26be:	6c 81       	ldd	r22, Y+4	; 0x04
    26c0:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <LCD_ES_tSet_Cursor_Pos>
	Lcd_ES_tsendString(data);
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	9a 81       	ldd	r25, Y+2	; 0x02
    26c8:	0e 94 16 13 	call	0x262c	; 0x262c <Lcd_ES_tsendString>
	return ES_OK;
    26cc:	80 e0       	ldi	r24, 0x00	; 0

}
    26ce:	0f 90       	pop	r0
    26d0:	0f 90       	pop	r0
    26d2:	0f 90       	pop	r0
    26d4:	0f 90       	pop	r0
    26d6:	cf 91       	pop	r28
    26d8:	df 91       	pop	r29
    26da:	08 95       	ret

000026dc <Lcd_ES_tdisplayNum>:


//A function to display Numbers instead of characters
ES_t Lcd_ES_tdisplayNum(u16 num)
{
    26dc:	df 93       	push	r29
    26de:	cf 93       	push	r28
    26e0:	cd b7       	in	r28, 0x3d	; 61
    26e2:	de b7       	in	r29, 0x3e	; 62
    26e4:	2e 97       	sbiw	r28, 0x0e	; 14
    26e6:	0f b6       	in	r0, 0x3f	; 63
    26e8:	f8 94       	cli
    26ea:	de bf       	out	0x3e, r29	; 62
    26ec:	0f be       	out	0x3f, r0	; 63
    26ee:	cd bf       	out	0x3d, r28	; 61
    26f0:	9e 87       	std	Y+14, r25	; 0x0e
    26f2:	8d 87       	std	Y+13, r24	; 0x0d
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	61 e0       	ldi	r22, 0x01	; 1
    26f8:	41 e0       	ldi	r20, 0x01	; 1
    26fa:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	60 e0       	ldi	r22, 0x00	; 0
    2702:	40 e0       	ldi	r20, 0x00	; 0
    2704:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>

	uint8_t ch[10],i=0,j=0;
    2708:	1a 82       	std	Y+2, r1	; 0x02
    270a:	19 82       	std	Y+1, r1	; 0x01
	if(num == 0)
    270c:	8d 85       	ldd	r24, Y+13	; 0x0d
    270e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2710:	00 97       	sbiw	r24, 0x00	; 0
    2712:	11 f5       	brne	.+68     	; 0x2758 <Lcd_ES_tdisplayNum+0x7c>
	{
		Lcd_ES_tsendChar('0');
    2714:	80 e3       	ldi	r24, 0x30	; 48
    2716:	0e 94 62 12 	call	0x24c4	; 0x24c4 <Lcd_ES_tsendChar>
    271a:	39 c0       	rjmp	.+114    	; 0x278e <Lcd_ES_tdisplayNum+0xb2>
	}
	else
	{
		while(num)
		{
			ch[i] = num % 10 + '0';  //To convert int to char
    271c:	8a 81       	ldd	r24, Y+2	; 0x02
    271e:	e8 2f       	mov	r30, r24
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	8d 85       	ldd	r24, Y+13	; 0x0d
    2724:	9e 85       	ldd	r25, Y+14	; 0x0e
    2726:	2a e0       	ldi	r18, 0x0A	; 10
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	b9 01       	movw	r22, r18
    272c:	0e 94 40 18 	call	0x3080	; 0x3080 <__udivmodhi4>
    2730:	28 2f       	mov	r18, r24
    2732:	20 5d       	subi	r18, 0xD0	; 208
    2734:	ce 01       	movw	r24, r28
    2736:	03 96       	adiw	r24, 0x03	; 3
    2738:	e8 0f       	add	r30, r24
    273a:	f9 1f       	adc	r31, r25
    273c:	20 83       	st	Z, r18
			num /= 10;
    273e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2740:	9e 85       	ldd	r25, Y+14	; 0x0e
    2742:	2a e0       	ldi	r18, 0x0A	; 10
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	b9 01       	movw	r22, r18
    2748:	0e 94 40 18 	call	0x3080	; 0x3080 <__udivmodhi4>
    274c:	cb 01       	movw	r24, r22
    274e:	9e 87       	std	Y+14, r25	; 0x0e
    2750:	8d 87       	std	Y+13, r24	; 0x0d
			i++;
    2752:	8a 81       	ldd	r24, Y+2	; 0x02
    2754:	8f 5f       	subi	r24, 0xFF	; 255
    2756:	8a 83       	std	Y+2, r24	; 0x02
	{
		Lcd_ES_tsendChar('0');
	}
	else
	{
		while(num)
    2758:	8d 85       	ldd	r24, Y+13	; 0x0d
    275a:	9e 85       	ldd	r25, Y+14	; 0x0e
    275c:	00 97       	sbiw	r24, 0x00	; 0
    275e:	f1 f6       	brne	.-68     	; 0x271c <Lcd_ES_tdisplayNum+0x40>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    2760:	8a 81       	ldd	r24, Y+2	; 0x02
    2762:	89 83       	std	Y+1, r24	; 0x01
    2764:	11 c0       	rjmp	.+34     	; 0x2788 <Lcd_ES_tdisplayNum+0xac>
		{
			Lcd_ES_tsendChar(ch[j-1]);
    2766:	89 81       	ldd	r24, Y+1	; 0x01
    2768:	88 2f       	mov	r24, r24
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	9c 01       	movw	r18, r24
    276e:	21 50       	subi	r18, 0x01	; 1
    2770:	30 40       	sbci	r19, 0x00	; 0
    2772:	ce 01       	movw	r24, r28
    2774:	03 96       	adiw	r24, 0x03	; 3
    2776:	fc 01       	movw	r30, r24
    2778:	e2 0f       	add	r30, r18
    277a:	f3 1f       	adc	r31, r19
    277c:	80 81       	ld	r24, Z
    277e:	0e 94 62 12 	call	0x24c4	; 0x24c4 <Lcd_ES_tsendChar>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    2782:	89 81       	ldd	r24, Y+1	; 0x01
    2784:	81 50       	subi	r24, 0x01	; 1
    2786:	89 83       	std	Y+1, r24	; 0x01
    2788:	89 81       	ldd	r24, Y+1	; 0x01
    278a:	88 23       	and	r24, r24
    278c:	61 f7       	brne	.-40     	; 0x2766 <Lcd_ES_tdisplayNum+0x8a>
		{
			Lcd_ES_tsendChar(ch[j-1]);
		}
	}
	return ES_OK;
    278e:	80 e0       	ldi	r24, 0x00	; 0
}
    2790:	2e 96       	adiw	r28, 0x0e	; 14
    2792:	0f b6       	in	r0, 0x3f	; 63
    2794:	f8 94       	cli
    2796:	de bf       	out	0x3e, r29	; 62
    2798:	0f be       	out	0x3f, r0	; 63
    279a:	cd bf       	out	0x3d, r28	; 61
    279c:	cf 91       	pop	r28
    279e:	df 91       	pop	r29
    27a0:	08 95       	ret

000027a2 <Lcd_ES_tdisplayNum_xy>:

ES_t Lcd_ES_tdisplayNum_xy(u16 num,u8 row,u8 col){
    27a2:	df 93       	push	r29
    27a4:	cf 93       	push	r28
    27a6:	cd b7       	in	r28, 0x3d	; 61
    27a8:	de b7       	in	r29, 0x3e	; 62
    27aa:	a3 97       	sbiw	r28, 0x23	; 35
    27ac:	0f b6       	in	r0, 0x3f	; 63
    27ae:	f8 94       	cli
    27b0:	de bf       	out	0x3e, r29	; 62
    27b2:	0f be       	out	0x3f, r0	; 63
    27b4:	cd bf       	out	0x3d, r28	; 61
    27b6:	98 a3       	std	Y+32, r25	; 0x20
    27b8:	8f 8f       	std	Y+31, r24	; 0x1f
    27ba:	69 a3       	std	Y+33, r22	; 0x21
    27bc:	4a a3       	std	Y+34, r20	; 0x22

	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    27be:	81 e0       	ldi	r24, 0x01	; 1
    27c0:	61 e0       	ldi	r22, 0x01	; 1
    27c2:	41 e0       	ldi	r20, 0x01	; 1
    27c4:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	60 e0       	ldi	r22, 0x00	; 0
    27cc:	40 e0       	ldi	r20, 0x00	; 0
    27ce:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>


	if(row == 1){
    27d2:	89 a1       	ldd	r24, Y+33	; 0x21
    27d4:	81 30       	cpi	r24, 0x01	; 1
    27d6:	09 f0       	breq	.+2      	; 0x27da <Lcd_ES_tdisplayNum_xy+0x38>
    27d8:	76 c0       	rjmp	.+236    	; 0x28c6 <Lcd_ES_tdisplayNum_xy+0x124>
		Lcd_ES_tsendCmd(Force1stline);
    27da:	80 e8       	ldi	r24, 0x80	; 128
    27dc:	0e 94 ae 11 	call	0x235c	; 0x235c <Lcd_ES_tsendCmd>
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	a0 e8       	ldi	r26, 0x80	; 128
    27e6:	bf e3       	ldi	r27, 0x3F	; 63
    27e8:	89 8f       	std	Y+25, r24	; 0x19
    27ea:	9a 8f       	std	Y+26, r25	; 0x1a
    27ec:	ab 8f       	std	Y+27, r26	; 0x1b
    27ee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f0:	69 8d       	ldd	r22, Y+25	; 0x19
    27f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	4a e7       	ldi	r20, 0x7A	; 122
    27fe:	55 e4       	ldi	r21, 0x45	; 69
    2800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	8d 8b       	std	Y+21, r24	; 0x15
    280a:	9e 8b       	std	Y+22, r25	; 0x16
    280c:	af 8b       	std	Y+23, r26	; 0x17
    280e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2810:	6d 89       	ldd	r22, Y+21	; 0x15
    2812:	7e 89       	ldd	r23, Y+22	; 0x16
    2814:	8f 89       	ldd	r24, Y+23	; 0x17
    2816:	98 8d       	ldd	r25, Y+24	; 0x18
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	40 e8       	ldi	r20, 0x80	; 128
    281e:	5f e3       	ldi	r21, 0x3F	; 63
    2820:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2824:	88 23       	and	r24, r24
    2826:	2c f4       	brge	.+10     	; 0x2832 <Lcd_ES_tdisplayNum_xy+0x90>
		__ticks = 1;
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	9c 8b       	std	Y+20, r25	; 0x14
    282e:	8b 8b       	std	Y+19, r24	; 0x13
    2830:	3f c0       	rjmp	.+126    	; 0x28b0 <Lcd_ES_tdisplayNum_xy+0x10e>
	else if (__tmp > 65535)
    2832:	6d 89       	ldd	r22, Y+21	; 0x15
    2834:	7e 89       	ldd	r23, Y+22	; 0x16
    2836:	8f 89       	ldd	r24, Y+23	; 0x17
    2838:	98 8d       	ldd	r25, Y+24	; 0x18
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	3f ef       	ldi	r19, 0xFF	; 255
    283e:	4f e7       	ldi	r20, 0x7F	; 127
    2840:	57 e4       	ldi	r21, 0x47	; 71
    2842:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2846:	18 16       	cp	r1, r24
    2848:	4c f5       	brge	.+82     	; 0x289c <Lcd_ES_tdisplayNum_xy+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    284a:	69 8d       	ldd	r22, Y+25	; 0x19
    284c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    284e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2850:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	40 e2       	ldi	r20, 0x20	; 32
    2858:	51 e4       	ldi	r21, 0x41	; 65
    285a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	bc 01       	movw	r22, r24
    2864:	cd 01       	movw	r24, r26
    2866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	9c 8b       	std	Y+20, r25	; 0x14
    2870:	8b 8b       	std	Y+19, r24	; 0x13
    2872:	0f c0       	rjmp	.+30     	; 0x2892 <Lcd_ES_tdisplayNum_xy+0xf0>
    2874:	80 e9       	ldi	r24, 0x90	; 144
    2876:	91 e0       	ldi	r25, 0x01	; 1
    2878:	9a 8b       	std	Y+18, r25	; 0x12
    287a:	89 8b       	std	Y+17, r24	; 0x11
    287c:	89 89       	ldd	r24, Y+17	; 0x11
    287e:	9a 89       	ldd	r25, Y+18	; 0x12
    2880:	01 97       	sbiw	r24, 0x01	; 1
    2882:	f1 f7       	brne	.-4      	; 0x2880 <Lcd_ES_tdisplayNum_xy+0xde>
    2884:	9a 8b       	std	Y+18, r25	; 0x12
    2886:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2888:	8b 89       	ldd	r24, Y+19	; 0x13
    288a:	9c 89       	ldd	r25, Y+20	; 0x14
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	9c 8b       	std	Y+20, r25	; 0x14
    2890:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2892:	8b 89       	ldd	r24, Y+19	; 0x13
    2894:	9c 89       	ldd	r25, Y+20	; 0x14
    2896:	00 97       	sbiw	r24, 0x00	; 0
    2898:	69 f7       	brne	.-38     	; 0x2874 <Lcd_ES_tdisplayNum_xy+0xd2>
    289a:	92 c0       	rjmp	.+292    	; 0x29c0 <Lcd_ES_tdisplayNum_xy+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    289c:	6d 89       	ldd	r22, Y+21	; 0x15
    289e:	7e 89       	ldd	r23, Y+22	; 0x16
    28a0:	8f 89       	ldd	r24, Y+23	; 0x17
    28a2:	98 8d       	ldd	r25, Y+24	; 0x18
    28a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	9c 8b       	std	Y+20, r25	; 0x14
    28ae:	8b 8b       	std	Y+19, r24	; 0x13
    28b0:	8b 89       	ldd	r24, Y+19	; 0x13
    28b2:	9c 89       	ldd	r25, Y+20	; 0x14
    28b4:	98 8b       	std	Y+16, r25	; 0x10
    28b6:	8f 87       	std	Y+15, r24	; 0x0f
    28b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    28ba:	98 89       	ldd	r25, Y+16	; 0x10
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	f1 f7       	brne	.-4      	; 0x28bc <Lcd_ES_tdisplayNum_xy+0x11a>
    28c0:	98 8b       	std	Y+16, r25	; 0x10
    28c2:	8f 87       	std	Y+15, r24	; 0x0f
    28c4:	7d c0       	rjmp	.+250    	; 0x29c0 <Lcd_ES_tdisplayNum_xy+0x21e>
		_delay_ms(1);
	}else if(row == 2){
    28c6:	89 a1       	ldd	r24, Y+33	; 0x21
    28c8:	82 30       	cpi	r24, 0x02	; 2
    28ca:	09 f0       	breq	.+2      	; 0x28ce <Lcd_ES_tdisplayNum_xy+0x12c>
    28cc:	76 c0       	rjmp	.+236    	; 0x29ba <Lcd_ES_tdisplayNum_xy+0x218>
		Lcd_ES_tsendCmd(Force2ndline);
    28ce:	80 ec       	ldi	r24, 0xC0	; 192
    28d0:	0e 94 ae 11 	call	0x235c	; 0x235c <Lcd_ES_tsendCmd>
    28d4:	80 e0       	ldi	r24, 0x00	; 0
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	a0 e2       	ldi	r26, 0x20	; 32
    28da:	b1 e4       	ldi	r27, 0x41	; 65
    28dc:	8b 87       	std	Y+11, r24	; 0x0b
    28de:	9c 87       	std	Y+12, r25	; 0x0c
    28e0:	ad 87       	std	Y+13, r26	; 0x0d
    28e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    28e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    28e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	4a e7       	ldi	r20, 0x7A	; 122
    28f2:	55 e4       	ldi	r21, 0x45	; 69
    28f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	8f 83       	std	Y+7, r24	; 0x07
    28fe:	98 87       	std	Y+8, r25	; 0x08
    2900:	a9 87       	std	Y+9, r26	; 0x09
    2902:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2904:	6f 81       	ldd	r22, Y+7	; 0x07
    2906:	78 85       	ldd	r23, Y+8	; 0x08
    2908:	89 85       	ldd	r24, Y+9	; 0x09
    290a:	9a 85       	ldd	r25, Y+10	; 0x0a
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	40 e8       	ldi	r20, 0x80	; 128
    2912:	5f e3       	ldi	r21, 0x3F	; 63
    2914:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2918:	88 23       	and	r24, r24
    291a:	2c f4       	brge	.+10     	; 0x2926 <Lcd_ES_tdisplayNum_xy+0x184>
		__ticks = 1;
    291c:	81 e0       	ldi	r24, 0x01	; 1
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	9e 83       	std	Y+6, r25	; 0x06
    2922:	8d 83       	std	Y+5, r24	; 0x05
    2924:	3f c0       	rjmp	.+126    	; 0x29a4 <Lcd_ES_tdisplayNum_xy+0x202>
	else if (__tmp > 65535)
    2926:	6f 81       	ldd	r22, Y+7	; 0x07
    2928:	78 85       	ldd	r23, Y+8	; 0x08
    292a:	89 85       	ldd	r24, Y+9	; 0x09
    292c:	9a 85       	ldd	r25, Y+10	; 0x0a
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	3f ef       	ldi	r19, 0xFF	; 255
    2932:	4f e7       	ldi	r20, 0x7F	; 127
    2934:	57 e4       	ldi	r21, 0x47	; 71
    2936:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    293a:	18 16       	cp	r1, r24
    293c:	4c f5       	brge	.+82     	; 0x2990 <Lcd_ES_tdisplayNum_xy+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    293e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2940:	7c 85       	ldd	r23, Y+12	; 0x0c
    2942:	8d 85       	ldd	r24, Y+13	; 0x0d
    2944:	9e 85       	ldd	r25, Y+14	; 0x0e
    2946:	20 e0       	ldi	r18, 0x00	; 0
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	40 e2       	ldi	r20, 0x20	; 32
    294c:	51 e4       	ldi	r21, 0x41	; 65
    294e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2952:	dc 01       	movw	r26, r24
    2954:	cb 01       	movw	r24, r22
    2956:	bc 01       	movw	r22, r24
    2958:	cd 01       	movw	r24, r26
    295a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    295e:	dc 01       	movw	r26, r24
    2960:	cb 01       	movw	r24, r22
    2962:	9e 83       	std	Y+6, r25	; 0x06
    2964:	8d 83       	std	Y+5, r24	; 0x05
    2966:	0f c0       	rjmp	.+30     	; 0x2986 <Lcd_ES_tdisplayNum_xy+0x1e4>
    2968:	80 e9       	ldi	r24, 0x90	; 144
    296a:	91 e0       	ldi	r25, 0x01	; 1
    296c:	9c 83       	std	Y+4, r25	; 0x04
    296e:	8b 83       	std	Y+3, r24	; 0x03
    2970:	8b 81       	ldd	r24, Y+3	; 0x03
    2972:	9c 81       	ldd	r25, Y+4	; 0x04
    2974:	01 97       	sbiw	r24, 0x01	; 1
    2976:	f1 f7       	brne	.-4      	; 0x2974 <Lcd_ES_tdisplayNum_xy+0x1d2>
    2978:	9c 83       	std	Y+4, r25	; 0x04
    297a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    297c:	8d 81       	ldd	r24, Y+5	; 0x05
    297e:	9e 81       	ldd	r25, Y+6	; 0x06
    2980:	01 97       	sbiw	r24, 0x01	; 1
    2982:	9e 83       	std	Y+6, r25	; 0x06
    2984:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2986:	8d 81       	ldd	r24, Y+5	; 0x05
    2988:	9e 81       	ldd	r25, Y+6	; 0x06
    298a:	00 97       	sbiw	r24, 0x00	; 0
    298c:	69 f7       	brne	.-38     	; 0x2968 <Lcd_ES_tdisplayNum_xy+0x1c6>
    298e:	18 c0       	rjmp	.+48     	; 0x29c0 <Lcd_ES_tdisplayNum_xy+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2990:	6f 81       	ldd	r22, Y+7	; 0x07
    2992:	78 85       	ldd	r23, Y+8	; 0x08
    2994:	89 85       	ldd	r24, Y+9	; 0x09
    2996:	9a 85       	ldd	r25, Y+10	; 0x0a
    2998:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	9e 83       	std	Y+6, r25	; 0x06
    29a2:	8d 83       	std	Y+5, r24	; 0x05
    29a4:	8d 81       	ldd	r24, Y+5	; 0x05
    29a6:	9e 81       	ldd	r25, Y+6	; 0x06
    29a8:	9a 83       	std	Y+2, r25	; 0x02
    29aa:	89 83       	std	Y+1, r24	; 0x01
    29ac:	89 81       	ldd	r24, Y+1	; 0x01
    29ae:	9a 81       	ldd	r25, Y+2	; 0x02
    29b0:	01 97       	sbiw	r24, 0x01	; 1
    29b2:	f1 f7       	brne	.-4      	; 0x29b0 <Lcd_ES_tdisplayNum_xy+0x20e>
    29b4:	9a 83       	std	Y+2, r25	; 0x02
    29b6:	89 83       	std	Y+1, r24	; 0x01
    29b8:	03 c0       	rjmp	.+6      	; 0x29c0 <Lcd_ES_tdisplayNum_xy+0x21e>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	8b a3       	std	Y+35, r24	; 0x23
    29be:	1a c0       	rjmp	.+52     	; 0x29f4 <Lcd_ES_tdisplayNum_xy+0x252>
	}


	for(int j=1;j<=col;j++){
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	9e 8f       	std	Y+30, r25	; 0x1e
    29c6:	8d 8f       	std	Y+29, r24	; 0x1d
    29c8:	08 c0       	rjmp	.+16     	; 0x29da <Lcd_ES_tdisplayNum_xy+0x238>
		Lcd_ES_tsendCmd(ShiftRight);
    29ca:	8c e1       	ldi	r24, 0x1C	; 28
    29cc:	0e 94 ae 11 	call	0x235c	; 0x235c <Lcd_ES_tsendCmd>
	}else{
		return ES_NOT_OK;
	}


	for(int j=1;j<=col;j++){
    29d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29d4:	01 96       	adiw	r24, 0x01	; 1
    29d6:	9e 8f       	std	Y+30, r25	; 0x1e
    29d8:	8d 8f       	std	Y+29, r24	; 0x1d
    29da:	8a a1       	ldd	r24, Y+34	; 0x22
    29dc:	28 2f       	mov	r18, r24
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29e4:	28 17       	cp	r18, r24
    29e6:	39 07       	cpc	r19, r25
    29e8:	84 f7       	brge	.-32     	; 0x29ca <Lcd_ES_tdisplayNum_xy+0x228>
		Lcd_ES_tsendCmd(ShiftRight);
	}

	Lcd_ES_tdisplayNum(num);
    29ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29ec:	98 a1       	ldd	r25, Y+32	; 0x20
    29ee:	0e 94 6e 13 	call	0x26dc	; 0x26dc <Lcd_ES_tdisplayNum>
	return ES_OK;
    29f2:	1b a2       	std	Y+35, r1	; 0x23
    29f4:	8b a1       	ldd	r24, Y+35	; 0x23

}
    29f6:	a3 96       	adiw	r28, 0x23	; 35
    29f8:	0f b6       	in	r0, 0x3f	; 63
    29fa:	f8 94       	cli
    29fc:	de bf       	out	0x3e, r29	; 62
    29fe:	0f be       	out	0x3f, r0	; 63
    2a00:	cd bf       	out	0x3d, r28	; 61
    2a02:	cf 91       	pop	r28
    2a04:	df 91       	pop	r29
    2a06:	08 95       	ret

00002a08 <Lcd_ES_tsendChar_xy>:

ES_t Lcd_ES_tsendChar_xy(u8 data,u8 row,u8 col){
    2a08:	df 93       	push	r29
    2a0a:	cf 93       	push	r28
    2a0c:	cd b7       	in	r28, 0x3d	; 61
    2a0e:	de b7       	in	r29, 0x3e	; 62
    2a10:	a2 97       	sbiw	r28, 0x22	; 34
    2a12:	0f b6       	in	r0, 0x3f	; 63
    2a14:	f8 94       	cli
    2a16:	de bf       	out	0x3e, r29	; 62
    2a18:	0f be       	out	0x3f, r0	; 63
    2a1a:	cd bf       	out	0x3d, r28	; 61
    2a1c:	8f 8f       	std	Y+31, r24	; 0x1f
    2a1e:	68 a3       	std	Y+32, r22	; 0x20
    2a20:	49 a3       	std	Y+33, r20	; 0x21
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2a22:	81 e0       	ldi	r24, 0x01	; 1
    2a24:	61 e0       	ldi	r22, 0x01	; 1
    2a26:	41 e0       	ldi	r20, 0x01	; 1
    2a28:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2a2c:	81 e0       	ldi	r24, 0x01	; 1
    2a2e:	60 e0       	ldi	r22, 0x00	; 0
    2a30:	40 e0       	ldi	r20, 0x00	; 0
    2a32:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>


	if(row == 1){
    2a36:	88 a1       	ldd	r24, Y+32	; 0x20
    2a38:	81 30       	cpi	r24, 0x01	; 1
    2a3a:	09 f0       	breq	.+2      	; 0x2a3e <Lcd_ES_tsendChar_xy+0x36>
    2a3c:	76 c0       	rjmp	.+236    	; 0x2b2a <Lcd_ES_tsendChar_xy+0x122>
		Lcd_ES_tsendCmd(Force1stline);
    2a3e:	80 e8       	ldi	r24, 0x80	; 128
    2a40:	0e 94 ae 11 	call	0x235c	; 0x235c <Lcd_ES_tsendCmd>
    2a44:	80 e0       	ldi	r24, 0x00	; 0
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	a0 e8       	ldi	r26, 0x80	; 128
    2a4a:	bf e3       	ldi	r27, 0x3F	; 63
    2a4c:	89 8f       	std	Y+25, r24	; 0x19
    2a4e:	9a 8f       	std	Y+26, r25	; 0x1a
    2a50:	ab 8f       	std	Y+27, r26	; 0x1b
    2a52:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a54:	69 8d       	ldd	r22, Y+25	; 0x19
    2a56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	4a e7       	ldi	r20, 0x7A	; 122
    2a62:	55 e4       	ldi	r21, 0x45	; 69
    2a64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a68:	dc 01       	movw	r26, r24
    2a6a:	cb 01       	movw	r24, r22
    2a6c:	8d 8b       	std	Y+21, r24	; 0x15
    2a6e:	9e 8b       	std	Y+22, r25	; 0x16
    2a70:	af 8b       	std	Y+23, r26	; 0x17
    2a72:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a74:	6d 89       	ldd	r22, Y+21	; 0x15
    2a76:	7e 89       	ldd	r23, Y+22	; 0x16
    2a78:	8f 89       	ldd	r24, Y+23	; 0x17
    2a7a:	98 8d       	ldd	r25, Y+24	; 0x18
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	40 e8       	ldi	r20, 0x80	; 128
    2a82:	5f e3       	ldi	r21, 0x3F	; 63
    2a84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a88:	88 23       	and	r24, r24
    2a8a:	2c f4       	brge	.+10     	; 0x2a96 <Lcd_ES_tsendChar_xy+0x8e>
		__ticks = 1;
    2a8c:	81 e0       	ldi	r24, 0x01	; 1
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	9c 8b       	std	Y+20, r25	; 0x14
    2a92:	8b 8b       	std	Y+19, r24	; 0x13
    2a94:	3f c0       	rjmp	.+126    	; 0x2b14 <Lcd_ES_tsendChar_xy+0x10c>
	else if (__tmp > 65535)
    2a96:	6d 89       	ldd	r22, Y+21	; 0x15
    2a98:	7e 89       	ldd	r23, Y+22	; 0x16
    2a9a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a9c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	3f ef       	ldi	r19, 0xFF	; 255
    2aa2:	4f e7       	ldi	r20, 0x7F	; 127
    2aa4:	57 e4       	ldi	r21, 0x47	; 71
    2aa6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2aaa:	18 16       	cp	r1, r24
    2aac:	4c f5       	brge	.+82     	; 0x2b00 <Lcd_ES_tsendChar_xy+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aae:	69 8d       	ldd	r22, Y+25	; 0x19
    2ab0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ab2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ab4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	40 e2       	ldi	r20, 0x20	; 32
    2abc:	51 e4       	ldi	r21, 0x41	; 65
    2abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	bc 01       	movw	r22, r24
    2ac8:	cd 01       	movw	r24, r26
    2aca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	9c 8b       	std	Y+20, r25	; 0x14
    2ad4:	8b 8b       	std	Y+19, r24	; 0x13
    2ad6:	0f c0       	rjmp	.+30     	; 0x2af6 <Lcd_ES_tsendChar_xy+0xee>
    2ad8:	80 e9       	ldi	r24, 0x90	; 144
    2ada:	91 e0       	ldi	r25, 0x01	; 1
    2adc:	9a 8b       	std	Y+18, r25	; 0x12
    2ade:	89 8b       	std	Y+17, r24	; 0x11
    2ae0:	89 89       	ldd	r24, Y+17	; 0x11
    2ae2:	9a 89       	ldd	r25, Y+18	; 0x12
    2ae4:	01 97       	sbiw	r24, 0x01	; 1
    2ae6:	f1 f7       	brne	.-4      	; 0x2ae4 <Lcd_ES_tsendChar_xy+0xdc>
    2ae8:	9a 8b       	std	Y+18, r25	; 0x12
    2aea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aec:	8b 89       	ldd	r24, Y+19	; 0x13
    2aee:	9c 89       	ldd	r25, Y+20	; 0x14
    2af0:	01 97       	sbiw	r24, 0x01	; 1
    2af2:	9c 8b       	std	Y+20, r25	; 0x14
    2af4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2af6:	8b 89       	ldd	r24, Y+19	; 0x13
    2af8:	9c 89       	ldd	r25, Y+20	; 0x14
    2afa:	00 97       	sbiw	r24, 0x00	; 0
    2afc:	69 f7       	brne	.-38     	; 0x2ad8 <Lcd_ES_tsendChar_xy+0xd0>
    2afe:	92 c0       	rjmp	.+292    	; 0x2c24 <Lcd_ES_tsendChar_xy+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b00:	6d 89       	ldd	r22, Y+21	; 0x15
    2b02:	7e 89       	ldd	r23, Y+22	; 0x16
    2b04:	8f 89       	ldd	r24, Y+23	; 0x17
    2b06:	98 8d       	ldd	r25, Y+24	; 0x18
    2b08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b0c:	dc 01       	movw	r26, r24
    2b0e:	cb 01       	movw	r24, r22
    2b10:	9c 8b       	std	Y+20, r25	; 0x14
    2b12:	8b 8b       	std	Y+19, r24	; 0x13
    2b14:	8b 89       	ldd	r24, Y+19	; 0x13
    2b16:	9c 89       	ldd	r25, Y+20	; 0x14
    2b18:	98 8b       	std	Y+16, r25	; 0x10
    2b1a:	8f 87       	std	Y+15, r24	; 0x0f
    2b1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b1e:	98 89       	ldd	r25, Y+16	; 0x10
    2b20:	01 97       	sbiw	r24, 0x01	; 1
    2b22:	f1 f7       	brne	.-4      	; 0x2b20 <Lcd_ES_tsendChar_xy+0x118>
    2b24:	98 8b       	std	Y+16, r25	; 0x10
    2b26:	8f 87       	std	Y+15, r24	; 0x0f
    2b28:	7d c0       	rjmp	.+250    	; 0x2c24 <Lcd_ES_tsendChar_xy+0x21c>
		_delay_ms(1);
	}else if(row == 2){
    2b2a:	88 a1       	ldd	r24, Y+32	; 0x20
    2b2c:	82 30       	cpi	r24, 0x02	; 2
    2b2e:	09 f0       	breq	.+2      	; 0x2b32 <Lcd_ES_tsendChar_xy+0x12a>
    2b30:	76 c0       	rjmp	.+236    	; 0x2c1e <Lcd_ES_tsendChar_xy+0x216>
		Lcd_ES_tsendCmd(Force2ndline);
    2b32:	80 ec       	ldi	r24, 0xC0	; 192
    2b34:	0e 94 ae 11 	call	0x235c	; 0x235c <Lcd_ES_tsendCmd>
    2b38:	80 e0       	ldi	r24, 0x00	; 0
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	a0 e2       	ldi	r26, 0x20	; 32
    2b3e:	b1 e4       	ldi	r27, 0x41	; 65
    2b40:	8b 87       	std	Y+11, r24	; 0x0b
    2b42:	9c 87       	std	Y+12, r25	; 0x0c
    2b44:	ad 87       	std	Y+13, r26	; 0x0d
    2b46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b48:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	4a e7       	ldi	r20, 0x7A	; 122
    2b56:	55 e4       	ldi	r21, 0x45	; 69
    2b58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	cb 01       	movw	r24, r22
    2b60:	8f 83       	std	Y+7, r24	; 0x07
    2b62:	98 87       	std	Y+8, r25	; 0x08
    2b64:	a9 87       	std	Y+9, r26	; 0x09
    2b66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b68:	6f 81       	ldd	r22, Y+7	; 0x07
    2b6a:	78 85       	ldd	r23, Y+8	; 0x08
    2b6c:	89 85       	ldd	r24, Y+9	; 0x09
    2b6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b70:	20 e0       	ldi	r18, 0x00	; 0
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	40 e8       	ldi	r20, 0x80	; 128
    2b76:	5f e3       	ldi	r21, 0x3F	; 63
    2b78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b7c:	88 23       	and	r24, r24
    2b7e:	2c f4       	brge	.+10     	; 0x2b8a <Lcd_ES_tsendChar_xy+0x182>
		__ticks = 1;
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	9e 83       	std	Y+6, r25	; 0x06
    2b86:	8d 83       	std	Y+5, r24	; 0x05
    2b88:	3f c0       	rjmp	.+126    	; 0x2c08 <Lcd_ES_tsendChar_xy+0x200>
	else if (__tmp > 65535)
    2b8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b8c:	78 85       	ldd	r23, Y+8	; 0x08
    2b8e:	89 85       	ldd	r24, Y+9	; 0x09
    2b90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	3f ef       	ldi	r19, 0xFF	; 255
    2b96:	4f e7       	ldi	r20, 0x7F	; 127
    2b98:	57 e4       	ldi	r21, 0x47	; 71
    2b9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b9e:	18 16       	cp	r1, r24
    2ba0:	4c f5       	brge	.+82     	; 0x2bf4 <Lcd_ES_tsendChar_xy+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ba2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ba4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ba6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ba8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	40 e2       	ldi	r20, 0x20	; 32
    2bb0:	51 e4       	ldi	r21, 0x41	; 65
    2bb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	bc 01       	movw	r22, r24
    2bbc:	cd 01       	movw	r24, r26
    2bbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	cb 01       	movw	r24, r22
    2bc6:	9e 83       	std	Y+6, r25	; 0x06
    2bc8:	8d 83       	std	Y+5, r24	; 0x05
    2bca:	0f c0       	rjmp	.+30     	; 0x2bea <Lcd_ES_tsendChar_xy+0x1e2>
    2bcc:	80 e9       	ldi	r24, 0x90	; 144
    2bce:	91 e0       	ldi	r25, 0x01	; 1
    2bd0:	9c 83       	std	Y+4, r25	; 0x04
    2bd2:	8b 83       	std	Y+3, r24	; 0x03
    2bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd6:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd8:	01 97       	sbiw	r24, 0x01	; 1
    2bda:	f1 f7       	brne	.-4      	; 0x2bd8 <Lcd_ES_tsendChar_xy+0x1d0>
    2bdc:	9c 83       	std	Y+4, r25	; 0x04
    2bde:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2be0:	8d 81       	ldd	r24, Y+5	; 0x05
    2be2:	9e 81       	ldd	r25, Y+6	; 0x06
    2be4:	01 97       	sbiw	r24, 0x01	; 1
    2be6:	9e 83       	std	Y+6, r25	; 0x06
    2be8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bea:	8d 81       	ldd	r24, Y+5	; 0x05
    2bec:	9e 81       	ldd	r25, Y+6	; 0x06
    2bee:	00 97       	sbiw	r24, 0x00	; 0
    2bf0:	69 f7       	brne	.-38     	; 0x2bcc <Lcd_ES_tsendChar_xy+0x1c4>
    2bf2:	18 c0       	rjmp	.+48     	; 0x2c24 <Lcd_ES_tsendChar_xy+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bf4:	6f 81       	ldd	r22, Y+7	; 0x07
    2bf6:	78 85       	ldd	r23, Y+8	; 0x08
    2bf8:	89 85       	ldd	r24, Y+9	; 0x09
    2bfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c00:	dc 01       	movw	r26, r24
    2c02:	cb 01       	movw	r24, r22
    2c04:	9e 83       	std	Y+6, r25	; 0x06
    2c06:	8d 83       	std	Y+5, r24	; 0x05
    2c08:	8d 81       	ldd	r24, Y+5	; 0x05
    2c0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c0c:	9a 83       	std	Y+2, r25	; 0x02
    2c0e:	89 83       	std	Y+1, r24	; 0x01
    2c10:	89 81       	ldd	r24, Y+1	; 0x01
    2c12:	9a 81       	ldd	r25, Y+2	; 0x02
    2c14:	01 97       	sbiw	r24, 0x01	; 1
    2c16:	f1 f7       	brne	.-4      	; 0x2c14 <Lcd_ES_tsendChar_xy+0x20c>
    2c18:	9a 83       	std	Y+2, r25	; 0x02
    2c1a:	89 83       	std	Y+1, r24	; 0x01
    2c1c:	03 c0       	rjmp	.+6      	; 0x2c24 <Lcd_ES_tsendChar_xy+0x21c>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	8a a3       	std	Y+34, r24	; 0x22
    2c22:	19 c0       	rjmp	.+50     	; 0x2c56 <Lcd_ES_tsendChar_xy+0x24e>
	}

	for(int j=1;j<=col;j++){
    2c24:	81 e0       	ldi	r24, 0x01	; 1
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	9e 8f       	std	Y+30, r25	; 0x1e
    2c2a:	8d 8f       	std	Y+29, r24	; 0x1d
    2c2c:	08 c0       	rjmp	.+16     	; 0x2c3e <Lcd_ES_tsendChar_xy+0x236>
		Lcd_ES_tsendCmd(ShiftRight);
    2c2e:	8c e1       	ldi	r24, 0x1C	; 28
    2c30:	0e 94 ae 11 	call	0x235c	; 0x235c <Lcd_ES_tsendCmd>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
	}

	for(int j=1;j<=col;j++){
    2c34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c36:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c38:	01 96       	adiw	r24, 0x01	; 1
    2c3a:	9e 8f       	std	Y+30, r25	; 0x1e
    2c3c:	8d 8f       	std	Y+29, r24	; 0x1d
    2c3e:	89 a1       	ldd	r24, Y+33	; 0x21
    2c40:	28 2f       	mov	r18, r24
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c46:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c48:	28 17       	cp	r18, r24
    2c4a:	39 07       	cpc	r19, r25
    2c4c:	84 f7       	brge	.-32     	; 0x2c2e <Lcd_ES_tsendChar_xy+0x226>
		Lcd_ES_tsendCmd(ShiftRight);
	}
	Lcd_ES_tsendChar(data);
    2c4e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c50:	0e 94 62 12 	call	0x24c4	; 0x24c4 <Lcd_ES_tsendChar>
	return ES_OK;
    2c54:	1a a2       	std	Y+34, r1	; 0x22
    2c56:	8a a1       	ldd	r24, Y+34	; 0x22
}
    2c58:	a2 96       	adiw	r28, 0x22	; 34
    2c5a:	0f b6       	in	r0, 0x3f	; 63
    2c5c:	f8 94       	cli
    2c5e:	de bf       	out	0x3e, r29	; 62
    2c60:	0f be       	out	0x3f, r0	; 63
    2c62:	cd bf       	out	0x3d, r28	; 61
    2c64:	cf 91       	pop	r28
    2c66:	df 91       	pop	r29
    2c68:	08 95       	ret

00002c6a <LCD_ES_tSet_Cursor_Pos>:

static ES_t LCD_ES_tSet_Cursor_Pos(u8 row,u8 column){
    2c6a:	df 93       	push	r29
    2c6c:	cf 93       	push	r28
    2c6e:	00 d0       	rcall	.+0      	; 0x2c70 <LCD_ES_tSet_Cursor_Pos+0x6>
    2c70:	00 d0       	rcall	.+0      	; 0x2c72 <LCD_ES_tSet_Cursor_Pos+0x8>
    2c72:	0f 92       	push	r0
    2c74:	cd b7       	in	r28, 0x3d	; 61
    2c76:	de b7       	in	r29, 0x3e	; 62
    2c78:	89 83       	std	Y+1, r24	; 0x01
    2c7a:	6a 83       	std	Y+2, r22	; 0x02
	column--;
    2c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7e:	81 50       	subi	r24, 0x01	; 1
    2c80:	8a 83       	std	Y+2, r24	; 0x02
	switch(row){
    2c82:	89 81       	ldd	r24, Y+1	; 0x01
    2c84:	28 2f       	mov	r18, r24
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	3d 83       	std	Y+5, r19	; 0x05
    2c8a:	2c 83       	std	Y+4, r18	; 0x04
    2c8c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c8e:	9d 81       	ldd	r25, Y+5	; 0x05
    2c90:	81 30       	cpi	r24, 0x01	; 1
    2c92:	91 05       	cpc	r25, r1
    2c94:	31 f0       	breq	.+12     	; 0x2ca2 <LCD_ES_tSet_Cursor_Pos+0x38>
    2c96:	2c 81       	ldd	r18, Y+4	; 0x04
    2c98:	3d 81       	ldd	r19, Y+5	; 0x05
    2c9a:	22 30       	cpi	r18, 0x02	; 2
    2c9c:	31 05       	cpc	r19, r1
    2c9e:	31 f0       	breq	.+12     	; 0x2cac <LCD_ES_tSet_Cursor_Pos+0x42>
    2ca0:	0a c0       	rjmp	.+20     	; 0x2cb6 <LCD_ES_tSet_Cursor_Pos+0x4c>
	         case 1:
	        	 Lcd_ES_tsendCmd((0x80 + column));
    2ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca4:	80 58       	subi	r24, 0x80	; 128
    2ca6:	0e 94 ae 11 	call	0x235c	; 0x235c <Lcd_ES_tsendCmd>
    2caa:	08 c0       	rjmp	.+16     	; 0x2cbc <LCD_ES_tSet_Cursor_Pos+0x52>
	        	 break;
	         case 2:
	        	 Lcd_ES_tsendCmd((0xc0 + column));
    2cac:	8a 81       	ldd	r24, Y+2	; 0x02
    2cae:	80 54       	subi	r24, 0x40	; 64
    2cb0:	0e 94 ae 11 	call	0x235c	; 0x235c <Lcd_ES_tsendCmd>
    2cb4:	03 c0       	rjmp	.+6      	; 0x2cbc <LCD_ES_tSet_Cursor_Pos+0x52>
	        	 break;
	         default:
	        	 return ES_NOT_OK;
    2cb6:	31 e0       	ldi	r19, 0x01	; 1
    2cb8:	3b 83       	std	Y+3, r19	; 0x03
    2cba:	01 c0       	rjmp	.+2      	; 0x2cbe <LCD_ES_tSet_Cursor_Pos+0x54>
	}
	return ES_OK;
    2cbc:	1b 82       	std	Y+3, r1	; 0x03
    2cbe:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2cc0:	0f 90       	pop	r0
    2cc2:	0f 90       	pop	r0
    2cc4:	0f 90       	pop	r0
    2cc6:	0f 90       	pop	r0
    2cc8:	0f 90       	pop	r0
    2cca:	cf 91       	pop	r28
    2ccc:	df 91       	pop	r29
    2cce:	08 95       	ret

00002cd0 <LCD_ES_tGoTo>:

/************************************************************************/
ES_t LCD_ES_tGoTo(u8 Line, u8 x){
    2cd0:	df 93       	push	r29
    2cd2:	cf 93       	push	r28
    2cd4:	00 d0       	rcall	.+0      	; 0x2cd6 <LCD_ES_tGoTo+0x6>
    2cd6:	0f 92       	push	r0
    2cd8:	cd b7       	in	r28, 0x3d	; 61
    2cda:	de b7       	in	r29, 0x3e	; 62
    2cdc:	89 83       	std	Y+1, r24	; 0x01
    2cde:	6a 83       	std	Y+2, r22	; 0x02
	if(0 == Line)
    2ce0:	89 81       	ldd	r24, Y+1	; 0x01
    2ce2:	88 23       	and	r24, r24
    2ce4:	41 f4       	brne	.+16     	; 0x2cf6 <LCD_ES_tGoTo+0x26>
	{
		if ( x <=15)
    2ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce8:	80 31       	cpi	r24, 0x10	; 16
    2cea:	98 f4       	brcc	.+38     	; 0x2d12 <LCD_ES_tGoTo+0x42>
		{
			Lcd_ES_tsendCmd(0x80 + x);
    2cec:	8a 81       	ldd	r24, Y+2	; 0x02
    2cee:	80 58       	subi	r24, 0x80	; 128
    2cf0:	0e 94 ae 11 	call	0x235c	; 0x235c <Lcd_ES_tsendCmd>
    2cf4:	0e c0       	rjmp	.+28     	; 0x2d12 <LCD_ES_tGoTo+0x42>
		}
	}
	else if (1 == Line)
    2cf6:	89 81       	ldd	r24, Y+1	; 0x01
    2cf8:	81 30       	cpi	r24, 0x01	; 1
    2cfa:	41 f4       	brne	.+16     	; 0x2d0c <LCD_ES_tGoTo+0x3c>
	{
		if ( x <=15)
    2cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfe:	80 31       	cpi	r24, 0x10	; 16
    2d00:	40 f4       	brcc	.+16     	; 0x2d12 <LCD_ES_tGoTo+0x42>
		{
			Lcd_ES_tsendCmd(0xC0 + x);
    2d02:	8a 81       	ldd	r24, Y+2	; 0x02
    2d04:	80 54       	subi	r24, 0x40	; 64
    2d06:	0e 94 ae 11 	call	0x235c	; 0x235c <Lcd_ES_tsendCmd>
    2d0a:	03 c0       	rjmp	.+6      	; 0x2d12 <LCD_ES_tGoTo+0x42>
		}
	}else{
		return ES_NOT_OK;
    2d0c:	81 e0       	ldi	r24, 0x01	; 1
    2d0e:	8b 83       	std	Y+3, r24	; 0x03
    2d10:	01 c0       	rjmp	.+2      	; 0x2d14 <LCD_ES_tGoTo+0x44>
	}
	return ES_OK;
    2d12:	1b 82       	std	Y+3, r1	; 0x03
    2d14:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2d16:	0f 90       	pop	r0
    2d18:	0f 90       	pop	r0
    2d1a:	0f 90       	pop	r0
    2d1c:	cf 91       	pop	r28
    2d1e:	df 91       	pop	r29
    2d20:	08 95       	ret

00002d22 <KPD_ES_tGetKeyPressed>:
// To avoid the unarrangement and uncontiguous
const u8 KPD_Au8RowsPins[4] = {KPD_U8_R1,KPD_U8_R2,KPD_U8_R3,KPD_U8_R4};
const u8 KPD_Au8ColsPins[4] = {KPD_U8_C1,KPD_U8_C2,KPD_U8_C3,KPD_U8_C4};

ES_t KPD_ES_tGetKeyPressed(u8 *copy_pu8ReturnedKey)
{
    2d22:	df 93       	push	r29
    2d24:	cf 93       	push	r28
    2d26:	cd b7       	in	r28, 0x3d	; 61
    2d28:	de b7       	in	r29, 0x3e	; 62
    2d2a:	65 97       	sbiw	r28, 0x15	; 21
    2d2c:	0f b6       	in	r0, 0x3f	; 63
    2d2e:	f8 94       	cli
    2d30:	de bf       	out	0x3e, r29	; 62
    2d32:	0f be       	out	0x3f, r0	; 63
    2d34:	cd bf       	out	0x3d, r28	; 61
    2d36:	9c 8b       	std	Y+20, r25	; 0x14
    2d38:	8b 8b       	std	Y+19, r24	; 0x13
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
    2d3a:	eb 89       	ldd	r30, Y+19	; 0x13
    2d3c:	fc 89       	ldd	r31, Y+20	; 0x14
    2d3e:	8f ef       	ldi	r24, 0xFF	; 255
    2d40:	80 83       	st	Z, r24
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
    2d42:	1f 86       	std	Y+15, r1	; 0x0f
	if(copy_pu8ReturnedKey != NULL)
    2d44:	8b 89       	ldd	r24, Y+19	; 0x13
    2d46:	9c 89       	ldd	r25, Y+20	; 0x14
    2d48:	00 97       	sbiw	r24, 0x00	; 0
    2d4a:	09 f4       	brne	.+2      	; 0x2d4e <KPD_ES_tGetKeyPressed+0x2c>
    2d4c:	ed c0       	rjmp	.+474    	; 0x2f28 <KPD_ES_tGetKeyPressed+0x206>
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
    2d4e:	19 8a       	std	Y+17, r1	; 0x11
    2d50:	e5 c0       	rjmp	.+458    	; 0x2f1c <KPD_ES_tGetKeyPressed+0x1fa>
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
    2d52:	89 89       	ldd	r24, Y+17	; 0x11
    2d54:	88 2f       	mov	r24, r24
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	fc 01       	movw	r30, r24
    2d5a:	ed 50       	subi	r30, 0x0D	; 13
    2d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5e:	90 81       	ld	r25, Z
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	69 2f       	mov	r22, r25
    2d64:	40 e0       	ldi	r20, 0x00	; 0
    2d66:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
    2d6a:	18 8a       	std	Y+16, r1	; 0x10
    2d6c:	c1 c0       	rjmp	.+386    	; 0x2ef0 <KPD_ES_tGetKeyPressed+0x1ce>
			{
				DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);
    2d6e:	88 89       	ldd	r24, Y+16	; 0x10
    2d70:	88 2f       	mov	r24, r24
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	fc 01       	movw	r30, r24
    2d76:	e9 50       	subi	r30, 0x09	; 9
    2d78:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7a:	90 81       	ld	r25, Z
    2d7c:	9e 01       	movw	r18, r28
    2d7e:	2e 5e       	subi	r18, 0xEE	; 238
    2d80:	3f 4f       	sbci	r19, 0xFF	; 255
    2d82:	83 e0       	ldi	r24, 0x03	; 3
    2d84:	69 2f       	mov	r22, r25
    2d86:	a9 01       	movw	r20, r18
    2d88:	0e 94 75 0a 	call	0x14ea	; 0x14ea <DIO_ES_tGetPinValue>
				if(Local_u8PinVal == LOW){ /* Switch is pressed */
    2d8c:	8a 89       	ldd	r24, Y+18	; 0x12
    2d8e:	88 23       	and	r24, r24
    2d90:	09 f0       	breq	.+2      	; 0x2d94 <KPD_ES_tGetKeyPressed+0x72>
    2d92:	ab c0       	rjmp	.+342    	; 0x2eea <KPD_ES_tGetKeyPressed+0x1c8>
    2d94:	80 e0       	ldi	r24, 0x00	; 0
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	a0 ea       	ldi	r26, 0xA0	; 160
    2d9a:	b1 e4       	ldi	r27, 0x41	; 65
    2d9c:	8b 87       	std	Y+11, r24	; 0x0b
    2d9e:	9c 87       	std	Y+12, r25	; 0x0c
    2da0:	ad 87       	std	Y+13, r26	; 0x0d
    2da2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2da4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2da6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2da8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2daa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dac:	20 e0       	ldi	r18, 0x00	; 0
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	4a e7       	ldi	r20, 0x7A	; 122
    2db2:	55 e4       	ldi	r21, 0x45	; 69
    2db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db8:	dc 01       	movw	r26, r24
    2dba:	cb 01       	movw	r24, r22
    2dbc:	8f 83       	std	Y+7, r24	; 0x07
    2dbe:	98 87       	std	Y+8, r25	; 0x08
    2dc0:	a9 87       	std	Y+9, r26	; 0x09
    2dc2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dc4:	6f 81       	ldd	r22, Y+7	; 0x07
    2dc6:	78 85       	ldd	r23, Y+8	; 0x08
    2dc8:	89 85       	ldd	r24, Y+9	; 0x09
    2dca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dcc:	20 e0       	ldi	r18, 0x00	; 0
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	40 e8       	ldi	r20, 0x80	; 128
    2dd2:	5f e3       	ldi	r21, 0x3F	; 63
    2dd4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dd8:	88 23       	and	r24, r24
    2dda:	2c f4       	brge	.+10     	; 0x2de6 <KPD_ES_tGetKeyPressed+0xc4>
		__ticks = 1;
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	9e 83       	std	Y+6, r25	; 0x06
    2de2:	8d 83       	std	Y+5, r24	; 0x05
    2de4:	3f c0       	rjmp	.+126    	; 0x2e64 <KPD_ES_tGetKeyPressed+0x142>
	else if (__tmp > 65535)
    2de6:	6f 81       	ldd	r22, Y+7	; 0x07
    2de8:	78 85       	ldd	r23, Y+8	; 0x08
    2dea:	89 85       	ldd	r24, Y+9	; 0x09
    2dec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	3f ef       	ldi	r19, 0xFF	; 255
    2df2:	4f e7       	ldi	r20, 0x7F	; 127
    2df4:	57 e4       	ldi	r21, 0x47	; 71
    2df6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dfa:	18 16       	cp	r1, r24
    2dfc:	4c f5       	brge	.+82     	; 0x2e50 <KPD_ES_tGetKeyPressed+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e00:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e02:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e04:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e06:	20 e0       	ldi	r18, 0x00	; 0
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	40 e2       	ldi	r20, 0x20	; 32
    2e0c:	51 e4       	ldi	r21, 0x41	; 65
    2e0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	bc 01       	movw	r22, r24
    2e18:	cd 01       	movw	r24, r26
    2e1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e1e:	dc 01       	movw	r26, r24
    2e20:	cb 01       	movw	r24, r22
    2e22:	9e 83       	std	Y+6, r25	; 0x06
    2e24:	8d 83       	std	Y+5, r24	; 0x05
    2e26:	0f c0       	rjmp	.+30     	; 0x2e46 <KPD_ES_tGetKeyPressed+0x124>
    2e28:	80 e9       	ldi	r24, 0x90	; 144
    2e2a:	91 e0       	ldi	r25, 0x01	; 1
    2e2c:	9c 83       	std	Y+4, r25	; 0x04
    2e2e:	8b 83       	std	Y+3, r24	; 0x03
    2e30:	8b 81       	ldd	r24, Y+3	; 0x03
    2e32:	9c 81       	ldd	r25, Y+4	; 0x04
    2e34:	01 97       	sbiw	r24, 0x01	; 1
    2e36:	f1 f7       	brne	.-4      	; 0x2e34 <KPD_ES_tGetKeyPressed+0x112>
    2e38:	9c 83       	std	Y+4, r25	; 0x04
    2e3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e40:	01 97       	sbiw	r24, 0x01	; 1
    2e42:	9e 83       	std	Y+6, r25	; 0x06
    2e44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e46:	8d 81       	ldd	r24, Y+5	; 0x05
    2e48:	9e 81       	ldd	r25, Y+6	; 0x06
    2e4a:	00 97       	sbiw	r24, 0x00	; 0
    2e4c:	69 f7       	brne	.-38     	; 0x2e28 <KPD_ES_tGetKeyPressed+0x106>
    2e4e:	14 c0       	rjmp	.+40     	; 0x2e78 <KPD_ES_tGetKeyPressed+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e50:	6f 81       	ldd	r22, Y+7	; 0x07
    2e52:	78 85       	ldd	r23, Y+8	; 0x08
    2e54:	89 85       	ldd	r24, Y+9	; 0x09
    2e56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e5c:	dc 01       	movw	r26, r24
    2e5e:	cb 01       	movw	r24, r22
    2e60:	9e 83       	std	Y+6, r25	; 0x06
    2e62:	8d 83       	std	Y+5, r24	; 0x05
    2e64:	8d 81       	ldd	r24, Y+5	; 0x05
    2e66:	9e 81       	ldd	r25, Y+6	; 0x06
    2e68:	9a 83       	std	Y+2, r25	; 0x02
    2e6a:	89 83       	std	Y+1, r24	; 0x01
    2e6c:	89 81       	ldd	r24, Y+1	; 0x01
    2e6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e70:	01 97       	sbiw	r24, 0x01	; 1
    2e72:	f1 f7       	brne	.-4      	; 0x2e70 <KPD_ES_tGetKeyPressed+0x14e>
    2e74:	9a 83       	std	Y+2, r25	; 0x02
    2e76:	89 83       	std	Y+1, r24	; 0x01
					/* The switch which reaches between the activated
					 * Column and the pressed key */
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    2e78:	88 89       	ldd	r24, Y+16	; 0x10
    2e7a:	88 2f       	mov	r24, r24
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	fc 01       	movw	r30, r24
    2e80:	e9 50       	subi	r30, 0x09	; 9
    2e82:	ff 4f       	sbci	r31, 0xFF	; 255
    2e84:	90 81       	ld	r25, Z
    2e86:	9e 01       	movw	r18, r28
    2e88:	2e 5e       	subi	r18, 0xEE	; 238
    2e8a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e8c:	83 e0       	ldi	r24, 0x03	; 3
    2e8e:	69 2f       	mov	r22, r25
    2e90:	a9 01       	movw	r20, r18
    2e92:	0e 94 75 0a 	call	0x14ea	; 0x14ea <DIO_ES_tGetPinValue>
    2e96:	0f c0       	rjmp	.+30     	; 0x2eb6 <KPD_ES_tGetKeyPressed+0x194>
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    2e98:	88 89       	ldd	r24, Y+16	; 0x10
    2e9a:	88 2f       	mov	r24, r24
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	fc 01       	movw	r30, r24
    2ea0:	e9 50       	subi	r30, 0x09	; 9
    2ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea4:	90 81       	ld	r25, Z
    2ea6:	9e 01       	movw	r18, r28
    2ea8:	2e 5e       	subi	r18, 0xEE	; 238
    2eaa:	3f 4f       	sbci	r19, 0xFF	; 255
    2eac:	83 e0       	ldi	r24, 0x03	; 3
    2eae:	69 2f       	mov	r22, r25
    2eb0:	a9 01       	movw	r20, r18
    2eb2:	0e 94 75 0a 	call	0x14ea	; 0x14ea <DIO_ES_tGetPinValue>
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
    2eb6:	8a 89       	ldd	r24, Y+18	; 0x12
    2eb8:	88 23       	and	r24, r24
    2eba:	71 f3       	breq	.-36     	; 0x2e98 <KPD_ES_tGetKeyPressed+0x176>
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					}
					*copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    2ebc:	89 89       	ldd	r24, Y+17	; 0x11
    2ebe:	48 2f       	mov	r20, r24
    2ec0:	50 e0       	ldi	r21, 0x00	; 0
    2ec2:	88 89       	ldd	r24, Y+16	; 0x10
    2ec4:	28 2f       	mov	r18, r24
    2ec6:	30 e0       	ldi	r19, 0x00	; 0
    2ec8:	ca 01       	movw	r24, r20
    2eca:	88 0f       	add	r24, r24
    2ecc:	99 1f       	adc	r25, r25
    2ece:	88 0f       	add	r24, r24
    2ed0:	99 1f       	adc	r25, r25
    2ed2:	82 0f       	add	r24, r18
    2ed4:	93 1f       	adc	r25, r19
    2ed6:	fc 01       	movw	r30, r24
    2ed8:	ed 51       	subi	r30, 0x1D	; 29
    2eda:	ff 4f       	sbci	r31, 0xFF	; 255
    2edc:	80 81       	ld	r24, Z
    2ede:	eb 89       	ldd	r30, Y+19	; 0x13
    2ee0:	fc 89       	ldd	r31, Y+20	; 0x14
    2ee2:	80 83       	st	Z, r24
					Local_u8Flag = HIGH;
    2ee4:	81 e0       	ldi	r24, 0x01	; 1
    2ee6:	8f 87       	std	Y+15, r24	; 0x0f
    2ee8:	07 c0       	rjmp	.+14     	; 0x2ef8 <KPD_ES_tGetKeyPressed+0x1d6>
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
    2eea:	88 89       	ldd	r24, Y+16	; 0x10
    2eec:	8f 5f       	subi	r24, 0xFF	; 255
    2eee:	88 8b       	std	Y+16, r24	; 0x10
    2ef0:	88 89       	ldd	r24, Y+16	; 0x10
    2ef2:	84 30       	cpi	r24, 0x04	; 4
    2ef4:	08 f4       	brcc	.+2      	; 0x2ef8 <KPD_ES_tGetKeyPressed+0x1d6>
    2ef6:	3b cf       	rjmp	.-394    	; 0x2d6e <KPD_ES_tGetKeyPressed+0x4c>
					Local_u8Flag = HIGH;
					break;
				}
			}
			// Deactivate ROW
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],HIGH);
    2ef8:	89 89       	ldd	r24, Y+17	; 0x11
    2efa:	88 2f       	mov	r24, r24
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	fc 01       	movw	r30, r24
    2f00:	ed 50       	subi	r30, 0x0D	; 13
    2f02:	ff 4f       	sbci	r31, 0xFF	; 255
    2f04:	90 81       	ld	r25, Z
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	69 2f       	mov	r22, r25
    2f0a:	41 e0       	ldi	r20, 0x01	; 1
    2f0c:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
			if(Local_u8Flag == HIGH)
    2f10:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f12:	81 30       	cpi	r24, 0x01	; 1
    2f14:	39 f0       	breq	.+14     	; 0x2f24 <KPD_ES_tGetKeyPressed+0x202>
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
	if(copy_pu8ReturnedKey != NULL)
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
    2f16:	89 89       	ldd	r24, Y+17	; 0x11
    2f18:	8f 5f       	subi	r24, 0xFF	; 255
    2f1a:	89 8b       	std	Y+17, r24	; 0x11
    2f1c:	89 89       	ldd	r24, Y+17	; 0x11
    2f1e:	84 30       	cpi	r24, 0x04	; 4
    2f20:	08 f4       	brcc	.+2      	; 0x2f24 <KPD_ES_tGetKeyPressed+0x202>
    2f22:	17 cf       	rjmp	.-466    	; 0x2d52 <KPD_ES_tGetKeyPressed+0x30>


	}else{
		return ES_NOT_OK;
	}
	return ES_OK;
    2f24:	1d 8a       	std	Y+21, r1	; 0x15
    2f26:	02 c0       	rjmp	.+4      	; 0x2f2c <KPD_ES_tGetKeyPressed+0x20a>
				break;
		}


	}else{
		return ES_NOT_OK;
    2f28:	81 e0       	ldi	r24, 0x01	; 1
    2f2a:	8d 8b       	std	Y+21, r24	; 0x15
    2f2c:	8d 89       	ldd	r24, Y+21	; 0x15
	}
	return ES_OK;
}
    2f2e:	65 96       	adiw	r28, 0x15	; 21
    2f30:	0f b6       	in	r0, 0x3f	; 63
    2f32:	f8 94       	cli
    2f34:	de bf       	out	0x3e, r29	; 62
    2f36:	0f be       	out	0x3f, r0	; 63
    2f38:	cd bf       	out	0x3d, r28	; 61
    2f3a:	cf 91       	pop	r28
    2f3c:	df 91       	pop	r29
    2f3e:	08 95       	ret

00002f40 <main>:




int main()
{
    2f40:	df 93       	push	r29
    2f42:	cf 93       	push	r28
    2f44:	cd b7       	in	r28, 0x3d	; 61
    2f46:	de b7       	in	r29, 0x3e	; 62
    2f48:	60 97       	sbiw	r28, 0x10	; 16
    2f4a:	0f b6       	in	r0, 0x3f	; 63
    2f4c:	f8 94       	cli
    2f4e:	de bf       	out	0x3e, r29	; 62
    2f50:	0f be       	out	0x3f, r0	; 63
    2f52:	cd bf       	out	0x3d, r28	; 61
	DIO_ES_tInit();
    2f54:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_ES_tInit>
	Lcd_ES_tInit();
    2f58:	0e 94 0e 11 	call	0x221c	; 0x221c <Lcd_ES_tInit>
	ADC_init();
    2f5c:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <ADC_init>

	u16 Ldr_read;


	Lcd_ES_tsendString("ADC Testing");
    2f60:	80 e6       	ldi	r24, 0x60	; 96
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	0e 94 16 13 	call	0x262c	; 0x262c <Lcd_ES_tsendString>
	LCD_ES_tGoTo(1, 0);
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	60 e0       	ldi	r22, 0x00	; 0
    2f6c:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <LCD_ES_tGoTo>
	Lcd_ES_tsendString("LDR Out : ");
    2f70:	8c e6       	ldi	r24, 0x6C	; 108
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	0e 94 16 13 	call	0x262c	; 0x262c <Lcd_ES_tsendString>


    while (1)
    {
    	Lcd_ES_tsendString("   ");
    2f78:	87 e7       	ldi	r24, 0x77	; 119
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	0e 94 16 13 	call	0x262c	; 0x262c <Lcd_ES_tsendString>
    	LCD_ES_tGoTo(1, 10);
    2f80:	81 e0       	ldi	r24, 0x01	; 1
    2f82:	6a e0       	ldi	r22, 0x0A	; 10
    2f84:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <LCD_ES_tGoTo>
    	Ldr_read = ADC_read(ADC0);
    2f88:	80 e0       	ldi	r24, 0x00	; 0
    2f8a:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <ADC_read>
    2f8e:	98 8b       	std	Y+16, r25	; 0x10
    2f90:	8f 87       	std	Y+15, r24	; 0x0f
    	Lcd_ES_tdisplayNum(Ldr_read);
    2f92:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f94:	98 89       	ldd	r25, Y+16	; 0x10
    2f96:	0e 94 6e 13 	call	0x26dc	; 0x26dc <Lcd_ES_tdisplayNum>
    2f9a:	80 e0       	ldi	r24, 0x00	; 0
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	aa ef       	ldi	r26, 0xFA	; 250
    2fa0:	b3 e4       	ldi	r27, 0x43	; 67
    2fa2:	8b 87       	std	Y+11, r24	; 0x0b
    2fa4:	9c 87       	std	Y+12, r25	; 0x0c
    2fa6:	ad 87       	std	Y+13, r26	; 0x0d
    2fa8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2faa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fac:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fae:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	4a e7       	ldi	r20, 0x7A	; 122
    2fb8:	55 e4       	ldi	r21, 0x45	; 69
    2fba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fbe:	dc 01       	movw	r26, r24
    2fc0:	cb 01       	movw	r24, r22
    2fc2:	8f 83       	std	Y+7, r24	; 0x07
    2fc4:	98 87       	std	Y+8, r25	; 0x08
    2fc6:	a9 87       	std	Y+9, r26	; 0x09
    2fc8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fca:	6f 81       	ldd	r22, Y+7	; 0x07
    2fcc:	78 85       	ldd	r23, Y+8	; 0x08
    2fce:	89 85       	ldd	r24, Y+9	; 0x09
    2fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	40 e8       	ldi	r20, 0x80	; 128
    2fd8:	5f e3       	ldi	r21, 0x3F	; 63
    2fda:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fde:	88 23       	and	r24, r24
    2fe0:	2c f4       	brge	.+10     	; 0x2fec <main+0xac>
		__ticks = 1;
    2fe2:	81 e0       	ldi	r24, 0x01	; 1
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	9e 83       	std	Y+6, r25	; 0x06
    2fe8:	8d 83       	std	Y+5, r24	; 0x05
    2fea:	3f c0       	rjmp	.+126    	; 0x306a <main+0x12a>
	else if (__tmp > 65535)
    2fec:	6f 81       	ldd	r22, Y+7	; 0x07
    2fee:	78 85       	ldd	r23, Y+8	; 0x08
    2ff0:	89 85       	ldd	r24, Y+9	; 0x09
    2ff2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ff4:	20 e0       	ldi	r18, 0x00	; 0
    2ff6:	3f ef       	ldi	r19, 0xFF	; 255
    2ff8:	4f e7       	ldi	r20, 0x7F	; 127
    2ffa:	57 e4       	ldi	r21, 0x47	; 71
    2ffc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3000:	18 16       	cp	r1, r24
    3002:	4c f5       	brge	.+82     	; 0x3056 <main+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3004:	6b 85       	ldd	r22, Y+11	; 0x0b
    3006:	7c 85       	ldd	r23, Y+12	; 0x0c
    3008:	8d 85       	ldd	r24, Y+13	; 0x0d
    300a:	9e 85       	ldd	r25, Y+14	; 0x0e
    300c:	20 e0       	ldi	r18, 0x00	; 0
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	40 e2       	ldi	r20, 0x20	; 32
    3012:	51 e4       	ldi	r21, 0x41	; 65
    3014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3018:	dc 01       	movw	r26, r24
    301a:	cb 01       	movw	r24, r22
    301c:	bc 01       	movw	r22, r24
    301e:	cd 01       	movw	r24, r26
    3020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3024:	dc 01       	movw	r26, r24
    3026:	cb 01       	movw	r24, r22
    3028:	9e 83       	std	Y+6, r25	; 0x06
    302a:	8d 83       	std	Y+5, r24	; 0x05
    302c:	0f c0       	rjmp	.+30     	; 0x304c <main+0x10c>
    302e:	80 e9       	ldi	r24, 0x90	; 144
    3030:	91 e0       	ldi	r25, 0x01	; 1
    3032:	9c 83       	std	Y+4, r25	; 0x04
    3034:	8b 83       	std	Y+3, r24	; 0x03
    3036:	8b 81       	ldd	r24, Y+3	; 0x03
    3038:	9c 81       	ldd	r25, Y+4	; 0x04
    303a:	01 97       	sbiw	r24, 0x01	; 1
    303c:	f1 f7       	brne	.-4      	; 0x303a <main+0xfa>
    303e:	9c 83       	std	Y+4, r25	; 0x04
    3040:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3042:	8d 81       	ldd	r24, Y+5	; 0x05
    3044:	9e 81       	ldd	r25, Y+6	; 0x06
    3046:	01 97       	sbiw	r24, 0x01	; 1
    3048:	9e 83       	std	Y+6, r25	; 0x06
    304a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    304c:	8d 81       	ldd	r24, Y+5	; 0x05
    304e:	9e 81       	ldd	r25, Y+6	; 0x06
    3050:	00 97       	sbiw	r24, 0x00	; 0
    3052:	69 f7       	brne	.-38     	; 0x302e <main+0xee>
    3054:	91 cf       	rjmp	.-222    	; 0x2f78 <main+0x38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3056:	6f 81       	ldd	r22, Y+7	; 0x07
    3058:	78 85       	ldd	r23, Y+8	; 0x08
    305a:	89 85       	ldd	r24, Y+9	; 0x09
    305c:	9a 85       	ldd	r25, Y+10	; 0x0a
    305e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	9e 83       	std	Y+6, r25	; 0x06
    3068:	8d 83       	std	Y+5, r24	; 0x05
    306a:	8d 81       	ldd	r24, Y+5	; 0x05
    306c:	9e 81       	ldd	r25, Y+6	; 0x06
    306e:	9a 83       	std	Y+2, r25	; 0x02
    3070:	89 83       	std	Y+1, r24	; 0x01
    3072:	89 81       	ldd	r24, Y+1	; 0x01
    3074:	9a 81       	ldd	r25, Y+2	; 0x02
    3076:	01 97       	sbiw	r24, 0x01	; 1
    3078:	f1 f7       	brne	.-4      	; 0x3076 <main+0x136>
    307a:	9a 83       	std	Y+2, r25	; 0x02
    307c:	89 83       	std	Y+1, r24	; 0x01
    307e:	7c cf       	rjmp	.-264    	; 0x2f78 <main+0x38>

00003080 <__udivmodhi4>:
    3080:	aa 1b       	sub	r26, r26
    3082:	bb 1b       	sub	r27, r27
    3084:	51 e1       	ldi	r21, 0x11	; 17
    3086:	07 c0       	rjmp	.+14     	; 0x3096 <__udivmodhi4_ep>

00003088 <__udivmodhi4_loop>:
    3088:	aa 1f       	adc	r26, r26
    308a:	bb 1f       	adc	r27, r27
    308c:	a6 17       	cp	r26, r22
    308e:	b7 07       	cpc	r27, r23
    3090:	10 f0       	brcs	.+4      	; 0x3096 <__udivmodhi4_ep>
    3092:	a6 1b       	sub	r26, r22
    3094:	b7 0b       	sbc	r27, r23

00003096 <__udivmodhi4_ep>:
    3096:	88 1f       	adc	r24, r24
    3098:	99 1f       	adc	r25, r25
    309a:	5a 95       	dec	r21
    309c:	a9 f7       	brne	.-22     	; 0x3088 <__udivmodhi4_loop>
    309e:	80 95       	com	r24
    30a0:	90 95       	com	r25
    30a2:	bc 01       	movw	r22, r24
    30a4:	cd 01       	movw	r24, r26
    30a6:	08 95       	ret

000030a8 <__prologue_saves__>:
    30a8:	2f 92       	push	r2
    30aa:	3f 92       	push	r3
    30ac:	4f 92       	push	r4
    30ae:	5f 92       	push	r5
    30b0:	6f 92       	push	r6
    30b2:	7f 92       	push	r7
    30b4:	8f 92       	push	r8
    30b6:	9f 92       	push	r9
    30b8:	af 92       	push	r10
    30ba:	bf 92       	push	r11
    30bc:	cf 92       	push	r12
    30be:	df 92       	push	r13
    30c0:	ef 92       	push	r14
    30c2:	ff 92       	push	r15
    30c4:	0f 93       	push	r16
    30c6:	1f 93       	push	r17
    30c8:	cf 93       	push	r28
    30ca:	df 93       	push	r29
    30cc:	cd b7       	in	r28, 0x3d	; 61
    30ce:	de b7       	in	r29, 0x3e	; 62
    30d0:	ca 1b       	sub	r28, r26
    30d2:	db 0b       	sbc	r29, r27
    30d4:	0f b6       	in	r0, 0x3f	; 63
    30d6:	f8 94       	cli
    30d8:	de bf       	out	0x3e, r29	; 62
    30da:	0f be       	out	0x3f, r0	; 63
    30dc:	cd bf       	out	0x3d, r28	; 61
    30de:	09 94       	ijmp

000030e0 <__epilogue_restores__>:
    30e0:	2a 88       	ldd	r2, Y+18	; 0x12
    30e2:	39 88       	ldd	r3, Y+17	; 0x11
    30e4:	48 88       	ldd	r4, Y+16	; 0x10
    30e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    30e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    30ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    30ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    30ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    30f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    30f2:	b9 84       	ldd	r11, Y+9	; 0x09
    30f4:	c8 84       	ldd	r12, Y+8	; 0x08
    30f6:	df 80       	ldd	r13, Y+7	; 0x07
    30f8:	ee 80       	ldd	r14, Y+6	; 0x06
    30fa:	fd 80       	ldd	r15, Y+5	; 0x05
    30fc:	0c 81       	ldd	r16, Y+4	; 0x04
    30fe:	1b 81       	ldd	r17, Y+3	; 0x03
    3100:	aa 81       	ldd	r26, Y+2	; 0x02
    3102:	b9 81       	ldd	r27, Y+1	; 0x01
    3104:	ce 0f       	add	r28, r30
    3106:	d1 1d       	adc	r29, r1
    3108:	0f b6       	in	r0, 0x3f	; 63
    310a:	f8 94       	cli
    310c:	de bf       	out	0x3e, r29	; 62
    310e:	0f be       	out	0x3f, r0	; 63
    3110:	cd bf       	out	0x3d, r28	; 61
    3112:	ed 01       	movw	r28, r26
    3114:	08 95       	ret

00003116 <_exit>:
    3116:	f8 94       	cli

00003118 <__stop_program>:
    3118:	ff cf       	rjmp	.-2      	; 0x3118 <__stop_program>
