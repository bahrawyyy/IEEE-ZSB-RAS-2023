
LCD_Task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000094c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000076  00800060  0000094c  000009e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000d6  008000d6  00000a56  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a56  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a01  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000937  00000000  00000000  000025bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f50  00000000  00000000  00002ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  00003e44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007f3  00000000  00000000  00004084  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ff4  00000000  00000000  00004877  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000586b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e4       	ldi	r30, 0x4C	; 76
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3d       	cpi	r26, 0xD6	; 214
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 ed       	ldi	r26, 0xD6	; 214
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3d       	cpi	r26, 0xD8	; 216
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  8a:	0c 94 a4 04 	jmp	0x948	; 0x948 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Lcd_void_checkDimension>:

static u8 row=0, col=0;


void Lcd_void_checkDimension(){
	if(row==0 && col==15){
  92:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <row>
  96:	81 11       	cpse	r24, r1
  98:	09 c0       	rjmp	.+18     	; 0xac <Lcd_void_checkDimension+0x1a>
  9a:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__data_end>
  9e:	8f 30       	cpi	r24, 0x0F	; 15
  a0:	29 f4       	brne	.+10     	; 0xac <Lcd_void_checkDimension+0x1a>
		row=1;
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <row>
		col=0;
  a8:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <__data_end>
	}
	
	
	if(row == 1 && col == 15){
  ac:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <row>
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	51 f4       	brne	.+20     	; 0xc8 <Lcd_void_checkDimension+0x36>
  b4:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__data_end>
  b8:	8f 30       	cpi	r24, 0x0F	; 15
  ba:	31 f4       	brne	.+12     	; 0xc8 <Lcd_void_checkDimension+0x36>
		lcd_ES_tclear();
  bc:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_ES_tclear>
		row=0;
  c0:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <row>
		col=0;
  c4:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <__data_end>
	}
	
	col++;
  c8:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__data_end>
  cc:	6f 5f       	subi	r22, 0xFF	; 255
  ce:	60 93 d6 00 	sts	0x00D6, r22	; 0x8000d6 <__data_end>
	
	LCD_ES_tGoTo(row,col);
  d2:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <row>
  d6:	0e 94 03 02 	call	0x406	; 0x406 <LCD_ES_tGoTo>
  da:	08 95       	ret

000000dc <main>:
}

int main()
{
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
  e4:	a4 97       	sbiw	r28, 0x24	; 36
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	f8 94       	cli
  ea:	de bf       	out	0x3e, r29	; 62
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	cd bf       	out	0x3d, r28	; 61
	DIO_ES_tInit();
  f0:	0e 94 18 03 	call	0x630	; 0x630 <DIO_ES_tInit>
	Lcd_ES_tInit();
  f4:	0e 94 4c 01 	call	0x298	; 0x298 <Lcd_ES_tInit>
	LCD_ES_tGoTo(0, 0);
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	0e 94 03 02 	call	0x406	; 0x406 <LCD_ES_tGoTo>

	// Arrays of custom characters
	u8 Smile[] = {0x00,0x00,0x0A,0x00,0x11,0x11,0x0E,0x00};
 100:	88 e0       	ldi	r24, 0x08	; 8
 102:	e4 ea       	ldi	r30, 0xA4	; 164
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	de 01       	movw	r26, r28
 108:	11 96       	adiw	r26, 0x01	; 1
 10a:	01 90       	ld	r0, Z+
 10c:	0d 92       	st	X+, r0
 10e:	8a 95       	dec	r24
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x2e>
	u8 bell[] = {0x00,0x00,0x04,0x00,0x1F,0x1F,0x0E,0x04};
 112:	88 e0       	ldi	r24, 0x08	; 8
 114:	ec ea       	ldi	r30, 0xAC	; 172
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	de 01       	movw	r26, r28
 11a:	19 96       	adiw	r26, 0x09	; 9
 11c:	01 90       	ld	r0, Z+
 11e:	0d 92       	st	X+, r0
 120:	8a 95       	dec	r24
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x40>
	u8 arrow[] = {0x00,0x04,0x0E,0x1F,0x04,0x04,0x04,0x04};
 124:	88 e0       	ldi	r24, 0x08	; 8
 126:	e4 eb       	ldi	r30, 0xB4	; 180
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	de 01       	movw	r26, r28
 12c:	51 96       	adiw	r26, 0x11	; 17
 12e:	01 90       	ld	r0, Z+
 130:	0d 92       	st	X+, r0
 132:	8a 95       	dec	r24
 134:	e1 f7       	brne	.-8      	; 0x12e <main+0x52>
	u8 bug[] = {0x11,0x11,0x0A,0x0E,0x0E,0x04,0x0A,0x11};
 136:	88 e0       	ldi	r24, 0x08	; 8
 138:	ec eb       	ldi	r30, 0xBC	; 188
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	de 01       	movw	r26, r28
 13e:	59 96       	adiw	r26, 0x19	; 25
 140:	01 90       	ld	r0, Z+
 142:	0d 92       	st	X+, r0
 144:	8a 95       	dec	r24
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0x64>

	// Creating Custom characters
	Lcd_CreateCustomCharacter(Smile,SMILE);
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	ce 01       	movw	r24, r28
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	0e 94 1d 02 	call	0x43a	; 0x43a <Lcd_CreateCustomCharacter>
	Lcd_CreateCustomCharacter(bell,BELL);
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	ce 01       	movw	r24, r28
 156:	09 96       	adiw	r24, 0x09	; 9
 158:	0e 94 1d 02 	call	0x43a	; 0x43a <Lcd_CreateCustomCharacter>
	Lcd_CreateCustomCharacter(arrow,ARROW);
 15c:	62 e0       	ldi	r22, 0x02	; 2
 15e:	ce 01       	movw	r24, r28
 160:	41 96       	adiw	r24, 0x11	; 17
 162:	0e 94 1d 02 	call	0x43a	; 0x43a <Lcd_CreateCustomCharacter>
	Lcd_CreateCustomCharacter(bug,BUG);
 166:	63 e0       	ldi	r22, 0x03	; 3
 168:	ce 01       	movw	r24, r28
 16a:	49 96       	adiw	r24, 0x19	; 25
 16c:	0e 94 1d 02 	call	0x43a	; 0x43a <Lcd_CreateCustomCharacter>


	

	u8 Local_u8_Switch1Val=LOW;
 170:	19 a2       	std	Y+33, r1	; 0x21
	u8 Local_u8_Switch2Val=LOW;
 172:	1a a2       	std	Y+34, r1	; 0x22
	u8 Local_u8_Switch3Val=LOW;
 174:	1b a2       	std	Y+35, r1	; 0x23
	u8 Local_u8_Switch4Val=LOW;
 176:	1c a2       	std	Y+36, r1	; 0x24

	Lcd_ES_tsendCmd(0x80);   // Set DDRAM address to 0
 178:	80 e8       	ldi	r24, 0x80	; 128
 17a:	0e 94 2e 01 	call	0x25c	; 0x25c <Lcd_ES_tsendCmd>

	Lcd_ES_tsendString("Custom Character");
 17e:	84 ec       	ldi	r24, 0xC4	; 196
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 e6 01 	call	0x3cc	; 0x3cc <Lcd_ES_tsendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 186:	2f ef       	ldi	r18, 0xFF	; 255
 188:	89 e6       	ldi	r24, 0x69	; 105
 18a:	98 e1       	ldi	r25, 0x18	; 24
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	80 40       	sbci	r24, 0x00	; 0
 190:	90 40       	sbci	r25, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <main+0xb0>
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0xba>
 196:	00 00       	nop
	_delay_ms(500);
	lcd_ES_tclear();
 198:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_ES_tclear>
	//Lcd_ES_tsendChar(SMILE);
	while(1)
	{	
		DIO_ES_tGetPinValue(DIO_U8_PORT_C, DIO_U8_PIN_6, &Local_u8_Switch1Val);
 19c:	ae 01       	movw	r20, r28
 19e:	4f 5d       	subi	r20, 0xDF	; 223
 1a0:	5f 4f       	sbci	r21, 0xFF	; 255
 1a2:	66 e0       	ldi	r22, 0x06	; 6
 1a4:	82 e0       	ldi	r24, 0x02	; 2
 1a6:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_ES_tGetPinValue>
		DIO_ES_tGetPinValue(DIO_U8_PORT_C, DIO_U8_PIN_5, &Local_u8_Switch2Val);
 1aa:	ae 01       	movw	r20, r28
 1ac:	4e 5d       	subi	r20, 0xDE	; 222
 1ae:	5f 4f       	sbci	r21, 0xFF	; 255
 1b0:	65 e0       	ldi	r22, 0x05	; 5
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_ES_tGetPinValue>
		DIO_ES_tGetPinValue(DIO_U8_PORT_C, DIO_U8_PIN_4, &Local_u8_Switch3Val);
 1b8:	ae 01       	movw	r20, r28
 1ba:	4d 5d       	subi	r20, 0xDD	; 221
 1bc:	5f 4f       	sbci	r21, 0xFF	; 255
 1be:	64 e0       	ldi	r22, 0x04	; 4
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_ES_tGetPinValue>
		DIO_ES_tGetPinValue(DIO_U8_PORT_C, DIO_U8_PIN_3, &Local_u8_Switch4Val);
 1c6:	ae 01       	movw	r20, r28
 1c8:	4c 5d       	subi	r20, 0xDC	; 220
 1ca:	5f 4f       	sbci	r21, 0xFF	; 255
 1cc:	63 e0       	ldi	r22, 0x03	; 3
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_ES_tGetPinValue>
 1d4:	2f ef       	ldi	r18, 0xFF	; 255
 1d6:	89 ec       	ldi	r24, 0xC9	; 201
 1d8:	98 e0       	ldi	r25, 0x08	; 8
 1da:	21 50       	subi	r18, 0x01	; 1
 1dc:	80 40       	sbci	r24, 0x00	; 0
 1de:	90 40       	sbci	r25, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <main+0xfe>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <main+0x108>
 1e4:	00 00       	nop
		
		_delay_ms(180);
			
		if(Local_u8_Switch1Val == HIGH){
 1e6:	89 a1       	ldd	r24, Y+33	; 0x21
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	31 f4       	brne	.+12     	; 0x1f8 <main+0x11c>
			Lcd_void_checkDimension();
 1ec:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_void_checkDimension>
			Lcd_ES_tsendChar(SMILE);
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Lcd_ES_tsendChar>
 1f6:	d2 cf       	rjmp	.-92     	; 0x19c <main+0xc0>
		}else if(Local_u8_Switch2Val == HIGH){
 1f8:	8a a1       	ldd	r24, Y+34	; 0x22
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	31 f4       	brne	.+12     	; 0x20a <main+0x12e>
			Lcd_void_checkDimension();
 1fe:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_void_checkDimension>
			Lcd_ES_tsendChar(BELL);
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Lcd_ES_tsendChar>
 208:	c9 cf       	rjmp	.-110    	; 0x19c <main+0xc0>
		}else if(Local_u8_Switch3Val == HIGH){
 20a:	8b a1       	ldd	r24, Y+35	; 0x23
 20c:	81 30       	cpi	r24, 0x01	; 1
 20e:	31 f4       	brne	.+12     	; 0x21c <main+0x140>
			Lcd_void_checkDimension();
 210:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_void_checkDimension>
			Lcd_ES_tsendChar(ARROW);
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Lcd_ES_tsendChar>
 21a:	c0 cf       	rjmp	.-128    	; 0x19c <main+0xc0>
		}else if(Local_u8_Switch4Val == HIGH){
 21c:	8c a1       	ldd	r24, Y+36	; 0x24
 21e:	81 30       	cpi	r24, 0x01	; 1
 220:	09 f0       	breq	.+2      	; 0x224 <main+0x148>
 222:	bc cf       	rjmp	.-136    	; 0x19c <main+0xc0>
			Lcd_void_checkDimension();
 224:	0e 94 49 00 	call	0x92	; 0x92 <Lcd_void_checkDimension>
			Lcd_ES_tsendChar(BUG);
 228:	83 e0       	ldi	r24, 0x03	; 3
 22a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Lcd_ES_tsendChar>
 22e:	b6 cf       	rjmp	.-148    	; 0x19c <main+0xc0>

00000230 <LCD_ES_tTrigger_Enable>:
	for(int j=1;j<=copy_u8_col;j++){
		Lcd_ES_tsendCmd(ShiftRight);
	}
	Lcd_ES_tsendChar(copy_u8_data);
	return ES_OK;
}
 230:	41 e0       	ldi	r20, 0x01	; 1
 232:	62 e0       	ldi	r22, 0x02	; 2
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	0e 94 39 02 	call	0x472	; 0x472 <DIO_ES_tSetPinValue>
 23a:	85 e3       	ldi	r24, 0x35	; 53
 23c:	8a 95       	dec	r24
 23e:	f1 f7       	brne	.-4      	; 0x23c <LCD_ES_tTrigger_Enable+0xc>
 240:	00 00       	nop
 242:	40 e0       	ldi	r20, 0x00	; 0
 244:	62 e0       	ldi	r22, 0x02	; 2
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	0e 94 39 02 	call	0x472	; 0x472 <DIO_ES_tSetPinValue>
 24c:	8f e3       	ldi	r24, 0x3F	; 63
 24e:	9f e1       	ldi	r25, 0x1F	; 31
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <LCD_ES_tTrigger_Enable+0x20>
 254:	00 c0       	rjmp	.+0      	; 0x256 <LCD_ES_tTrigger_Enable+0x26>
 256:	00 00       	nop
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	08 95       	ret

0000025c <Lcd_ES_tsendCmd>:
 25c:	cf 93       	push	r28
 25e:	c8 2f       	mov	r28, r24
 260:	40 e0       	ldi	r20, 0x00	; 0
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	0e 94 39 02 	call	0x472	; 0x472 <DIO_ES_tSetPinValue>
 26a:	40 e0       	ldi	r20, 0x00	; 0
 26c:	60 e0       	ldi	r22, 0x00	; 0
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	0e 94 39 02 	call	0x472	; 0x472 <DIO_ES_tSetPinValue>
 274:	6c 2f       	mov	r22, r28
 276:	60 7f       	andi	r22, 0xF0	; 240
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	0e 94 02 03 	call	0x604	; 0x604 <DIO_ES_tSetPortValue>
 27e:	0e 94 18 01 	call	0x230	; 0x230 <LCD_ES_tTrigger_Enable>
 282:	6c 2f       	mov	r22, r28
 284:	62 95       	swap	r22
 286:	60 7f       	andi	r22, 0xF0	; 240
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	0e 94 02 03 	call	0x604	; 0x604 <DIO_ES_tSetPortValue>
 28e:	0e 94 18 01 	call	0x230	; 0x230 <LCD_ES_tTrigger_Enable>
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <Lcd_ES_tInit>:
 298:	83 e3       	ldi	r24, 0x33	; 51
 29a:	0e 94 2e 01 	call	0x25c	; 0x25c <Lcd_ES_tsendCmd>
 29e:	82 e3       	ldi	r24, 0x32	; 50
 2a0:	0e 94 2e 01 	call	0x25c	; 0x25c <Lcd_ES_tsendCmd>
 2a4:	88 e2       	ldi	r24, 0x28	; 40
 2a6:	0e 94 2e 01 	call	0x25c	; 0x25c <Lcd_ES_tsendCmd>
 2aa:	8c e0       	ldi	r24, 0x0C	; 12
 2ac:	0e 94 2e 01 	call	0x25c	; 0x25c <Lcd_ES_tsendCmd>
 2b0:	86 e0       	ldi	r24, 0x06	; 6
 2b2:	0e 94 2e 01 	call	0x25c	; 0x25c <Lcd_ES_tsendCmd>
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	0e 94 2e 01 	call	0x25c	; 0x25c <Lcd_ES_tsendCmd>
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	08 95       	ret

000002c0 <lcd_ES_tclear>:
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	0e 94 2e 01 	call	0x25c	; 0x25c <Lcd_ES_tsendCmd>
 2c6:	8f e3       	ldi	r24, 0x3F	; 63
 2c8:	9f e1       	ldi	r25, 0x1F	; 31
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <lcd_ES_tclear+0xa>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <lcd_ES_tclear+0x10>
 2d0:	00 00       	nop
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	08 95       	ret

000002d6 <Lcd_ES_tsendChar>:
 2d6:	cf 93       	push	r28
 2d8:	c8 2f       	mov	r28, r24
 2da:	41 e0       	ldi	r20, 0x01	; 1
 2dc:	61 e0       	ldi	r22, 0x01	; 1
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	0e 94 39 02 	call	0x472	; 0x472 <DIO_ES_tSetPinValue>
 2e4:	40 e0       	ldi	r20, 0x00	; 0
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	0e 94 39 02 	call	0x472	; 0x472 <DIO_ES_tSetPinValue>
 2ee:	cc 23       	and	r28, r28
 2f0:	34 f4       	brge	.+12     	; 0x2fe <Lcd_ES_tsendChar+0x28>
 2f2:	41 e0       	ldi	r20, 0x01	; 1
 2f4:	67 e0       	ldi	r22, 0x07	; 7
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	0e 94 39 02 	call	0x472	; 0x472 <DIO_ES_tSetPinValue>
 2fc:	05 c0       	rjmp	.+10     	; 0x308 <Lcd_ES_tsendChar+0x32>
 2fe:	40 e0       	ldi	r20, 0x00	; 0
 300:	67 e0       	ldi	r22, 0x07	; 7
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	0e 94 39 02 	call	0x472	; 0x472 <DIO_ES_tSetPinValue>
 308:	c6 ff       	sbrs	r28, 6
 30a:	06 c0       	rjmp	.+12     	; 0x318 <Lcd_ES_tsendChar+0x42>
 30c:	41 e0       	ldi	r20, 0x01	; 1
 30e:	66 e0       	ldi	r22, 0x06	; 6
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	0e 94 39 02 	call	0x472	; 0x472 <DIO_ES_tSetPinValue>
 316:	05 c0       	rjmp	.+10     	; 0x322 <Lcd_ES_tsendChar+0x4c>
 318:	40 e0       	ldi	r20, 0x00	; 0
 31a:	66 e0       	ldi	r22, 0x06	; 6
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	0e 94 39 02 	call	0x472	; 0x472 <DIO_ES_tSetPinValue>
 322:	c5 ff       	sbrs	r28, 5
 324:	06 c0       	rjmp	.+12     	; 0x332 <Lcd_ES_tsendChar+0x5c>
 326:	41 e0       	ldi	r20, 0x01	; 1
 328:	65 e0       	ldi	r22, 0x05	; 5
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	0e 94 39 02 	call	0x472	; 0x472 <DIO_ES_tSetPinValue>
 330:	05 c0       	rjmp	.+10     	; 0x33c <Lcd_ES_tsendChar+0x66>
 332:	40 e0       	ldi	r20, 0x00	; 0
 334:	65 e0       	ldi	r22, 0x05	; 5
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	0e 94 39 02 	call	0x472	; 0x472 <DIO_ES_tSetPinValue>
 33c:	c4 ff       	sbrs	r28, 4
 33e:	06 c0       	rjmp	.+12     	; 0x34c <Lcd_ES_tsendChar+0x76>
 340:	41 e0       	ldi	r20, 0x01	; 1
 342:	64 e0       	ldi	r22, 0x04	; 4
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	0e 94 39 02 	call	0x472	; 0x472 <DIO_ES_tSetPinValue>
 34a:	05 c0       	rjmp	.+10     	; 0x356 <Lcd_ES_tsendChar+0x80>
 34c:	40 e0       	ldi	r20, 0x00	; 0
 34e:	64 e0       	ldi	r22, 0x04	; 4
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	0e 94 39 02 	call	0x472	; 0x472 <DIO_ES_tSetPinValue>
 356:	0e 94 18 01 	call	0x230	; 0x230 <LCD_ES_tTrigger_Enable>
 35a:	c3 ff       	sbrs	r28, 3
 35c:	06 c0       	rjmp	.+12     	; 0x36a <Lcd_ES_tsendChar+0x94>
 35e:	41 e0       	ldi	r20, 0x01	; 1
 360:	67 e0       	ldi	r22, 0x07	; 7
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	0e 94 39 02 	call	0x472	; 0x472 <DIO_ES_tSetPinValue>
 368:	05 c0       	rjmp	.+10     	; 0x374 <Lcd_ES_tsendChar+0x9e>
 36a:	40 e0       	ldi	r20, 0x00	; 0
 36c:	67 e0       	ldi	r22, 0x07	; 7
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	0e 94 39 02 	call	0x472	; 0x472 <DIO_ES_tSetPinValue>
 374:	c2 ff       	sbrs	r28, 2
 376:	06 c0       	rjmp	.+12     	; 0x384 <Lcd_ES_tsendChar+0xae>
 378:	41 e0       	ldi	r20, 0x01	; 1
 37a:	66 e0       	ldi	r22, 0x06	; 6
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	0e 94 39 02 	call	0x472	; 0x472 <DIO_ES_tSetPinValue>
 382:	05 c0       	rjmp	.+10     	; 0x38e <Lcd_ES_tsendChar+0xb8>
 384:	40 e0       	ldi	r20, 0x00	; 0
 386:	66 e0       	ldi	r22, 0x06	; 6
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	0e 94 39 02 	call	0x472	; 0x472 <DIO_ES_tSetPinValue>
 38e:	c1 ff       	sbrs	r28, 1
 390:	06 c0       	rjmp	.+12     	; 0x39e <Lcd_ES_tsendChar+0xc8>
 392:	41 e0       	ldi	r20, 0x01	; 1
 394:	65 e0       	ldi	r22, 0x05	; 5
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	0e 94 39 02 	call	0x472	; 0x472 <DIO_ES_tSetPinValue>
 39c:	05 c0       	rjmp	.+10     	; 0x3a8 <Lcd_ES_tsendChar+0xd2>
 39e:	40 e0       	ldi	r20, 0x00	; 0
 3a0:	65 e0       	ldi	r22, 0x05	; 5
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	0e 94 39 02 	call	0x472	; 0x472 <DIO_ES_tSetPinValue>
 3a8:	c0 ff       	sbrs	r28, 0
 3aa:	06 c0       	rjmp	.+12     	; 0x3b8 <Lcd_ES_tsendChar+0xe2>
 3ac:	41 e0       	ldi	r20, 0x01	; 1
 3ae:	64 e0       	ldi	r22, 0x04	; 4
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	0e 94 39 02 	call	0x472	; 0x472 <DIO_ES_tSetPinValue>
 3b6:	05 c0       	rjmp	.+10     	; 0x3c2 <Lcd_ES_tsendChar+0xec>
 3b8:	40 e0       	ldi	r20, 0x00	; 0
 3ba:	64 e0       	ldi	r22, 0x04	; 4
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	0e 94 39 02 	call	0x472	; 0x472 <DIO_ES_tSetPinValue>
 3c2:	0e 94 18 01 	call	0x230	; 0x230 <LCD_ES_tTrigger_Enable>
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	cf 91       	pop	r28
 3ca:	08 95       	ret

000003cc <Lcd_ES_tsendString>:
 3cc:	0f 93       	push	r16
 3ce:	1f 93       	push	r17
 3d0:	cf 93       	push	r28
 3d2:	8c 01       	movw	r16, r24
 3d4:	41 e0       	ldi	r20, 0x01	; 1
 3d6:	61 e0       	ldi	r22, 0x01	; 1
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	0e 94 39 02 	call	0x472	; 0x472 <DIO_ES_tSetPinValue>
 3de:	40 e0       	ldi	r20, 0x00	; 0
 3e0:	60 e0       	ldi	r22, 0x00	; 0
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	0e 94 39 02 	call	0x472	; 0x472 <DIO_ES_tSetPinValue>
 3e8:	c0 e0       	ldi	r28, 0x00	; 0
 3ea:	03 c0       	rjmp	.+6      	; 0x3f2 <Lcd_ES_tsendString+0x26>
 3ec:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Lcd_ES_tsendChar>
 3f0:	cf 5f       	subi	r28, 0xFF	; 255
 3f2:	f8 01       	movw	r30, r16
 3f4:	ec 0f       	add	r30, r28
 3f6:	f1 1d       	adc	r31, r1
 3f8:	80 81       	ld	r24, Z
 3fa:	81 11       	cpse	r24, r1
 3fc:	f7 cf       	rjmp	.-18     	; 0x3ec <Lcd_ES_tsendString+0x20>
 3fe:	cf 91       	pop	r28
 400:	1f 91       	pop	r17
 402:	0f 91       	pop	r16
 404:	08 95       	ret

00000406 <LCD_ES_tGoTo>:
	return ES_OK;
}

/************************************************************************/
ES_t LCD_ES_tGoTo(u8 copy_u8_Line, u8 copy_u8_Col){
	if(0 == copy_u8_Line)
 406:	81 11       	cpse	r24, r1
 408:	08 c0       	rjmp	.+16     	; 0x41a <LCD_ES_tGoTo+0x14>
	{
		if ( copy_u8_Col <=MAX_COL_SIZE)
 40a:	60 31       	cpi	r22, 0x10	; 16
 40c:	80 f4       	brcc	.+32     	; 0x42e <LCD_ES_tGoTo+0x28>
		{
			Lcd_ES_tsendCmd(0x80 + copy_u8_Col);
 40e:	80 e8       	ldi	r24, 0x80	; 128
 410:	86 0f       	add	r24, r22
 412:	0e 94 2e 01 	call	0x25c	; 0x25c <Lcd_ES_tsendCmd>
			Lcd_ES_tsendCmd(0xC0 + copy_u8_Col);
		}
	}else{
		return ES_NOT_OK;
	}
	return ES_OK;
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	08 95       	ret
		if ( copy_u8_Col <=MAX_COL_SIZE)
		{
			Lcd_ES_tsendCmd(0x80 + copy_u8_Col);
		}
	}
	else if (FIRSTROW == copy_u8_Line)
 41a:	81 30       	cpi	r24, 0x01	; 1
 41c:	51 f4       	brne	.+20     	; 0x432 <LCD_ES_tGoTo+0x2c>
	{
		if ( copy_u8_Col <=MAX_COL_SIZE)
 41e:	60 31       	cpi	r22, 0x10	; 16
 420:	50 f4       	brcc	.+20     	; 0x436 <LCD_ES_tGoTo+0x30>
		{
			Lcd_ES_tsendCmd(0xC0 + copy_u8_Col);
 422:	80 ec       	ldi	r24, 0xC0	; 192
 424:	86 0f       	add	r24, r22
 426:	0e 94 2e 01 	call	0x25c	; 0x25c <Lcd_ES_tsendCmd>
		}
	}else{
		return ES_NOT_OK;
	}
	return ES_OK;
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	08 95       	ret
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	08 95       	ret
		if ( copy_u8_Col <=MAX_COL_SIZE)
		{
			Lcd_ES_tsendCmd(0xC0 + copy_u8_Col);
		}
	}else{
		return ES_NOT_OK;
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	08 95       	ret
	}
	return ES_OK;
 436:	80 e0       	ldi	r24, 0x00	; 0
}
 438:	08 95       	ret

0000043a <Lcd_CreateCustomCharacter>:
                                                      
/************************************************************************/


ES_t Lcd_CreateCustomCharacter(u8 *Local_u8_pattern,u8 Local_u8_location)
{
 43a:	0f 93       	push	r16
 43c:	1f 93       	push	r17
 43e:	cf 93       	push	r28
 440:	8c 01       	movw	r16, r24
	// First send the address in CGRAM
	Lcd_ES_tsendCmd(CGRAM_ADD + (Local_u8_location * MAX_LOCATION));
 442:	86 2f       	mov	r24, r22
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	08 96       	adiw	r24, 0x08	; 8
 448:	88 0f       	add	r24, r24
 44a:	88 0f       	add	r24, r24
 44c:	88 0f       	add	r24, r24
 44e:	0e 94 2e 01 	call	0x25c	; 0x25c <Lcd_ES_tsendCmd>
	// Adding 0x40 is the command to set CGRAM address
	// + each character takes 8 bytes
	for(u8 Local_Iterator=LOW;Local_Iterator<MAX_LOCATION;Local_Iterator++){
 452:	c0 e0       	ldi	r28, 0x00	; 0
 454:	07 c0       	rjmp	.+14     	; 0x464 <Lcd_CreateCustomCharacter+0x2a>
		// Passing the bytes on the pattern on LCD
		Lcd_ES_tsendChar(Local_u8_pattern[Local_Iterator]);
 456:	f8 01       	movw	r30, r16
 458:	ec 0f       	add	r30, r28
 45a:	f1 1d       	adc	r31, r1
 45c:	80 81       	ld	r24, Z
 45e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Lcd_ES_tsendChar>
{
	// First send the address in CGRAM
	Lcd_ES_tsendCmd(CGRAM_ADD + (Local_u8_location * MAX_LOCATION));
	// Adding 0x40 is the command to set CGRAM address
	// + each character takes 8 bytes
	for(u8 Local_Iterator=LOW;Local_Iterator<MAX_LOCATION;Local_Iterator++){
 462:	cf 5f       	subi	r28, 0xFF	; 255
 464:	c8 30       	cpi	r28, 0x08	; 8
 466:	b8 f3       	brcs	.-18     	; 0x456 <Lcd_CreateCustomCharacter+0x1c>
		// Passing the bytes on the pattern on LCD
		Lcd_ES_tsendChar(Local_u8_pattern[Local_Iterator]);
	}
	return ES_OK;
}
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	cf 91       	pop	r28
 46c:	1f 91       	pop	r17
 46e:	0f 91       	pop	r16
 470:	08 95       	ret

00000472 <DIO_ES_tSetPinValue>:
		TOG_BIT(PORTD,copy_u8_PinId);
	}else{
		return ES_NOT_OK;
	}
	return ES_OK;
}
 472:	68 30       	cpi	r22, 0x08	; 8
 474:	08 f0       	brcs	.+2      	; 0x478 <DIO_ES_tSetPinValue+0x6>
 476:	7c c0       	rjmp	.+248    	; 0x570 <DIO_ES_tSetPinValue+0xfe>
 478:	81 11       	cpse	r24, r1
 47a:	1d c0       	rjmp	.+58     	; 0x4b6 <DIO_ES_tSetPinValue+0x44>
 47c:	41 30       	cpi	r20, 0x01	; 1
 47e:	61 f4       	brne	.+24     	; 0x498 <DIO_ES_tSetPinValue+0x26>
 480:	2b b3       	in	r18, 0x1b	; 27
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	02 c0       	rjmp	.+4      	; 0x48c <DIO_ES_tSetPinValue+0x1a>
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	6a 95       	dec	r22
 48e:	e2 f7       	brpl	.-8      	; 0x488 <DIO_ES_tSetPinValue+0x16>
 490:	82 2b       	or	r24, r18
 492:	8b bb       	out	0x1b, r24	; 27
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	08 95       	ret
 498:	41 11       	cpse	r20, r1
 49a:	6c c0       	rjmp	.+216    	; 0x574 <DIO_ES_tSetPinValue+0x102>
 49c:	2b b3       	in	r18, 0x1b	; 27
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <DIO_ES_tSetPinValue+0x36>
 4a4:	88 0f       	add	r24, r24
 4a6:	99 1f       	adc	r25, r25
 4a8:	6a 95       	dec	r22
 4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <DIO_ES_tSetPinValue+0x32>
 4ac:	80 95       	com	r24
 4ae:	82 23       	and	r24, r18
 4b0:	8b bb       	out	0x1b, r24	; 27
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	08 95       	ret
 4b6:	81 30       	cpi	r24, 0x01	; 1
 4b8:	e9 f4       	brne	.+58     	; 0x4f4 <DIO_ES_tSetPinValue+0x82>
 4ba:	41 30       	cpi	r20, 0x01	; 1
 4bc:	61 f4       	brne	.+24     	; 0x4d6 <DIO_ES_tSetPinValue+0x64>
 4be:	28 b3       	in	r18, 0x18	; 24
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <DIO_ES_tSetPinValue+0x58>
 4c6:	88 0f       	add	r24, r24
 4c8:	99 1f       	adc	r25, r25
 4ca:	6a 95       	dec	r22
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <DIO_ES_tSetPinValue+0x54>
 4ce:	82 2b       	or	r24, r18
 4d0:	88 bb       	out	0x18, r24	; 24
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	08 95       	ret
 4d6:	41 11       	cpse	r20, r1
 4d8:	4f c0       	rjmp	.+158    	; 0x578 <DIO_ES_tSetPinValue+0x106>
 4da:	28 b3       	in	r18, 0x18	; 24
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <DIO_ES_tSetPinValue+0x74>
 4e2:	88 0f       	add	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	6a 95       	dec	r22
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <DIO_ES_tSetPinValue+0x70>
 4ea:	80 95       	com	r24
 4ec:	82 23       	and	r24, r18
 4ee:	88 bb       	out	0x18, r24	; 24
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	08 95       	ret
 4f4:	82 30       	cpi	r24, 0x02	; 2
 4f6:	e9 f4       	brne	.+58     	; 0x532 <DIO_ES_tSetPinValue+0xc0>
 4f8:	41 30       	cpi	r20, 0x01	; 1
 4fa:	61 f4       	brne	.+24     	; 0x514 <DIO_ES_tSetPinValue+0xa2>
 4fc:	25 b3       	in	r18, 0x15	; 21
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	02 c0       	rjmp	.+4      	; 0x508 <DIO_ES_tSetPinValue+0x96>
 504:	88 0f       	add	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	6a 95       	dec	r22
 50a:	e2 f7       	brpl	.-8      	; 0x504 <DIO_ES_tSetPinValue+0x92>
 50c:	82 2b       	or	r24, r18
 50e:	85 bb       	out	0x15, r24	; 21
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	08 95       	ret
 514:	41 11       	cpse	r20, r1
 516:	32 c0       	rjmp	.+100    	; 0x57c <DIO_ES_tSetPinValue+0x10a>
 518:	25 b3       	in	r18, 0x15	; 21
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	02 c0       	rjmp	.+4      	; 0x524 <DIO_ES_tSetPinValue+0xb2>
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	6a 95       	dec	r22
 526:	e2 f7       	brpl	.-8      	; 0x520 <DIO_ES_tSetPinValue+0xae>
 528:	80 95       	com	r24
 52a:	82 23       	and	r24, r18
 52c:	85 bb       	out	0x15, r24	; 21
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	08 95       	ret
 532:	83 30       	cpi	r24, 0x03	; 3
 534:	29 f5       	brne	.+74     	; 0x580 <DIO_ES_tSetPinValue+0x10e>
 536:	41 30       	cpi	r20, 0x01	; 1
 538:	61 f4       	brne	.+24     	; 0x552 <DIO_ES_tSetPinValue+0xe0>
 53a:	22 b3       	in	r18, 0x12	; 18
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	02 c0       	rjmp	.+4      	; 0x546 <DIO_ES_tSetPinValue+0xd4>
 542:	88 0f       	add	r24, r24
 544:	99 1f       	adc	r25, r25
 546:	6a 95       	dec	r22
 548:	e2 f7       	brpl	.-8      	; 0x542 <DIO_ES_tSetPinValue+0xd0>
 54a:	82 2b       	or	r24, r18
 54c:	82 bb       	out	0x12, r24	; 18
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	08 95       	ret
 552:	41 11       	cpse	r20, r1
 554:	17 c0       	rjmp	.+46     	; 0x584 <DIO_ES_tSetPinValue+0x112>
 556:	22 b3       	in	r18, 0x12	; 18
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	02 c0       	rjmp	.+4      	; 0x562 <DIO_ES_tSetPinValue+0xf0>
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	6a 95       	dec	r22
 564:	e2 f7       	brpl	.-8      	; 0x55e <DIO_ES_tSetPinValue+0xec>
 566:	80 95       	com	r24
 568:	82 23       	and	r24, r18
 56a:	82 bb       	out	0x12, r24	; 18
 56c:	80 e0       	ldi	r24, 0x00	; 0
 56e:	08 95       	ret
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	08 95       	ret
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	08 95       	ret
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	08 95       	ret
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	08 95       	ret
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	08 95       	ret
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	08 95       	ret

00000588 <DIO_ES_tGetPinValue>:
 588:	68 30       	cpi	r22, 0x08	; 8
 58a:	c0 f5       	brcc	.+112    	; 0x5fc <DIO_ES_tGetPinValue+0x74>
 58c:	81 11       	cpse	r24, r1
 58e:	0c c0       	rjmp	.+24     	; 0x5a8 <DIO_ES_tGetPinValue+0x20>
 590:	89 b3       	in	r24, 0x19	; 25
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	02 c0       	rjmp	.+4      	; 0x59a <DIO_ES_tGetPinValue+0x12>
 596:	95 95       	asr	r25
 598:	87 95       	ror	r24
 59a:	6a 95       	dec	r22
 59c:	e2 f7       	brpl	.-8      	; 0x596 <DIO_ES_tGetPinValue+0xe>
 59e:	81 70       	andi	r24, 0x01	; 1
 5a0:	fa 01       	movw	r30, r20
 5a2:	80 83       	st	Z, r24
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	08 95       	ret
 5a8:	81 30       	cpi	r24, 0x01	; 1
 5aa:	61 f4       	brne	.+24     	; 0x5c4 <DIO_ES_tGetPinValue+0x3c>
 5ac:	86 b3       	in	r24, 0x16	; 22
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <DIO_ES_tGetPinValue+0x2e>
 5b2:	95 95       	asr	r25
 5b4:	87 95       	ror	r24
 5b6:	6a 95       	dec	r22
 5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <DIO_ES_tGetPinValue+0x2a>
 5ba:	81 70       	andi	r24, 0x01	; 1
 5bc:	fa 01       	movw	r30, r20
 5be:	80 83       	st	Z, r24
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	08 95       	ret
 5c4:	82 30       	cpi	r24, 0x02	; 2
 5c6:	61 f4       	brne	.+24     	; 0x5e0 <DIO_ES_tGetPinValue+0x58>
 5c8:	83 b3       	in	r24, 0x13	; 19
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <DIO_ES_tGetPinValue+0x4a>
 5ce:	95 95       	asr	r25
 5d0:	87 95       	ror	r24
 5d2:	6a 95       	dec	r22
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <DIO_ES_tGetPinValue+0x46>
 5d6:	81 70       	andi	r24, 0x01	; 1
 5d8:	fa 01       	movw	r30, r20
 5da:	80 83       	st	Z, r24
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	08 95       	ret
 5e0:	83 30       	cpi	r24, 0x03	; 3
 5e2:	71 f4       	brne	.+28     	; 0x600 <DIO_ES_tGetPinValue+0x78>
 5e4:	80 b3       	in	r24, 0x10	; 16
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <DIO_ES_tGetPinValue+0x66>
 5ea:	95 95       	asr	r25
 5ec:	87 95       	ror	r24
 5ee:	6a 95       	dec	r22
 5f0:	e2 f7       	brpl	.-8      	; 0x5ea <DIO_ES_tGetPinValue+0x62>
 5f2:	81 70       	andi	r24, 0x01	; 1
 5f4:	fa 01       	movw	r30, r20
 5f6:	80 83       	st	Z, r24
 5f8:	80 e0       	ldi	r24, 0x00	; 0
 5fa:	08 95       	ret
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	08 95       	ret
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	08 95       	ret

00000604 <DIO_ES_tSetPortValue>:
 604:	81 30       	cpi	r24, 0x01	; 1
 606:	49 f0       	breq	.+18     	; 0x61a <DIO_ES_tSetPortValue+0x16>
 608:	28 f0       	brcs	.+10     	; 0x614 <DIO_ES_tSetPortValue+0x10>
 60a:	82 30       	cpi	r24, 0x02	; 2
 60c:	49 f0       	breq	.+18     	; 0x620 <DIO_ES_tSetPortValue+0x1c>
 60e:	83 30       	cpi	r24, 0x03	; 3
 610:	51 f0       	breq	.+20     	; 0x626 <DIO_ES_tSetPortValue+0x22>
 612:	0c c0       	rjmp	.+24     	; 0x62c <DIO_ES_tSetPortValue+0x28>
 614:	6b bb       	out	0x1b, r22	; 27
 616:	80 e0       	ldi	r24, 0x00	; 0
 618:	08 95       	ret
 61a:	68 bb       	out	0x18, r22	; 24
 61c:	80 e0       	ldi	r24, 0x00	; 0
 61e:	08 95       	ret
 620:	65 bb       	out	0x15, r22	; 21
 622:	80 e0       	ldi	r24, 0x00	; 0
 624:	08 95       	ret
 626:	62 bb       	out	0x12, r22	; 18
 628:	80 e0       	ldi	r24, 0x00	; 0
 62a:	08 95       	ret
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	08 95       	ret

00000630 <DIO_ES_tInit>:


ES_t DIO_ES_tInit(void)
{
	int i = 0;
	for(i=0 ; i<PIN_COUNT ; i++){
 630:	80 e0       	ldi	r24, 0x00	; 0
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	83 c1       	rjmp	.+774    	; 0x93c <__stack+0xdd>
		if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_A){
 636:	fc 01       	movw	r30, r24
 638:	ee 0f       	add	r30, r30
 63a:	ff 1f       	adc	r31, r31
 63c:	ee 0f       	add	r30, r30
 63e:	ff 1f       	adc	r31, r31
 640:	e0 5a       	subi	r30, 0xA0	; 160
 642:	ff 4f       	sbci	r31, 0xFF	; 255
 644:	20 81       	ld	r18, Z
 646:	21 11       	cpse	r18, r1
 648:	5c c0       	rjmp	.+184    	; 0x702 <DIO_ES_tInit+0xd2>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
 64a:	fc 01       	movw	r30, r24
 64c:	ee 0f       	add	r30, r30
 64e:	ff 1f       	adc	r31, r31
 650:	ee 0f       	add	r30, r30
 652:	ff 1f       	adc	r31, r31
 654:	e0 5a       	subi	r30, 0xA0	; 160
 656:	ff 4f       	sbci	r31, 0xFF	; 255
 658:	22 81       	ldd	r18, Z+2	; 0x02
 65a:	21 30       	cpi	r18, 0x01	; 1
 65c:	99 f4       	brne	.+38     	; 0x684 <DIO_ES_tInit+0x54>
				SET_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
 65e:	4a b3       	in	r20, 0x1a	; 26
 660:	fc 01       	movw	r30, r24
 662:	ee 0f       	add	r30, r30
 664:	ff 1f       	adc	r31, r31
 666:	ee 0f       	add	r30, r30
 668:	ff 1f       	adc	r31, r31
 66a:	e0 5a       	subi	r30, 0xA0	; 160
 66c:	ff 4f       	sbci	r31, 0xFF	; 255
 66e:	21 e0       	ldi	r18, 0x01	; 1
 670:	30 e0       	ldi	r19, 0x00	; 0
 672:	01 80       	ldd	r0, Z+1	; 0x01
 674:	02 c0       	rjmp	.+4      	; 0x67a <DIO_ES_tInit+0x4a>
 676:	22 0f       	add	r18, r18
 678:	33 1f       	adc	r19, r19
 67a:	0a 94       	dec	r0
 67c:	e2 f7       	brpl	.-8      	; 0x676 <DIO_ES_tInit+0x46>
 67e:	24 2b       	or	r18, r20
 680:	2a bb       	out	0x1a, r18	; 26
 682:	5b c1       	rjmp	.+694    	; 0x93a <__stack+0xdb>
			}else{
				CLR_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
 684:	4a b3       	in	r20, 0x1a	; 26
 686:	fc 01       	movw	r30, r24
 688:	ee 0f       	add	r30, r30
 68a:	ff 1f       	adc	r31, r31
 68c:	ee 0f       	add	r30, r30
 68e:	ff 1f       	adc	r31, r31
 690:	e0 5a       	subi	r30, 0xA0	; 160
 692:	ff 4f       	sbci	r31, 0xFF	; 255
 694:	21 e0       	ldi	r18, 0x01	; 1
 696:	30 e0       	ldi	r19, 0x00	; 0
 698:	01 80       	ldd	r0, Z+1	; 0x01
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <DIO_ES_tInit+0x70>
 69c:	22 0f       	add	r18, r18
 69e:	33 1f       	adc	r19, r19
 6a0:	0a 94       	dec	r0
 6a2:	e2 f7       	brpl	.-8      	; 0x69c <DIO_ES_tInit+0x6c>
 6a4:	20 95       	com	r18
 6a6:	24 23       	and	r18, r20
 6a8:	2a bb       	out	0x1a, r18	; 26
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
 6aa:	23 81       	ldd	r18, Z+3	; 0x03
 6ac:	21 30       	cpi	r18, 0x01	; 1
 6ae:	99 f4       	brne	.+38     	; 0x6d6 <DIO_ES_tInit+0xa6>
					SET_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
 6b0:	4b b3       	in	r20, 0x1b	; 27
 6b2:	fc 01       	movw	r30, r24
 6b4:	ee 0f       	add	r30, r30
 6b6:	ff 1f       	adc	r31, r31
 6b8:	ee 0f       	add	r30, r30
 6ba:	ff 1f       	adc	r31, r31
 6bc:	e0 5a       	subi	r30, 0xA0	; 160
 6be:	ff 4f       	sbci	r31, 0xFF	; 255
 6c0:	21 e0       	ldi	r18, 0x01	; 1
 6c2:	30 e0       	ldi	r19, 0x00	; 0
 6c4:	01 80       	ldd	r0, Z+1	; 0x01
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <DIO_ES_tInit+0x9c>
 6c8:	22 0f       	add	r18, r18
 6ca:	33 1f       	adc	r19, r19
 6cc:	0a 94       	dec	r0
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <DIO_ES_tInit+0x98>
 6d0:	24 2b       	or	r18, r20
 6d2:	2b bb       	out	0x1b, r18	; 27
 6d4:	32 c1       	rjmp	.+612    	; 0x93a <__stack+0xdb>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
 6d6:	21 11       	cpse	r18, r1
 6d8:	30 c1       	rjmp	.+608    	; 0x93a <__stack+0xdb>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
 6da:	4b b3       	in	r20, 0x1b	; 27
 6dc:	fc 01       	movw	r30, r24
 6de:	ee 0f       	add	r30, r30
 6e0:	ff 1f       	adc	r31, r31
 6e2:	ee 0f       	add	r30, r30
 6e4:	ff 1f       	adc	r31, r31
 6e6:	e0 5a       	subi	r30, 0xA0	; 160
 6e8:	ff 4f       	sbci	r31, 0xFF	; 255
 6ea:	21 e0       	ldi	r18, 0x01	; 1
 6ec:	30 e0       	ldi	r19, 0x00	; 0
 6ee:	01 80       	ldd	r0, Z+1	; 0x01
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <DIO_ES_tInit+0xc6>
 6f2:	22 0f       	add	r18, r18
 6f4:	33 1f       	adc	r19, r19
 6f6:	0a 94       	dec	r0
 6f8:	e2 f7       	brpl	.-8      	; 0x6f2 <DIO_ES_tInit+0xc2>
 6fa:	20 95       	com	r18
 6fc:	24 23       	and	r18, r20
 6fe:	2b bb       	out	0x1b, r18	; 27
 700:	1c c1       	rjmp	.+568    	; 0x93a <__stack+0xdb>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_B){
 702:	21 30       	cpi	r18, 0x01	; 1
 704:	09 f0       	breq	.+2      	; 0x708 <DIO_ES_tInit+0xd8>
 706:	5c c0       	rjmp	.+184    	; 0x7c0 <DIO_ES_tInit+0x190>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
 708:	fc 01       	movw	r30, r24
 70a:	ee 0f       	add	r30, r30
 70c:	ff 1f       	adc	r31, r31
 70e:	ee 0f       	add	r30, r30
 710:	ff 1f       	adc	r31, r31
 712:	e0 5a       	subi	r30, 0xA0	; 160
 714:	ff 4f       	sbci	r31, 0xFF	; 255
 716:	22 81       	ldd	r18, Z+2	; 0x02
 718:	21 30       	cpi	r18, 0x01	; 1
 71a:	99 f4       	brne	.+38     	; 0x742 <DIO_ES_tInit+0x112>
				SET_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
 71c:	47 b3       	in	r20, 0x17	; 23
 71e:	fc 01       	movw	r30, r24
 720:	ee 0f       	add	r30, r30
 722:	ff 1f       	adc	r31, r31
 724:	ee 0f       	add	r30, r30
 726:	ff 1f       	adc	r31, r31
 728:	e0 5a       	subi	r30, 0xA0	; 160
 72a:	ff 4f       	sbci	r31, 0xFF	; 255
 72c:	21 e0       	ldi	r18, 0x01	; 1
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	01 80       	ldd	r0, Z+1	; 0x01
 732:	02 c0       	rjmp	.+4      	; 0x738 <DIO_ES_tInit+0x108>
 734:	22 0f       	add	r18, r18
 736:	33 1f       	adc	r19, r19
 738:	0a 94       	dec	r0
 73a:	e2 f7       	brpl	.-8      	; 0x734 <DIO_ES_tInit+0x104>
 73c:	24 2b       	or	r18, r20
 73e:	27 bb       	out	0x17, r18	; 23
 740:	fc c0       	rjmp	.+504    	; 0x93a <__stack+0xdb>
			}else{
				CLR_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
 742:	47 b3       	in	r20, 0x17	; 23
 744:	fc 01       	movw	r30, r24
 746:	ee 0f       	add	r30, r30
 748:	ff 1f       	adc	r31, r31
 74a:	ee 0f       	add	r30, r30
 74c:	ff 1f       	adc	r31, r31
 74e:	e0 5a       	subi	r30, 0xA0	; 160
 750:	ff 4f       	sbci	r31, 0xFF	; 255
 752:	21 e0       	ldi	r18, 0x01	; 1
 754:	30 e0       	ldi	r19, 0x00	; 0
 756:	01 80       	ldd	r0, Z+1	; 0x01
 758:	02 c0       	rjmp	.+4      	; 0x75e <DIO_ES_tInit+0x12e>
 75a:	22 0f       	add	r18, r18
 75c:	33 1f       	adc	r19, r19
 75e:	0a 94       	dec	r0
 760:	e2 f7       	brpl	.-8      	; 0x75a <DIO_ES_tInit+0x12a>
 762:	20 95       	com	r18
 764:	24 23       	and	r18, r20
 766:	27 bb       	out	0x17, r18	; 23
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
 768:	23 81       	ldd	r18, Z+3	; 0x03
 76a:	21 30       	cpi	r18, 0x01	; 1
 76c:	99 f4       	brne	.+38     	; 0x794 <DIO_ES_tInit+0x164>
					SET_BIT(PORTB,Dio_CfgPinsArray[i].Pin);
 76e:	48 b3       	in	r20, 0x18	; 24
 770:	fc 01       	movw	r30, r24
 772:	ee 0f       	add	r30, r30
 774:	ff 1f       	adc	r31, r31
 776:	ee 0f       	add	r30, r30
 778:	ff 1f       	adc	r31, r31
 77a:	e0 5a       	subi	r30, 0xA0	; 160
 77c:	ff 4f       	sbci	r31, 0xFF	; 255
 77e:	21 e0       	ldi	r18, 0x01	; 1
 780:	30 e0       	ldi	r19, 0x00	; 0
 782:	01 80       	ldd	r0, Z+1	; 0x01
 784:	02 c0       	rjmp	.+4      	; 0x78a <DIO_ES_tInit+0x15a>
 786:	22 0f       	add	r18, r18
 788:	33 1f       	adc	r19, r19
 78a:	0a 94       	dec	r0
 78c:	e2 f7       	brpl	.-8      	; 0x786 <DIO_ES_tInit+0x156>
 78e:	24 2b       	or	r18, r20
 790:	28 bb       	out	0x18, r18	; 24
 792:	d3 c0       	rjmp	.+422    	; 0x93a <__stack+0xdb>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
 794:	21 11       	cpse	r18, r1
 796:	d1 c0       	rjmp	.+418    	; 0x93a <__stack+0xdb>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
 798:	4b b3       	in	r20, 0x1b	; 27
 79a:	fc 01       	movw	r30, r24
 79c:	ee 0f       	add	r30, r30
 79e:	ff 1f       	adc	r31, r31
 7a0:	ee 0f       	add	r30, r30
 7a2:	ff 1f       	adc	r31, r31
 7a4:	e0 5a       	subi	r30, 0xA0	; 160
 7a6:	ff 4f       	sbci	r31, 0xFF	; 255
 7a8:	21 e0       	ldi	r18, 0x01	; 1
 7aa:	30 e0       	ldi	r19, 0x00	; 0
 7ac:	01 80       	ldd	r0, Z+1	; 0x01
 7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <DIO_ES_tInit+0x184>
 7b0:	22 0f       	add	r18, r18
 7b2:	33 1f       	adc	r19, r19
 7b4:	0a 94       	dec	r0
 7b6:	e2 f7       	brpl	.-8      	; 0x7b0 <DIO_ES_tInit+0x180>
 7b8:	20 95       	com	r18
 7ba:	24 23       	and	r18, r20
 7bc:	2b bb       	out	0x1b, r18	; 27
 7be:	bd c0       	rjmp	.+378    	; 0x93a <__stack+0xdb>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_C){
 7c0:	22 30       	cpi	r18, 0x02	; 2
 7c2:	09 f0       	breq	.+2      	; 0x7c6 <DIO_ES_tInit+0x196>
 7c4:	5c c0       	rjmp	.+184    	; 0x87e <__stack+0x1f>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
 7c6:	fc 01       	movw	r30, r24
 7c8:	ee 0f       	add	r30, r30
 7ca:	ff 1f       	adc	r31, r31
 7cc:	ee 0f       	add	r30, r30
 7ce:	ff 1f       	adc	r31, r31
 7d0:	e0 5a       	subi	r30, 0xA0	; 160
 7d2:	ff 4f       	sbci	r31, 0xFF	; 255
 7d4:	22 81       	ldd	r18, Z+2	; 0x02
 7d6:	21 30       	cpi	r18, 0x01	; 1
 7d8:	99 f4       	brne	.+38     	; 0x800 <__DATA_REGION_LENGTH__>
				SET_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
 7da:	44 b3       	in	r20, 0x14	; 20
 7dc:	fc 01       	movw	r30, r24
 7de:	ee 0f       	add	r30, r30
 7e0:	ff 1f       	adc	r31, r31
 7e2:	ee 0f       	add	r30, r30
 7e4:	ff 1f       	adc	r31, r31
 7e6:	e0 5a       	subi	r30, 0xA0	; 160
 7e8:	ff 4f       	sbci	r31, 0xFF	; 255
 7ea:	21 e0       	ldi	r18, 0x01	; 1
 7ec:	30 e0       	ldi	r19, 0x00	; 0
 7ee:	01 80       	ldd	r0, Z+1	; 0x01
 7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <DIO_ES_tInit+0x1c6>
 7f2:	22 0f       	add	r18, r18
 7f4:	33 1f       	adc	r19, r19
 7f6:	0a 94       	dec	r0
 7f8:	e2 f7       	brpl	.-8      	; 0x7f2 <DIO_ES_tInit+0x1c2>
 7fa:	24 2b       	or	r18, r20
 7fc:	24 bb       	out	0x14, r18	; 20
 7fe:	9d c0       	rjmp	.+314    	; 0x93a <__stack+0xdb>
			}else{
				CLR_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
 800:	44 b3       	in	r20, 0x14	; 20
 802:	fc 01       	movw	r30, r24
 804:	ee 0f       	add	r30, r30
 806:	ff 1f       	adc	r31, r31
 808:	ee 0f       	add	r30, r30
 80a:	ff 1f       	adc	r31, r31
 80c:	e0 5a       	subi	r30, 0xA0	; 160
 80e:	ff 4f       	sbci	r31, 0xFF	; 255
 810:	21 e0       	ldi	r18, 0x01	; 1
 812:	30 e0       	ldi	r19, 0x00	; 0
 814:	01 80       	ldd	r0, Z+1	; 0x01
 816:	02 c0       	rjmp	.+4      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 818:	22 0f       	add	r18, r18
 81a:	33 1f       	adc	r19, r19
 81c:	0a 94       	dec	r0
 81e:	e2 f7       	brpl	.-8      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 820:	20 95       	com	r18
 822:	24 23       	and	r18, r20
 824:	24 bb       	out	0x14, r18	; 20
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
 826:	23 81       	ldd	r18, Z+3	; 0x03
 828:	21 30       	cpi	r18, 0x01	; 1
 82a:	99 f4       	brne	.+38     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
					SET_BIT(PORTC,Dio_CfgPinsArray[i].Pin);
 82c:	45 b3       	in	r20, 0x15	; 21
 82e:	fc 01       	movw	r30, r24
 830:	ee 0f       	add	r30, r30
 832:	ff 1f       	adc	r31, r31
 834:	ee 0f       	add	r30, r30
 836:	ff 1f       	adc	r31, r31
 838:	e0 5a       	subi	r30, 0xA0	; 160
 83a:	ff 4f       	sbci	r31, 0xFF	; 255
 83c:	21 e0       	ldi	r18, 0x01	; 1
 83e:	30 e0       	ldi	r19, 0x00	; 0
 840:	01 80       	ldd	r0, Z+1	; 0x01
 842:	02 c0       	rjmp	.+4      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 844:	22 0f       	add	r18, r18
 846:	33 1f       	adc	r19, r19
 848:	0a 94       	dec	r0
 84a:	e2 f7       	brpl	.-8      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 84c:	24 2b       	or	r18, r20
 84e:	25 bb       	out	0x15, r18	; 21
 850:	74 c0       	rjmp	.+232    	; 0x93a <__stack+0xdb>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
 852:	21 11       	cpse	r18, r1
 854:	72 c0       	rjmp	.+228    	; 0x93a <__stack+0xdb>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
 856:	4b b3       	in	r20, 0x1b	; 27
 858:	fc 01       	movw	r30, r24
 85a:	ee 0f       	add	r30, r30
 85c:	ff 1f       	adc	r31, r31
 85e:	ee 0f       	add	r30, r30
 860:	ff 1f       	adc	r31, r31
 862:	e0 5a       	subi	r30, 0xA0	; 160
 864:	ff 4f       	sbci	r31, 0xFF	; 255
 866:	21 e0       	ldi	r18, 0x01	; 1
 868:	30 e0       	ldi	r19, 0x00	; 0
 86a:	01 80       	ldd	r0, Z+1	; 0x01
 86c:	02 c0       	rjmp	.+4      	; 0x872 <__stack+0x13>
 86e:	22 0f       	add	r18, r18
 870:	33 1f       	adc	r19, r19
 872:	0a 94       	dec	r0
 874:	e2 f7       	brpl	.-8      	; 0x86e <__stack+0xf>
 876:	20 95       	com	r18
 878:	24 23       	and	r18, r20
 87a:	2b bb       	out	0x1b, r18	; 27
 87c:	5e c0       	rjmp	.+188    	; 0x93a <__stack+0xdb>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_D){
 87e:	23 30       	cpi	r18, 0x03	; 3
 880:	09 f0       	breq	.+2      	; 0x884 <__stack+0x25>
 882:	5b c0       	rjmp	.+182    	; 0x93a <__stack+0xdb>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
 884:	fc 01       	movw	r30, r24
 886:	ee 0f       	add	r30, r30
 888:	ff 1f       	adc	r31, r31
 88a:	ee 0f       	add	r30, r30
 88c:	ff 1f       	adc	r31, r31
 88e:	e0 5a       	subi	r30, 0xA0	; 160
 890:	ff 4f       	sbci	r31, 0xFF	; 255
 892:	22 81       	ldd	r18, Z+2	; 0x02
 894:	21 30       	cpi	r18, 0x01	; 1
 896:	99 f4       	brne	.+38     	; 0x8be <__stack+0x5f>
				SET_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
 898:	41 b3       	in	r20, 0x11	; 17
 89a:	fc 01       	movw	r30, r24
 89c:	ee 0f       	add	r30, r30
 89e:	ff 1f       	adc	r31, r31
 8a0:	ee 0f       	add	r30, r30
 8a2:	ff 1f       	adc	r31, r31
 8a4:	e0 5a       	subi	r30, 0xA0	; 160
 8a6:	ff 4f       	sbci	r31, 0xFF	; 255
 8a8:	21 e0       	ldi	r18, 0x01	; 1
 8aa:	30 e0       	ldi	r19, 0x00	; 0
 8ac:	01 80       	ldd	r0, Z+1	; 0x01
 8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <__stack+0x55>
 8b0:	22 0f       	add	r18, r18
 8b2:	33 1f       	adc	r19, r19
 8b4:	0a 94       	dec	r0
 8b6:	e2 f7       	brpl	.-8      	; 0x8b0 <__stack+0x51>
 8b8:	24 2b       	or	r18, r20
 8ba:	21 bb       	out	0x11, r18	; 17
 8bc:	3e c0       	rjmp	.+124    	; 0x93a <__stack+0xdb>
			}else{
				CLR_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
 8be:	41 b3       	in	r20, 0x11	; 17
 8c0:	fc 01       	movw	r30, r24
 8c2:	ee 0f       	add	r30, r30
 8c4:	ff 1f       	adc	r31, r31
 8c6:	ee 0f       	add	r30, r30
 8c8:	ff 1f       	adc	r31, r31
 8ca:	e0 5a       	subi	r30, 0xA0	; 160
 8cc:	ff 4f       	sbci	r31, 0xFF	; 255
 8ce:	21 e0       	ldi	r18, 0x01	; 1
 8d0:	30 e0       	ldi	r19, 0x00	; 0
 8d2:	01 80       	ldd	r0, Z+1	; 0x01
 8d4:	02 c0       	rjmp	.+4      	; 0x8da <__stack+0x7b>
 8d6:	22 0f       	add	r18, r18
 8d8:	33 1f       	adc	r19, r19
 8da:	0a 94       	dec	r0
 8dc:	e2 f7       	brpl	.-8      	; 0x8d6 <__stack+0x77>
 8de:	20 95       	com	r18
 8e0:	24 23       	and	r18, r20
 8e2:	21 bb       	out	0x11, r18	; 17
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
 8e4:	23 81       	ldd	r18, Z+3	; 0x03
 8e6:	21 30       	cpi	r18, 0x01	; 1
 8e8:	99 f4       	brne	.+38     	; 0x910 <__stack+0xb1>
					SET_BIT(PORTD,Dio_CfgPinsArray[i].Pin);
 8ea:	42 b3       	in	r20, 0x12	; 18
 8ec:	fc 01       	movw	r30, r24
 8ee:	ee 0f       	add	r30, r30
 8f0:	ff 1f       	adc	r31, r31
 8f2:	ee 0f       	add	r30, r30
 8f4:	ff 1f       	adc	r31, r31
 8f6:	e0 5a       	subi	r30, 0xA0	; 160
 8f8:	ff 4f       	sbci	r31, 0xFF	; 255
 8fa:	21 e0       	ldi	r18, 0x01	; 1
 8fc:	30 e0       	ldi	r19, 0x00	; 0
 8fe:	01 80       	ldd	r0, Z+1	; 0x01
 900:	02 c0       	rjmp	.+4      	; 0x906 <__stack+0xa7>
 902:	22 0f       	add	r18, r18
 904:	33 1f       	adc	r19, r19
 906:	0a 94       	dec	r0
 908:	e2 f7       	brpl	.-8      	; 0x902 <__stack+0xa3>
 90a:	24 2b       	or	r18, r20
 90c:	22 bb       	out	0x12, r18	; 18
 90e:	15 c0       	rjmp	.+42     	; 0x93a <__stack+0xdb>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
 910:	21 11       	cpse	r18, r1
 912:	13 c0       	rjmp	.+38     	; 0x93a <__stack+0xdb>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
 914:	4b b3       	in	r20, 0x1b	; 27
 916:	fc 01       	movw	r30, r24
 918:	ee 0f       	add	r30, r30
 91a:	ff 1f       	adc	r31, r31
 91c:	ee 0f       	add	r30, r30
 91e:	ff 1f       	adc	r31, r31
 920:	e0 5a       	subi	r30, 0xA0	; 160
 922:	ff 4f       	sbci	r31, 0xFF	; 255
 924:	21 e0       	ldi	r18, 0x01	; 1
 926:	30 e0       	ldi	r19, 0x00	; 0
 928:	01 80       	ldd	r0, Z+1	; 0x01
 92a:	02 c0       	rjmp	.+4      	; 0x930 <__stack+0xd1>
 92c:	22 0f       	add	r18, r18
 92e:	33 1f       	adc	r19, r19
 930:	0a 94       	dec	r0
 932:	e2 f7       	brpl	.-8      	; 0x92c <__stack+0xcd>
 934:	20 95       	com	r18
 936:	24 23       	and	r18, r20
 938:	2b bb       	out	0x1b, r18	; 27


ES_t DIO_ES_tInit(void)
{
	int i = 0;
	for(i=0 ; i<PIN_COUNT ; i++){
 93a:	01 96       	adiw	r24, 0x01	; 1
 93c:	81 31       	cpi	r24, 0x11	; 17
 93e:	91 05       	cpc	r25, r1
 940:	0c f4       	brge	.+2      	; 0x944 <__stack+0xe5>
 942:	79 ce       	rjmp	.-782    	; 0x636 <DIO_ES_tInit+0x6>
				}
			}
		}
	}
	return ES_OK;
}
 944:	80 e0       	ldi	r24, 0x00	; 0
 946:	08 95       	ret

00000948 <_exit>:
 948:	f8 94       	cli

0000094a <__stop_program>:
 94a:	ff cf       	rjmp	.-2      	; 0x94a <__stop_program>
