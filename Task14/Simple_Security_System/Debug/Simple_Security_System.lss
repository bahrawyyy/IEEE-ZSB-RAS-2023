
Simple_Security_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003cca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000136  00800060  00003cca  00003d5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800196  00800196  00003e94  2**0
                  ALLOC
  3 .debug_aranges 000002c0  00000000  00000000  00003e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000004fa  00000000  00000000  00004154  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000366a  00000000  00000000  0000464e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000017cd  00000000  00000000  00007cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002eb5  00000000  00000000  00009485  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000380  00000000  00000000  0000c33c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009b9  00000000  00000000  0000c6bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000088e  00000000  00000000  0000d075  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  0000d903  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3a       	cpi	r26, 0xAA	; 170
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 21 18 	call	0x3042	; 0x3042 <main>
      8a:	0c 94 63 1e 	jmp	0x3cc6	; 0x3cc6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1c 1e 	jmp	0x3c38	; 0x3c38 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e1       	ldi	r26, 0x10	; 16
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 38 1e 	jmp	0x3c70	; 0x3c70 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 28 1e 	jmp	0x3c50	; 0x3c50 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 28 1e 	jmp	0x3c50	; 0x3c50 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1c 1e 	jmp	0x3c38	; 0x3c38 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e1       	ldi	r24, 0x10	; 16
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 38 1e 	jmp	0x3c70	; 0x3c70 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 24 1e 	jmp	0x3c48	; 0x3c48 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e1       	ldi	r22, 0x10	; 16
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 40 1e 	jmp	0x3c80	; 0x3c80 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 28 1e 	jmp	0x3c50	; 0x3c50 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 28 1e 	jmp	0x3c50	; 0x3c50 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 28 1e 	jmp	0x3c50	; 0x3c50 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 2c 1e 	jmp	0x3c58	; 0x3c58 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_ES_tSetPinDirection>:
 * DIO_ES_tSetPinDirection is used to set pin direction
 * ( INPUT or OUTPUT )
 */

ES_t DIO_ES_tSetPinDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Dir_Type copy_u8_PinDirection)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <DIO_ES_tSetPinDirection+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <DIO_ES_tSetPinDirection+0x8>
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	89 83       	std	Y+1, r24	; 0x01
     cac:	6a 83       	std	Y+2, r22	; 0x02
     cae:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	88 30       	cpi	r24, 0x08	; 8
     cb4:	18 f0       	brcs	.+6      	; 0xcbc <DIO_ES_tSetPinDirection+0x1e>
		return ES_NOT_OK;
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	8c 83       	std	Y+4, r24	; 0x04
     cba:	d8 c0       	rjmp	.+432    	; 0xe6c <DIO_ES_tSetPinDirection+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
     cbc:	89 81       	ldd	r24, Y+1	; 0x01
     cbe:	88 23       	and	r24, r24
     cc0:	91 f5       	brne	.+100    	; 0xd26 <DIO_ES_tSetPinDirection+0x88>
		if(copy_u8_PinDirection == OUTPUT){
     cc2:	8b 81       	ldd	r24, Y+3	; 0x03
     cc4:	81 30       	cpi	r24, 0x01	; 1
     cc6:	a1 f4       	brne	.+40     	; 0xcf0 <DIO_ES_tSetPinDirection+0x52>
			SET_BIT(DDRA,copy_u8_PinId);
     cc8:	aa e3       	ldi	r26, 0x3A	; 58
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	ea e3       	ldi	r30, 0x3A	; 58
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	48 2f       	mov	r20, r24
     cd4:	8a 81       	ldd	r24, Y+2	; 0x02
     cd6:	28 2f       	mov	r18, r24
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	02 2e       	mov	r0, r18
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <DIO_ES_tSetPinDirection+0x48>
     ce2:	88 0f       	add	r24, r24
     ce4:	99 1f       	adc	r25, r25
     ce6:	0a 94       	dec	r0
     ce8:	e2 f7       	brpl	.-8      	; 0xce2 <DIO_ES_tSetPinDirection+0x44>
     cea:	84 2b       	or	r24, r20
     cec:	8c 93       	st	X, r24
     cee:	bd c0       	rjmp	.+378    	; 0xe6a <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
     cf0:	8b 81       	ldd	r24, Y+3	; 0x03
     cf2:	88 23       	and	r24, r24
     cf4:	a9 f4       	brne	.+42     	; 0xd20 <DIO_ES_tSetPinDirection+0x82>
			CLR_BIT(DDRA,copy_u8_PinId);
     cf6:	aa e3       	ldi	r26, 0x3A	; 58
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	ea e3       	ldi	r30, 0x3A	; 58
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	48 2f       	mov	r20, r24
     d02:	8a 81       	ldd	r24, Y+2	; 0x02
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	02 2e       	mov	r0, r18
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <DIO_ES_tSetPinDirection+0x76>
     d10:	88 0f       	add	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	0a 94       	dec	r0
     d16:	e2 f7       	brpl	.-8      	; 0xd10 <DIO_ES_tSetPinDirection+0x72>
     d18:	80 95       	com	r24
     d1a:	84 23       	and	r24, r20
     d1c:	8c 93       	st	X, r24
     d1e:	a5 c0       	rjmp	.+330    	; 0xe6a <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	8c 83       	std	Y+4, r24	; 0x04
     d24:	a3 c0       	rjmp	.+326    	; 0xe6c <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
     d26:	89 81       	ldd	r24, Y+1	; 0x01
     d28:	81 30       	cpi	r24, 0x01	; 1
     d2a:	91 f5       	brne	.+100    	; 0xd90 <DIO_ES_tSetPinDirection+0xf2>
		if(copy_u8_PinDirection == OUTPUT){
     d2c:	8b 81       	ldd	r24, Y+3	; 0x03
     d2e:	81 30       	cpi	r24, 0x01	; 1
     d30:	a1 f4       	brne	.+40     	; 0xd5a <DIO_ES_tSetPinDirection+0xbc>
			SET_BIT(DDRB,copy_u8_PinId);
     d32:	a7 e3       	ldi	r26, 0x37	; 55
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e7 e3       	ldi	r30, 0x37	; 55
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	48 2f       	mov	r20, r24
     d3e:	8a 81       	ldd	r24, Y+2	; 0x02
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	02 2e       	mov	r0, r18
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <DIO_ES_tSetPinDirection+0xb2>
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	0a 94       	dec	r0
     d52:	e2 f7       	brpl	.-8      	; 0xd4c <DIO_ES_tSetPinDirection+0xae>
     d54:	84 2b       	or	r24, r20
     d56:	8c 93       	st	X, r24
     d58:	88 c0       	rjmp	.+272    	; 0xe6a <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	88 23       	and	r24, r24
     d5e:	a9 f4       	brne	.+42     	; 0xd8a <DIO_ES_tSetPinDirection+0xec>
			CLR_BIT(DDRB,copy_u8_PinId);
     d60:	a7 e3       	ldi	r26, 0x37	; 55
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	e7 e3       	ldi	r30, 0x37	; 55
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	48 2f       	mov	r20, r24
     d6c:	8a 81       	ldd	r24, Y+2	; 0x02
     d6e:	28 2f       	mov	r18, r24
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	02 2e       	mov	r0, r18
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <DIO_ES_tSetPinDirection+0xe0>
     d7a:	88 0f       	add	r24, r24
     d7c:	99 1f       	adc	r25, r25
     d7e:	0a 94       	dec	r0
     d80:	e2 f7       	brpl	.-8      	; 0xd7a <DIO_ES_tSetPinDirection+0xdc>
     d82:	80 95       	com	r24
     d84:	84 23       	and	r24, r20
     d86:	8c 93       	st	X, r24
     d88:	70 c0       	rjmp	.+224    	; 0xe6a <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	8c 83       	std	Y+4, r24	; 0x04
     d8e:	6e c0       	rjmp	.+220    	; 0xe6c <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	82 30       	cpi	r24, 0x02	; 2
     d94:	91 f5       	brne	.+100    	; 0xdfa <DIO_ES_tSetPinDirection+0x15c>
		if(copy_u8_PinDirection == OUTPUT){
     d96:	8b 81       	ldd	r24, Y+3	; 0x03
     d98:	81 30       	cpi	r24, 0x01	; 1
     d9a:	a1 f4       	brne	.+40     	; 0xdc4 <DIO_ES_tSetPinDirection+0x126>
			SET_BIT(DDRC,copy_u8_PinId);
     d9c:	a4 e3       	ldi	r26, 0x34	; 52
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e4 e3       	ldi	r30, 0x34	; 52
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	48 2f       	mov	r20, r24
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	02 2e       	mov	r0, r18
     db4:	02 c0       	rjmp	.+4      	; 0xdba <DIO_ES_tSetPinDirection+0x11c>
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	0a 94       	dec	r0
     dbc:	e2 f7       	brpl	.-8      	; 0xdb6 <DIO_ES_tSetPinDirection+0x118>
     dbe:	84 2b       	or	r24, r20
     dc0:	8c 93       	st	X, r24
     dc2:	53 c0       	rjmp	.+166    	; 0xe6a <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	88 23       	and	r24, r24
     dc8:	a9 f4       	brne	.+42     	; 0xdf4 <DIO_ES_tSetPinDirection+0x156>
			CLR_BIT(DDRC,copy_u8_PinId);
     dca:	a4 e3       	ldi	r26, 0x34	; 52
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	e4 e3       	ldi	r30, 0x34	; 52
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	48 2f       	mov	r20, r24
     dd6:	8a 81       	ldd	r24, Y+2	; 0x02
     dd8:	28 2f       	mov	r18, r24
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	02 2e       	mov	r0, r18
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <DIO_ES_tSetPinDirection+0x14a>
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	0a 94       	dec	r0
     dea:	e2 f7       	brpl	.-8      	; 0xde4 <DIO_ES_tSetPinDirection+0x146>
     dec:	80 95       	com	r24
     dee:	84 23       	and	r24, r20
     df0:	8c 93       	st	X, r24
     df2:	3b c0       	rjmp	.+118    	; 0xe6a <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	8c 83       	std	Y+4, r24	; 0x04
     df8:	39 c0       	rjmp	.+114    	; 0xe6c <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	83 30       	cpi	r24, 0x03	; 3
     dfe:	91 f5       	brne	.+100    	; 0xe64 <DIO_ES_tSetPinDirection+0x1c6>
		if(copy_u8_PinDirection == OUTPUT){
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	81 30       	cpi	r24, 0x01	; 1
     e04:	a1 f4       	brne	.+40     	; 0xe2e <DIO_ES_tSetPinDirection+0x190>
			SET_BIT(DDRD,copy_u8_PinId);
     e06:	a1 e3       	ldi	r26, 0x31	; 49
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e1 e3       	ldi	r30, 0x31	; 49
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 2e       	mov	r0, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <DIO_ES_tSetPinDirection+0x186>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <DIO_ES_tSetPinDirection+0x182>
     e28:	84 2b       	or	r24, r20
     e2a:	8c 93       	st	X, r24
     e2c:	1e c0       	rjmp	.+60     	; 0xe6a <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	88 23       	and	r24, r24
     e32:	a9 f4       	brne	.+42     	; 0xe5e <DIO_ES_tSetPinDirection+0x1c0>
			CLR_BIT(DDRD,copy_u8_PinId);
     e34:	a1 e3       	ldi	r26, 0x31	; 49
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e1 e3       	ldi	r30, 0x31	; 49
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	48 2f       	mov	r20, r24
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	28 2f       	mov	r18, r24
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	02 2e       	mov	r0, r18
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <DIO_ES_tSetPinDirection+0x1b4>
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	0a 94       	dec	r0
     e54:	e2 f7       	brpl	.-8      	; 0xe4e <DIO_ES_tSetPinDirection+0x1b0>
     e56:	80 95       	com	r24
     e58:	84 23       	and	r24, r20
     e5a:	8c 93       	st	X, r24
     e5c:	06 c0       	rjmp	.+12     	; 0xe6a <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	8c 83       	std	Y+4, r24	; 0x04
     e62:	04 c0       	rjmp	.+8      	; 0xe6c <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else{
		return ES_NOT_OK;
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	8c 83       	std	Y+4, r24	; 0x04
     e68:	01 c0       	rjmp	.+2      	; 0xe6c <DIO_ES_tSetPinDirection+0x1ce>
	}
	return ES_OK;
     e6a:	1c 82       	std	Y+4, r1	; 0x04
     e6c:	8c 81       	ldd	r24, Y+4	; 0x04
}
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <DIO_ES_tSetPinValue>:
 * DIO_ES_tSetPinValue is used to set pin value
 * ( LOW or HIGH )
 */

ES_t DIO_ES_tSetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type copy_u8_PinValue)
{
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	00 d0       	rcall	.+0      	; 0xe82 <DIO_ES_tSetPinValue+0x6>
     e82:	00 d0       	rcall	.+0      	; 0xe84 <DIO_ES_tSetPinValue+0x8>
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
     e88:	89 83       	std	Y+1, r24	; 0x01
     e8a:	6a 83       	std	Y+2, r22	; 0x02
     e8c:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	88 30       	cpi	r24, 0x08	; 8
     e92:	18 f0       	brcs	.+6      	; 0xe9a <DIO_ES_tSetPinValue+0x1e>
		return ES_NOT_OK;
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	8c 83       	std	Y+4, r24	; 0x04
     e98:	d8 c0       	rjmp	.+432    	; 0x104a <DIO_ES_tSetPinValue+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	88 23       	and	r24, r24
     e9e:	91 f5       	brne	.+100    	; 0xf04 <DIO_ES_tSetPinValue+0x88>
		if(copy_u8_PinValue == HIGH){
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	81 30       	cpi	r24, 0x01	; 1
     ea4:	a1 f4       	brne	.+40     	; 0xece <DIO_ES_tSetPinValue+0x52>
			SET_BIT(PORTA,copy_u8_PinId);
     ea6:	ab e3       	ldi	r26, 0x3B	; 59
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	eb e3       	ldi	r30, 0x3B	; 59
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	48 2f       	mov	r20, r24
     eb2:	8a 81       	ldd	r24, Y+2	; 0x02
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	02 2e       	mov	r0, r18
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <DIO_ES_tSetPinValue+0x48>
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	0a 94       	dec	r0
     ec6:	e2 f7       	brpl	.-8      	; 0xec0 <DIO_ES_tSetPinValue+0x44>
     ec8:	84 2b       	or	r24, r20
     eca:	8c 93       	st	X, r24
     ecc:	bd c0       	rjmp	.+378    	; 0x1048 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	88 23       	and	r24, r24
     ed2:	a9 f4       	brne	.+42     	; 0xefe <DIO_ES_tSetPinValue+0x82>
			CLR_BIT(PORTA,copy_u8_PinId);
     ed4:	ab e3       	ldi	r26, 0x3B	; 59
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	eb e3       	ldi	r30, 0x3B	; 59
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	48 2f       	mov	r20, r24
     ee0:	8a 81       	ldd	r24, Y+2	; 0x02
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	02 2e       	mov	r0, r18
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <DIO_ES_tSetPinValue+0x76>
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	0a 94       	dec	r0
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <DIO_ES_tSetPinValue+0x72>
     ef6:	80 95       	com	r24
     ef8:	84 23       	and	r24, r20
     efa:	8c 93       	st	X, r24
     efc:	a5 c0       	rjmp	.+330    	; 0x1048 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	8c 83       	std	Y+4, r24	; 0x04
     f02:	a3 c0       	rjmp	.+326    	; 0x104a <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	81 30       	cpi	r24, 0x01	; 1
     f08:	91 f5       	brne	.+100    	; 0xf6e <DIO_ES_tSetPinValue+0xf2>
		if(copy_u8_PinValue == HIGH){
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	a1 f4       	brne	.+40     	; 0xf38 <DIO_ES_tSetPinValue+0xbc>
			SET_BIT(PORTB,copy_u8_PinId);
     f10:	a8 e3       	ldi	r26, 0x38	; 56
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e8 e3       	ldi	r30, 0x38	; 56
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	48 2f       	mov	r20, r24
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	02 2e       	mov	r0, r18
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <DIO_ES_tSetPinValue+0xb2>
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	0a 94       	dec	r0
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <DIO_ES_tSetPinValue+0xae>
     f32:	84 2b       	or	r24, r20
     f34:	8c 93       	st	X, r24
     f36:	88 c0       	rjmp	.+272    	; 0x1048 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	88 23       	and	r24, r24
     f3c:	a9 f4       	brne	.+42     	; 0xf68 <DIO_ES_tSetPinValue+0xec>
			CLR_BIT(PORTB,copy_u8_PinId);
     f3e:	a8 e3       	ldi	r26, 0x38	; 56
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e8 e3       	ldi	r30, 0x38	; 56
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	48 2f       	mov	r20, r24
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 2e       	mov	r0, r18
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <DIO_ES_tSetPinValue+0xe0>
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	0a 94       	dec	r0
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <DIO_ES_tSetPinValue+0xdc>
     f60:	80 95       	com	r24
     f62:	84 23       	and	r24, r20
     f64:	8c 93       	st	X, r24
     f66:	70 c0       	rjmp	.+224    	; 0x1048 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	8c 83       	std	Y+4, r24	; 0x04
     f6c:	6e c0       	rjmp	.+220    	; 0x104a <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	82 30       	cpi	r24, 0x02	; 2
     f72:	91 f5       	brne	.+100    	; 0xfd8 <DIO_ES_tSetPinValue+0x15c>
		if(copy_u8_PinValue == HIGH){
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	81 30       	cpi	r24, 0x01	; 1
     f78:	a1 f4       	brne	.+40     	; 0xfa2 <DIO_ES_tSetPinValue+0x126>
			SET_BIT(PORTC,copy_u8_PinId);
     f7a:	a5 e3       	ldi	r26, 0x35	; 53
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e5 e3       	ldi	r30, 0x35	; 53
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	48 2f       	mov	r20, r24
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	02 2e       	mov	r0, r18
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <DIO_ES_tSetPinValue+0x11c>
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	0a 94       	dec	r0
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <DIO_ES_tSetPinValue+0x118>
     f9c:	84 2b       	or	r24, r20
     f9e:	8c 93       	st	X, r24
     fa0:	53 c0       	rjmp	.+166    	; 0x1048 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	88 23       	and	r24, r24
     fa6:	a9 f4       	brne	.+42     	; 0xfd2 <DIO_ES_tSetPinValue+0x156>
			CLR_BIT(PORTC,copy_u8_PinId);
     fa8:	a5 e3       	ldi	r26, 0x35	; 53
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e5 e3       	ldi	r30, 0x35	; 53
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	02 2e       	mov	r0, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <DIO_ES_tSetPinValue+0x14a>
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	0a 94       	dec	r0
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <DIO_ES_tSetPinValue+0x146>
     fca:	80 95       	com	r24
     fcc:	84 23       	and	r24, r20
     fce:	8c 93       	st	X, r24
     fd0:	3b c0       	rjmp	.+118    	; 0x1048 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	8c 83       	std	Y+4, r24	; 0x04
     fd6:	39 c0       	rjmp	.+114    	; 0x104a <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	83 30       	cpi	r24, 0x03	; 3
     fdc:	91 f5       	brne	.+100    	; 0x1042 <DIO_ES_tSetPinValue+0x1c6>
		if(copy_u8_PinValue == HIGH){
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	81 30       	cpi	r24, 0x01	; 1
     fe2:	a1 f4       	brne	.+40     	; 0x100c <DIO_ES_tSetPinValue+0x190>
			SET_BIT(PORTD,copy_u8_PinId);
     fe4:	a2 e3       	ldi	r26, 0x32	; 50
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e2 e3       	ldi	r30, 0x32	; 50
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	48 2f       	mov	r20, r24
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	02 2e       	mov	r0, r18
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <DIO_ES_tSetPinValue+0x186>
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	0a 94       	dec	r0
    1004:	e2 f7       	brpl	.-8      	; 0xffe <DIO_ES_tSetPinValue+0x182>
    1006:	84 2b       	or	r24, r20
    1008:	8c 93       	st	X, r24
    100a:	1e c0       	rjmp	.+60     	; 0x1048 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    100c:	8b 81       	ldd	r24, Y+3	; 0x03
    100e:	88 23       	and	r24, r24
    1010:	a9 f4       	brne	.+42     	; 0x103c <DIO_ES_tSetPinValue+0x1c0>
			CLR_BIT(PORTD,copy_u8_PinId);
    1012:	a2 e3       	ldi	r26, 0x32	; 50
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e2 e3       	ldi	r30, 0x32	; 50
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	48 2f       	mov	r20, r24
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	02 2e       	mov	r0, r18
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <DIO_ES_tSetPinValue+0x1b4>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	0a 94       	dec	r0
    1032:	e2 f7       	brpl	.-8      	; 0x102c <DIO_ES_tSetPinValue+0x1b0>
    1034:	80 95       	com	r24
    1036:	84 23       	and	r24, r20
    1038:	8c 93       	st	X, r24
    103a:	06 c0       	rjmp	.+12     	; 0x1048 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	8c 83       	std	Y+4, r24	; 0x04
    1040:	04 c0       	rjmp	.+8      	; 0x104a <DIO_ES_tSetPinValue+0x1ce>
		}
	}else{
		return ES_NOT_OK;
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	8c 83       	std	Y+4, r24	; 0x04
    1046:	01 c0       	rjmp	.+2      	; 0x104a <DIO_ES_tSetPinValue+0x1ce>
	}
	return ES_OK;
    1048:	1c 82       	std	Y+4, r1	; 0x04
    104a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <DIO_ES_tGetPinValue>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tGetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type* copy_pu8_PinValue)
{
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	00 d0       	rcall	.+0      	; 0x1060 <DIO_ES_tGetPinValue+0x6>
    1060:	00 d0       	rcall	.+0      	; 0x1062 <DIO_ES_tGetPinValue+0x8>
    1062:	0f 92       	push	r0
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    1068:	89 83       	std	Y+1, r24	; 0x01
    106a:	6a 83       	std	Y+2, r22	; 0x02
    106c:	5c 83       	std	Y+4, r21	; 0x04
    106e:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	88 30       	cpi	r24, 0x08	; 8
    1074:	18 f0       	brcs	.+6      	; 0x107c <DIO_ES_tGetPinValue+0x22>
		return ES_NOT_OK;
    1076:	41 e0       	ldi	r20, 0x01	; 1
    1078:	4d 83       	std	Y+5, r20	; 0x05
    107a:	60 c0       	rjmp	.+192    	; 0x113c <DIO_ES_tGetPinValue+0xe2>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	88 23       	and	r24, r24
    1080:	a1 f4       	brne	.+40     	; 0x10aa <DIO_ES_tGetPinValue+0x50>
		*copy_pu8_PinValue = GET_BIT(PINA,copy_u8_PinId);
    1082:	e9 e3       	ldi	r30, 0x39	; 57
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	88 2f       	mov	r24, r24
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	a9 01       	movw	r20, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <DIO_ES_tGetPinValue+0x40>
    1096:	55 95       	asr	r21
    1098:	47 95       	ror	r20
    109a:	8a 95       	dec	r24
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <DIO_ES_tGetPinValue+0x3c>
    109e:	ca 01       	movw	r24, r20
    10a0:	81 70       	andi	r24, 0x01	; 1
    10a2:	eb 81       	ldd	r30, Y+3	; 0x03
    10a4:	fc 81       	ldd	r31, Y+4	; 0x04
    10a6:	80 83       	st	Z, r24
    10a8:	48 c0       	rjmp	.+144    	; 0x113a <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	81 30       	cpi	r24, 0x01	; 1
    10ae:	a1 f4       	brne	.+40     	; 0x10d8 <DIO_ES_tGetPinValue+0x7e>
		*copy_pu8_PinValue = GET_BIT(PINB,copy_u8_PinId);
    10b0:	e6 e3       	ldi	r30, 0x36	; 54
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	88 2f       	mov	r24, r24
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	a9 01       	movw	r20, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <DIO_ES_tGetPinValue+0x6e>
    10c4:	55 95       	asr	r21
    10c6:	47 95       	ror	r20
    10c8:	8a 95       	dec	r24
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <DIO_ES_tGetPinValue+0x6a>
    10cc:	ca 01       	movw	r24, r20
    10ce:	81 70       	andi	r24, 0x01	; 1
    10d0:	eb 81       	ldd	r30, Y+3	; 0x03
    10d2:	fc 81       	ldd	r31, Y+4	; 0x04
    10d4:	80 83       	st	Z, r24
    10d6:	31 c0       	rjmp	.+98     	; 0x113a <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	82 30       	cpi	r24, 0x02	; 2
    10dc:	a1 f4       	brne	.+40     	; 0x1106 <DIO_ES_tGetPinValue+0xac>
		*copy_pu8_PinValue = GET_BIT(PINC,copy_u8_PinId);
    10de:	e3 e3       	ldi	r30, 0x33	; 51
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	88 2f       	mov	r24, r24
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	a9 01       	movw	r20, r18
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <DIO_ES_tGetPinValue+0x9c>
    10f2:	55 95       	asr	r21
    10f4:	47 95       	ror	r20
    10f6:	8a 95       	dec	r24
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <DIO_ES_tGetPinValue+0x98>
    10fa:	ca 01       	movw	r24, r20
    10fc:	81 70       	andi	r24, 0x01	; 1
    10fe:	eb 81       	ldd	r30, Y+3	; 0x03
    1100:	fc 81       	ldd	r31, Y+4	; 0x04
    1102:	80 83       	st	Z, r24
    1104:	1a c0       	rjmp	.+52     	; 0x113a <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	83 30       	cpi	r24, 0x03	; 3
    110a:	a1 f4       	brne	.+40     	; 0x1134 <DIO_ES_tGetPinValue+0xda>
		*copy_pu8_PinValue = GET_BIT(PIND,copy_u8_PinId);
    110c:	e0 e3       	ldi	r30, 0x30	; 48
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	88 2f       	mov	r24, r24
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	a9 01       	movw	r20, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <DIO_ES_tGetPinValue+0xca>
    1120:	55 95       	asr	r21
    1122:	47 95       	ror	r20
    1124:	8a 95       	dec	r24
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <DIO_ES_tGetPinValue+0xc6>
    1128:	ca 01       	movw	r24, r20
    112a:	81 70       	andi	r24, 0x01	; 1
    112c:	eb 81       	ldd	r30, Y+3	; 0x03
    112e:	fc 81       	ldd	r31, Y+4	; 0x04
    1130:	80 83       	st	Z, r24
    1132:	03 c0       	rjmp	.+6      	; 0x113a <DIO_ES_tGetPinValue+0xe0>
	}else{
		return ES_NOT_OK;
    1134:	51 e0       	ldi	r21, 0x01	; 1
    1136:	5d 83       	std	Y+5, r21	; 0x05
    1138:	01 c0       	rjmp	.+2      	; 0x113c <DIO_ES_tGetPinValue+0xe2>
	}
	return ES_OK;
    113a:	1d 82       	std	Y+5, r1	; 0x05
    113c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <DIO_ES_tSetPortDirection>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tSetPortDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Dir_Type copy_u8_PortDirection)
{
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	00 d0       	rcall	.+0      	; 0x1154 <DIO_ES_tSetPortDirection+0x6>
    1154:	00 d0       	rcall	.+0      	; 0x1156 <DIO_ES_tSetPortDirection+0x8>
    1156:	0f 92       	push	r0
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	89 83       	std	Y+1, r24	; 0x01
    115e:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortDirection != OUTPUT) && (copy_u8_PortDirection != OUTPUT)){
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	31 f0       	breq	.+12     	; 0x1172 <DIO_ES_tSetPortDirection+0x24>
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	19 f0       	breq	.+6      	; 0x1172 <DIO_ES_tSetPortDirection+0x24>
		return ES_NOT_OK;
    116c:	21 e0       	ldi	r18, 0x01	; 1
    116e:	2d 83       	std	Y+5, r18	; 0x05
    1170:	53 c0       	rjmp	.+166    	; 0x1218 <DIO_ES_tSetPortDirection+0xca>
	}
	switch(copy_u8_PortId){
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	3c 83       	std	Y+4, r19	; 0x04
    117a:	2b 83       	std	Y+3, r18	; 0x03
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	9c 81       	ldd	r25, Y+4	; 0x04
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	91 05       	cpc	r25, r1
    1184:	09 f1       	breq	.+66     	; 0x11c8 <DIO_ES_tSetPortDirection+0x7a>
    1186:	2b 81       	ldd	r18, Y+3	; 0x03
    1188:	3c 81       	ldd	r19, Y+4	; 0x04
    118a:	22 30       	cpi	r18, 0x02	; 2
    118c:	31 05       	cpc	r19, r1
    118e:	2c f4       	brge	.+10     	; 0x119a <DIO_ES_tSetPortDirection+0x4c>
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	9c 81       	ldd	r25, Y+4	; 0x04
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	61 f0       	breq	.+24     	; 0x11b0 <DIO_ES_tSetPortDirection+0x62>
    1198:	3b c0       	rjmp	.+118    	; 0x1210 <DIO_ES_tSetPortDirection+0xc2>
    119a:	2b 81       	ldd	r18, Y+3	; 0x03
    119c:	3c 81       	ldd	r19, Y+4	; 0x04
    119e:	22 30       	cpi	r18, 0x02	; 2
    11a0:	31 05       	cpc	r19, r1
    11a2:	f1 f0       	breq	.+60     	; 0x11e0 <DIO_ES_tSetPortDirection+0x92>
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	9c 81       	ldd	r25, Y+4	; 0x04
    11a8:	83 30       	cpi	r24, 0x03	; 3
    11aa:	91 05       	cpc	r25, r1
    11ac:	29 f1       	breq	.+74     	; 0x11f8 <DIO_ES_tSetPortDirection+0xaa>
    11ae:	30 c0       	rjmp	.+96     	; 0x1210 <DIO_ES_tSetPortDirection+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortDirection == OUTPUT)
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	81 30       	cpi	r24, 0x01	; 1
    11b4:	29 f4       	brne	.+10     	; 0x11c0 <DIO_ES_tSetPortDirection+0x72>
			DDRA = 0xff;
    11b6:	ea e3       	ldi	r30, 0x3A	; 58
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	8f ef       	ldi	r24, 0xFF	; 255
    11bc:	80 83       	st	Z, r24
    11be:	2b c0       	rjmp	.+86     	; 0x1216 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRA = 0x00;
    11c0:	ea e3       	ldi	r30, 0x3A	; 58
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	10 82       	st	Z, r1
    11c6:	27 c0       	rjmp	.+78     	; 0x1216 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortDirection == OUTPUT)
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	81 30       	cpi	r24, 0x01	; 1
    11cc:	29 f4       	brne	.+10     	; 0x11d8 <DIO_ES_tSetPortDirection+0x8a>
			DDRB = 0xff;
    11ce:	e7 e3       	ldi	r30, 0x37	; 55
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	8f ef       	ldi	r24, 0xFF	; 255
    11d4:	80 83       	st	Z, r24
    11d6:	1f c0       	rjmp	.+62     	; 0x1216 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRB = 0x00;
    11d8:	e7 e3       	ldi	r30, 0x37	; 55
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	10 82       	st	Z, r1
    11de:	1b c0       	rjmp	.+54     	; 0x1216 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortDirection == OUTPUT)
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	81 30       	cpi	r24, 0x01	; 1
    11e4:	29 f4       	brne	.+10     	; 0x11f0 <DIO_ES_tSetPortDirection+0xa2>
			DDRC = 0xff;
    11e6:	e4 e3       	ldi	r30, 0x34	; 52
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	8f ef       	ldi	r24, 0xFF	; 255
    11ec:	80 83       	st	Z, r24
    11ee:	13 c0       	rjmp	.+38     	; 0x1216 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRC = 0x00;
    11f0:	e4 e3       	ldi	r30, 0x34	; 52
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	10 82       	st	Z, r1
    11f6:	0f c0       	rjmp	.+30     	; 0x1216 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortDirection == OUTPUT)
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	81 30       	cpi	r24, 0x01	; 1
    11fc:	29 f4       	brne	.+10     	; 0x1208 <DIO_ES_tSetPortDirection+0xba>
			DDRD = 0xff;
    11fe:	e1 e3       	ldi	r30, 0x31	; 49
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	8f ef       	ldi	r24, 0xFF	; 255
    1204:	80 83       	st	Z, r24
    1206:	07 c0       	rjmp	.+14     	; 0x1216 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRD = 0x00;
    1208:	e1 e3       	ldi	r30, 0x31	; 49
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	10 82       	st	Z, r1
    120e:	03 c0       	rjmp	.+6      	; 0x1216 <DIO_ES_tSetPortDirection+0xc8>
		break;
	default:
		return ES_NOT_OK;
    1210:	91 e0       	ldi	r25, 0x01	; 1
    1212:	9d 83       	std	Y+5, r25	; 0x05
    1214:	01 c0       	rjmp	.+2      	; 0x1218 <DIO_ES_tSetPortDirection+0xca>
		break;
	}
	return ES_OK;
    1216:	1d 82       	std	Y+5, r1	; 0x05
    1218:	8d 81       	ldd	r24, Y+5	; 0x05
}
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	cf 91       	pop	r28
    1226:	df 91       	pop	r29
    1228:	08 95       	ret

0000122a <DIO_ES_tSetPortValue>:



ES_t DIO_ES_tSetPortValue(DIO_U8_Port_Type copy_u8_PortId, u8 copy_u8_PortValue)
{
    122a:	df 93       	push	r29
    122c:	cf 93       	push	r28
    122e:	00 d0       	rcall	.+0      	; 0x1230 <DIO_ES_tSetPortValue+0x6>
    1230:	00 d0       	rcall	.+0      	; 0x1232 <DIO_ES_tSetPortValue+0x8>
    1232:	0f 92       	push	r0
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
    1238:	89 83       	std	Y+1, r24	; 0x01
    123a:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortValue != HIGH) && (copy_u8_PortValue != LOW)){
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	31 f0       	breq	.+12     	; 0x124e <DIO_ES_tSetPortValue+0x24>
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	88 23       	and	r24, r24
    1246:	19 f0       	breq	.+6      	; 0x124e <DIO_ES_tSetPortValue+0x24>
		return ES_NOT_OK;
    1248:	21 e0       	ldi	r18, 0x01	; 1
    124a:	2d 83       	std	Y+5, r18	; 0x05
    124c:	53 c0       	rjmp	.+166    	; 0x12f4 <DIO_ES_tSetPortValue+0xca>
	}
	switch(copy_u8_PortId){
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	3c 83       	std	Y+4, r19	; 0x04
    1256:	2b 83       	std	Y+3, r18	; 0x03
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	9c 81       	ldd	r25, Y+4	; 0x04
    125c:	81 30       	cpi	r24, 0x01	; 1
    125e:	91 05       	cpc	r25, r1
    1260:	09 f1       	breq	.+66     	; 0x12a4 <DIO_ES_tSetPortValue+0x7a>
    1262:	2b 81       	ldd	r18, Y+3	; 0x03
    1264:	3c 81       	ldd	r19, Y+4	; 0x04
    1266:	22 30       	cpi	r18, 0x02	; 2
    1268:	31 05       	cpc	r19, r1
    126a:	2c f4       	brge	.+10     	; 0x1276 <DIO_ES_tSetPortValue+0x4c>
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	9c 81       	ldd	r25, Y+4	; 0x04
    1270:	00 97       	sbiw	r24, 0x00	; 0
    1272:	61 f0       	breq	.+24     	; 0x128c <DIO_ES_tSetPortValue+0x62>
    1274:	3b c0       	rjmp	.+118    	; 0x12ec <DIO_ES_tSetPortValue+0xc2>
    1276:	2b 81       	ldd	r18, Y+3	; 0x03
    1278:	3c 81       	ldd	r19, Y+4	; 0x04
    127a:	22 30       	cpi	r18, 0x02	; 2
    127c:	31 05       	cpc	r19, r1
    127e:	f1 f0       	breq	.+60     	; 0x12bc <DIO_ES_tSetPortValue+0x92>
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	9c 81       	ldd	r25, Y+4	; 0x04
    1284:	83 30       	cpi	r24, 0x03	; 3
    1286:	91 05       	cpc	r25, r1
    1288:	29 f1       	breq	.+74     	; 0x12d4 <DIO_ES_tSetPortValue+0xaa>
    128a:	30 c0       	rjmp	.+96     	; 0x12ec <DIO_ES_tSetPortValue+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortValue == HIGH)
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	81 30       	cpi	r24, 0x01	; 1
    1290:	29 f4       	brne	.+10     	; 0x129c <DIO_ES_tSetPortValue+0x72>
			PORTA = 0xff;
    1292:	eb e3       	ldi	r30, 0x3B	; 59
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	8f ef       	ldi	r24, 0xFF	; 255
    1298:	80 83       	st	Z, r24
    129a:	2b c0       	rjmp	.+86     	; 0x12f2 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTA = 0x00;
    129c:	eb e3       	ldi	r30, 0x3B	; 59
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	10 82       	st	Z, r1
    12a2:	27 c0       	rjmp	.+78     	; 0x12f2 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortValue == HIGH)
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	29 f4       	brne	.+10     	; 0x12b4 <DIO_ES_tSetPortValue+0x8a>
			PORTB = 0xff;
    12aa:	e8 e3       	ldi	r30, 0x38	; 56
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	8f ef       	ldi	r24, 0xFF	; 255
    12b0:	80 83       	st	Z, r24
    12b2:	1f c0       	rjmp	.+62     	; 0x12f2 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTB = 0x00;
    12b4:	e8 e3       	ldi	r30, 0x38	; 56
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	10 82       	st	Z, r1
    12ba:	1b c0       	rjmp	.+54     	; 0x12f2 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortValue == HIGH)
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	81 30       	cpi	r24, 0x01	; 1
    12c0:	29 f4       	brne	.+10     	; 0x12cc <DIO_ES_tSetPortValue+0xa2>
			PORTC = 0xff;
    12c2:	e5 e3       	ldi	r30, 0x35	; 53
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	8f ef       	ldi	r24, 0xFF	; 255
    12c8:	80 83       	st	Z, r24
    12ca:	13 c0       	rjmp	.+38     	; 0x12f2 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTC = 0x00;
    12cc:	e5 e3       	ldi	r30, 0x35	; 53
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	10 82       	st	Z, r1
    12d2:	0f c0       	rjmp	.+30     	; 0x12f2 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortValue == HIGH)
    12d4:	8a 81       	ldd	r24, Y+2	; 0x02
    12d6:	81 30       	cpi	r24, 0x01	; 1
    12d8:	29 f4       	brne	.+10     	; 0x12e4 <DIO_ES_tSetPortValue+0xba>
			PORTD = 0xff;
    12da:	e2 e3       	ldi	r30, 0x32	; 50
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	8f ef       	ldi	r24, 0xFF	; 255
    12e0:	80 83       	st	Z, r24
    12e2:	07 c0       	rjmp	.+14     	; 0x12f2 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTD = 0x00;
    12e4:	e2 e3       	ldi	r30, 0x32	; 50
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	10 82       	st	Z, r1
    12ea:	03 c0       	rjmp	.+6      	; 0x12f2 <DIO_ES_tSetPortValue+0xc8>
		break;
	default:
		return ES_NOT_OK;
    12ec:	91 e0       	ldi	r25, 0x01	; 1
    12ee:	9d 83       	std	Y+5, r25	; 0x05
    12f0:	01 c0       	rjmp	.+2      	; 0x12f4 <DIO_ES_tSetPortValue+0xca>
		break;
	}
	return ES_OK;
    12f2:	1d 82       	std	Y+5, r1	; 0x05
    12f4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	08 95       	ret

00001306 <DIO_ES_tTOGPin>:
/*
 * DIO_ES_tTOGPin is used to Toggle a specific pin
 */

ES_t DIO_ES_tTOGPin(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId)
{
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	00 d0       	rcall	.+0      	; 0x130c <DIO_ES_tTOGPin+0x6>
    130c:	0f 92       	push	r0
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8_PinId > PIN_LIMIT){
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	88 30       	cpi	r24, 0x08	; 8
    131a:	18 f0       	brcs	.+6      	; 0x1322 <DIO_ES_tTOGPin+0x1c>
		return ES_NOT_OK;
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	8b 83       	std	Y+3, r24	; 0x03
    1320:	60 c0       	rjmp	.+192    	; 0x13e2 <DIO_ES_tTOGPin+0xdc>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    1322:	89 81       	ldd	r24, Y+1	; 0x01
    1324:	88 23       	and	r24, r24
    1326:	a1 f4       	brne	.+40     	; 0x1350 <DIO_ES_tTOGPin+0x4a>
		TOG_BIT(PORTA,copy_u8_PinId);
    1328:	ab e3       	ldi	r26, 0x3B	; 59
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	eb e3       	ldi	r30, 0x3B	; 59
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	48 2f       	mov	r20, r24
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	02 2e       	mov	r0, r18
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <DIO_ES_tTOGPin+0x40>
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	0a 94       	dec	r0
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <DIO_ES_tTOGPin+0x3c>
    134a:	84 27       	eor	r24, r20
    134c:	8c 93       	st	X, r24
    134e:	48 c0       	rjmp	.+144    	; 0x13e0 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	81 30       	cpi	r24, 0x01	; 1
    1354:	a1 f4       	brne	.+40     	; 0x137e <DIO_ES_tTOGPin+0x78>
		TOG_BIT(PORTB,copy_u8_PinId);
    1356:	a8 e3       	ldi	r26, 0x38	; 56
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	e8 e3       	ldi	r30, 0x38	; 56
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	48 2f       	mov	r20, r24
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	02 2e       	mov	r0, r18
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <DIO_ES_tTOGPin+0x6e>
    1370:	88 0f       	add	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	0a 94       	dec	r0
    1376:	e2 f7       	brpl	.-8      	; 0x1370 <DIO_ES_tTOGPin+0x6a>
    1378:	84 27       	eor	r24, r20
    137a:	8c 93       	st	X, r24
    137c:	31 c0       	rjmp	.+98     	; 0x13e0 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    137e:	89 81       	ldd	r24, Y+1	; 0x01
    1380:	82 30       	cpi	r24, 0x02	; 2
    1382:	a1 f4       	brne	.+40     	; 0x13ac <DIO_ES_tTOGPin+0xa6>
		TOG_BIT(PORTC,copy_u8_PinId);
    1384:	a5 e3       	ldi	r26, 0x35	; 53
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	e5 e3       	ldi	r30, 0x35	; 53
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	48 2f       	mov	r20, r24
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	02 2e       	mov	r0, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <DIO_ES_tTOGPin+0x9c>
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	0a 94       	dec	r0
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <DIO_ES_tTOGPin+0x98>
    13a6:	84 27       	eor	r24, r20
    13a8:	8c 93       	st	X, r24
    13aa:	1a c0       	rjmp	.+52     	; 0x13e0 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	83 30       	cpi	r24, 0x03	; 3
    13b0:	a1 f4       	brne	.+40     	; 0x13da <DIO_ES_tTOGPin+0xd4>
		TOG_BIT(PORTD,copy_u8_PinId);
    13b2:	a2 e3       	ldi	r26, 0x32	; 50
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	e2 e3       	ldi	r30, 0x32	; 50
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	48 2f       	mov	r20, r24
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	02 2e       	mov	r0, r18
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <DIO_ES_tTOGPin+0xca>
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	0a 94       	dec	r0
    13d2:	e2 f7       	brpl	.-8      	; 0x13cc <DIO_ES_tTOGPin+0xc6>
    13d4:	84 27       	eor	r24, r20
    13d6:	8c 93       	st	X, r24
    13d8:	03 c0       	rjmp	.+6      	; 0x13e0 <DIO_ES_tTOGPin+0xda>
	}else{
		return ES_NOT_OK;
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	8b 83       	std	Y+3, r24	; 0x03
    13de:	01 c0       	rjmp	.+2      	; 0x13e2 <DIO_ES_tTOGPin+0xdc>
	}
	return ES_OK;
    13e0:	1b 82       	std	Y+3, r1	; 0x03
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	cf 91       	pop	r28
    13ec:	df 91       	pop	r29
    13ee:	08 95       	ret

000013f0 <DIO_ES_tInit>:




ES_t DIO_ES_tInit(void)
{
    13f0:	df 93       	push	r29
    13f2:	cf 93       	push	r28
    13f4:	00 d0       	rcall	.+0      	; 0x13f6 <DIO_ES_tInit+0x6>
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
	int i = 0;
    13fa:	1a 82       	std	Y+2, r1	; 0x02
    13fc:	19 82       	std	Y+1, r1	; 0x01
	for(i=0 ; i<PIN_COUNT ; i++){
    13fe:	1a 82       	std	Y+2, r1	; 0x02
    1400:	19 82       	std	Y+1, r1	; 0x01
    1402:	a3 c2       	rjmp	.+1350   	; 0x194a <DIO_ES_tInit+0x55a>
		if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_A){
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	9a 81       	ldd	r25, Y+2	; 0x02
    1408:	88 0f       	add	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	fc 01       	movw	r30, r24
    1412:	e8 5e       	subi	r30, 0xE8	; 232
    1414:	fe 4f       	sbci	r31, 0xFE	; 254
    1416:	80 81       	ld	r24, Z
    1418:	88 23       	and	r24, r24
    141a:	09 f0       	breq	.+2      	; 0x141e <DIO_ES_tInit+0x2e>
    141c:	9b c0       	rjmp	.+310    	; 0x1554 <DIO_ES_tInit+0x164>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	9a 81       	ldd	r25, Y+2	; 0x02
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	01 96       	adiw	r24, 0x01	; 1
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	fc 01       	movw	r30, r24
    142e:	e8 5e       	subi	r30, 0xE8	; 232
    1430:	fe 4f       	sbci	r31, 0xFE	; 254
    1432:	80 81       	ld	r24, Z
    1434:	81 30       	cpi	r24, 0x01	; 1
    1436:	e9 f4       	brne	.+58     	; 0x1472 <DIO_ES_tInit+0x82>
				SET_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    1438:	aa e3       	ldi	r26, 0x3A	; 58
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	ea e3       	ldi	r30, 0x3A	; 58
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	48 2f       	mov	r20, r24
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	9a 81       	ldd	r25, Y+2	; 0x02
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	88 0f       	add	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	fc 01       	movw	r30, r24
    1452:	e7 5e       	subi	r30, 0xE7	; 231
    1454:	fe 4f       	sbci	r31, 0xFE	; 254
    1456:	80 81       	ld	r24, Z
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	02 2e       	mov	r0, r18
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <DIO_ES_tInit+0x78>
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	0a 94       	dec	r0
    146a:	e2 f7       	brpl	.-8      	; 0x1464 <DIO_ES_tInit+0x74>
    146c:	84 2b       	or	r24, r20
    146e:	8c 93       	st	X, r24
    1470:	67 c2       	rjmp	.+1230   	; 0x1940 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    1472:	aa e3       	ldi	r26, 0x3A	; 58
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	ea e3       	ldi	r30, 0x3A	; 58
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	48 2f       	mov	r20, r24
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	9a 81       	ldd	r25, Y+2	; 0x02
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	88 0f       	add	r24, r24
    1488:	99 1f       	adc	r25, r25
    148a:	fc 01       	movw	r30, r24
    148c:	e7 5e       	subi	r30, 0xE7	; 231
    148e:	fe 4f       	sbci	r31, 0xFE	; 254
    1490:	80 81       	ld	r24, Z
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	02 2e       	mov	r0, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <DIO_ES_tInit+0xb2>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	0a 94       	dec	r0
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <DIO_ES_tInit+0xae>
    14a6:	80 95       	com	r24
    14a8:	84 23       	and	r24, r20
    14aa:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	9a 81       	ldd	r25, Y+2	; 0x02
    14b0:	88 0f       	add	r24, r24
    14b2:	99 1f       	adc	r25, r25
    14b4:	88 0f       	add	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	fc 01       	movw	r30, r24
    14ba:	e5 5e       	subi	r30, 0xE5	; 229
    14bc:	fe 4f       	sbci	r31, 0xFE	; 254
    14be:	80 81       	ld	r24, Z
    14c0:	81 30       	cpi	r24, 0x01	; 1
    14c2:	e9 f4       	brne	.+58     	; 0x14fe <DIO_ES_tInit+0x10e>
					SET_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    14c4:	ab e3       	ldi	r26, 0x3B	; 59
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	eb e3       	ldi	r30, 0x3B	; 59
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	48 2f       	mov	r20, r24
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	9a 81       	ldd	r25, Y+2	; 0x02
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	fc 01       	movw	r30, r24
    14de:	e7 5e       	subi	r30, 0xE7	; 231
    14e0:	fe 4f       	sbci	r31, 0xFE	; 254
    14e2:	80 81       	ld	r24, Z
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	02 2e       	mov	r0, r18
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <DIO_ES_tInit+0x104>
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	0a 94       	dec	r0
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <DIO_ES_tInit+0x100>
    14f8:	84 2b       	or	r24, r20
    14fa:	8c 93       	st	X, r24
    14fc:	21 c2       	rjmp	.+1090   	; 0x1940 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	9a 81       	ldd	r25, Y+2	; 0x02
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	88 0f       	add	r24, r24
    1508:	99 1f       	adc	r25, r25
    150a:	fc 01       	movw	r30, r24
    150c:	e5 5e       	subi	r30, 0xE5	; 229
    150e:	fe 4f       	sbci	r31, 0xFE	; 254
    1510:	80 81       	ld	r24, Z
    1512:	88 23       	and	r24, r24
    1514:	09 f0       	breq	.+2      	; 0x1518 <DIO_ES_tInit+0x128>
    1516:	14 c2       	rjmp	.+1064   	; 0x1940 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    1518:	ab e3       	ldi	r26, 0x3B	; 59
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	eb e3       	ldi	r30, 0x3B	; 59
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	48 2f       	mov	r20, r24
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	9a 81       	ldd	r25, Y+2	; 0x02
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	fc 01       	movw	r30, r24
    1532:	e7 5e       	subi	r30, 0xE7	; 231
    1534:	fe 4f       	sbci	r31, 0xFE	; 254
    1536:	80 81       	ld	r24, Z
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	02 2e       	mov	r0, r18
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <DIO_ES_tInit+0x158>
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	0a 94       	dec	r0
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <DIO_ES_tInit+0x154>
    154c:	80 95       	com	r24
    154e:	84 23       	and	r24, r20
    1550:	8c 93       	st	X, r24
    1552:	f6 c1       	rjmp	.+1004   	; 0x1940 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_B){
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	9a 81       	ldd	r25, Y+2	; 0x02
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	fc 01       	movw	r30, r24
    1562:	e8 5e       	subi	r30, 0xE8	; 232
    1564:	fe 4f       	sbci	r31, 0xFE	; 254
    1566:	80 81       	ld	r24, Z
    1568:	81 30       	cpi	r24, 0x01	; 1
    156a:	09 f0       	breq	.+2      	; 0x156e <DIO_ES_tInit+0x17e>
    156c:	9b c0       	rjmp	.+310    	; 0x16a4 <DIO_ES_tInit+0x2b4>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	9a 81       	ldd	r25, Y+2	; 0x02
    1572:	88 0f       	add	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	01 96       	adiw	r24, 0x01	; 1
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	fc 01       	movw	r30, r24
    157e:	e8 5e       	subi	r30, 0xE8	; 232
    1580:	fe 4f       	sbci	r31, 0xFE	; 254
    1582:	80 81       	ld	r24, Z
    1584:	81 30       	cpi	r24, 0x01	; 1
    1586:	e9 f4       	brne	.+58     	; 0x15c2 <DIO_ES_tInit+0x1d2>
				SET_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    1588:	a7 e3       	ldi	r26, 0x37	; 55
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	e7 e3       	ldi	r30, 0x37	; 55
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	48 2f       	mov	r20, r24
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	9a 81       	ldd	r25, Y+2	; 0x02
    1598:	88 0f       	add	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	88 0f       	add	r24, r24
    159e:	99 1f       	adc	r25, r25
    15a0:	fc 01       	movw	r30, r24
    15a2:	e7 5e       	subi	r30, 0xE7	; 231
    15a4:	fe 4f       	sbci	r31, 0xFE	; 254
    15a6:	80 81       	ld	r24, Z
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	02 2e       	mov	r0, r18
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <DIO_ES_tInit+0x1c8>
    15b4:	88 0f       	add	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	0a 94       	dec	r0
    15ba:	e2 f7       	brpl	.-8      	; 0x15b4 <DIO_ES_tInit+0x1c4>
    15bc:	84 2b       	or	r24, r20
    15be:	8c 93       	st	X, r24
    15c0:	bf c1       	rjmp	.+894    	; 0x1940 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    15c2:	a7 e3       	ldi	r26, 0x37	; 55
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e7 e3       	ldi	r30, 0x37	; 55
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	48 2f       	mov	r20, r24
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	9a 81       	ldd	r25, Y+2	; 0x02
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	88 0f       	add	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	fc 01       	movw	r30, r24
    15dc:	e7 5e       	subi	r30, 0xE7	; 231
    15de:	fe 4f       	sbci	r31, 0xFE	; 254
    15e0:	80 81       	ld	r24, Z
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	02 2e       	mov	r0, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <DIO_ES_tInit+0x202>
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	0a 94       	dec	r0
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <DIO_ES_tInit+0x1fe>
    15f6:	80 95       	com	r24
    15f8:	84 23       	and	r24, r20
    15fa:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	88 0f       	add	r24, r24
    1606:	99 1f       	adc	r25, r25
    1608:	fc 01       	movw	r30, r24
    160a:	e5 5e       	subi	r30, 0xE5	; 229
    160c:	fe 4f       	sbci	r31, 0xFE	; 254
    160e:	80 81       	ld	r24, Z
    1610:	81 30       	cpi	r24, 0x01	; 1
    1612:	e9 f4       	brne	.+58     	; 0x164e <DIO_ES_tInit+0x25e>
					SET_BIT(PORTB,Dio_CfgPinsArray[i].Pin);
    1614:	a8 e3       	ldi	r26, 0x38	; 56
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	e8 e3       	ldi	r30, 0x38	; 56
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	48 2f       	mov	r20, r24
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	9a 81       	ldd	r25, Y+2	; 0x02
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	88 0f       	add	r24, r24
    162a:	99 1f       	adc	r25, r25
    162c:	fc 01       	movw	r30, r24
    162e:	e7 5e       	subi	r30, 0xE7	; 231
    1630:	fe 4f       	sbci	r31, 0xFE	; 254
    1632:	80 81       	ld	r24, Z
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	02 2e       	mov	r0, r18
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <DIO_ES_tInit+0x254>
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	0a 94       	dec	r0
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <DIO_ES_tInit+0x250>
    1648:	84 2b       	or	r24, r20
    164a:	8c 93       	st	X, r24
    164c:	79 c1       	rjmp	.+754    	; 0x1940 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	9a 81       	ldd	r25, Y+2	; 0x02
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	88 0f       	add	r24, r24
    1658:	99 1f       	adc	r25, r25
    165a:	fc 01       	movw	r30, r24
    165c:	e5 5e       	subi	r30, 0xE5	; 229
    165e:	fe 4f       	sbci	r31, 0xFE	; 254
    1660:	80 81       	ld	r24, Z
    1662:	88 23       	and	r24, r24
    1664:	09 f0       	breq	.+2      	; 0x1668 <DIO_ES_tInit+0x278>
    1666:	6c c1       	rjmp	.+728    	; 0x1940 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    1668:	ab e3       	ldi	r26, 0x3B	; 59
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	eb e3       	ldi	r30, 0x3B	; 59
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	48 2f       	mov	r20, r24
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	9a 81       	ldd	r25, Y+2	; 0x02
    1678:	88 0f       	add	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	fc 01       	movw	r30, r24
    1682:	e7 5e       	subi	r30, 0xE7	; 231
    1684:	fe 4f       	sbci	r31, 0xFE	; 254
    1686:	80 81       	ld	r24, Z
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	02 2e       	mov	r0, r18
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <DIO_ES_tInit+0x2a8>
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	0a 94       	dec	r0
    169a:	e2 f7       	brpl	.-8      	; 0x1694 <DIO_ES_tInit+0x2a4>
    169c:	80 95       	com	r24
    169e:	84 23       	and	r24, r20
    16a0:	8c 93       	st	X, r24
    16a2:	4e c1       	rjmp	.+668    	; 0x1940 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_C){
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
    16a6:	9a 81       	ldd	r25, Y+2	; 0x02
    16a8:	88 0f       	add	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	fc 01       	movw	r30, r24
    16b2:	e8 5e       	subi	r30, 0xE8	; 232
    16b4:	fe 4f       	sbci	r31, 0xFE	; 254
    16b6:	80 81       	ld	r24, Z
    16b8:	82 30       	cpi	r24, 0x02	; 2
    16ba:	09 f0       	breq	.+2      	; 0x16be <DIO_ES_tInit+0x2ce>
    16bc:	9b c0       	rjmp	.+310    	; 0x17f4 <DIO_ES_tInit+0x404>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	9a 81       	ldd	r25, Y+2	; 0x02
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	01 96       	adiw	r24, 0x01	; 1
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	fc 01       	movw	r30, r24
    16ce:	e8 5e       	subi	r30, 0xE8	; 232
    16d0:	fe 4f       	sbci	r31, 0xFE	; 254
    16d2:	80 81       	ld	r24, Z
    16d4:	81 30       	cpi	r24, 0x01	; 1
    16d6:	e9 f4       	brne	.+58     	; 0x1712 <DIO_ES_tInit+0x322>
				SET_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    16d8:	a4 e3       	ldi	r26, 0x34	; 52
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e4 e3       	ldi	r30, 0x34	; 52
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	48 2f       	mov	r20, r24
    16e4:	89 81       	ldd	r24, Y+1	; 0x01
    16e6:	9a 81       	ldd	r25, Y+2	; 0x02
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	fc 01       	movw	r30, r24
    16f2:	e7 5e       	subi	r30, 0xE7	; 231
    16f4:	fe 4f       	sbci	r31, 0xFE	; 254
    16f6:	80 81       	ld	r24, Z
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	02 2e       	mov	r0, r18
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <DIO_ES_tInit+0x318>
    1704:	88 0f       	add	r24, r24
    1706:	99 1f       	adc	r25, r25
    1708:	0a 94       	dec	r0
    170a:	e2 f7       	brpl	.-8      	; 0x1704 <DIO_ES_tInit+0x314>
    170c:	84 2b       	or	r24, r20
    170e:	8c 93       	st	X, r24
    1710:	17 c1       	rjmp	.+558    	; 0x1940 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    1712:	a4 e3       	ldi	r26, 0x34	; 52
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e4 e3       	ldi	r30, 0x34	; 52
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	48 2f       	mov	r20, r24
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	9a 81       	ldd	r25, Y+2	; 0x02
    1722:	88 0f       	add	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	fc 01       	movw	r30, r24
    172c:	e7 5e       	subi	r30, 0xE7	; 231
    172e:	fe 4f       	sbci	r31, 0xFE	; 254
    1730:	80 81       	ld	r24, Z
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	02 2e       	mov	r0, r18
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <DIO_ES_tInit+0x352>
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	0a 94       	dec	r0
    1744:	e2 f7       	brpl	.-8      	; 0x173e <DIO_ES_tInit+0x34e>
    1746:	80 95       	com	r24
    1748:	84 23       	and	r24, r20
    174a:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	9a 81       	ldd	r25, Y+2	; 0x02
    1750:	88 0f       	add	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	88 0f       	add	r24, r24
    1756:	99 1f       	adc	r25, r25
    1758:	fc 01       	movw	r30, r24
    175a:	e5 5e       	subi	r30, 0xE5	; 229
    175c:	fe 4f       	sbci	r31, 0xFE	; 254
    175e:	80 81       	ld	r24, Z
    1760:	81 30       	cpi	r24, 0x01	; 1
    1762:	e9 f4       	brne	.+58     	; 0x179e <DIO_ES_tInit+0x3ae>
					SET_BIT(PORTC,Dio_CfgPinsArray[i].Pin);
    1764:	a5 e3       	ldi	r26, 0x35	; 53
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	e5 e3       	ldi	r30, 0x35	; 53
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	48 2f       	mov	r20, r24
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	9a 81       	ldd	r25, Y+2	; 0x02
    1774:	88 0f       	add	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	fc 01       	movw	r30, r24
    177e:	e7 5e       	subi	r30, 0xE7	; 231
    1780:	fe 4f       	sbci	r31, 0xFE	; 254
    1782:	80 81       	ld	r24, Z
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	02 2e       	mov	r0, r18
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <DIO_ES_tInit+0x3a4>
    1790:	88 0f       	add	r24, r24
    1792:	99 1f       	adc	r25, r25
    1794:	0a 94       	dec	r0
    1796:	e2 f7       	brpl	.-8      	; 0x1790 <DIO_ES_tInit+0x3a0>
    1798:	84 2b       	or	r24, r20
    179a:	8c 93       	st	X, r24
    179c:	d1 c0       	rjmp	.+418    	; 0x1940 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	9a 81       	ldd	r25, Y+2	; 0x02
    17a2:	88 0f       	add	r24, r24
    17a4:	99 1f       	adc	r25, r25
    17a6:	88 0f       	add	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	fc 01       	movw	r30, r24
    17ac:	e5 5e       	subi	r30, 0xE5	; 229
    17ae:	fe 4f       	sbci	r31, 0xFE	; 254
    17b0:	80 81       	ld	r24, Z
    17b2:	88 23       	and	r24, r24
    17b4:	09 f0       	breq	.+2      	; 0x17b8 <DIO_ES_tInit+0x3c8>
    17b6:	c4 c0       	rjmp	.+392    	; 0x1940 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    17b8:	ab e3       	ldi	r26, 0x3B	; 59
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	eb e3       	ldi	r30, 0x3B	; 59
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	48 2f       	mov	r20, r24
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
    17c6:	9a 81       	ldd	r25, Y+2	; 0x02
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	fc 01       	movw	r30, r24
    17d2:	e7 5e       	subi	r30, 0xE7	; 231
    17d4:	fe 4f       	sbci	r31, 0xFE	; 254
    17d6:	80 81       	ld	r24, Z
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	02 2e       	mov	r0, r18
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <DIO_ES_tInit+0x3f8>
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	0a 94       	dec	r0
    17ea:	e2 f7       	brpl	.-8      	; 0x17e4 <DIO_ES_tInit+0x3f4>
    17ec:	80 95       	com	r24
    17ee:	84 23       	and	r24, r20
    17f0:	8c 93       	st	X, r24
    17f2:	a6 c0       	rjmp	.+332    	; 0x1940 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_D){
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	9a 81       	ldd	r25, Y+2	; 0x02
    17f8:	88 0f       	add	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	fc 01       	movw	r30, r24
    1802:	e8 5e       	subi	r30, 0xE8	; 232
    1804:	fe 4f       	sbci	r31, 0xFE	; 254
    1806:	80 81       	ld	r24, Z
    1808:	83 30       	cpi	r24, 0x03	; 3
    180a:	09 f0       	breq	.+2      	; 0x180e <DIO_ES_tInit+0x41e>
    180c:	99 c0       	rjmp	.+306    	; 0x1940 <DIO_ES_tInit+0x550>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    180e:	89 81       	ldd	r24, Y+1	; 0x01
    1810:	9a 81       	ldd	r25, Y+2	; 0x02
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	01 96       	adiw	r24, 0x01	; 1
    1818:	88 0f       	add	r24, r24
    181a:	99 1f       	adc	r25, r25
    181c:	fc 01       	movw	r30, r24
    181e:	e8 5e       	subi	r30, 0xE8	; 232
    1820:	fe 4f       	sbci	r31, 0xFE	; 254
    1822:	80 81       	ld	r24, Z
    1824:	81 30       	cpi	r24, 0x01	; 1
    1826:	e9 f4       	brne	.+58     	; 0x1862 <DIO_ES_tInit+0x472>
				SET_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    1828:	a1 e3       	ldi	r26, 0x31	; 49
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	e1 e3       	ldi	r30, 0x31	; 49
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	48 2f       	mov	r20, r24
    1834:	89 81       	ldd	r24, Y+1	; 0x01
    1836:	9a 81       	ldd	r25, Y+2	; 0x02
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	fc 01       	movw	r30, r24
    1842:	e7 5e       	subi	r30, 0xE7	; 231
    1844:	fe 4f       	sbci	r31, 0xFE	; 254
    1846:	80 81       	ld	r24, Z
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	02 2e       	mov	r0, r18
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <DIO_ES_tInit+0x468>
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	0a 94       	dec	r0
    185a:	e2 f7       	brpl	.-8      	; 0x1854 <DIO_ES_tInit+0x464>
    185c:	84 2b       	or	r24, r20
    185e:	8c 93       	st	X, r24
    1860:	6f c0       	rjmp	.+222    	; 0x1940 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    1862:	a1 e3       	ldi	r26, 0x31	; 49
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e1 e3       	ldi	r30, 0x31	; 49
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	48 2f       	mov	r20, r24
    186e:	89 81       	ldd	r24, Y+1	; 0x01
    1870:	9a 81       	ldd	r25, Y+2	; 0x02
    1872:	88 0f       	add	r24, r24
    1874:	99 1f       	adc	r25, r25
    1876:	88 0f       	add	r24, r24
    1878:	99 1f       	adc	r25, r25
    187a:	fc 01       	movw	r30, r24
    187c:	e7 5e       	subi	r30, 0xE7	; 231
    187e:	fe 4f       	sbci	r31, 0xFE	; 254
    1880:	80 81       	ld	r24, Z
    1882:	28 2f       	mov	r18, r24
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	02 2e       	mov	r0, r18
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <DIO_ES_tInit+0x4a2>
    188e:	88 0f       	add	r24, r24
    1890:	99 1f       	adc	r25, r25
    1892:	0a 94       	dec	r0
    1894:	e2 f7       	brpl	.-8      	; 0x188e <DIO_ES_tInit+0x49e>
    1896:	80 95       	com	r24
    1898:	84 23       	and	r24, r20
    189a:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	9a 81       	ldd	r25, Y+2	; 0x02
    18a0:	88 0f       	add	r24, r24
    18a2:	99 1f       	adc	r25, r25
    18a4:	88 0f       	add	r24, r24
    18a6:	99 1f       	adc	r25, r25
    18a8:	fc 01       	movw	r30, r24
    18aa:	e5 5e       	subi	r30, 0xE5	; 229
    18ac:	fe 4f       	sbci	r31, 0xFE	; 254
    18ae:	80 81       	ld	r24, Z
    18b0:	81 30       	cpi	r24, 0x01	; 1
    18b2:	e9 f4       	brne	.+58     	; 0x18ee <DIO_ES_tInit+0x4fe>
					SET_BIT(PORTD,Dio_CfgPinsArray[i].Pin);
    18b4:	a2 e3       	ldi	r26, 0x32	; 50
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	e2 e3       	ldi	r30, 0x32	; 50
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	48 2f       	mov	r20, r24
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	9a 81       	ldd	r25, Y+2	; 0x02
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	88 0f       	add	r24, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	fc 01       	movw	r30, r24
    18ce:	e7 5e       	subi	r30, 0xE7	; 231
    18d0:	fe 4f       	sbci	r31, 0xFE	; 254
    18d2:	80 81       	ld	r24, Z
    18d4:	28 2f       	mov	r18, r24
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	02 2e       	mov	r0, r18
    18de:	02 c0       	rjmp	.+4      	; 0x18e4 <DIO_ES_tInit+0x4f4>
    18e0:	88 0f       	add	r24, r24
    18e2:	99 1f       	adc	r25, r25
    18e4:	0a 94       	dec	r0
    18e6:	e2 f7       	brpl	.-8      	; 0x18e0 <DIO_ES_tInit+0x4f0>
    18e8:	84 2b       	or	r24, r20
    18ea:	8c 93       	st	X, r24
    18ec:	29 c0       	rjmp	.+82     	; 0x1940 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    18ee:	89 81       	ldd	r24, Y+1	; 0x01
    18f0:	9a 81       	ldd	r25, Y+2	; 0x02
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	88 0f       	add	r24, r24
    18f8:	99 1f       	adc	r25, r25
    18fa:	fc 01       	movw	r30, r24
    18fc:	e5 5e       	subi	r30, 0xE5	; 229
    18fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1900:	80 81       	ld	r24, Z
    1902:	88 23       	and	r24, r24
    1904:	e9 f4       	brne	.+58     	; 0x1940 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    1906:	ab e3       	ldi	r26, 0x3B	; 59
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	eb e3       	ldi	r30, 0x3B	; 59
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	48 2f       	mov	r20, r24
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	9a 81       	ldd	r25, Y+2	; 0x02
    1916:	88 0f       	add	r24, r24
    1918:	99 1f       	adc	r25, r25
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	fc 01       	movw	r30, r24
    1920:	e7 5e       	subi	r30, 0xE7	; 231
    1922:	fe 4f       	sbci	r31, 0xFE	; 254
    1924:	80 81       	ld	r24, Z
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	02 2e       	mov	r0, r18
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <DIO_ES_tInit+0x546>
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	0a 94       	dec	r0
    1938:	e2 f7       	brpl	.-8      	; 0x1932 <DIO_ES_tInit+0x542>
    193a:	80 95       	com	r24
    193c:	84 23       	and	r24, r20
    193e:	8c 93       	st	X, r24


ES_t DIO_ES_tInit(void)
{
	int i = 0;
	for(i=0 ; i<PIN_COUNT ; i++){
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	9a 81       	ldd	r25, Y+2	; 0x02
    1944:	01 96       	adiw	r24, 0x01	; 1
    1946:	9a 83       	std	Y+2, r25	; 0x02
    1948:	89 83       	std	Y+1, r24	; 0x01
    194a:	89 81       	ldd	r24, Y+1	; 0x01
    194c:	9a 81       	ldd	r25, Y+2	; 0x02
    194e:	88 31       	cpi	r24, 0x18	; 24
    1950:	91 05       	cpc	r25, r1
    1952:	0c f4       	brge	.+2      	; 0x1956 <DIO_ES_tInit+0x566>
    1954:	57 cd       	rjmp	.-1362   	; 0x1404 <DIO_ES_tInit+0x14>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
				}
			}
		}
	}
	return ES_OK;
    1956:	80 e0       	ldi	r24, 0x00	; 0
}
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	cf 91       	pop	r28
    195e:	df 91       	pop	r29
    1960:	08 95       	ret

00001962 <Stepper_Init>:

#include "Stepper.h"
#include "StepperCfg.h"

void Stepper_Init(void)
{
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
	DIO_ES_tSetPinDirection(Stepper_MOTOR_REG, S1, OUTPUT);
    196a:	82 e0       	ldi	r24, 0x02	; 2
    196c:	60 e0       	ldi	r22, 0x00	; 0
    196e:	41 e0       	ldi	r20, 0x01	; 1
    1970:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(Stepper_MOTOR_REG, S2, OUTPUT);
    1974:	82 e0       	ldi	r24, 0x02	; 2
    1976:	65 e0       	ldi	r22, 0x05	; 5
    1978:	41 e0       	ldi	r20, 0x01	; 1
    197a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(Stepper_MOTOR_REG, S3, OUTPUT);
    197e:	82 e0       	ldi	r24, 0x02	; 2
    1980:	66 e0       	ldi	r22, 0x06	; 6
    1982:	41 e0       	ldi	r20, 0x01	; 1
    1984:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(Stepper_MOTOR_REG, S4, OUTPUT);
    1988:	82 e0       	ldi	r24, 0x02	; 2
    198a:	67 e0       	ldi	r22, 0x07	; 7
    198c:	41 e0       	ldi	r20, 0x01	; 1
    198e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S1, LOW);
    1992:	82 e0       	ldi	r24, 0x02	; 2
    1994:	60 e0       	ldi	r22, 0x00	; 0
    1996:	40 e0       	ldi	r20, 0x00	; 0
    1998:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S2, LOW);
    199c:	82 e0       	ldi	r24, 0x02	; 2
    199e:	65 e0       	ldi	r22, 0x05	; 5
    19a0:	40 e0       	ldi	r20, 0x00	; 0
    19a2:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S3, LOW);
    19a6:	82 e0       	ldi	r24, 0x02	; 2
    19a8:	66 e0       	ldi	r22, 0x06	; 6
    19aa:	40 e0       	ldi	r20, 0x00	; 0
    19ac:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S4, LOW);
    19b0:	82 e0       	ldi	r24, 0x02	; 2
    19b2:	67 e0       	ldi	r22, 0x07	; 7
    19b4:	40 e0       	ldi	r20, 0x00	; 0
    19b6:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
}
    19ba:	cf 91       	pop	r28
    19bc:	df 91       	pop	r29
    19be:	08 95       	ret

000019c0 <Stepper_Rotate>:


void Stepper_Rotate(u8 degree)
{
    19c0:	df 93       	push	r29
    19c2:	cf 93       	push	r28
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
    19c8:	ef 97       	sbiw	r28, 0x3f	; 63
    19ca:	0f b6       	in	r0, 0x3f	; 63
    19cc:	f8 94       	cli
    19ce:	de bf       	out	0x3e, r29	; 62
    19d0:	0f be       	out	0x3f, r0	; 63
    19d2:	cd bf       	out	0x3d, r28	; 61
    19d4:	8f af       	std	Y+63, r24	; 0x3f
	u16 stepsNum = (degree * 2048UL)/360;
    19d6:	8f ad       	ldd	r24, Y+63	; 0x3f
    19d8:	88 2f       	mov	r24, r24
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	a0 e0       	ldi	r26, 0x00	; 0
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	07 2e       	mov	r0, r23
    19e2:	7b e0       	ldi	r23, 0x0B	; 11
    19e4:	88 0f       	add	r24, r24
    19e6:	99 1f       	adc	r25, r25
    19e8:	aa 1f       	adc	r26, r26
    19ea:	bb 1f       	adc	r27, r27
    19ec:	7a 95       	dec	r23
    19ee:	d1 f7       	brne	.-12     	; 0x19e4 <Stepper_Rotate+0x24>
    19f0:	70 2d       	mov	r23, r0
    19f2:	28 e6       	ldi	r18, 0x68	; 104
    19f4:	31 e0       	ldi	r19, 0x01	; 1
    19f6:	40 e0       	ldi	r20, 0x00	; 0
    19f8:	50 e0       	ldi	r21, 0x00	; 0
    19fa:	bc 01       	movw	r22, r24
    19fc:	cd 01       	movw	r24, r26
    19fe:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <__udivmodsi4>
    1a02:	da 01       	movw	r26, r20
    1a04:	c9 01       	movw	r24, r18
    1a06:	9e af       	std	Y+62, r25	; 0x3e
    1a08:	8d af       	std	Y+61, r24	; 0x3d
	u16 IterationsNum = stepsNum/4;
    1a0a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a0c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a0e:	96 95       	lsr	r25
    1a10:	87 95       	ror	r24
    1a12:	96 95       	lsr	r25
    1a14:	87 95       	ror	r24
    1a16:	9c af       	std	Y+60, r25	; 0x3c
    1a18:	8b af       	std	Y+59, r24	; 0x3b

	u16 i=0;
    1a1a:	1a ae       	std	Y+58, r1	; 0x3a
    1a1c:	19 ae       	std	Y+57, r1	; 0x39
	for(i=0;i<IterationsNum;i++)
    1a1e:	1a ae       	std	Y+58, r1	; 0x3a
    1a20:	19 ae       	std	Y+57, r1	; 0x39
    1a22:	1d c2       	rjmp	.+1082   	; 0x1e5e <Stepper_Rotate+0x49e>
	{
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S1, HIGH);
    1a24:	82 e0       	ldi	r24, 0x02	; 2
    1a26:	60 e0       	ldi	r22, 0x00	; 0
    1a28:	41 e0       	ldi	r20, 0x01	; 1
    1a2a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S2, LOW);
    1a2e:	82 e0       	ldi	r24, 0x02	; 2
    1a30:	65 e0       	ldi	r22, 0x05	; 5
    1a32:	40 e0       	ldi	r20, 0x00	; 0
    1a34:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S3, LOW);
    1a38:	82 e0       	ldi	r24, 0x02	; 2
    1a3a:	66 e0       	ldi	r22, 0x06	; 6
    1a3c:	40 e0       	ldi	r20, 0x00	; 0
    1a3e:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S4, LOW);
    1a42:	82 e0       	ldi	r24, 0x02	; 2
    1a44:	67 e0       	ldi	r22, 0x07	; 7
    1a46:	40 e0       	ldi	r20, 0x00	; 0
    1a48:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	a0 ea       	ldi	r26, 0xA0	; 160
    1a52:	b1 e4       	ldi	r27, 0x41	; 65
    1a54:	8d ab       	std	Y+53, r24	; 0x35
    1a56:	9e ab       	std	Y+54, r25	; 0x36
    1a58:	af ab       	std	Y+55, r26	; 0x37
    1a5a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a5c:	6d a9       	ldd	r22, Y+53	; 0x35
    1a5e:	7e a9       	ldd	r23, Y+54	; 0x36
    1a60:	8f a9       	ldd	r24, Y+55	; 0x37
    1a62:	98 ad       	ldd	r25, Y+56	; 0x38
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	4a e7       	ldi	r20, 0x7A	; 122
    1a6a:	55 e4       	ldi	r21, 0x45	; 69
    1a6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	89 ab       	std	Y+49, r24	; 0x31
    1a76:	9a ab       	std	Y+50, r25	; 0x32
    1a78:	ab ab       	std	Y+51, r26	; 0x33
    1a7a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a7c:	69 a9       	ldd	r22, Y+49	; 0x31
    1a7e:	7a a9       	ldd	r23, Y+50	; 0x32
    1a80:	8b a9       	ldd	r24, Y+51	; 0x33
    1a82:	9c a9       	ldd	r25, Y+52	; 0x34
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	40 e8       	ldi	r20, 0x80	; 128
    1a8a:	5f e3       	ldi	r21, 0x3F	; 63
    1a8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a90:	88 23       	and	r24, r24
    1a92:	2c f4       	brge	.+10     	; 0x1a9e <Stepper_Rotate+0xde>
		__ticks = 1;
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	98 ab       	std	Y+48, r25	; 0x30
    1a9a:	8f a7       	std	Y+47, r24	; 0x2f
    1a9c:	3f c0       	rjmp	.+126    	; 0x1b1c <Stepper_Rotate+0x15c>
	else if (__tmp > 65535)
    1a9e:	69 a9       	ldd	r22, Y+49	; 0x31
    1aa0:	7a a9       	ldd	r23, Y+50	; 0x32
    1aa2:	8b a9       	ldd	r24, Y+51	; 0x33
    1aa4:	9c a9       	ldd	r25, Y+52	; 0x34
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	3f ef       	ldi	r19, 0xFF	; 255
    1aaa:	4f e7       	ldi	r20, 0x7F	; 127
    1aac:	57 e4       	ldi	r21, 0x47	; 71
    1aae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ab2:	18 16       	cp	r1, r24
    1ab4:	4c f5       	brge	.+82     	; 0x1b08 <Stepper_Rotate+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab6:	6d a9       	ldd	r22, Y+53	; 0x35
    1ab8:	7e a9       	ldd	r23, Y+54	; 0x36
    1aba:	8f a9       	ldd	r24, Y+55	; 0x37
    1abc:	98 ad       	ldd	r25, Y+56	; 0x38
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	40 e2       	ldi	r20, 0x20	; 32
    1ac4:	51 e4       	ldi	r21, 0x41	; 65
    1ac6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	bc 01       	movw	r22, r24
    1ad0:	cd 01       	movw	r24, r26
    1ad2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	98 ab       	std	Y+48, r25	; 0x30
    1adc:	8f a7       	std	Y+47, r24	; 0x2f
    1ade:	0f c0       	rjmp	.+30     	; 0x1afe <Stepper_Rotate+0x13e>
    1ae0:	80 e9       	ldi	r24, 0x90	; 144
    1ae2:	91 e0       	ldi	r25, 0x01	; 1
    1ae4:	9e a7       	std	Y+46, r25	; 0x2e
    1ae6:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ae8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1aea:	9e a5       	ldd	r25, Y+46	; 0x2e
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	f1 f7       	brne	.-4      	; 0x1aec <Stepper_Rotate+0x12c>
    1af0:	9e a7       	std	Y+46, r25	; 0x2e
    1af2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1af6:	98 a9       	ldd	r25, Y+48	; 0x30
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	98 ab       	std	Y+48, r25	; 0x30
    1afc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1afe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b00:	98 a9       	ldd	r25, Y+48	; 0x30
    1b02:	00 97       	sbiw	r24, 0x00	; 0
    1b04:	69 f7       	brne	.-38     	; 0x1ae0 <Stepper_Rotate+0x120>
    1b06:	14 c0       	rjmp	.+40     	; 0x1b30 <Stepper_Rotate+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b08:	69 a9       	ldd	r22, Y+49	; 0x31
    1b0a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b0c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b0e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	98 ab       	std	Y+48, r25	; 0x30
    1b1a:	8f a7       	std	Y+47, r24	; 0x2f
    1b1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b1e:	98 a9       	ldd	r25, Y+48	; 0x30
    1b20:	9c a7       	std	Y+44, r25	; 0x2c
    1b22:	8b a7       	std	Y+43, r24	; 0x2b
    1b24:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b26:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b28:	01 97       	sbiw	r24, 0x01	; 1
    1b2a:	f1 f7       	brne	.-4      	; 0x1b28 <Stepper_Rotate+0x168>
    1b2c:	9c a7       	std	Y+44, r25	; 0x2c
    1b2e:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(20);
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S1, LOW);
    1b30:	82 e0       	ldi	r24, 0x02	; 2
    1b32:	60 e0       	ldi	r22, 0x00	; 0
    1b34:	40 e0       	ldi	r20, 0x00	; 0
    1b36:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S2, HIGH);
    1b3a:	82 e0       	ldi	r24, 0x02	; 2
    1b3c:	65 e0       	ldi	r22, 0x05	; 5
    1b3e:	41 e0       	ldi	r20, 0x01	; 1
    1b40:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S3, LOW);
    1b44:	82 e0       	ldi	r24, 0x02	; 2
    1b46:	66 e0       	ldi	r22, 0x06	; 6
    1b48:	40 e0       	ldi	r20, 0x00	; 0
    1b4a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S4, LOW);
    1b4e:	82 e0       	ldi	r24, 0x02	; 2
    1b50:	67 e0       	ldi	r22, 0x07	; 7
    1b52:	40 e0       	ldi	r20, 0x00	; 0
    1b54:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	a0 ea       	ldi	r26, 0xA0	; 160
    1b5e:	b1 e4       	ldi	r27, 0x41	; 65
    1b60:	8f a3       	std	Y+39, r24	; 0x27
    1b62:	98 a7       	std	Y+40, r25	; 0x28
    1b64:	a9 a7       	std	Y+41, r26	; 0x29
    1b66:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b68:	6f a1       	ldd	r22, Y+39	; 0x27
    1b6a:	78 a5       	ldd	r23, Y+40	; 0x28
    1b6c:	89 a5       	ldd	r24, Y+41	; 0x29
    1b6e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	4a e7       	ldi	r20, 0x7A	; 122
    1b76:	55 e4       	ldi	r21, 0x45	; 69
    1b78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	8b a3       	std	Y+35, r24	; 0x23
    1b82:	9c a3       	std	Y+36, r25	; 0x24
    1b84:	ad a3       	std	Y+37, r26	; 0x25
    1b86:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b88:	6b a1       	ldd	r22, Y+35	; 0x23
    1b8a:	7c a1       	ldd	r23, Y+36	; 0x24
    1b8c:	8d a1       	ldd	r24, Y+37	; 0x25
    1b8e:	9e a1       	ldd	r25, Y+38	; 0x26
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	40 e8       	ldi	r20, 0x80	; 128
    1b96:	5f e3       	ldi	r21, 0x3F	; 63
    1b98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b9c:	88 23       	and	r24, r24
    1b9e:	2c f4       	brge	.+10     	; 0x1baa <Stepper_Rotate+0x1ea>
		__ticks = 1;
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	9a a3       	std	Y+34, r25	; 0x22
    1ba6:	89 a3       	std	Y+33, r24	; 0x21
    1ba8:	3f c0       	rjmp	.+126    	; 0x1c28 <Stepper_Rotate+0x268>
	else if (__tmp > 65535)
    1baa:	6b a1       	ldd	r22, Y+35	; 0x23
    1bac:	7c a1       	ldd	r23, Y+36	; 0x24
    1bae:	8d a1       	ldd	r24, Y+37	; 0x25
    1bb0:	9e a1       	ldd	r25, Y+38	; 0x26
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	3f ef       	ldi	r19, 0xFF	; 255
    1bb6:	4f e7       	ldi	r20, 0x7F	; 127
    1bb8:	57 e4       	ldi	r21, 0x47	; 71
    1bba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bbe:	18 16       	cp	r1, r24
    1bc0:	4c f5       	brge	.+82     	; 0x1c14 <Stepper_Rotate+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc2:	6f a1       	ldd	r22, Y+39	; 0x27
    1bc4:	78 a5       	ldd	r23, Y+40	; 0x28
    1bc6:	89 a5       	ldd	r24, Y+41	; 0x29
    1bc8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	40 e2       	ldi	r20, 0x20	; 32
    1bd0:	51 e4       	ldi	r21, 0x41	; 65
    1bd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	bc 01       	movw	r22, r24
    1bdc:	cd 01       	movw	r24, r26
    1bde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	9a a3       	std	Y+34, r25	; 0x22
    1be8:	89 a3       	std	Y+33, r24	; 0x21
    1bea:	0f c0       	rjmp	.+30     	; 0x1c0a <Stepper_Rotate+0x24a>
    1bec:	80 e9       	ldi	r24, 0x90	; 144
    1bee:	91 e0       	ldi	r25, 0x01	; 1
    1bf0:	98 a3       	std	Y+32, r25	; 0x20
    1bf2:	8f 8f       	std	Y+31, r24	; 0x1f
    1bf4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bf6:	98 a1       	ldd	r25, Y+32	; 0x20
    1bf8:	01 97       	sbiw	r24, 0x01	; 1
    1bfa:	f1 f7       	brne	.-4      	; 0x1bf8 <Stepper_Rotate+0x238>
    1bfc:	98 a3       	std	Y+32, r25	; 0x20
    1bfe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c00:	89 a1       	ldd	r24, Y+33	; 0x21
    1c02:	9a a1       	ldd	r25, Y+34	; 0x22
    1c04:	01 97       	sbiw	r24, 0x01	; 1
    1c06:	9a a3       	std	Y+34, r25	; 0x22
    1c08:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c0e:	00 97       	sbiw	r24, 0x00	; 0
    1c10:	69 f7       	brne	.-38     	; 0x1bec <Stepper_Rotate+0x22c>
    1c12:	14 c0       	rjmp	.+40     	; 0x1c3c <Stepper_Rotate+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c14:	6b a1       	ldd	r22, Y+35	; 0x23
    1c16:	7c a1       	ldd	r23, Y+36	; 0x24
    1c18:	8d a1       	ldd	r24, Y+37	; 0x25
    1c1a:	9e a1       	ldd	r25, Y+38	; 0x26
    1c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	9a a3       	std	Y+34, r25	; 0x22
    1c26:	89 a3       	std	Y+33, r24	; 0x21
    1c28:	89 a1       	ldd	r24, Y+33	; 0x21
    1c2a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c2c:	9e 8f       	std	Y+30, r25	; 0x1e
    1c2e:	8d 8f       	std	Y+29, r24	; 0x1d
    1c30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c32:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c34:	01 97       	sbiw	r24, 0x01	; 1
    1c36:	f1 f7       	brne	.-4      	; 0x1c34 <Stepper_Rotate+0x274>
    1c38:	9e 8f       	std	Y+30, r25	; 0x1e
    1c3a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(20);
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S1, LOW);
    1c3c:	82 e0       	ldi	r24, 0x02	; 2
    1c3e:	60 e0       	ldi	r22, 0x00	; 0
    1c40:	40 e0       	ldi	r20, 0x00	; 0
    1c42:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S2, LOW);
    1c46:	82 e0       	ldi	r24, 0x02	; 2
    1c48:	65 e0       	ldi	r22, 0x05	; 5
    1c4a:	40 e0       	ldi	r20, 0x00	; 0
    1c4c:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S3, HIGH);
    1c50:	82 e0       	ldi	r24, 0x02	; 2
    1c52:	66 e0       	ldi	r22, 0x06	; 6
    1c54:	41 e0       	ldi	r20, 0x01	; 1
    1c56:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S4, LOW);
    1c5a:	82 e0       	ldi	r24, 0x02	; 2
    1c5c:	67 e0       	ldi	r22, 0x07	; 7
    1c5e:	40 e0       	ldi	r20, 0x00	; 0
    1c60:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	a0 ea       	ldi	r26, 0xA0	; 160
    1c6a:	b1 e4       	ldi	r27, 0x41	; 65
    1c6c:	89 8f       	std	Y+25, r24	; 0x19
    1c6e:	9a 8f       	std	Y+26, r25	; 0x1a
    1c70:	ab 8f       	std	Y+27, r26	; 0x1b
    1c72:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c74:	69 8d       	ldd	r22, Y+25	; 0x19
    1c76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	4a e7       	ldi	r20, 0x7A	; 122
    1c82:	55 e4       	ldi	r21, 0x45	; 69
    1c84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	8d 8b       	std	Y+21, r24	; 0x15
    1c8e:	9e 8b       	std	Y+22, r25	; 0x16
    1c90:	af 8b       	std	Y+23, r26	; 0x17
    1c92:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c94:	6d 89       	ldd	r22, Y+21	; 0x15
    1c96:	7e 89       	ldd	r23, Y+22	; 0x16
    1c98:	8f 89       	ldd	r24, Y+23	; 0x17
    1c9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	40 e8       	ldi	r20, 0x80	; 128
    1ca2:	5f e3       	ldi	r21, 0x3F	; 63
    1ca4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ca8:	88 23       	and	r24, r24
    1caa:	2c f4       	brge	.+10     	; 0x1cb6 <Stepper_Rotate+0x2f6>
		__ticks = 1;
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	9c 8b       	std	Y+20, r25	; 0x14
    1cb2:	8b 8b       	std	Y+19, r24	; 0x13
    1cb4:	3f c0       	rjmp	.+126    	; 0x1d34 <Stepper_Rotate+0x374>
	else if (__tmp > 65535)
    1cb6:	6d 89       	ldd	r22, Y+21	; 0x15
    1cb8:	7e 89       	ldd	r23, Y+22	; 0x16
    1cba:	8f 89       	ldd	r24, Y+23	; 0x17
    1cbc:	98 8d       	ldd	r25, Y+24	; 0x18
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	3f ef       	ldi	r19, 0xFF	; 255
    1cc2:	4f e7       	ldi	r20, 0x7F	; 127
    1cc4:	57 e4       	ldi	r21, 0x47	; 71
    1cc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cca:	18 16       	cp	r1, r24
    1ccc:	4c f5       	brge	.+82     	; 0x1d20 <Stepper_Rotate+0x360>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cce:	69 8d       	ldd	r22, Y+25	; 0x19
    1cd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	40 e2       	ldi	r20, 0x20	; 32
    1cdc:	51 e4       	ldi	r21, 0x41	; 65
    1cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	bc 01       	movw	r22, r24
    1ce8:	cd 01       	movw	r24, r26
    1cea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	9c 8b       	std	Y+20, r25	; 0x14
    1cf4:	8b 8b       	std	Y+19, r24	; 0x13
    1cf6:	0f c0       	rjmp	.+30     	; 0x1d16 <Stepper_Rotate+0x356>
    1cf8:	80 e9       	ldi	r24, 0x90	; 144
    1cfa:	91 e0       	ldi	r25, 0x01	; 1
    1cfc:	9a 8b       	std	Y+18, r25	; 0x12
    1cfe:	89 8b       	std	Y+17, r24	; 0x11
    1d00:	89 89       	ldd	r24, Y+17	; 0x11
    1d02:	9a 89       	ldd	r25, Y+18	; 0x12
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	f1 f7       	brne	.-4      	; 0x1d04 <Stepper_Rotate+0x344>
    1d08:	9a 8b       	std	Y+18, r25	; 0x12
    1d0a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d0e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d10:	01 97       	sbiw	r24, 0x01	; 1
    1d12:	9c 8b       	std	Y+20, r25	; 0x14
    1d14:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d16:	8b 89       	ldd	r24, Y+19	; 0x13
    1d18:	9c 89       	ldd	r25, Y+20	; 0x14
    1d1a:	00 97       	sbiw	r24, 0x00	; 0
    1d1c:	69 f7       	brne	.-38     	; 0x1cf8 <Stepper_Rotate+0x338>
    1d1e:	14 c0       	rjmp	.+40     	; 0x1d48 <Stepper_Rotate+0x388>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d20:	6d 89       	ldd	r22, Y+21	; 0x15
    1d22:	7e 89       	ldd	r23, Y+22	; 0x16
    1d24:	8f 89       	ldd	r24, Y+23	; 0x17
    1d26:	98 8d       	ldd	r25, Y+24	; 0x18
    1d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	9c 8b       	std	Y+20, r25	; 0x14
    1d32:	8b 8b       	std	Y+19, r24	; 0x13
    1d34:	8b 89       	ldd	r24, Y+19	; 0x13
    1d36:	9c 89       	ldd	r25, Y+20	; 0x14
    1d38:	98 8b       	std	Y+16, r25	; 0x10
    1d3a:	8f 87       	std	Y+15, r24	; 0x0f
    1d3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d3e:	98 89       	ldd	r25, Y+16	; 0x10
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	f1 f7       	brne	.-4      	; 0x1d40 <Stepper_Rotate+0x380>
    1d44:	98 8b       	std	Y+16, r25	; 0x10
    1d46:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(20);
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S1, LOW);
    1d48:	82 e0       	ldi	r24, 0x02	; 2
    1d4a:	60 e0       	ldi	r22, 0x00	; 0
    1d4c:	40 e0       	ldi	r20, 0x00	; 0
    1d4e:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S2, LOW);
    1d52:	82 e0       	ldi	r24, 0x02	; 2
    1d54:	65 e0       	ldi	r22, 0x05	; 5
    1d56:	40 e0       	ldi	r20, 0x00	; 0
    1d58:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S3, LOW);
    1d5c:	82 e0       	ldi	r24, 0x02	; 2
    1d5e:	66 e0       	ldi	r22, 0x06	; 6
    1d60:	40 e0       	ldi	r20, 0x00	; 0
    1d62:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S4, HIGH);
    1d66:	82 e0       	ldi	r24, 0x02	; 2
    1d68:	67 e0       	ldi	r22, 0x07	; 7
    1d6a:	41 e0       	ldi	r20, 0x01	; 1
    1d6c:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	a0 ea       	ldi	r26, 0xA0	; 160
    1d76:	b1 e4       	ldi	r27, 0x41	; 65
    1d78:	8b 87       	std	Y+11, r24	; 0x0b
    1d7a:	9c 87       	std	Y+12, r25	; 0x0c
    1d7c:	ad 87       	std	Y+13, r26	; 0x0d
    1d7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	4a e7       	ldi	r20, 0x7A	; 122
    1d8e:	55 e4       	ldi	r21, 0x45	; 69
    1d90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	8f 83       	std	Y+7, r24	; 0x07
    1d9a:	98 87       	std	Y+8, r25	; 0x08
    1d9c:	a9 87       	std	Y+9, r26	; 0x09
    1d9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1da0:	6f 81       	ldd	r22, Y+7	; 0x07
    1da2:	78 85       	ldd	r23, Y+8	; 0x08
    1da4:	89 85       	ldd	r24, Y+9	; 0x09
    1da6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	40 e8       	ldi	r20, 0x80	; 128
    1dae:	5f e3       	ldi	r21, 0x3F	; 63
    1db0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1db4:	88 23       	and	r24, r24
    1db6:	2c f4       	brge	.+10     	; 0x1dc2 <Stepper_Rotate+0x402>
		__ticks = 1;
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	9e 83       	std	Y+6, r25	; 0x06
    1dbe:	8d 83       	std	Y+5, r24	; 0x05
    1dc0:	3f c0       	rjmp	.+126    	; 0x1e40 <Stepper_Rotate+0x480>
	else if (__tmp > 65535)
    1dc2:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc4:	78 85       	ldd	r23, Y+8	; 0x08
    1dc6:	89 85       	ldd	r24, Y+9	; 0x09
    1dc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	3f ef       	ldi	r19, 0xFF	; 255
    1dce:	4f e7       	ldi	r20, 0x7F	; 127
    1dd0:	57 e4       	ldi	r21, 0x47	; 71
    1dd2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dd6:	18 16       	cp	r1, r24
    1dd8:	4c f5       	brge	.+82     	; 0x1e2c <Stepper_Rotate+0x46c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dda:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ddc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dde:	8d 85       	ldd	r24, Y+13	; 0x0d
    1de0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	40 e2       	ldi	r20, 0x20	; 32
    1de8:	51 e4       	ldi	r21, 0x41	; 65
    1dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	bc 01       	movw	r22, r24
    1df4:	cd 01       	movw	r24, r26
    1df6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	9e 83       	std	Y+6, r25	; 0x06
    1e00:	8d 83       	std	Y+5, r24	; 0x05
    1e02:	0f c0       	rjmp	.+30     	; 0x1e22 <Stepper_Rotate+0x462>
    1e04:	80 e9       	ldi	r24, 0x90	; 144
    1e06:	91 e0       	ldi	r25, 0x01	; 1
    1e08:	9c 83       	std	Y+4, r25	; 0x04
    1e0a:	8b 83       	std	Y+3, r24	; 0x03
    1e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	f1 f7       	brne	.-4      	; 0x1e10 <Stepper_Rotate+0x450>
    1e14:	9c 83       	std	Y+4, r25	; 0x04
    1e16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e18:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	9e 83       	std	Y+6, r25	; 0x06
    1e20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e22:	8d 81       	ldd	r24, Y+5	; 0x05
    1e24:	9e 81       	ldd	r25, Y+6	; 0x06
    1e26:	00 97       	sbiw	r24, 0x00	; 0
    1e28:	69 f7       	brne	.-38     	; 0x1e04 <Stepper_Rotate+0x444>
    1e2a:	14 c0       	rjmp	.+40     	; 0x1e54 <Stepper_Rotate+0x494>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e2e:	78 85       	ldd	r23, Y+8	; 0x08
    1e30:	89 85       	ldd	r24, Y+9	; 0x09
    1e32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	9e 83       	std	Y+6, r25	; 0x06
    1e3e:	8d 83       	std	Y+5, r24	; 0x05
    1e40:	8d 81       	ldd	r24, Y+5	; 0x05
    1e42:	9e 81       	ldd	r25, Y+6	; 0x06
    1e44:	9a 83       	std	Y+2, r25	; 0x02
    1e46:	89 83       	std	Y+1, r24	; 0x01
    1e48:	89 81       	ldd	r24, Y+1	; 0x01
    1e4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	f1 f7       	brne	.-4      	; 0x1e4c <Stepper_Rotate+0x48c>
    1e50:	9a 83       	std	Y+2, r25	; 0x02
    1e52:	89 83       	std	Y+1, r24	; 0x01
{
	u16 stepsNum = (degree * 2048UL)/360;
	u16 IterationsNum = stepsNum/4;

	u16 i=0;
	for(i=0;i<IterationsNum;i++)
    1e54:	89 ad       	ldd	r24, Y+57	; 0x39
    1e56:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e58:	01 96       	adiw	r24, 0x01	; 1
    1e5a:	9a af       	std	Y+58, r25	; 0x3a
    1e5c:	89 af       	std	Y+57, r24	; 0x39
    1e5e:	29 ad       	ldd	r18, Y+57	; 0x39
    1e60:	3a ad       	ldd	r19, Y+58	; 0x3a
    1e62:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e64:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e66:	28 17       	cp	r18, r24
    1e68:	39 07       	cpc	r19, r25
    1e6a:	08 f4       	brcc	.+2      	; 0x1e6e <Stepper_Rotate+0x4ae>
    1e6c:	db cd       	rjmp	.-1098   	; 0x1a24 <Stepper_Rotate+0x64>
		_delay_ms(20);
	}



}
    1e6e:	ef 96       	adiw	r28, 0x3f	; 63
    1e70:	0f b6       	in	r0, 0x3f	; 63
    1e72:	f8 94       	cli
    1e74:	de bf       	out	0x3e, r29	; 62
    1e76:	0f be       	out	0x3f, r0	; 63
    1e78:	cd bf       	out	0x3d, r28	; 61
    1e7a:	cf 91       	pop	r28
    1e7c:	df 91       	pop	r29
    1e7e:	08 95       	ret

00001e80 <LCD_ES_tTrigger_Enable>:
//ProtoType of static is defined in source file itself(Private declaration)
static ES_t LCD_ES_tTrigger_Enable(void);
static ES_t LCD_ES_tSet_Cursor_Pos(u8 row,u8 column);

//We make it static cuz we won't use it anywhere but here
static ES_t LCD_ES_tTrigger_Enable(void){
    1e80:	df 93       	push	r29
    1e82:	cf 93       	push	r28
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
    1e88:	e0 97       	sbiw	r28, 0x30	; 48
    1e8a:	0f b6       	in	r0, 0x3f	; 63
    1e8c:	f8 94       	cli
    1e8e:	de bf       	out	0x3e, r29	; 62
    1e90:	0f be       	out	0x3f, r0	; 63
    1e92:	cd bf       	out	0x3d, r28	; 61
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, HIGH);
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	62 e0       	ldi	r22, 0x02	; 2
    1e98:	41 e0       	ldi	r20, 0x01	; 1
    1e9a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	a0 e2       	ldi	r26, 0x20	; 32
    1ea4:	b1 e4       	ldi	r27, 0x41	; 65
    1ea6:	8d a7       	std	Y+45, r24	; 0x2d
    1ea8:	9e a7       	std	Y+46, r25	; 0x2e
    1eaa:	af a7       	std	Y+47, r26	; 0x2f
    1eac:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1eae:	6d a5       	ldd	r22, Y+45	; 0x2d
    1eb0:	7e a5       	ldd	r23, Y+46	; 0x2e
    1eb2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eb4:	98 a9       	ldd	r25, Y+48	; 0x30
    1eb6:	2b ea       	ldi	r18, 0xAB	; 171
    1eb8:	3a ea       	ldi	r19, 0xAA	; 170
    1eba:	4a ea       	ldi	r20, 0xAA	; 170
    1ebc:	50 e4       	ldi	r21, 0x40	; 64
    1ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	89 a7       	std	Y+41, r24	; 0x29
    1ec8:	9a a7       	std	Y+42, r25	; 0x2a
    1eca:	ab a7       	std	Y+43, r26	; 0x2b
    1ecc:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1ece:	69 a5       	ldd	r22, Y+41	; 0x29
    1ed0:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ed2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ed4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	40 e8       	ldi	r20, 0x80	; 128
    1edc:	5f e3       	ldi	r21, 0x3F	; 63
    1ede:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ee2:	88 23       	and	r24, r24
    1ee4:	1c f4       	brge	.+6      	; 0x1eec <LCD_ES_tTrigger_Enable+0x6c>
		__ticks = 1;
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	88 a7       	std	Y+40, r24	; 0x28
    1eea:	91 c0       	rjmp	.+290    	; 0x200e <LCD_ES_tTrigger_Enable+0x18e>
	else if (__tmp > 255)
    1eec:	69 a5       	ldd	r22, Y+41	; 0x29
    1eee:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ef0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ef2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	4f e7       	ldi	r20, 0x7F	; 127
    1efa:	53 e4       	ldi	r21, 0x43	; 67
    1efc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f00:	18 16       	cp	r1, r24
    1f02:	0c f0       	brlt	.+2      	; 0x1f06 <LCD_ES_tTrigger_Enable+0x86>
    1f04:	7b c0       	rjmp	.+246    	; 0x1ffc <LCD_ES_tTrigger_Enable+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1f06:	6d a5       	ldd	r22, Y+45	; 0x2d
    1f08:	7e a5       	ldd	r23, Y+46	; 0x2e
    1f0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f0c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	4a e7       	ldi	r20, 0x7A	; 122
    1f14:	54 e4       	ldi	r21, 0x44	; 68
    1f16:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	8c a3       	std	Y+36, r24	; 0x24
    1f20:	9d a3       	std	Y+37, r25	; 0x25
    1f22:	ae a3       	std	Y+38, r26	; 0x26
    1f24:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f26:	6c a1       	ldd	r22, Y+36	; 0x24
    1f28:	7d a1       	ldd	r23, Y+37	; 0x25
    1f2a:	8e a1       	ldd	r24, Y+38	; 0x26
    1f2c:	9f a1       	ldd	r25, Y+39	; 0x27
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	4a e7       	ldi	r20, 0x7A	; 122
    1f34:	55 e4       	ldi	r21, 0x45	; 69
    1f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	88 a3       	std	Y+32, r24	; 0x20
    1f40:	99 a3       	std	Y+33, r25	; 0x21
    1f42:	aa a3       	std	Y+34, r26	; 0x22
    1f44:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1f46:	68 a1       	ldd	r22, Y+32	; 0x20
    1f48:	79 a1       	ldd	r23, Y+33	; 0x21
    1f4a:	8a a1       	ldd	r24, Y+34	; 0x22
    1f4c:	9b a1       	ldd	r25, Y+35	; 0x23
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	40 e8       	ldi	r20, 0x80	; 128
    1f54:	5f e3       	ldi	r21, 0x3F	; 63
    1f56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f5a:	88 23       	and	r24, r24
    1f5c:	2c f4       	brge	.+10     	; 0x1f68 <LCD_ES_tTrigger_Enable+0xe8>
		__ticks = 1;
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	9f 8f       	std	Y+31, r25	; 0x1f
    1f64:	8e 8f       	std	Y+30, r24	; 0x1e
    1f66:	3f c0       	rjmp	.+126    	; 0x1fe6 <LCD_ES_tTrigger_Enable+0x166>
	else if (__tmp > 65535)
    1f68:	68 a1       	ldd	r22, Y+32	; 0x20
    1f6a:	79 a1       	ldd	r23, Y+33	; 0x21
    1f6c:	8a a1       	ldd	r24, Y+34	; 0x22
    1f6e:	9b a1       	ldd	r25, Y+35	; 0x23
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	3f ef       	ldi	r19, 0xFF	; 255
    1f74:	4f e7       	ldi	r20, 0x7F	; 127
    1f76:	57 e4       	ldi	r21, 0x47	; 71
    1f78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f7c:	18 16       	cp	r1, r24
    1f7e:	4c f5       	brge	.+82     	; 0x1fd2 <LCD_ES_tTrigger_Enable+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f80:	6c a1       	ldd	r22, Y+36	; 0x24
    1f82:	7d a1       	ldd	r23, Y+37	; 0x25
    1f84:	8e a1       	ldd	r24, Y+38	; 0x26
    1f86:	9f a1       	ldd	r25, Y+39	; 0x27
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	40 e2       	ldi	r20, 0x20	; 32
    1f8e:	51 e4       	ldi	r21, 0x41	; 65
    1f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	bc 01       	movw	r22, r24
    1f9a:	cd 01       	movw	r24, r26
    1f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	9f 8f       	std	Y+31, r25	; 0x1f
    1fa6:	8e 8f       	std	Y+30, r24	; 0x1e
    1fa8:	0f c0       	rjmp	.+30     	; 0x1fc8 <LCD_ES_tTrigger_Enable+0x148>
    1faa:	80 e9       	ldi	r24, 0x90	; 144
    1fac:	91 e0       	ldi	r25, 0x01	; 1
    1fae:	9d 8f       	std	Y+29, r25	; 0x1d
    1fb0:	8c 8f       	std	Y+28, r24	; 0x1c
    1fb2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1fb4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1fb6:	01 97       	sbiw	r24, 0x01	; 1
    1fb8:	f1 f7       	brne	.-4      	; 0x1fb6 <LCD_ES_tTrigger_Enable+0x136>
    1fba:	9d 8f       	std	Y+29, r25	; 0x1d
    1fbc:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fbe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fc0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	9f 8f       	std	Y+31, r25	; 0x1f
    1fc6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fca:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fcc:	00 97       	sbiw	r24, 0x00	; 0
    1fce:	69 f7       	brne	.-38     	; 0x1faa <LCD_ES_tTrigger_Enable+0x12a>
    1fd0:	24 c0       	rjmp	.+72     	; 0x201a <LCD_ES_tTrigger_Enable+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd2:	68 a1       	ldd	r22, Y+32	; 0x20
    1fd4:	79 a1       	ldd	r23, Y+33	; 0x21
    1fd6:	8a a1       	ldd	r24, Y+34	; 0x22
    1fd8:	9b a1       	ldd	r25, Y+35	; 0x23
    1fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	9f 8f       	std	Y+31, r25	; 0x1f
    1fe4:	8e 8f       	std	Y+30, r24	; 0x1e
    1fe6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fe8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fea:	9b 8f       	std	Y+27, r25	; 0x1b
    1fec:	8a 8f       	std	Y+26, r24	; 0x1a
    1fee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ff0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1ff2:	01 97       	sbiw	r24, 0x01	; 1
    1ff4:	f1 f7       	brne	.-4      	; 0x1ff2 <LCD_ES_tTrigger_Enable+0x172>
    1ff6:	9b 8f       	std	Y+27, r25	; 0x1b
    1ff8:	8a 8f       	std	Y+26, r24	; 0x1a
    1ffa:	0f c0       	rjmp	.+30     	; 0x201a <LCD_ES_tTrigger_Enable+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ffc:	69 a5       	ldd	r22, Y+41	; 0x29
    1ffe:	7a a5       	ldd	r23, Y+42	; 0x2a
    2000:	8b a5       	ldd	r24, Y+43	; 0x2b
    2002:	9c a5       	ldd	r25, Y+44	; 0x2c
    2004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	88 a7       	std	Y+40, r24	; 0x28
    200e:	88 a5       	ldd	r24, Y+40	; 0x28
    2010:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2012:	89 8d       	ldd	r24, Y+25	; 0x19
    2014:	8a 95       	dec	r24
    2016:	f1 f7       	brne	.-4      	; 0x2014 <LCD_ES_tTrigger_Enable+0x194>
    2018:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, LOW);
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	62 e0       	ldi	r22, 0x02	; 2
    201e:	40 e0       	ldi	r20, 0x00	; 0
    2020:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	aa ef       	ldi	r26, 0xFA	; 250
    202a:	b4 e4       	ldi	r27, 0x44	; 68
    202c:	8d 8b       	std	Y+21, r24	; 0x15
    202e:	9e 8b       	std	Y+22, r25	; 0x16
    2030:	af 8b       	std	Y+23, r26	; 0x17
    2032:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2034:	6d 89       	ldd	r22, Y+21	; 0x15
    2036:	7e 89       	ldd	r23, Y+22	; 0x16
    2038:	8f 89       	ldd	r24, Y+23	; 0x17
    203a:	98 8d       	ldd	r25, Y+24	; 0x18
    203c:	2b ea       	ldi	r18, 0xAB	; 171
    203e:	3a ea       	ldi	r19, 0xAA	; 170
    2040:	4a ea       	ldi	r20, 0xAA	; 170
    2042:	50 e4       	ldi	r21, 0x40	; 64
    2044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	89 8b       	std	Y+17, r24	; 0x11
    204e:	9a 8b       	std	Y+18, r25	; 0x12
    2050:	ab 8b       	std	Y+19, r26	; 0x13
    2052:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2054:	69 89       	ldd	r22, Y+17	; 0x11
    2056:	7a 89       	ldd	r23, Y+18	; 0x12
    2058:	8b 89       	ldd	r24, Y+19	; 0x13
    205a:	9c 89       	ldd	r25, Y+20	; 0x14
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e8       	ldi	r20, 0x80	; 128
    2062:	5f e3       	ldi	r21, 0x3F	; 63
    2064:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2068:	88 23       	and	r24, r24
    206a:	1c f4       	brge	.+6      	; 0x2072 <LCD_ES_tTrigger_Enable+0x1f2>
		__ticks = 1;
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	88 8b       	std	Y+16, r24	; 0x10
    2070:	91 c0       	rjmp	.+290    	; 0x2194 <LCD_ES_tTrigger_Enable+0x314>
	else if (__tmp > 255)
    2072:	69 89       	ldd	r22, Y+17	; 0x11
    2074:	7a 89       	ldd	r23, Y+18	; 0x12
    2076:	8b 89       	ldd	r24, Y+19	; 0x13
    2078:	9c 89       	ldd	r25, Y+20	; 0x14
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	4f e7       	ldi	r20, 0x7F	; 127
    2080:	53 e4       	ldi	r21, 0x43	; 67
    2082:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2086:	18 16       	cp	r1, r24
    2088:	0c f0       	brlt	.+2      	; 0x208c <LCD_ES_tTrigger_Enable+0x20c>
    208a:	7b c0       	rjmp	.+246    	; 0x2182 <LCD_ES_tTrigger_Enable+0x302>
	{
		_delay_ms(__us / 1000.0);
    208c:	6d 89       	ldd	r22, Y+21	; 0x15
    208e:	7e 89       	ldd	r23, Y+22	; 0x16
    2090:	8f 89       	ldd	r24, Y+23	; 0x17
    2092:	98 8d       	ldd	r25, Y+24	; 0x18
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	4a e7       	ldi	r20, 0x7A	; 122
    209a:	54 e4       	ldi	r21, 0x44	; 68
    209c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	8c 87       	std	Y+12, r24	; 0x0c
    20a6:	9d 87       	std	Y+13, r25	; 0x0d
    20a8:	ae 87       	std	Y+14, r26	; 0x0e
    20aa:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ac:	6c 85       	ldd	r22, Y+12	; 0x0c
    20ae:	7d 85       	ldd	r23, Y+13	; 0x0d
    20b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    20b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	4a e7       	ldi	r20, 0x7A	; 122
    20ba:	55 e4       	ldi	r21, 0x45	; 69
    20bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	88 87       	std	Y+8, r24	; 0x08
    20c6:	99 87       	std	Y+9, r25	; 0x09
    20c8:	aa 87       	std	Y+10, r26	; 0x0a
    20ca:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    20cc:	68 85       	ldd	r22, Y+8	; 0x08
    20ce:	79 85       	ldd	r23, Y+9	; 0x09
    20d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    20d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	40 e8       	ldi	r20, 0x80	; 128
    20da:	5f e3       	ldi	r21, 0x3F	; 63
    20dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20e0:	88 23       	and	r24, r24
    20e2:	2c f4       	brge	.+10     	; 0x20ee <LCD_ES_tTrigger_Enable+0x26e>
		__ticks = 1;
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	9f 83       	std	Y+7, r25	; 0x07
    20ea:	8e 83       	std	Y+6, r24	; 0x06
    20ec:	3f c0       	rjmp	.+126    	; 0x216c <LCD_ES_tTrigger_Enable+0x2ec>
	else if (__tmp > 65535)
    20ee:	68 85       	ldd	r22, Y+8	; 0x08
    20f0:	79 85       	ldd	r23, Y+9	; 0x09
    20f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    20f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	3f ef       	ldi	r19, 0xFF	; 255
    20fa:	4f e7       	ldi	r20, 0x7F	; 127
    20fc:	57 e4       	ldi	r21, 0x47	; 71
    20fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2102:	18 16       	cp	r1, r24
    2104:	4c f5       	brge	.+82     	; 0x2158 <LCD_ES_tTrigger_Enable+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2106:	6c 85       	ldd	r22, Y+12	; 0x0c
    2108:	7d 85       	ldd	r23, Y+13	; 0x0d
    210a:	8e 85       	ldd	r24, Y+14	; 0x0e
    210c:	9f 85       	ldd	r25, Y+15	; 0x0f
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	40 e2       	ldi	r20, 0x20	; 32
    2114:	51 e4       	ldi	r21, 0x41	; 65
    2116:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	bc 01       	movw	r22, r24
    2120:	cd 01       	movw	r24, r26
    2122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	9f 83       	std	Y+7, r25	; 0x07
    212c:	8e 83       	std	Y+6, r24	; 0x06
    212e:	0f c0       	rjmp	.+30     	; 0x214e <LCD_ES_tTrigger_Enable+0x2ce>
    2130:	80 e9       	ldi	r24, 0x90	; 144
    2132:	91 e0       	ldi	r25, 0x01	; 1
    2134:	9d 83       	std	Y+5, r25	; 0x05
    2136:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2138:	8c 81       	ldd	r24, Y+4	; 0x04
    213a:	9d 81       	ldd	r25, Y+5	; 0x05
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	f1 f7       	brne	.-4      	; 0x213c <LCD_ES_tTrigger_Enable+0x2bc>
    2140:	9d 83       	std	Y+5, r25	; 0x05
    2142:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2144:	8e 81       	ldd	r24, Y+6	; 0x06
    2146:	9f 81       	ldd	r25, Y+7	; 0x07
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	9f 83       	std	Y+7, r25	; 0x07
    214c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    214e:	8e 81       	ldd	r24, Y+6	; 0x06
    2150:	9f 81       	ldd	r25, Y+7	; 0x07
    2152:	00 97       	sbiw	r24, 0x00	; 0
    2154:	69 f7       	brne	.-38     	; 0x2130 <LCD_ES_tTrigger_Enable+0x2b0>
    2156:	24 c0       	rjmp	.+72     	; 0x21a0 <LCD_ES_tTrigger_Enable+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2158:	68 85       	ldd	r22, Y+8	; 0x08
    215a:	79 85       	ldd	r23, Y+9	; 0x09
    215c:	8a 85       	ldd	r24, Y+10	; 0x0a
    215e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	9f 83       	std	Y+7, r25	; 0x07
    216a:	8e 83       	std	Y+6, r24	; 0x06
    216c:	8e 81       	ldd	r24, Y+6	; 0x06
    216e:	9f 81       	ldd	r25, Y+7	; 0x07
    2170:	9b 83       	std	Y+3, r25	; 0x03
    2172:	8a 83       	std	Y+2, r24	; 0x02
    2174:	8a 81       	ldd	r24, Y+2	; 0x02
    2176:	9b 81       	ldd	r25, Y+3	; 0x03
    2178:	01 97       	sbiw	r24, 0x01	; 1
    217a:	f1 f7       	brne	.-4      	; 0x2178 <LCD_ES_tTrigger_Enable+0x2f8>
    217c:	9b 83       	std	Y+3, r25	; 0x03
    217e:	8a 83       	std	Y+2, r24	; 0x02
    2180:	0f c0       	rjmp	.+30     	; 0x21a0 <LCD_ES_tTrigger_Enable+0x320>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2182:	69 89       	ldd	r22, Y+17	; 0x11
    2184:	7a 89       	ldd	r23, Y+18	; 0x12
    2186:	8b 89       	ldd	r24, Y+19	; 0x13
    2188:	9c 89       	ldd	r25, Y+20	; 0x14
    218a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    218e:	dc 01       	movw	r26, r24
    2190:	cb 01       	movw	r24, r22
    2192:	88 8b       	std	Y+16, r24	; 0x10
    2194:	88 89       	ldd	r24, Y+16	; 0x10
    2196:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	8a 95       	dec	r24
    219c:	f1 f7       	brne	.-4      	; 0x219a <LCD_ES_tTrigger_Enable+0x31a>
    219e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2000);
	return ES_OK;
    21a0:	80 e0       	ldi	r24, 0x00	; 0
}
    21a2:	e0 96       	adiw	r28, 0x30	; 48
    21a4:	0f b6       	in	r0, 0x3f	; 63
    21a6:	f8 94       	cli
    21a8:	de bf       	out	0x3e, r29	; 62
    21aa:	0f be       	out	0x3f, r0	; 63
    21ac:	cd bf       	out	0x3d, r28	; 61
    21ae:	cf 91       	pop	r28
    21b0:	df 91       	pop	r29
    21b2:	08 95       	ret

000021b4 <Lcd_ES_tInit>:


ES_t Lcd_ES_tInit(){
    21b4:	df 93       	push	r29
    21b6:	cf 93       	push	r28
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
#if LCD_MODE == FOUR_BIT_MODE
	Lcd_ES_tsendCmd(Four_BitMode);   /* Go into 4-bit operating mode*/
    21bc:	82 e0       	ldi	r24, 0x02	; 2
    21be:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(D4_D7);  /* 2 Line, 5*7 matrix in 4-bit mode */
    21c2:	88 e2       	ldi	r24, 0x28	; 40
    21c4:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
    21c8:	8e e0       	ldi	r24, 0x0E	; 14
    21ca:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
    21ce:	86 e0       	ldi	r24, 0x06	; 6
    21d0:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <Lcd_ES_tsendCmd>
	return ES_OK;
    21da:	80 e0       	ldi	r24, 0x00	; 0
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
	return ES_OK;
#endif
}
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	08 95       	ret

000021e2 <lcd_ES_tclear>:
 *
 *	Ex. 0x28 0b 0010 1000  //Read bit by bit and see if it is low or high
 */

ES_t lcd_ES_tclear()
{
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62
    21ea:	2e 97       	sbiw	r28, 0x0e	; 14
    21ec:	0f b6       	in	r0, 0x3f	; 63
    21ee:	f8 94       	cli
    21f0:	de bf       	out	0x3e, r29	; 62
    21f2:	0f be       	out	0x3f, r0	; 63
    21f4:	cd bf       	out	0x3d, r28	; 61
	Lcd_ES_tsendCmd(CLR_Display);
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <Lcd_ES_tsendCmd>
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	a0 e0       	ldi	r26, 0x00	; 0
    2202:	b0 e4       	ldi	r27, 0x40	; 64
    2204:	8b 87       	std	Y+11, r24	; 0x0b
    2206:	9c 87       	std	Y+12, r25	; 0x0c
    2208:	ad 87       	std	Y+13, r26	; 0x0d
    220a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    220c:	6b 85       	ldd	r22, Y+11	; 0x0b
    220e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2210:	8d 85       	ldd	r24, Y+13	; 0x0d
    2212:	9e 85       	ldd	r25, Y+14	; 0x0e
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	4a e7       	ldi	r20, 0x7A	; 122
    221a:	55 e4       	ldi	r21, 0x45	; 69
    221c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	8f 83       	std	Y+7, r24	; 0x07
    2226:	98 87       	std	Y+8, r25	; 0x08
    2228:	a9 87       	std	Y+9, r26	; 0x09
    222a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    222c:	6f 81       	ldd	r22, Y+7	; 0x07
    222e:	78 85       	ldd	r23, Y+8	; 0x08
    2230:	89 85       	ldd	r24, Y+9	; 0x09
    2232:	9a 85       	ldd	r25, Y+10	; 0x0a
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	40 e8       	ldi	r20, 0x80	; 128
    223a:	5f e3       	ldi	r21, 0x3F	; 63
    223c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2240:	88 23       	and	r24, r24
    2242:	2c f4       	brge	.+10     	; 0x224e <lcd_ES_tclear+0x6c>
		__ticks = 1;
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	9e 83       	std	Y+6, r25	; 0x06
    224a:	8d 83       	std	Y+5, r24	; 0x05
    224c:	3f c0       	rjmp	.+126    	; 0x22cc <lcd_ES_tclear+0xea>
	else if (__tmp > 65535)
    224e:	6f 81       	ldd	r22, Y+7	; 0x07
    2250:	78 85       	ldd	r23, Y+8	; 0x08
    2252:	89 85       	ldd	r24, Y+9	; 0x09
    2254:	9a 85       	ldd	r25, Y+10	; 0x0a
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	3f ef       	ldi	r19, 0xFF	; 255
    225a:	4f e7       	ldi	r20, 0x7F	; 127
    225c:	57 e4       	ldi	r21, 0x47	; 71
    225e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2262:	18 16       	cp	r1, r24
    2264:	4c f5       	brge	.+82     	; 0x22b8 <lcd_ES_tclear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2266:	6b 85       	ldd	r22, Y+11	; 0x0b
    2268:	7c 85       	ldd	r23, Y+12	; 0x0c
    226a:	8d 85       	ldd	r24, Y+13	; 0x0d
    226c:	9e 85       	ldd	r25, Y+14	; 0x0e
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	40 e2       	ldi	r20, 0x20	; 32
    2274:	51 e4       	ldi	r21, 0x41	; 65
    2276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	bc 01       	movw	r22, r24
    2280:	cd 01       	movw	r24, r26
    2282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2286:	dc 01       	movw	r26, r24
    2288:	cb 01       	movw	r24, r22
    228a:	9e 83       	std	Y+6, r25	; 0x06
    228c:	8d 83       	std	Y+5, r24	; 0x05
    228e:	0f c0       	rjmp	.+30     	; 0x22ae <lcd_ES_tclear+0xcc>
    2290:	80 e9       	ldi	r24, 0x90	; 144
    2292:	91 e0       	ldi	r25, 0x01	; 1
    2294:	9c 83       	std	Y+4, r25	; 0x04
    2296:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2298:	8b 81       	ldd	r24, Y+3	; 0x03
    229a:	9c 81       	ldd	r25, Y+4	; 0x04
    229c:	01 97       	sbiw	r24, 0x01	; 1
    229e:	f1 f7       	brne	.-4      	; 0x229c <lcd_ES_tclear+0xba>
    22a0:	9c 83       	std	Y+4, r25	; 0x04
    22a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a4:	8d 81       	ldd	r24, Y+5	; 0x05
    22a6:	9e 81       	ldd	r25, Y+6	; 0x06
    22a8:	01 97       	sbiw	r24, 0x01	; 1
    22aa:	9e 83       	std	Y+6, r25	; 0x06
    22ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ae:	8d 81       	ldd	r24, Y+5	; 0x05
    22b0:	9e 81       	ldd	r25, Y+6	; 0x06
    22b2:	00 97       	sbiw	r24, 0x00	; 0
    22b4:	69 f7       	brne	.-38     	; 0x2290 <lcd_ES_tclear+0xae>
    22b6:	14 c0       	rjmp	.+40     	; 0x22e0 <lcd_ES_tclear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b8:	6f 81       	ldd	r22, Y+7	; 0x07
    22ba:	78 85       	ldd	r23, Y+8	; 0x08
    22bc:	89 85       	ldd	r24, Y+9	; 0x09
    22be:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c4:	dc 01       	movw	r26, r24
    22c6:	cb 01       	movw	r24, r22
    22c8:	9e 83       	std	Y+6, r25	; 0x06
    22ca:	8d 83       	std	Y+5, r24	; 0x05
    22cc:	8d 81       	ldd	r24, Y+5	; 0x05
    22ce:	9e 81       	ldd	r25, Y+6	; 0x06
    22d0:	9a 83       	std	Y+2, r25	; 0x02
    22d2:	89 83       	std	Y+1, r24	; 0x01
    22d4:	89 81       	ldd	r24, Y+1	; 0x01
    22d6:	9a 81       	ldd	r25, Y+2	; 0x02
    22d8:	01 97       	sbiw	r24, 0x01	; 1
    22da:	f1 f7       	brne	.-4      	; 0x22d8 <lcd_ES_tclear+0xf6>
    22dc:	9a 83       	std	Y+2, r25	; 0x02
    22de:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	return ES_OK;
    22e0:	80 e0       	ldi	r24, 0x00	; 0
}
    22e2:	2e 96       	adiw	r28, 0x0e	; 14
    22e4:	0f b6       	in	r0, 0x3f	; 63
    22e6:	f8 94       	cli
    22e8:	de bf       	out	0x3e, r29	; 62
    22ea:	0f be       	out	0x3f, r0	; 63
    22ec:	cd bf       	out	0x3d, r28	; 61
    22ee:	cf 91       	pop	r28
    22f0:	df 91       	pop	r29
    22f2:	08 95       	ret

000022f4 <Lcd_ES_tsendCmd>:

ES_t Lcd_ES_tsendCmd(u8 cmd){
    22f4:	df 93       	push	r29
    22f6:	cf 93       	push	r28
    22f8:	0f 92       	push	r0
    22fa:	cd b7       	in	r28, 0x3d	; 61
    22fc:	de b7       	in	r29, 0x3e	; 62
    22fe:	89 83       	std	Y+1, r24	; 0x01
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, LOW);
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	61 e0       	ldi	r22, 0x01	; 1
    2304:	40 e0       	ldi	r20, 0x00	; 0
    2306:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	60 e0       	ldi	r22, 0x00	; 0
    230e:	40 e0       	ldi	r20, 0x00	; 0
    2310:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	// DIO_ES_tGetPinValue, DIO_ES_tSetPinValue
	// if(GET_BIT(cmd,7)){Dio_Write(D7,HIGH);}else{Dio_write(D7,LOW);}
	// We use ternary operator instead
#if LCD_MODE == FOUR_BIT_MODE
	(GET_BIT(cmd,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    2314:	89 81       	ldd	r24, Y+1	; 0x01
    2316:	88 23       	and	r24, r24
    2318:	34 f4       	brge	.+12     	; 0x2326 <Lcd_ES_tsendCmd+0x32>
    231a:	80 e0       	ldi	r24, 0x00	; 0
    231c:	66 e0       	ldi	r22, 0x06	; 6
    231e:	41 e0       	ldi	r20, 0x01	; 1
    2320:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    2324:	05 c0       	rjmp	.+10     	; 0x2330 <Lcd_ES_tsendCmd+0x3c>
    2326:	80 e0       	ldi	r24, 0x00	; 0
    2328:	66 e0       	ldi	r22, 0x06	; 6
    232a:	40 e0       	ldi	r20, 0x00	; 0
    232c:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	82 95       	swap	r24
    2334:	86 95       	lsr	r24
    2336:	86 95       	lsr	r24
    2338:	83 70       	andi	r24, 0x03	; 3
    233a:	88 2f       	mov	r24, r24
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	81 70       	andi	r24, 0x01	; 1
    2340:	90 70       	andi	r25, 0x00	; 0
    2342:	88 23       	and	r24, r24
    2344:	31 f0       	breq	.+12     	; 0x2352 <Lcd_ES_tsendCmd+0x5e>
    2346:	80 e0       	ldi	r24, 0x00	; 0
    2348:	65 e0       	ldi	r22, 0x05	; 5
    234a:	41 e0       	ldi	r20, 0x01	; 1
    234c:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    2350:	05 c0       	rjmp	.+10     	; 0x235c <Lcd_ES_tsendCmd+0x68>
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	65 e0       	ldi	r22, 0x05	; 5
    2356:	40 e0       	ldi	r20, 0x00	; 0
    2358:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    235c:	89 81       	ldd	r24, Y+1	; 0x01
    235e:	82 95       	swap	r24
    2360:	86 95       	lsr	r24
    2362:	87 70       	andi	r24, 0x07	; 7
    2364:	88 2f       	mov	r24, r24
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	81 70       	andi	r24, 0x01	; 1
    236a:	90 70       	andi	r25, 0x00	; 0
    236c:	88 23       	and	r24, r24
    236e:	31 f0       	breq	.+12     	; 0x237c <Lcd_ES_tsendCmd+0x88>
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	64 e0       	ldi	r22, 0x04	; 4
    2374:	41 e0       	ldi	r20, 0x01	; 1
    2376:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    237a:	05 c0       	rjmp	.+10     	; 0x2386 <Lcd_ES_tsendCmd+0x92>
    237c:	80 e0       	ldi	r24, 0x00	; 0
    237e:	64 e0       	ldi	r22, 0x04	; 4
    2380:	40 e0       	ldi	r20, 0x00	; 0
    2382:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    2386:	89 81       	ldd	r24, Y+1	; 0x01
    2388:	82 95       	swap	r24
    238a:	8f 70       	andi	r24, 0x0F	; 15
    238c:	88 2f       	mov	r24, r24
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	81 70       	andi	r24, 0x01	; 1
    2392:	90 70       	andi	r25, 0x00	; 0
    2394:	88 23       	and	r24, r24
    2396:	31 f0       	breq	.+12     	; 0x23a4 <Lcd_ES_tsendCmd+0xb0>
    2398:	80 e0       	ldi	r24, 0x00	; 0
    239a:	63 e0       	ldi	r22, 0x03	; 3
    239c:	41 e0       	ldi	r20, 0x01	; 1
    239e:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    23a2:	05 c0       	rjmp	.+10     	; 0x23ae <Lcd_ES_tsendCmd+0xba>
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	63 e0       	ldi	r22, 0x03	; 3
    23a8:	40 e0       	ldi	r20, 0x00	; 0
    23aa:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    23ae:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <LCD_ES_tTrigger_Enable>
	(GET_BIT(cmd,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    23b2:	89 81       	ldd	r24, Y+1	; 0x01
    23b4:	86 95       	lsr	r24
    23b6:	86 95       	lsr	r24
    23b8:	86 95       	lsr	r24
    23ba:	88 2f       	mov	r24, r24
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	81 70       	andi	r24, 0x01	; 1
    23c0:	90 70       	andi	r25, 0x00	; 0
    23c2:	88 23       	and	r24, r24
    23c4:	31 f0       	breq	.+12     	; 0x23d2 <Lcd_ES_tsendCmd+0xde>
    23c6:	80 e0       	ldi	r24, 0x00	; 0
    23c8:	66 e0       	ldi	r22, 0x06	; 6
    23ca:	41 e0       	ldi	r20, 0x01	; 1
    23cc:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    23d0:	05 c0       	rjmp	.+10     	; 0x23dc <Lcd_ES_tsendCmd+0xe8>
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	66 e0       	ldi	r22, 0x06	; 6
    23d6:	40 e0       	ldi	r20, 0x00	; 0
    23d8:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    23dc:	89 81       	ldd	r24, Y+1	; 0x01
    23de:	86 95       	lsr	r24
    23e0:	86 95       	lsr	r24
    23e2:	88 2f       	mov	r24, r24
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	81 70       	andi	r24, 0x01	; 1
    23e8:	90 70       	andi	r25, 0x00	; 0
    23ea:	88 23       	and	r24, r24
    23ec:	31 f0       	breq	.+12     	; 0x23fa <Lcd_ES_tsendCmd+0x106>
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	65 e0       	ldi	r22, 0x05	; 5
    23f2:	41 e0       	ldi	r20, 0x01	; 1
    23f4:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    23f8:	05 c0       	rjmp	.+10     	; 0x2404 <Lcd_ES_tsendCmd+0x110>
    23fa:	80 e0       	ldi	r24, 0x00	; 0
    23fc:	65 e0       	ldi	r22, 0x05	; 5
    23fe:	40 e0       	ldi	r20, 0x00	; 0
    2400:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    2404:	89 81       	ldd	r24, Y+1	; 0x01
    2406:	86 95       	lsr	r24
    2408:	88 2f       	mov	r24, r24
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	81 70       	andi	r24, 0x01	; 1
    240e:	90 70       	andi	r25, 0x00	; 0
    2410:	88 23       	and	r24, r24
    2412:	31 f0       	breq	.+12     	; 0x2420 <Lcd_ES_tsendCmd+0x12c>
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	64 e0       	ldi	r22, 0x04	; 4
    2418:	41 e0       	ldi	r20, 0x01	; 1
    241a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    241e:	05 c0       	rjmp	.+10     	; 0x242a <Lcd_ES_tsendCmd+0x136>
    2420:	80 e0       	ldi	r24, 0x00	; 0
    2422:	64 e0       	ldi	r22, 0x04	; 4
    2424:	40 e0       	ldi	r20, 0x00	; 0
    2426:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	88 2f       	mov	r24, r24
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	81 70       	andi	r24, 0x01	; 1
    2432:	90 70       	andi	r25, 0x00	; 0
    2434:	88 23       	and	r24, r24
    2436:	31 f0       	breq	.+12     	; 0x2444 <Lcd_ES_tsendCmd+0x150>
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	63 e0       	ldi	r22, 0x03	; 3
    243c:	41 e0       	ldi	r20, 0x01	; 1
    243e:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    2442:	05 c0       	rjmp	.+10     	; 0x244e <Lcd_ES_tsendCmd+0x15a>
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	63 e0       	ldi	r22, 0x03	; 3
    2448:	40 e0       	ldi	r20, 0x00	; 0
    244a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    244e:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <LCD_ES_tTrigger_Enable>
	return ES_OK;
    2452:	80 e0       	ldi	r24, 0x00	; 0
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D0,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D0,LOW);
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif
}
    2454:	0f 90       	pop	r0
    2456:	cf 91       	pop	r28
    2458:	df 91       	pop	r29
    245a:	08 95       	ret

0000245c <Lcd_ES_tsendChar>:
ES_t Lcd_ES_tsendChar(u8 data){
    245c:	df 93       	push	r29
    245e:	cf 93       	push	r28
    2460:	0f 92       	push	r0
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
    2466:	89 83       	std	Y+1, r24	; 0x01
#if LCD_MODE == FOUR_BIT_MODE
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	61 e0       	ldi	r22, 0x01	; 1
    246c:	41 e0       	ldi	r20, 0x01	; 1
    246e:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	60 e0       	ldi	r22, 0x00	; 0
    2476:	40 e0       	ldi	r20, 0x00	; 0
    2478:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	(GET_BIT(data,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    247c:	89 81       	ldd	r24, Y+1	; 0x01
    247e:	88 23       	and	r24, r24
    2480:	34 f4       	brge	.+12     	; 0x248e <Lcd_ES_tsendChar+0x32>
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	66 e0       	ldi	r22, 0x06	; 6
    2486:	41 e0       	ldi	r20, 0x01	; 1
    2488:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    248c:	05 c0       	rjmp	.+10     	; 0x2498 <Lcd_ES_tsendChar+0x3c>
    248e:	80 e0       	ldi	r24, 0x00	; 0
    2490:	66 e0       	ldi	r22, 0x06	; 6
    2492:	40 e0       	ldi	r20, 0x00	; 0
    2494:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	(GET_BIT(data,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    2498:	89 81       	ldd	r24, Y+1	; 0x01
    249a:	82 95       	swap	r24
    249c:	86 95       	lsr	r24
    249e:	86 95       	lsr	r24
    24a0:	83 70       	andi	r24, 0x03	; 3
    24a2:	88 2f       	mov	r24, r24
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	81 70       	andi	r24, 0x01	; 1
    24a8:	90 70       	andi	r25, 0x00	; 0
    24aa:	88 23       	and	r24, r24
    24ac:	31 f0       	breq	.+12     	; 0x24ba <Lcd_ES_tsendChar+0x5e>
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	65 e0       	ldi	r22, 0x05	; 5
    24b2:	41 e0       	ldi	r20, 0x01	; 1
    24b4:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    24b8:	05 c0       	rjmp	.+10     	; 0x24c4 <Lcd_ES_tsendChar+0x68>
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	65 e0       	ldi	r22, 0x05	; 5
    24be:	40 e0       	ldi	r20, 0x00	; 0
    24c0:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	(GET_BIT(data,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    24c4:	89 81       	ldd	r24, Y+1	; 0x01
    24c6:	82 95       	swap	r24
    24c8:	86 95       	lsr	r24
    24ca:	87 70       	andi	r24, 0x07	; 7
    24cc:	88 2f       	mov	r24, r24
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	81 70       	andi	r24, 0x01	; 1
    24d2:	90 70       	andi	r25, 0x00	; 0
    24d4:	88 23       	and	r24, r24
    24d6:	31 f0       	breq	.+12     	; 0x24e4 <Lcd_ES_tsendChar+0x88>
    24d8:	80 e0       	ldi	r24, 0x00	; 0
    24da:	64 e0       	ldi	r22, 0x04	; 4
    24dc:	41 e0       	ldi	r20, 0x01	; 1
    24de:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    24e2:	05 c0       	rjmp	.+10     	; 0x24ee <Lcd_ES_tsendChar+0x92>
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	64 e0       	ldi	r22, 0x04	; 4
    24e8:	40 e0       	ldi	r20, 0x00	; 0
    24ea:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	(GET_BIT(data,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    24ee:	89 81       	ldd	r24, Y+1	; 0x01
    24f0:	82 95       	swap	r24
    24f2:	8f 70       	andi	r24, 0x0F	; 15
    24f4:	88 2f       	mov	r24, r24
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	81 70       	andi	r24, 0x01	; 1
    24fa:	90 70       	andi	r25, 0x00	; 0
    24fc:	88 23       	and	r24, r24
    24fe:	31 f0       	breq	.+12     	; 0x250c <Lcd_ES_tsendChar+0xb0>
    2500:	80 e0       	ldi	r24, 0x00	; 0
    2502:	63 e0       	ldi	r22, 0x03	; 3
    2504:	41 e0       	ldi	r20, 0x01	; 1
    2506:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    250a:	05 c0       	rjmp	.+10     	; 0x2516 <Lcd_ES_tsendChar+0xba>
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	63 e0       	ldi	r22, 0x03	; 3
    2510:	40 e0       	ldi	r20, 0x00	; 0
    2512:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    2516:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <LCD_ES_tTrigger_Enable>
	(GET_BIT(data,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    251a:	89 81       	ldd	r24, Y+1	; 0x01
    251c:	86 95       	lsr	r24
    251e:	86 95       	lsr	r24
    2520:	86 95       	lsr	r24
    2522:	88 2f       	mov	r24, r24
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	81 70       	andi	r24, 0x01	; 1
    2528:	90 70       	andi	r25, 0x00	; 0
    252a:	88 23       	and	r24, r24
    252c:	31 f0       	breq	.+12     	; 0x253a <Lcd_ES_tsendChar+0xde>
    252e:	80 e0       	ldi	r24, 0x00	; 0
    2530:	66 e0       	ldi	r22, 0x06	; 6
    2532:	41 e0       	ldi	r20, 0x01	; 1
    2534:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    2538:	05 c0       	rjmp	.+10     	; 0x2544 <Lcd_ES_tsendChar+0xe8>
    253a:	80 e0       	ldi	r24, 0x00	; 0
    253c:	66 e0       	ldi	r22, 0x06	; 6
    253e:	40 e0       	ldi	r20, 0x00	; 0
    2540:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	(GET_BIT(data,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    2544:	89 81       	ldd	r24, Y+1	; 0x01
    2546:	86 95       	lsr	r24
    2548:	86 95       	lsr	r24
    254a:	88 2f       	mov	r24, r24
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	81 70       	andi	r24, 0x01	; 1
    2550:	90 70       	andi	r25, 0x00	; 0
    2552:	88 23       	and	r24, r24
    2554:	31 f0       	breq	.+12     	; 0x2562 <Lcd_ES_tsendChar+0x106>
    2556:	80 e0       	ldi	r24, 0x00	; 0
    2558:	65 e0       	ldi	r22, 0x05	; 5
    255a:	41 e0       	ldi	r20, 0x01	; 1
    255c:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    2560:	05 c0       	rjmp	.+10     	; 0x256c <Lcd_ES_tsendChar+0x110>
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	65 e0       	ldi	r22, 0x05	; 5
    2566:	40 e0       	ldi	r20, 0x00	; 0
    2568:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	(GET_BIT(data,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    256c:	89 81       	ldd	r24, Y+1	; 0x01
    256e:	86 95       	lsr	r24
    2570:	88 2f       	mov	r24, r24
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	81 70       	andi	r24, 0x01	; 1
    2576:	90 70       	andi	r25, 0x00	; 0
    2578:	88 23       	and	r24, r24
    257a:	31 f0       	breq	.+12     	; 0x2588 <Lcd_ES_tsendChar+0x12c>
    257c:	80 e0       	ldi	r24, 0x00	; 0
    257e:	64 e0       	ldi	r22, 0x04	; 4
    2580:	41 e0       	ldi	r20, 0x01	; 1
    2582:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    2586:	05 c0       	rjmp	.+10     	; 0x2592 <Lcd_ES_tsendChar+0x136>
    2588:	80 e0       	ldi	r24, 0x00	; 0
    258a:	64 e0       	ldi	r22, 0x04	; 4
    258c:	40 e0       	ldi	r20, 0x00	; 0
    258e:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	(GET_BIT(data,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    2592:	89 81       	ldd	r24, Y+1	; 0x01
    2594:	88 2f       	mov	r24, r24
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	81 70       	andi	r24, 0x01	; 1
    259a:	90 70       	andi	r25, 0x00	; 0
    259c:	88 23       	and	r24, r24
    259e:	31 f0       	breq	.+12     	; 0x25ac <Lcd_ES_tsendChar+0x150>
    25a0:	80 e0       	ldi	r24, 0x00	; 0
    25a2:	63 e0       	ldi	r22, 0x03	; 3
    25a4:	41 e0       	ldi	r20, 0x01	; 1
    25a6:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    25aa:	05 c0       	rjmp	.+10     	; 0x25b6 <Lcd_ES_tsendChar+0x15a>
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	63 e0       	ldi	r22, 0x03	; 3
    25b0:	40 e0       	ldi	r20, 0x00	; 0
    25b2:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    25b6:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <LCD_ES_tTrigger_Enable>
	return ES_OK;
    25ba:	80 e0       	ldi	r24, 0x00	; 0
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif

}
    25bc:	0f 90       	pop	r0
    25be:	cf 91       	pop	r28
    25c0:	df 91       	pop	r29
    25c2:	08 95       	ret

000025c4 <Lcd_ES_tsendString>:

ES_t Lcd_ES_tsendString(char *data)
{
    25c4:	df 93       	push	r29
    25c6:	cf 93       	push	r28
    25c8:	00 d0       	rcall	.+0      	; 0x25ca <Lcd_ES_tsendString+0x6>
    25ca:	0f 92       	push	r0
    25cc:	cd b7       	in	r28, 0x3d	; 61
    25ce:	de b7       	in	r29, 0x3e	; 62
    25d0:	9b 83       	std	Y+3, r25	; 0x03
    25d2:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	61 e0       	ldi	r22, 0x01	; 1
    25d8:	41 e0       	ldi	r20, 0x01	; 1
    25da:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	60 e0       	ldi	r22, 0x00	; 0
    25e2:	40 e0       	ldi	r20, 0x00	; 0
    25e4:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>

	unsigned char i=0;
    25e8:	19 82       	std	Y+1, r1	; 0x01
    25ea:	0e c0       	rjmp	.+28     	; 0x2608 <Lcd_ES_tsendString+0x44>
	while(data[i]!=0)
	{
		Lcd_ES_tsendChar(data[i]);
    25ec:	89 81       	ldd	r24, Y+1	; 0x01
    25ee:	28 2f       	mov	r18, r24
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	8a 81       	ldd	r24, Y+2	; 0x02
    25f4:	9b 81       	ldd	r25, Y+3	; 0x03
    25f6:	fc 01       	movw	r30, r24
    25f8:	e2 0f       	add	r30, r18
    25fa:	f3 1f       	adc	r31, r19
    25fc:	80 81       	ld	r24, Z
    25fe:	0e 94 2e 12 	call	0x245c	; 0x245c <Lcd_ES_tsendChar>
		i++;
    2602:	89 81       	ldd	r24, Y+1	; 0x01
    2604:	8f 5f       	subi	r24, 0xFF	; 255
    2606:	89 83       	std	Y+1, r24	; 0x01
{
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);

	unsigned char i=0;
	while(data[i]!=0)
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	28 2f       	mov	r18, r24
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	8a 81       	ldd	r24, Y+2	; 0x02
    2610:	9b 81       	ldd	r25, Y+3	; 0x03
    2612:	fc 01       	movw	r30, r24
    2614:	e2 0f       	add	r30, r18
    2616:	f3 1f       	adc	r31, r19
    2618:	80 81       	ld	r24, Z
    261a:	88 23       	and	r24, r24
    261c:	39 f7       	brne	.-50     	; 0x25ec <Lcd_ES_tsendString+0x28>
	{
		Lcd_ES_tsendChar(data[i]);
		i++;
	}
	return ES_OK;
    261e:	80 e0       	ldi	r24, 0x00	; 0
}
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	cf 91       	pop	r28
    2628:	df 91       	pop	r29
    262a:	08 95       	ret

0000262c <Lcd_ES_tsendString_xy>:

ES_t Lcd_ES_tsendString_xy(char *data,u8 row,u8 col){
    262c:	df 93       	push	r29
    262e:	cf 93       	push	r28
    2630:	00 d0       	rcall	.+0      	; 0x2632 <Lcd_ES_tsendString_xy+0x6>
    2632:	00 d0       	rcall	.+0      	; 0x2634 <Lcd_ES_tsendString_xy+0x8>
    2634:	cd b7       	in	r28, 0x3d	; 61
    2636:	de b7       	in	r29, 0x3e	; 62
    2638:	9a 83       	std	Y+2, r25	; 0x02
    263a:	89 83       	std	Y+1, r24	; 0x01
    263c:	6b 83       	std	Y+3, r22	; 0x03
    263e:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	61 e0       	ldi	r22, 0x01	; 1
    2644:	41 e0       	ldi	r20, 0x01	; 1
    2646:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	60 e0       	ldi	r22, 0x00	; 0
    264e:	40 e0       	ldi	r20, 0x00	; 0
    2650:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>

	LCD_ES_tSet_Cursor_Pos(row,col);
    2654:	8b 81       	ldd	r24, Y+3	; 0x03
    2656:	6c 81       	ldd	r22, Y+4	; 0x04
    2658:	0e 94 01 16 	call	0x2c02	; 0x2c02 <LCD_ES_tSet_Cursor_Pos>
	Lcd_ES_tsendString(data);
    265c:	89 81       	ldd	r24, Y+1	; 0x01
    265e:	9a 81       	ldd	r25, Y+2	; 0x02
    2660:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <Lcd_ES_tsendString>
	return ES_OK;
    2664:	80 e0       	ldi	r24, 0x00	; 0

}
    2666:	0f 90       	pop	r0
    2668:	0f 90       	pop	r0
    266a:	0f 90       	pop	r0
    266c:	0f 90       	pop	r0
    266e:	cf 91       	pop	r28
    2670:	df 91       	pop	r29
    2672:	08 95       	ret

00002674 <Lcd_ES_tdisplayNum>:


//A function to display Numbers instead of characters
ES_t Lcd_ES_tdisplayNum(u16 num)
{
    2674:	df 93       	push	r29
    2676:	cf 93       	push	r28
    2678:	cd b7       	in	r28, 0x3d	; 61
    267a:	de b7       	in	r29, 0x3e	; 62
    267c:	2e 97       	sbiw	r28, 0x0e	; 14
    267e:	0f b6       	in	r0, 0x3f	; 63
    2680:	f8 94       	cli
    2682:	de bf       	out	0x3e, r29	; 62
    2684:	0f be       	out	0x3f, r0	; 63
    2686:	cd bf       	out	0x3d, r28	; 61
    2688:	9e 87       	std	Y+14, r25	; 0x0e
    268a:	8d 87       	std	Y+13, r24	; 0x0d
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	61 e0       	ldi	r22, 0x01	; 1
    2690:	41 e0       	ldi	r20, 0x01	; 1
    2692:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	60 e0       	ldi	r22, 0x00	; 0
    269a:	40 e0       	ldi	r20, 0x00	; 0
    269c:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>

	uint8_t ch[10],i=0,j=0;
    26a0:	1a 82       	std	Y+2, r1	; 0x02
    26a2:	19 82       	std	Y+1, r1	; 0x01
	if(num == 0)
    26a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    26a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    26a8:	00 97       	sbiw	r24, 0x00	; 0
    26aa:	11 f5       	brne	.+68     	; 0x26f0 <Lcd_ES_tdisplayNum+0x7c>
	{
		Lcd_ES_tsendChar('0');
    26ac:	80 e3       	ldi	r24, 0x30	; 48
    26ae:	0e 94 2e 12 	call	0x245c	; 0x245c <Lcd_ES_tsendChar>
    26b2:	39 c0       	rjmp	.+114    	; 0x2726 <Lcd_ES_tdisplayNum+0xb2>
	}
	else
	{
		while(num)
		{
			ch[i] = num % 10 + '0';  //To convert int to char
    26b4:	8a 81       	ldd	r24, Y+2	; 0x02
    26b6:	e8 2f       	mov	r30, r24
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    26bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    26be:	2a e0       	ldi	r18, 0x0A	; 10
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	b9 01       	movw	r22, r18
    26c4:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodhi4>
    26c8:	28 2f       	mov	r18, r24
    26ca:	20 5d       	subi	r18, 0xD0	; 208
    26cc:	ce 01       	movw	r24, r28
    26ce:	03 96       	adiw	r24, 0x03	; 3
    26d0:	e8 0f       	add	r30, r24
    26d2:	f9 1f       	adc	r31, r25
    26d4:	20 83       	st	Z, r18
			num /= 10;
    26d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    26d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    26da:	2a e0       	ldi	r18, 0x0A	; 10
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	b9 01       	movw	r22, r18
    26e0:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__udivmodhi4>
    26e4:	cb 01       	movw	r24, r22
    26e6:	9e 87       	std	Y+14, r25	; 0x0e
    26e8:	8d 87       	std	Y+13, r24	; 0x0d
			i++;
    26ea:	8a 81       	ldd	r24, Y+2	; 0x02
    26ec:	8f 5f       	subi	r24, 0xFF	; 255
    26ee:	8a 83       	std	Y+2, r24	; 0x02
	{
		Lcd_ES_tsendChar('0');
	}
	else
	{
		while(num)
    26f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    26f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f4:	00 97       	sbiw	r24, 0x00	; 0
    26f6:	f1 f6       	brne	.-68     	; 0x26b4 <Lcd_ES_tdisplayNum+0x40>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    26f8:	8a 81       	ldd	r24, Y+2	; 0x02
    26fa:	89 83       	std	Y+1, r24	; 0x01
    26fc:	11 c0       	rjmp	.+34     	; 0x2720 <Lcd_ES_tdisplayNum+0xac>
		{
			Lcd_ES_tsendChar(ch[j-1]);
    26fe:	89 81       	ldd	r24, Y+1	; 0x01
    2700:	88 2f       	mov	r24, r24
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	9c 01       	movw	r18, r24
    2706:	21 50       	subi	r18, 0x01	; 1
    2708:	30 40       	sbci	r19, 0x00	; 0
    270a:	ce 01       	movw	r24, r28
    270c:	03 96       	adiw	r24, 0x03	; 3
    270e:	fc 01       	movw	r30, r24
    2710:	e2 0f       	add	r30, r18
    2712:	f3 1f       	adc	r31, r19
    2714:	80 81       	ld	r24, Z
    2716:	0e 94 2e 12 	call	0x245c	; 0x245c <Lcd_ES_tsendChar>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    271a:	89 81       	ldd	r24, Y+1	; 0x01
    271c:	81 50       	subi	r24, 0x01	; 1
    271e:	89 83       	std	Y+1, r24	; 0x01
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	88 23       	and	r24, r24
    2724:	61 f7       	brne	.-40     	; 0x26fe <Lcd_ES_tdisplayNum+0x8a>
		{
			Lcd_ES_tsendChar(ch[j-1]);
		}
	}
	return ES_OK;
    2726:	80 e0       	ldi	r24, 0x00	; 0
}
    2728:	2e 96       	adiw	r28, 0x0e	; 14
    272a:	0f b6       	in	r0, 0x3f	; 63
    272c:	f8 94       	cli
    272e:	de bf       	out	0x3e, r29	; 62
    2730:	0f be       	out	0x3f, r0	; 63
    2732:	cd bf       	out	0x3d, r28	; 61
    2734:	cf 91       	pop	r28
    2736:	df 91       	pop	r29
    2738:	08 95       	ret

0000273a <Lcd_ES_tdisplayNum_xy>:

ES_t Lcd_ES_tdisplayNum_xy(u16 num,u8 row,u8 col){
    273a:	df 93       	push	r29
    273c:	cf 93       	push	r28
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
    2742:	a3 97       	sbiw	r28, 0x23	; 35
    2744:	0f b6       	in	r0, 0x3f	; 63
    2746:	f8 94       	cli
    2748:	de bf       	out	0x3e, r29	; 62
    274a:	0f be       	out	0x3f, r0	; 63
    274c:	cd bf       	out	0x3d, r28	; 61
    274e:	98 a3       	std	Y+32, r25	; 0x20
    2750:	8f 8f       	std	Y+31, r24	; 0x1f
    2752:	69 a3       	std	Y+33, r22	; 0x21
    2754:	4a a3       	std	Y+34, r20	; 0x22

	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	61 e0       	ldi	r22, 0x01	; 1
    275a:	41 e0       	ldi	r20, 0x01	; 1
    275c:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	60 e0       	ldi	r22, 0x00	; 0
    2764:	40 e0       	ldi	r20, 0x00	; 0
    2766:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>


	if(row == 1){
    276a:	89 a1       	ldd	r24, Y+33	; 0x21
    276c:	81 30       	cpi	r24, 0x01	; 1
    276e:	09 f0       	breq	.+2      	; 0x2772 <Lcd_ES_tdisplayNum_xy+0x38>
    2770:	76 c0       	rjmp	.+236    	; 0x285e <Lcd_ES_tdisplayNum_xy+0x124>
		Lcd_ES_tsendCmd(Force1stline);
    2772:	80 e8       	ldi	r24, 0x80	; 128
    2774:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <Lcd_ES_tsendCmd>
    2778:	80 e0       	ldi	r24, 0x00	; 0
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	a0 e8       	ldi	r26, 0x80	; 128
    277e:	bf e3       	ldi	r27, 0x3F	; 63
    2780:	89 8f       	std	Y+25, r24	; 0x19
    2782:	9a 8f       	std	Y+26, r25	; 0x1a
    2784:	ab 8f       	std	Y+27, r26	; 0x1b
    2786:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2788:	69 8d       	ldd	r22, Y+25	; 0x19
    278a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    278c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    278e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	4a e7       	ldi	r20, 0x7A	; 122
    2796:	55 e4       	ldi	r21, 0x45	; 69
    2798:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	8d 8b       	std	Y+21, r24	; 0x15
    27a2:	9e 8b       	std	Y+22, r25	; 0x16
    27a4:	af 8b       	std	Y+23, r26	; 0x17
    27a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27a8:	6d 89       	ldd	r22, Y+21	; 0x15
    27aa:	7e 89       	ldd	r23, Y+22	; 0x16
    27ac:	8f 89       	ldd	r24, Y+23	; 0x17
    27ae:	98 8d       	ldd	r25, Y+24	; 0x18
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	40 e8       	ldi	r20, 0x80	; 128
    27b6:	5f e3       	ldi	r21, 0x3F	; 63
    27b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27bc:	88 23       	and	r24, r24
    27be:	2c f4       	brge	.+10     	; 0x27ca <Lcd_ES_tdisplayNum_xy+0x90>
		__ticks = 1;
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	9c 8b       	std	Y+20, r25	; 0x14
    27c6:	8b 8b       	std	Y+19, r24	; 0x13
    27c8:	3f c0       	rjmp	.+126    	; 0x2848 <Lcd_ES_tdisplayNum_xy+0x10e>
	else if (__tmp > 65535)
    27ca:	6d 89       	ldd	r22, Y+21	; 0x15
    27cc:	7e 89       	ldd	r23, Y+22	; 0x16
    27ce:	8f 89       	ldd	r24, Y+23	; 0x17
    27d0:	98 8d       	ldd	r25, Y+24	; 0x18
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	3f ef       	ldi	r19, 0xFF	; 255
    27d6:	4f e7       	ldi	r20, 0x7F	; 127
    27d8:	57 e4       	ldi	r21, 0x47	; 71
    27da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27de:	18 16       	cp	r1, r24
    27e0:	4c f5       	brge	.+82     	; 0x2834 <Lcd_ES_tdisplayNum_xy+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e2:	69 8d       	ldd	r22, Y+25	; 0x19
    27e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	40 e2       	ldi	r20, 0x20	; 32
    27f0:	51 e4       	ldi	r21, 0x41	; 65
    27f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	bc 01       	movw	r22, r24
    27fc:	cd 01       	movw	r24, r26
    27fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	9c 8b       	std	Y+20, r25	; 0x14
    2808:	8b 8b       	std	Y+19, r24	; 0x13
    280a:	0f c0       	rjmp	.+30     	; 0x282a <Lcd_ES_tdisplayNum_xy+0xf0>
    280c:	80 e9       	ldi	r24, 0x90	; 144
    280e:	91 e0       	ldi	r25, 0x01	; 1
    2810:	9a 8b       	std	Y+18, r25	; 0x12
    2812:	89 8b       	std	Y+17, r24	; 0x11
    2814:	89 89       	ldd	r24, Y+17	; 0x11
    2816:	9a 89       	ldd	r25, Y+18	; 0x12
    2818:	01 97       	sbiw	r24, 0x01	; 1
    281a:	f1 f7       	brne	.-4      	; 0x2818 <Lcd_ES_tdisplayNum_xy+0xde>
    281c:	9a 8b       	std	Y+18, r25	; 0x12
    281e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2820:	8b 89       	ldd	r24, Y+19	; 0x13
    2822:	9c 89       	ldd	r25, Y+20	; 0x14
    2824:	01 97       	sbiw	r24, 0x01	; 1
    2826:	9c 8b       	std	Y+20, r25	; 0x14
    2828:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    282a:	8b 89       	ldd	r24, Y+19	; 0x13
    282c:	9c 89       	ldd	r25, Y+20	; 0x14
    282e:	00 97       	sbiw	r24, 0x00	; 0
    2830:	69 f7       	brne	.-38     	; 0x280c <Lcd_ES_tdisplayNum_xy+0xd2>
    2832:	92 c0       	rjmp	.+292    	; 0x2958 <Lcd_ES_tdisplayNum_xy+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2834:	6d 89       	ldd	r22, Y+21	; 0x15
    2836:	7e 89       	ldd	r23, Y+22	; 0x16
    2838:	8f 89       	ldd	r24, Y+23	; 0x17
    283a:	98 8d       	ldd	r25, Y+24	; 0x18
    283c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	9c 8b       	std	Y+20, r25	; 0x14
    2846:	8b 8b       	std	Y+19, r24	; 0x13
    2848:	8b 89       	ldd	r24, Y+19	; 0x13
    284a:	9c 89       	ldd	r25, Y+20	; 0x14
    284c:	98 8b       	std	Y+16, r25	; 0x10
    284e:	8f 87       	std	Y+15, r24	; 0x0f
    2850:	8f 85       	ldd	r24, Y+15	; 0x0f
    2852:	98 89       	ldd	r25, Y+16	; 0x10
    2854:	01 97       	sbiw	r24, 0x01	; 1
    2856:	f1 f7       	brne	.-4      	; 0x2854 <Lcd_ES_tdisplayNum_xy+0x11a>
    2858:	98 8b       	std	Y+16, r25	; 0x10
    285a:	8f 87       	std	Y+15, r24	; 0x0f
    285c:	7d c0       	rjmp	.+250    	; 0x2958 <Lcd_ES_tdisplayNum_xy+0x21e>
		_delay_ms(1);
	}else if(row == 2){
    285e:	89 a1       	ldd	r24, Y+33	; 0x21
    2860:	82 30       	cpi	r24, 0x02	; 2
    2862:	09 f0       	breq	.+2      	; 0x2866 <Lcd_ES_tdisplayNum_xy+0x12c>
    2864:	76 c0       	rjmp	.+236    	; 0x2952 <Lcd_ES_tdisplayNum_xy+0x218>
		Lcd_ES_tsendCmd(Force2ndline);
    2866:	80 ec       	ldi	r24, 0xC0	; 192
    2868:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <Lcd_ES_tsendCmd>
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	a0 e2       	ldi	r26, 0x20	; 32
    2872:	b1 e4       	ldi	r27, 0x41	; 65
    2874:	8b 87       	std	Y+11, r24	; 0x0b
    2876:	9c 87       	std	Y+12, r25	; 0x0c
    2878:	ad 87       	std	Y+13, r26	; 0x0d
    287a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    287c:	6b 85       	ldd	r22, Y+11	; 0x0b
    287e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2880:	8d 85       	ldd	r24, Y+13	; 0x0d
    2882:	9e 85       	ldd	r25, Y+14	; 0x0e
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	4a e7       	ldi	r20, 0x7A	; 122
    288a:	55 e4       	ldi	r21, 0x45	; 69
    288c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	8f 83       	std	Y+7, r24	; 0x07
    2896:	98 87       	std	Y+8, r25	; 0x08
    2898:	a9 87       	std	Y+9, r26	; 0x09
    289a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    289c:	6f 81       	ldd	r22, Y+7	; 0x07
    289e:	78 85       	ldd	r23, Y+8	; 0x08
    28a0:	89 85       	ldd	r24, Y+9	; 0x09
    28a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	40 e8       	ldi	r20, 0x80	; 128
    28aa:	5f e3       	ldi	r21, 0x3F	; 63
    28ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28b0:	88 23       	and	r24, r24
    28b2:	2c f4       	brge	.+10     	; 0x28be <Lcd_ES_tdisplayNum_xy+0x184>
		__ticks = 1;
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	9e 83       	std	Y+6, r25	; 0x06
    28ba:	8d 83       	std	Y+5, r24	; 0x05
    28bc:	3f c0       	rjmp	.+126    	; 0x293c <Lcd_ES_tdisplayNum_xy+0x202>
	else if (__tmp > 65535)
    28be:	6f 81       	ldd	r22, Y+7	; 0x07
    28c0:	78 85       	ldd	r23, Y+8	; 0x08
    28c2:	89 85       	ldd	r24, Y+9	; 0x09
    28c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	3f ef       	ldi	r19, 0xFF	; 255
    28ca:	4f e7       	ldi	r20, 0x7F	; 127
    28cc:	57 e4       	ldi	r21, 0x47	; 71
    28ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28d2:	18 16       	cp	r1, r24
    28d4:	4c f5       	brge	.+82     	; 0x2928 <Lcd_ES_tdisplayNum_xy+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    28d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    28da:	8d 85       	ldd	r24, Y+13	; 0x0d
    28dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    28de:	20 e0       	ldi	r18, 0x00	; 0
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	40 e2       	ldi	r20, 0x20	; 32
    28e4:	51 e4       	ldi	r21, 0x41	; 65
    28e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	bc 01       	movw	r22, r24
    28f0:	cd 01       	movw	r24, r26
    28f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f6:	dc 01       	movw	r26, r24
    28f8:	cb 01       	movw	r24, r22
    28fa:	9e 83       	std	Y+6, r25	; 0x06
    28fc:	8d 83       	std	Y+5, r24	; 0x05
    28fe:	0f c0       	rjmp	.+30     	; 0x291e <Lcd_ES_tdisplayNum_xy+0x1e4>
    2900:	80 e9       	ldi	r24, 0x90	; 144
    2902:	91 e0       	ldi	r25, 0x01	; 1
    2904:	9c 83       	std	Y+4, r25	; 0x04
    2906:	8b 83       	std	Y+3, r24	; 0x03
    2908:	8b 81       	ldd	r24, Y+3	; 0x03
    290a:	9c 81       	ldd	r25, Y+4	; 0x04
    290c:	01 97       	sbiw	r24, 0x01	; 1
    290e:	f1 f7       	brne	.-4      	; 0x290c <Lcd_ES_tdisplayNum_xy+0x1d2>
    2910:	9c 83       	std	Y+4, r25	; 0x04
    2912:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2914:	8d 81       	ldd	r24, Y+5	; 0x05
    2916:	9e 81       	ldd	r25, Y+6	; 0x06
    2918:	01 97       	sbiw	r24, 0x01	; 1
    291a:	9e 83       	std	Y+6, r25	; 0x06
    291c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    291e:	8d 81       	ldd	r24, Y+5	; 0x05
    2920:	9e 81       	ldd	r25, Y+6	; 0x06
    2922:	00 97       	sbiw	r24, 0x00	; 0
    2924:	69 f7       	brne	.-38     	; 0x2900 <Lcd_ES_tdisplayNum_xy+0x1c6>
    2926:	18 c0       	rjmp	.+48     	; 0x2958 <Lcd_ES_tdisplayNum_xy+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2928:	6f 81       	ldd	r22, Y+7	; 0x07
    292a:	78 85       	ldd	r23, Y+8	; 0x08
    292c:	89 85       	ldd	r24, Y+9	; 0x09
    292e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2930:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	9e 83       	std	Y+6, r25	; 0x06
    293a:	8d 83       	std	Y+5, r24	; 0x05
    293c:	8d 81       	ldd	r24, Y+5	; 0x05
    293e:	9e 81       	ldd	r25, Y+6	; 0x06
    2940:	9a 83       	std	Y+2, r25	; 0x02
    2942:	89 83       	std	Y+1, r24	; 0x01
    2944:	89 81       	ldd	r24, Y+1	; 0x01
    2946:	9a 81       	ldd	r25, Y+2	; 0x02
    2948:	01 97       	sbiw	r24, 0x01	; 1
    294a:	f1 f7       	brne	.-4      	; 0x2948 <Lcd_ES_tdisplayNum_xy+0x20e>
    294c:	9a 83       	std	Y+2, r25	; 0x02
    294e:	89 83       	std	Y+1, r24	; 0x01
    2950:	03 c0       	rjmp	.+6      	; 0x2958 <Lcd_ES_tdisplayNum_xy+0x21e>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	8b a3       	std	Y+35, r24	; 0x23
    2956:	1a c0       	rjmp	.+52     	; 0x298c <Lcd_ES_tdisplayNum_xy+0x252>
	}


	for(int j=1;j<=col;j++){
    2958:	81 e0       	ldi	r24, 0x01	; 1
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	9e 8f       	std	Y+30, r25	; 0x1e
    295e:	8d 8f       	std	Y+29, r24	; 0x1d
    2960:	08 c0       	rjmp	.+16     	; 0x2972 <Lcd_ES_tdisplayNum_xy+0x238>
		Lcd_ES_tsendCmd(ShiftRight);
    2962:	8c e1       	ldi	r24, 0x1C	; 28
    2964:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <Lcd_ES_tsendCmd>
	}else{
		return ES_NOT_OK;
	}


	for(int j=1;j<=col;j++){
    2968:	8d 8d       	ldd	r24, Y+29	; 0x1d
    296a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    296c:	01 96       	adiw	r24, 0x01	; 1
    296e:	9e 8f       	std	Y+30, r25	; 0x1e
    2970:	8d 8f       	std	Y+29, r24	; 0x1d
    2972:	8a a1       	ldd	r24, Y+34	; 0x22
    2974:	28 2f       	mov	r18, r24
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	8d 8d       	ldd	r24, Y+29	; 0x1d
    297a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    297c:	28 17       	cp	r18, r24
    297e:	39 07       	cpc	r19, r25
    2980:	84 f7       	brge	.-32     	; 0x2962 <Lcd_ES_tdisplayNum_xy+0x228>
		Lcd_ES_tsendCmd(ShiftRight);
	}

	Lcd_ES_tdisplayNum(num);
    2982:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2984:	98 a1       	ldd	r25, Y+32	; 0x20
    2986:	0e 94 3a 13 	call	0x2674	; 0x2674 <Lcd_ES_tdisplayNum>
	return ES_OK;
    298a:	1b a2       	std	Y+35, r1	; 0x23
    298c:	8b a1       	ldd	r24, Y+35	; 0x23

}
    298e:	a3 96       	adiw	r28, 0x23	; 35
    2990:	0f b6       	in	r0, 0x3f	; 63
    2992:	f8 94       	cli
    2994:	de bf       	out	0x3e, r29	; 62
    2996:	0f be       	out	0x3f, r0	; 63
    2998:	cd bf       	out	0x3d, r28	; 61
    299a:	cf 91       	pop	r28
    299c:	df 91       	pop	r29
    299e:	08 95       	ret

000029a0 <Lcd_ES_tsendChar_xy>:

ES_t Lcd_ES_tsendChar_xy(u8 data,u8 row,u8 col){
    29a0:	df 93       	push	r29
    29a2:	cf 93       	push	r28
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
    29a8:	a2 97       	sbiw	r28, 0x22	; 34
    29aa:	0f b6       	in	r0, 0x3f	; 63
    29ac:	f8 94       	cli
    29ae:	de bf       	out	0x3e, r29	; 62
    29b0:	0f be       	out	0x3f, r0	; 63
    29b2:	cd bf       	out	0x3d, r28	; 61
    29b4:	8f 8f       	std	Y+31, r24	; 0x1f
    29b6:	68 a3       	std	Y+32, r22	; 0x20
    29b8:	49 a3       	std	Y+33, r20	; 0x21
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	61 e0       	ldi	r22, 0x01	; 1
    29be:	41 e0       	ldi	r20, 0x01	; 1
    29c0:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	60 e0       	ldi	r22, 0x00	; 0
    29c8:	40 e0       	ldi	r20, 0x00	; 0
    29ca:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>


	if(row == 1){
    29ce:	88 a1       	ldd	r24, Y+32	; 0x20
    29d0:	81 30       	cpi	r24, 0x01	; 1
    29d2:	09 f0       	breq	.+2      	; 0x29d6 <Lcd_ES_tsendChar_xy+0x36>
    29d4:	76 c0       	rjmp	.+236    	; 0x2ac2 <Lcd_ES_tsendChar_xy+0x122>
		Lcd_ES_tsendCmd(Force1stline);
    29d6:	80 e8       	ldi	r24, 0x80	; 128
    29d8:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <Lcd_ES_tsendCmd>
    29dc:	80 e0       	ldi	r24, 0x00	; 0
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	a0 e8       	ldi	r26, 0x80	; 128
    29e2:	bf e3       	ldi	r27, 0x3F	; 63
    29e4:	89 8f       	std	Y+25, r24	; 0x19
    29e6:	9a 8f       	std	Y+26, r25	; 0x1a
    29e8:	ab 8f       	std	Y+27, r26	; 0x1b
    29ea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ec:	69 8d       	ldd	r22, Y+25	; 0x19
    29ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29f4:	20 e0       	ldi	r18, 0x00	; 0
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	4a e7       	ldi	r20, 0x7A	; 122
    29fa:	55 e4       	ldi	r21, 0x45	; 69
    29fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a00:	dc 01       	movw	r26, r24
    2a02:	cb 01       	movw	r24, r22
    2a04:	8d 8b       	std	Y+21, r24	; 0x15
    2a06:	9e 8b       	std	Y+22, r25	; 0x16
    2a08:	af 8b       	std	Y+23, r26	; 0x17
    2a0a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a0c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a0e:	7e 89       	ldd	r23, Y+22	; 0x16
    2a10:	8f 89       	ldd	r24, Y+23	; 0x17
    2a12:	98 8d       	ldd	r25, Y+24	; 0x18
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	40 e8       	ldi	r20, 0x80	; 128
    2a1a:	5f e3       	ldi	r21, 0x3F	; 63
    2a1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a20:	88 23       	and	r24, r24
    2a22:	2c f4       	brge	.+10     	; 0x2a2e <Lcd_ES_tsendChar_xy+0x8e>
		__ticks = 1;
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	9c 8b       	std	Y+20, r25	; 0x14
    2a2a:	8b 8b       	std	Y+19, r24	; 0x13
    2a2c:	3f c0       	rjmp	.+126    	; 0x2aac <Lcd_ES_tsendChar_xy+0x10c>
	else if (__tmp > 65535)
    2a2e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a30:	7e 89       	ldd	r23, Y+22	; 0x16
    2a32:	8f 89       	ldd	r24, Y+23	; 0x17
    2a34:	98 8d       	ldd	r25, Y+24	; 0x18
    2a36:	20 e0       	ldi	r18, 0x00	; 0
    2a38:	3f ef       	ldi	r19, 0xFF	; 255
    2a3a:	4f e7       	ldi	r20, 0x7F	; 127
    2a3c:	57 e4       	ldi	r21, 0x47	; 71
    2a3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a42:	18 16       	cp	r1, r24
    2a44:	4c f5       	brge	.+82     	; 0x2a98 <Lcd_ES_tsendChar_xy+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a46:	69 8d       	ldd	r22, Y+25	; 0x19
    2a48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a4e:	20 e0       	ldi	r18, 0x00	; 0
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	40 e2       	ldi	r20, 0x20	; 32
    2a54:	51 e4       	ldi	r21, 0x41	; 65
    2a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	bc 01       	movw	r22, r24
    2a60:	cd 01       	movw	r24, r26
    2a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22
    2a6a:	9c 8b       	std	Y+20, r25	; 0x14
    2a6c:	8b 8b       	std	Y+19, r24	; 0x13
    2a6e:	0f c0       	rjmp	.+30     	; 0x2a8e <Lcd_ES_tsendChar_xy+0xee>
    2a70:	80 e9       	ldi	r24, 0x90	; 144
    2a72:	91 e0       	ldi	r25, 0x01	; 1
    2a74:	9a 8b       	std	Y+18, r25	; 0x12
    2a76:	89 8b       	std	Y+17, r24	; 0x11
    2a78:	89 89       	ldd	r24, Y+17	; 0x11
    2a7a:	9a 89       	ldd	r25, Y+18	; 0x12
    2a7c:	01 97       	sbiw	r24, 0x01	; 1
    2a7e:	f1 f7       	brne	.-4      	; 0x2a7c <Lcd_ES_tsendChar_xy+0xdc>
    2a80:	9a 8b       	std	Y+18, r25	; 0x12
    2a82:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a84:	8b 89       	ldd	r24, Y+19	; 0x13
    2a86:	9c 89       	ldd	r25, Y+20	; 0x14
    2a88:	01 97       	sbiw	r24, 0x01	; 1
    2a8a:	9c 8b       	std	Y+20, r25	; 0x14
    2a8c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a8e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a90:	9c 89       	ldd	r25, Y+20	; 0x14
    2a92:	00 97       	sbiw	r24, 0x00	; 0
    2a94:	69 f7       	brne	.-38     	; 0x2a70 <Lcd_ES_tsendChar_xy+0xd0>
    2a96:	92 c0       	rjmp	.+292    	; 0x2bbc <Lcd_ES_tsendChar_xy+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a98:	6d 89       	ldd	r22, Y+21	; 0x15
    2a9a:	7e 89       	ldd	r23, Y+22	; 0x16
    2a9c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a9e:	98 8d       	ldd	r25, Y+24	; 0x18
    2aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa4:	dc 01       	movw	r26, r24
    2aa6:	cb 01       	movw	r24, r22
    2aa8:	9c 8b       	std	Y+20, r25	; 0x14
    2aaa:	8b 8b       	std	Y+19, r24	; 0x13
    2aac:	8b 89       	ldd	r24, Y+19	; 0x13
    2aae:	9c 89       	ldd	r25, Y+20	; 0x14
    2ab0:	98 8b       	std	Y+16, r25	; 0x10
    2ab2:	8f 87       	std	Y+15, r24	; 0x0f
    2ab4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ab6:	98 89       	ldd	r25, Y+16	; 0x10
    2ab8:	01 97       	sbiw	r24, 0x01	; 1
    2aba:	f1 f7       	brne	.-4      	; 0x2ab8 <Lcd_ES_tsendChar_xy+0x118>
    2abc:	98 8b       	std	Y+16, r25	; 0x10
    2abe:	8f 87       	std	Y+15, r24	; 0x0f
    2ac0:	7d c0       	rjmp	.+250    	; 0x2bbc <Lcd_ES_tsendChar_xy+0x21c>
		_delay_ms(1);
	}else if(row == 2){
    2ac2:	88 a1       	ldd	r24, Y+32	; 0x20
    2ac4:	82 30       	cpi	r24, 0x02	; 2
    2ac6:	09 f0       	breq	.+2      	; 0x2aca <Lcd_ES_tsendChar_xy+0x12a>
    2ac8:	76 c0       	rjmp	.+236    	; 0x2bb6 <Lcd_ES_tsendChar_xy+0x216>
		Lcd_ES_tsendCmd(Force2ndline);
    2aca:	80 ec       	ldi	r24, 0xC0	; 192
    2acc:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <Lcd_ES_tsendCmd>
    2ad0:	80 e0       	ldi	r24, 0x00	; 0
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	a0 e2       	ldi	r26, 0x20	; 32
    2ad6:	b1 e4       	ldi	r27, 0x41	; 65
    2ad8:	8b 87       	std	Y+11, r24	; 0x0b
    2ada:	9c 87       	std	Y+12, r25	; 0x0c
    2adc:	ad 87       	std	Y+13, r26	; 0x0d
    2ade:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ae2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ae4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ae6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ae8:	20 e0       	ldi	r18, 0x00	; 0
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	4a e7       	ldi	r20, 0x7A	; 122
    2aee:	55 e4       	ldi	r21, 0x45	; 69
    2af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af4:	dc 01       	movw	r26, r24
    2af6:	cb 01       	movw	r24, r22
    2af8:	8f 83       	std	Y+7, r24	; 0x07
    2afa:	98 87       	std	Y+8, r25	; 0x08
    2afc:	a9 87       	std	Y+9, r26	; 0x09
    2afe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b00:	6f 81       	ldd	r22, Y+7	; 0x07
    2b02:	78 85       	ldd	r23, Y+8	; 0x08
    2b04:	89 85       	ldd	r24, Y+9	; 0x09
    2b06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b08:	20 e0       	ldi	r18, 0x00	; 0
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	40 e8       	ldi	r20, 0x80	; 128
    2b0e:	5f e3       	ldi	r21, 0x3F	; 63
    2b10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b14:	88 23       	and	r24, r24
    2b16:	2c f4       	brge	.+10     	; 0x2b22 <Lcd_ES_tsendChar_xy+0x182>
		__ticks = 1;
    2b18:	81 e0       	ldi	r24, 0x01	; 1
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	9e 83       	std	Y+6, r25	; 0x06
    2b1e:	8d 83       	std	Y+5, r24	; 0x05
    2b20:	3f c0       	rjmp	.+126    	; 0x2ba0 <Lcd_ES_tsendChar_xy+0x200>
	else if (__tmp > 65535)
    2b22:	6f 81       	ldd	r22, Y+7	; 0x07
    2b24:	78 85       	ldd	r23, Y+8	; 0x08
    2b26:	89 85       	ldd	r24, Y+9	; 0x09
    2b28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	3f ef       	ldi	r19, 0xFF	; 255
    2b2e:	4f e7       	ldi	r20, 0x7F	; 127
    2b30:	57 e4       	ldi	r21, 0x47	; 71
    2b32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b36:	18 16       	cp	r1, r24
    2b38:	4c f5       	brge	.+82     	; 0x2b8c <Lcd_ES_tsendChar_xy+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b40:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b42:	20 e0       	ldi	r18, 0x00	; 0
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	40 e2       	ldi	r20, 0x20	; 32
    2b48:	51 e4       	ldi	r21, 0x41	; 65
    2b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	bc 01       	movw	r22, r24
    2b54:	cd 01       	movw	r24, r26
    2b56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	cb 01       	movw	r24, r22
    2b5e:	9e 83       	std	Y+6, r25	; 0x06
    2b60:	8d 83       	std	Y+5, r24	; 0x05
    2b62:	0f c0       	rjmp	.+30     	; 0x2b82 <Lcd_ES_tsendChar_xy+0x1e2>
    2b64:	80 e9       	ldi	r24, 0x90	; 144
    2b66:	91 e0       	ldi	r25, 0x01	; 1
    2b68:	9c 83       	std	Y+4, r25	; 0x04
    2b6a:	8b 83       	std	Y+3, r24	; 0x03
    2b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b70:	01 97       	sbiw	r24, 0x01	; 1
    2b72:	f1 f7       	brne	.-4      	; 0x2b70 <Lcd_ES_tsendChar_xy+0x1d0>
    2b74:	9c 83       	std	Y+4, r25	; 0x04
    2b76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b78:	8d 81       	ldd	r24, Y+5	; 0x05
    2b7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b7c:	01 97       	sbiw	r24, 0x01	; 1
    2b7e:	9e 83       	std	Y+6, r25	; 0x06
    2b80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b82:	8d 81       	ldd	r24, Y+5	; 0x05
    2b84:	9e 81       	ldd	r25, Y+6	; 0x06
    2b86:	00 97       	sbiw	r24, 0x00	; 0
    2b88:	69 f7       	brne	.-38     	; 0x2b64 <Lcd_ES_tsendChar_xy+0x1c4>
    2b8a:	18 c0       	rjmp	.+48     	; 0x2bbc <Lcd_ES_tsendChar_xy+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b8c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b8e:	78 85       	ldd	r23, Y+8	; 0x08
    2b90:	89 85       	ldd	r24, Y+9	; 0x09
    2b92:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b98:	dc 01       	movw	r26, r24
    2b9a:	cb 01       	movw	r24, r22
    2b9c:	9e 83       	std	Y+6, r25	; 0x06
    2b9e:	8d 83       	std	Y+5, r24	; 0x05
    2ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba4:	9a 83       	std	Y+2, r25	; 0x02
    2ba6:	89 83       	std	Y+1, r24	; 0x01
    2ba8:	89 81       	ldd	r24, Y+1	; 0x01
    2baa:	9a 81       	ldd	r25, Y+2	; 0x02
    2bac:	01 97       	sbiw	r24, 0x01	; 1
    2bae:	f1 f7       	brne	.-4      	; 0x2bac <Lcd_ES_tsendChar_xy+0x20c>
    2bb0:	9a 83       	std	Y+2, r25	; 0x02
    2bb2:	89 83       	std	Y+1, r24	; 0x01
    2bb4:	03 c0       	rjmp	.+6      	; 0x2bbc <Lcd_ES_tsendChar_xy+0x21c>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
    2bb8:	8a a3       	std	Y+34, r24	; 0x22
    2bba:	19 c0       	rjmp	.+50     	; 0x2bee <Lcd_ES_tsendChar_xy+0x24e>
	}

	for(int j=1;j<=col;j++){
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	9e 8f       	std	Y+30, r25	; 0x1e
    2bc2:	8d 8f       	std	Y+29, r24	; 0x1d
    2bc4:	08 c0       	rjmp	.+16     	; 0x2bd6 <Lcd_ES_tsendChar_xy+0x236>
		Lcd_ES_tsendCmd(ShiftRight);
    2bc6:	8c e1       	ldi	r24, 0x1C	; 28
    2bc8:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <Lcd_ES_tsendCmd>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
	}

	for(int j=1;j<=col;j++){
    2bcc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bd0:	01 96       	adiw	r24, 0x01	; 1
    2bd2:	9e 8f       	std	Y+30, r25	; 0x1e
    2bd4:	8d 8f       	std	Y+29, r24	; 0x1d
    2bd6:	89 a1       	ldd	r24, Y+33	; 0x21
    2bd8:	28 2f       	mov	r18, r24
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bde:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2be0:	28 17       	cp	r18, r24
    2be2:	39 07       	cpc	r19, r25
    2be4:	84 f7       	brge	.-32     	; 0x2bc6 <Lcd_ES_tsendChar_xy+0x226>
		Lcd_ES_tsendCmd(ShiftRight);
	}
	Lcd_ES_tsendChar(data);
    2be6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2be8:	0e 94 2e 12 	call	0x245c	; 0x245c <Lcd_ES_tsendChar>
	return ES_OK;
    2bec:	1a a2       	std	Y+34, r1	; 0x22
    2bee:	8a a1       	ldd	r24, Y+34	; 0x22
}
    2bf0:	a2 96       	adiw	r28, 0x22	; 34
    2bf2:	0f b6       	in	r0, 0x3f	; 63
    2bf4:	f8 94       	cli
    2bf6:	de bf       	out	0x3e, r29	; 62
    2bf8:	0f be       	out	0x3f, r0	; 63
    2bfa:	cd bf       	out	0x3d, r28	; 61
    2bfc:	cf 91       	pop	r28
    2bfe:	df 91       	pop	r29
    2c00:	08 95       	ret

00002c02 <LCD_ES_tSet_Cursor_Pos>:

static ES_t LCD_ES_tSet_Cursor_Pos(u8 row,u8 column){
    2c02:	df 93       	push	r29
    2c04:	cf 93       	push	r28
    2c06:	00 d0       	rcall	.+0      	; 0x2c08 <LCD_ES_tSet_Cursor_Pos+0x6>
    2c08:	00 d0       	rcall	.+0      	; 0x2c0a <LCD_ES_tSet_Cursor_Pos+0x8>
    2c0a:	0f 92       	push	r0
    2c0c:	cd b7       	in	r28, 0x3d	; 61
    2c0e:	de b7       	in	r29, 0x3e	; 62
    2c10:	89 83       	std	Y+1, r24	; 0x01
    2c12:	6a 83       	std	Y+2, r22	; 0x02
	column--;
    2c14:	8a 81       	ldd	r24, Y+2	; 0x02
    2c16:	81 50       	subi	r24, 0x01	; 1
    2c18:	8a 83       	std	Y+2, r24	; 0x02
	switch(row){
    2c1a:	89 81       	ldd	r24, Y+1	; 0x01
    2c1c:	28 2f       	mov	r18, r24
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	3d 83       	std	Y+5, r19	; 0x05
    2c22:	2c 83       	std	Y+4, r18	; 0x04
    2c24:	8c 81       	ldd	r24, Y+4	; 0x04
    2c26:	9d 81       	ldd	r25, Y+5	; 0x05
    2c28:	81 30       	cpi	r24, 0x01	; 1
    2c2a:	91 05       	cpc	r25, r1
    2c2c:	31 f0       	breq	.+12     	; 0x2c3a <LCD_ES_tSet_Cursor_Pos+0x38>
    2c2e:	2c 81       	ldd	r18, Y+4	; 0x04
    2c30:	3d 81       	ldd	r19, Y+5	; 0x05
    2c32:	22 30       	cpi	r18, 0x02	; 2
    2c34:	31 05       	cpc	r19, r1
    2c36:	31 f0       	breq	.+12     	; 0x2c44 <LCD_ES_tSet_Cursor_Pos+0x42>
    2c38:	0a c0       	rjmp	.+20     	; 0x2c4e <LCD_ES_tSet_Cursor_Pos+0x4c>
	         case 1:
	        	 Lcd_ES_tsendCmd((0x80 + column));
    2c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3c:	80 58       	subi	r24, 0x80	; 128
    2c3e:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <Lcd_ES_tsendCmd>
    2c42:	08 c0       	rjmp	.+16     	; 0x2c54 <LCD_ES_tSet_Cursor_Pos+0x52>
	        	 break;
	         case 2:
	        	 Lcd_ES_tsendCmd((0xc0 + column));
    2c44:	8a 81       	ldd	r24, Y+2	; 0x02
    2c46:	80 54       	subi	r24, 0x40	; 64
    2c48:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <Lcd_ES_tsendCmd>
    2c4c:	03 c0       	rjmp	.+6      	; 0x2c54 <LCD_ES_tSet_Cursor_Pos+0x52>
	        	 break;
	         default:
	        	 return ES_NOT_OK;
    2c4e:	31 e0       	ldi	r19, 0x01	; 1
    2c50:	3b 83       	std	Y+3, r19	; 0x03
    2c52:	01 c0       	rjmp	.+2      	; 0x2c56 <LCD_ES_tSet_Cursor_Pos+0x54>
	}
	return ES_OK;
    2c54:	1b 82       	std	Y+3, r1	; 0x03
    2c56:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2c58:	0f 90       	pop	r0
    2c5a:	0f 90       	pop	r0
    2c5c:	0f 90       	pop	r0
    2c5e:	0f 90       	pop	r0
    2c60:	0f 90       	pop	r0
    2c62:	cf 91       	pop	r28
    2c64:	df 91       	pop	r29
    2c66:	08 95       	ret

00002c68 <LCD_ES_tGoTo>:

/************************************************************************/
ES_t LCD_ES_tGoTo(u8 Line, u8 x){
    2c68:	df 93       	push	r29
    2c6a:	cf 93       	push	r28
    2c6c:	00 d0       	rcall	.+0      	; 0x2c6e <LCD_ES_tGoTo+0x6>
    2c6e:	0f 92       	push	r0
    2c70:	cd b7       	in	r28, 0x3d	; 61
    2c72:	de b7       	in	r29, 0x3e	; 62
    2c74:	89 83       	std	Y+1, r24	; 0x01
    2c76:	6a 83       	std	Y+2, r22	; 0x02
	if(0 == Line)
    2c78:	89 81       	ldd	r24, Y+1	; 0x01
    2c7a:	88 23       	and	r24, r24
    2c7c:	41 f4       	brne	.+16     	; 0x2c8e <LCD_ES_tGoTo+0x26>
	{
		if ( x <=15)
    2c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c80:	80 31       	cpi	r24, 0x10	; 16
    2c82:	98 f4       	brcc	.+38     	; 0x2caa <LCD_ES_tGoTo+0x42>
		{
			Lcd_ES_tsendCmd(0x80 + x);
    2c84:	8a 81       	ldd	r24, Y+2	; 0x02
    2c86:	80 58       	subi	r24, 0x80	; 128
    2c88:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <Lcd_ES_tsendCmd>
    2c8c:	0e c0       	rjmp	.+28     	; 0x2caa <LCD_ES_tGoTo+0x42>
		}
	}
	else if (1 == Line)
    2c8e:	89 81       	ldd	r24, Y+1	; 0x01
    2c90:	81 30       	cpi	r24, 0x01	; 1
    2c92:	41 f4       	brne	.+16     	; 0x2ca4 <LCD_ES_tGoTo+0x3c>
	{
		if ( x <=15)
    2c94:	8a 81       	ldd	r24, Y+2	; 0x02
    2c96:	80 31       	cpi	r24, 0x10	; 16
    2c98:	40 f4       	brcc	.+16     	; 0x2caa <LCD_ES_tGoTo+0x42>
		{
			Lcd_ES_tsendCmd(0xC0 + x);
    2c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9c:	80 54       	subi	r24, 0x40	; 64
    2c9e:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <Lcd_ES_tsendCmd>
    2ca2:	03 c0       	rjmp	.+6      	; 0x2caa <LCD_ES_tGoTo+0x42>
		}
	}else{
		return ES_NOT_OK;
    2ca4:	81 e0       	ldi	r24, 0x01	; 1
    2ca6:	8b 83       	std	Y+3, r24	; 0x03
    2ca8:	01 c0       	rjmp	.+2      	; 0x2cac <LCD_ES_tGoTo+0x44>
	}
	return ES_OK;
    2caa:	1b 82       	std	Y+3, r1	; 0x03
    2cac:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2cae:	0f 90       	pop	r0
    2cb0:	0f 90       	pop	r0
    2cb2:	0f 90       	pop	r0
    2cb4:	cf 91       	pop	r28
    2cb6:	df 91       	pop	r29
    2cb8:	08 95       	ret

00002cba <KPD_ES_tGetKeyPressed>:
// To avoid the unarrangement and uncontiguous
const u8 KPD_Au8RowsPins[4] = {KPD_U8_R1,KPD_U8_R2,KPD_U8_R3,KPD_U8_R4};
const u8 KPD_Au8ColsPins[4] = {KPD_U8_C1,KPD_U8_C2,KPD_U8_C3,KPD_U8_C4};

ES_t KPD_ES_tGetKeyPressed(u8 *copy_pu8ReturnedKey)
{
    2cba:	df 93       	push	r29
    2cbc:	cf 93       	push	r28
    2cbe:	cd b7       	in	r28, 0x3d	; 61
    2cc0:	de b7       	in	r29, 0x3e	; 62
    2cc2:	65 97       	sbiw	r28, 0x15	; 21
    2cc4:	0f b6       	in	r0, 0x3f	; 63
    2cc6:	f8 94       	cli
    2cc8:	de bf       	out	0x3e, r29	; 62
    2cca:	0f be       	out	0x3f, r0	; 63
    2ccc:	cd bf       	out	0x3d, r28	; 61
    2cce:	9c 8b       	std	Y+20, r25	; 0x14
    2cd0:	8b 8b       	std	Y+19, r24	; 0x13
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
    2cd2:	eb 89       	ldd	r30, Y+19	; 0x13
    2cd4:	fc 89       	ldd	r31, Y+20	; 0x14
    2cd6:	8f ef       	ldi	r24, 0xFF	; 255
    2cd8:	80 83       	st	Z, r24
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
    2cda:	1f 86       	std	Y+15, r1	; 0x0f
	if(copy_pu8ReturnedKey != NULL)
    2cdc:	8b 89       	ldd	r24, Y+19	; 0x13
    2cde:	9c 89       	ldd	r25, Y+20	; 0x14
    2ce0:	00 97       	sbiw	r24, 0x00	; 0
    2ce2:	09 f4       	brne	.+2      	; 0x2ce6 <KPD_ES_tGetKeyPressed+0x2c>
    2ce4:	ed c0       	rjmp	.+474    	; 0x2ec0 <KPD_ES_tGetKeyPressed+0x206>
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
    2ce6:	19 8a       	std	Y+17, r1	; 0x11
    2ce8:	e5 c0       	rjmp	.+458    	; 0x2eb4 <KPD_ES_tGetKeyPressed+0x1fa>
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
    2cea:	89 89       	ldd	r24, Y+17	; 0x11
    2cec:	88 2f       	mov	r24, r24
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	fc 01       	movw	r30, r24
    2cf2:	e3 57       	subi	r30, 0x73	; 115
    2cf4:	fe 4f       	sbci	r31, 0xFE	; 254
    2cf6:	90 81       	ld	r25, Z
    2cf8:	81 e0       	ldi	r24, 0x01	; 1
    2cfa:	69 2f       	mov	r22, r25
    2cfc:	40 e0       	ldi	r20, 0x00	; 0
    2cfe:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
    2d02:	18 8a       	std	Y+16, r1	; 0x10
    2d04:	c1 c0       	rjmp	.+386    	; 0x2e88 <KPD_ES_tGetKeyPressed+0x1ce>
			{
				DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);
    2d06:	88 89       	ldd	r24, Y+16	; 0x10
    2d08:	88 2f       	mov	r24, r24
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	fc 01       	movw	r30, r24
    2d0e:	ef 56       	subi	r30, 0x6F	; 111
    2d10:	fe 4f       	sbci	r31, 0xFE	; 254
    2d12:	90 81       	ld	r25, Z
    2d14:	9e 01       	movw	r18, r28
    2d16:	2e 5e       	subi	r18, 0xEE	; 238
    2d18:	3f 4f       	sbci	r19, 0xFF	; 255
    2d1a:	83 e0       	ldi	r24, 0x03	; 3
    2d1c:	69 2f       	mov	r22, r25
    2d1e:	a9 01       	movw	r20, r18
    2d20:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_ES_tGetPinValue>
				if(Local_u8PinVal == LOW){ /* Switch is pressed */
    2d24:	8a 89       	ldd	r24, Y+18	; 0x12
    2d26:	88 23       	and	r24, r24
    2d28:	09 f0       	breq	.+2      	; 0x2d2c <KPD_ES_tGetKeyPressed+0x72>
    2d2a:	ab c0       	rjmp	.+342    	; 0x2e82 <KPD_ES_tGetKeyPressed+0x1c8>
    2d2c:	80 e0       	ldi	r24, 0x00	; 0
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	a0 ea       	ldi	r26, 0xA0	; 160
    2d32:	b1 e4       	ldi	r27, 0x41	; 65
    2d34:	8b 87       	std	Y+11, r24	; 0x0b
    2d36:	9c 87       	std	Y+12, r25	; 0x0c
    2d38:	ad 87       	std	Y+13, r26	; 0x0d
    2d3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d42:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	4a e7       	ldi	r20, 0x7A	; 122
    2d4a:	55 e4       	ldi	r21, 0x45	; 69
    2d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d50:	dc 01       	movw	r26, r24
    2d52:	cb 01       	movw	r24, r22
    2d54:	8f 83       	std	Y+7, r24	; 0x07
    2d56:	98 87       	std	Y+8, r25	; 0x08
    2d58:	a9 87       	std	Y+9, r26	; 0x09
    2d5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d5e:	78 85       	ldd	r23, Y+8	; 0x08
    2d60:	89 85       	ldd	r24, Y+9	; 0x09
    2d62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d64:	20 e0       	ldi	r18, 0x00	; 0
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	40 e8       	ldi	r20, 0x80	; 128
    2d6a:	5f e3       	ldi	r21, 0x3F	; 63
    2d6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d70:	88 23       	and	r24, r24
    2d72:	2c f4       	brge	.+10     	; 0x2d7e <KPD_ES_tGetKeyPressed+0xc4>
		__ticks = 1;
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	9e 83       	std	Y+6, r25	; 0x06
    2d7a:	8d 83       	std	Y+5, r24	; 0x05
    2d7c:	3f c0       	rjmp	.+126    	; 0x2dfc <KPD_ES_tGetKeyPressed+0x142>
	else if (__tmp > 65535)
    2d7e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d80:	78 85       	ldd	r23, Y+8	; 0x08
    2d82:	89 85       	ldd	r24, Y+9	; 0x09
    2d84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d86:	20 e0       	ldi	r18, 0x00	; 0
    2d88:	3f ef       	ldi	r19, 0xFF	; 255
    2d8a:	4f e7       	ldi	r20, 0x7F	; 127
    2d8c:	57 e4       	ldi	r21, 0x47	; 71
    2d8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d92:	18 16       	cp	r1, r24
    2d94:	4c f5       	brge	.+82     	; 0x2de8 <KPD_ES_tGetKeyPressed+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d96:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d98:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d9e:	20 e0       	ldi	r18, 0x00	; 0
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	40 e2       	ldi	r20, 0x20	; 32
    2da4:	51 e4       	ldi	r21, 0x41	; 65
    2da6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2daa:	dc 01       	movw	r26, r24
    2dac:	cb 01       	movw	r24, r22
    2dae:	bc 01       	movw	r22, r24
    2db0:	cd 01       	movw	r24, r26
    2db2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db6:	dc 01       	movw	r26, r24
    2db8:	cb 01       	movw	r24, r22
    2dba:	9e 83       	std	Y+6, r25	; 0x06
    2dbc:	8d 83       	std	Y+5, r24	; 0x05
    2dbe:	0f c0       	rjmp	.+30     	; 0x2dde <KPD_ES_tGetKeyPressed+0x124>
    2dc0:	80 e9       	ldi	r24, 0x90	; 144
    2dc2:	91 e0       	ldi	r25, 0x01	; 1
    2dc4:	9c 83       	std	Y+4, r25	; 0x04
    2dc6:	8b 83       	std	Y+3, r24	; 0x03
    2dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dca:	9c 81       	ldd	r25, Y+4	; 0x04
    2dcc:	01 97       	sbiw	r24, 0x01	; 1
    2dce:	f1 f7       	brne	.-4      	; 0x2dcc <KPD_ES_tGetKeyPressed+0x112>
    2dd0:	9c 83       	std	Y+4, r25	; 0x04
    2dd2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd6:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd8:	01 97       	sbiw	r24, 0x01	; 1
    2dda:	9e 83       	std	Y+6, r25	; 0x06
    2ddc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dde:	8d 81       	ldd	r24, Y+5	; 0x05
    2de0:	9e 81       	ldd	r25, Y+6	; 0x06
    2de2:	00 97       	sbiw	r24, 0x00	; 0
    2de4:	69 f7       	brne	.-38     	; 0x2dc0 <KPD_ES_tGetKeyPressed+0x106>
    2de6:	14 c0       	rjmp	.+40     	; 0x2e10 <KPD_ES_tGetKeyPressed+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2de8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dea:	78 85       	ldd	r23, Y+8	; 0x08
    2dec:	89 85       	ldd	r24, Y+9	; 0x09
    2dee:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df4:	dc 01       	movw	r26, r24
    2df6:	cb 01       	movw	r24, r22
    2df8:	9e 83       	std	Y+6, r25	; 0x06
    2dfa:	8d 83       	std	Y+5, r24	; 0x05
    2dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    2e00:	9a 83       	std	Y+2, r25	; 0x02
    2e02:	89 83       	std	Y+1, r24	; 0x01
    2e04:	89 81       	ldd	r24, Y+1	; 0x01
    2e06:	9a 81       	ldd	r25, Y+2	; 0x02
    2e08:	01 97       	sbiw	r24, 0x01	; 1
    2e0a:	f1 f7       	brne	.-4      	; 0x2e08 <KPD_ES_tGetKeyPressed+0x14e>
    2e0c:	9a 83       	std	Y+2, r25	; 0x02
    2e0e:	89 83       	std	Y+1, r24	; 0x01
					/* The switch which reaches between the activated
					 * Column and the pressed key */
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    2e10:	88 89       	ldd	r24, Y+16	; 0x10
    2e12:	88 2f       	mov	r24, r24
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	fc 01       	movw	r30, r24
    2e18:	ef 56       	subi	r30, 0x6F	; 111
    2e1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e1c:	90 81       	ld	r25, Z
    2e1e:	9e 01       	movw	r18, r28
    2e20:	2e 5e       	subi	r18, 0xEE	; 238
    2e22:	3f 4f       	sbci	r19, 0xFF	; 255
    2e24:	83 e0       	ldi	r24, 0x03	; 3
    2e26:	69 2f       	mov	r22, r25
    2e28:	a9 01       	movw	r20, r18
    2e2a:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_ES_tGetPinValue>
    2e2e:	0f c0       	rjmp	.+30     	; 0x2e4e <KPD_ES_tGetKeyPressed+0x194>
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    2e30:	88 89       	ldd	r24, Y+16	; 0x10
    2e32:	88 2f       	mov	r24, r24
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	fc 01       	movw	r30, r24
    2e38:	ef 56       	subi	r30, 0x6F	; 111
    2e3a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e3c:	90 81       	ld	r25, Z
    2e3e:	9e 01       	movw	r18, r28
    2e40:	2e 5e       	subi	r18, 0xEE	; 238
    2e42:	3f 4f       	sbci	r19, 0xFF	; 255
    2e44:	83 e0       	ldi	r24, 0x03	; 3
    2e46:	69 2f       	mov	r22, r25
    2e48:	a9 01       	movw	r20, r18
    2e4a:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_ES_tGetPinValue>
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
    2e4e:	8a 89       	ldd	r24, Y+18	; 0x12
    2e50:	88 23       	and	r24, r24
    2e52:	71 f3       	breq	.-36     	; 0x2e30 <KPD_ES_tGetKeyPressed+0x176>
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					}
					*copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    2e54:	89 89       	ldd	r24, Y+17	; 0x11
    2e56:	48 2f       	mov	r20, r24
    2e58:	50 e0       	ldi	r21, 0x00	; 0
    2e5a:	88 89       	ldd	r24, Y+16	; 0x10
    2e5c:	28 2f       	mov	r18, r24
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	ca 01       	movw	r24, r20
    2e62:	88 0f       	add	r24, r24
    2e64:	99 1f       	adc	r25, r25
    2e66:	88 0f       	add	r24, r24
    2e68:	99 1f       	adc	r25, r25
    2e6a:	82 0f       	add	r24, r18
    2e6c:	93 1f       	adc	r25, r19
    2e6e:	fc 01       	movw	r30, r24
    2e70:	e3 58       	subi	r30, 0x83	; 131
    2e72:	fe 4f       	sbci	r31, 0xFE	; 254
    2e74:	80 81       	ld	r24, Z
    2e76:	eb 89       	ldd	r30, Y+19	; 0x13
    2e78:	fc 89       	ldd	r31, Y+20	; 0x14
    2e7a:	80 83       	st	Z, r24
					Local_u8Flag = HIGH;
    2e7c:	81 e0       	ldi	r24, 0x01	; 1
    2e7e:	8f 87       	std	Y+15, r24	; 0x0f
    2e80:	07 c0       	rjmp	.+14     	; 0x2e90 <KPD_ES_tGetKeyPressed+0x1d6>
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
    2e82:	88 89       	ldd	r24, Y+16	; 0x10
    2e84:	8f 5f       	subi	r24, 0xFF	; 255
    2e86:	88 8b       	std	Y+16, r24	; 0x10
    2e88:	88 89       	ldd	r24, Y+16	; 0x10
    2e8a:	84 30       	cpi	r24, 0x04	; 4
    2e8c:	08 f4       	brcc	.+2      	; 0x2e90 <KPD_ES_tGetKeyPressed+0x1d6>
    2e8e:	3b cf       	rjmp	.-394    	; 0x2d06 <KPD_ES_tGetKeyPressed+0x4c>
					Local_u8Flag = HIGH;
					break;
				}
			}
			// Deactivate ROW
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],HIGH);
    2e90:	89 89       	ldd	r24, Y+17	; 0x11
    2e92:	88 2f       	mov	r24, r24
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	fc 01       	movw	r30, r24
    2e98:	e3 57       	subi	r30, 0x73	; 115
    2e9a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e9c:	90 81       	ld	r25, Z
    2e9e:	81 e0       	ldi	r24, 0x01	; 1
    2ea0:	69 2f       	mov	r22, r25
    2ea2:	41 e0       	ldi	r20, 0x01	; 1
    2ea4:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
			if(Local_u8Flag == HIGH)
    2ea8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2eaa:	81 30       	cpi	r24, 0x01	; 1
    2eac:	39 f0       	breq	.+14     	; 0x2ebc <KPD_ES_tGetKeyPressed+0x202>
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
	if(copy_pu8ReturnedKey != NULL)
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
    2eae:	89 89       	ldd	r24, Y+17	; 0x11
    2eb0:	8f 5f       	subi	r24, 0xFF	; 255
    2eb2:	89 8b       	std	Y+17, r24	; 0x11
    2eb4:	89 89       	ldd	r24, Y+17	; 0x11
    2eb6:	84 30       	cpi	r24, 0x04	; 4
    2eb8:	08 f4       	brcc	.+2      	; 0x2ebc <KPD_ES_tGetKeyPressed+0x202>
    2eba:	17 cf       	rjmp	.-466    	; 0x2cea <KPD_ES_tGetKeyPressed+0x30>


	}else{
		return ES_NOT_OK;
	}
	return ES_OK;
    2ebc:	1d 8a       	std	Y+21, r1	; 0x15
    2ebe:	02 c0       	rjmp	.+4      	; 0x2ec4 <KPD_ES_tGetKeyPressed+0x20a>
				break;
		}


	}else{
		return ES_NOT_OK;
    2ec0:	81 e0       	ldi	r24, 0x01	; 1
    2ec2:	8d 8b       	std	Y+21, r24	; 0x15
    2ec4:	8d 89       	ldd	r24, Y+21	; 0x15
	}
	return ES_OK;
}
    2ec6:	65 96       	adiw	r28, 0x15	; 21
    2ec8:	0f b6       	in	r0, 0x3f	; 63
    2eca:	f8 94       	cli
    2ecc:	de bf       	out	0x3e, r29	; 62
    2ece:	0f be       	out	0x3f, r0	; 63
    2ed0:	cd bf       	out	0x3d, r28	; 61
    2ed2:	cf 91       	pop	r28
    2ed4:	df 91       	pop	r29
    2ed6:	08 95       	ret

00002ed8 <DC_Motor_Init>:
#include "DC_Motor.h"
#include "DC_MotorCfg.h"


ES_t DC_Motor_Init(DC_MOTOR_Index Motor)
{
    2ed8:	df 93       	push	r29
    2eda:	cf 93       	push	r28
    2edc:	00 d0       	rcall	.+0      	; 0x2ede <DC_Motor_Init+0x6>
    2ede:	cd b7       	in	r28, 0x3d	; 61
    2ee0:	de b7       	in	r29, 0x3e	; 62
    2ee2:	89 83       	std	Y+1, r24	; 0x01
	if(Motor == DC_MOTOR_0){
    2ee4:	89 81       	ldd	r24, Y+1	; 0x01
    2ee6:	88 23       	and	r24, r24
    2ee8:	59 f4       	brne	.+22     	; 0x2f00 <DC_Motor_Init+0x28>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN1, OUTPUT);
    2eea:	82 e0       	ldi	r24, 0x02	; 2
    2eec:	61 e0       	ldi	r22, 0x01	; 1
    2eee:	41 e0       	ldi	r20, 0x01	; 1
    2ef0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN2, OUTPUT);
    2ef4:	82 e0       	ldi	r24, 0x02	; 2
    2ef6:	62 e0       	ldi	r22, 0x02	; 2
    2ef8:	41 e0       	ldi	r20, 0x01	; 1
    2efa:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_ES_tSetPinDirection>
    2efe:	11 c0       	rjmp	.+34     	; 0x2f22 <DC_Motor_Init+0x4a>
	}else if(Motor == DC_MOTOR_1){
    2f00:	89 81       	ldd	r24, Y+1	; 0x01
    2f02:	81 30       	cpi	r24, 0x01	; 1
    2f04:	59 f4       	brne	.+22     	; 0x2f1c <DC_Motor_Init+0x44>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN3, OUTPUT);
    2f06:	82 e0       	ldi	r24, 0x02	; 2
    2f08:	63 e0       	ldi	r22, 0x03	; 3
    2f0a:	41 e0       	ldi	r20, 0x01	; 1
    2f0c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN4, OUTPUT);
    2f10:	82 e0       	ldi	r24, 0x02	; 2
    2f12:	64 e0       	ldi	r22, 0x04	; 4
    2f14:	41 e0       	ldi	r20, 0x01	; 1
    2f16:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_ES_tSetPinDirection>
    2f1a:	03 c0       	rjmp	.+6      	; 0x2f22 <DC_Motor_Init+0x4a>
	}else{
		return ES_NOT_OK;
    2f1c:	81 e0       	ldi	r24, 0x01	; 1
    2f1e:	8a 83       	std	Y+2, r24	; 0x02
    2f20:	01 c0       	rjmp	.+2      	; 0x2f24 <DC_Motor_Init+0x4c>
	}
	return ES_OK;
    2f22:	1a 82       	std	Y+2, r1	; 0x02
    2f24:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2f26:	0f 90       	pop	r0
    2f28:	0f 90       	pop	r0
    2f2a:	cf 91       	pop	r28
    2f2c:	df 91       	pop	r29
    2f2e:	08 95       	ret

00002f30 <DC_Motor_Stop>:


ES_t DC_Motor_Stop(DC_MOTOR_Index Motor)
{
    2f30:	df 93       	push	r29
    2f32:	cf 93       	push	r28
    2f34:	00 d0       	rcall	.+0      	; 0x2f36 <DC_Motor_Stop+0x6>
    2f36:	cd b7       	in	r28, 0x3d	; 61
    2f38:	de b7       	in	r29, 0x3e	; 62
    2f3a:	89 83       	std	Y+1, r24	; 0x01
	if(Motor == DC_MOTOR_0){
    2f3c:	89 81       	ldd	r24, Y+1	; 0x01
    2f3e:	88 23       	and	r24, r24
    2f40:	59 f4       	brne	.+22     	; 0x2f58 <DC_Motor_Stop+0x28>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN1, LOW);
    2f42:	82 e0       	ldi	r24, 0x02	; 2
    2f44:	61 e0       	ldi	r22, 0x01	; 1
    2f46:	40 e0       	ldi	r20, 0x00	; 0
    2f48:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN2, LOW);
    2f4c:	82 e0       	ldi	r24, 0x02	; 2
    2f4e:	62 e0       	ldi	r22, 0x02	; 2
    2f50:	40 e0       	ldi	r20, 0x00	; 0
    2f52:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    2f56:	11 c0       	rjmp	.+34     	; 0x2f7a <DC_Motor_Stop+0x4a>
	}else if(Motor == DC_MOTOR_1){
    2f58:	89 81       	ldd	r24, Y+1	; 0x01
    2f5a:	81 30       	cpi	r24, 0x01	; 1
    2f5c:	59 f4       	brne	.+22     	; 0x2f74 <DC_Motor_Stop+0x44>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN3, LOW);
    2f5e:	82 e0       	ldi	r24, 0x02	; 2
    2f60:	63 e0       	ldi	r22, 0x03	; 3
    2f62:	40 e0       	ldi	r20, 0x00	; 0
    2f64:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN4, LOW);
    2f68:	82 e0       	ldi	r24, 0x02	; 2
    2f6a:	64 e0       	ldi	r22, 0x04	; 4
    2f6c:	40 e0       	ldi	r20, 0x00	; 0
    2f6e:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    2f72:	03 c0       	rjmp	.+6      	; 0x2f7a <DC_Motor_Stop+0x4a>
	}else{
		return ES_NOT_OK;
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	8a 83       	std	Y+2, r24	; 0x02
    2f78:	01 c0       	rjmp	.+2      	; 0x2f7c <DC_Motor_Stop+0x4c>
	}
	return ES_OK;
    2f7a:	1a 82       	std	Y+2, r1	; 0x02
    2f7c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2f7e:	0f 90       	pop	r0
    2f80:	0f 90       	pop	r0
    2f82:	cf 91       	pop	r28
    2f84:	df 91       	pop	r29
    2f86:	08 95       	ret

00002f88 <DC_Motor_Move>:


ES_t DC_Motor_Move(DC_MOTOR_Index Motor,DC_MOTOR_Cfg MotorCfg)
{
    2f88:	df 93       	push	r29
    2f8a:	cf 93       	push	r28
    2f8c:	00 d0       	rcall	.+0      	; 0x2f8e <DC_Motor_Move+0x6>
    2f8e:	00 d0       	rcall	.+0      	; 0x2f90 <DC_Motor_Move+0x8>
    2f90:	0f 92       	push	r0
    2f92:	cd b7       	in	r28, 0x3d	; 61
    2f94:	de b7       	in	r29, 0x3e	; 62
    2f96:	89 83       	std	Y+1, r24	; 0x01
    2f98:	6a 83       	std	Y+2, r22	; 0x02
	switch(MotorCfg){
    2f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9c:	28 2f       	mov	r18, r24
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	3d 83       	std	Y+5, r19	; 0x05
    2fa2:	2c 83       	std	Y+4, r18	; 0x04
    2fa4:	8c 81       	ldd	r24, Y+4	; 0x04
    2fa6:	9d 81       	ldd	r25, Y+5	; 0x05
    2fa8:	00 97       	sbiw	r24, 0x00	; 0
    2faa:	31 f0       	breq	.+12     	; 0x2fb8 <DC_Motor_Move+0x30>
    2fac:	2c 81       	ldd	r18, Y+4	; 0x04
    2fae:	3d 81       	ldd	r19, Y+5	; 0x05
    2fb0:	21 30       	cpi	r18, 0x01	; 1
    2fb2:	31 05       	cpc	r19, r1
    2fb4:	e9 f0       	breq	.+58     	; 0x2ff0 <DC_Motor_Move+0x68>
    2fb6:	38 c0       	rjmp	.+112    	; 0x3028 <DC_Motor_Move+0xa0>
	case DC_MOTOR_CW:
		if(Motor == DC_MOTOR_0){
    2fb8:	89 81       	ldd	r24, Y+1	; 0x01
    2fba:	88 23       	and	r24, r24
    2fbc:	59 f4       	brne	.+22     	; 0x2fd4 <DC_Motor_Move+0x4c>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN1, HIGH);
    2fbe:	82 e0       	ldi	r24, 0x02	; 2
    2fc0:	61 e0       	ldi	r22, 0x01	; 1
    2fc2:	41 e0       	ldi	r20, 0x01	; 1
    2fc4:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN2, LOW);
    2fc8:	82 e0       	ldi	r24, 0x02	; 2
    2fca:	62 e0       	ldi	r22, 0x02	; 2
    2fcc:	40 e0       	ldi	r20, 0x00	; 0
    2fce:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    2fd2:	2d c0       	rjmp	.+90     	; 0x302e <DC_Motor_Move+0xa6>
		}else if(Motor == DC_MOTOR_1){
    2fd4:	89 81       	ldd	r24, Y+1	; 0x01
    2fd6:	81 30       	cpi	r24, 0x01	; 1
    2fd8:	51 f5       	brne	.+84     	; 0x302e <DC_Motor_Move+0xa6>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN3, HIGH);
    2fda:	82 e0       	ldi	r24, 0x02	; 2
    2fdc:	63 e0       	ldi	r22, 0x03	; 3
    2fde:	41 e0       	ldi	r20, 0x01	; 1
    2fe0:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN4, LOW);
    2fe4:	82 e0       	ldi	r24, 0x02	; 2
    2fe6:	64 e0       	ldi	r22, 0x04	; 4
    2fe8:	40 e0       	ldi	r20, 0x00	; 0
    2fea:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    2fee:	1f c0       	rjmp	.+62     	; 0x302e <DC_Motor_Move+0xa6>
		}
		break;
	case DC_MOTOR_CCW:
		if(Motor == DC_MOTOR_0){
    2ff0:	89 81       	ldd	r24, Y+1	; 0x01
    2ff2:	88 23       	and	r24, r24
    2ff4:	59 f4       	brne	.+22     	; 0x300c <DC_Motor_Move+0x84>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN1, LOW);
    2ff6:	82 e0       	ldi	r24, 0x02	; 2
    2ff8:	61 e0       	ldi	r22, 0x01	; 1
    2ffa:	40 e0       	ldi	r20, 0x00	; 0
    2ffc:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN2, HIGH);
    3000:	82 e0       	ldi	r24, 0x02	; 2
    3002:	62 e0       	ldi	r22, 0x02	; 2
    3004:	41 e0       	ldi	r20, 0x01	; 1
    3006:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    300a:	11 c0       	rjmp	.+34     	; 0x302e <DC_Motor_Move+0xa6>
		}else if(Motor == DC_MOTOR_1){
    300c:	89 81       	ldd	r24, Y+1	; 0x01
    300e:	81 30       	cpi	r24, 0x01	; 1
    3010:	71 f4       	brne	.+28     	; 0x302e <DC_Motor_Move+0xa6>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN3, LOW);
    3012:	82 e0       	ldi	r24, 0x02	; 2
    3014:	63 e0       	ldi	r22, 0x03	; 3
    3016:	40 e0       	ldi	r20, 0x00	; 0
    3018:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN4, HIGH);
    301c:	82 e0       	ldi	r24, 0x02	; 2
    301e:	64 e0       	ldi	r22, 0x04	; 4
    3020:	41 e0       	ldi	r20, 0x01	; 1
    3022:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_ES_tSetPinValue>
    3026:	03 c0       	rjmp	.+6      	; 0x302e <DC_Motor_Move+0xa6>
		}
		break;
	default:
		return ES_NOT_OK;
    3028:	31 e0       	ldi	r19, 0x01	; 1
    302a:	3b 83       	std	Y+3, r19	; 0x03
    302c:	01 c0       	rjmp	.+2      	; 0x3030 <DC_Motor_Move+0xa8>
	}
	return ES_OK;
    302e:	1b 82       	std	Y+3, r1	; 0x03
    3030:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3032:	0f 90       	pop	r0
    3034:	0f 90       	pop	r0
    3036:	0f 90       	pop	r0
    3038:	0f 90       	pop	r0
    303a:	0f 90       	pop	r0
    303c:	cf 91       	pop	r28
    303e:	df 91       	pop	r29
    3040:	08 95       	ret

00003042 <main>:

u8 gettingMotorOption=0,gettingMovingOption=0,gettingStepperOption=0;


int main()
{
    3042:	0f 93       	push	r16
    3044:	1f 93       	push	r17
    3046:	df 93       	push	r29
    3048:	cf 93       	push	r28
    304a:	cd b7       	in	r28, 0x3d	; 61
    304c:	de b7       	in	r29, 0x3e	; 62
    304e:	cb 56       	subi	r28, 0x6B	; 107
    3050:	d0 40       	sbci	r29, 0x00	; 0
    3052:	0f b6       	in	r0, 0x3f	; 63
    3054:	f8 94       	cli
    3056:	de bf       	out	0x3e, r29	; 62
    3058:	0f be       	out	0x3f, r0	; 63
    305a:	cd bf       	out	0x3d, r28	; 61
	DIO_ES_tInit();
    305c:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <DIO_ES_tInit>
	Lcd_ES_tInit();
    3060:	0e 94 da 10 	call	0x21b4	; 0x21b4 <Lcd_ES_tInit>
	Stepper_Init();
    3064:	0e 94 b1 0c 	call	0x1962	; 0x1962 <Stepper_Init>

	DC_Motor_Init(DC_MOTOR_0);
    3068:	80 e0       	ldi	r24, 0x00	; 0
    306a:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <DC_Motor_Init>

	u8 Value;
	char Option,Option2,Option3;
	u8 count=0;
    306e:	fe 01       	movw	r30, r28
    3070:	eb 59       	subi	r30, 0x9B	; 155
    3072:	ff 4f       	sbci	r31, 0xFF	; 255
    3074:	10 82       	st	Z, r1
	u8 stepperAngle=0;
    3076:	fe 01       	movw	r30, r28
    3078:	ec 59       	subi	r30, 0x9C	; 156
    307a:	ff 4f       	sbci	r31, 0xFF	; 255
    307c:	10 82       	st	Z, r1


	State currentState = STATE_MAIN_SCREEN;
    307e:	fe 01       	movw	r30, r28
    3080:	ed 59       	subi	r30, 0x9D	; 157
    3082:	ff 4f       	sbci	r31, 0xFF	; 255
    3084:	10 82       	st	Z, r1




	Lcd_ES_tsendString("Enter Password !");
    3086:	80 e6       	ldi	r24, 0x60	; 96
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <Lcd_ES_tsendString>
	LCD_ES_tGoTo(1, 5);
    308e:	81 e0       	ldi	r24, 0x01	; 1
    3090:	65 e0       	ldi	r22, 0x05	; 5
    3092:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_ES_tGoTo>

	while(1)
	{
		switch(currentState)
    3096:	fe 01       	movw	r30, r28
    3098:	ed 59       	subi	r30, 0x9D	; 157
    309a:	ff 4f       	sbci	r31, 0xFF	; 255
    309c:	80 81       	ld	r24, Z
    309e:	28 2f       	mov	r18, r24
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	ac 96       	adiw	r28, 0x2c	; 44
    30a4:	3f af       	std	Y+63, r19	; 0x3f
    30a6:	2e af       	std	Y+62, r18	; 0x3e
    30a8:	ac 97       	sbiw	r28, 0x2c	; 44
    30aa:	ac 96       	adiw	r28, 0x2c	; 44
    30ac:	4e ad       	ldd	r20, Y+62	; 0x3e
    30ae:	5f ad       	ldd	r21, Y+63	; 0x3f
    30b0:	ac 97       	sbiw	r28, 0x2c	; 44
    30b2:	42 30       	cpi	r20, 0x02	; 2
    30b4:	51 05       	cpc	r21, r1
    30b6:	09 f4       	brne	.+2      	; 0x30ba <main+0x78>
    30b8:	d6 c2       	rjmp	.+1452   	; 0x3666 <main+0x624>
    30ba:	ac 96       	adiw	r28, 0x2c	; 44
    30bc:	8e ad       	ldd	r24, Y+62	; 0x3e
    30be:	9f ad       	ldd	r25, Y+63	; 0x3f
    30c0:	ac 97       	sbiw	r28, 0x2c	; 44
    30c2:	83 30       	cpi	r24, 0x03	; 3
    30c4:	91 05       	cpc	r25, r1
    30c6:	7c f4       	brge	.+30     	; 0x30e6 <main+0xa4>
    30c8:	ac 96       	adiw	r28, 0x2c	; 44
    30ca:	ee ad       	ldd	r30, Y+62	; 0x3e
    30cc:	ff ad       	ldd	r31, Y+63	; 0x3f
    30ce:	ac 97       	sbiw	r28, 0x2c	; 44
    30d0:	30 97       	sbiw	r30, 0x00	; 0
    30d2:	d1 f0       	breq	.+52     	; 0x3108 <main+0xc6>
    30d4:	ac 96       	adiw	r28, 0x2c	; 44
    30d6:	2e ad       	ldd	r18, Y+62	; 0x3e
    30d8:	3f ad       	ldd	r19, Y+63	; 0x3f
    30da:	ac 97       	sbiw	r28, 0x2c	; 44
    30dc:	21 30       	cpi	r18, 0x01	; 1
    30de:	31 05       	cpc	r19, r1
    30e0:	09 f4       	brne	.+2      	; 0x30e4 <main+0xa2>
    30e2:	f3 c1       	rjmp	.+998    	; 0x34ca <main+0x488>
    30e4:	d8 cf       	rjmp	.-80     	; 0x3096 <main+0x54>
    30e6:	ac 96       	adiw	r28, 0x2c	; 44
    30e8:	4e ad       	ldd	r20, Y+62	; 0x3e
    30ea:	5f ad       	ldd	r21, Y+63	; 0x3f
    30ec:	ac 97       	sbiw	r28, 0x2c	; 44
    30ee:	43 30       	cpi	r20, 0x03	; 3
    30f0:	51 05       	cpc	r21, r1
    30f2:	09 f4       	brne	.+2      	; 0x30f6 <main+0xb4>
    30f4:	69 c4       	rjmp	.+2258   	; 0x39c8 <main+0x986>
    30f6:	ac 96       	adiw	r28, 0x2c	; 44
    30f8:	8e ad       	ldd	r24, Y+62	; 0x3e
    30fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    30fc:	ac 97       	sbiw	r28, 0x2c	; 44
    30fe:	84 30       	cpi	r24, 0x04	; 4
    3100:	91 05       	cpc	r25, r1
    3102:	09 f4       	brne	.+2      	; 0x3106 <main+0xc4>
    3104:	dd c4       	rjmp	.+2490   	; 0x3ac0 <main+0xa7e>
    3106:	c7 cf       	rjmp	.-114    	; 0x3096 <main+0x54>
		{
		case STATE_MAIN_SCREEN:
			KPD_ES_tGetKeyPressed(&Value);
    3108:	ce 01       	movw	r24, r28
    310a:	8a 59       	subi	r24, 0x9A	; 154
    310c:	9f 4f       	sbci	r25, 0xFF	; 255
    310e:	0e 94 5d 16 	call	0x2cba	; 0x2cba <KPD_ES_tGetKeyPressed>
			if(Value != KPD_U8_NOT_PRESSED){
    3112:	fe 01       	movw	r30, r28
    3114:	ea 59       	subi	r30, 0x9A	; 154
    3116:	ff 4f       	sbci	r31, 0xFF	; 255
    3118:	80 81       	ld	r24, Z
    311a:	8f 3f       	cpi	r24, 0xFF	; 255
    311c:	09 f4       	brne	.+2      	; 0x3120 <main+0xde>
    311e:	bb cf       	rjmp	.-138    	; 0x3096 <main+0x54>

				Lcd_ES_tsendChar('*');
    3120:	8a e2       	ldi	r24, 0x2A	; 42
    3122:	0e 94 2e 12 	call	0x245c	; 0x245c <Lcd_ES_tsendChar>
				input[indexz] = Value; // Store input in array
    3126:	80 91 9e 01 	lds	r24, 0x019E
    312a:	88 2f       	mov	r24, r24
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	fe 01       	movw	r30, r28
    3130:	ea 59       	subi	r30, 0x9A	; 154
    3132:	ff 4f       	sbci	r31, 0xFF	; 255
    3134:	20 81       	ld	r18, Z
    3136:	fc 01       	movw	r30, r24
    3138:	e7 56       	subi	r30, 0x67	; 103
    313a:	fe 4f       	sbci	r31, 0xFE	; 254
    313c:	20 83       	st	Z, r18
				indexz++;
    313e:	80 91 9e 01 	lds	r24, 0x019E
    3142:	8f 5f       	subi	r24, 0xFF	; 255
    3144:	80 93 9e 01 	sts	0x019E, r24
				if (indexz >= 4) { // Check if password entered
    3148:	80 91 9e 01 	lds	r24, 0x019E
    314c:	84 30       	cpi	r24, 0x04	; 4
    314e:	08 f4       	brcc	.+2      	; 0x3152 <main+0x110>
    3150:	a2 cf       	rjmp	.-188    	; 0x3096 <main+0x54>
					if (strcmp(input, password) == 0) {
    3152:	89 e9       	ldi	r24, 0x99	; 153
    3154:	91 e0       	ldi	r25, 0x01	; 1
    3156:	28 e7       	ldi	r18, 0x78	; 120
    3158:	31 e0       	ldi	r19, 0x01	; 1
    315a:	b9 01       	movw	r22, r18
    315c:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <strcmp>
    3160:	00 97       	sbiw	r24, 0x00	; 0
    3162:	09 f0       	breq	.+2      	; 0x3166 <main+0x124>
    3164:	c8 c0       	rjmp	.+400    	; 0x32f6 <main+0x2b4>
						// Password is correct, perform action
						lcd_ES_tclear();
    3166:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <lcd_ES_tclear>
						Lcd_ES_tsendString("Welcome to Motor");
    316a:	81 e7       	ldi	r24, 0x71	; 113
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <Lcd_ES_tsendString>
						LCD_ES_tGoTo(1, 0);
    3172:	81 e0       	ldi	r24, 0x01	; 1
    3174:	60 e0       	ldi	r22, 0x00	; 0
    3176:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_ES_tGoTo>
						Lcd_ES_tsendString("Dash board");
    317a:	82 e8       	ldi	r24, 0x82	; 130
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <Lcd_ES_tsendString>
    3182:	fe 01       	movw	r30, r28
    3184:	e1 5a       	subi	r30, 0xA1	; 161
    3186:	ff 4f       	sbci	r31, 0xFF	; 255
    3188:	80 e0       	ldi	r24, 0x00	; 0
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	aa ef       	ldi	r26, 0xFA	; 250
    318e:	b4 e4       	ldi	r27, 0x44	; 68
    3190:	80 83       	st	Z, r24
    3192:	91 83       	std	Z+1, r25	; 0x01
    3194:	a2 83       	std	Z+2, r26	; 0x02
    3196:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3198:	8e 01       	movw	r16, r28
    319a:	05 5a       	subi	r16, 0xA5	; 165
    319c:	1f 4f       	sbci	r17, 0xFF	; 255
    319e:	fe 01       	movw	r30, r28
    31a0:	e1 5a       	subi	r30, 0xA1	; 161
    31a2:	ff 4f       	sbci	r31, 0xFF	; 255
    31a4:	60 81       	ld	r22, Z
    31a6:	71 81       	ldd	r23, Z+1	; 0x01
    31a8:	82 81       	ldd	r24, Z+2	; 0x02
    31aa:	93 81       	ldd	r25, Z+3	; 0x03
    31ac:	20 e0       	ldi	r18, 0x00	; 0
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	4a e7       	ldi	r20, 0x7A	; 122
    31b2:	55 e4       	ldi	r21, 0x45	; 69
    31b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b8:	dc 01       	movw	r26, r24
    31ba:	cb 01       	movw	r24, r22
    31bc:	f8 01       	movw	r30, r16
    31be:	80 83       	st	Z, r24
    31c0:	91 83       	std	Z+1, r25	; 0x01
    31c2:	a2 83       	std	Z+2, r26	; 0x02
    31c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31c6:	fe 01       	movw	r30, r28
    31c8:	e5 5a       	subi	r30, 0xA5	; 165
    31ca:	ff 4f       	sbci	r31, 0xFF	; 255
    31cc:	60 81       	ld	r22, Z
    31ce:	71 81       	ldd	r23, Z+1	; 0x01
    31d0:	82 81       	ldd	r24, Z+2	; 0x02
    31d2:	93 81       	ldd	r25, Z+3	; 0x03
    31d4:	20 e0       	ldi	r18, 0x00	; 0
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	40 e8       	ldi	r20, 0x80	; 128
    31da:	5f e3       	ldi	r21, 0x3F	; 63
    31dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31e0:	88 23       	and	r24, r24
    31e2:	44 f4       	brge	.+16     	; 0x31f4 <main+0x1b2>
		__ticks = 1;
    31e4:	fe 01       	movw	r30, r28
    31e6:	e7 5a       	subi	r30, 0xA7	; 167
    31e8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ea:	81 e0       	ldi	r24, 0x01	; 1
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	91 83       	std	Z+1, r25	; 0x01
    31f0:	80 83       	st	Z, r24
    31f2:	64 c0       	rjmp	.+200    	; 0x32bc <main+0x27a>
	else if (__tmp > 65535)
    31f4:	fe 01       	movw	r30, r28
    31f6:	e5 5a       	subi	r30, 0xA5	; 165
    31f8:	ff 4f       	sbci	r31, 0xFF	; 255
    31fa:	60 81       	ld	r22, Z
    31fc:	71 81       	ldd	r23, Z+1	; 0x01
    31fe:	82 81       	ldd	r24, Z+2	; 0x02
    3200:	93 81       	ldd	r25, Z+3	; 0x03
    3202:	20 e0       	ldi	r18, 0x00	; 0
    3204:	3f ef       	ldi	r19, 0xFF	; 255
    3206:	4f e7       	ldi	r20, 0x7F	; 127
    3208:	57 e4       	ldi	r21, 0x47	; 71
    320a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    320e:	18 16       	cp	r1, r24
    3210:	0c f0       	brlt	.+2      	; 0x3214 <main+0x1d2>
    3212:	43 c0       	rjmp	.+134    	; 0x329a <main+0x258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3214:	fe 01       	movw	r30, r28
    3216:	e1 5a       	subi	r30, 0xA1	; 161
    3218:	ff 4f       	sbci	r31, 0xFF	; 255
    321a:	60 81       	ld	r22, Z
    321c:	71 81       	ldd	r23, Z+1	; 0x01
    321e:	82 81       	ldd	r24, Z+2	; 0x02
    3220:	93 81       	ldd	r25, Z+3	; 0x03
    3222:	20 e0       	ldi	r18, 0x00	; 0
    3224:	30 e0       	ldi	r19, 0x00	; 0
    3226:	40 e2       	ldi	r20, 0x20	; 32
    3228:	51 e4       	ldi	r21, 0x41	; 65
    322a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    322e:	dc 01       	movw	r26, r24
    3230:	cb 01       	movw	r24, r22
    3232:	8e 01       	movw	r16, r28
    3234:	07 5a       	subi	r16, 0xA7	; 167
    3236:	1f 4f       	sbci	r17, 0xFF	; 255
    3238:	bc 01       	movw	r22, r24
    323a:	cd 01       	movw	r24, r26
    323c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3240:	dc 01       	movw	r26, r24
    3242:	cb 01       	movw	r24, r22
    3244:	f8 01       	movw	r30, r16
    3246:	91 83       	std	Z+1, r25	; 0x01
    3248:	80 83       	st	Z, r24
    324a:	1f c0       	rjmp	.+62     	; 0x328a <main+0x248>
    324c:	fe 01       	movw	r30, r28
    324e:	e9 5a       	subi	r30, 0xA9	; 169
    3250:	ff 4f       	sbci	r31, 0xFF	; 255
    3252:	80 e9       	ldi	r24, 0x90	; 144
    3254:	91 e0       	ldi	r25, 0x01	; 1
    3256:	91 83       	std	Z+1, r25	; 0x01
    3258:	80 83       	st	Z, r24
    325a:	fe 01       	movw	r30, r28
    325c:	e9 5a       	subi	r30, 0xA9	; 169
    325e:	ff 4f       	sbci	r31, 0xFF	; 255
    3260:	80 81       	ld	r24, Z
    3262:	91 81       	ldd	r25, Z+1	; 0x01
    3264:	01 97       	sbiw	r24, 0x01	; 1
    3266:	f1 f7       	brne	.-4      	; 0x3264 <main+0x222>
    3268:	fe 01       	movw	r30, r28
    326a:	e9 5a       	subi	r30, 0xA9	; 169
    326c:	ff 4f       	sbci	r31, 0xFF	; 255
    326e:	91 83       	std	Z+1, r25	; 0x01
    3270:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3272:	de 01       	movw	r26, r28
    3274:	a7 5a       	subi	r26, 0xA7	; 167
    3276:	bf 4f       	sbci	r27, 0xFF	; 255
    3278:	fe 01       	movw	r30, r28
    327a:	e7 5a       	subi	r30, 0xA7	; 167
    327c:	ff 4f       	sbci	r31, 0xFF	; 255
    327e:	80 81       	ld	r24, Z
    3280:	91 81       	ldd	r25, Z+1	; 0x01
    3282:	01 97       	sbiw	r24, 0x01	; 1
    3284:	11 96       	adiw	r26, 0x01	; 1
    3286:	9c 93       	st	X, r25
    3288:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    328a:	fe 01       	movw	r30, r28
    328c:	e7 5a       	subi	r30, 0xA7	; 167
    328e:	ff 4f       	sbci	r31, 0xFF	; 255
    3290:	80 81       	ld	r24, Z
    3292:	91 81       	ldd	r25, Z+1	; 0x01
    3294:	00 97       	sbiw	r24, 0x00	; 0
    3296:	d1 f6       	brne	.-76     	; 0x324c <main+0x20a>
    3298:	28 c0       	rjmp	.+80     	; 0x32ea <main+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    329a:	8e 01       	movw	r16, r28
    329c:	07 5a       	subi	r16, 0xA7	; 167
    329e:	1f 4f       	sbci	r17, 0xFF	; 255
    32a0:	fe 01       	movw	r30, r28
    32a2:	e5 5a       	subi	r30, 0xA5	; 165
    32a4:	ff 4f       	sbci	r31, 0xFF	; 255
    32a6:	60 81       	ld	r22, Z
    32a8:	71 81       	ldd	r23, Z+1	; 0x01
    32aa:	82 81       	ldd	r24, Z+2	; 0x02
    32ac:	93 81       	ldd	r25, Z+3	; 0x03
    32ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b2:	dc 01       	movw	r26, r24
    32b4:	cb 01       	movw	r24, r22
    32b6:	f8 01       	movw	r30, r16
    32b8:	91 83       	std	Z+1, r25	; 0x01
    32ba:	80 83       	st	Z, r24
    32bc:	de 01       	movw	r26, r28
    32be:	ab 5a       	subi	r26, 0xAB	; 171
    32c0:	bf 4f       	sbci	r27, 0xFF	; 255
    32c2:	fe 01       	movw	r30, r28
    32c4:	e7 5a       	subi	r30, 0xA7	; 167
    32c6:	ff 4f       	sbci	r31, 0xFF	; 255
    32c8:	80 81       	ld	r24, Z
    32ca:	91 81       	ldd	r25, Z+1	; 0x01
    32cc:	11 96       	adiw	r26, 0x01	; 1
    32ce:	9c 93       	st	X, r25
    32d0:	8e 93       	st	-X, r24
    32d2:	fe 01       	movw	r30, r28
    32d4:	eb 5a       	subi	r30, 0xAB	; 171
    32d6:	ff 4f       	sbci	r31, 0xFF	; 255
    32d8:	80 81       	ld	r24, Z
    32da:	91 81       	ldd	r25, Z+1	; 0x01
    32dc:	01 97       	sbiw	r24, 0x01	; 1
    32de:	f1 f7       	brne	.-4      	; 0x32dc <main+0x29a>
    32e0:	fe 01       	movw	r30, r28
    32e2:	eb 5a       	subi	r30, 0xAB	; 171
    32e4:	ff 4f       	sbci	r31, 0xFF	; 255
    32e6:	91 83       	std	Z+1, r25	; 0x01
    32e8:	80 83       	st	Z, r24
						_delay_ms(2000);
						currentState = STATE_MOTOR_OPTIONS;
    32ea:	fe 01       	movw	r30, r28
    32ec:	ed 59       	subi	r30, 0x9D	; 157
    32ee:	ff 4f       	sbci	r31, 0xFF	; 255
    32f0:	81 e0       	ldi	r24, 0x01	; 1
    32f2:	80 83       	st	Z, r24
    32f4:	d0 ce       	rjmp	.-608    	; 0x3096 <main+0x54>
					}
					else {
						// Password is incorrect, reset input
						lcd_ES_tclear();
    32f6:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <lcd_ES_tclear>
						Lcd_ES_tsendString("Wrong Password");
    32fa:	8d e8       	ldi	r24, 0x8D	; 141
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <Lcd_ES_tsendString>
						memset(input, '\0', sizeof(input));
    3302:	89 e9       	ldi	r24, 0x99	; 153
    3304:	91 e0       	ldi	r25, 0x01	; 1
    3306:	60 e0       	ldi	r22, 0x00	; 0
    3308:	70 e0       	ldi	r23, 0x00	; 0
    330a:	45 e0       	ldi	r20, 0x05	; 5
    330c:	50 e0       	ldi	r21, 0x00	; 0
    330e:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <memset>
						indexz = 0;
    3312:	10 92 9e 01 	sts	0x019E, r1
    3316:	fe 01       	movw	r30, r28
    3318:	ef 5a       	subi	r30, 0xAF	; 175
    331a:	ff 4f       	sbci	r31, 0xFF	; 255
    331c:	80 e0       	ldi	r24, 0x00	; 0
    331e:	90 e8       	ldi	r25, 0x80	; 128
    3320:	ab eb       	ldi	r26, 0xBB	; 187
    3322:	b4 e4       	ldi	r27, 0x44	; 68
    3324:	80 83       	st	Z, r24
    3326:	91 83       	std	Z+1, r25	; 0x01
    3328:	a2 83       	std	Z+2, r26	; 0x02
    332a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    332c:	8e 01       	movw	r16, r28
    332e:	03 5b       	subi	r16, 0xB3	; 179
    3330:	1f 4f       	sbci	r17, 0xFF	; 255
    3332:	fe 01       	movw	r30, r28
    3334:	ef 5a       	subi	r30, 0xAF	; 175
    3336:	ff 4f       	sbci	r31, 0xFF	; 255
    3338:	60 81       	ld	r22, Z
    333a:	71 81       	ldd	r23, Z+1	; 0x01
    333c:	82 81       	ldd	r24, Z+2	; 0x02
    333e:	93 81       	ldd	r25, Z+3	; 0x03
    3340:	20 e0       	ldi	r18, 0x00	; 0
    3342:	30 e0       	ldi	r19, 0x00	; 0
    3344:	4a e7       	ldi	r20, 0x7A	; 122
    3346:	55 e4       	ldi	r21, 0x45	; 69
    3348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    334c:	dc 01       	movw	r26, r24
    334e:	cb 01       	movw	r24, r22
    3350:	f8 01       	movw	r30, r16
    3352:	80 83       	st	Z, r24
    3354:	91 83       	std	Z+1, r25	; 0x01
    3356:	a2 83       	std	Z+2, r26	; 0x02
    3358:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    335a:	fe 01       	movw	r30, r28
    335c:	e3 5b       	subi	r30, 0xB3	; 179
    335e:	ff 4f       	sbci	r31, 0xFF	; 255
    3360:	60 81       	ld	r22, Z
    3362:	71 81       	ldd	r23, Z+1	; 0x01
    3364:	82 81       	ldd	r24, Z+2	; 0x02
    3366:	93 81       	ldd	r25, Z+3	; 0x03
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	40 e8       	ldi	r20, 0x80	; 128
    336e:	5f e3       	ldi	r21, 0x3F	; 63
    3370:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3374:	88 23       	and	r24, r24
    3376:	44 f4       	brge	.+16     	; 0x3388 <main+0x346>
		__ticks = 1;
    3378:	fe 01       	movw	r30, r28
    337a:	e5 5b       	subi	r30, 0xB5	; 181
    337c:	ff 4f       	sbci	r31, 0xFF	; 255
    337e:	81 e0       	ldi	r24, 0x01	; 1
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	91 83       	std	Z+1, r25	; 0x01
    3384:	80 83       	st	Z, r24
    3386:	64 c0       	rjmp	.+200    	; 0x3450 <main+0x40e>
	else if (__tmp > 65535)
    3388:	fe 01       	movw	r30, r28
    338a:	e3 5b       	subi	r30, 0xB3	; 179
    338c:	ff 4f       	sbci	r31, 0xFF	; 255
    338e:	60 81       	ld	r22, Z
    3390:	71 81       	ldd	r23, Z+1	; 0x01
    3392:	82 81       	ldd	r24, Z+2	; 0x02
    3394:	93 81       	ldd	r25, Z+3	; 0x03
    3396:	20 e0       	ldi	r18, 0x00	; 0
    3398:	3f ef       	ldi	r19, 0xFF	; 255
    339a:	4f e7       	ldi	r20, 0x7F	; 127
    339c:	57 e4       	ldi	r21, 0x47	; 71
    339e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33a2:	18 16       	cp	r1, r24
    33a4:	0c f0       	brlt	.+2      	; 0x33a8 <main+0x366>
    33a6:	43 c0       	rjmp	.+134    	; 0x342e <main+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33a8:	fe 01       	movw	r30, r28
    33aa:	ef 5a       	subi	r30, 0xAF	; 175
    33ac:	ff 4f       	sbci	r31, 0xFF	; 255
    33ae:	60 81       	ld	r22, Z
    33b0:	71 81       	ldd	r23, Z+1	; 0x01
    33b2:	82 81       	ldd	r24, Z+2	; 0x02
    33b4:	93 81       	ldd	r25, Z+3	; 0x03
    33b6:	20 e0       	ldi	r18, 0x00	; 0
    33b8:	30 e0       	ldi	r19, 0x00	; 0
    33ba:	40 e2       	ldi	r20, 0x20	; 32
    33bc:	51 e4       	ldi	r21, 0x41	; 65
    33be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c2:	dc 01       	movw	r26, r24
    33c4:	cb 01       	movw	r24, r22
    33c6:	8e 01       	movw	r16, r28
    33c8:	05 5b       	subi	r16, 0xB5	; 181
    33ca:	1f 4f       	sbci	r17, 0xFF	; 255
    33cc:	bc 01       	movw	r22, r24
    33ce:	cd 01       	movw	r24, r26
    33d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d4:	dc 01       	movw	r26, r24
    33d6:	cb 01       	movw	r24, r22
    33d8:	f8 01       	movw	r30, r16
    33da:	91 83       	std	Z+1, r25	; 0x01
    33dc:	80 83       	st	Z, r24
    33de:	1f c0       	rjmp	.+62     	; 0x341e <main+0x3dc>
    33e0:	fe 01       	movw	r30, r28
    33e2:	e7 5b       	subi	r30, 0xB7	; 183
    33e4:	ff 4f       	sbci	r31, 0xFF	; 255
    33e6:	80 e9       	ldi	r24, 0x90	; 144
    33e8:	91 e0       	ldi	r25, 0x01	; 1
    33ea:	91 83       	std	Z+1, r25	; 0x01
    33ec:	80 83       	st	Z, r24
    33ee:	fe 01       	movw	r30, r28
    33f0:	e7 5b       	subi	r30, 0xB7	; 183
    33f2:	ff 4f       	sbci	r31, 0xFF	; 255
    33f4:	80 81       	ld	r24, Z
    33f6:	91 81       	ldd	r25, Z+1	; 0x01
    33f8:	01 97       	sbiw	r24, 0x01	; 1
    33fa:	f1 f7       	brne	.-4      	; 0x33f8 <main+0x3b6>
    33fc:	fe 01       	movw	r30, r28
    33fe:	e7 5b       	subi	r30, 0xB7	; 183
    3400:	ff 4f       	sbci	r31, 0xFF	; 255
    3402:	91 83       	std	Z+1, r25	; 0x01
    3404:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3406:	de 01       	movw	r26, r28
    3408:	a5 5b       	subi	r26, 0xB5	; 181
    340a:	bf 4f       	sbci	r27, 0xFF	; 255
    340c:	fe 01       	movw	r30, r28
    340e:	e5 5b       	subi	r30, 0xB5	; 181
    3410:	ff 4f       	sbci	r31, 0xFF	; 255
    3412:	80 81       	ld	r24, Z
    3414:	91 81       	ldd	r25, Z+1	; 0x01
    3416:	01 97       	sbiw	r24, 0x01	; 1
    3418:	11 96       	adiw	r26, 0x01	; 1
    341a:	9c 93       	st	X, r25
    341c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    341e:	fe 01       	movw	r30, r28
    3420:	e5 5b       	subi	r30, 0xB5	; 181
    3422:	ff 4f       	sbci	r31, 0xFF	; 255
    3424:	80 81       	ld	r24, Z
    3426:	91 81       	ldd	r25, Z+1	; 0x01
    3428:	00 97       	sbiw	r24, 0x00	; 0
    342a:	d1 f6       	brne	.-76     	; 0x33e0 <main+0x39e>
    342c:	27 c0       	rjmp	.+78     	; 0x347c <main+0x43a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    342e:	8e 01       	movw	r16, r28
    3430:	05 5b       	subi	r16, 0xB5	; 181
    3432:	1f 4f       	sbci	r17, 0xFF	; 255
    3434:	fe 01       	movw	r30, r28
    3436:	e3 5b       	subi	r30, 0xB3	; 179
    3438:	ff 4f       	sbci	r31, 0xFF	; 255
    343a:	60 81       	ld	r22, Z
    343c:	71 81       	ldd	r23, Z+1	; 0x01
    343e:	82 81       	ldd	r24, Z+2	; 0x02
    3440:	93 81       	ldd	r25, Z+3	; 0x03
    3442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3446:	dc 01       	movw	r26, r24
    3448:	cb 01       	movw	r24, r22
    344a:	f8 01       	movw	r30, r16
    344c:	91 83       	std	Z+1, r25	; 0x01
    344e:	80 83       	st	Z, r24
    3450:	de 01       	movw	r26, r28
    3452:	a9 5b       	subi	r26, 0xB9	; 185
    3454:	bf 4f       	sbci	r27, 0xFF	; 255
    3456:	fe 01       	movw	r30, r28
    3458:	e5 5b       	subi	r30, 0xB5	; 181
    345a:	ff 4f       	sbci	r31, 0xFF	; 255
    345c:	80 81       	ld	r24, Z
    345e:	91 81       	ldd	r25, Z+1	; 0x01
    3460:	8d 93       	st	X+, r24
    3462:	9c 93       	st	X, r25
    3464:	fe 01       	movw	r30, r28
    3466:	e9 5b       	subi	r30, 0xB9	; 185
    3468:	ff 4f       	sbci	r31, 0xFF	; 255
    346a:	80 81       	ld	r24, Z
    346c:	91 81       	ldd	r25, Z+1	; 0x01
    346e:	01 97       	sbiw	r24, 0x01	; 1
    3470:	f1 f7       	brne	.-4      	; 0x346e <main+0x42c>
    3472:	fe 01       	movw	r30, r28
    3474:	e9 5b       	subi	r30, 0xB9	; 185
    3476:	ff 4f       	sbci	r31, 0xFF	; 255
    3478:	91 83       	std	Z+1, r25	; 0x01
    347a:	80 83       	st	Z, r24
						_delay_ms(1500);
						flag=0;
    347c:	10 92 98 01 	sts	0x0198, r1
						count++;
    3480:	de 01       	movw	r26, r28
    3482:	ab 59       	subi	r26, 0x9B	; 155
    3484:	bf 4f       	sbci	r27, 0xFF	; 255
    3486:	fe 01       	movw	r30, r28
    3488:	eb 59       	subi	r30, 0x9B	; 155
    348a:	ff 4f       	sbci	r31, 0xFF	; 255
    348c:	80 81       	ld	r24, Z
    348e:	8f 5f       	subi	r24, 0xFF	; 255
    3490:	8c 93       	st	X, r24
						lcd_ES_tclear();
    3492:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <lcd_ES_tclear>
						Lcd_ES_tsendString("Try again");
    3496:	8c e9       	ldi	r24, 0x9C	; 156
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <Lcd_ES_tsendString>
						LCD_ES_tGoTo(1, 5);
    349e:	81 e0       	ldi	r24, 0x01	; 1
    34a0:	65 e0       	ldi	r22, 0x05	; 5
    34a2:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_ES_tGoTo>
						if(count == 3){
    34a6:	fe 01       	movw	r30, r28
    34a8:	eb 59       	subi	r30, 0x9B	; 155
    34aa:	ff 4f       	sbci	r31, 0xFF	; 255
    34ac:	80 81       	ld	r24, Z
    34ae:	83 30       	cpi	r24, 0x03	; 3
    34b0:	09 f0       	breq	.+2      	; 0x34b4 <main+0x472>
    34b2:	f1 cd       	rjmp	.-1054   	; 0x3096 <main+0x54>
							lcd_ES_tclear();
    34b4:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <lcd_ES_tclear>
							Lcd_ES_tsendString("Blocked !!!");
    34b8:	86 ea       	ldi	r24, 0xA6	; 166
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <Lcd_ES_tsendString>
							count=0;
    34c0:	fe 01       	movw	r30, r28
    34c2:	eb 59       	subi	r30, 0x9B	; 155
    34c4:	ff 4f       	sbci	r31, 0xFF	; 255
    34c6:	10 82       	st	Z, r1
    34c8:	e6 cd       	rjmp	.-1076   	; 0x3096 <main+0x54>
			}


			break;
		case STATE_MOTOR_OPTIONS:
			if (!gettingMotorOption) {
    34ca:	80 91 a5 01 	lds	r24, 0x01A5
    34ce:	88 23       	and	r24, r24
    34d0:	89 f4       	brne	.+34     	; 0x34f4 <main+0x4b2>
				lcd_ES_tclear();
    34d2:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <lcd_ES_tclear>
				Lcd_ES_tsendString("1- DC Motor");
    34d6:	82 eb       	ldi	r24, 0xB2	; 178
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <Lcd_ES_tsendString>
				LCD_ES_tGoTo(1, 0);
    34de:	81 e0       	ldi	r24, 0x01	; 1
    34e0:	60 e0       	ldi	r22, 0x00	; 0
    34e2:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_ES_tGoTo>
				Lcd_ES_tsendString("2- Stepper");
    34e6:	8e eb       	ldi	r24, 0xBE	; 190
    34e8:	90 e0       	ldi	r25, 0x00	; 0
    34ea:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <Lcd_ES_tsendString>
				gettingMotorOption = 1;
    34ee:	81 e0       	ldi	r24, 0x01	; 1
    34f0:	80 93 a5 01 	sts	0x01A5, r24
			}

			KPD_ES_tGetKeyPressed(&Option);
    34f4:	ce 01       	movw	r24, r28
    34f6:	89 59       	subi	r24, 0x99	; 153
    34f8:	9f 4f       	sbci	r25, 0xFF	; 255
    34fa:	0e 94 5d 16 	call	0x2cba	; 0x2cba <KPD_ES_tGetKeyPressed>
			if (Option != KPD_U8_NOT_PRESSED) {
    34fe:	fe 01       	movw	r30, r28
    3500:	e9 59       	subi	r30, 0x99	; 153
    3502:	ff 4f       	sbci	r31, 0xFF	; 255
    3504:	80 81       	ld	r24, Z
    3506:	8f 3f       	cpi	r24, 0xFF	; 255
    3508:	09 f4       	brne	.+2      	; 0x350c <main+0x4ca>
    350a:	c5 cd       	rjmp	.-1142   	; 0x3096 <main+0x54>
				if (Option == '1') {  // DC Motor
    350c:	fe 01       	movw	r30, r28
    350e:	e9 59       	subi	r30, 0x99	; 153
    3510:	ff 4f       	sbci	r31, 0xFF	; 255
    3512:	80 81       	ld	r24, Z
    3514:	81 33       	cpi	r24, 0x31	; 49
    3516:	41 f4       	brne	.+16     	; 0x3528 <main+0x4e6>
					gettingMotorOption = 0;
    3518:	10 92 a5 01 	sts	0x01A5, r1
					currentState = STATE_DC_MOTOR_MOVE;
    351c:	fe 01       	movw	r30, r28
    351e:	ed 59       	subi	r30, 0x9D	; 157
    3520:	ff 4f       	sbci	r31, 0xFF	; 255
    3522:	82 e0       	ldi	r24, 0x02	; 2
    3524:	80 83       	st	Z, r24
    3526:	b7 cd       	rjmp	.-1170   	; 0x3096 <main+0x54>
				} else if (Option == '2') {  // Stepper Motor
    3528:	fe 01       	movw	r30, r28
    352a:	e9 59       	subi	r30, 0x99	; 153
    352c:	ff 4f       	sbci	r31, 0xFF	; 255
    352e:	80 81       	ld	r24, Z
    3530:	82 33       	cpi	r24, 0x32	; 50
    3532:	31 f4       	brne	.+12     	; 0x3540 <main+0x4fe>
					currentState = STATE_STEPPER_MOVE;
    3534:	fe 01       	movw	r30, r28
    3536:	ed 59       	subi	r30, 0x9D	; 157
    3538:	ff 4f       	sbci	r31, 0xFF	; 255
    353a:	83 e0       	ldi	r24, 0x03	; 3
    353c:	80 83       	st	Z, r24
    353e:	ab cd       	rjmp	.-1194   	; 0x3096 <main+0x54>
				} else {
					lcd_ES_tclear();
    3540:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <lcd_ES_tclear>
					Lcd_ES_tsendString("Invalid Option");
    3544:	89 ec       	ldi	r24, 0xC9	; 201
    3546:	90 e0       	ldi	r25, 0x00	; 0
    3548:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <Lcd_ES_tsendString>
    354c:	fe 01       	movw	r30, r28
    354e:	ed 5b       	subi	r30, 0xBD	; 189
    3550:	ff 4f       	sbci	r31, 0xFF	; 255
    3552:	80 e0       	ldi	r24, 0x00	; 0
    3554:	90 e0       	ldi	r25, 0x00	; 0
    3556:	aa ef       	ldi	r26, 0xFA	; 250
    3558:	b4 e4       	ldi	r27, 0x44	; 68
    355a:	80 83       	st	Z, r24
    355c:	91 83       	std	Z+1, r25	; 0x01
    355e:	a2 83       	std	Z+2, r26	; 0x02
    3560:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3562:	8e 01       	movw	r16, r28
    3564:	01 5c       	subi	r16, 0xC1	; 193
    3566:	1f 4f       	sbci	r17, 0xFF	; 255
    3568:	fe 01       	movw	r30, r28
    356a:	ed 5b       	subi	r30, 0xBD	; 189
    356c:	ff 4f       	sbci	r31, 0xFF	; 255
    356e:	60 81       	ld	r22, Z
    3570:	71 81       	ldd	r23, Z+1	; 0x01
    3572:	82 81       	ldd	r24, Z+2	; 0x02
    3574:	93 81       	ldd	r25, Z+3	; 0x03
    3576:	20 e0       	ldi	r18, 0x00	; 0
    3578:	30 e0       	ldi	r19, 0x00	; 0
    357a:	4a e7       	ldi	r20, 0x7A	; 122
    357c:	55 e4       	ldi	r21, 0x45	; 69
    357e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3582:	dc 01       	movw	r26, r24
    3584:	cb 01       	movw	r24, r22
    3586:	f8 01       	movw	r30, r16
    3588:	80 83       	st	Z, r24
    358a:	91 83       	std	Z+1, r25	; 0x01
    358c:	a2 83       	std	Z+2, r26	; 0x02
    358e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3590:	fe 01       	movw	r30, r28
    3592:	ff 96       	adiw	r30, 0x3f	; 63
    3594:	60 81       	ld	r22, Z
    3596:	71 81       	ldd	r23, Z+1	; 0x01
    3598:	82 81       	ldd	r24, Z+2	; 0x02
    359a:	93 81       	ldd	r25, Z+3	; 0x03
    359c:	20 e0       	ldi	r18, 0x00	; 0
    359e:	30 e0       	ldi	r19, 0x00	; 0
    35a0:	40 e8       	ldi	r20, 0x80	; 128
    35a2:	5f e3       	ldi	r21, 0x3F	; 63
    35a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35a8:	88 23       	and	r24, r24
    35aa:	2c f4       	brge	.+10     	; 0x35b6 <main+0x574>
		__ticks = 1;
    35ac:	81 e0       	ldi	r24, 0x01	; 1
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	9e af       	std	Y+62, r25	; 0x3e
    35b2:	8d af       	std	Y+61, r24	; 0x3d
    35b4:	46 c0       	rjmp	.+140    	; 0x3642 <main+0x600>
	else if (__tmp > 65535)
    35b6:	fe 01       	movw	r30, r28
    35b8:	ff 96       	adiw	r30, 0x3f	; 63
    35ba:	60 81       	ld	r22, Z
    35bc:	71 81       	ldd	r23, Z+1	; 0x01
    35be:	82 81       	ldd	r24, Z+2	; 0x02
    35c0:	93 81       	ldd	r25, Z+3	; 0x03
    35c2:	20 e0       	ldi	r18, 0x00	; 0
    35c4:	3f ef       	ldi	r19, 0xFF	; 255
    35c6:	4f e7       	ldi	r20, 0x7F	; 127
    35c8:	57 e4       	ldi	r21, 0x47	; 71
    35ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35ce:	18 16       	cp	r1, r24
    35d0:	64 f5       	brge	.+88     	; 0x362a <main+0x5e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35d2:	fe 01       	movw	r30, r28
    35d4:	ed 5b       	subi	r30, 0xBD	; 189
    35d6:	ff 4f       	sbci	r31, 0xFF	; 255
    35d8:	60 81       	ld	r22, Z
    35da:	71 81       	ldd	r23, Z+1	; 0x01
    35dc:	82 81       	ldd	r24, Z+2	; 0x02
    35de:	93 81       	ldd	r25, Z+3	; 0x03
    35e0:	20 e0       	ldi	r18, 0x00	; 0
    35e2:	30 e0       	ldi	r19, 0x00	; 0
    35e4:	40 e2       	ldi	r20, 0x20	; 32
    35e6:	51 e4       	ldi	r21, 0x41	; 65
    35e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ec:	dc 01       	movw	r26, r24
    35ee:	cb 01       	movw	r24, r22
    35f0:	bc 01       	movw	r22, r24
    35f2:	cd 01       	movw	r24, r26
    35f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f8:	dc 01       	movw	r26, r24
    35fa:	cb 01       	movw	r24, r22
    35fc:	9e af       	std	Y+62, r25	; 0x3e
    35fe:	8d af       	std	Y+61, r24	; 0x3d
    3600:	0f c0       	rjmp	.+30     	; 0x3620 <main+0x5de>
    3602:	80 e9       	ldi	r24, 0x90	; 144
    3604:	91 e0       	ldi	r25, 0x01	; 1
    3606:	9c af       	std	Y+60, r25	; 0x3c
    3608:	8b af       	std	Y+59, r24	; 0x3b
    360a:	8b ad       	ldd	r24, Y+59	; 0x3b
    360c:	9c ad       	ldd	r25, Y+60	; 0x3c
    360e:	01 97       	sbiw	r24, 0x01	; 1
    3610:	f1 f7       	brne	.-4      	; 0x360e <main+0x5cc>
    3612:	9c af       	std	Y+60, r25	; 0x3c
    3614:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3616:	8d ad       	ldd	r24, Y+61	; 0x3d
    3618:	9e ad       	ldd	r25, Y+62	; 0x3e
    361a:	01 97       	sbiw	r24, 0x01	; 1
    361c:	9e af       	std	Y+62, r25	; 0x3e
    361e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3620:	8d ad       	ldd	r24, Y+61	; 0x3d
    3622:	9e ad       	ldd	r25, Y+62	; 0x3e
    3624:	00 97       	sbiw	r24, 0x00	; 0
    3626:	69 f7       	brne	.-38     	; 0x3602 <main+0x5c0>
    3628:	16 c0       	rjmp	.+44     	; 0x3656 <main+0x614>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    362a:	fe 01       	movw	r30, r28
    362c:	ff 96       	adiw	r30, 0x3f	; 63
    362e:	60 81       	ld	r22, Z
    3630:	71 81       	ldd	r23, Z+1	; 0x01
    3632:	82 81       	ldd	r24, Z+2	; 0x02
    3634:	93 81       	ldd	r25, Z+3	; 0x03
    3636:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    363a:	dc 01       	movw	r26, r24
    363c:	cb 01       	movw	r24, r22
    363e:	9e af       	std	Y+62, r25	; 0x3e
    3640:	8d af       	std	Y+61, r24	; 0x3d
    3642:	8d ad       	ldd	r24, Y+61	; 0x3d
    3644:	9e ad       	ldd	r25, Y+62	; 0x3e
    3646:	9a af       	std	Y+58, r25	; 0x3a
    3648:	89 af       	std	Y+57, r24	; 0x39
    364a:	89 ad       	ldd	r24, Y+57	; 0x39
    364c:	9a ad       	ldd	r25, Y+58	; 0x3a
    364e:	01 97       	sbiw	r24, 0x01	; 1
    3650:	f1 f7       	brne	.-4      	; 0x364e <main+0x60c>
    3652:	9a af       	std	Y+58, r25	; 0x3a
    3654:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(2000);
					gettingMotorOption=0;
    3656:	10 92 a5 01 	sts	0x01A5, r1
					currentState = STATE_MOTOR_OPTIONS;
    365a:	fe 01       	movw	r30, r28
    365c:	ed 59       	subi	r30, 0x9D	; 157
    365e:	ff 4f       	sbci	r31, 0xFF	; 255
    3660:	81 e0       	ldi	r24, 0x01	; 1
    3662:	80 83       	st	Z, r24
    3664:	18 cd       	rjmp	.-1488   	; 0x3096 <main+0x54>
				}
			}
			break;

		case STATE_DC_MOTOR_MOVE:
			if (!gettingMovingOption) {
    3666:	80 91 a6 01 	lds	r24, 0x01A6
    366a:	88 23       	and	r24, r24
    366c:	89 f4       	brne	.+34     	; 0x3690 <main+0x64e>
				lcd_ES_tclear();
    366e:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <lcd_ES_tclear>
				Lcd_ES_tsendString("1- Rotate CW");
    3672:	88 ed       	ldi	r24, 0xD8	; 216
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <Lcd_ES_tsendString>
				LCD_ES_tGoTo(1, 0);
    367a:	81 e0       	ldi	r24, 0x01	; 1
    367c:	60 e0       	ldi	r22, 0x00	; 0
    367e:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_ES_tGoTo>
				Lcd_ES_tsendString("2- Rotate CCW");
    3682:	85 ee       	ldi	r24, 0xE5	; 229
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <Lcd_ES_tsendString>
				gettingMovingOption = 1;
    368a:	81 e0       	ldi	r24, 0x01	; 1
    368c:	80 93 a6 01 	sts	0x01A6, r24
			}

			KPD_ES_tGetKeyPressed(&Option2);
    3690:	ce 01       	movw	r24, r28
    3692:	88 59       	subi	r24, 0x98	; 152
    3694:	9f 4f       	sbci	r25, 0xFF	; 255
    3696:	0e 94 5d 16 	call	0x2cba	; 0x2cba <KPD_ES_tGetKeyPressed>
			if (Option2 != KPD_U8_NOT_PRESSED) {
    369a:	fe 01       	movw	r30, r28
    369c:	e8 59       	subi	r30, 0x98	; 152
    369e:	ff 4f       	sbci	r31, 0xFF	; 255
    36a0:	80 81       	ld	r24, Z
    36a2:	8f 3f       	cpi	r24, 0xFF	; 255
    36a4:	09 f4       	brne	.+2      	; 0x36a8 <main+0x666>
    36a6:	f7 cc       	rjmp	.-1554   	; 0x3096 <main+0x54>
				if (Option2 == '1') {
    36a8:	fe 01       	movw	r30, r28
    36aa:	e8 59       	subi	r30, 0x98	; 152
    36ac:	ff 4f       	sbci	r31, 0xFF	; 255
    36ae:	80 81       	ld	r24, Z
    36b0:	81 33       	cpi	r24, 0x31	; 49
    36b2:	09 f0       	breq	.+2      	; 0x36b6 <main+0x674>
    36b4:	81 c0       	rjmp	.+258    	; 0x37b8 <main+0x776>
					DC_Motor_Move(DC_MOTOR_0, DC_MOTOR_CW);
    36b6:	80 e0       	ldi	r24, 0x00	; 0
    36b8:	60 e0       	ldi	r22, 0x00	; 0
    36ba:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <DC_Motor_Move>
    36be:	80 e0       	ldi	r24, 0x00	; 0
    36c0:	90 e8       	ldi	r25, 0x80	; 128
    36c2:	ab e3       	ldi	r26, 0x3B	; 59
    36c4:	b5 e4       	ldi	r27, 0x45	; 69
    36c6:	8d ab       	std	Y+53, r24	; 0x35
    36c8:	9e ab       	std	Y+54, r25	; 0x36
    36ca:	af ab       	std	Y+55, r26	; 0x37
    36cc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36ce:	6d a9       	ldd	r22, Y+53	; 0x35
    36d0:	7e a9       	ldd	r23, Y+54	; 0x36
    36d2:	8f a9       	ldd	r24, Y+55	; 0x37
    36d4:	98 ad       	ldd	r25, Y+56	; 0x38
    36d6:	20 e0       	ldi	r18, 0x00	; 0
    36d8:	30 e0       	ldi	r19, 0x00	; 0
    36da:	4a e7       	ldi	r20, 0x7A	; 122
    36dc:	55 e4       	ldi	r21, 0x45	; 69
    36de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36e2:	dc 01       	movw	r26, r24
    36e4:	cb 01       	movw	r24, r22
    36e6:	89 ab       	std	Y+49, r24	; 0x31
    36e8:	9a ab       	std	Y+50, r25	; 0x32
    36ea:	ab ab       	std	Y+51, r26	; 0x33
    36ec:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    36ee:	69 a9       	ldd	r22, Y+49	; 0x31
    36f0:	7a a9       	ldd	r23, Y+50	; 0x32
    36f2:	8b a9       	ldd	r24, Y+51	; 0x33
    36f4:	9c a9       	ldd	r25, Y+52	; 0x34
    36f6:	20 e0       	ldi	r18, 0x00	; 0
    36f8:	30 e0       	ldi	r19, 0x00	; 0
    36fa:	40 e8       	ldi	r20, 0x80	; 128
    36fc:	5f e3       	ldi	r21, 0x3F	; 63
    36fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3702:	88 23       	and	r24, r24
    3704:	2c f4       	brge	.+10     	; 0x3710 <main+0x6ce>
		__ticks = 1;
    3706:	81 e0       	ldi	r24, 0x01	; 1
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	98 ab       	std	Y+48, r25	; 0x30
    370c:	8f a7       	std	Y+47, r24	; 0x2f
    370e:	3f c0       	rjmp	.+126    	; 0x378e <main+0x74c>
	else if (__tmp > 65535)
    3710:	69 a9       	ldd	r22, Y+49	; 0x31
    3712:	7a a9       	ldd	r23, Y+50	; 0x32
    3714:	8b a9       	ldd	r24, Y+51	; 0x33
    3716:	9c a9       	ldd	r25, Y+52	; 0x34
    3718:	20 e0       	ldi	r18, 0x00	; 0
    371a:	3f ef       	ldi	r19, 0xFF	; 255
    371c:	4f e7       	ldi	r20, 0x7F	; 127
    371e:	57 e4       	ldi	r21, 0x47	; 71
    3720:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3724:	18 16       	cp	r1, r24
    3726:	4c f5       	brge	.+82     	; 0x377a <main+0x738>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3728:	6d a9       	ldd	r22, Y+53	; 0x35
    372a:	7e a9       	ldd	r23, Y+54	; 0x36
    372c:	8f a9       	ldd	r24, Y+55	; 0x37
    372e:	98 ad       	ldd	r25, Y+56	; 0x38
    3730:	20 e0       	ldi	r18, 0x00	; 0
    3732:	30 e0       	ldi	r19, 0x00	; 0
    3734:	40 e2       	ldi	r20, 0x20	; 32
    3736:	51 e4       	ldi	r21, 0x41	; 65
    3738:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    373c:	dc 01       	movw	r26, r24
    373e:	cb 01       	movw	r24, r22
    3740:	bc 01       	movw	r22, r24
    3742:	cd 01       	movw	r24, r26
    3744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3748:	dc 01       	movw	r26, r24
    374a:	cb 01       	movw	r24, r22
    374c:	98 ab       	std	Y+48, r25	; 0x30
    374e:	8f a7       	std	Y+47, r24	; 0x2f
    3750:	0f c0       	rjmp	.+30     	; 0x3770 <main+0x72e>
    3752:	80 e9       	ldi	r24, 0x90	; 144
    3754:	91 e0       	ldi	r25, 0x01	; 1
    3756:	9e a7       	std	Y+46, r25	; 0x2e
    3758:	8d a7       	std	Y+45, r24	; 0x2d
    375a:	8d a5       	ldd	r24, Y+45	; 0x2d
    375c:	9e a5       	ldd	r25, Y+46	; 0x2e
    375e:	01 97       	sbiw	r24, 0x01	; 1
    3760:	f1 f7       	brne	.-4      	; 0x375e <main+0x71c>
    3762:	9e a7       	std	Y+46, r25	; 0x2e
    3764:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3766:	8f a5       	ldd	r24, Y+47	; 0x2f
    3768:	98 a9       	ldd	r25, Y+48	; 0x30
    376a:	01 97       	sbiw	r24, 0x01	; 1
    376c:	98 ab       	std	Y+48, r25	; 0x30
    376e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3770:	8f a5       	ldd	r24, Y+47	; 0x2f
    3772:	98 a9       	ldd	r25, Y+48	; 0x30
    3774:	00 97       	sbiw	r24, 0x00	; 0
    3776:	69 f7       	brne	.-38     	; 0x3752 <main+0x710>
    3778:	14 c0       	rjmp	.+40     	; 0x37a2 <main+0x760>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    377a:	69 a9       	ldd	r22, Y+49	; 0x31
    377c:	7a a9       	ldd	r23, Y+50	; 0x32
    377e:	8b a9       	ldd	r24, Y+51	; 0x33
    3780:	9c a9       	ldd	r25, Y+52	; 0x34
    3782:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3786:	dc 01       	movw	r26, r24
    3788:	cb 01       	movw	r24, r22
    378a:	98 ab       	std	Y+48, r25	; 0x30
    378c:	8f a7       	std	Y+47, r24	; 0x2f
    378e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3790:	98 a9       	ldd	r25, Y+48	; 0x30
    3792:	9c a7       	std	Y+44, r25	; 0x2c
    3794:	8b a7       	std	Y+43, r24	; 0x2b
    3796:	8b a5       	ldd	r24, Y+43	; 0x2b
    3798:	9c a5       	ldd	r25, Y+44	; 0x2c
    379a:	01 97       	sbiw	r24, 0x01	; 1
    379c:	f1 f7       	brne	.-4      	; 0x379a <main+0x758>
    379e:	9c a7       	std	Y+44, r25	; 0x2c
    37a0:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(3000);
					DC_Motor_Stop(DC_MOTOR_0);
    37a2:	80 e0       	ldi	r24, 0x00	; 0
    37a4:	0e 94 98 17 	call	0x2f30	; 0x2f30 <DC_Motor_Stop>
					gettingMovingOption = 0;
    37a8:	10 92 a6 01 	sts	0x01A6, r1
					currentState = STATE_MOTOR_OPTIONS;
    37ac:	fe 01       	movw	r30, r28
    37ae:	ed 59       	subi	r30, 0x9D	; 157
    37b0:	ff 4f       	sbci	r31, 0xFF	; 255
    37b2:	81 e0       	ldi	r24, 0x01	; 1
    37b4:	80 83       	st	Z, r24
    37b6:	6f cc       	rjmp	.-1826   	; 0x3096 <main+0x54>
				} else if (Option2 == '2') {
    37b8:	fe 01       	movw	r30, r28
    37ba:	e8 59       	subi	r30, 0x98	; 152
    37bc:	ff 4f       	sbci	r31, 0xFF	; 255
    37be:	80 81       	ld	r24, Z
    37c0:	82 33       	cpi	r24, 0x32	; 50
    37c2:	09 f0       	breq	.+2      	; 0x37c6 <main+0x784>
    37c4:	81 c0       	rjmp	.+258    	; 0x38c8 <main+0x886>
					DC_Motor_Move(DC_MOTOR_0, DC_MOTOR_CCW);
    37c6:	80 e0       	ldi	r24, 0x00	; 0
    37c8:	61 e0       	ldi	r22, 0x01	; 1
    37ca:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <DC_Motor_Move>
    37ce:	80 e0       	ldi	r24, 0x00	; 0
    37d0:	90 e8       	ldi	r25, 0x80	; 128
    37d2:	ab e3       	ldi	r26, 0x3B	; 59
    37d4:	b5 e4       	ldi	r27, 0x45	; 69
    37d6:	8f a3       	std	Y+39, r24	; 0x27
    37d8:	98 a7       	std	Y+40, r25	; 0x28
    37da:	a9 a7       	std	Y+41, r26	; 0x29
    37dc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37de:	6f a1       	ldd	r22, Y+39	; 0x27
    37e0:	78 a5       	ldd	r23, Y+40	; 0x28
    37e2:	89 a5       	ldd	r24, Y+41	; 0x29
    37e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    37e6:	20 e0       	ldi	r18, 0x00	; 0
    37e8:	30 e0       	ldi	r19, 0x00	; 0
    37ea:	4a e7       	ldi	r20, 0x7A	; 122
    37ec:	55 e4       	ldi	r21, 0x45	; 69
    37ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f2:	dc 01       	movw	r26, r24
    37f4:	cb 01       	movw	r24, r22
    37f6:	8b a3       	std	Y+35, r24	; 0x23
    37f8:	9c a3       	std	Y+36, r25	; 0x24
    37fa:	ad a3       	std	Y+37, r26	; 0x25
    37fc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    37fe:	6b a1       	ldd	r22, Y+35	; 0x23
    3800:	7c a1       	ldd	r23, Y+36	; 0x24
    3802:	8d a1       	ldd	r24, Y+37	; 0x25
    3804:	9e a1       	ldd	r25, Y+38	; 0x26
    3806:	20 e0       	ldi	r18, 0x00	; 0
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	40 e8       	ldi	r20, 0x80	; 128
    380c:	5f e3       	ldi	r21, 0x3F	; 63
    380e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3812:	88 23       	and	r24, r24
    3814:	2c f4       	brge	.+10     	; 0x3820 <main+0x7de>
		__ticks = 1;
    3816:	81 e0       	ldi	r24, 0x01	; 1
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	9a a3       	std	Y+34, r25	; 0x22
    381c:	89 a3       	std	Y+33, r24	; 0x21
    381e:	3f c0       	rjmp	.+126    	; 0x389e <main+0x85c>
	else if (__tmp > 65535)
    3820:	6b a1       	ldd	r22, Y+35	; 0x23
    3822:	7c a1       	ldd	r23, Y+36	; 0x24
    3824:	8d a1       	ldd	r24, Y+37	; 0x25
    3826:	9e a1       	ldd	r25, Y+38	; 0x26
    3828:	20 e0       	ldi	r18, 0x00	; 0
    382a:	3f ef       	ldi	r19, 0xFF	; 255
    382c:	4f e7       	ldi	r20, 0x7F	; 127
    382e:	57 e4       	ldi	r21, 0x47	; 71
    3830:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3834:	18 16       	cp	r1, r24
    3836:	4c f5       	brge	.+82     	; 0x388a <main+0x848>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3838:	6f a1       	ldd	r22, Y+39	; 0x27
    383a:	78 a5       	ldd	r23, Y+40	; 0x28
    383c:	89 a5       	ldd	r24, Y+41	; 0x29
    383e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3840:	20 e0       	ldi	r18, 0x00	; 0
    3842:	30 e0       	ldi	r19, 0x00	; 0
    3844:	40 e2       	ldi	r20, 0x20	; 32
    3846:	51 e4       	ldi	r21, 0x41	; 65
    3848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    384c:	dc 01       	movw	r26, r24
    384e:	cb 01       	movw	r24, r22
    3850:	bc 01       	movw	r22, r24
    3852:	cd 01       	movw	r24, r26
    3854:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3858:	dc 01       	movw	r26, r24
    385a:	cb 01       	movw	r24, r22
    385c:	9a a3       	std	Y+34, r25	; 0x22
    385e:	89 a3       	std	Y+33, r24	; 0x21
    3860:	0f c0       	rjmp	.+30     	; 0x3880 <main+0x83e>
    3862:	80 e9       	ldi	r24, 0x90	; 144
    3864:	91 e0       	ldi	r25, 0x01	; 1
    3866:	98 a3       	std	Y+32, r25	; 0x20
    3868:	8f 8f       	std	Y+31, r24	; 0x1f
    386a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    386c:	98 a1       	ldd	r25, Y+32	; 0x20
    386e:	01 97       	sbiw	r24, 0x01	; 1
    3870:	f1 f7       	brne	.-4      	; 0x386e <main+0x82c>
    3872:	98 a3       	std	Y+32, r25	; 0x20
    3874:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3876:	89 a1       	ldd	r24, Y+33	; 0x21
    3878:	9a a1       	ldd	r25, Y+34	; 0x22
    387a:	01 97       	sbiw	r24, 0x01	; 1
    387c:	9a a3       	std	Y+34, r25	; 0x22
    387e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3880:	89 a1       	ldd	r24, Y+33	; 0x21
    3882:	9a a1       	ldd	r25, Y+34	; 0x22
    3884:	00 97       	sbiw	r24, 0x00	; 0
    3886:	69 f7       	brne	.-38     	; 0x3862 <main+0x820>
    3888:	14 c0       	rjmp	.+40     	; 0x38b2 <main+0x870>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    388a:	6b a1       	ldd	r22, Y+35	; 0x23
    388c:	7c a1       	ldd	r23, Y+36	; 0x24
    388e:	8d a1       	ldd	r24, Y+37	; 0x25
    3890:	9e a1       	ldd	r25, Y+38	; 0x26
    3892:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3896:	dc 01       	movw	r26, r24
    3898:	cb 01       	movw	r24, r22
    389a:	9a a3       	std	Y+34, r25	; 0x22
    389c:	89 a3       	std	Y+33, r24	; 0x21
    389e:	89 a1       	ldd	r24, Y+33	; 0x21
    38a0:	9a a1       	ldd	r25, Y+34	; 0x22
    38a2:	9e 8f       	std	Y+30, r25	; 0x1e
    38a4:	8d 8f       	std	Y+29, r24	; 0x1d
    38a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    38aa:	01 97       	sbiw	r24, 0x01	; 1
    38ac:	f1 f7       	brne	.-4      	; 0x38aa <main+0x868>
    38ae:	9e 8f       	std	Y+30, r25	; 0x1e
    38b0:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(3000);
					DC_Motor_Stop(DC_MOTOR_0);
    38b2:	80 e0       	ldi	r24, 0x00	; 0
    38b4:	0e 94 98 17 	call	0x2f30	; 0x2f30 <DC_Motor_Stop>
					gettingMovingOption = 0;
    38b8:	10 92 a6 01 	sts	0x01A6, r1
					currentState = STATE_MOTOR_OPTIONS;
    38bc:	fe 01       	movw	r30, r28
    38be:	ed 59       	subi	r30, 0x9D	; 157
    38c0:	ff 4f       	sbci	r31, 0xFF	; 255
    38c2:	81 e0       	ldi	r24, 0x01	; 1
    38c4:	80 83       	st	Z, r24
    38c6:	e7 cb       	rjmp	.-2098   	; 0x3096 <main+0x54>
				} else {
					lcd_ES_tclear();
    38c8:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <lcd_ES_tclear>
					Lcd_ES_tsendString("Invalid Option");
    38cc:	89 ec       	ldi	r24, 0xC9	; 201
    38ce:	90 e0       	ldi	r25, 0x00	; 0
    38d0:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <Lcd_ES_tsendString>
    38d4:	80 e0       	ldi	r24, 0x00	; 0
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	aa ef       	ldi	r26, 0xFA	; 250
    38da:	b4 e4       	ldi	r27, 0x44	; 68
    38dc:	89 8f       	std	Y+25, r24	; 0x19
    38de:	9a 8f       	std	Y+26, r25	; 0x1a
    38e0:	ab 8f       	std	Y+27, r26	; 0x1b
    38e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38e4:	69 8d       	ldd	r22, Y+25	; 0x19
    38e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38ec:	20 e0       	ldi	r18, 0x00	; 0
    38ee:	30 e0       	ldi	r19, 0x00	; 0
    38f0:	4a e7       	ldi	r20, 0x7A	; 122
    38f2:	55 e4       	ldi	r21, 0x45	; 69
    38f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38f8:	dc 01       	movw	r26, r24
    38fa:	cb 01       	movw	r24, r22
    38fc:	8d 8b       	std	Y+21, r24	; 0x15
    38fe:	9e 8b       	std	Y+22, r25	; 0x16
    3900:	af 8b       	std	Y+23, r26	; 0x17
    3902:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3904:	6d 89       	ldd	r22, Y+21	; 0x15
    3906:	7e 89       	ldd	r23, Y+22	; 0x16
    3908:	8f 89       	ldd	r24, Y+23	; 0x17
    390a:	98 8d       	ldd	r25, Y+24	; 0x18
    390c:	20 e0       	ldi	r18, 0x00	; 0
    390e:	30 e0       	ldi	r19, 0x00	; 0
    3910:	40 e8       	ldi	r20, 0x80	; 128
    3912:	5f e3       	ldi	r21, 0x3F	; 63
    3914:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3918:	88 23       	and	r24, r24
    391a:	2c f4       	brge	.+10     	; 0x3926 <main+0x8e4>
		__ticks = 1;
    391c:	81 e0       	ldi	r24, 0x01	; 1
    391e:	90 e0       	ldi	r25, 0x00	; 0
    3920:	9c 8b       	std	Y+20, r25	; 0x14
    3922:	8b 8b       	std	Y+19, r24	; 0x13
    3924:	3f c0       	rjmp	.+126    	; 0x39a4 <main+0x962>
	else if (__tmp > 65535)
    3926:	6d 89       	ldd	r22, Y+21	; 0x15
    3928:	7e 89       	ldd	r23, Y+22	; 0x16
    392a:	8f 89       	ldd	r24, Y+23	; 0x17
    392c:	98 8d       	ldd	r25, Y+24	; 0x18
    392e:	20 e0       	ldi	r18, 0x00	; 0
    3930:	3f ef       	ldi	r19, 0xFF	; 255
    3932:	4f e7       	ldi	r20, 0x7F	; 127
    3934:	57 e4       	ldi	r21, 0x47	; 71
    3936:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    393a:	18 16       	cp	r1, r24
    393c:	4c f5       	brge	.+82     	; 0x3990 <main+0x94e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    393e:	69 8d       	ldd	r22, Y+25	; 0x19
    3940:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3942:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3944:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3946:	20 e0       	ldi	r18, 0x00	; 0
    3948:	30 e0       	ldi	r19, 0x00	; 0
    394a:	40 e2       	ldi	r20, 0x20	; 32
    394c:	51 e4       	ldi	r21, 0x41	; 65
    394e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3952:	dc 01       	movw	r26, r24
    3954:	cb 01       	movw	r24, r22
    3956:	bc 01       	movw	r22, r24
    3958:	cd 01       	movw	r24, r26
    395a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    395e:	dc 01       	movw	r26, r24
    3960:	cb 01       	movw	r24, r22
    3962:	9c 8b       	std	Y+20, r25	; 0x14
    3964:	8b 8b       	std	Y+19, r24	; 0x13
    3966:	0f c0       	rjmp	.+30     	; 0x3986 <main+0x944>
    3968:	80 e9       	ldi	r24, 0x90	; 144
    396a:	91 e0       	ldi	r25, 0x01	; 1
    396c:	9a 8b       	std	Y+18, r25	; 0x12
    396e:	89 8b       	std	Y+17, r24	; 0x11
    3970:	89 89       	ldd	r24, Y+17	; 0x11
    3972:	9a 89       	ldd	r25, Y+18	; 0x12
    3974:	01 97       	sbiw	r24, 0x01	; 1
    3976:	f1 f7       	brne	.-4      	; 0x3974 <main+0x932>
    3978:	9a 8b       	std	Y+18, r25	; 0x12
    397a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    397c:	8b 89       	ldd	r24, Y+19	; 0x13
    397e:	9c 89       	ldd	r25, Y+20	; 0x14
    3980:	01 97       	sbiw	r24, 0x01	; 1
    3982:	9c 8b       	std	Y+20, r25	; 0x14
    3984:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3986:	8b 89       	ldd	r24, Y+19	; 0x13
    3988:	9c 89       	ldd	r25, Y+20	; 0x14
    398a:	00 97       	sbiw	r24, 0x00	; 0
    398c:	69 f7       	brne	.-38     	; 0x3968 <main+0x926>
    398e:	14 c0       	rjmp	.+40     	; 0x39b8 <main+0x976>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3990:	6d 89       	ldd	r22, Y+21	; 0x15
    3992:	7e 89       	ldd	r23, Y+22	; 0x16
    3994:	8f 89       	ldd	r24, Y+23	; 0x17
    3996:	98 8d       	ldd	r25, Y+24	; 0x18
    3998:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    399c:	dc 01       	movw	r26, r24
    399e:	cb 01       	movw	r24, r22
    39a0:	9c 8b       	std	Y+20, r25	; 0x14
    39a2:	8b 8b       	std	Y+19, r24	; 0x13
    39a4:	8b 89       	ldd	r24, Y+19	; 0x13
    39a6:	9c 89       	ldd	r25, Y+20	; 0x14
    39a8:	98 8b       	std	Y+16, r25	; 0x10
    39aa:	8f 87       	std	Y+15, r24	; 0x0f
    39ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    39ae:	98 89       	ldd	r25, Y+16	; 0x10
    39b0:	01 97       	sbiw	r24, 0x01	; 1
    39b2:	f1 f7       	brne	.-4      	; 0x39b0 <main+0x96e>
    39b4:	98 8b       	std	Y+16, r25	; 0x10
    39b6:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(2000);
					gettingMovingOption=0;
    39b8:	10 92 a6 01 	sts	0x01A6, r1
					currentState = STATE_DC_MOTOR_MOVE;
    39bc:	fe 01       	movw	r30, r28
    39be:	ed 59       	subi	r30, 0x9D	; 157
    39c0:	ff 4f       	sbci	r31, 0xFF	; 255
    39c2:	82 e0       	ldi	r24, 0x02	; 2
    39c4:	80 83       	st	Z, r24
    39c6:	67 cb       	rjmp	.-2354   	; 0x3096 <main+0x54>
				}
			}
			break;
		case STATE_STEPPER_MOVE:
			if (!gettingStepperOption) {
    39c8:	80 91 a7 01 	lds	r24, 0x01A7
    39cc:	88 23       	and	r24, r24
    39ce:	49 f4       	brne	.+18     	; 0x39e2 <main+0x9a0>
				lcd_ES_tclear();
    39d0:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <lcd_ES_tclear>
				Lcd_ES_tsendString("Angle(3dig) :");
    39d4:	83 ef       	ldi	r24, 0xF3	; 243
    39d6:	90 e0       	ldi	r25, 0x00	; 0
    39d8:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <Lcd_ES_tsendString>
				gettingStepperOption = 1;
    39dc:	81 e0       	ldi	r24, 0x01	; 1
    39de:	80 93 a7 01 	sts	0x01A7, r24
			}
			KPD_ES_tGetKeyPressed(&Option3);
    39e2:	ce 01       	movw	r24, r28
    39e4:	87 59       	subi	r24, 0x97	; 151
    39e6:	9f 4f       	sbci	r25, 0xFF	; 255
    39e8:	0e 94 5d 16 	call	0x2cba	; 0x2cba <KPD_ES_tGetKeyPressed>
			if (Option3 != KPD_U8_NOT_PRESSED) {
    39ec:	fe 01       	movw	r30, r28
    39ee:	e7 59       	subi	r30, 0x97	; 151
    39f0:	ff 4f       	sbci	r31, 0xFF	; 255
    39f2:	80 81       	ld	r24, Z
    39f4:	8f 3f       	cpi	r24, 0xFF	; 255
    39f6:	09 f4       	brne	.+2      	; 0x39fa <main+0x9b8>
    39f8:	4e cb       	rjmp	.-2404   	; 0x3096 <main+0x54>
				LCD_ES_tGoTo(1, indexStepper);
    39fa:	90 91 a4 01 	lds	r25, 0x01A4
    39fe:	81 e0       	ldi	r24, 0x01	; 1
    3a00:	69 2f       	mov	r22, r25
    3a02:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_ES_tGoTo>
				Lcd_ES_tsendChar(Option3);
    3a06:	fe 01       	movw	r30, r28
    3a08:	e7 59       	subi	r30, 0x97	; 151
    3a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0c:	80 81       	ld	r24, Z
    3a0e:	0e 94 2e 12 	call	0x245c	; 0x245c <Lcd_ES_tsendChar>
				inputSteper[indexStepper] = Option3 - '0'; // Convert character to integer
    3a12:	80 91 a4 01 	lds	r24, 0x01A4
    3a16:	28 2f       	mov	r18, r24
    3a18:	30 e0       	ldi	r19, 0x00	; 0
    3a1a:	fe 01       	movw	r30, r28
    3a1c:	e7 59       	subi	r30, 0x97	; 151
    3a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a20:	80 81       	ld	r24, Z
    3a22:	80 53       	subi	r24, 0x30	; 48
    3a24:	f9 01       	movw	r30, r18
    3a26:	e1 56       	subi	r30, 0x61	; 97
    3a28:	fe 4f       	sbci	r31, 0xFE	; 254
    3a2a:	80 83       	st	Z, r24
				indexStepper++;
    3a2c:	80 91 a4 01 	lds	r24, 0x01A4
    3a30:	8f 5f       	subi	r24, 0xFF	; 255
    3a32:	80 93 a4 01 	sts	0x01A4, r24
				if (indexStepper >= 3) { // Use indexStepper instead of indexz
    3a36:	80 91 a4 01 	lds	r24, 0x01A4
    3a3a:	83 30       	cpi	r24, 0x03	; 3
    3a3c:	08 f4       	brcc	.+2      	; 0x3a40 <main+0x9fe>
    3a3e:	2b cb       	rjmp	.-2474   	; 0x3096 <main+0x54>
					stepperAngle = (inputSteper[0] * 100) + (inputSteper[1] * 10) + inputSteper[2];
    3a40:	80 91 9f 01 	lds	r24, 0x019F
    3a44:	28 2f       	mov	r18, r24
    3a46:	30 e0       	ldi	r19, 0x00	; 0
    3a48:	84 e6       	ldi	r24, 0x64	; 100
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	ac 01       	movw	r20, r24
    3a4e:	24 9f       	mul	r18, r20
    3a50:	c0 01       	movw	r24, r0
    3a52:	25 9f       	mul	r18, r21
    3a54:	90 0d       	add	r25, r0
    3a56:	34 9f       	mul	r19, r20
    3a58:	90 0d       	add	r25, r0
    3a5a:	11 24       	eor	r1, r1
    3a5c:	48 2f       	mov	r20, r24
    3a5e:	80 91 a0 01 	lds	r24, 0x01A0
    3a62:	88 2f       	mov	r24, r24
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	9c 01       	movw	r18, r24
    3a68:	22 0f       	add	r18, r18
    3a6a:	33 1f       	adc	r19, r19
    3a6c:	c9 01       	movw	r24, r18
    3a6e:	88 0f       	add	r24, r24
    3a70:	99 1f       	adc	r25, r25
    3a72:	88 0f       	add	r24, r24
    3a74:	99 1f       	adc	r25, r25
    3a76:	82 0f       	add	r24, r18
    3a78:	93 1f       	adc	r25, r19
    3a7a:	94 2f       	mov	r25, r20
    3a7c:	98 0f       	add	r25, r24
    3a7e:	80 91 a1 01 	lds	r24, 0x01A1
    3a82:	fe 01       	movw	r30, r28
    3a84:	ec 59       	subi	r30, 0x9C	; 156
    3a86:	ff 4f       	sbci	r31, 0xFF	; 255
    3a88:	89 0f       	add	r24, r25
    3a8a:	80 83       	st	Z, r24
					Stepper_Rotate(stepperAngle);
    3a8c:	fe 01       	movw	r30, r28
    3a8e:	ec 59       	subi	r30, 0x9C	; 156
    3a90:	ff 4f       	sbci	r31, 0xFF	; 255
    3a92:	80 81       	ld	r24, Z
    3a94:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <Stepper_Rotate>
					memset(inputSteper, '\0', sizeof(inputSteper));
    3a98:	8f e9       	ldi	r24, 0x9F	; 159
    3a9a:	91 e0       	ldi	r25, 0x01	; 1
    3a9c:	60 e0       	ldi	r22, 0x00	; 0
    3a9e:	70 e0       	ldi	r23, 0x00	; 0
    3aa0:	45 e0       	ldi	r20, 0x05	; 5
    3aa2:	50 e0       	ldi	r21, 0x00	; 0
    3aa4:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <memset>
					indexStepper = 0;
    3aa8:	10 92 a4 01 	sts	0x01A4, r1
					gettingStepperOption = 0;
    3aac:	10 92 a7 01 	sts	0x01A7, r1
					gettingMotorOption=0;
    3ab0:	10 92 a5 01 	sts	0x01A5, r1
					currentState = STATE_MOTOR_OPTIONS;
    3ab4:	fe 01       	movw	r30, r28
    3ab6:	ed 59       	subi	r30, 0x9D	; 157
    3ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aba:	81 e0       	ldi	r24, 0x01	; 1
    3abc:	80 83       	st	Z, r24
    3abe:	eb ca       	rjmp	.-2602   	; 0x3096 <main+0x54>
				}
			}
			break;

		case STATE_EXIT:
			lcd_ES_tclear();
    3ac0:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <lcd_ES_tclear>
			Lcd_ES_tsendString("Exit System :)");
    3ac4:	81 e0       	ldi	r24, 0x01	; 1
    3ac6:	91 e0       	ldi	r25, 0x01	; 1
    3ac8:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <Lcd_ES_tsendString>
    3acc:	80 e0       	ldi	r24, 0x00	; 0
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	aa e7       	ldi	r26, 0x7A	; 122
    3ad2:	b4 e4       	ldi	r27, 0x44	; 68
    3ad4:	8b 87       	std	Y+11, r24	; 0x0b
    3ad6:	9c 87       	std	Y+12, r25	; 0x0c
    3ad8:	ad 87       	std	Y+13, r26	; 0x0d
    3ada:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3adc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ade:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ae0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ae2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ae4:	20 e0       	ldi	r18, 0x00	; 0
    3ae6:	30 e0       	ldi	r19, 0x00	; 0
    3ae8:	4a e7       	ldi	r20, 0x7A	; 122
    3aea:	55 e4       	ldi	r21, 0x45	; 69
    3aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3af0:	dc 01       	movw	r26, r24
    3af2:	cb 01       	movw	r24, r22
    3af4:	8f 83       	std	Y+7, r24	; 0x07
    3af6:	98 87       	std	Y+8, r25	; 0x08
    3af8:	a9 87       	std	Y+9, r26	; 0x09
    3afa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3afc:	6f 81       	ldd	r22, Y+7	; 0x07
    3afe:	78 85       	ldd	r23, Y+8	; 0x08
    3b00:	89 85       	ldd	r24, Y+9	; 0x09
    3b02:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b04:	20 e0       	ldi	r18, 0x00	; 0
    3b06:	30 e0       	ldi	r19, 0x00	; 0
    3b08:	40 e8       	ldi	r20, 0x80	; 128
    3b0a:	5f e3       	ldi	r21, 0x3F	; 63
    3b0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b10:	88 23       	and	r24, r24
    3b12:	2c f4       	brge	.+10     	; 0x3b1e <main+0xadc>
		__ticks = 1;
    3b14:	81 e0       	ldi	r24, 0x01	; 1
    3b16:	90 e0       	ldi	r25, 0x00	; 0
    3b18:	9e 83       	std	Y+6, r25	; 0x06
    3b1a:	8d 83       	std	Y+5, r24	; 0x05
    3b1c:	3f c0       	rjmp	.+126    	; 0x3b9c <main+0xb5a>
	else if (__tmp > 65535)
    3b1e:	6f 81       	ldd	r22, Y+7	; 0x07
    3b20:	78 85       	ldd	r23, Y+8	; 0x08
    3b22:	89 85       	ldd	r24, Y+9	; 0x09
    3b24:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b26:	20 e0       	ldi	r18, 0x00	; 0
    3b28:	3f ef       	ldi	r19, 0xFF	; 255
    3b2a:	4f e7       	ldi	r20, 0x7F	; 127
    3b2c:	57 e4       	ldi	r21, 0x47	; 71
    3b2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b32:	18 16       	cp	r1, r24
    3b34:	4c f5       	brge	.+82     	; 0x3b88 <main+0xb46>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b36:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b38:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b3e:	20 e0       	ldi	r18, 0x00	; 0
    3b40:	30 e0       	ldi	r19, 0x00	; 0
    3b42:	40 e2       	ldi	r20, 0x20	; 32
    3b44:	51 e4       	ldi	r21, 0x41	; 65
    3b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b4a:	dc 01       	movw	r26, r24
    3b4c:	cb 01       	movw	r24, r22
    3b4e:	bc 01       	movw	r22, r24
    3b50:	cd 01       	movw	r24, r26
    3b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b56:	dc 01       	movw	r26, r24
    3b58:	cb 01       	movw	r24, r22
    3b5a:	9e 83       	std	Y+6, r25	; 0x06
    3b5c:	8d 83       	std	Y+5, r24	; 0x05
    3b5e:	0f c0       	rjmp	.+30     	; 0x3b7e <main+0xb3c>
    3b60:	80 e9       	ldi	r24, 0x90	; 144
    3b62:	91 e0       	ldi	r25, 0x01	; 1
    3b64:	9c 83       	std	Y+4, r25	; 0x04
    3b66:	8b 83       	std	Y+3, r24	; 0x03
    3b68:	8b 81       	ldd	r24, Y+3	; 0x03
    3b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b6c:	01 97       	sbiw	r24, 0x01	; 1
    3b6e:	f1 f7       	brne	.-4      	; 0x3b6c <main+0xb2a>
    3b70:	9c 83       	std	Y+4, r25	; 0x04
    3b72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b74:	8d 81       	ldd	r24, Y+5	; 0x05
    3b76:	9e 81       	ldd	r25, Y+6	; 0x06
    3b78:	01 97       	sbiw	r24, 0x01	; 1
    3b7a:	9e 83       	std	Y+6, r25	; 0x06
    3b7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    3b80:	9e 81       	ldd	r25, Y+6	; 0x06
    3b82:	00 97       	sbiw	r24, 0x00	; 0
    3b84:	69 f7       	brne	.-38     	; 0x3b60 <main+0xb1e>
    3b86:	14 c0       	rjmp	.+40     	; 0x3bb0 <main+0xb6e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b88:	6f 81       	ldd	r22, Y+7	; 0x07
    3b8a:	78 85       	ldd	r23, Y+8	; 0x08
    3b8c:	89 85       	ldd	r24, Y+9	; 0x09
    3b8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b94:	dc 01       	movw	r26, r24
    3b96:	cb 01       	movw	r24, r22
    3b98:	9e 83       	std	Y+6, r25	; 0x06
    3b9a:	8d 83       	std	Y+5, r24	; 0x05
    3b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b9e:	9e 81       	ldd	r25, Y+6	; 0x06
    3ba0:	9a 83       	std	Y+2, r25	; 0x02
    3ba2:	89 83       	std	Y+1, r24	; 0x01
    3ba4:	89 81       	ldd	r24, Y+1	; 0x01
    3ba6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ba8:	01 97       	sbiw	r24, 0x01	; 1
    3baa:	f1 f7       	brne	.-4      	; 0x3ba8 <main+0xb66>
    3bac:	9a 83       	std	Y+2, r25	; 0x02
    3bae:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			return 0;
    3bb0:	80 e0       	ldi	r24, 0x00	; 0
    3bb2:	90 e0       	ldi	r25, 0x00	; 0
		}
	}

	return 0;
}
    3bb4:	c5 59       	subi	r28, 0x95	; 149
    3bb6:	df 4f       	sbci	r29, 0xFF	; 255
    3bb8:	0f b6       	in	r0, 0x3f	; 63
    3bba:	f8 94       	cli
    3bbc:	de bf       	out	0x3e, r29	; 62
    3bbe:	0f be       	out	0x3f, r0	; 63
    3bc0:	cd bf       	out	0x3d, r28	; 61
    3bc2:	cf 91       	pop	r28
    3bc4:	df 91       	pop	r29
    3bc6:	1f 91       	pop	r17
    3bc8:	0f 91       	pop	r16
    3bca:	08 95       	ret

00003bcc <__udivmodhi4>:
    3bcc:	aa 1b       	sub	r26, r26
    3bce:	bb 1b       	sub	r27, r27
    3bd0:	51 e1       	ldi	r21, 0x11	; 17
    3bd2:	07 c0       	rjmp	.+14     	; 0x3be2 <__udivmodhi4_ep>

00003bd4 <__udivmodhi4_loop>:
    3bd4:	aa 1f       	adc	r26, r26
    3bd6:	bb 1f       	adc	r27, r27
    3bd8:	a6 17       	cp	r26, r22
    3bda:	b7 07       	cpc	r27, r23
    3bdc:	10 f0       	brcs	.+4      	; 0x3be2 <__udivmodhi4_ep>
    3bde:	a6 1b       	sub	r26, r22
    3be0:	b7 0b       	sbc	r27, r23

00003be2 <__udivmodhi4_ep>:
    3be2:	88 1f       	adc	r24, r24
    3be4:	99 1f       	adc	r25, r25
    3be6:	5a 95       	dec	r21
    3be8:	a9 f7       	brne	.-22     	; 0x3bd4 <__udivmodhi4_loop>
    3bea:	80 95       	com	r24
    3bec:	90 95       	com	r25
    3bee:	bc 01       	movw	r22, r24
    3bf0:	cd 01       	movw	r24, r26
    3bf2:	08 95       	ret

00003bf4 <__udivmodsi4>:
    3bf4:	a1 e2       	ldi	r26, 0x21	; 33
    3bf6:	1a 2e       	mov	r1, r26
    3bf8:	aa 1b       	sub	r26, r26
    3bfa:	bb 1b       	sub	r27, r27
    3bfc:	fd 01       	movw	r30, r26
    3bfe:	0d c0       	rjmp	.+26     	; 0x3c1a <__udivmodsi4_ep>

00003c00 <__udivmodsi4_loop>:
    3c00:	aa 1f       	adc	r26, r26
    3c02:	bb 1f       	adc	r27, r27
    3c04:	ee 1f       	adc	r30, r30
    3c06:	ff 1f       	adc	r31, r31
    3c08:	a2 17       	cp	r26, r18
    3c0a:	b3 07       	cpc	r27, r19
    3c0c:	e4 07       	cpc	r30, r20
    3c0e:	f5 07       	cpc	r31, r21
    3c10:	20 f0       	brcs	.+8      	; 0x3c1a <__udivmodsi4_ep>
    3c12:	a2 1b       	sub	r26, r18
    3c14:	b3 0b       	sbc	r27, r19
    3c16:	e4 0b       	sbc	r30, r20
    3c18:	f5 0b       	sbc	r31, r21

00003c1a <__udivmodsi4_ep>:
    3c1a:	66 1f       	adc	r22, r22
    3c1c:	77 1f       	adc	r23, r23
    3c1e:	88 1f       	adc	r24, r24
    3c20:	99 1f       	adc	r25, r25
    3c22:	1a 94       	dec	r1
    3c24:	69 f7       	brne	.-38     	; 0x3c00 <__udivmodsi4_loop>
    3c26:	60 95       	com	r22
    3c28:	70 95       	com	r23
    3c2a:	80 95       	com	r24
    3c2c:	90 95       	com	r25
    3c2e:	9b 01       	movw	r18, r22
    3c30:	ac 01       	movw	r20, r24
    3c32:	bd 01       	movw	r22, r26
    3c34:	cf 01       	movw	r24, r30
    3c36:	08 95       	ret

00003c38 <__prologue_saves__>:
    3c38:	2f 92       	push	r2
    3c3a:	3f 92       	push	r3
    3c3c:	4f 92       	push	r4
    3c3e:	5f 92       	push	r5
    3c40:	6f 92       	push	r6
    3c42:	7f 92       	push	r7
    3c44:	8f 92       	push	r8
    3c46:	9f 92       	push	r9
    3c48:	af 92       	push	r10
    3c4a:	bf 92       	push	r11
    3c4c:	cf 92       	push	r12
    3c4e:	df 92       	push	r13
    3c50:	ef 92       	push	r14
    3c52:	ff 92       	push	r15
    3c54:	0f 93       	push	r16
    3c56:	1f 93       	push	r17
    3c58:	cf 93       	push	r28
    3c5a:	df 93       	push	r29
    3c5c:	cd b7       	in	r28, 0x3d	; 61
    3c5e:	de b7       	in	r29, 0x3e	; 62
    3c60:	ca 1b       	sub	r28, r26
    3c62:	db 0b       	sbc	r29, r27
    3c64:	0f b6       	in	r0, 0x3f	; 63
    3c66:	f8 94       	cli
    3c68:	de bf       	out	0x3e, r29	; 62
    3c6a:	0f be       	out	0x3f, r0	; 63
    3c6c:	cd bf       	out	0x3d, r28	; 61
    3c6e:	09 94       	ijmp

00003c70 <__epilogue_restores__>:
    3c70:	2a 88       	ldd	r2, Y+18	; 0x12
    3c72:	39 88       	ldd	r3, Y+17	; 0x11
    3c74:	48 88       	ldd	r4, Y+16	; 0x10
    3c76:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c78:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c7a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c7c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c7e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c80:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c82:	b9 84       	ldd	r11, Y+9	; 0x09
    3c84:	c8 84       	ldd	r12, Y+8	; 0x08
    3c86:	df 80       	ldd	r13, Y+7	; 0x07
    3c88:	ee 80       	ldd	r14, Y+6	; 0x06
    3c8a:	fd 80       	ldd	r15, Y+5	; 0x05
    3c8c:	0c 81       	ldd	r16, Y+4	; 0x04
    3c8e:	1b 81       	ldd	r17, Y+3	; 0x03
    3c90:	aa 81       	ldd	r26, Y+2	; 0x02
    3c92:	b9 81       	ldd	r27, Y+1	; 0x01
    3c94:	ce 0f       	add	r28, r30
    3c96:	d1 1d       	adc	r29, r1
    3c98:	0f b6       	in	r0, 0x3f	; 63
    3c9a:	f8 94       	cli
    3c9c:	de bf       	out	0x3e, r29	; 62
    3c9e:	0f be       	out	0x3f, r0	; 63
    3ca0:	cd bf       	out	0x3d, r28	; 61
    3ca2:	ed 01       	movw	r28, r26
    3ca4:	08 95       	ret

00003ca6 <memset>:
    3ca6:	dc 01       	movw	r26, r24
    3ca8:	01 c0       	rjmp	.+2      	; 0x3cac <memset+0x6>
    3caa:	6d 93       	st	X+, r22
    3cac:	41 50       	subi	r20, 0x01	; 1
    3cae:	50 40       	sbci	r21, 0x00	; 0
    3cb0:	e0 f7       	brcc	.-8      	; 0x3caa <memset+0x4>
    3cb2:	08 95       	ret

00003cb4 <strcmp>:
    3cb4:	fb 01       	movw	r30, r22
    3cb6:	dc 01       	movw	r26, r24
    3cb8:	8d 91       	ld	r24, X+
    3cba:	01 90       	ld	r0, Z+
    3cbc:	80 19       	sub	r24, r0
    3cbe:	01 10       	cpse	r0, r1
    3cc0:	d9 f3       	breq	.-10     	; 0x3cb8 <strcmp+0x4>
    3cc2:	99 0b       	sbc	r25, r25
    3cc4:	08 95       	ret

00003cc6 <_exit>:
    3cc6:	f8 94       	cli

00003cc8 <__stop_program>:
    3cc8:	ff cf       	rjmp	.-2      	; 0x3cc8 <__stop_program>
