
Simple_Security_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000042e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013a  00800060  000042e4  00004378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  0080019a  0080019a  000044b2  2**0
                  ALLOC
  3 .debug_aranges 00000318  00000000  00000000  000044b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005a9  00000000  00000000  000047ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000394e  00000000  00000000  00004d73  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000188b  00000000  00000000  000086c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000323a  00000000  00000000  00009f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000410  00000000  00000000  0000d188  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b0b  00000000  00000000  0000d598  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000088e  00000000  00000000  0000e0a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d0  00000000  00000000  0000e931  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 fe 07 	jmp	0xffc	; 0xffc <__vector_1>
       8:	0c 94 31 08 	jmp	0x1062	; 0x1062 <__vector_2>
       c:	0c 94 64 08 	jmp	0x10c8	; 0x10c8 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ee       	ldi	r30, 0xE4	; 228
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 39       	cpi	r26, 0x9A	; 154
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e9       	ldi	r26, 0x9A	; 154
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3b       	cpi	r26, 0xB5	; 181
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <main>
      8a:	0c 94 70 21 	jmp	0x42e0	; 0x42e0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 29 21 	jmp	0x4252	; 0x4252 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e1       	ldi	r26, 0x10	; 16
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 45 21 	jmp	0x428a	; 0x428a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 35 21 	jmp	0x426a	; 0x426a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 51 21 	jmp	0x42a2	; 0x42a2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 35 21 	jmp	0x426a	; 0x426a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 51 21 	jmp	0x42a2	; 0x42a2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 29 21 	jmp	0x4252	; 0x4252 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e1       	ldi	r24, 0x10	; 16
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 45 21 	jmp	0x428a	; 0x428a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 31 21 	jmp	0x4262	; 0x4262 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e1       	ldi	r22, 0x10	; 16
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 4d 21 	jmp	0x429a	; 0x429a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 35 21 	jmp	0x426a	; 0x426a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 51 21 	jmp	0x42a2	; 0x42a2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 35 21 	jmp	0x426a	; 0x426a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 51 21 	jmp	0x42a2	; 0x42a2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 35 21 	jmp	0x426a	; 0x426a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 51 21 	jmp	0x42a2	; 0x42a2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 39 21 	jmp	0x4272	; 0x4272 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 55 21 	jmp	0x42aa	; 0x42aa <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <EXI_Set_CallBack>:
/* void (*LocalPtr)(void) is a local pointer to function */
/* The name of function without () is an address to that function */
/* The function he passes must take void and return void also */
/************************************************************************/

void EXI_Set_CallBack(EX_Interrupt_Source_type interrupt, void (*LocalPtr)(void)){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <EXI_Set_CallBack+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <EXI_Set_CallBack+0x8>
     ca6:	0f 92       	push	r0
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	7b 83       	std	Y+3, r23	; 0x03
     cb0:	6a 83       	std	Y+2, r22	; 0x02
	switch(interrupt){
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	3d 83       	std	Y+5, r19	; 0x05
     cba:	2c 83       	std	Y+4, r18	; 0x04
     cbc:	8c 81       	ldd	r24, Y+4	; 0x04
     cbe:	9d 81       	ldd	r25, Y+5	; 0x05
     cc0:	81 30       	cpi	r24, 0x01	; 1
     cc2:	91 05       	cpc	r25, r1
     cc4:	81 f0       	breq	.+32     	; 0xce6 <EXI_Set_CallBack+0x48>
     cc6:	2c 81       	ldd	r18, Y+4	; 0x04
     cc8:	3d 81       	ldd	r19, Y+5	; 0x05
     cca:	22 30       	cpi	r18, 0x02	; 2
     ccc:	31 05       	cpc	r19, r1
     cce:	91 f0       	breq	.+36     	; 0xcf4 <EXI_Set_CallBack+0x56>
     cd0:	8c 81       	ldd	r24, Y+4	; 0x04
     cd2:	9d 81       	ldd	r25, Y+5	; 0x05
     cd4:	00 97       	sbiw	r24, 0x00	; 0
     cd6:	a1 f4       	brne	.+40     	; 0xd00 <EXI_Set_CallBack+0x62>
	case EX_INT0:
		INT0_Fptr = LocalPtr;
     cd8:	8a 81       	ldd	r24, Y+2	; 0x02
     cda:	9b 81       	ldd	r25, Y+3	; 0x03
     cdc:	90 93 9b 01 	sts	0x019B, r25
     ce0:	80 93 9a 01 	sts	0x019A, r24
     ce4:	0d c0       	rjmp	.+26     	; 0xd00 <EXI_Set_CallBack+0x62>
		break;
	case EX_INT1:
		INT1_Fptr = LocalPtr;
     ce6:	8a 81       	ldd	r24, Y+2	; 0x02
     ce8:	9b 81       	ldd	r25, Y+3	; 0x03
     cea:	90 93 9d 01 	sts	0x019D, r25
     cee:	80 93 9c 01 	sts	0x019C, r24
     cf2:	06 c0       	rjmp	.+12     	; 0xd00 <EXI_Set_CallBack+0x62>
		break;
	case EX_INT2:
		INT2_Fptr = LocalPtr;
     cf4:	8a 81       	ldd	r24, Y+2	; 0x02
     cf6:	9b 81       	ldd	r25, Y+3	; 0x03
     cf8:	90 93 9f 01 	sts	0x019F, r25
     cfc:	80 93 9e 01 	sts	0x019E, r24
		break;
	}
}
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	cf 91       	pop	r28
     d0c:	df 91       	pop	r29
     d0e:	08 95       	ret

00000d10 <EXI_ENABLE>:
/************************************************************************/
/*  Enabling and disabling the interrupt                                */
/************************************************************************/


void EXI_ENABLE(EX_Interrupt_Source_type interrupt){
     d10:	df 93       	push	r29
     d12:	cf 93       	push	r28
     d14:	00 d0       	rcall	.+0      	; 0xd16 <EXI_ENABLE+0x6>
     d16:	0f 92       	push	r0
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt){
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	3b 83       	std	Y+3, r19	; 0x03
     d26:	2a 83       	std	Y+2, r18	; 0x02
     d28:	8a 81       	ldd	r24, Y+2	; 0x02
     d2a:	9b 81       	ldd	r25, Y+3	; 0x03
     d2c:	81 30       	cpi	r24, 0x01	; 1
     d2e:	91 05       	cpc	r25, r1
     d30:	89 f0       	breq	.+34     	; 0xd54 <EXI_ENABLE+0x44>
     d32:	2a 81       	ldd	r18, Y+2	; 0x02
     d34:	3b 81       	ldd	r19, Y+3	; 0x03
     d36:	22 30       	cpi	r18, 0x02	; 2
     d38:	31 05       	cpc	r19, r1
     d3a:	a1 f0       	breq	.+40     	; 0xd64 <EXI_ENABLE+0x54>
     d3c:	8a 81       	ldd	r24, Y+2	; 0x02
     d3e:	9b 81       	ldd	r25, Y+3	; 0x03
     d40:	00 97       	sbiw	r24, 0x00	; 0
     d42:	b9 f4       	brne	.+46     	; 0xd72 <EXI_ENABLE+0x62>
	case EX_INT0:
		SET_BIT(GICR,INT0);
     d44:	ab e5       	ldi	r26, 0x5B	; 91
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	eb e5       	ldi	r30, 0x5B	; 91
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	80 64       	ori	r24, 0x40	; 64
     d50:	8c 93       	st	X, r24
     d52:	0f c0       	rjmp	.+30     	; 0xd72 <EXI_ENABLE+0x62>
		break;
	case EX_INT1:
		SET_BIT(GICR,INT1);
     d54:	ab e5       	ldi	r26, 0x5B	; 91
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	eb e5       	ldi	r30, 0x5B	; 91
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	80 68       	ori	r24, 0x80	; 128
     d60:	8c 93       	st	X, r24
     d62:	07 c0       	rjmp	.+14     	; 0xd72 <EXI_ENABLE+0x62>
		break;
	case EX_INT2:
		SET_BIT(GICR,INT2);
     d64:	ab e5       	ldi	r26, 0x5B	; 91
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	eb e5       	ldi	r30, 0x5B	; 91
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	80 62       	ori	r24, 0x20	; 32
     d70:	8c 93       	st	X, r24
		break;
	}
}
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	cf 91       	pop	r28
     d7a:	df 91       	pop	r29
     d7c:	08 95       	ret

00000d7e <EXI_DISABLE>:


void EXI_DISABLE(EX_Interrupt_Source_type interrupt){
     d7e:	df 93       	push	r29
     d80:	cf 93       	push	r28
     d82:	00 d0       	rcall	.+0      	; 0xd84 <EXI_DISABLE+0x6>
     d84:	0f 92       	push	r0
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
     d8a:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt){
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	3b 83       	std	Y+3, r19	; 0x03
     d94:	2a 83       	std	Y+2, r18	; 0x02
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	9b 81       	ldd	r25, Y+3	; 0x03
     d9a:	81 30       	cpi	r24, 0x01	; 1
     d9c:	91 05       	cpc	r25, r1
     d9e:	89 f0       	breq	.+34     	; 0xdc2 <EXI_DISABLE+0x44>
     da0:	2a 81       	ldd	r18, Y+2	; 0x02
     da2:	3b 81       	ldd	r19, Y+3	; 0x03
     da4:	22 30       	cpi	r18, 0x02	; 2
     da6:	31 05       	cpc	r19, r1
     da8:	a1 f0       	breq	.+40     	; 0xdd2 <EXI_DISABLE+0x54>
     daa:	8a 81       	ldd	r24, Y+2	; 0x02
     dac:	9b 81       	ldd	r25, Y+3	; 0x03
     dae:	00 97       	sbiw	r24, 0x00	; 0
     db0:	b9 f4       	brne	.+46     	; 0xde0 <EXI_DISABLE+0x62>
	case EX_INT0:
		CLR_BIT(GICR,INT0);
     db2:	ab e5       	ldi	r26, 0x5B	; 91
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e5       	ldi	r30, 0x5B	; 91
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	8f 7b       	andi	r24, 0xBF	; 191
     dbe:	8c 93       	st	X, r24
     dc0:	0f c0       	rjmp	.+30     	; 0xde0 <EXI_DISABLE+0x62>
		break;
	case EX_INT1:
		CLR_BIT(GICR,INT1);
     dc2:	ab e5       	ldi	r26, 0x5B	; 91
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	eb e5       	ldi	r30, 0x5B	; 91
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	8f 77       	andi	r24, 0x7F	; 127
     dce:	8c 93       	st	X, r24
     dd0:	07 c0       	rjmp	.+14     	; 0xde0 <EXI_DISABLE+0x62>
		break;
	case EX_INT2:
		CLR_BIT(GICR,INT2);
     dd2:	ab e5       	ldi	r26, 0x5B	; 91
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	eb e5       	ldi	r30, 0x5B	; 91
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	8f 7d       	andi	r24, 0xDF	; 223
     dde:	8c 93       	st	X, r24
		break;
	}
}
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	cf 91       	pop	r28
     de8:	df 91       	pop	r29
     dea:	08 95       	ret

00000dec <EXI_TriggerEdge>:

void EXI_TriggerEdge(EX_Interrupt_Source_type interrupt,Trigger_Edge_type edge){
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
     df4:	2a 97       	sbiw	r28, 0x0a	; 10
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	f8 94       	cli
     dfa:	de bf       	out	0x3e, r29	; 62
     dfc:	0f be       	out	0x3f, r0	; 63
     dfe:	cd bf       	out	0x3d, r28	; 61
     e00:	89 83       	std	Y+1, r24	; 0x01
     e02:	6a 83       	std	Y+2, r22	; 0x02
	switch(interrupt){
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	28 2f       	mov	r18, r24
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	3a 87       	std	Y+10, r19	; 0x0a
     e0c:	29 87       	std	Y+9, r18	; 0x09
     e0e:	89 85       	ldd	r24, Y+9	; 0x09
     e10:	9a 85       	ldd	r25, Y+10	; 0x0a
     e12:	81 30       	cpi	r24, 0x01	; 1
     e14:	91 05       	cpc	r25, r1
     e16:	09 f4       	brne	.+2      	; 0xe1a <EXI_TriggerEdge+0x2e>
     e18:	66 c0       	rjmp	.+204    	; 0xee6 <EXI_TriggerEdge+0xfa>
     e1a:	29 85       	ldd	r18, Y+9	; 0x09
     e1c:	3a 85       	ldd	r19, Y+10	; 0x0a
     e1e:	22 30       	cpi	r18, 0x02	; 2
     e20:	31 05       	cpc	r19, r1
     e22:	09 f4       	brne	.+2      	; 0xe26 <EXI_TriggerEdge+0x3a>
     e24:	bb c0       	rjmp	.+374    	; 0xf9c <EXI_TriggerEdge+0x1b0>
     e26:	89 85       	ldd	r24, Y+9	; 0x09
     e28:	9a 85       	ldd	r25, Y+10	; 0x0a
     e2a:	00 97       	sbiw	r24, 0x00	; 0
     e2c:	09 f0       	breq	.+2      	; 0xe30 <EXI_TriggerEdge+0x44>
     e2e:	dd c0       	rjmp	.+442    	; 0xfea <EXI_TriggerEdge+0x1fe>
	case EX_INT0:
		switch(edge){
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	38 87       	std	Y+8, r19	; 0x08
     e38:	2f 83       	std	Y+7, r18	; 0x07
     e3a:	8f 81       	ldd	r24, Y+7	; 0x07
     e3c:	98 85       	ldd	r25, Y+8	; 0x08
     e3e:	81 30       	cpi	r24, 0x01	; 1
     e40:	91 05       	cpc	r25, r1
     e42:	21 f1       	breq	.+72     	; 0xe8c <EXI_TriggerEdge+0xa0>
     e44:	2f 81       	ldd	r18, Y+7	; 0x07
     e46:	38 85       	ldd	r19, Y+8	; 0x08
     e48:	22 30       	cpi	r18, 0x02	; 2
     e4a:	31 05       	cpc	r19, r1
     e4c:	2c f4       	brge	.+10     	; 0xe58 <EXI_TriggerEdge+0x6c>
     e4e:	8f 81       	ldd	r24, Y+7	; 0x07
     e50:	98 85       	ldd	r25, Y+8	; 0x08
     e52:	00 97       	sbiw	r24, 0x00	; 0
     e54:	61 f0       	breq	.+24     	; 0xe6e <EXI_TriggerEdge+0x82>
     e56:	c9 c0       	rjmp	.+402    	; 0xfea <EXI_TriggerEdge+0x1fe>
     e58:	2f 81       	ldd	r18, Y+7	; 0x07
     e5a:	38 85       	ldd	r19, Y+8	; 0x08
     e5c:	22 30       	cpi	r18, 0x02	; 2
     e5e:	31 05       	cpc	r19, r1
     e60:	21 f1       	breq	.+72     	; 0xeaa <EXI_TriggerEdge+0xbe>
     e62:	8f 81       	ldd	r24, Y+7	; 0x07
     e64:	98 85       	ldd	r25, Y+8	; 0x08
     e66:	83 30       	cpi	r24, 0x03	; 3
     e68:	91 05       	cpc	r25, r1
     e6a:	71 f1       	breq	.+92     	; 0xec8 <EXI_TriggerEdge+0xdc>
     e6c:	be c0       	rjmp	.+380    	; 0xfea <EXI_TriggerEdge+0x1fe>
		case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC00);
     e6e:	a5 e5       	ldi	r26, 0x55	; 85
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e5 e5       	ldi	r30, 0x55	; 85
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	8e 7f       	andi	r24, 0xFE	; 254
     e7a:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
     e7c:	a5 e5       	ldi	r26, 0x55	; 85
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e5 e5       	ldi	r30, 0x55	; 85
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	8d 7f       	andi	r24, 0xFD	; 253
     e88:	8c 93       	st	X, r24
     e8a:	af c0       	rjmp	.+350    	; 0xfea <EXI_TriggerEdge+0x1fe>
			break;
		case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC00);
     e8c:	a5 e5       	ldi	r26, 0x55	; 85
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e5 e5       	ldi	r30, 0x55	; 85
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	81 60       	ori	r24, 0x01	; 1
     e98:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
     e9a:	a5 e5       	ldi	r26, 0x55	; 85
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e5 e5       	ldi	r30, 0x55	; 85
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	8d 7f       	andi	r24, 0xFD	; 253
     ea6:	8c 93       	st	X, r24
     ea8:	a0 c0       	rjmp	.+320    	; 0xfea <EXI_TriggerEdge+0x1fe>
			break;
		case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC00);
     eaa:	a5 e5       	ldi	r26, 0x55	; 85
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e5 e5       	ldi	r30, 0x55	; 85
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	8e 7f       	andi	r24, 0xFE	; 254
     eb6:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
     eb8:	a5 e5       	ldi	r26, 0x55	; 85
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e5 e5       	ldi	r30, 0x55	; 85
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	82 60       	ori	r24, 0x02	; 2
     ec4:	8c 93       	st	X, r24
     ec6:	91 c0       	rjmp	.+290    	; 0xfea <EXI_TriggerEdge+0x1fe>
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
     ec8:	a5 e5       	ldi	r26, 0x55	; 85
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e5 e5       	ldi	r30, 0x55	; 85
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	81 60       	ori	r24, 0x01	; 1
     ed4:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
     ed6:	a5 e5       	ldi	r26, 0x55	; 85
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e5 e5       	ldi	r30, 0x55	; 85
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	82 60       	ori	r24, 0x02	; 2
     ee2:	8c 93       	st	X, r24
     ee4:	82 c0       	rjmp	.+260    	; 0xfea <EXI_TriggerEdge+0x1fe>
			break;
		}
		break;
		case EX_INT1:
			switch(edge){
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	3e 83       	std	Y+6, r19	; 0x06
     eee:	2d 83       	std	Y+5, r18	; 0x05
     ef0:	8d 81       	ldd	r24, Y+5	; 0x05
     ef2:	9e 81       	ldd	r25, Y+6	; 0x06
     ef4:	81 30       	cpi	r24, 0x01	; 1
     ef6:	91 05       	cpc	r25, r1
     ef8:	21 f1       	breq	.+72     	; 0xf42 <EXI_TriggerEdge+0x156>
     efa:	2d 81       	ldd	r18, Y+5	; 0x05
     efc:	3e 81       	ldd	r19, Y+6	; 0x06
     efe:	22 30       	cpi	r18, 0x02	; 2
     f00:	31 05       	cpc	r19, r1
     f02:	2c f4       	brge	.+10     	; 0xf0e <EXI_TriggerEdge+0x122>
     f04:	8d 81       	ldd	r24, Y+5	; 0x05
     f06:	9e 81       	ldd	r25, Y+6	; 0x06
     f08:	00 97       	sbiw	r24, 0x00	; 0
     f0a:	61 f0       	breq	.+24     	; 0xf24 <EXI_TriggerEdge+0x138>
     f0c:	6e c0       	rjmp	.+220    	; 0xfea <EXI_TriggerEdge+0x1fe>
     f0e:	2d 81       	ldd	r18, Y+5	; 0x05
     f10:	3e 81       	ldd	r19, Y+6	; 0x06
     f12:	22 30       	cpi	r18, 0x02	; 2
     f14:	31 05       	cpc	r19, r1
     f16:	21 f1       	breq	.+72     	; 0xf60 <EXI_TriggerEdge+0x174>
     f18:	8d 81       	ldd	r24, Y+5	; 0x05
     f1a:	9e 81       	ldd	r25, Y+6	; 0x06
     f1c:	83 30       	cpi	r24, 0x03	; 3
     f1e:	91 05       	cpc	r25, r1
     f20:	71 f1       	breq	.+92     	; 0xf7e <EXI_TriggerEdge+0x192>
     f22:	63 c0       	rjmp	.+198    	; 0xfea <EXI_TriggerEdge+0x1fe>
			case LOW_LEVEL:
				CLR_BIT(MCUCR,ISC10);
     f24:	a5 e5       	ldi	r26, 0x55	; 85
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e5 e5       	ldi	r30, 0x55	; 85
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	8b 7f       	andi	r24, 0xFB	; 251
     f30:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC11);
     f32:	a5 e5       	ldi	r26, 0x55	; 85
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e5 e5       	ldi	r30, 0x55	; 85
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	87 7f       	andi	r24, 0xF7	; 247
     f3e:	8c 93       	st	X, r24
     f40:	54 c0       	rjmp	.+168    	; 0xfea <EXI_TriggerEdge+0x1fe>
				break;
			case ANY_LOGIC_CHANGE:
				SET_BIT(MCUCR,ISC10);
     f42:	a5 e5       	ldi	r26, 0x55	; 85
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e5 e5       	ldi	r30, 0x55	; 85
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	84 60       	ori	r24, 0x04	; 4
     f4e:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC11);
     f50:	a5 e5       	ldi	r26, 0x55	; 85
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e5 e5       	ldi	r30, 0x55	; 85
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	87 7f       	andi	r24, 0xF7	; 247
     f5c:	8c 93       	st	X, r24
     f5e:	45 c0       	rjmp	.+138    	; 0xfea <EXI_TriggerEdge+0x1fe>
				break;
			case FALLING_EDGE:
				CLR_BIT(MCUCR,ISC10);
     f60:	a5 e5       	ldi	r26, 0x55	; 85
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e5 e5       	ldi	r30, 0x55	; 85
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	8b 7f       	andi	r24, 0xFB	; 251
     f6c:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
     f6e:	a5 e5       	ldi	r26, 0x55	; 85
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e5 e5       	ldi	r30, 0x55	; 85
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	88 60       	ori	r24, 0x08	; 8
     f7a:	8c 93       	st	X, r24
     f7c:	36 c0       	rjmp	.+108    	; 0xfea <EXI_TriggerEdge+0x1fe>
				break;
			case RISING_EDGE:
				SET_BIT(MCUCR,ISC10);
     f7e:	a5 e5       	ldi	r26, 0x55	; 85
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e5 e5       	ldi	r30, 0x55	; 85
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	84 60       	ori	r24, 0x04	; 4
     f8a:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
     f8c:	a5 e5       	ldi	r26, 0x55	; 85
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e5 e5       	ldi	r30, 0x55	; 85
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	88 60       	ori	r24, 0x08	; 8
     f98:	8c 93       	st	X, r24
     f9a:	27 c0       	rjmp	.+78     	; 0xfea <EXI_TriggerEdge+0x1fe>
				break;
			}
			break;
			case EX_INT2:
				switch(edge){
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	3c 83       	std	Y+4, r19	; 0x04
     fa4:	2b 83       	std	Y+3, r18	; 0x03
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	9c 81       	ldd	r25, Y+4	; 0x04
     faa:	82 30       	cpi	r24, 0x02	; 2
     fac:	91 05       	cpc	r25, r1
     fae:	31 f0       	breq	.+12     	; 0xfbc <EXI_TriggerEdge+0x1d0>
     fb0:	2b 81       	ldd	r18, Y+3	; 0x03
     fb2:	3c 81       	ldd	r19, Y+4	; 0x04
     fb4:	23 30       	cpi	r18, 0x03	; 3
     fb6:	31 05       	cpc	r19, r1
     fb8:	49 f0       	breq	.+18     	; 0xfcc <EXI_TriggerEdge+0x1e0>
     fba:	10 c0       	rjmp	.+32     	; 0xfdc <EXI_TriggerEdge+0x1f0>
				case FALLING_EDGE:
					CLR_BIT(MCUCSR,ISC2);
     fbc:	a4 e5       	ldi	r26, 0x54	; 84
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e4 e5       	ldi	r30, 0x54	; 84
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	8f 7b       	andi	r24, 0xBF	; 191
     fc8:	8c 93       	st	X, r24
     fca:	0f c0       	rjmp	.+30     	; 0xfea <EXI_TriggerEdge+0x1fe>
					break;
				case RISING_EDGE:
					SET_BIT(MCUCSR,ISC2);
     fcc:	a4 e5       	ldi	r26, 0x54	; 84
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e4 e5       	ldi	r30, 0x54	; 84
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	80 64       	ori	r24, 0x40	; 64
     fd8:	8c 93       	st	X, r24
     fda:	07 c0       	rjmp	.+14     	; 0xfea <EXI_TriggerEdge+0x1fe>
					break;
				default:   // Because we haven't handled all cases just cuz of data sheet
					CLR_BIT(MCUCSR,ISC2);
     fdc:	a4 e5       	ldi	r26, 0x54	; 84
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e4 e5       	ldi	r30, 0x54	; 84
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	8f 7b       	andi	r24, 0xBF	; 191
     fe8:	8c 93       	st	X, r24
				}
				break;
	}
}
     fea:	2a 96       	adiw	r28, 0x0a	; 10
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	f8 94       	cli
     ff0:	de bf       	out	0x3e, r29	; 62
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	cd bf       	out	0x3d, r28	; 61
     ff6:	cf 91       	pop	r28
     ff8:	df 91       	pop	r29
     ffa:	08 95       	ret

00000ffc <__vector_1>:
/*                     ISR                                              */
/************************************************************************/

/* What if the user forgot to send a function to SetCallBack, We made an initialization with NULLPTR, So we can't call a NULLPTR, it will give undefined behavior  */

ISR(INT0_vect){
     ffc:	1f 92       	push	r1
     ffe:	0f 92       	push	r0
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	0f 92       	push	r0
    1004:	11 24       	eor	r1, r1
    1006:	2f 93       	push	r18
    1008:	3f 93       	push	r19
    100a:	4f 93       	push	r20
    100c:	5f 93       	push	r21
    100e:	6f 93       	push	r22
    1010:	7f 93       	push	r23
    1012:	8f 93       	push	r24
    1014:	9f 93       	push	r25
    1016:	af 93       	push	r26
    1018:	bf 93       	push	r27
    101a:	ef 93       	push	r30
    101c:	ff 93       	push	r31
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
	if(INT0_Fptr != NULLPTR){
    1026:	80 91 9a 01 	lds	r24, 0x019A
    102a:	90 91 9b 01 	lds	r25, 0x019B
    102e:	00 97       	sbiw	r24, 0x00	; 0
    1030:	29 f0       	breq	.+10     	; 0x103c <__vector_1+0x40>
		INT0_Fptr();
    1032:	e0 91 9a 01 	lds	r30, 0x019A
    1036:	f0 91 9b 01 	lds	r31, 0x019B
    103a:	09 95       	icall
	}
}
    103c:	cf 91       	pop	r28
    103e:	df 91       	pop	r29
    1040:	ff 91       	pop	r31
    1042:	ef 91       	pop	r30
    1044:	bf 91       	pop	r27
    1046:	af 91       	pop	r26
    1048:	9f 91       	pop	r25
    104a:	8f 91       	pop	r24
    104c:	7f 91       	pop	r23
    104e:	6f 91       	pop	r22
    1050:	5f 91       	pop	r21
    1052:	4f 91       	pop	r20
    1054:	3f 91       	pop	r19
    1056:	2f 91       	pop	r18
    1058:	0f 90       	pop	r0
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	0f 90       	pop	r0
    105e:	1f 90       	pop	r1
    1060:	18 95       	reti

00001062 <__vector_2>:

ISR(INT1_vect){
    1062:	1f 92       	push	r1
    1064:	0f 92       	push	r0
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	0f 92       	push	r0
    106a:	11 24       	eor	r1, r1
    106c:	2f 93       	push	r18
    106e:	3f 93       	push	r19
    1070:	4f 93       	push	r20
    1072:	5f 93       	push	r21
    1074:	6f 93       	push	r22
    1076:	7f 93       	push	r23
    1078:	8f 93       	push	r24
    107a:	9f 93       	push	r25
    107c:	af 93       	push	r26
    107e:	bf 93       	push	r27
    1080:	ef 93       	push	r30
    1082:	ff 93       	push	r31
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
	if(INT1_Fptr != NULLPTR){
    108c:	80 91 9c 01 	lds	r24, 0x019C
    1090:	90 91 9d 01 	lds	r25, 0x019D
    1094:	00 97       	sbiw	r24, 0x00	; 0
    1096:	29 f0       	breq	.+10     	; 0x10a2 <__vector_2+0x40>
		INT1_Fptr();
    1098:	e0 91 9c 01 	lds	r30, 0x019C
    109c:	f0 91 9d 01 	lds	r31, 0x019D
    10a0:	09 95       	icall
	}
}
    10a2:	cf 91       	pop	r28
    10a4:	df 91       	pop	r29
    10a6:	ff 91       	pop	r31
    10a8:	ef 91       	pop	r30
    10aa:	bf 91       	pop	r27
    10ac:	af 91       	pop	r26
    10ae:	9f 91       	pop	r25
    10b0:	8f 91       	pop	r24
    10b2:	7f 91       	pop	r23
    10b4:	6f 91       	pop	r22
    10b6:	5f 91       	pop	r21
    10b8:	4f 91       	pop	r20
    10ba:	3f 91       	pop	r19
    10bc:	2f 91       	pop	r18
    10be:	0f 90       	pop	r0
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	0f 90       	pop	r0
    10c4:	1f 90       	pop	r1
    10c6:	18 95       	reti

000010c8 <__vector_3>:

ISR(INT2_vect){
    10c8:	1f 92       	push	r1
    10ca:	0f 92       	push	r0
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	0f 92       	push	r0
    10d0:	11 24       	eor	r1, r1
    10d2:	2f 93       	push	r18
    10d4:	3f 93       	push	r19
    10d6:	4f 93       	push	r20
    10d8:	5f 93       	push	r21
    10da:	6f 93       	push	r22
    10dc:	7f 93       	push	r23
    10de:	8f 93       	push	r24
    10e0:	9f 93       	push	r25
    10e2:	af 93       	push	r26
    10e4:	bf 93       	push	r27
    10e6:	ef 93       	push	r30
    10e8:	ff 93       	push	r31
    10ea:	df 93       	push	r29
    10ec:	cf 93       	push	r28
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
	if(INT2_Fptr != NULLPTR){
    10f2:	80 91 9e 01 	lds	r24, 0x019E
    10f6:	90 91 9f 01 	lds	r25, 0x019F
    10fa:	00 97       	sbiw	r24, 0x00	; 0
    10fc:	29 f0       	breq	.+10     	; 0x1108 <__vector_3+0x40>
		INT2_Fptr();
    10fe:	e0 91 9e 01 	lds	r30, 0x019E
    1102:	f0 91 9f 01 	lds	r31, 0x019F
    1106:	09 95       	icall
	}
}
    1108:	cf 91       	pop	r28
    110a:	df 91       	pop	r29
    110c:	ff 91       	pop	r31
    110e:	ef 91       	pop	r30
    1110:	bf 91       	pop	r27
    1112:	af 91       	pop	r26
    1114:	9f 91       	pop	r25
    1116:	8f 91       	pop	r24
    1118:	7f 91       	pop	r23
    111a:	6f 91       	pop	r22
    111c:	5f 91       	pop	r21
    111e:	4f 91       	pop	r20
    1120:	3f 91       	pop	r19
    1122:	2f 91       	pop	r18
    1124:	0f 90       	pop	r0
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	0f 90       	pop	r0
    112a:	1f 90       	pop	r1
    112c:	18 95       	reti

0000112e <DIO_ES_tSetPinDirection>:
 * DIO_ES_tSetPinDirection is used to set pin direction
 * ( INPUT or OUTPUT )
 */

ES_t DIO_ES_tSetPinDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Dir_Type copy_u8_PinDirection)
{
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	00 d0       	rcall	.+0      	; 0x1134 <DIO_ES_tSetPinDirection+0x6>
    1134:	00 d0       	rcall	.+0      	; 0x1136 <DIO_ES_tSetPinDirection+0x8>
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	89 83       	std	Y+1, r24	; 0x01
    113c:	6a 83       	std	Y+2, r22	; 0x02
    113e:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	88 30       	cpi	r24, 0x08	; 8
    1144:	18 f0       	brcs	.+6      	; 0x114c <DIO_ES_tSetPinDirection+0x1e>
		return ES_NOT_OK;
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	8c 83       	std	Y+4, r24	; 0x04
    114a:	d8 c0       	rjmp	.+432    	; 0x12fc <DIO_ES_tSetPinDirection+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	88 23       	and	r24, r24
    1150:	91 f5       	brne	.+100    	; 0x11b6 <DIO_ES_tSetPinDirection+0x88>
		if(copy_u8_PinDirection == OUTPUT){
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	81 30       	cpi	r24, 0x01	; 1
    1156:	a1 f4       	brne	.+40     	; 0x1180 <DIO_ES_tSetPinDirection+0x52>
			SET_BIT(DDRA,copy_u8_PinId);
    1158:	aa e3       	ldi	r26, 0x3A	; 58
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	ea e3       	ldi	r30, 0x3A	; 58
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	48 2f       	mov	r20, r24
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	02 2e       	mov	r0, r18
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <DIO_ES_tSetPinDirection+0x48>
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	0a 94       	dec	r0
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <DIO_ES_tSetPinDirection+0x44>
    117a:	84 2b       	or	r24, r20
    117c:	8c 93       	st	X, r24
    117e:	bd c0       	rjmp	.+378    	; 0x12fa <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	88 23       	and	r24, r24
    1184:	a9 f4       	brne	.+42     	; 0x11b0 <DIO_ES_tSetPinDirection+0x82>
			CLR_BIT(DDRA,copy_u8_PinId);
    1186:	aa e3       	ldi	r26, 0x3A	; 58
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	ea e3       	ldi	r30, 0x3A	; 58
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	48 2f       	mov	r20, r24
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 2e       	mov	r0, r18
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <DIO_ES_tSetPinDirection+0x76>
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	0a 94       	dec	r0
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <DIO_ES_tSetPinDirection+0x72>
    11a8:	80 95       	com	r24
    11aa:	84 23       	and	r24, r20
    11ac:	8c 93       	st	X, r24
    11ae:	a5 c0       	rjmp	.+330    	; 0x12fa <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	8c 83       	std	Y+4, r24	; 0x04
    11b4:	a3 c0       	rjmp	.+326    	; 0x12fc <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	91 f5       	brne	.+100    	; 0x1220 <DIO_ES_tSetPinDirection+0xf2>
		if(copy_u8_PinDirection == OUTPUT){
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	81 30       	cpi	r24, 0x01	; 1
    11c0:	a1 f4       	brne	.+40     	; 0x11ea <DIO_ES_tSetPinDirection+0xbc>
			SET_BIT(DDRB,copy_u8_PinId);
    11c2:	a7 e3       	ldi	r26, 0x37	; 55
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e7 e3       	ldi	r30, 0x37	; 55
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	48 2f       	mov	r20, r24
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	02 2e       	mov	r0, r18
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <DIO_ES_tSetPinDirection+0xb2>
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	0a 94       	dec	r0
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <DIO_ES_tSetPinDirection+0xae>
    11e4:	84 2b       	or	r24, r20
    11e6:	8c 93       	st	X, r24
    11e8:	88 c0       	rjmp	.+272    	; 0x12fa <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	88 23       	and	r24, r24
    11ee:	a9 f4       	brne	.+42     	; 0x121a <DIO_ES_tSetPinDirection+0xec>
			CLR_BIT(DDRB,copy_u8_PinId);
    11f0:	a7 e3       	ldi	r26, 0x37	; 55
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e7 e3       	ldi	r30, 0x37	; 55
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	48 2f       	mov	r20, r24
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	02 2e       	mov	r0, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <DIO_ES_tSetPinDirection+0xe0>
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	0a 94       	dec	r0
    1210:	e2 f7       	brpl	.-8      	; 0x120a <DIO_ES_tSetPinDirection+0xdc>
    1212:	80 95       	com	r24
    1214:	84 23       	and	r24, r20
    1216:	8c 93       	st	X, r24
    1218:	70 c0       	rjmp	.+224    	; 0x12fa <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	8c 83       	std	Y+4, r24	; 0x04
    121e:	6e c0       	rjmp	.+220    	; 0x12fc <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	82 30       	cpi	r24, 0x02	; 2
    1224:	91 f5       	brne	.+100    	; 0x128a <DIO_ES_tSetPinDirection+0x15c>
		if(copy_u8_PinDirection == OUTPUT){
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	81 30       	cpi	r24, 0x01	; 1
    122a:	a1 f4       	brne	.+40     	; 0x1254 <DIO_ES_tSetPinDirection+0x126>
			SET_BIT(DDRC,copy_u8_PinId);
    122c:	a4 e3       	ldi	r26, 0x34	; 52
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e4 e3       	ldi	r30, 0x34	; 52
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	48 2f       	mov	r20, r24
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	02 2e       	mov	r0, r18
    1244:	02 c0       	rjmp	.+4      	; 0x124a <DIO_ES_tSetPinDirection+0x11c>
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	0a 94       	dec	r0
    124c:	e2 f7       	brpl	.-8      	; 0x1246 <DIO_ES_tSetPinDirection+0x118>
    124e:	84 2b       	or	r24, r20
    1250:	8c 93       	st	X, r24
    1252:	53 c0       	rjmp	.+166    	; 0x12fa <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	88 23       	and	r24, r24
    1258:	a9 f4       	brne	.+42     	; 0x1284 <DIO_ES_tSetPinDirection+0x156>
			CLR_BIT(DDRC,copy_u8_PinId);
    125a:	a4 e3       	ldi	r26, 0x34	; 52
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e4 e3       	ldi	r30, 0x34	; 52
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	48 2f       	mov	r20, r24
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	02 2e       	mov	r0, r18
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <DIO_ES_tSetPinDirection+0x14a>
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	0a 94       	dec	r0
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <DIO_ES_tSetPinDirection+0x146>
    127c:	80 95       	com	r24
    127e:	84 23       	and	r24, r20
    1280:	8c 93       	st	X, r24
    1282:	3b c0       	rjmp	.+118    	; 0x12fa <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	8c 83       	std	Y+4, r24	; 0x04
    1288:	39 c0       	rjmp	.+114    	; 0x12fc <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	83 30       	cpi	r24, 0x03	; 3
    128e:	91 f5       	brne	.+100    	; 0x12f4 <DIO_ES_tSetPinDirection+0x1c6>
		if(copy_u8_PinDirection == OUTPUT){
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	81 30       	cpi	r24, 0x01	; 1
    1294:	a1 f4       	brne	.+40     	; 0x12be <DIO_ES_tSetPinDirection+0x190>
			SET_BIT(DDRD,copy_u8_PinId);
    1296:	a1 e3       	ldi	r26, 0x31	; 49
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e1 e3       	ldi	r30, 0x31	; 49
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	48 2f       	mov	r20, r24
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	02 2e       	mov	r0, r18
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <DIO_ES_tSetPinDirection+0x186>
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	0a 94       	dec	r0
    12b6:	e2 f7       	brpl	.-8      	; 0x12b0 <DIO_ES_tSetPinDirection+0x182>
    12b8:	84 2b       	or	r24, r20
    12ba:	8c 93       	st	X, r24
    12bc:	1e c0       	rjmp	.+60     	; 0x12fa <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	88 23       	and	r24, r24
    12c2:	a9 f4       	brne	.+42     	; 0x12ee <DIO_ES_tSetPinDirection+0x1c0>
			CLR_BIT(DDRD,copy_u8_PinId);
    12c4:	a1 e3       	ldi	r26, 0x31	; 49
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e1 e3       	ldi	r30, 0x31	; 49
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	48 2f       	mov	r20, r24
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	02 2e       	mov	r0, r18
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <DIO_ES_tSetPinDirection+0x1b4>
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	0a 94       	dec	r0
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <DIO_ES_tSetPinDirection+0x1b0>
    12e6:	80 95       	com	r24
    12e8:	84 23       	and	r24, r20
    12ea:	8c 93       	st	X, r24
    12ec:	06 c0       	rjmp	.+12     	; 0x12fa <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	8c 83       	std	Y+4, r24	; 0x04
    12f2:	04 c0       	rjmp	.+8      	; 0x12fc <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else{
		return ES_NOT_OK;
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	8c 83       	std	Y+4, r24	; 0x04
    12f8:	01 c0       	rjmp	.+2      	; 0x12fc <DIO_ES_tSetPinDirection+0x1ce>
	}
	return ES_OK;
    12fa:	1c 82       	std	Y+4, r1	; 0x04
    12fc:	8c 81       	ldd	r24, Y+4	; 0x04
}
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <DIO_ES_tSetPinValue>:
 * DIO_ES_tSetPinValue is used to set pin value
 * ( LOW or HIGH )
 */

ES_t DIO_ES_tSetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type copy_u8_PinValue)
{
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	00 d0       	rcall	.+0      	; 0x1312 <DIO_ES_tSetPinValue+0x6>
    1312:	00 d0       	rcall	.+0      	; 0x1314 <DIO_ES_tSetPinValue+0x8>
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	89 83       	std	Y+1, r24	; 0x01
    131a:	6a 83       	std	Y+2, r22	; 0x02
    131c:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	88 30       	cpi	r24, 0x08	; 8
    1322:	18 f0       	brcs	.+6      	; 0x132a <DIO_ES_tSetPinValue+0x1e>
		return ES_NOT_OK;
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	8c 83       	std	Y+4, r24	; 0x04
    1328:	d8 c0       	rjmp	.+432    	; 0x14da <DIO_ES_tSetPinValue+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    132a:	89 81       	ldd	r24, Y+1	; 0x01
    132c:	88 23       	and	r24, r24
    132e:	91 f5       	brne	.+100    	; 0x1394 <DIO_ES_tSetPinValue+0x88>
		if(copy_u8_PinValue == HIGH){
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	81 30       	cpi	r24, 0x01	; 1
    1334:	a1 f4       	brne	.+40     	; 0x135e <DIO_ES_tSetPinValue+0x52>
			SET_BIT(PORTA,copy_u8_PinId);
    1336:	ab e3       	ldi	r26, 0x3B	; 59
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	eb e3       	ldi	r30, 0x3B	; 59
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	48 2f       	mov	r20, r24
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	02 2e       	mov	r0, r18
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <DIO_ES_tSetPinValue+0x48>
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	0a 94       	dec	r0
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <DIO_ES_tSetPinValue+0x44>
    1358:	84 2b       	or	r24, r20
    135a:	8c 93       	st	X, r24
    135c:	bd c0       	rjmp	.+378    	; 0x14d8 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	88 23       	and	r24, r24
    1362:	a9 f4       	brne	.+42     	; 0x138e <DIO_ES_tSetPinValue+0x82>
			CLR_BIT(PORTA,copy_u8_PinId);
    1364:	ab e3       	ldi	r26, 0x3B	; 59
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	eb e3       	ldi	r30, 0x3B	; 59
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	48 2f       	mov	r20, r24
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	02 2e       	mov	r0, r18
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <DIO_ES_tSetPinValue+0x76>
    137e:	88 0f       	add	r24, r24
    1380:	99 1f       	adc	r25, r25
    1382:	0a 94       	dec	r0
    1384:	e2 f7       	brpl	.-8      	; 0x137e <DIO_ES_tSetPinValue+0x72>
    1386:	80 95       	com	r24
    1388:	84 23       	and	r24, r20
    138a:	8c 93       	st	X, r24
    138c:	a5 c0       	rjmp	.+330    	; 0x14d8 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	8c 83       	std	Y+4, r24	; 0x04
    1392:	a3 c0       	rjmp	.+326    	; 0x14da <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	81 30       	cpi	r24, 0x01	; 1
    1398:	91 f5       	brne	.+100    	; 0x13fe <DIO_ES_tSetPinValue+0xf2>
		if(copy_u8_PinValue == HIGH){
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	81 30       	cpi	r24, 0x01	; 1
    139e:	a1 f4       	brne	.+40     	; 0x13c8 <DIO_ES_tSetPinValue+0xbc>
			SET_BIT(PORTB,copy_u8_PinId);
    13a0:	a8 e3       	ldi	r26, 0x38	; 56
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	e8 e3       	ldi	r30, 0x38	; 56
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	48 2f       	mov	r20, r24
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	02 2e       	mov	r0, r18
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <DIO_ES_tSetPinValue+0xb2>
    13ba:	88 0f       	add	r24, r24
    13bc:	99 1f       	adc	r25, r25
    13be:	0a 94       	dec	r0
    13c0:	e2 f7       	brpl	.-8      	; 0x13ba <DIO_ES_tSetPinValue+0xae>
    13c2:	84 2b       	or	r24, r20
    13c4:	8c 93       	st	X, r24
    13c6:	88 c0       	rjmp	.+272    	; 0x14d8 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	88 23       	and	r24, r24
    13cc:	a9 f4       	brne	.+42     	; 0x13f8 <DIO_ES_tSetPinValue+0xec>
			CLR_BIT(PORTB,copy_u8_PinId);
    13ce:	a8 e3       	ldi	r26, 0x38	; 56
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	e8 e3       	ldi	r30, 0x38	; 56
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	48 2f       	mov	r20, r24
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	02 2e       	mov	r0, r18
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <DIO_ES_tSetPinValue+0xe0>
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	0a 94       	dec	r0
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <DIO_ES_tSetPinValue+0xdc>
    13f0:	80 95       	com	r24
    13f2:	84 23       	and	r24, r20
    13f4:	8c 93       	st	X, r24
    13f6:	70 c0       	rjmp	.+224    	; 0x14d8 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	8c 83       	std	Y+4, r24	; 0x04
    13fc:	6e c0       	rjmp	.+220    	; 0x14da <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	82 30       	cpi	r24, 0x02	; 2
    1402:	91 f5       	brne	.+100    	; 0x1468 <DIO_ES_tSetPinValue+0x15c>
		if(copy_u8_PinValue == HIGH){
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	81 30       	cpi	r24, 0x01	; 1
    1408:	a1 f4       	brne	.+40     	; 0x1432 <DIO_ES_tSetPinValue+0x126>
			SET_BIT(PORTC,copy_u8_PinId);
    140a:	a5 e3       	ldi	r26, 0x35	; 53
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	e5 e3       	ldi	r30, 0x35	; 53
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	48 2f       	mov	r20, r24
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	02 2e       	mov	r0, r18
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <DIO_ES_tSetPinValue+0x11c>
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	0a 94       	dec	r0
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <DIO_ES_tSetPinValue+0x118>
    142c:	84 2b       	or	r24, r20
    142e:	8c 93       	st	X, r24
    1430:	53 c0       	rjmp	.+166    	; 0x14d8 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	88 23       	and	r24, r24
    1436:	a9 f4       	brne	.+42     	; 0x1462 <DIO_ES_tSetPinValue+0x156>
			CLR_BIT(PORTC,copy_u8_PinId);
    1438:	a5 e3       	ldi	r26, 0x35	; 53
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e5 e3       	ldi	r30, 0x35	; 53
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	48 2f       	mov	r20, r24
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	02 2e       	mov	r0, r18
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <DIO_ES_tSetPinValue+0x14a>
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	0a 94       	dec	r0
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <DIO_ES_tSetPinValue+0x146>
    145a:	80 95       	com	r24
    145c:	84 23       	and	r24, r20
    145e:	8c 93       	st	X, r24
    1460:	3b c0       	rjmp	.+118    	; 0x14d8 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	8c 83       	std	Y+4, r24	; 0x04
    1466:	39 c0       	rjmp	.+114    	; 0x14da <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	83 30       	cpi	r24, 0x03	; 3
    146c:	91 f5       	brne	.+100    	; 0x14d2 <DIO_ES_tSetPinValue+0x1c6>
		if(copy_u8_PinValue == HIGH){
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	81 30       	cpi	r24, 0x01	; 1
    1472:	a1 f4       	brne	.+40     	; 0x149c <DIO_ES_tSetPinValue+0x190>
			SET_BIT(PORTD,copy_u8_PinId);
    1474:	a2 e3       	ldi	r26, 0x32	; 50
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	e2 e3       	ldi	r30, 0x32	; 50
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	48 2f       	mov	r20, r24
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	02 2e       	mov	r0, r18
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <DIO_ES_tSetPinValue+0x186>
    148e:	88 0f       	add	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	0a 94       	dec	r0
    1494:	e2 f7       	brpl	.-8      	; 0x148e <DIO_ES_tSetPinValue+0x182>
    1496:	84 2b       	or	r24, r20
    1498:	8c 93       	st	X, r24
    149a:	1e c0       	rjmp	.+60     	; 0x14d8 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	88 23       	and	r24, r24
    14a0:	a9 f4       	brne	.+42     	; 0x14cc <DIO_ES_tSetPinValue+0x1c0>
			CLR_BIT(PORTD,copy_u8_PinId);
    14a2:	a2 e3       	ldi	r26, 0x32	; 50
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e2 e3       	ldi	r30, 0x32	; 50
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	48 2f       	mov	r20, r24
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	02 2e       	mov	r0, r18
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <DIO_ES_tSetPinValue+0x1b4>
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	0a 94       	dec	r0
    14c2:	e2 f7       	brpl	.-8      	; 0x14bc <DIO_ES_tSetPinValue+0x1b0>
    14c4:	80 95       	com	r24
    14c6:	84 23       	and	r24, r20
    14c8:	8c 93       	st	X, r24
    14ca:	06 c0       	rjmp	.+12     	; 0x14d8 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	8c 83       	std	Y+4, r24	; 0x04
    14d0:	04 c0       	rjmp	.+8      	; 0x14da <DIO_ES_tSetPinValue+0x1ce>
		}
	}else{
		return ES_NOT_OK;
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	8c 83       	std	Y+4, r24	; 0x04
    14d6:	01 c0       	rjmp	.+2      	; 0x14da <DIO_ES_tSetPinValue+0x1ce>
	}
	return ES_OK;
    14d8:	1c 82       	std	Y+4, r1	; 0x04
    14da:	8c 81       	ldd	r24, Y+4	; 0x04
}
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	08 95       	ret

000014ea <DIO_ES_tGetPinValue>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tGetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type* copy_pu8_PinValue)
{
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	00 d0       	rcall	.+0      	; 0x14f0 <DIO_ES_tGetPinValue+0x6>
    14f0:	00 d0       	rcall	.+0      	; 0x14f2 <DIO_ES_tGetPinValue+0x8>
    14f2:	0f 92       	push	r0
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    14f8:	89 83       	std	Y+1, r24	; 0x01
    14fa:	6a 83       	std	Y+2, r22	; 0x02
    14fc:	5c 83       	std	Y+4, r21	; 0x04
    14fe:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	88 30       	cpi	r24, 0x08	; 8
    1504:	18 f0       	brcs	.+6      	; 0x150c <DIO_ES_tGetPinValue+0x22>
		return ES_NOT_OK;
    1506:	41 e0       	ldi	r20, 0x01	; 1
    1508:	4d 83       	std	Y+5, r20	; 0x05
    150a:	60 c0       	rjmp	.+192    	; 0x15cc <DIO_ES_tGetPinValue+0xe2>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	88 23       	and	r24, r24
    1510:	a1 f4       	brne	.+40     	; 0x153a <DIO_ES_tGetPinValue+0x50>
		*copy_pu8_PinValue = GET_BIT(PINA,copy_u8_PinId);
    1512:	e9 e3       	ldi	r30, 0x39	; 57
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	88 2f       	mov	r24, r24
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	a9 01       	movw	r20, r18
    1524:	02 c0       	rjmp	.+4      	; 0x152a <DIO_ES_tGetPinValue+0x40>
    1526:	55 95       	asr	r21
    1528:	47 95       	ror	r20
    152a:	8a 95       	dec	r24
    152c:	e2 f7       	brpl	.-8      	; 0x1526 <DIO_ES_tGetPinValue+0x3c>
    152e:	ca 01       	movw	r24, r20
    1530:	81 70       	andi	r24, 0x01	; 1
    1532:	eb 81       	ldd	r30, Y+3	; 0x03
    1534:	fc 81       	ldd	r31, Y+4	; 0x04
    1536:	80 83       	st	Z, r24
    1538:	48 c0       	rjmp	.+144    	; 0x15ca <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	81 30       	cpi	r24, 0x01	; 1
    153e:	a1 f4       	brne	.+40     	; 0x1568 <DIO_ES_tGetPinValue+0x7e>
		*copy_pu8_PinValue = GET_BIT(PINB,copy_u8_PinId);
    1540:	e6 e3       	ldi	r30, 0x36	; 54
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	88 2f       	mov	r24, r24
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	a9 01       	movw	r20, r18
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <DIO_ES_tGetPinValue+0x6e>
    1554:	55 95       	asr	r21
    1556:	47 95       	ror	r20
    1558:	8a 95       	dec	r24
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <DIO_ES_tGetPinValue+0x6a>
    155c:	ca 01       	movw	r24, r20
    155e:	81 70       	andi	r24, 0x01	; 1
    1560:	eb 81       	ldd	r30, Y+3	; 0x03
    1562:	fc 81       	ldd	r31, Y+4	; 0x04
    1564:	80 83       	st	Z, r24
    1566:	31 c0       	rjmp	.+98     	; 0x15ca <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	82 30       	cpi	r24, 0x02	; 2
    156c:	a1 f4       	brne	.+40     	; 0x1596 <DIO_ES_tGetPinValue+0xac>
		*copy_pu8_PinValue = GET_BIT(PINC,copy_u8_PinId);
    156e:	e3 e3       	ldi	r30, 0x33	; 51
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	88 2f       	mov	r24, r24
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	a9 01       	movw	r20, r18
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <DIO_ES_tGetPinValue+0x9c>
    1582:	55 95       	asr	r21
    1584:	47 95       	ror	r20
    1586:	8a 95       	dec	r24
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <DIO_ES_tGetPinValue+0x98>
    158a:	ca 01       	movw	r24, r20
    158c:	81 70       	andi	r24, 0x01	; 1
    158e:	eb 81       	ldd	r30, Y+3	; 0x03
    1590:	fc 81       	ldd	r31, Y+4	; 0x04
    1592:	80 83       	st	Z, r24
    1594:	1a c0       	rjmp	.+52     	; 0x15ca <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    1596:	89 81       	ldd	r24, Y+1	; 0x01
    1598:	83 30       	cpi	r24, 0x03	; 3
    159a:	a1 f4       	brne	.+40     	; 0x15c4 <DIO_ES_tGetPinValue+0xda>
		*copy_pu8_PinValue = GET_BIT(PIND,copy_u8_PinId);
    159c:	e0 e3       	ldi	r30, 0x30	; 48
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	88 2f       	mov	r24, r24
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	a9 01       	movw	r20, r18
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <DIO_ES_tGetPinValue+0xca>
    15b0:	55 95       	asr	r21
    15b2:	47 95       	ror	r20
    15b4:	8a 95       	dec	r24
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <DIO_ES_tGetPinValue+0xc6>
    15b8:	ca 01       	movw	r24, r20
    15ba:	81 70       	andi	r24, 0x01	; 1
    15bc:	eb 81       	ldd	r30, Y+3	; 0x03
    15be:	fc 81       	ldd	r31, Y+4	; 0x04
    15c0:	80 83       	st	Z, r24
    15c2:	03 c0       	rjmp	.+6      	; 0x15ca <DIO_ES_tGetPinValue+0xe0>
	}else{
		return ES_NOT_OK;
    15c4:	51 e0       	ldi	r21, 0x01	; 1
    15c6:	5d 83       	std	Y+5, r21	; 0x05
    15c8:	01 c0       	rjmp	.+2      	; 0x15cc <DIO_ES_tGetPinValue+0xe2>
	}
	return ES_OK;
    15ca:	1d 82       	std	Y+5, r1	; 0x05
    15cc:	8d 81       	ldd	r24, Y+5	; 0x05
}
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	cf 91       	pop	r28
    15da:	df 91       	pop	r29
    15dc:	08 95       	ret

000015de <DIO_ES_tSetPortDirection>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tSetPortDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Dir_Type copy_u8_PortDirection)
{
    15de:	df 93       	push	r29
    15e0:	cf 93       	push	r28
    15e2:	00 d0       	rcall	.+0      	; 0x15e4 <DIO_ES_tSetPortDirection+0x6>
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <DIO_ES_tSetPortDirection+0x8>
    15e6:	0f 92       	push	r0
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	89 83       	std	Y+1, r24	; 0x01
    15ee:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortDirection != OUTPUT) && (copy_u8_PortDirection != OUTPUT)){
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	81 30       	cpi	r24, 0x01	; 1
    15f4:	31 f0       	breq	.+12     	; 0x1602 <DIO_ES_tSetPortDirection+0x24>
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	81 30       	cpi	r24, 0x01	; 1
    15fa:	19 f0       	breq	.+6      	; 0x1602 <DIO_ES_tSetPortDirection+0x24>
		return ES_NOT_OK;
    15fc:	21 e0       	ldi	r18, 0x01	; 1
    15fe:	2d 83       	std	Y+5, r18	; 0x05
    1600:	53 c0       	rjmp	.+166    	; 0x16a8 <DIO_ES_tSetPortDirection+0xca>
	}
	switch(copy_u8_PortId){
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	3c 83       	std	Y+4, r19	; 0x04
    160a:	2b 83       	std	Y+3, r18	; 0x03
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	9c 81       	ldd	r25, Y+4	; 0x04
    1610:	81 30       	cpi	r24, 0x01	; 1
    1612:	91 05       	cpc	r25, r1
    1614:	09 f1       	breq	.+66     	; 0x1658 <DIO_ES_tSetPortDirection+0x7a>
    1616:	2b 81       	ldd	r18, Y+3	; 0x03
    1618:	3c 81       	ldd	r19, Y+4	; 0x04
    161a:	22 30       	cpi	r18, 0x02	; 2
    161c:	31 05       	cpc	r19, r1
    161e:	2c f4       	brge	.+10     	; 0x162a <DIO_ES_tSetPortDirection+0x4c>
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	9c 81       	ldd	r25, Y+4	; 0x04
    1624:	00 97       	sbiw	r24, 0x00	; 0
    1626:	61 f0       	breq	.+24     	; 0x1640 <DIO_ES_tSetPortDirection+0x62>
    1628:	3b c0       	rjmp	.+118    	; 0x16a0 <DIO_ES_tSetPortDirection+0xc2>
    162a:	2b 81       	ldd	r18, Y+3	; 0x03
    162c:	3c 81       	ldd	r19, Y+4	; 0x04
    162e:	22 30       	cpi	r18, 0x02	; 2
    1630:	31 05       	cpc	r19, r1
    1632:	f1 f0       	breq	.+60     	; 0x1670 <DIO_ES_tSetPortDirection+0x92>
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	9c 81       	ldd	r25, Y+4	; 0x04
    1638:	83 30       	cpi	r24, 0x03	; 3
    163a:	91 05       	cpc	r25, r1
    163c:	29 f1       	breq	.+74     	; 0x1688 <DIO_ES_tSetPortDirection+0xaa>
    163e:	30 c0       	rjmp	.+96     	; 0x16a0 <DIO_ES_tSetPortDirection+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortDirection == OUTPUT)
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	81 30       	cpi	r24, 0x01	; 1
    1644:	29 f4       	brne	.+10     	; 0x1650 <DIO_ES_tSetPortDirection+0x72>
			DDRA = 0xff;
    1646:	ea e3       	ldi	r30, 0x3A	; 58
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	8f ef       	ldi	r24, 0xFF	; 255
    164c:	80 83       	st	Z, r24
    164e:	2b c0       	rjmp	.+86     	; 0x16a6 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRA = 0x00;
    1650:	ea e3       	ldi	r30, 0x3A	; 58
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	10 82       	st	Z, r1
    1656:	27 c0       	rjmp	.+78     	; 0x16a6 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortDirection == OUTPUT)
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	81 30       	cpi	r24, 0x01	; 1
    165c:	29 f4       	brne	.+10     	; 0x1668 <DIO_ES_tSetPortDirection+0x8a>
			DDRB = 0xff;
    165e:	e7 e3       	ldi	r30, 0x37	; 55
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	8f ef       	ldi	r24, 0xFF	; 255
    1664:	80 83       	st	Z, r24
    1666:	1f c0       	rjmp	.+62     	; 0x16a6 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRB = 0x00;
    1668:	e7 e3       	ldi	r30, 0x37	; 55
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	10 82       	st	Z, r1
    166e:	1b c0       	rjmp	.+54     	; 0x16a6 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortDirection == OUTPUT)
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	81 30       	cpi	r24, 0x01	; 1
    1674:	29 f4       	brne	.+10     	; 0x1680 <DIO_ES_tSetPortDirection+0xa2>
			DDRC = 0xff;
    1676:	e4 e3       	ldi	r30, 0x34	; 52
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	8f ef       	ldi	r24, 0xFF	; 255
    167c:	80 83       	st	Z, r24
    167e:	13 c0       	rjmp	.+38     	; 0x16a6 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRC = 0x00;
    1680:	e4 e3       	ldi	r30, 0x34	; 52
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	10 82       	st	Z, r1
    1686:	0f c0       	rjmp	.+30     	; 0x16a6 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortDirection == OUTPUT)
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	81 30       	cpi	r24, 0x01	; 1
    168c:	29 f4       	brne	.+10     	; 0x1698 <DIO_ES_tSetPortDirection+0xba>
			DDRD = 0xff;
    168e:	e1 e3       	ldi	r30, 0x31	; 49
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	8f ef       	ldi	r24, 0xFF	; 255
    1694:	80 83       	st	Z, r24
    1696:	07 c0       	rjmp	.+14     	; 0x16a6 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRD = 0x00;
    1698:	e1 e3       	ldi	r30, 0x31	; 49
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	10 82       	st	Z, r1
    169e:	03 c0       	rjmp	.+6      	; 0x16a6 <DIO_ES_tSetPortDirection+0xc8>
		break;
	default:
		return ES_NOT_OK;
    16a0:	91 e0       	ldi	r25, 0x01	; 1
    16a2:	9d 83       	std	Y+5, r25	; 0x05
    16a4:	01 c0       	rjmp	.+2      	; 0x16a8 <DIO_ES_tSetPortDirection+0xca>
		break;
	}
	return ES_OK;
    16a6:	1d 82       	std	Y+5, r1	; 0x05
    16a8:	8d 81       	ldd	r24, Y+5	; 0x05
}
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

000016ba <DIO_ES_tSetPortValue>:



ES_t DIO_ES_tSetPortValue(DIO_U8_Port_Type copy_u8_PortId, u8 copy_u8_PortValue)
{
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	00 d0       	rcall	.+0      	; 0x16c0 <DIO_ES_tSetPortValue+0x6>
    16c0:	00 d0       	rcall	.+0      	; 0x16c2 <DIO_ES_tSetPortValue+0x8>
    16c2:	0f 92       	push	r0
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	89 83       	std	Y+1, r24	; 0x01
    16ca:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortValue != HIGH) && (copy_u8_PortValue != LOW)){
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	81 30       	cpi	r24, 0x01	; 1
    16d0:	31 f0       	breq	.+12     	; 0x16de <DIO_ES_tSetPortValue+0x24>
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	88 23       	and	r24, r24
    16d6:	19 f0       	breq	.+6      	; 0x16de <DIO_ES_tSetPortValue+0x24>
		return ES_NOT_OK;
    16d8:	21 e0       	ldi	r18, 0x01	; 1
    16da:	2d 83       	std	Y+5, r18	; 0x05
    16dc:	53 c0       	rjmp	.+166    	; 0x1784 <DIO_ES_tSetPortValue+0xca>
	}
	switch(copy_u8_PortId){
    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	28 2f       	mov	r18, r24
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	3c 83       	std	Y+4, r19	; 0x04
    16e6:	2b 83       	std	Y+3, r18	; 0x03
    16e8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ea:	9c 81       	ldd	r25, Y+4	; 0x04
    16ec:	81 30       	cpi	r24, 0x01	; 1
    16ee:	91 05       	cpc	r25, r1
    16f0:	09 f1       	breq	.+66     	; 0x1734 <DIO_ES_tSetPortValue+0x7a>
    16f2:	2b 81       	ldd	r18, Y+3	; 0x03
    16f4:	3c 81       	ldd	r19, Y+4	; 0x04
    16f6:	22 30       	cpi	r18, 0x02	; 2
    16f8:	31 05       	cpc	r19, r1
    16fa:	2c f4       	brge	.+10     	; 0x1706 <DIO_ES_tSetPortValue+0x4c>
    16fc:	8b 81       	ldd	r24, Y+3	; 0x03
    16fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1700:	00 97       	sbiw	r24, 0x00	; 0
    1702:	61 f0       	breq	.+24     	; 0x171c <DIO_ES_tSetPortValue+0x62>
    1704:	3b c0       	rjmp	.+118    	; 0x177c <DIO_ES_tSetPortValue+0xc2>
    1706:	2b 81       	ldd	r18, Y+3	; 0x03
    1708:	3c 81       	ldd	r19, Y+4	; 0x04
    170a:	22 30       	cpi	r18, 0x02	; 2
    170c:	31 05       	cpc	r19, r1
    170e:	f1 f0       	breq	.+60     	; 0x174c <DIO_ES_tSetPortValue+0x92>
    1710:	8b 81       	ldd	r24, Y+3	; 0x03
    1712:	9c 81       	ldd	r25, Y+4	; 0x04
    1714:	83 30       	cpi	r24, 0x03	; 3
    1716:	91 05       	cpc	r25, r1
    1718:	29 f1       	breq	.+74     	; 0x1764 <DIO_ES_tSetPortValue+0xaa>
    171a:	30 c0       	rjmp	.+96     	; 0x177c <DIO_ES_tSetPortValue+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortValue == HIGH)
    171c:	8a 81       	ldd	r24, Y+2	; 0x02
    171e:	81 30       	cpi	r24, 0x01	; 1
    1720:	29 f4       	brne	.+10     	; 0x172c <DIO_ES_tSetPortValue+0x72>
			PORTA = 0xff;
    1722:	eb e3       	ldi	r30, 0x3B	; 59
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	8f ef       	ldi	r24, 0xFF	; 255
    1728:	80 83       	st	Z, r24
    172a:	2b c0       	rjmp	.+86     	; 0x1782 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTA = 0x00;
    172c:	eb e3       	ldi	r30, 0x3B	; 59
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	10 82       	st	Z, r1
    1732:	27 c0       	rjmp	.+78     	; 0x1782 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortValue == HIGH)
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	81 30       	cpi	r24, 0x01	; 1
    1738:	29 f4       	brne	.+10     	; 0x1744 <DIO_ES_tSetPortValue+0x8a>
			PORTB = 0xff;
    173a:	e8 e3       	ldi	r30, 0x38	; 56
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	8f ef       	ldi	r24, 0xFF	; 255
    1740:	80 83       	st	Z, r24
    1742:	1f c0       	rjmp	.+62     	; 0x1782 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTB = 0x00;
    1744:	e8 e3       	ldi	r30, 0x38	; 56
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	10 82       	st	Z, r1
    174a:	1b c0       	rjmp	.+54     	; 0x1782 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortValue == HIGH)
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	81 30       	cpi	r24, 0x01	; 1
    1750:	29 f4       	brne	.+10     	; 0x175c <DIO_ES_tSetPortValue+0xa2>
			PORTC = 0xff;
    1752:	e5 e3       	ldi	r30, 0x35	; 53
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	8f ef       	ldi	r24, 0xFF	; 255
    1758:	80 83       	st	Z, r24
    175a:	13 c0       	rjmp	.+38     	; 0x1782 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTC = 0x00;
    175c:	e5 e3       	ldi	r30, 0x35	; 53
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	10 82       	st	Z, r1
    1762:	0f c0       	rjmp	.+30     	; 0x1782 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortValue == HIGH)
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	81 30       	cpi	r24, 0x01	; 1
    1768:	29 f4       	brne	.+10     	; 0x1774 <DIO_ES_tSetPortValue+0xba>
			PORTD = 0xff;
    176a:	e2 e3       	ldi	r30, 0x32	; 50
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	8f ef       	ldi	r24, 0xFF	; 255
    1770:	80 83       	st	Z, r24
    1772:	07 c0       	rjmp	.+14     	; 0x1782 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTD = 0x00;
    1774:	e2 e3       	ldi	r30, 0x32	; 50
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	10 82       	st	Z, r1
    177a:	03 c0       	rjmp	.+6      	; 0x1782 <DIO_ES_tSetPortValue+0xc8>
		break;
	default:
		return ES_NOT_OK;
    177c:	91 e0       	ldi	r25, 0x01	; 1
    177e:	9d 83       	std	Y+5, r25	; 0x05
    1780:	01 c0       	rjmp	.+2      	; 0x1784 <DIO_ES_tSetPortValue+0xca>
		break;
	}
	return ES_OK;
    1782:	1d 82       	std	Y+5, r1	; 0x05
    1784:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1786:	0f 90       	pop	r0
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	0f 90       	pop	r0
    1790:	cf 91       	pop	r28
    1792:	df 91       	pop	r29
    1794:	08 95       	ret

00001796 <DIO_ES_tTOGPin>:
/*
 * DIO_ES_tTOGPin is used to Toggle a specific pin
 */

ES_t DIO_ES_tTOGPin(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId)
{
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	00 d0       	rcall	.+0      	; 0x179c <DIO_ES_tTOGPin+0x6>
    179c:	0f 92       	push	r0
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
    17a2:	89 83       	std	Y+1, r24	; 0x01
    17a4:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8_PinId > PIN_LIMIT){
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	88 30       	cpi	r24, 0x08	; 8
    17aa:	18 f0       	brcs	.+6      	; 0x17b2 <DIO_ES_tTOGPin+0x1c>
		return ES_NOT_OK;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	8b 83       	std	Y+3, r24	; 0x03
    17b0:	60 c0       	rjmp	.+192    	; 0x1872 <DIO_ES_tTOGPin+0xdc>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	88 23       	and	r24, r24
    17b6:	a1 f4       	brne	.+40     	; 0x17e0 <DIO_ES_tTOGPin+0x4a>
		TOG_BIT(PORTA,copy_u8_PinId);
    17b8:	ab e3       	ldi	r26, 0x3B	; 59
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	eb e3       	ldi	r30, 0x3B	; 59
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	48 2f       	mov	r20, r24
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	02 2e       	mov	r0, r18
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <DIO_ES_tTOGPin+0x40>
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	0a 94       	dec	r0
    17d8:	e2 f7       	brpl	.-8      	; 0x17d2 <DIO_ES_tTOGPin+0x3c>
    17da:	84 27       	eor	r24, r20
    17dc:	8c 93       	st	X, r24
    17de:	48 c0       	rjmp	.+144    	; 0x1870 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	81 30       	cpi	r24, 0x01	; 1
    17e4:	a1 f4       	brne	.+40     	; 0x180e <DIO_ES_tTOGPin+0x78>
		TOG_BIT(PORTB,copy_u8_PinId);
    17e6:	a8 e3       	ldi	r26, 0x38	; 56
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e8 e3       	ldi	r30, 0x38	; 56
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	48 2f       	mov	r20, r24
    17f2:	8a 81       	ldd	r24, Y+2	; 0x02
    17f4:	28 2f       	mov	r18, r24
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	02 2e       	mov	r0, r18
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <DIO_ES_tTOGPin+0x6e>
    1800:	88 0f       	add	r24, r24
    1802:	99 1f       	adc	r25, r25
    1804:	0a 94       	dec	r0
    1806:	e2 f7       	brpl	.-8      	; 0x1800 <DIO_ES_tTOGPin+0x6a>
    1808:	84 27       	eor	r24, r20
    180a:	8c 93       	st	X, r24
    180c:	31 c0       	rjmp	.+98     	; 0x1870 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    180e:	89 81       	ldd	r24, Y+1	; 0x01
    1810:	82 30       	cpi	r24, 0x02	; 2
    1812:	a1 f4       	brne	.+40     	; 0x183c <DIO_ES_tTOGPin+0xa6>
		TOG_BIT(PORTC,copy_u8_PinId);
    1814:	a5 e3       	ldi	r26, 0x35	; 53
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	e5 e3       	ldi	r30, 0x35	; 53
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	48 2f       	mov	r20, r24
    1820:	8a 81       	ldd	r24, Y+2	; 0x02
    1822:	28 2f       	mov	r18, r24
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	02 2e       	mov	r0, r18
    182c:	02 c0       	rjmp	.+4      	; 0x1832 <DIO_ES_tTOGPin+0x9c>
    182e:	88 0f       	add	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	0a 94       	dec	r0
    1834:	e2 f7       	brpl	.-8      	; 0x182e <DIO_ES_tTOGPin+0x98>
    1836:	84 27       	eor	r24, r20
    1838:	8c 93       	st	X, r24
    183a:	1a c0       	rjmp	.+52     	; 0x1870 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	83 30       	cpi	r24, 0x03	; 3
    1840:	a1 f4       	brne	.+40     	; 0x186a <DIO_ES_tTOGPin+0xd4>
		TOG_BIT(PORTD,copy_u8_PinId);
    1842:	a2 e3       	ldi	r26, 0x32	; 50
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	e2 e3       	ldi	r30, 0x32	; 50
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	48 2f       	mov	r20, r24
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	02 2e       	mov	r0, r18
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <DIO_ES_tTOGPin+0xca>
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	0a 94       	dec	r0
    1862:	e2 f7       	brpl	.-8      	; 0x185c <DIO_ES_tTOGPin+0xc6>
    1864:	84 27       	eor	r24, r20
    1866:	8c 93       	st	X, r24
    1868:	03 c0       	rjmp	.+6      	; 0x1870 <DIO_ES_tTOGPin+0xda>
	}else{
		return ES_NOT_OK;
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	8b 83       	std	Y+3, r24	; 0x03
    186e:	01 c0       	rjmp	.+2      	; 0x1872 <DIO_ES_tTOGPin+0xdc>
	}
	return ES_OK;
    1870:	1b 82       	std	Y+3, r1	; 0x03
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	cf 91       	pop	r28
    187c:	df 91       	pop	r29
    187e:	08 95       	ret

00001880 <DIO_ES_tInit>:




ES_t DIO_ES_tInit(void)
{
    1880:	df 93       	push	r29
    1882:	cf 93       	push	r28
    1884:	00 d0       	rcall	.+0      	; 0x1886 <DIO_ES_tInit+0x6>
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
	int i = 0;
    188a:	1a 82       	std	Y+2, r1	; 0x02
    188c:	19 82       	std	Y+1, r1	; 0x01
	for(i=0 ; i<PIN_COUNT ; i++){
    188e:	1a 82       	std	Y+2, r1	; 0x02
    1890:	19 82       	std	Y+1, r1	; 0x01
    1892:	a3 c2       	rjmp	.+1350   	; 0x1dda <DIO_ES_tInit+0x55a>
		if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_A){
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	9a 81       	ldd	r25, Y+2	; 0x02
    1898:	88 0f       	add	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	88 0f       	add	r24, r24
    189e:	99 1f       	adc	r25, r25
    18a0:	fc 01       	movw	r30, r24
    18a2:	e8 5e       	subi	r30, 0xE8	; 232
    18a4:	fe 4f       	sbci	r31, 0xFE	; 254
    18a6:	80 81       	ld	r24, Z
    18a8:	88 23       	and	r24, r24
    18aa:	09 f0       	breq	.+2      	; 0x18ae <DIO_ES_tInit+0x2e>
    18ac:	9b c0       	rjmp	.+310    	; 0x19e4 <DIO_ES_tInit+0x164>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	9a 81       	ldd	r25, Y+2	; 0x02
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	01 96       	adiw	r24, 0x01	; 1
    18b8:	88 0f       	add	r24, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	fc 01       	movw	r30, r24
    18be:	e8 5e       	subi	r30, 0xE8	; 232
    18c0:	fe 4f       	sbci	r31, 0xFE	; 254
    18c2:	80 81       	ld	r24, Z
    18c4:	81 30       	cpi	r24, 0x01	; 1
    18c6:	e9 f4       	brne	.+58     	; 0x1902 <DIO_ES_tInit+0x82>
				SET_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    18c8:	aa e3       	ldi	r26, 0x3A	; 58
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	ea e3       	ldi	r30, 0x3A	; 58
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	48 2f       	mov	r20, r24
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	9a 81       	ldd	r25, Y+2	; 0x02
    18d8:	88 0f       	add	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	88 0f       	add	r24, r24
    18de:	99 1f       	adc	r25, r25
    18e0:	fc 01       	movw	r30, r24
    18e2:	e7 5e       	subi	r30, 0xE7	; 231
    18e4:	fe 4f       	sbci	r31, 0xFE	; 254
    18e6:	80 81       	ld	r24, Z
    18e8:	28 2f       	mov	r18, r24
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	02 2e       	mov	r0, r18
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <DIO_ES_tInit+0x78>
    18f4:	88 0f       	add	r24, r24
    18f6:	99 1f       	adc	r25, r25
    18f8:	0a 94       	dec	r0
    18fa:	e2 f7       	brpl	.-8      	; 0x18f4 <DIO_ES_tInit+0x74>
    18fc:	84 2b       	or	r24, r20
    18fe:	8c 93       	st	X, r24
    1900:	67 c2       	rjmp	.+1230   	; 0x1dd0 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    1902:	aa e3       	ldi	r26, 0x3A	; 58
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	ea e3       	ldi	r30, 0x3A	; 58
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	48 2f       	mov	r20, r24
    190e:	89 81       	ldd	r24, Y+1	; 0x01
    1910:	9a 81       	ldd	r25, Y+2	; 0x02
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	88 0f       	add	r24, r24
    1918:	99 1f       	adc	r25, r25
    191a:	fc 01       	movw	r30, r24
    191c:	e7 5e       	subi	r30, 0xE7	; 231
    191e:	fe 4f       	sbci	r31, 0xFE	; 254
    1920:	80 81       	ld	r24, Z
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	02 2e       	mov	r0, r18
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <DIO_ES_tInit+0xb2>
    192e:	88 0f       	add	r24, r24
    1930:	99 1f       	adc	r25, r25
    1932:	0a 94       	dec	r0
    1934:	e2 f7       	brpl	.-8      	; 0x192e <DIO_ES_tInit+0xae>
    1936:	80 95       	com	r24
    1938:	84 23       	and	r24, r20
    193a:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	9a 81       	ldd	r25, Y+2	; 0x02
    1940:	88 0f       	add	r24, r24
    1942:	99 1f       	adc	r25, r25
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	fc 01       	movw	r30, r24
    194a:	e5 5e       	subi	r30, 0xE5	; 229
    194c:	fe 4f       	sbci	r31, 0xFE	; 254
    194e:	80 81       	ld	r24, Z
    1950:	81 30       	cpi	r24, 0x01	; 1
    1952:	e9 f4       	brne	.+58     	; 0x198e <DIO_ES_tInit+0x10e>
					SET_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    1954:	ab e3       	ldi	r26, 0x3B	; 59
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	eb e3       	ldi	r30, 0x3B	; 59
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	48 2f       	mov	r20, r24
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	9a 81       	ldd	r25, Y+2	; 0x02
    1964:	88 0f       	add	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	88 0f       	add	r24, r24
    196a:	99 1f       	adc	r25, r25
    196c:	fc 01       	movw	r30, r24
    196e:	e7 5e       	subi	r30, 0xE7	; 231
    1970:	fe 4f       	sbci	r31, 0xFE	; 254
    1972:	80 81       	ld	r24, Z
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	02 2e       	mov	r0, r18
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <DIO_ES_tInit+0x104>
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	0a 94       	dec	r0
    1986:	e2 f7       	brpl	.-8      	; 0x1980 <DIO_ES_tInit+0x100>
    1988:	84 2b       	or	r24, r20
    198a:	8c 93       	st	X, r24
    198c:	21 c2       	rjmp	.+1090   	; 0x1dd0 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    198e:	89 81       	ldd	r24, Y+1	; 0x01
    1990:	9a 81       	ldd	r25, Y+2	; 0x02
    1992:	88 0f       	add	r24, r24
    1994:	99 1f       	adc	r25, r25
    1996:	88 0f       	add	r24, r24
    1998:	99 1f       	adc	r25, r25
    199a:	fc 01       	movw	r30, r24
    199c:	e5 5e       	subi	r30, 0xE5	; 229
    199e:	fe 4f       	sbci	r31, 0xFE	; 254
    19a0:	80 81       	ld	r24, Z
    19a2:	88 23       	and	r24, r24
    19a4:	09 f0       	breq	.+2      	; 0x19a8 <DIO_ES_tInit+0x128>
    19a6:	14 c2       	rjmp	.+1064   	; 0x1dd0 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    19a8:	ab e3       	ldi	r26, 0x3B	; 59
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	eb e3       	ldi	r30, 0x3B	; 59
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	48 2f       	mov	r20, r24
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
    19b6:	9a 81       	ldd	r25, Y+2	; 0x02
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	88 0f       	add	r24, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	fc 01       	movw	r30, r24
    19c2:	e7 5e       	subi	r30, 0xE7	; 231
    19c4:	fe 4f       	sbci	r31, 0xFE	; 254
    19c6:	80 81       	ld	r24, Z
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	02 2e       	mov	r0, r18
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <DIO_ES_tInit+0x158>
    19d4:	88 0f       	add	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	0a 94       	dec	r0
    19da:	e2 f7       	brpl	.-8      	; 0x19d4 <DIO_ES_tInit+0x154>
    19dc:	80 95       	com	r24
    19de:	84 23       	and	r24, r20
    19e0:	8c 93       	st	X, r24
    19e2:	f6 c1       	rjmp	.+1004   	; 0x1dd0 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_B){
    19e4:	89 81       	ldd	r24, Y+1	; 0x01
    19e6:	9a 81       	ldd	r25, Y+2	; 0x02
    19e8:	88 0f       	add	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	fc 01       	movw	r30, r24
    19f2:	e8 5e       	subi	r30, 0xE8	; 232
    19f4:	fe 4f       	sbci	r31, 0xFE	; 254
    19f6:	80 81       	ld	r24, Z
    19f8:	81 30       	cpi	r24, 0x01	; 1
    19fa:	09 f0       	breq	.+2      	; 0x19fe <DIO_ES_tInit+0x17e>
    19fc:	9b c0       	rjmp	.+310    	; 0x1b34 <DIO_ES_tInit+0x2b4>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	9a 81       	ldd	r25, Y+2	; 0x02
    1a02:	88 0f       	add	r24, r24
    1a04:	99 1f       	adc	r25, r25
    1a06:	01 96       	adiw	r24, 0x01	; 1
    1a08:	88 0f       	add	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	e8 5e       	subi	r30, 0xE8	; 232
    1a10:	fe 4f       	sbci	r31, 0xFE	; 254
    1a12:	80 81       	ld	r24, Z
    1a14:	81 30       	cpi	r24, 0x01	; 1
    1a16:	e9 f4       	brne	.+58     	; 0x1a52 <DIO_ES_tInit+0x1d2>
				SET_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    1a18:	a7 e3       	ldi	r26, 0x37	; 55
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	e7 e3       	ldi	r30, 0x37	; 55
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	48 2f       	mov	r20, r24
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	9a 81       	ldd	r25, Y+2	; 0x02
    1a28:	88 0f       	add	r24, r24
    1a2a:	99 1f       	adc	r25, r25
    1a2c:	88 0f       	add	r24, r24
    1a2e:	99 1f       	adc	r25, r25
    1a30:	fc 01       	movw	r30, r24
    1a32:	e7 5e       	subi	r30, 0xE7	; 231
    1a34:	fe 4f       	sbci	r31, 0xFE	; 254
    1a36:	80 81       	ld	r24, Z
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	02 2e       	mov	r0, r18
    1a42:	02 c0       	rjmp	.+4      	; 0x1a48 <DIO_ES_tInit+0x1c8>
    1a44:	88 0f       	add	r24, r24
    1a46:	99 1f       	adc	r25, r25
    1a48:	0a 94       	dec	r0
    1a4a:	e2 f7       	brpl	.-8      	; 0x1a44 <DIO_ES_tInit+0x1c4>
    1a4c:	84 2b       	or	r24, r20
    1a4e:	8c 93       	st	X, r24
    1a50:	bf c1       	rjmp	.+894    	; 0x1dd0 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    1a52:	a7 e3       	ldi	r26, 0x37	; 55
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	e7 e3       	ldi	r30, 0x37	; 55
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	48 2f       	mov	r20, r24
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	9a 81       	ldd	r25, Y+2	; 0x02
    1a62:	88 0f       	add	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	88 0f       	add	r24, r24
    1a68:	99 1f       	adc	r25, r25
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	e7 5e       	subi	r30, 0xE7	; 231
    1a6e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a70:	80 81       	ld	r24, Z
    1a72:	28 2f       	mov	r18, r24
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	02 2e       	mov	r0, r18
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <DIO_ES_tInit+0x202>
    1a7e:	88 0f       	add	r24, r24
    1a80:	99 1f       	adc	r25, r25
    1a82:	0a 94       	dec	r0
    1a84:	e2 f7       	brpl	.-8      	; 0x1a7e <DIO_ES_tInit+0x1fe>
    1a86:	80 95       	com	r24
    1a88:	84 23       	and	r24, r20
    1a8a:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a90:	88 0f       	add	r24, r24
    1a92:	99 1f       	adc	r25, r25
    1a94:	88 0f       	add	r24, r24
    1a96:	99 1f       	adc	r25, r25
    1a98:	fc 01       	movw	r30, r24
    1a9a:	e5 5e       	subi	r30, 0xE5	; 229
    1a9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a9e:	80 81       	ld	r24, Z
    1aa0:	81 30       	cpi	r24, 0x01	; 1
    1aa2:	e9 f4       	brne	.+58     	; 0x1ade <DIO_ES_tInit+0x25e>
					SET_BIT(PORTB,Dio_CfgPinsArray[i].Pin);
    1aa4:	a8 e3       	ldi	r26, 0x38	; 56
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	e8 e3       	ldi	r30, 0x38	; 56
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	48 2f       	mov	r20, r24
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
    1ab2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab4:	88 0f       	add	r24, r24
    1ab6:	99 1f       	adc	r25, r25
    1ab8:	88 0f       	add	r24, r24
    1aba:	99 1f       	adc	r25, r25
    1abc:	fc 01       	movw	r30, r24
    1abe:	e7 5e       	subi	r30, 0xE7	; 231
    1ac0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ac2:	80 81       	ld	r24, Z
    1ac4:	28 2f       	mov	r18, r24
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	02 2e       	mov	r0, r18
    1ace:	02 c0       	rjmp	.+4      	; 0x1ad4 <DIO_ES_tInit+0x254>
    1ad0:	88 0f       	add	r24, r24
    1ad2:	99 1f       	adc	r25, r25
    1ad4:	0a 94       	dec	r0
    1ad6:	e2 f7       	brpl	.-8      	; 0x1ad0 <DIO_ES_tInit+0x250>
    1ad8:	84 2b       	or	r24, r20
    1ada:	8c 93       	st	X, r24
    1adc:	79 c1       	rjmp	.+754    	; 0x1dd0 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    1ade:	89 81       	ldd	r24, Y+1	; 0x01
    1ae0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae2:	88 0f       	add	r24, r24
    1ae4:	99 1f       	adc	r25, r25
    1ae6:	88 0f       	add	r24, r24
    1ae8:	99 1f       	adc	r25, r25
    1aea:	fc 01       	movw	r30, r24
    1aec:	e5 5e       	subi	r30, 0xE5	; 229
    1aee:	fe 4f       	sbci	r31, 0xFE	; 254
    1af0:	80 81       	ld	r24, Z
    1af2:	88 23       	and	r24, r24
    1af4:	09 f0       	breq	.+2      	; 0x1af8 <DIO_ES_tInit+0x278>
    1af6:	6c c1       	rjmp	.+728    	; 0x1dd0 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    1af8:	ab e3       	ldi	r26, 0x3B	; 59
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	eb e3       	ldi	r30, 0x3B	; 59
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	48 2f       	mov	r20, r24
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
    1b06:	9a 81       	ldd	r25, Y+2	; 0x02
    1b08:	88 0f       	add	r24, r24
    1b0a:	99 1f       	adc	r25, r25
    1b0c:	88 0f       	add	r24, r24
    1b0e:	99 1f       	adc	r25, r25
    1b10:	fc 01       	movw	r30, r24
    1b12:	e7 5e       	subi	r30, 0xE7	; 231
    1b14:	fe 4f       	sbci	r31, 0xFE	; 254
    1b16:	80 81       	ld	r24, Z
    1b18:	28 2f       	mov	r18, r24
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	02 2e       	mov	r0, r18
    1b22:	02 c0       	rjmp	.+4      	; 0x1b28 <DIO_ES_tInit+0x2a8>
    1b24:	88 0f       	add	r24, r24
    1b26:	99 1f       	adc	r25, r25
    1b28:	0a 94       	dec	r0
    1b2a:	e2 f7       	brpl	.-8      	; 0x1b24 <DIO_ES_tInit+0x2a4>
    1b2c:	80 95       	com	r24
    1b2e:	84 23       	and	r24, r20
    1b30:	8c 93       	st	X, r24
    1b32:	4e c1       	rjmp	.+668    	; 0x1dd0 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_C){
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	9a 81       	ldd	r25, Y+2	; 0x02
    1b38:	88 0f       	add	r24, r24
    1b3a:	99 1f       	adc	r25, r25
    1b3c:	88 0f       	add	r24, r24
    1b3e:	99 1f       	adc	r25, r25
    1b40:	fc 01       	movw	r30, r24
    1b42:	e8 5e       	subi	r30, 0xE8	; 232
    1b44:	fe 4f       	sbci	r31, 0xFE	; 254
    1b46:	80 81       	ld	r24, Z
    1b48:	82 30       	cpi	r24, 0x02	; 2
    1b4a:	09 f0       	breq	.+2      	; 0x1b4e <DIO_ES_tInit+0x2ce>
    1b4c:	9b c0       	rjmp	.+310    	; 0x1c84 <DIO_ES_tInit+0x404>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	9a 81       	ldd	r25, Y+2	; 0x02
    1b52:	88 0f       	add	r24, r24
    1b54:	99 1f       	adc	r25, r25
    1b56:	01 96       	adiw	r24, 0x01	; 1
    1b58:	88 0f       	add	r24, r24
    1b5a:	99 1f       	adc	r25, r25
    1b5c:	fc 01       	movw	r30, r24
    1b5e:	e8 5e       	subi	r30, 0xE8	; 232
    1b60:	fe 4f       	sbci	r31, 0xFE	; 254
    1b62:	80 81       	ld	r24, Z
    1b64:	81 30       	cpi	r24, 0x01	; 1
    1b66:	e9 f4       	brne	.+58     	; 0x1ba2 <DIO_ES_tInit+0x322>
				SET_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    1b68:	a4 e3       	ldi	r26, 0x34	; 52
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	e4 e3       	ldi	r30, 0x34	; 52
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	48 2f       	mov	r20, r24
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	9a 81       	ldd	r25, Y+2	; 0x02
    1b78:	88 0f       	add	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	88 0f       	add	r24, r24
    1b7e:	99 1f       	adc	r25, r25
    1b80:	fc 01       	movw	r30, r24
    1b82:	e7 5e       	subi	r30, 0xE7	; 231
    1b84:	fe 4f       	sbci	r31, 0xFE	; 254
    1b86:	80 81       	ld	r24, Z
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	02 2e       	mov	r0, r18
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <DIO_ES_tInit+0x318>
    1b94:	88 0f       	add	r24, r24
    1b96:	99 1f       	adc	r25, r25
    1b98:	0a 94       	dec	r0
    1b9a:	e2 f7       	brpl	.-8      	; 0x1b94 <DIO_ES_tInit+0x314>
    1b9c:	84 2b       	or	r24, r20
    1b9e:	8c 93       	st	X, r24
    1ba0:	17 c1       	rjmp	.+558    	; 0x1dd0 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    1ba2:	a4 e3       	ldi	r26, 0x34	; 52
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	e4 e3       	ldi	r30, 0x34	; 52
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	48 2f       	mov	r20, r24
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
    1bb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb2:	88 0f       	add	r24, r24
    1bb4:	99 1f       	adc	r25, r25
    1bb6:	88 0f       	add	r24, r24
    1bb8:	99 1f       	adc	r25, r25
    1bba:	fc 01       	movw	r30, r24
    1bbc:	e7 5e       	subi	r30, 0xE7	; 231
    1bbe:	fe 4f       	sbci	r31, 0xFE	; 254
    1bc0:	80 81       	ld	r24, Z
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	02 2e       	mov	r0, r18
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <DIO_ES_tInit+0x352>
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	0a 94       	dec	r0
    1bd4:	e2 f7       	brpl	.-8      	; 0x1bce <DIO_ES_tInit+0x34e>
    1bd6:	80 95       	com	r24
    1bd8:	84 23       	and	r24, r20
    1bda:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	9a 81       	ldd	r25, Y+2	; 0x02
    1be0:	88 0f       	add	r24, r24
    1be2:	99 1f       	adc	r25, r25
    1be4:	88 0f       	add	r24, r24
    1be6:	99 1f       	adc	r25, r25
    1be8:	fc 01       	movw	r30, r24
    1bea:	e5 5e       	subi	r30, 0xE5	; 229
    1bec:	fe 4f       	sbci	r31, 0xFE	; 254
    1bee:	80 81       	ld	r24, Z
    1bf0:	81 30       	cpi	r24, 0x01	; 1
    1bf2:	e9 f4       	brne	.+58     	; 0x1c2e <DIO_ES_tInit+0x3ae>
					SET_BIT(PORTC,Dio_CfgPinsArray[i].Pin);
    1bf4:	a5 e3       	ldi	r26, 0x35	; 53
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	e5 e3       	ldi	r30, 0x35	; 53
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	48 2f       	mov	r20, r24
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	9a 81       	ldd	r25, Y+2	; 0x02
    1c04:	88 0f       	add	r24, r24
    1c06:	99 1f       	adc	r25, r25
    1c08:	88 0f       	add	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	e7 5e       	subi	r30, 0xE7	; 231
    1c10:	fe 4f       	sbci	r31, 0xFE	; 254
    1c12:	80 81       	ld	r24, Z
    1c14:	28 2f       	mov	r18, r24
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	02 2e       	mov	r0, r18
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <DIO_ES_tInit+0x3a4>
    1c20:	88 0f       	add	r24, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	0a 94       	dec	r0
    1c26:	e2 f7       	brpl	.-8      	; 0x1c20 <DIO_ES_tInit+0x3a0>
    1c28:	84 2b       	or	r24, r20
    1c2a:	8c 93       	st	X, r24
    1c2c:	d1 c0       	rjmp	.+418    	; 0x1dd0 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
    1c30:	9a 81       	ldd	r25, Y+2	; 0x02
    1c32:	88 0f       	add	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	88 0f       	add	r24, r24
    1c38:	99 1f       	adc	r25, r25
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	e5 5e       	subi	r30, 0xE5	; 229
    1c3e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c40:	80 81       	ld	r24, Z
    1c42:	88 23       	and	r24, r24
    1c44:	09 f0       	breq	.+2      	; 0x1c48 <DIO_ES_tInit+0x3c8>
    1c46:	c4 c0       	rjmp	.+392    	; 0x1dd0 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    1c48:	ab e3       	ldi	r26, 0x3B	; 59
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	eb e3       	ldi	r30, 0x3B	; 59
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	48 2f       	mov	r20, r24
    1c54:	89 81       	ldd	r24, Y+1	; 0x01
    1c56:	9a 81       	ldd	r25, Y+2	; 0x02
    1c58:	88 0f       	add	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	88 0f       	add	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	fc 01       	movw	r30, r24
    1c62:	e7 5e       	subi	r30, 0xE7	; 231
    1c64:	fe 4f       	sbci	r31, 0xFE	; 254
    1c66:	80 81       	ld	r24, Z
    1c68:	28 2f       	mov	r18, r24
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	02 2e       	mov	r0, r18
    1c72:	02 c0       	rjmp	.+4      	; 0x1c78 <DIO_ES_tInit+0x3f8>
    1c74:	88 0f       	add	r24, r24
    1c76:	99 1f       	adc	r25, r25
    1c78:	0a 94       	dec	r0
    1c7a:	e2 f7       	brpl	.-8      	; 0x1c74 <DIO_ES_tInit+0x3f4>
    1c7c:	80 95       	com	r24
    1c7e:	84 23       	and	r24, r20
    1c80:	8c 93       	st	X, r24
    1c82:	a6 c0       	rjmp	.+332    	; 0x1dd0 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_D){
    1c84:	89 81       	ldd	r24, Y+1	; 0x01
    1c86:	9a 81       	ldd	r25, Y+2	; 0x02
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	88 0f       	add	r24, r24
    1c8e:	99 1f       	adc	r25, r25
    1c90:	fc 01       	movw	r30, r24
    1c92:	e8 5e       	subi	r30, 0xE8	; 232
    1c94:	fe 4f       	sbci	r31, 0xFE	; 254
    1c96:	80 81       	ld	r24, Z
    1c98:	83 30       	cpi	r24, 0x03	; 3
    1c9a:	09 f0       	breq	.+2      	; 0x1c9e <DIO_ES_tInit+0x41e>
    1c9c:	99 c0       	rjmp	.+306    	; 0x1dd0 <DIO_ES_tInit+0x550>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca2:	88 0f       	add	r24, r24
    1ca4:	99 1f       	adc	r25, r25
    1ca6:	01 96       	adiw	r24, 0x01	; 1
    1ca8:	88 0f       	add	r24, r24
    1caa:	99 1f       	adc	r25, r25
    1cac:	fc 01       	movw	r30, r24
    1cae:	e8 5e       	subi	r30, 0xE8	; 232
    1cb0:	fe 4f       	sbci	r31, 0xFE	; 254
    1cb2:	80 81       	ld	r24, Z
    1cb4:	81 30       	cpi	r24, 0x01	; 1
    1cb6:	e9 f4       	brne	.+58     	; 0x1cf2 <DIO_ES_tInit+0x472>
				SET_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    1cb8:	a1 e3       	ldi	r26, 0x31	; 49
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	e1 e3       	ldi	r30, 0x31	; 49
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	48 2f       	mov	r20, r24
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
    1cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc8:	88 0f       	add	r24, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	88 0f       	add	r24, r24
    1cce:	99 1f       	adc	r25, r25
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	e7 5e       	subi	r30, 0xE7	; 231
    1cd4:	fe 4f       	sbci	r31, 0xFE	; 254
    1cd6:	80 81       	ld	r24, Z
    1cd8:	28 2f       	mov	r18, r24
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	02 2e       	mov	r0, r18
    1ce2:	02 c0       	rjmp	.+4      	; 0x1ce8 <DIO_ES_tInit+0x468>
    1ce4:	88 0f       	add	r24, r24
    1ce6:	99 1f       	adc	r25, r25
    1ce8:	0a 94       	dec	r0
    1cea:	e2 f7       	brpl	.-8      	; 0x1ce4 <DIO_ES_tInit+0x464>
    1cec:	84 2b       	or	r24, r20
    1cee:	8c 93       	st	X, r24
    1cf0:	6f c0       	rjmp	.+222    	; 0x1dd0 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    1cf2:	a1 e3       	ldi	r26, 0x31	; 49
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	e1 e3       	ldi	r30, 0x31	; 49
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	48 2f       	mov	r20, r24
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	9a 81       	ldd	r25, Y+2	; 0x02
    1d02:	88 0f       	add	r24, r24
    1d04:	99 1f       	adc	r25, r25
    1d06:	88 0f       	add	r24, r24
    1d08:	99 1f       	adc	r25, r25
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	e7 5e       	subi	r30, 0xE7	; 231
    1d0e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d10:	80 81       	ld	r24, Z
    1d12:	28 2f       	mov	r18, r24
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	02 2e       	mov	r0, r18
    1d1c:	02 c0       	rjmp	.+4      	; 0x1d22 <DIO_ES_tInit+0x4a2>
    1d1e:	88 0f       	add	r24, r24
    1d20:	99 1f       	adc	r25, r25
    1d22:	0a 94       	dec	r0
    1d24:	e2 f7       	brpl	.-8      	; 0x1d1e <DIO_ES_tInit+0x49e>
    1d26:	80 95       	com	r24
    1d28:	84 23       	and	r24, r20
    1d2a:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
    1d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d30:	88 0f       	add	r24, r24
    1d32:	99 1f       	adc	r25, r25
    1d34:	88 0f       	add	r24, r24
    1d36:	99 1f       	adc	r25, r25
    1d38:	fc 01       	movw	r30, r24
    1d3a:	e5 5e       	subi	r30, 0xE5	; 229
    1d3c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d3e:	80 81       	ld	r24, Z
    1d40:	81 30       	cpi	r24, 0x01	; 1
    1d42:	e9 f4       	brne	.+58     	; 0x1d7e <DIO_ES_tInit+0x4fe>
					SET_BIT(PORTD,Dio_CfgPinsArray[i].Pin);
    1d44:	a2 e3       	ldi	r26, 0x32	; 50
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	e2 e3       	ldi	r30, 0x32	; 50
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	48 2f       	mov	r20, r24
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	9a 81       	ldd	r25, Y+2	; 0x02
    1d54:	88 0f       	add	r24, r24
    1d56:	99 1f       	adc	r25, r25
    1d58:	88 0f       	add	r24, r24
    1d5a:	99 1f       	adc	r25, r25
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	e7 5e       	subi	r30, 0xE7	; 231
    1d60:	fe 4f       	sbci	r31, 0xFE	; 254
    1d62:	80 81       	ld	r24, Z
    1d64:	28 2f       	mov	r18, r24
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	02 2e       	mov	r0, r18
    1d6e:	02 c0       	rjmp	.+4      	; 0x1d74 <DIO_ES_tInit+0x4f4>
    1d70:	88 0f       	add	r24, r24
    1d72:	99 1f       	adc	r25, r25
    1d74:	0a 94       	dec	r0
    1d76:	e2 f7       	brpl	.-8      	; 0x1d70 <DIO_ES_tInit+0x4f0>
    1d78:	84 2b       	or	r24, r20
    1d7a:	8c 93       	st	X, r24
    1d7c:	29 c0       	rjmp	.+82     	; 0x1dd0 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    1d7e:	89 81       	ldd	r24, Y+1	; 0x01
    1d80:	9a 81       	ldd	r25, Y+2	; 0x02
    1d82:	88 0f       	add	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	88 0f       	add	r24, r24
    1d88:	99 1f       	adc	r25, r25
    1d8a:	fc 01       	movw	r30, r24
    1d8c:	e5 5e       	subi	r30, 0xE5	; 229
    1d8e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d90:	80 81       	ld	r24, Z
    1d92:	88 23       	and	r24, r24
    1d94:	e9 f4       	brne	.+58     	; 0x1dd0 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    1d96:	ab e3       	ldi	r26, 0x3B	; 59
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	eb e3       	ldi	r30, 0x3B	; 59
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	48 2f       	mov	r20, r24
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	9a 81       	ldd	r25, Y+2	; 0x02
    1da6:	88 0f       	add	r24, r24
    1da8:	99 1f       	adc	r25, r25
    1daa:	88 0f       	add	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	fc 01       	movw	r30, r24
    1db0:	e7 5e       	subi	r30, 0xE7	; 231
    1db2:	fe 4f       	sbci	r31, 0xFE	; 254
    1db4:	80 81       	ld	r24, Z
    1db6:	28 2f       	mov	r18, r24
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	02 2e       	mov	r0, r18
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <DIO_ES_tInit+0x546>
    1dc2:	88 0f       	add	r24, r24
    1dc4:	99 1f       	adc	r25, r25
    1dc6:	0a 94       	dec	r0
    1dc8:	e2 f7       	brpl	.-8      	; 0x1dc2 <DIO_ES_tInit+0x542>
    1dca:	80 95       	com	r24
    1dcc:	84 23       	and	r24, r20
    1dce:	8c 93       	st	X, r24


ES_t DIO_ES_tInit(void)
{
	int i = 0;
	for(i=0 ; i<PIN_COUNT ; i++){
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
    1dd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd4:	01 96       	adiw	r24, 0x01	; 1
    1dd6:	9a 83       	std	Y+2, r25	; 0x02
    1dd8:	89 83       	std	Y+1, r24	; 0x01
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dde:	89 31       	cpi	r24, 0x19	; 25
    1de0:	91 05       	cpc	r25, r1
    1de2:	0c f4       	brge	.+2      	; 0x1de6 <DIO_ES_tInit+0x566>
    1de4:	57 cd       	rjmp	.-1362   	; 0x1894 <DIO_ES_tInit+0x14>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
				}
			}
		}
	}
	return ES_OK;
    1de6:	80 e0       	ldi	r24, 0x00	; 0
}
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	08 95       	ret

00001df2 <Stepper_Init>:

#include "Stepper.h"
#include "StepperCfg.h"

void Stepper_Init(void)
{
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62
	DIO_ES_tSetPinDirection(Stepper_MOTOR_REG, S1, OUTPUT);
    1dfa:	82 e0       	ldi	r24, 0x02	; 2
    1dfc:	60 e0       	ldi	r22, 0x00	; 0
    1dfe:	41 e0       	ldi	r20, 0x01	; 1
    1e00:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(Stepper_MOTOR_REG, S2, OUTPUT);
    1e04:	82 e0       	ldi	r24, 0x02	; 2
    1e06:	65 e0       	ldi	r22, 0x05	; 5
    1e08:	41 e0       	ldi	r20, 0x01	; 1
    1e0a:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(Stepper_MOTOR_REG, S3, OUTPUT);
    1e0e:	82 e0       	ldi	r24, 0x02	; 2
    1e10:	66 e0       	ldi	r22, 0x06	; 6
    1e12:	41 e0       	ldi	r20, 0x01	; 1
    1e14:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(Stepper_MOTOR_REG, S4, OUTPUT);
    1e18:	82 e0       	ldi	r24, 0x02	; 2
    1e1a:	67 e0       	ldi	r22, 0x07	; 7
    1e1c:	41 e0       	ldi	r20, 0x01	; 1
    1e1e:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S1, LOW);
    1e22:	82 e0       	ldi	r24, 0x02	; 2
    1e24:	60 e0       	ldi	r22, 0x00	; 0
    1e26:	40 e0       	ldi	r20, 0x00	; 0
    1e28:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S2, LOW);
    1e2c:	82 e0       	ldi	r24, 0x02	; 2
    1e2e:	65 e0       	ldi	r22, 0x05	; 5
    1e30:	40 e0       	ldi	r20, 0x00	; 0
    1e32:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S3, LOW);
    1e36:	82 e0       	ldi	r24, 0x02	; 2
    1e38:	66 e0       	ldi	r22, 0x06	; 6
    1e3a:	40 e0       	ldi	r20, 0x00	; 0
    1e3c:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S4, LOW);
    1e40:	82 e0       	ldi	r24, 0x02	; 2
    1e42:	67 e0       	ldi	r22, 0x07	; 7
    1e44:	40 e0       	ldi	r20, 0x00	; 0
    1e46:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
}
    1e4a:	cf 91       	pop	r28
    1e4c:	df 91       	pop	r29
    1e4e:	08 95       	ret

00001e50 <Stepper_Rotate>:


void Stepper_Rotate(u8 degree)
{
    1e50:	df 93       	push	r29
    1e52:	cf 93       	push	r28
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
    1e58:	ef 97       	sbiw	r28, 0x3f	; 63
    1e5a:	0f b6       	in	r0, 0x3f	; 63
    1e5c:	f8 94       	cli
    1e5e:	de bf       	out	0x3e, r29	; 62
    1e60:	0f be       	out	0x3f, r0	; 63
    1e62:	cd bf       	out	0x3d, r28	; 61
    1e64:	8f af       	std	Y+63, r24	; 0x3f
	u16 stepsNum = (degree * 2048UL)/360;
    1e66:	8f ad       	ldd	r24, Y+63	; 0x3f
    1e68:	88 2f       	mov	r24, r24
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	a0 e0       	ldi	r26, 0x00	; 0
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	07 2e       	mov	r0, r23
    1e72:	7b e0       	ldi	r23, 0x0B	; 11
    1e74:	88 0f       	add	r24, r24
    1e76:	99 1f       	adc	r25, r25
    1e78:	aa 1f       	adc	r26, r26
    1e7a:	bb 1f       	adc	r27, r27
    1e7c:	7a 95       	dec	r23
    1e7e:	d1 f7       	brne	.-12     	; 0x1e74 <Stepper_Rotate+0x24>
    1e80:	70 2d       	mov	r23, r0
    1e82:	28 e6       	ldi	r18, 0x68	; 104
    1e84:	31 e0       	ldi	r19, 0x01	; 1
    1e86:	40 e0       	ldi	r20, 0x00	; 0
    1e88:	50 e0       	ldi	r21, 0x00	; 0
    1e8a:	bc 01       	movw	r22, r24
    1e8c:	cd 01       	movw	r24, r26
    1e8e:	0e 94 07 21 	call	0x420e	; 0x420e <__udivmodsi4>
    1e92:	da 01       	movw	r26, r20
    1e94:	c9 01       	movw	r24, r18
    1e96:	9e af       	std	Y+62, r25	; 0x3e
    1e98:	8d af       	std	Y+61, r24	; 0x3d
	u16 IterationsNum = stepsNum/4;
    1e9a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e9c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e9e:	96 95       	lsr	r25
    1ea0:	87 95       	ror	r24
    1ea2:	96 95       	lsr	r25
    1ea4:	87 95       	ror	r24
    1ea6:	9c af       	std	Y+60, r25	; 0x3c
    1ea8:	8b af       	std	Y+59, r24	; 0x3b

	u16 i=0;
    1eaa:	1a ae       	std	Y+58, r1	; 0x3a
    1eac:	19 ae       	std	Y+57, r1	; 0x39
	for(i=0;i<IterationsNum;i++)
    1eae:	1a ae       	std	Y+58, r1	; 0x3a
    1eb0:	19 ae       	std	Y+57, r1	; 0x39
    1eb2:	1d c2       	rjmp	.+1082   	; 0x22ee <Stepper_Rotate+0x49e>
	{
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S1, HIGH);
    1eb4:	82 e0       	ldi	r24, 0x02	; 2
    1eb6:	60 e0       	ldi	r22, 0x00	; 0
    1eb8:	41 e0       	ldi	r20, 0x01	; 1
    1eba:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S2, LOW);
    1ebe:	82 e0       	ldi	r24, 0x02	; 2
    1ec0:	65 e0       	ldi	r22, 0x05	; 5
    1ec2:	40 e0       	ldi	r20, 0x00	; 0
    1ec4:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S3, LOW);
    1ec8:	82 e0       	ldi	r24, 0x02	; 2
    1eca:	66 e0       	ldi	r22, 0x06	; 6
    1ecc:	40 e0       	ldi	r20, 0x00	; 0
    1ece:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S4, LOW);
    1ed2:	82 e0       	ldi	r24, 0x02	; 2
    1ed4:	67 e0       	ldi	r22, 0x07	; 7
    1ed6:	40 e0       	ldi	r20, 0x00	; 0
    1ed8:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	a0 ea       	ldi	r26, 0xA0	; 160
    1ee2:	b1 e4       	ldi	r27, 0x41	; 65
    1ee4:	8d ab       	std	Y+53, r24	; 0x35
    1ee6:	9e ab       	std	Y+54, r25	; 0x36
    1ee8:	af ab       	std	Y+55, r26	; 0x37
    1eea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eec:	6d a9       	ldd	r22, Y+53	; 0x35
    1eee:	7e a9       	ldd	r23, Y+54	; 0x36
    1ef0:	8f a9       	ldd	r24, Y+55	; 0x37
    1ef2:	98 ad       	ldd	r25, Y+56	; 0x38
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	4a e7       	ldi	r20, 0x7A	; 122
    1efa:	55 e4       	ldi	r21, 0x45	; 69
    1efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	89 ab       	std	Y+49, r24	; 0x31
    1f06:	9a ab       	std	Y+50, r25	; 0x32
    1f08:	ab ab       	std	Y+51, r26	; 0x33
    1f0a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f0c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f0e:	7a a9       	ldd	r23, Y+50	; 0x32
    1f10:	8b a9       	ldd	r24, Y+51	; 0x33
    1f12:	9c a9       	ldd	r25, Y+52	; 0x34
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	40 e8       	ldi	r20, 0x80	; 128
    1f1a:	5f e3       	ldi	r21, 0x3F	; 63
    1f1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f20:	88 23       	and	r24, r24
    1f22:	2c f4       	brge	.+10     	; 0x1f2e <Stepper_Rotate+0xde>
		__ticks = 1;
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	98 ab       	std	Y+48, r25	; 0x30
    1f2a:	8f a7       	std	Y+47, r24	; 0x2f
    1f2c:	3f c0       	rjmp	.+126    	; 0x1fac <Stepper_Rotate+0x15c>
	else if (__tmp > 65535)
    1f2e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f30:	7a a9       	ldd	r23, Y+50	; 0x32
    1f32:	8b a9       	ldd	r24, Y+51	; 0x33
    1f34:	9c a9       	ldd	r25, Y+52	; 0x34
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	3f ef       	ldi	r19, 0xFF	; 255
    1f3a:	4f e7       	ldi	r20, 0x7F	; 127
    1f3c:	57 e4       	ldi	r21, 0x47	; 71
    1f3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f42:	18 16       	cp	r1, r24
    1f44:	4c f5       	brge	.+82     	; 0x1f98 <Stepper_Rotate+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f46:	6d a9       	ldd	r22, Y+53	; 0x35
    1f48:	7e a9       	ldd	r23, Y+54	; 0x36
    1f4a:	8f a9       	ldd	r24, Y+55	; 0x37
    1f4c:	98 ad       	ldd	r25, Y+56	; 0x38
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	40 e2       	ldi	r20, 0x20	; 32
    1f54:	51 e4       	ldi	r21, 0x41	; 65
    1f56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	bc 01       	movw	r22, r24
    1f60:	cd 01       	movw	r24, r26
    1f62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	98 ab       	std	Y+48, r25	; 0x30
    1f6c:	8f a7       	std	Y+47, r24	; 0x2f
    1f6e:	0f c0       	rjmp	.+30     	; 0x1f8e <Stepper_Rotate+0x13e>
    1f70:	80 e9       	ldi	r24, 0x90	; 144
    1f72:	91 e0       	ldi	r25, 0x01	; 1
    1f74:	9e a7       	std	Y+46, r25	; 0x2e
    1f76:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f78:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f7a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f7c:	01 97       	sbiw	r24, 0x01	; 1
    1f7e:	f1 f7       	brne	.-4      	; 0x1f7c <Stepper_Rotate+0x12c>
    1f80:	9e a7       	std	Y+46, r25	; 0x2e
    1f82:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f84:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f86:	98 a9       	ldd	r25, Y+48	; 0x30
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	98 ab       	std	Y+48, r25	; 0x30
    1f8c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f90:	98 a9       	ldd	r25, Y+48	; 0x30
    1f92:	00 97       	sbiw	r24, 0x00	; 0
    1f94:	69 f7       	brne	.-38     	; 0x1f70 <Stepper_Rotate+0x120>
    1f96:	14 c0       	rjmp	.+40     	; 0x1fc0 <Stepper_Rotate+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f98:	69 a9       	ldd	r22, Y+49	; 0x31
    1f9a:	7a a9       	ldd	r23, Y+50	; 0x32
    1f9c:	8b a9       	ldd	r24, Y+51	; 0x33
    1f9e:	9c a9       	ldd	r25, Y+52	; 0x34
    1fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	98 ab       	std	Y+48, r25	; 0x30
    1faa:	8f a7       	std	Y+47, r24	; 0x2f
    1fac:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fae:	98 a9       	ldd	r25, Y+48	; 0x30
    1fb0:	9c a7       	std	Y+44, r25	; 0x2c
    1fb2:	8b a7       	std	Y+43, r24	; 0x2b
    1fb4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fb6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fb8:	01 97       	sbiw	r24, 0x01	; 1
    1fba:	f1 f7       	brne	.-4      	; 0x1fb8 <Stepper_Rotate+0x168>
    1fbc:	9c a7       	std	Y+44, r25	; 0x2c
    1fbe:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(20);
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S1, LOW);
    1fc0:	82 e0       	ldi	r24, 0x02	; 2
    1fc2:	60 e0       	ldi	r22, 0x00	; 0
    1fc4:	40 e0       	ldi	r20, 0x00	; 0
    1fc6:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S2, HIGH);
    1fca:	82 e0       	ldi	r24, 0x02	; 2
    1fcc:	65 e0       	ldi	r22, 0x05	; 5
    1fce:	41 e0       	ldi	r20, 0x01	; 1
    1fd0:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S3, LOW);
    1fd4:	82 e0       	ldi	r24, 0x02	; 2
    1fd6:	66 e0       	ldi	r22, 0x06	; 6
    1fd8:	40 e0       	ldi	r20, 0x00	; 0
    1fda:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S4, LOW);
    1fde:	82 e0       	ldi	r24, 0x02	; 2
    1fe0:	67 e0       	ldi	r22, 0x07	; 7
    1fe2:	40 e0       	ldi	r20, 0x00	; 0
    1fe4:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    1fe8:	80 e0       	ldi	r24, 0x00	; 0
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	a0 ea       	ldi	r26, 0xA0	; 160
    1fee:	b1 e4       	ldi	r27, 0x41	; 65
    1ff0:	8f a3       	std	Y+39, r24	; 0x27
    1ff2:	98 a7       	std	Y+40, r25	; 0x28
    1ff4:	a9 a7       	std	Y+41, r26	; 0x29
    1ff6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff8:	6f a1       	ldd	r22, Y+39	; 0x27
    1ffa:	78 a5       	ldd	r23, Y+40	; 0x28
    1ffc:	89 a5       	ldd	r24, Y+41	; 0x29
    1ffe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	4a e7       	ldi	r20, 0x7A	; 122
    2006:	55 e4       	ldi	r21, 0x45	; 69
    2008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	8b a3       	std	Y+35, r24	; 0x23
    2012:	9c a3       	std	Y+36, r25	; 0x24
    2014:	ad a3       	std	Y+37, r26	; 0x25
    2016:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2018:	6b a1       	ldd	r22, Y+35	; 0x23
    201a:	7c a1       	ldd	r23, Y+36	; 0x24
    201c:	8d a1       	ldd	r24, Y+37	; 0x25
    201e:	9e a1       	ldd	r25, Y+38	; 0x26
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	40 e8       	ldi	r20, 0x80	; 128
    2026:	5f e3       	ldi	r21, 0x3F	; 63
    2028:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    202c:	88 23       	and	r24, r24
    202e:	2c f4       	brge	.+10     	; 0x203a <Stepper_Rotate+0x1ea>
		__ticks = 1;
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	9a a3       	std	Y+34, r25	; 0x22
    2036:	89 a3       	std	Y+33, r24	; 0x21
    2038:	3f c0       	rjmp	.+126    	; 0x20b8 <Stepper_Rotate+0x268>
	else if (__tmp > 65535)
    203a:	6b a1       	ldd	r22, Y+35	; 0x23
    203c:	7c a1       	ldd	r23, Y+36	; 0x24
    203e:	8d a1       	ldd	r24, Y+37	; 0x25
    2040:	9e a1       	ldd	r25, Y+38	; 0x26
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	3f ef       	ldi	r19, 0xFF	; 255
    2046:	4f e7       	ldi	r20, 0x7F	; 127
    2048:	57 e4       	ldi	r21, 0x47	; 71
    204a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    204e:	18 16       	cp	r1, r24
    2050:	4c f5       	brge	.+82     	; 0x20a4 <Stepper_Rotate+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2052:	6f a1       	ldd	r22, Y+39	; 0x27
    2054:	78 a5       	ldd	r23, Y+40	; 0x28
    2056:	89 a5       	ldd	r24, Y+41	; 0x29
    2058:	9a a5       	ldd	r25, Y+42	; 0x2a
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	40 e2       	ldi	r20, 0x20	; 32
    2060:	51 e4       	ldi	r21, 0x41	; 65
    2062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	bc 01       	movw	r22, r24
    206c:	cd 01       	movw	r24, r26
    206e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	9a a3       	std	Y+34, r25	; 0x22
    2078:	89 a3       	std	Y+33, r24	; 0x21
    207a:	0f c0       	rjmp	.+30     	; 0x209a <Stepper_Rotate+0x24a>
    207c:	80 e9       	ldi	r24, 0x90	; 144
    207e:	91 e0       	ldi	r25, 0x01	; 1
    2080:	98 a3       	std	Y+32, r25	; 0x20
    2082:	8f 8f       	std	Y+31, r24	; 0x1f
    2084:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2086:	98 a1       	ldd	r25, Y+32	; 0x20
    2088:	01 97       	sbiw	r24, 0x01	; 1
    208a:	f1 f7       	brne	.-4      	; 0x2088 <Stepper_Rotate+0x238>
    208c:	98 a3       	std	Y+32, r25	; 0x20
    208e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2090:	89 a1       	ldd	r24, Y+33	; 0x21
    2092:	9a a1       	ldd	r25, Y+34	; 0x22
    2094:	01 97       	sbiw	r24, 0x01	; 1
    2096:	9a a3       	std	Y+34, r25	; 0x22
    2098:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209a:	89 a1       	ldd	r24, Y+33	; 0x21
    209c:	9a a1       	ldd	r25, Y+34	; 0x22
    209e:	00 97       	sbiw	r24, 0x00	; 0
    20a0:	69 f7       	brne	.-38     	; 0x207c <Stepper_Rotate+0x22c>
    20a2:	14 c0       	rjmp	.+40     	; 0x20cc <Stepper_Rotate+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a4:	6b a1       	ldd	r22, Y+35	; 0x23
    20a6:	7c a1       	ldd	r23, Y+36	; 0x24
    20a8:	8d a1       	ldd	r24, Y+37	; 0x25
    20aa:	9e a1       	ldd	r25, Y+38	; 0x26
    20ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	9a a3       	std	Y+34, r25	; 0x22
    20b6:	89 a3       	std	Y+33, r24	; 0x21
    20b8:	89 a1       	ldd	r24, Y+33	; 0x21
    20ba:	9a a1       	ldd	r25, Y+34	; 0x22
    20bc:	9e 8f       	std	Y+30, r25	; 0x1e
    20be:	8d 8f       	std	Y+29, r24	; 0x1d
    20c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	f1 f7       	brne	.-4      	; 0x20c4 <Stepper_Rotate+0x274>
    20c8:	9e 8f       	std	Y+30, r25	; 0x1e
    20ca:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(20);
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S1, LOW);
    20cc:	82 e0       	ldi	r24, 0x02	; 2
    20ce:	60 e0       	ldi	r22, 0x00	; 0
    20d0:	40 e0       	ldi	r20, 0x00	; 0
    20d2:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S2, LOW);
    20d6:	82 e0       	ldi	r24, 0x02	; 2
    20d8:	65 e0       	ldi	r22, 0x05	; 5
    20da:	40 e0       	ldi	r20, 0x00	; 0
    20dc:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S3, HIGH);
    20e0:	82 e0       	ldi	r24, 0x02	; 2
    20e2:	66 e0       	ldi	r22, 0x06	; 6
    20e4:	41 e0       	ldi	r20, 0x01	; 1
    20e6:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S4, LOW);
    20ea:	82 e0       	ldi	r24, 0x02	; 2
    20ec:	67 e0       	ldi	r22, 0x07	; 7
    20ee:	40 e0       	ldi	r20, 0x00	; 0
    20f0:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	a0 ea       	ldi	r26, 0xA0	; 160
    20fa:	b1 e4       	ldi	r27, 0x41	; 65
    20fc:	89 8f       	std	Y+25, r24	; 0x19
    20fe:	9a 8f       	std	Y+26, r25	; 0x1a
    2100:	ab 8f       	std	Y+27, r26	; 0x1b
    2102:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2104:	69 8d       	ldd	r22, Y+25	; 0x19
    2106:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2108:	8b 8d       	ldd	r24, Y+27	; 0x1b
    210a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	4a e7       	ldi	r20, 0x7A	; 122
    2112:	55 e4       	ldi	r21, 0x45	; 69
    2114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	8d 8b       	std	Y+21, r24	; 0x15
    211e:	9e 8b       	std	Y+22, r25	; 0x16
    2120:	af 8b       	std	Y+23, r26	; 0x17
    2122:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2124:	6d 89       	ldd	r22, Y+21	; 0x15
    2126:	7e 89       	ldd	r23, Y+22	; 0x16
    2128:	8f 89       	ldd	r24, Y+23	; 0x17
    212a:	98 8d       	ldd	r25, Y+24	; 0x18
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	40 e8       	ldi	r20, 0x80	; 128
    2132:	5f e3       	ldi	r21, 0x3F	; 63
    2134:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2138:	88 23       	and	r24, r24
    213a:	2c f4       	brge	.+10     	; 0x2146 <Stepper_Rotate+0x2f6>
		__ticks = 1;
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	9c 8b       	std	Y+20, r25	; 0x14
    2142:	8b 8b       	std	Y+19, r24	; 0x13
    2144:	3f c0       	rjmp	.+126    	; 0x21c4 <Stepper_Rotate+0x374>
	else if (__tmp > 65535)
    2146:	6d 89       	ldd	r22, Y+21	; 0x15
    2148:	7e 89       	ldd	r23, Y+22	; 0x16
    214a:	8f 89       	ldd	r24, Y+23	; 0x17
    214c:	98 8d       	ldd	r25, Y+24	; 0x18
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	3f ef       	ldi	r19, 0xFF	; 255
    2152:	4f e7       	ldi	r20, 0x7F	; 127
    2154:	57 e4       	ldi	r21, 0x47	; 71
    2156:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    215a:	18 16       	cp	r1, r24
    215c:	4c f5       	brge	.+82     	; 0x21b0 <Stepper_Rotate+0x360>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    215e:	69 8d       	ldd	r22, Y+25	; 0x19
    2160:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2162:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2164:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e2       	ldi	r20, 0x20	; 32
    216c:	51 e4       	ldi	r21, 0x41	; 65
    216e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	bc 01       	movw	r22, r24
    2178:	cd 01       	movw	r24, r26
    217a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	9c 8b       	std	Y+20, r25	; 0x14
    2184:	8b 8b       	std	Y+19, r24	; 0x13
    2186:	0f c0       	rjmp	.+30     	; 0x21a6 <Stepper_Rotate+0x356>
    2188:	80 e9       	ldi	r24, 0x90	; 144
    218a:	91 e0       	ldi	r25, 0x01	; 1
    218c:	9a 8b       	std	Y+18, r25	; 0x12
    218e:	89 8b       	std	Y+17, r24	; 0x11
    2190:	89 89       	ldd	r24, Y+17	; 0x11
    2192:	9a 89       	ldd	r25, Y+18	; 0x12
    2194:	01 97       	sbiw	r24, 0x01	; 1
    2196:	f1 f7       	brne	.-4      	; 0x2194 <Stepper_Rotate+0x344>
    2198:	9a 8b       	std	Y+18, r25	; 0x12
    219a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    219c:	8b 89       	ldd	r24, Y+19	; 0x13
    219e:	9c 89       	ldd	r25, Y+20	; 0x14
    21a0:	01 97       	sbiw	r24, 0x01	; 1
    21a2:	9c 8b       	std	Y+20, r25	; 0x14
    21a4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a6:	8b 89       	ldd	r24, Y+19	; 0x13
    21a8:	9c 89       	ldd	r25, Y+20	; 0x14
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	69 f7       	brne	.-38     	; 0x2188 <Stepper_Rotate+0x338>
    21ae:	14 c0       	rjmp	.+40     	; 0x21d8 <Stepper_Rotate+0x388>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b0:	6d 89       	ldd	r22, Y+21	; 0x15
    21b2:	7e 89       	ldd	r23, Y+22	; 0x16
    21b4:	8f 89       	ldd	r24, Y+23	; 0x17
    21b6:	98 8d       	ldd	r25, Y+24	; 0x18
    21b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	9c 8b       	std	Y+20, r25	; 0x14
    21c2:	8b 8b       	std	Y+19, r24	; 0x13
    21c4:	8b 89       	ldd	r24, Y+19	; 0x13
    21c6:	9c 89       	ldd	r25, Y+20	; 0x14
    21c8:	98 8b       	std	Y+16, r25	; 0x10
    21ca:	8f 87       	std	Y+15, r24	; 0x0f
    21cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ce:	98 89       	ldd	r25, Y+16	; 0x10
    21d0:	01 97       	sbiw	r24, 0x01	; 1
    21d2:	f1 f7       	brne	.-4      	; 0x21d0 <Stepper_Rotate+0x380>
    21d4:	98 8b       	std	Y+16, r25	; 0x10
    21d6:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(20);
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S1, LOW);
    21d8:	82 e0       	ldi	r24, 0x02	; 2
    21da:	60 e0       	ldi	r22, 0x00	; 0
    21dc:	40 e0       	ldi	r20, 0x00	; 0
    21de:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S2, LOW);
    21e2:	82 e0       	ldi	r24, 0x02	; 2
    21e4:	65 e0       	ldi	r22, 0x05	; 5
    21e6:	40 e0       	ldi	r20, 0x00	; 0
    21e8:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S3, LOW);
    21ec:	82 e0       	ldi	r24, 0x02	; 2
    21ee:	66 e0       	ldi	r22, 0x06	; 6
    21f0:	40 e0       	ldi	r20, 0x00	; 0
    21f2:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S4, HIGH);
    21f6:	82 e0       	ldi	r24, 0x02	; 2
    21f8:	67 e0       	ldi	r22, 0x07	; 7
    21fa:	41 e0       	ldi	r20, 0x01	; 1
    21fc:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	a0 ea       	ldi	r26, 0xA0	; 160
    2206:	b1 e4       	ldi	r27, 0x41	; 65
    2208:	8b 87       	std	Y+11, r24	; 0x0b
    220a:	9c 87       	std	Y+12, r25	; 0x0c
    220c:	ad 87       	std	Y+13, r26	; 0x0d
    220e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2210:	6b 85       	ldd	r22, Y+11	; 0x0b
    2212:	7c 85       	ldd	r23, Y+12	; 0x0c
    2214:	8d 85       	ldd	r24, Y+13	; 0x0d
    2216:	9e 85       	ldd	r25, Y+14	; 0x0e
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	4a e7       	ldi	r20, 0x7A	; 122
    221e:	55 e4       	ldi	r21, 0x45	; 69
    2220:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	8f 83       	std	Y+7, r24	; 0x07
    222a:	98 87       	std	Y+8, r25	; 0x08
    222c:	a9 87       	std	Y+9, r26	; 0x09
    222e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2230:	6f 81       	ldd	r22, Y+7	; 0x07
    2232:	78 85       	ldd	r23, Y+8	; 0x08
    2234:	89 85       	ldd	r24, Y+9	; 0x09
    2236:	9a 85       	ldd	r25, Y+10	; 0x0a
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	40 e8       	ldi	r20, 0x80	; 128
    223e:	5f e3       	ldi	r21, 0x3F	; 63
    2240:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2244:	88 23       	and	r24, r24
    2246:	2c f4       	brge	.+10     	; 0x2252 <Stepper_Rotate+0x402>
		__ticks = 1;
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	9e 83       	std	Y+6, r25	; 0x06
    224e:	8d 83       	std	Y+5, r24	; 0x05
    2250:	3f c0       	rjmp	.+126    	; 0x22d0 <Stepper_Rotate+0x480>
	else if (__tmp > 65535)
    2252:	6f 81       	ldd	r22, Y+7	; 0x07
    2254:	78 85       	ldd	r23, Y+8	; 0x08
    2256:	89 85       	ldd	r24, Y+9	; 0x09
    2258:	9a 85       	ldd	r25, Y+10	; 0x0a
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	3f ef       	ldi	r19, 0xFF	; 255
    225e:	4f e7       	ldi	r20, 0x7F	; 127
    2260:	57 e4       	ldi	r21, 0x47	; 71
    2262:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2266:	18 16       	cp	r1, r24
    2268:	4c f5       	brge	.+82     	; 0x22bc <Stepper_Rotate+0x46c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    226a:	6b 85       	ldd	r22, Y+11	; 0x0b
    226c:	7c 85       	ldd	r23, Y+12	; 0x0c
    226e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2270:	9e 85       	ldd	r25, Y+14	; 0x0e
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	40 e2       	ldi	r20, 0x20	; 32
    2278:	51 e4       	ldi	r21, 0x41	; 65
    227a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	bc 01       	movw	r22, r24
    2284:	cd 01       	movw	r24, r26
    2286:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	9e 83       	std	Y+6, r25	; 0x06
    2290:	8d 83       	std	Y+5, r24	; 0x05
    2292:	0f c0       	rjmp	.+30     	; 0x22b2 <Stepper_Rotate+0x462>
    2294:	80 e9       	ldi	r24, 0x90	; 144
    2296:	91 e0       	ldi	r25, 0x01	; 1
    2298:	9c 83       	std	Y+4, r25	; 0x04
    229a:	8b 83       	std	Y+3, r24	; 0x03
    229c:	8b 81       	ldd	r24, Y+3	; 0x03
    229e:	9c 81       	ldd	r25, Y+4	; 0x04
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	f1 f7       	brne	.-4      	; 0x22a0 <Stepper_Rotate+0x450>
    22a4:	9c 83       	std	Y+4, r25	; 0x04
    22a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a8:	8d 81       	ldd	r24, Y+5	; 0x05
    22aa:	9e 81       	ldd	r25, Y+6	; 0x06
    22ac:	01 97       	sbiw	r24, 0x01	; 1
    22ae:	9e 83       	std	Y+6, r25	; 0x06
    22b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b2:	8d 81       	ldd	r24, Y+5	; 0x05
    22b4:	9e 81       	ldd	r25, Y+6	; 0x06
    22b6:	00 97       	sbiw	r24, 0x00	; 0
    22b8:	69 f7       	brne	.-38     	; 0x2294 <Stepper_Rotate+0x444>
    22ba:	14 c0       	rjmp	.+40     	; 0x22e4 <Stepper_Rotate+0x494>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22bc:	6f 81       	ldd	r22, Y+7	; 0x07
    22be:	78 85       	ldd	r23, Y+8	; 0x08
    22c0:	89 85       	ldd	r24, Y+9	; 0x09
    22c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	9e 83       	std	Y+6, r25	; 0x06
    22ce:	8d 83       	std	Y+5, r24	; 0x05
    22d0:	8d 81       	ldd	r24, Y+5	; 0x05
    22d2:	9e 81       	ldd	r25, Y+6	; 0x06
    22d4:	9a 83       	std	Y+2, r25	; 0x02
    22d6:	89 83       	std	Y+1, r24	; 0x01
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
    22da:	9a 81       	ldd	r25, Y+2	; 0x02
    22dc:	01 97       	sbiw	r24, 0x01	; 1
    22de:	f1 f7       	brne	.-4      	; 0x22dc <Stepper_Rotate+0x48c>
    22e0:	9a 83       	std	Y+2, r25	; 0x02
    22e2:	89 83       	std	Y+1, r24	; 0x01
{
	u16 stepsNum = (degree * 2048UL)/360;
	u16 IterationsNum = stepsNum/4;

	u16 i=0;
	for(i=0;i<IterationsNum;i++)
    22e4:	89 ad       	ldd	r24, Y+57	; 0x39
    22e6:	9a ad       	ldd	r25, Y+58	; 0x3a
    22e8:	01 96       	adiw	r24, 0x01	; 1
    22ea:	9a af       	std	Y+58, r25	; 0x3a
    22ec:	89 af       	std	Y+57, r24	; 0x39
    22ee:	29 ad       	ldd	r18, Y+57	; 0x39
    22f0:	3a ad       	ldd	r19, Y+58	; 0x3a
    22f2:	8b ad       	ldd	r24, Y+59	; 0x3b
    22f4:	9c ad       	ldd	r25, Y+60	; 0x3c
    22f6:	28 17       	cp	r18, r24
    22f8:	39 07       	cpc	r19, r25
    22fa:	08 f4       	brcc	.+2      	; 0x22fe <Stepper_Rotate+0x4ae>
    22fc:	db cd       	rjmp	.-1098   	; 0x1eb4 <Stepper_Rotate+0x64>
		_delay_ms(20);
	}



}
    22fe:	ef 96       	adiw	r28, 0x3f	; 63
    2300:	0f b6       	in	r0, 0x3f	; 63
    2302:	f8 94       	cli
    2304:	de bf       	out	0x3e, r29	; 62
    2306:	0f be       	out	0x3f, r0	; 63
    2308:	cd bf       	out	0x3d, r28	; 61
    230a:	cf 91       	pop	r28
    230c:	df 91       	pop	r29
    230e:	08 95       	ret

00002310 <LCD_ES_tTrigger_Enable>:
//ProtoType of static is defined in source file itself(Private declaration)
static ES_t LCD_ES_tTrigger_Enable(void);
static ES_t LCD_ES_tSet_Cursor_Pos(u8 row,u8 column);

//We make it static cuz we won't use it anywhere but here
static ES_t LCD_ES_tTrigger_Enable(void){
    2310:	df 93       	push	r29
    2312:	cf 93       	push	r28
    2314:	cd b7       	in	r28, 0x3d	; 61
    2316:	de b7       	in	r29, 0x3e	; 62
    2318:	e0 97       	sbiw	r28, 0x30	; 48
    231a:	0f b6       	in	r0, 0x3f	; 63
    231c:	f8 94       	cli
    231e:	de bf       	out	0x3e, r29	; 62
    2320:	0f be       	out	0x3f, r0	; 63
    2322:	cd bf       	out	0x3d, r28	; 61
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, HIGH);
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	63 e0       	ldi	r22, 0x03	; 3
    2328:	41 e0       	ldi	r20, 0x01	; 1
    232a:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    232e:	80 e0       	ldi	r24, 0x00	; 0
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	a0 e2       	ldi	r26, 0x20	; 32
    2334:	b1 e4       	ldi	r27, 0x41	; 65
    2336:	8d a7       	std	Y+45, r24	; 0x2d
    2338:	9e a7       	std	Y+46, r25	; 0x2e
    233a:	af a7       	std	Y+47, r26	; 0x2f
    233c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    233e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2340:	7e a5       	ldd	r23, Y+46	; 0x2e
    2342:	8f a5       	ldd	r24, Y+47	; 0x2f
    2344:	98 a9       	ldd	r25, Y+48	; 0x30
    2346:	2b ea       	ldi	r18, 0xAB	; 171
    2348:	3a ea       	ldi	r19, 0xAA	; 170
    234a:	4a ea       	ldi	r20, 0xAA	; 170
    234c:	50 e4       	ldi	r21, 0x40	; 64
    234e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	89 a7       	std	Y+41, r24	; 0x29
    2358:	9a a7       	std	Y+42, r25	; 0x2a
    235a:	ab a7       	std	Y+43, r26	; 0x2b
    235c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    235e:	69 a5       	ldd	r22, Y+41	; 0x29
    2360:	7a a5       	ldd	r23, Y+42	; 0x2a
    2362:	8b a5       	ldd	r24, Y+43	; 0x2b
    2364:	9c a5       	ldd	r25, Y+44	; 0x2c
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	40 e8       	ldi	r20, 0x80	; 128
    236c:	5f e3       	ldi	r21, 0x3F	; 63
    236e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2372:	88 23       	and	r24, r24
    2374:	1c f4       	brge	.+6      	; 0x237c <LCD_ES_tTrigger_Enable+0x6c>
		__ticks = 1;
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	88 a7       	std	Y+40, r24	; 0x28
    237a:	91 c0       	rjmp	.+290    	; 0x249e <LCD_ES_tTrigger_Enable+0x18e>
	else if (__tmp > 255)
    237c:	69 a5       	ldd	r22, Y+41	; 0x29
    237e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2380:	8b a5       	ldd	r24, Y+43	; 0x2b
    2382:	9c a5       	ldd	r25, Y+44	; 0x2c
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	4f e7       	ldi	r20, 0x7F	; 127
    238a:	53 e4       	ldi	r21, 0x43	; 67
    238c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2390:	18 16       	cp	r1, r24
    2392:	0c f0       	brlt	.+2      	; 0x2396 <LCD_ES_tTrigger_Enable+0x86>
    2394:	7b c0       	rjmp	.+246    	; 0x248c <LCD_ES_tTrigger_Enable+0x17c>
	{
		_delay_ms(__us / 1000.0);
    2396:	6d a5       	ldd	r22, Y+45	; 0x2d
    2398:	7e a5       	ldd	r23, Y+46	; 0x2e
    239a:	8f a5       	ldd	r24, Y+47	; 0x2f
    239c:	98 a9       	ldd	r25, Y+48	; 0x30
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	4a e7       	ldi	r20, 0x7A	; 122
    23a4:	54 e4       	ldi	r21, 0x44	; 68
    23a6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	8c a3       	std	Y+36, r24	; 0x24
    23b0:	9d a3       	std	Y+37, r25	; 0x25
    23b2:	ae a3       	std	Y+38, r26	; 0x26
    23b4:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b6:	6c a1       	ldd	r22, Y+36	; 0x24
    23b8:	7d a1       	ldd	r23, Y+37	; 0x25
    23ba:	8e a1       	ldd	r24, Y+38	; 0x26
    23bc:	9f a1       	ldd	r25, Y+39	; 0x27
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	4a e7       	ldi	r20, 0x7A	; 122
    23c4:	55 e4       	ldi	r21, 0x45	; 69
    23c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	88 a3       	std	Y+32, r24	; 0x20
    23d0:	99 a3       	std	Y+33, r25	; 0x21
    23d2:	aa a3       	std	Y+34, r26	; 0x22
    23d4:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    23d6:	68 a1       	ldd	r22, Y+32	; 0x20
    23d8:	79 a1       	ldd	r23, Y+33	; 0x21
    23da:	8a a1       	ldd	r24, Y+34	; 0x22
    23dc:	9b a1       	ldd	r25, Y+35	; 0x23
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	40 e8       	ldi	r20, 0x80	; 128
    23e4:	5f e3       	ldi	r21, 0x3F	; 63
    23e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23ea:	88 23       	and	r24, r24
    23ec:	2c f4       	brge	.+10     	; 0x23f8 <LCD_ES_tTrigger_Enable+0xe8>
		__ticks = 1;
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	9f 8f       	std	Y+31, r25	; 0x1f
    23f4:	8e 8f       	std	Y+30, r24	; 0x1e
    23f6:	3f c0       	rjmp	.+126    	; 0x2476 <LCD_ES_tTrigger_Enable+0x166>
	else if (__tmp > 65535)
    23f8:	68 a1       	ldd	r22, Y+32	; 0x20
    23fa:	79 a1       	ldd	r23, Y+33	; 0x21
    23fc:	8a a1       	ldd	r24, Y+34	; 0x22
    23fe:	9b a1       	ldd	r25, Y+35	; 0x23
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	3f ef       	ldi	r19, 0xFF	; 255
    2404:	4f e7       	ldi	r20, 0x7F	; 127
    2406:	57 e4       	ldi	r21, 0x47	; 71
    2408:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    240c:	18 16       	cp	r1, r24
    240e:	4c f5       	brge	.+82     	; 0x2462 <LCD_ES_tTrigger_Enable+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2410:	6c a1       	ldd	r22, Y+36	; 0x24
    2412:	7d a1       	ldd	r23, Y+37	; 0x25
    2414:	8e a1       	ldd	r24, Y+38	; 0x26
    2416:	9f a1       	ldd	r25, Y+39	; 0x27
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	40 e2       	ldi	r20, 0x20	; 32
    241e:	51 e4       	ldi	r21, 0x41	; 65
    2420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	bc 01       	movw	r22, r24
    242a:	cd 01       	movw	r24, r26
    242c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	9f 8f       	std	Y+31, r25	; 0x1f
    2436:	8e 8f       	std	Y+30, r24	; 0x1e
    2438:	0f c0       	rjmp	.+30     	; 0x2458 <LCD_ES_tTrigger_Enable+0x148>
    243a:	80 e9       	ldi	r24, 0x90	; 144
    243c:	91 e0       	ldi	r25, 0x01	; 1
    243e:	9d 8f       	std	Y+29, r25	; 0x1d
    2440:	8c 8f       	std	Y+28, r24	; 0x1c
    2442:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2444:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	f1 f7       	brne	.-4      	; 0x2446 <LCD_ES_tTrigger_Enable+0x136>
    244a:	9d 8f       	std	Y+29, r25	; 0x1d
    244c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    244e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2450:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2452:	01 97       	sbiw	r24, 0x01	; 1
    2454:	9f 8f       	std	Y+31, r25	; 0x1f
    2456:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2458:	8e 8d       	ldd	r24, Y+30	; 0x1e
    245a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    245c:	00 97       	sbiw	r24, 0x00	; 0
    245e:	69 f7       	brne	.-38     	; 0x243a <LCD_ES_tTrigger_Enable+0x12a>
    2460:	24 c0       	rjmp	.+72     	; 0x24aa <LCD_ES_tTrigger_Enable+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2462:	68 a1       	ldd	r22, Y+32	; 0x20
    2464:	79 a1       	ldd	r23, Y+33	; 0x21
    2466:	8a a1       	ldd	r24, Y+34	; 0x22
    2468:	9b a1       	ldd	r25, Y+35	; 0x23
    246a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	9f 8f       	std	Y+31, r25	; 0x1f
    2474:	8e 8f       	std	Y+30, r24	; 0x1e
    2476:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2478:	9f 8d       	ldd	r25, Y+31	; 0x1f
    247a:	9b 8f       	std	Y+27, r25	; 0x1b
    247c:	8a 8f       	std	Y+26, r24	; 0x1a
    247e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2480:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2482:	01 97       	sbiw	r24, 0x01	; 1
    2484:	f1 f7       	brne	.-4      	; 0x2482 <LCD_ES_tTrigger_Enable+0x172>
    2486:	9b 8f       	std	Y+27, r25	; 0x1b
    2488:	8a 8f       	std	Y+26, r24	; 0x1a
    248a:	0f c0       	rjmp	.+30     	; 0x24aa <LCD_ES_tTrigger_Enable+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    248c:	69 a5       	ldd	r22, Y+41	; 0x29
    248e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2490:	8b a5       	ldd	r24, Y+43	; 0x2b
    2492:	9c a5       	ldd	r25, Y+44	; 0x2c
    2494:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	88 a7       	std	Y+40, r24	; 0x28
    249e:	88 a5       	ldd	r24, Y+40	; 0x28
    24a0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    24a2:	89 8d       	ldd	r24, Y+25	; 0x19
    24a4:	8a 95       	dec	r24
    24a6:	f1 f7       	brne	.-4      	; 0x24a4 <LCD_ES_tTrigger_Enable+0x194>
    24a8:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, LOW);
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	63 e0       	ldi	r22, 0x03	; 3
    24ae:	40 e0       	ldi	r20, 0x00	; 0
    24b0:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    24b4:	80 e0       	ldi	r24, 0x00	; 0
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	aa ef       	ldi	r26, 0xFA	; 250
    24ba:	b4 e4       	ldi	r27, 0x44	; 68
    24bc:	8d 8b       	std	Y+21, r24	; 0x15
    24be:	9e 8b       	std	Y+22, r25	; 0x16
    24c0:	af 8b       	std	Y+23, r26	; 0x17
    24c2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    24c4:	6d 89       	ldd	r22, Y+21	; 0x15
    24c6:	7e 89       	ldd	r23, Y+22	; 0x16
    24c8:	8f 89       	ldd	r24, Y+23	; 0x17
    24ca:	98 8d       	ldd	r25, Y+24	; 0x18
    24cc:	2b ea       	ldi	r18, 0xAB	; 171
    24ce:	3a ea       	ldi	r19, 0xAA	; 170
    24d0:	4a ea       	ldi	r20, 0xAA	; 170
    24d2:	50 e4       	ldi	r21, 0x40	; 64
    24d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	89 8b       	std	Y+17, r24	; 0x11
    24de:	9a 8b       	std	Y+18, r25	; 0x12
    24e0:	ab 8b       	std	Y+19, r26	; 0x13
    24e2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    24e4:	69 89       	ldd	r22, Y+17	; 0x11
    24e6:	7a 89       	ldd	r23, Y+18	; 0x12
    24e8:	8b 89       	ldd	r24, Y+19	; 0x13
    24ea:	9c 89       	ldd	r25, Y+20	; 0x14
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	40 e8       	ldi	r20, 0x80	; 128
    24f2:	5f e3       	ldi	r21, 0x3F	; 63
    24f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24f8:	88 23       	and	r24, r24
    24fa:	1c f4       	brge	.+6      	; 0x2502 <LCD_ES_tTrigger_Enable+0x1f2>
		__ticks = 1;
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	88 8b       	std	Y+16, r24	; 0x10
    2500:	91 c0       	rjmp	.+290    	; 0x2624 <LCD_ES_tTrigger_Enable+0x314>
	else if (__tmp > 255)
    2502:	69 89       	ldd	r22, Y+17	; 0x11
    2504:	7a 89       	ldd	r23, Y+18	; 0x12
    2506:	8b 89       	ldd	r24, Y+19	; 0x13
    2508:	9c 89       	ldd	r25, Y+20	; 0x14
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	4f e7       	ldi	r20, 0x7F	; 127
    2510:	53 e4       	ldi	r21, 0x43	; 67
    2512:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2516:	18 16       	cp	r1, r24
    2518:	0c f0       	brlt	.+2      	; 0x251c <LCD_ES_tTrigger_Enable+0x20c>
    251a:	7b c0       	rjmp	.+246    	; 0x2612 <LCD_ES_tTrigger_Enable+0x302>
	{
		_delay_ms(__us / 1000.0);
    251c:	6d 89       	ldd	r22, Y+21	; 0x15
    251e:	7e 89       	ldd	r23, Y+22	; 0x16
    2520:	8f 89       	ldd	r24, Y+23	; 0x17
    2522:	98 8d       	ldd	r25, Y+24	; 0x18
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	4a e7       	ldi	r20, 0x7A	; 122
    252a:	54 e4       	ldi	r21, 0x44	; 68
    252c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	8c 87       	std	Y+12, r24	; 0x0c
    2536:	9d 87       	std	Y+13, r25	; 0x0d
    2538:	ae 87       	std	Y+14, r26	; 0x0e
    253a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    253c:	6c 85       	ldd	r22, Y+12	; 0x0c
    253e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2540:	8e 85       	ldd	r24, Y+14	; 0x0e
    2542:	9f 85       	ldd	r25, Y+15	; 0x0f
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	4a e7       	ldi	r20, 0x7A	; 122
    254a:	55 e4       	ldi	r21, 0x45	; 69
    254c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	88 87       	std	Y+8, r24	; 0x08
    2556:	99 87       	std	Y+9, r25	; 0x09
    2558:	aa 87       	std	Y+10, r26	; 0x0a
    255a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    255c:	68 85       	ldd	r22, Y+8	; 0x08
    255e:	79 85       	ldd	r23, Y+9	; 0x09
    2560:	8a 85       	ldd	r24, Y+10	; 0x0a
    2562:	9b 85       	ldd	r25, Y+11	; 0x0b
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	40 e8       	ldi	r20, 0x80	; 128
    256a:	5f e3       	ldi	r21, 0x3F	; 63
    256c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2570:	88 23       	and	r24, r24
    2572:	2c f4       	brge	.+10     	; 0x257e <LCD_ES_tTrigger_Enable+0x26e>
		__ticks = 1;
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	9f 83       	std	Y+7, r25	; 0x07
    257a:	8e 83       	std	Y+6, r24	; 0x06
    257c:	3f c0       	rjmp	.+126    	; 0x25fc <LCD_ES_tTrigger_Enable+0x2ec>
	else if (__tmp > 65535)
    257e:	68 85       	ldd	r22, Y+8	; 0x08
    2580:	79 85       	ldd	r23, Y+9	; 0x09
    2582:	8a 85       	ldd	r24, Y+10	; 0x0a
    2584:	9b 85       	ldd	r25, Y+11	; 0x0b
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	3f ef       	ldi	r19, 0xFF	; 255
    258a:	4f e7       	ldi	r20, 0x7F	; 127
    258c:	57 e4       	ldi	r21, 0x47	; 71
    258e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2592:	18 16       	cp	r1, r24
    2594:	4c f5       	brge	.+82     	; 0x25e8 <LCD_ES_tTrigger_Enable+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2596:	6c 85       	ldd	r22, Y+12	; 0x0c
    2598:	7d 85       	ldd	r23, Y+13	; 0x0d
    259a:	8e 85       	ldd	r24, Y+14	; 0x0e
    259c:	9f 85       	ldd	r25, Y+15	; 0x0f
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	40 e2       	ldi	r20, 0x20	; 32
    25a4:	51 e4       	ldi	r21, 0x41	; 65
    25a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	bc 01       	movw	r22, r24
    25b0:	cd 01       	movw	r24, r26
    25b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	9f 83       	std	Y+7, r25	; 0x07
    25bc:	8e 83       	std	Y+6, r24	; 0x06
    25be:	0f c0       	rjmp	.+30     	; 0x25de <LCD_ES_tTrigger_Enable+0x2ce>
    25c0:	80 e9       	ldi	r24, 0x90	; 144
    25c2:	91 e0       	ldi	r25, 0x01	; 1
    25c4:	9d 83       	std	Y+5, r25	; 0x05
    25c6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25c8:	8c 81       	ldd	r24, Y+4	; 0x04
    25ca:	9d 81       	ldd	r25, Y+5	; 0x05
    25cc:	01 97       	sbiw	r24, 0x01	; 1
    25ce:	f1 f7       	brne	.-4      	; 0x25cc <LCD_ES_tTrigger_Enable+0x2bc>
    25d0:	9d 83       	std	Y+5, r25	; 0x05
    25d2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d4:	8e 81       	ldd	r24, Y+6	; 0x06
    25d6:	9f 81       	ldd	r25, Y+7	; 0x07
    25d8:	01 97       	sbiw	r24, 0x01	; 1
    25da:	9f 83       	std	Y+7, r25	; 0x07
    25dc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25de:	8e 81       	ldd	r24, Y+6	; 0x06
    25e0:	9f 81       	ldd	r25, Y+7	; 0x07
    25e2:	00 97       	sbiw	r24, 0x00	; 0
    25e4:	69 f7       	brne	.-38     	; 0x25c0 <LCD_ES_tTrigger_Enable+0x2b0>
    25e6:	24 c0       	rjmp	.+72     	; 0x2630 <LCD_ES_tTrigger_Enable+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e8:	68 85       	ldd	r22, Y+8	; 0x08
    25ea:	79 85       	ldd	r23, Y+9	; 0x09
    25ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    25ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    25f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	9f 83       	std	Y+7, r25	; 0x07
    25fa:	8e 83       	std	Y+6, r24	; 0x06
    25fc:	8e 81       	ldd	r24, Y+6	; 0x06
    25fe:	9f 81       	ldd	r25, Y+7	; 0x07
    2600:	9b 83       	std	Y+3, r25	; 0x03
    2602:	8a 83       	std	Y+2, r24	; 0x02
    2604:	8a 81       	ldd	r24, Y+2	; 0x02
    2606:	9b 81       	ldd	r25, Y+3	; 0x03
    2608:	01 97       	sbiw	r24, 0x01	; 1
    260a:	f1 f7       	brne	.-4      	; 0x2608 <LCD_ES_tTrigger_Enable+0x2f8>
    260c:	9b 83       	std	Y+3, r25	; 0x03
    260e:	8a 83       	std	Y+2, r24	; 0x02
    2610:	0f c0       	rjmp	.+30     	; 0x2630 <LCD_ES_tTrigger_Enable+0x320>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2612:	69 89       	ldd	r22, Y+17	; 0x11
    2614:	7a 89       	ldd	r23, Y+18	; 0x12
    2616:	8b 89       	ldd	r24, Y+19	; 0x13
    2618:	9c 89       	ldd	r25, Y+20	; 0x14
    261a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	88 8b       	std	Y+16, r24	; 0x10
    2624:	88 89       	ldd	r24, Y+16	; 0x10
    2626:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2628:	89 81       	ldd	r24, Y+1	; 0x01
    262a:	8a 95       	dec	r24
    262c:	f1 f7       	brne	.-4      	; 0x262a <LCD_ES_tTrigger_Enable+0x31a>
    262e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2000);
	return ES_OK;
    2630:	80 e0       	ldi	r24, 0x00	; 0
}
    2632:	e0 96       	adiw	r28, 0x30	; 48
    2634:	0f b6       	in	r0, 0x3f	; 63
    2636:	f8 94       	cli
    2638:	de bf       	out	0x3e, r29	; 62
    263a:	0f be       	out	0x3f, r0	; 63
    263c:	cd bf       	out	0x3d, r28	; 61
    263e:	cf 91       	pop	r28
    2640:	df 91       	pop	r29
    2642:	08 95       	ret

00002644 <Lcd_ES_tInit>:


ES_t Lcd_ES_tInit(){
    2644:	df 93       	push	r29
    2646:	cf 93       	push	r28
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
#if LCD_MODE == FOUR_BIT_MODE
	Lcd_ES_tsendCmd(Four_BitMode);   /* Go into 4-bit operating mode*/
    264c:	82 e0       	ldi	r24, 0x02	; 2
    264e:	0e 94 c2 13 	call	0x2784	; 0x2784 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(D4_D7);  /* 2 Line, 5*7 matrix in 4-bit mode */
    2652:	88 e2       	ldi	r24, 0x28	; 40
    2654:	0e 94 c2 13 	call	0x2784	; 0x2784 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
    2658:	8e e0       	ldi	r24, 0x0E	; 14
    265a:	0e 94 c2 13 	call	0x2784	; 0x2784 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
    265e:	86 e0       	ldi	r24, 0x06	; 6
    2660:	0e 94 c2 13 	call	0x2784	; 0x2784 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	0e 94 c2 13 	call	0x2784	; 0x2784 <Lcd_ES_tsendCmd>
	return ES_OK;
    266a:	80 e0       	ldi	r24, 0x00	; 0
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
	return ES_OK;
#endif
}
    266c:	cf 91       	pop	r28
    266e:	df 91       	pop	r29
    2670:	08 95       	ret

00002672 <lcd_ES_tclear>:
 *
 *	Ex. 0x28 0b 0010 1000  //Read bit by bit and see if it is low or high
 */

ES_t lcd_ES_tclear()
{
    2672:	df 93       	push	r29
    2674:	cf 93       	push	r28
    2676:	cd b7       	in	r28, 0x3d	; 61
    2678:	de b7       	in	r29, 0x3e	; 62
    267a:	2e 97       	sbiw	r28, 0x0e	; 14
    267c:	0f b6       	in	r0, 0x3f	; 63
    267e:	f8 94       	cli
    2680:	de bf       	out	0x3e, r29	; 62
    2682:	0f be       	out	0x3f, r0	; 63
    2684:	cd bf       	out	0x3d, r28	; 61
	Lcd_ES_tsendCmd(CLR_Display);
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	0e 94 c2 13 	call	0x2784	; 0x2784 <Lcd_ES_tsendCmd>
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	a0 e0       	ldi	r26, 0x00	; 0
    2692:	b0 e4       	ldi	r27, 0x40	; 64
    2694:	8b 87       	std	Y+11, r24	; 0x0b
    2696:	9c 87       	std	Y+12, r25	; 0x0c
    2698:	ad 87       	std	Y+13, r26	; 0x0d
    269a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    269c:	6b 85       	ldd	r22, Y+11	; 0x0b
    269e:	7c 85       	ldd	r23, Y+12	; 0x0c
    26a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    26a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	4a e7       	ldi	r20, 0x7A	; 122
    26aa:	55 e4       	ldi	r21, 0x45	; 69
    26ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b0:	dc 01       	movw	r26, r24
    26b2:	cb 01       	movw	r24, r22
    26b4:	8f 83       	std	Y+7, r24	; 0x07
    26b6:	98 87       	std	Y+8, r25	; 0x08
    26b8:	a9 87       	std	Y+9, r26	; 0x09
    26ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26bc:	6f 81       	ldd	r22, Y+7	; 0x07
    26be:	78 85       	ldd	r23, Y+8	; 0x08
    26c0:	89 85       	ldd	r24, Y+9	; 0x09
    26c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	40 e8       	ldi	r20, 0x80	; 128
    26ca:	5f e3       	ldi	r21, 0x3F	; 63
    26cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26d0:	88 23       	and	r24, r24
    26d2:	2c f4       	brge	.+10     	; 0x26de <lcd_ES_tclear+0x6c>
		__ticks = 1;
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	9e 83       	std	Y+6, r25	; 0x06
    26da:	8d 83       	std	Y+5, r24	; 0x05
    26dc:	3f c0       	rjmp	.+126    	; 0x275c <lcd_ES_tclear+0xea>
	else if (__tmp > 65535)
    26de:	6f 81       	ldd	r22, Y+7	; 0x07
    26e0:	78 85       	ldd	r23, Y+8	; 0x08
    26e2:	89 85       	ldd	r24, Y+9	; 0x09
    26e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	3f ef       	ldi	r19, 0xFF	; 255
    26ea:	4f e7       	ldi	r20, 0x7F	; 127
    26ec:	57 e4       	ldi	r21, 0x47	; 71
    26ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26f2:	18 16       	cp	r1, r24
    26f4:	4c f5       	brge	.+82     	; 0x2748 <lcd_ES_tclear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    26f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    26fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    26fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	40 e2       	ldi	r20, 0x20	; 32
    2704:	51 e4       	ldi	r21, 0x41	; 65
    2706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	bc 01       	movw	r22, r24
    2710:	cd 01       	movw	r24, r26
    2712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	9e 83       	std	Y+6, r25	; 0x06
    271c:	8d 83       	std	Y+5, r24	; 0x05
    271e:	0f c0       	rjmp	.+30     	; 0x273e <lcd_ES_tclear+0xcc>
    2720:	80 e9       	ldi	r24, 0x90	; 144
    2722:	91 e0       	ldi	r25, 0x01	; 1
    2724:	9c 83       	std	Y+4, r25	; 0x04
    2726:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2728:	8b 81       	ldd	r24, Y+3	; 0x03
    272a:	9c 81       	ldd	r25, Y+4	; 0x04
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	f1 f7       	brne	.-4      	; 0x272c <lcd_ES_tclear+0xba>
    2730:	9c 83       	std	Y+4, r25	; 0x04
    2732:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2734:	8d 81       	ldd	r24, Y+5	; 0x05
    2736:	9e 81       	ldd	r25, Y+6	; 0x06
    2738:	01 97       	sbiw	r24, 0x01	; 1
    273a:	9e 83       	std	Y+6, r25	; 0x06
    273c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    273e:	8d 81       	ldd	r24, Y+5	; 0x05
    2740:	9e 81       	ldd	r25, Y+6	; 0x06
    2742:	00 97       	sbiw	r24, 0x00	; 0
    2744:	69 f7       	brne	.-38     	; 0x2720 <lcd_ES_tclear+0xae>
    2746:	14 c0       	rjmp	.+40     	; 0x2770 <lcd_ES_tclear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2748:	6f 81       	ldd	r22, Y+7	; 0x07
    274a:	78 85       	ldd	r23, Y+8	; 0x08
    274c:	89 85       	ldd	r24, Y+9	; 0x09
    274e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	9e 83       	std	Y+6, r25	; 0x06
    275a:	8d 83       	std	Y+5, r24	; 0x05
    275c:	8d 81       	ldd	r24, Y+5	; 0x05
    275e:	9e 81       	ldd	r25, Y+6	; 0x06
    2760:	9a 83       	std	Y+2, r25	; 0x02
    2762:	89 83       	std	Y+1, r24	; 0x01
    2764:	89 81       	ldd	r24, Y+1	; 0x01
    2766:	9a 81       	ldd	r25, Y+2	; 0x02
    2768:	01 97       	sbiw	r24, 0x01	; 1
    276a:	f1 f7       	brne	.-4      	; 0x2768 <lcd_ES_tclear+0xf6>
    276c:	9a 83       	std	Y+2, r25	; 0x02
    276e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	return ES_OK;
    2770:	80 e0       	ldi	r24, 0x00	; 0
}
    2772:	2e 96       	adiw	r28, 0x0e	; 14
    2774:	0f b6       	in	r0, 0x3f	; 63
    2776:	f8 94       	cli
    2778:	de bf       	out	0x3e, r29	; 62
    277a:	0f be       	out	0x3f, r0	; 63
    277c:	cd bf       	out	0x3d, r28	; 61
    277e:	cf 91       	pop	r28
    2780:	df 91       	pop	r29
    2782:	08 95       	ret

00002784 <Lcd_ES_tsendCmd>:

ES_t Lcd_ES_tsendCmd(u8 cmd){
    2784:	df 93       	push	r29
    2786:	cf 93       	push	r28
    2788:	0f 92       	push	r0
    278a:	cd b7       	in	r28, 0x3d	; 61
    278c:	de b7       	in	r29, 0x3e	; 62
    278e:	89 83       	std	Y+1, r24	; 0x01
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, LOW);
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	61 e0       	ldi	r22, 0x01	; 1
    2794:	40 e0       	ldi	r20, 0x00	; 0
    2796:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	60 e0       	ldi	r22, 0x00	; 0
    279e:	40 e0       	ldi	r20, 0x00	; 0
    27a0:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	// DIO_ES_tGetPinValue, DIO_ES_tSetPinValue
	// if(GET_BIT(cmd,7)){Dio_Write(D7,HIGH);}else{Dio_write(D7,LOW);}
	// We use ternary operator instead
#if LCD_MODE == FOUR_BIT_MODE
	(GET_BIT(cmd,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    27a4:	89 81       	ldd	r24, Y+1	; 0x01
    27a6:	88 23       	and	r24, r24
    27a8:	34 f4       	brge	.+12     	; 0x27b6 <Lcd_ES_tsendCmd+0x32>
    27aa:	80 e0       	ldi	r24, 0x00	; 0
    27ac:	66 e0       	ldi	r22, 0x06	; 6
    27ae:	41 e0       	ldi	r20, 0x01	; 1
    27b0:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    27b4:	05 c0       	rjmp	.+10     	; 0x27c0 <Lcd_ES_tsendCmd+0x3c>
    27b6:	80 e0       	ldi	r24, 0x00	; 0
    27b8:	66 e0       	ldi	r22, 0x06	; 6
    27ba:	40 e0       	ldi	r20, 0x00	; 0
    27bc:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    27c0:	89 81       	ldd	r24, Y+1	; 0x01
    27c2:	82 95       	swap	r24
    27c4:	86 95       	lsr	r24
    27c6:	86 95       	lsr	r24
    27c8:	83 70       	andi	r24, 0x03	; 3
    27ca:	88 2f       	mov	r24, r24
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	81 70       	andi	r24, 0x01	; 1
    27d0:	90 70       	andi	r25, 0x00	; 0
    27d2:	88 23       	and	r24, r24
    27d4:	31 f0       	breq	.+12     	; 0x27e2 <Lcd_ES_tsendCmd+0x5e>
    27d6:	80 e0       	ldi	r24, 0x00	; 0
    27d8:	65 e0       	ldi	r22, 0x05	; 5
    27da:	41 e0       	ldi	r20, 0x01	; 1
    27dc:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    27e0:	05 c0       	rjmp	.+10     	; 0x27ec <Lcd_ES_tsendCmd+0x68>
    27e2:	80 e0       	ldi	r24, 0x00	; 0
    27e4:	65 e0       	ldi	r22, 0x05	; 5
    27e6:	40 e0       	ldi	r20, 0x00	; 0
    27e8:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    27ec:	89 81       	ldd	r24, Y+1	; 0x01
    27ee:	82 95       	swap	r24
    27f0:	86 95       	lsr	r24
    27f2:	87 70       	andi	r24, 0x07	; 7
    27f4:	88 2f       	mov	r24, r24
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	81 70       	andi	r24, 0x01	; 1
    27fa:	90 70       	andi	r25, 0x00	; 0
    27fc:	88 23       	and	r24, r24
    27fe:	31 f0       	breq	.+12     	; 0x280c <Lcd_ES_tsendCmd+0x88>
    2800:	80 e0       	ldi	r24, 0x00	; 0
    2802:	64 e0       	ldi	r22, 0x04	; 4
    2804:	41 e0       	ldi	r20, 0x01	; 1
    2806:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    280a:	05 c0       	rjmp	.+10     	; 0x2816 <Lcd_ES_tsendCmd+0x92>
    280c:	80 e0       	ldi	r24, 0x00	; 0
    280e:	64 e0       	ldi	r22, 0x04	; 4
    2810:	40 e0       	ldi	r20, 0x00	; 0
    2812:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    2816:	89 81       	ldd	r24, Y+1	; 0x01
    2818:	82 95       	swap	r24
    281a:	8f 70       	andi	r24, 0x0F	; 15
    281c:	88 2f       	mov	r24, r24
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	81 70       	andi	r24, 0x01	; 1
    2822:	90 70       	andi	r25, 0x00	; 0
    2824:	88 23       	and	r24, r24
    2826:	31 f0       	breq	.+12     	; 0x2834 <Lcd_ES_tsendCmd+0xb0>
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	63 e0       	ldi	r22, 0x03	; 3
    282c:	41 e0       	ldi	r20, 0x01	; 1
    282e:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    2832:	05 c0       	rjmp	.+10     	; 0x283e <Lcd_ES_tsendCmd+0xba>
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	63 e0       	ldi	r22, 0x03	; 3
    2838:	40 e0       	ldi	r20, 0x00	; 0
    283a:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    283e:	0e 94 88 11 	call	0x2310	; 0x2310 <LCD_ES_tTrigger_Enable>
	(GET_BIT(cmd,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    2842:	89 81       	ldd	r24, Y+1	; 0x01
    2844:	86 95       	lsr	r24
    2846:	86 95       	lsr	r24
    2848:	86 95       	lsr	r24
    284a:	88 2f       	mov	r24, r24
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	81 70       	andi	r24, 0x01	; 1
    2850:	90 70       	andi	r25, 0x00	; 0
    2852:	88 23       	and	r24, r24
    2854:	31 f0       	breq	.+12     	; 0x2862 <Lcd_ES_tsendCmd+0xde>
    2856:	80 e0       	ldi	r24, 0x00	; 0
    2858:	66 e0       	ldi	r22, 0x06	; 6
    285a:	41 e0       	ldi	r20, 0x01	; 1
    285c:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    2860:	05 c0       	rjmp	.+10     	; 0x286c <Lcd_ES_tsendCmd+0xe8>
    2862:	80 e0       	ldi	r24, 0x00	; 0
    2864:	66 e0       	ldi	r22, 0x06	; 6
    2866:	40 e0       	ldi	r20, 0x00	; 0
    2868:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    286c:	89 81       	ldd	r24, Y+1	; 0x01
    286e:	86 95       	lsr	r24
    2870:	86 95       	lsr	r24
    2872:	88 2f       	mov	r24, r24
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	81 70       	andi	r24, 0x01	; 1
    2878:	90 70       	andi	r25, 0x00	; 0
    287a:	88 23       	and	r24, r24
    287c:	31 f0       	breq	.+12     	; 0x288a <Lcd_ES_tsendCmd+0x106>
    287e:	80 e0       	ldi	r24, 0x00	; 0
    2880:	65 e0       	ldi	r22, 0x05	; 5
    2882:	41 e0       	ldi	r20, 0x01	; 1
    2884:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    2888:	05 c0       	rjmp	.+10     	; 0x2894 <Lcd_ES_tsendCmd+0x110>
    288a:	80 e0       	ldi	r24, 0x00	; 0
    288c:	65 e0       	ldi	r22, 0x05	; 5
    288e:	40 e0       	ldi	r20, 0x00	; 0
    2890:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	86 95       	lsr	r24
    2898:	88 2f       	mov	r24, r24
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	81 70       	andi	r24, 0x01	; 1
    289e:	90 70       	andi	r25, 0x00	; 0
    28a0:	88 23       	and	r24, r24
    28a2:	31 f0       	breq	.+12     	; 0x28b0 <Lcd_ES_tsendCmd+0x12c>
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	64 e0       	ldi	r22, 0x04	; 4
    28a8:	41 e0       	ldi	r20, 0x01	; 1
    28aa:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    28ae:	05 c0       	rjmp	.+10     	; 0x28ba <Lcd_ES_tsendCmd+0x136>
    28b0:	80 e0       	ldi	r24, 0x00	; 0
    28b2:	64 e0       	ldi	r22, 0x04	; 4
    28b4:	40 e0       	ldi	r20, 0x00	; 0
    28b6:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    28ba:	89 81       	ldd	r24, Y+1	; 0x01
    28bc:	88 2f       	mov	r24, r24
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	81 70       	andi	r24, 0x01	; 1
    28c2:	90 70       	andi	r25, 0x00	; 0
    28c4:	88 23       	and	r24, r24
    28c6:	31 f0       	breq	.+12     	; 0x28d4 <Lcd_ES_tsendCmd+0x150>
    28c8:	80 e0       	ldi	r24, 0x00	; 0
    28ca:	63 e0       	ldi	r22, 0x03	; 3
    28cc:	41 e0       	ldi	r20, 0x01	; 1
    28ce:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    28d2:	05 c0       	rjmp	.+10     	; 0x28de <Lcd_ES_tsendCmd+0x15a>
    28d4:	80 e0       	ldi	r24, 0x00	; 0
    28d6:	63 e0       	ldi	r22, 0x03	; 3
    28d8:	40 e0       	ldi	r20, 0x00	; 0
    28da:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    28de:	0e 94 88 11 	call	0x2310	; 0x2310 <LCD_ES_tTrigger_Enable>
	return ES_OK;
    28e2:	80 e0       	ldi	r24, 0x00	; 0
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D0,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D0,LOW);
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif
}
    28e4:	0f 90       	pop	r0
    28e6:	cf 91       	pop	r28
    28e8:	df 91       	pop	r29
    28ea:	08 95       	ret

000028ec <Lcd_ES_tsendChar>:
ES_t Lcd_ES_tsendChar(u8 data){
    28ec:	df 93       	push	r29
    28ee:	cf 93       	push	r28
    28f0:	0f 92       	push	r0
    28f2:	cd b7       	in	r28, 0x3d	; 61
    28f4:	de b7       	in	r29, 0x3e	; 62
    28f6:	89 83       	std	Y+1, r24	; 0x01
#if LCD_MODE == FOUR_BIT_MODE
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	61 e0       	ldi	r22, 0x01	; 1
    28fc:	41 e0       	ldi	r20, 0x01	; 1
    28fe:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2902:	81 e0       	ldi	r24, 0x01	; 1
    2904:	60 e0       	ldi	r22, 0x00	; 0
    2906:	40 e0       	ldi	r20, 0x00	; 0
    2908:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	(GET_BIT(data,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    290c:	89 81       	ldd	r24, Y+1	; 0x01
    290e:	88 23       	and	r24, r24
    2910:	34 f4       	brge	.+12     	; 0x291e <Lcd_ES_tsendChar+0x32>
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	66 e0       	ldi	r22, 0x06	; 6
    2916:	41 e0       	ldi	r20, 0x01	; 1
    2918:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    291c:	05 c0       	rjmp	.+10     	; 0x2928 <Lcd_ES_tsendChar+0x3c>
    291e:	80 e0       	ldi	r24, 0x00	; 0
    2920:	66 e0       	ldi	r22, 0x06	; 6
    2922:	40 e0       	ldi	r20, 0x00	; 0
    2924:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	(GET_BIT(data,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    2928:	89 81       	ldd	r24, Y+1	; 0x01
    292a:	82 95       	swap	r24
    292c:	86 95       	lsr	r24
    292e:	86 95       	lsr	r24
    2930:	83 70       	andi	r24, 0x03	; 3
    2932:	88 2f       	mov	r24, r24
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	81 70       	andi	r24, 0x01	; 1
    2938:	90 70       	andi	r25, 0x00	; 0
    293a:	88 23       	and	r24, r24
    293c:	31 f0       	breq	.+12     	; 0x294a <Lcd_ES_tsendChar+0x5e>
    293e:	80 e0       	ldi	r24, 0x00	; 0
    2940:	65 e0       	ldi	r22, 0x05	; 5
    2942:	41 e0       	ldi	r20, 0x01	; 1
    2944:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    2948:	05 c0       	rjmp	.+10     	; 0x2954 <Lcd_ES_tsendChar+0x68>
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	65 e0       	ldi	r22, 0x05	; 5
    294e:	40 e0       	ldi	r20, 0x00	; 0
    2950:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	(GET_BIT(data,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    2954:	89 81       	ldd	r24, Y+1	; 0x01
    2956:	82 95       	swap	r24
    2958:	86 95       	lsr	r24
    295a:	87 70       	andi	r24, 0x07	; 7
    295c:	88 2f       	mov	r24, r24
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	81 70       	andi	r24, 0x01	; 1
    2962:	90 70       	andi	r25, 0x00	; 0
    2964:	88 23       	and	r24, r24
    2966:	31 f0       	breq	.+12     	; 0x2974 <Lcd_ES_tsendChar+0x88>
    2968:	80 e0       	ldi	r24, 0x00	; 0
    296a:	64 e0       	ldi	r22, 0x04	; 4
    296c:	41 e0       	ldi	r20, 0x01	; 1
    296e:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    2972:	05 c0       	rjmp	.+10     	; 0x297e <Lcd_ES_tsendChar+0x92>
    2974:	80 e0       	ldi	r24, 0x00	; 0
    2976:	64 e0       	ldi	r22, 0x04	; 4
    2978:	40 e0       	ldi	r20, 0x00	; 0
    297a:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	(GET_BIT(data,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    297e:	89 81       	ldd	r24, Y+1	; 0x01
    2980:	82 95       	swap	r24
    2982:	8f 70       	andi	r24, 0x0F	; 15
    2984:	88 2f       	mov	r24, r24
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	81 70       	andi	r24, 0x01	; 1
    298a:	90 70       	andi	r25, 0x00	; 0
    298c:	88 23       	and	r24, r24
    298e:	31 f0       	breq	.+12     	; 0x299c <Lcd_ES_tsendChar+0xb0>
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	63 e0       	ldi	r22, 0x03	; 3
    2994:	41 e0       	ldi	r20, 0x01	; 1
    2996:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    299a:	05 c0       	rjmp	.+10     	; 0x29a6 <Lcd_ES_tsendChar+0xba>
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	63 e0       	ldi	r22, 0x03	; 3
    29a0:	40 e0       	ldi	r20, 0x00	; 0
    29a2:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    29a6:	0e 94 88 11 	call	0x2310	; 0x2310 <LCD_ES_tTrigger_Enable>
	(GET_BIT(data,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    29aa:	89 81       	ldd	r24, Y+1	; 0x01
    29ac:	86 95       	lsr	r24
    29ae:	86 95       	lsr	r24
    29b0:	86 95       	lsr	r24
    29b2:	88 2f       	mov	r24, r24
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	81 70       	andi	r24, 0x01	; 1
    29b8:	90 70       	andi	r25, 0x00	; 0
    29ba:	88 23       	and	r24, r24
    29bc:	31 f0       	breq	.+12     	; 0x29ca <Lcd_ES_tsendChar+0xde>
    29be:	80 e0       	ldi	r24, 0x00	; 0
    29c0:	66 e0       	ldi	r22, 0x06	; 6
    29c2:	41 e0       	ldi	r20, 0x01	; 1
    29c4:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    29c8:	05 c0       	rjmp	.+10     	; 0x29d4 <Lcd_ES_tsendChar+0xe8>
    29ca:	80 e0       	ldi	r24, 0x00	; 0
    29cc:	66 e0       	ldi	r22, 0x06	; 6
    29ce:	40 e0       	ldi	r20, 0x00	; 0
    29d0:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	(GET_BIT(data,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    29d4:	89 81       	ldd	r24, Y+1	; 0x01
    29d6:	86 95       	lsr	r24
    29d8:	86 95       	lsr	r24
    29da:	88 2f       	mov	r24, r24
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	81 70       	andi	r24, 0x01	; 1
    29e0:	90 70       	andi	r25, 0x00	; 0
    29e2:	88 23       	and	r24, r24
    29e4:	31 f0       	breq	.+12     	; 0x29f2 <Lcd_ES_tsendChar+0x106>
    29e6:	80 e0       	ldi	r24, 0x00	; 0
    29e8:	65 e0       	ldi	r22, 0x05	; 5
    29ea:	41 e0       	ldi	r20, 0x01	; 1
    29ec:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    29f0:	05 c0       	rjmp	.+10     	; 0x29fc <Lcd_ES_tsendChar+0x110>
    29f2:	80 e0       	ldi	r24, 0x00	; 0
    29f4:	65 e0       	ldi	r22, 0x05	; 5
    29f6:	40 e0       	ldi	r20, 0x00	; 0
    29f8:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	(GET_BIT(data,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    29fc:	89 81       	ldd	r24, Y+1	; 0x01
    29fe:	86 95       	lsr	r24
    2a00:	88 2f       	mov	r24, r24
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	81 70       	andi	r24, 0x01	; 1
    2a06:	90 70       	andi	r25, 0x00	; 0
    2a08:	88 23       	and	r24, r24
    2a0a:	31 f0       	breq	.+12     	; 0x2a18 <Lcd_ES_tsendChar+0x12c>
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
    2a0e:	64 e0       	ldi	r22, 0x04	; 4
    2a10:	41 e0       	ldi	r20, 0x01	; 1
    2a12:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    2a16:	05 c0       	rjmp	.+10     	; 0x2a22 <Lcd_ES_tsendChar+0x136>
    2a18:	80 e0       	ldi	r24, 0x00	; 0
    2a1a:	64 e0       	ldi	r22, 0x04	; 4
    2a1c:	40 e0       	ldi	r20, 0x00	; 0
    2a1e:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	(GET_BIT(data,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    2a22:	89 81       	ldd	r24, Y+1	; 0x01
    2a24:	88 2f       	mov	r24, r24
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	81 70       	andi	r24, 0x01	; 1
    2a2a:	90 70       	andi	r25, 0x00	; 0
    2a2c:	88 23       	and	r24, r24
    2a2e:	31 f0       	breq	.+12     	; 0x2a3c <Lcd_ES_tsendChar+0x150>
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	63 e0       	ldi	r22, 0x03	; 3
    2a34:	41 e0       	ldi	r20, 0x01	; 1
    2a36:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    2a3a:	05 c0       	rjmp	.+10     	; 0x2a46 <Lcd_ES_tsendChar+0x15a>
    2a3c:	80 e0       	ldi	r24, 0x00	; 0
    2a3e:	63 e0       	ldi	r22, 0x03	; 3
    2a40:	40 e0       	ldi	r20, 0x00	; 0
    2a42:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    2a46:	0e 94 88 11 	call	0x2310	; 0x2310 <LCD_ES_tTrigger_Enable>
	return ES_OK;
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif

}
    2a4c:	0f 90       	pop	r0
    2a4e:	cf 91       	pop	r28
    2a50:	df 91       	pop	r29
    2a52:	08 95       	ret

00002a54 <Lcd_ES_tsendString>:

ES_t Lcd_ES_tsendString(char *data)
{
    2a54:	df 93       	push	r29
    2a56:	cf 93       	push	r28
    2a58:	00 d0       	rcall	.+0      	; 0x2a5a <Lcd_ES_tsendString+0x6>
    2a5a:	0f 92       	push	r0
    2a5c:	cd b7       	in	r28, 0x3d	; 61
    2a5e:	de b7       	in	r29, 0x3e	; 62
    2a60:	9b 83       	std	Y+3, r25	; 0x03
    2a62:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	61 e0       	ldi	r22, 0x01	; 1
    2a68:	41 e0       	ldi	r20, 0x01	; 1
    2a6a:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	60 e0       	ldi	r22, 0x00	; 0
    2a72:	40 e0       	ldi	r20, 0x00	; 0
    2a74:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>

	unsigned char i=0;
    2a78:	19 82       	std	Y+1, r1	; 0x01
    2a7a:	0e c0       	rjmp	.+28     	; 0x2a98 <Lcd_ES_tsendString+0x44>
	while(data[i]!=0)
	{
		Lcd_ES_tsendChar(data[i]);
    2a7c:	89 81       	ldd	r24, Y+1	; 0x01
    2a7e:	28 2f       	mov	r18, r24
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	8a 81       	ldd	r24, Y+2	; 0x02
    2a84:	9b 81       	ldd	r25, Y+3	; 0x03
    2a86:	fc 01       	movw	r30, r24
    2a88:	e2 0f       	add	r30, r18
    2a8a:	f3 1f       	adc	r31, r19
    2a8c:	80 81       	ld	r24, Z
    2a8e:	0e 94 76 14 	call	0x28ec	; 0x28ec <Lcd_ES_tsendChar>
		i++;
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	8f 5f       	subi	r24, 0xFF	; 255
    2a96:	89 83       	std	Y+1, r24	; 0x01
{
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);

	unsigned char i=0;
	while(data[i]!=0)
    2a98:	89 81       	ldd	r24, Y+1	; 0x01
    2a9a:	28 2f       	mov	r18, r24
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa0:	9b 81       	ldd	r25, Y+3	; 0x03
    2aa2:	fc 01       	movw	r30, r24
    2aa4:	e2 0f       	add	r30, r18
    2aa6:	f3 1f       	adc	r31, r19
    2aa8:	80 81       	ld	r24, Z
    2aaa:	88 23       	and	r24, r24
    2aac:	39 f7       	brne	.-50     	; 0x2a7c <Lcd_ES_tsendString+0x28>
	{
		Lcd_ES_tsendChar(data[i]);
		i++;
	}
	return ES_OK;
    2aae:	80 e0       	ldi	r24, 0x00	; 0
}
    2ab0:	0f 90       	pop	r0
    2ab2:	0f 90       	pop	r0
    2ab4:	0f 90       	pop	r0
    2ab6:	cf 91       	pop	r28
    2ab8:	df 91       	pop	r29
    2aba:	08 95       	ret

00002abc <Lcd_ES_tsendString_xy>:

ES_t Lcd_ES_tsendString_xy(char *data,u8 row,u8 col){
    2abc:	df 93       	push	r29
    2abe:	cf 93       	push	r28
    2ac0:	00 d0       	rcall	.+0      	; 0x2ac2 <Lcd_ES_tsendString_xy+0x6>
    2ac2:	00 d0       	rcall	.+0      	; 0x2ac4 <Lcd_ES_tsendString_xy+0x8>
    2ac4:	cd b7       	in	r28, 0x3d	; 61
    2ac6:	de b7       	in	r29, 0x3e	; 62
    2ac8:	9a 83       	std	Y+2, r25	; 0x02
    2aca:	89 83       	std	Y+1, r24	; 0x01
    2acc:	6b 83       	std	Y+3, r22	; 0x03
    2ace:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	61 e0       	ldi	r22, 0x01	; 1
    2ad4:	41 e0       	ldi	r20, 0x01	; 1
    2ad6:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2ada:	81 e0       	ldi	r24, 0x01	; 1
    2adc:	60 e0       	ldi	r22, 0x00	; 0
    2ade:	40 e0       	ldi	r20, 0x00	; 0
    2ae0:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>

	LCD_ES_tSet_Cursor_Pos(row,col);
    2ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae6:	6c 81       	ldd	r22, Y+4	; 0x04
    2ae8:	0e 94 49 18 	call	0x3092	; 0x3092 <LCD_ES_tSet_Cursor_Pos>
	Lcd_ES_tsendString(data);
    2aec:	89 81       	ldd	r24, Y+1	; 0x01
    2aee:	9a 81       	ldd	r25, Y+2	; 0x02
    2af0:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <Lcd_ES_tsendString>
	return ES_OK;
    2af4:	80 e0       	ldi	r24, 0x00	; 0

}
    2af6:	0f 90       	pop	r0
    2af8:	0f 90       	pop	r0
    2afa:	0f 90       	pop	r0
    2afc:	0f 90       	pop	r0
    2afe:	cf 91       	pop	r28
    2b00:	df 91       	pop	r29
    2b02:	08 95       	ret

00002b04 <Lcd_ES_tdisplayNum>:


//A function to display Numbers instead of characters
ES_t Lcd_ES_tdisplayNum(u16 num)
{
    2b04:	df 93       	push	r29
    2b06:	cf 93       	push	r28
    2b08:	cd b7       	in	r28, 0x3d	; 61
    2b0a:	de b7       	in	r29, 0x3e	; 62
    2b0c:	2e 97       	sbiw	r28, 0x0e	; 14
    2b0e:	0f b6       	in	r0, 0x3f	; 63
    2b10:	f8 94       	cli
    2b12:	de bf       	out	0x3e, r29	; 62
    2b14:	0f be       	out	0x3f, r0	; 63
    2b16:	cd bf       	out	0x3d, r28	; 61
    2b18:	9e 87       	std	Y+14, r25	; 0x0e
    2b1a:	8d 87       	std	Y+13, r24	; 0x0d
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	61 e0       	ldi	r22, 0x01	; 1
    2b20:	41 e0       	ldi	r20, 0x01	; 1
    2b22:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	60 e0       	ldi	r22, 0x00	; 0
    2b2a:	40 e0       	ldi	r20, 0x00	; 0
    2b2c:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>

	uint8_t ch[10],i=0,j=0;
    2b30:	1a 82       	std	Y+2, r1	; 0x02
    2b32:	19 82       	std	Y+1, r1	; 0x01
	if(num == 0)
    2b34:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b36:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b38:	00 97       	sbiw	r24, 0x00	; 0
    2b3a:	11 f5       	brne	.+68     	; 0x2b80 <Lcd_ES_tdisplayNum+0x7c>
	{
		Lcd_ES_tsendChar('0');
    2b3c:	80 e3       	ldi	r24, 0x30	; 48
    2b3e:	0e 94 76 14 	call	0x28ec	; 0x28ec <Lcd_ES_tsendChar>
    2b42:	39 c0       	rjmp	.+114    	; 0x2bb6 <Lcd_ES_tdisplayNum+0xb2>
	}
	else
	{
		while(num)
		{
			ch[i] = num % 10 + '0';  //To convert int to char
    2b44:	8a 81       	ldd	r24, Y+2	; 0x02
    2b46:	e8 2f       	mov	r30, r24
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b4e:	2a e0       	ldi	r18, 0x0A	; 10
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	b9 01       	movw	r22, r18
    2b54:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <__udivmodhi4>
    2b58:	28 2f       	mov	r18, r24
    2b5a:	20 5d       	subi	r18, 0xD0	; 208
    2b5c:	ce 01       	movw	r24, r28
    2b5e:	03 96       	adiw	r24, 0x03	; 3
    2b60:	e8 0f       	add	r30, r24
    2b62:	f9 1f       	adc	r31, r25
    2b64:	20 83       	st	Z, r18
			num /= 10;
    2b66:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b68:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b6a:	2a e0       	ldi	r18, 0x0A	; 10
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	b9 01       	movw	r22, r18
    2b70:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <__udivmodhi4>
    2b74:	cb 01       	movw	r24, r22
    2b76:	9e 87       	std	Y+14, r25	; 0x0e
    2b78:	8d 87       	std	Y+13, r24	; 0x0d
			i++;
    2b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7c:	8f 5f       	subi	r24, 0xFF	; 255
    2b7e:	8a 83       	std	Y+2, r24	; 0x02
	{
		Lcd_ES_tsendChar('0');
	}
	else
	{
		while(num)
    2b80:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b82:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b84:	00 97       	sbiw	r24, 0x00	; 0
    2b86:	f1 f6       	brne	.-68     	; 0x2b44 <Lcd_ES_tdisplayNum+0x40>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    2b88:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8a:	89 83       	std	Y+1, r24	; 0x01
    2b8c:	11 c0       	rjmp	.+34     	; 0x2bb0 <Lcd_ES_tdisplayNum+0xac>
		{
			Lcd_ES_tsendChar(ch[j-1]);
    2b8e:	89 81       	ldd	r24, Y+1	; 0x01
    2b90:	88 2f       	mov	r24, r24
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	9c 01       	movw	r18, r24
    2b96:	21 50       	subi	r18, 0x01	; 1
    2b98:	30 40       	sbci	r19, 0x00	; 0
    2b9a:	ce 01       	movw	r24, r28
    2b9c:	03 96       	adiw	r24, 0x03	; 3
    2b9e:	fc 01       	movw	r30, r24
    2ba0:	e2 0f       	add	r30, r18
    2ba2:	f3 1f       	adc	r31, r19
    2ba4:	80 81       	ld	r24, Z
    2ba6:	0e 94 76 14 	call	0x28ec	; 0x28ec <Lcd_ES_tsendChar>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    2baa:	89 81       	ldd	r24, Y+1	; 0x01
    2bac:	81 50       	subi	r24, 0x01	; 1
    2bae:	89 83       	std	Y+1, r24	; 0x01
    2bb0:	89 81       	ldd	r24, Y+1	; 0x01
    2bb2:	88 23       	and	r24, r24
    2bb4:	61 f7       	brne	.-40     	; 0x2b8e <Lcd_ES_tdisplayNum+0x8a>
		{
			Lcd_ES_tsendChar(ch[j-1]);
		}
	}
	return ES_OK;
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
}
    2bb8:	2e 96       	adiw	r28, 0x0e	; 14
    2bba:	0f b6       	in	r0, 0x3f	; 63
    2bbc:	f8 94       	cli
    2bbe:	de bf       	out	0x3e, r29	; 62
    2bc0:	0f be       	out	0x3f, r0	; 63
    2bc2:	cd bf       	out	0x3d, r28	; 61
    2bc4:	cf 91       	pop	r28
    2bc6:	df 91       	pop	r29
    2bc8:	08 95       	ret

00002bca <Lcd_ES_tdisplayNum_xy>:

ES_t Lcd_ES_tdisplayNum_xy(u16 num,u8 row,u8 col){
    2bca:	df 93       	push	r29
    2bcc:	cf 93       	push	r28
    2bce:	cd b7       	in	r28, 0x3d	; 61
    2bd0:	de b7       	in	r29, 0x3e	; 62
    2bd2:	a3 97       	sbiw	r28, 0x23	; 35
    2bd4:	0f b6       	in	r0, 0x3f	; 63
    2bd6:	f8 94       	cli
    2bd8:	de bf       	out	0x3e, r29	; 62
    2bda:	0f be       	out	0x3f, r0	; 63
    2bdc:	cd bf       	out	0x3d, r28	; 61
    2bde:	98 a3       	std	Y+32, r25	; 0x20
    2be0:	8f 8f       	std	Y+31, r24	; 0x1f
    2be2:	69 a3       	std	Y+33, r22	; 0x21
    2be4:	4a a3       	std	Y+34, r20	; 0x22

	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	61 e0       	ldi	r22, 0x01	; 1
    2bea:	41 e0       	ldi	r20, 0x01	; 1
    2bec:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	60 e0       	ldi	r22, 0x00	; 0
    2bf4:	40 e0       	ldi	r20, 0x00	; 0
    2bf6:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>


	if(row == 1){
    2bfa:	89 a1       	ldd	r24, Y+33	; 0x21
    2bfc:	81 30       	cpi	r24, 0x01	; 1
    2bfe:	09 f0       	breq	.+2      	; 0x2c02 <Lcd_ES_tdisplayNum_xy+0x38>
    2c00:	76 c0       	rjmp	.+236    	; 0x2cee <Lcd_ES_tdisplayNum_xy+0x124>
		Lcd_ES_tsendCmd(Force1stline);
    2c02:	80 e8       	ldi	r24, 0x80	; 128
    2c04:	0e 94 c2 13 	call	0x2784	; 0x2784 <Lcd_ES_tsendCmd>
    2c08:	80 e0       	ldi	r24, 0x00	; 0
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	a0 e8       	ldi	r26, 0x80	; 128
    2c0e:	bf e3       	ldi	r27, 0x3F	; 63
    2c10:	89 8f       	std	Y+25, r24	; 0x19
    2c12:	9a 8f       	std	Y+26, r25	; 0x1a
    2c14:	ab 8f       	std	Y+27, r26	; 0x1b
    2c16:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c18:	69 8d       	ldd	r22, Y+25	; 0x19
    2c1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c20:	20 e0       	ldi	r18, 0x00	; 0
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	4a e7       	ldi	r20, 0x7A	; 122
    2c26:	55 e4       	ldi	r21, 0x45	; 69
    2c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c2c:	dc 01       	movw	r26, r24
    2c2e:	cb 01       	movw	r24, r22
    2c30:	8d 8b       	std	Y+21, r24	; 0x15
    2c32:	9e 8b       	std	Y+22, r25	; 0x16
    2c34:	af 8b       	std	Y+23, r26	; 0x17
    2c36:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c38:	6d 89       	ldd	r22, Y+21	; 0x15
    2c3a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c3c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c3e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c40:	20 e0       	ldi	r18, 0x00	; 0
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	40 e8       	ldi	r20, 0x80	; 128
    2c46:	5f e3       	ldi	r21, 0x3F	; 63
    2c48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c4c:	88 23       	and	r24, r24
    2c4e:	2c f4       	brge	.+10     	; 0x2c5a <Lcd_ES_tdisplayNum_xy+0x90>
		__ticks = 1;
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	9c 8b       	std	Y+20, r25	; 0x14
    2c56:	8b 8b       	std	Y+19, r24	; 0x13
    2c58:	3f c0       	rjmp	.+126    	; 0x2cd8 <Lcd_ES_tdisplayNum_xy+0x10e>
	else if (__tmp > 65535)
    2c5a:	6d 89       	ldd	r22, Y+21	; 0x15
    2c5c:	7e 89       	ldd	r23, Y+22	; 0x16
    2c5e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c60:	98 8d       	ldd	r25, Y+24	; 0x18
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	3f ef       	ldi	r19, 0xFF	; 255
    2c66:	4f e7       	ldi	r20, 0x7F	; 127
    2c68:	57 e4       	ldi	r21, 0x47	; 71
    2c6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c6e:	18 16       	cp	r1, r24
    2c70:	4c f5       	brge	.+82     	; 0x2cc4 <Lcd_ES_tdisplayNum_xy+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c72:	69 8d       	ldd	r22, Y+25	; 0x19
    2c74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	40 e2       	ldi	r20, 0x20	; 32
    2c80:	51 e4       	ldi	r21, 0x41	; 65
    2c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c86:	dc 01       	movw	r26, r24
    2c88:	cb 01       	movw	r24, r22
    2c8a:	bc 01       	movw	r22, r24
    2c8c:	cd 01       	movw	r24, r26
    2c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c92:	dc 01       	movw	r26, r24
    2c94:	cb 01       	movw	r24, r22
    2c96:	9c 8b       	std	Y+20, r25	; 0x14
    2c98:	8b 8b       	std	Y+19, r24	; 0x13
    2c9a:	0f c0       	rjmp	.+30     	; 0x2cba <Lcd_ES_tdisplayNum_xy+0xf0>
    2c9c:	80 e9       	ldi	r24, 0x90	; 144
    2c9e:	91 e0       	ldi	r25, 0x01	; 1
    2ca0:	9a 8b       	std	Y+18, r25	; 0x12
    2ca2:	89 8b       	std	Y+17, r24	; 0x11
    2ca4:	89 89       	ldd	r24, Y+17	; 0x11
    2ca6:	9a 89       	ldd	r25, Y+18	; 0x12
    2ca8:	01 97       	sbiw	r24, 0x01	; 1
    2caa:	f1 f7       	brne	.-4      	; 0x2ca8 <Lcd_ES_tdisplayNum_xy+0xde>
    2cac:	9a 8b       	std	Y+18, r25	; 0x12
    2cae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cb0:	8b 89       	ldd	r24, Y+19	; 0x13
    2cb2:	9c 89       	ldd	r25, Y+20	; 0x14
    2cb4:	01 97       	sbiw	r24, 0x01	; 1
    2cb6:	9c 8b       	std	Y+20, r25	; 0x14
    2cb8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cba:	8b 89       	ldd	r24, Y+19	; 0x13
    2cbc:	9c 89       	ldd	r25, Y+20	; 0x14
    2cbe:	00 97       	sbiw	r24, 0x00	; 0
    2cc0:	69 f7       	brne	.-38     	; 0x2c9c <Lcd_ES_tdisplayNum_xy+0xd2>
    2cc2:	92 c0       	rjmp	.+292    	; 0x2de8 <Lcd_ES_tdisplayNum_xy+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cc4:	6d 89       	ldd	r22, Y+21	; 0x15
    2cc6:	7e 89       	ldd	r23, Y+22	; 0x16
    2cc8:	8f 89       	ldd	r24, Y+23	; 0x17
    2cca:	98 8d       	ldd	r25, Y+24	; 0x18
    2ccc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd0:	dc 01       	movw	r26, r24
    2cd2:	cb 01       	movw	r24, r22
    2cd4:	9c 8b       	std	Y+20, r25	; 0x14
    2cd6:	8b 8b       	std	Y+19, r24	; 0x13
    2cd8:	8b 89       	ldd	r24, Y+19	; 0x13
    2cda:	9c 89       	ldd	r25, Y+20	; 0x14
    2cdc:	98 8b       	std	Y+16, r25	; 0x10
    2cde:	8f 87       	std	Y+15, r24	; 0x0f
    2ce0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ce2:	98 89       	ldd	r25, Y+16	; 0x10
    2ce4:	01 97       	sbiw	r24, 0x01	; 1
    2ce6:	f1 f7       	brne	.-4      	; 0x2ce4 <Lcd_ES_tdisplayNum_xy+0x11a>
    2ce8:	98 8b       	std	Y+16, r25	; 0x10
    2cea:	8f 87       	std	Y+15, r24	; 0x0f
    2cec:	7d c0       	rjmp	.+250    	; 0x2de8 <Lcd_ES_tdisplayNum_xy+0x21e>
		_delay_ms(1);
	}else if(row == 2){
    2cee:	89 a1       	ldd	r24, Y+33	; 0x21
    2cf0:	82 30       	cpi	r24, 0x02	; 2
    2cf2:	09 f0       	breq	.+2      	; 0x2cf6 <Lcd_ES_tdisplayNum_xy+0x12c>
    2cf4:	76 c0       	rjmp	.+236    	; 0x2de2 <Lcd_ES_tdisplayNum_xy+0x218>
		Lcd_ES_tsendCmd(Force2ndline);
    2cf6:	80 ec       	ldi	r24, 0xC0	; 192
    2cf8:	0e 94 c2 13 	call	0x2784	; 0x2784 <Lcd_ES_tsendCmd>
    2cfc:	80 e0       	ldi	r24, 0x00	; 0
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	a0 e2       	ldi	r26, 0x20	; 32
    2d02:	b1 e4       	ldi	r27, 0x41	; 65
    2d04:	8b 87       	std	Y+11, r24	; 0x0b
    2d06:	9c 87       	std	Y+12, r25	; 0x0c
    2d08:	ad 87       	std	Y+13, r26	; 0x0d
    2d0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d10:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d12:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	4a e7       	ldi	r20, 0x7A	; 122
    2d1a:	55 e4       	ldi	r21, 0x45	; 69
    2d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d20:	dc 01       	movw	r26, r24
    2d22:	cb 01       	movw	r24, r22
    2d24:	8f 83       	std	Y+7, r24	; 0x07
    2d26:	98 87       	std	Y+8, r25	; 0x08
    2d28:	a9 87       	std	Y+9, r26	; 0x09
    2d2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d2e:	78 85       	ldd	r23, Y+8	; 0x08
    2d30:	89 85       	ldd	r24, Y+9	; 0x09
    2d32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	40 e8       	ldi	r20, 0x80	; 128
    2d3a:	5f e3       	ldi	r21, 0x3F	; 63
    2d3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d40:	88 23       	and	r24, r24
    2d42:	2c f4       	brge	.+10     	; 0x2d4e <Lcd_ES_tdisplayNum_xy+0x184>
		__ticks = 1;
    2d44:	81 e0       	ldi	r24, 0x01	; 1
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	9e 83       	std	Y+6, r25	; 0x06
    2d4a:	8d 83       	std	Y+5, r24	; 0x05
    2d4c:	3f c0       	rjmp	.+126    	; 0x2dcc <Lcd_ES_tdisplayNum_xy+0x202>
	else if (__tmp > 65535)
    2d4e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d50:	78 85       	ldd	r23, Y+8	; 0x08
    2d52:	89 85       	ldd	r24, Y+9	; 0x09
    2d54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d56:	20 e0       	ldi	r18, 0x00	; 0
    2d58:	3f ef       	ldi	r19, 0xFF	; 255
    2d5a:	4f e7       	ldi	r20, 0x7F	; 127
    2d5c:	57 e4       	ldi	r21, 0x47	; 71
    2d5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d62:	18 16       	cp	r1, r24
    2d64:	4c f5       	brge	.+82     	; 0x2db8 <Lcd_ES_tdisplayNum_xy+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d66:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d68:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	40 e2       	ldi	r20, 0x20	; 32
    2d74:	51 e4       	ldi	r21, 0x41	; 65
    2d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	bc 01       	movw	r22, r24
    2d80:	cd 01       	movw	r24, r26
    2d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	9e 83       	std	Y+6, r25	; 0x06
    2d8c:	8d 83       	std	Y+5, r24	; 0x05
    2d8e:	0f c0       	rjmp	.+30     	; 0x2dae <Lcd_ES_tdisplayNum_xy+0x1e4>
    2d90:	80 e9       	ldi	r24, 0x90	; 144
    2d92:	91 e0       	ldi	r25, 0x01	; 1
    2d94:	9c 83       	std	Y+4, r25	; 0x04
    2d96:	8b 83       	std	Y+3, r24	; 0x03
    2d98:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d9c:	01 97       	sbiw	r24, 0x01	; 1
    2d9e:	f1 f7       	brne	.-4      	; 0x2d9c <Lcd_ES_tdisplayNum_xy+0x1d2>
    2da0:	9c 83       	std	Y+4, r25	; 0x04
    2da2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da4:	8d 81       	ldd	r24, Y+5	; 0x05
    2da6:	9e 81       	ldd	r25, Y+6	; 0x06
    2da8:	01 97       	sbiw	r24, 0x01	; 1
    2daa:	9e 83       	std	Y+6, r25	; 0x06
    2dac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dae:	8d 81       	ldd	r24, Y+5	; 0x05
    2db0:	9e 81       	ldd	r25, Y+6	; 0x06
    2db2:	00 97       	sbiw	r24, 0x00	; 0
    2db4:	69 f7       	brne	.-38     	; 0x2d90 <Lcd_ES_tdisplayNum_xy+0x1c6>
    2db6:	18 c0       	rjmp	.+48     	; 0x2de8 <Lcd_ES_tdisplayNum_xy+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2db8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dba:	78 85       	ldd	r23, Y+8	; 0x08
    2dbc:	89 85       	ldd	r24, Y+9	; 0x09
    2dbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc4:	dc 01       	movw	r26, r24
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	9e 83       	std	Y+6, r25	; 0x06
    2dca:	8d 83       	std	Y+5, r24	; 0x05
    2dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dce:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd0:	9a 83       	std	Y+2, r25	; 0x02
    2dd2:	89 83       	std	Y+1, r24	; 0x01
    2dd4:	89 81       	ldd	r24, Y+1	; 0x01
    2dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd8:	01 97       	sbiw	r24, 0x01	; 1
    2dda:	f1 f7       	brne	.-4      	; 0x2dd8 <Lcd_ES_tdisplayNum_xy+0x20e>
    2ddc:	9a 83       	std	Y+2, r25	; 0x02
    2dde:	89 83       	std	Y+1, r24	; 0x01
    2de0:	03 c0       	rjmp	.+6      	; 0x2de8 <Lcd_ES_tdisplayNum_xy+0x21e>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    2de2:	81 e0       	ldi	r24, 0x01	; 1
    2de4:	8b a3       	std	Y+35, r24	; 0x23
    2de6:	1a c0       	rjmp	.+52     	; 0x2e1c <Lcd_ES_tdisplayNum_xy+0x252>
	}


	for(int j=1;j<=col;j++){
    2de8:	81 e0       	ldi	r24, 0x01	; 1
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	9e 8f       	std	Y+30, r25	; 0x1e
    2dee:	8d 8f       	std	Y+29, r24	; 0x1d
    2df0:	08 c0       	rjmp	.+16     	; 0x2e02 <Lcd_ES_tdisplayNum_xy+0x238>
		Lcd_ES_tsendCmd(ShiftRight);
    2df2:	8c e1       	ldi	r24, 0x1C	; 28
    2df4:	0e 94 c2 13 	call	0x2784	; 0x2784 <Lcd_ES_tsendCmd>
	}else{
		return ES_NOT_OK;
	}


	for(int j=1;j<=col;j++){
    2df8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dfa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dfc:	01 96       	adiw	r24, 0x01	; 1
    2dfe:	9e 8f       	std	Y+30, r25	; 0x1e
    2e00:	8d 8f       	std	Y+29, r24	; 0x1d
    2e02:	8a a1       	ldd	r24, Y+34	; 0x22
    2e04:	28 2f       	mov	r18, r24
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e0a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e0c:	28 17       	cp	r18, r24
    2e0e:	39 07       	cpc	r19, r25
    2e10:	84 f7       	brge	.-32     	; 0x2df2 <Lcd_ES_tdisplayNum_xy+0x228>
		Lcd_ES_tsendCmd(ShiftRight);
	}

	Lcd_ES_tdisplayNum(num);
    2e12:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e14:	98 a1       	ldd	r25, Y+32	; 0x20
    2e16:	0e 94 82 15 	call	0x2b04	; 0x2b04 <Lcd_ES_tdisplayNum>
	return ES_OK;
    2e1a:	1b a2       	std	Y+35, r1	; 0x23
    2e1c:	8b a1       	ldd	r24, Y+35	; 0x23

}
    2e1e:	a3 96       	adiw	r28, 0x23	; 35
    2e20:	0f b6       	in	r0, 0x3f	; 63
    2e22:	f8 94       	cli
    2e24:	de bf       	out	0x3e, r29	; 62
    2e26:	0f be       	out	0x3f, r0	; 63
    2e28:	cd bf       	out	0x3d, r28	; 61
    2e2a:	cf 91       	pop	r28
    2e2c:	df 91       	pop	r29
    2e2e:	08 95       	ret

00002e30 <Lcd_ES_tsendChar_xy>:

ES_t Lcd_ES_tsendChar_xy(u8 data,u8 row,u8 col){
    2e30:	df 93       	push	r29
    2e32:	cf 93       	push	r28
    2e34:	cd b7       	in	r28, 0x3d	; 61
    2e36:	de b7       	in	r29, 0x3e	; 62
    2e38:	a2 97       	sbiw	r28, 0x22	; 34
    2e3a:	0f b6       	in	r0, 0x3f	; 63
    2e3c:	f8 94       	cli
    2e3e:	de bf       	out	0x3e, r29	; 62
    2e40:	0f be       	out	0x3f, r0	; 63
    2e42:	cd bf       	out	0x3d, r28	; 61
    2e44:	8f 8f       	std	Y+31, r24	; 0x1f
    2e46:	68 a3       	std	Y+32, r22	; 0x20
    2e48:	49 a3       	std	Y+33, r20	; 0x21
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2e4a:	81 e0       	ldi	r24, 0x01	; 1
    2e4c:	61 e0       	ldi	r22, 0x01	; 1
    2e4e:	41 e0       	ldi	r20, 0x01	; 1
    2e50:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	60 e0       	ldi	r22, 0x00	; 0
    2e58:	40 e0       	ldi	r20, 0x00	; 0
    2e5a:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>


	if(row == 1){
    2e5e:	88 a1       	ldd	r24, Y+32	; 0x20
    2e60:	81 30       	cpi	r24, 0x01	; 1
    2e62:	09 f0       	breq	.+2      	; 0x2e66 <Lcd_ES_tsendChar_xy+0x36>
    2e64:	76 c0       	rjmp	.+236    	; 0x2f52 <Lcd_ES_tsendChar_xy+0x122>
		Lcd_ES_tsendCmd(Force1stline);
    2e66:	80 e8       	ldi	r24, 0x80	; 128
    2e68:	0e 94 c2 13 	call	0x2784	; 0x2784 <Lcd_ES_tsendCmd>
    2e6c:	80 e0       	ldi	r24, 0x00	; 0
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	a0 e8       	ldi	r26, 0x80	; 128
    2e72:	bf e3       	ldi	r27, 0x3F	; 63
    2e74:	89 8f       	std	Y+25, r24	; 0x19
    2e76:	9a 8f       	std	Y+26, r25	; 0x1a
    2e78:	ab 8f       	std	Y+27, r26	; 0x1b
    2e7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e7c:	69 8d       	ldd	r22, Y+25	; 0x19
    2e7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	4a e7       	ldi	r20, 0x7A	; 122
    2e8a:	55 e4       	ldi	r21, 0x45	; 69
    2e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22
    2e94:	8d 8b       	std	Y+21, r24	; 0x15
    2e96:	9e 8b       	std	Y+22, r25	; 0x16
    2e98:	af 8b       	std	Y+23, r26	; 0x17
    2e9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e9c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e9e:	7e 89       	ldd	r23, Y+22	; 0x16
    2ea0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ea2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ea4:	20 e0       	ldi	r18, 0x00	; 0
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	40 e8       	ldi	r20, 0x80	; 128
    2eaa:	5f e3       	ldi	r21, 0x3F	; 63
    2eac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eb0:	88 23       	and	r24, r24
    2eb2:	2c f4       	brge	.+10     	; 0x2ebe <Lcd_ES_tsendChar_xy+0x8e>
		__ticks = 1;
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	9c 8b       	std	Y+20, r25	; 0x14
    2eba:	8b 8b       	std	Y+19, r24	; 0x13
    2ebc:	3f c0       	rjmp	.+126    	; 0x2f3c <Lcd_ES_tsendChar_xy+0x10c>
	else if (__tmp > 65535)
    2ebe:	6d 89       	ldd	r22, Y+21	; 0x15
    2ec0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ec2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ec4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ec6:	20 e0       	ldi	r18, 0x00	; 0
    2ec8:	3f ef       	ldi	r19, 0xFF	; 255
    2eca:	4f e7       	ldi	r20, 0x7F	; 127
    2ecc:	57 e4       	ldi	r21, 0x47	; 71
    2ece:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ed2:	18 16       	cp	r1, r24
    2ed4:	4c f5       	brge	.+82     	; 0x2f28 <Lcd_ES_tsendChar_xy+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ed8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2eda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2edc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ede:	20 e0       	ldi	r18, 0x00	; 0
    2ee0:	30 e0       	ldi	r19, 0x00	; 0
    2ee2:	40 e2       	ldi	r20, 0x20	; 32
    2ee4:	51 e4       	ldi	r21, 0x41	; 65
    2ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eea:	dc 01       	movw	r26, r24
    2eec:	cb 01       	movw	r24, r22
    2eee:	bc 01       	movw	r22, r24
    2ef0:	cd 01       	movw	r24, r26
    2ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	9c 8b       	std	Y+20, r25	; 0x14
    2efc:	8b 8b       	std	Y+19, r24	; 0x13
    2efe:	0f c0       	rjmp	.+30     	; 0x2f1e <Lcd_ES_tsendChar_xy+0xee>
    2f00:	80 e9       	ldi	r24, 0x90	; 144
    2f02:	91 e0       	ldi	r25, 0x01	; 1
    2f04:	9a 8b       	std	Y+18, r25	; 0x12
    2f06:	89 8b       	std	Y+17, r24	; 0x11
    2f08:	89 89       	ldd	r24, Y+17	; 0x11
    2f0a:	9a 89       	ldd	r25, Y+18	; 0x12
    2f0c:	01 97       	sbiw	r24, 0x01	; 1
    2f0e:	f1 f7       	brne	.-4      	; 0x2f0c <Lcd_ES_tsendChar_xy+0xdc>
    2f10:	9a 8b       	std	Y+18, r25	; 0x12
    2f12:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f14:	8b 89       	ldd	r24, Y+19	; 0x13
    2f16:	9c 89       	ldd	r25, Y+20	; 0x14
    2f18:	01 97       	sbiw	r24, 0x01	; 1
    2f1a:	9c 8b       	std	Y+20, r25	; 0x14
    2f1c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f1e:	8b 89       	ldd	r24, Y+19	; 0x13
    2f20:	9c 89       	ldd	r25, Y+20	; 0x14
    2f22:	00 97       	sbiw	r24, 0x00	; 0
    2f24:	69 f7       	brne	.-38     	; 0x2f00 <Lcd_ES_tsendChar_xy+0xd0>
    2f26:	92 c0       	rjmp	.+292    	; 0x304c <Lcd_ES_tsendChar_xy+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f28:	6d 89       	ldd	r22, Y+21	; 0x15
    2f2a:	7e 89       	ldd	r23, Y+22	; 0x16
    2f2c:	8f 89       	ldd	r24, Y+23	; 0x17
    2f2e:	98 8d       	ldd	r25, Y+24	; 0x18
    2f30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	9c 8b       	std	Y+20, r25	; 0x14
    2f3a:	8b 8b       	std	Y+19, r24	; 0x13
    2f3c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f3e:	9c 89       	ldd	r25, Y+20	; 0x14
    2f40:	98 8b       	std	Y+16, r25	; 0x10
    2f42:	8f 87       	std	Y+15, r24	; 0x0f
    2f44:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f46:	98 89       	ldd	r25, Y+16	; 0x10
    2f48:	01 97       	sbiw	r24, 0x01	; 1
    2f4a:	f1 f7       	brne	.-4      	; 0x2f48 <Lcd_ES_tsendChar_xy+0x118>
    2f4c:	98 8b       	std	Y+16, r25	; 0x10
    2f4e:	8f 87       	std	Y+15, r24	; 0x0f
    2f50:	7d c0       	rjmp	.+250    	; 0x304c <Lcd_ES_tsendChar_xy+0x21c>
		_delay_ms(1);
	}else if(row == 2){
    2f52:	88 a1       	ldd	r24, Y+32	; 0x20
    2f54:	82 30       	cpi	r24, 0x02	; 2
    2f56:	09 f0       	breq	.+2      	; 0x2f5a <Lcd_ES_tsendChar_xy+0x12a>
    2f58:	76 c0       	rjmp	.+236    	; 0x3046 <Lcd_ES_tsendChar_xy+0x216>
		Lcd_ES_tsendCmd(Force2ndline);
    2f5a:	80 ec       	ldi	r24, 0xC0	; 192
    2f5c:	0e 94 c2 13 	call	0x2784	; 0x2784 <Lcd_ES_tsendCmd>
    2f60:	80 e0       	ldi	r24, 0x00	; 0
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	a0 e2       	ldi	r26, 0x20	; 32
    2f66:	b1 e4       	ldi	r27, 0x41	; 65
    2f68:	8b 87       	std	Y+11, r24	; 0x0b
    2f6a:	9c 87       	std	Y+12, r25	; 0x0c
    2f6c:	ad 87       	std	Y+13, r26	; 0x0d
    2f6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f70:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f72:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f74:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f76:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	4a e7       	ldi	r20, 0x7A	; 122
    2f7e:	55 e4       	ldi	r21, 0x45	; 69
    2f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f84:	dc 01       	movw	r26, r24
    2f86:	cb 01       	movw	r24, r22
    2f88:	8f 83       	std	Y+7, r24	; 0x07
    2f8a:	98 87       	std	Y+8, r25	; 0x08
    2f8c:	a9 87       	std	Y+9, r26	; 0x09
    2f8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f90:	6f 81       	ldd	r22, Y+7	; 0x07
    2f92:	78 85       	ldd	r23, Y+8	; 0x08
    2f94:	89 85       	ldd	r24, Y+9	; 0x09
    2f96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	40 e8       	ldi	r20, 0x80	; 128
    2f9e:	5f e3       	ldi	r21, 0x3F	; 63
    2fa0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fa4:	88 23       	and	r24, r24
    2fa6:	2c f4       	brge	.+10     	; 0x2fb2 <Lcd_ES_tsendChar_xy+0x182>
		__ticks = 1;
    2fa8:	81 e0       	ldi	r24, 0x01	; 1
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	9e 83       	std	Y+6, r25	; 0x06
    2fae:	8d 83       	std	Y+5, r24	; 0x05
    2fb0:	3f c0       	rjmp	.+126    	; 0x3030 <Lcd_ES_tsendChar_xy+0x200>
	else if (__tmp > 65535)
    2fb2:	6f 81       	ldd	r22, Y+7	; 0x07
    2fb4:	78 85       	ldd	r23, Y+8	; 0x08
    2fb6:	89 85       	ldd	r24, Y+9	; 0x09
    2fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	3f ef       	ldi	r19, 0xFF	; 255
    2fbe:	4f e7       	ldi	r20, 0x7F	; 127
    2fc0:	57 e4       	ldi	r21, 0x47	; 71
    2fc2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fc6:	18 16       	cp	r1, r24
    2fc8:	4c f5       	brge	.+82     	; 0x301c <Lcd_ES_tsendChar_xy+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	40 e2       	ldi	r20, 0x20	; 32
    2fd8:	51 e4       	ldi	r21, 0x41	; 65
    2fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	bc 01       	movw	r22, r24
    2fe4:	cd 01       	movw	r24, r26
    2fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	9e 83       	std	Y+6, r25	; 0x06
    2ff0:	8d 83       	std	Y+5, r24	; 0x05
    2ff2:	0f c0       	rjmp	.+30     	; 0x3012 <Lcd_ES_tsendChar_xy+0x1e2>
    2ff4:	80 e9       	ldi	r24, 0x90	; 144
    2ff6:	91 e0       	ldi	r25, 0x01	; 1
    2ff8:	9c 83       	std	Y+4, r25	; 0x04
    2ffa:	8b 83       	std	Y+3, r24	; 0x03
    2ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	f1 f7       	brne	.-4      	; 0x3000 <Lcd_ES_tsendChar_xy+0x1d0>
    3004:	9c 83       	std	Y+4, r25	; 0x04
    3006:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3008:	8d 81       	ldd	r24, Y+5	; 0x05
    300a:	9e 81       	ldd	r25, Y+6	; 0x06
    300c:	01 97       	sbiw	r24, 0x01	; 1
    300e:	9e 83       	std	Y+6, r25	; 0x06
    3010:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3012:	8d 81       	ldd	r24, Y+5	; 0x05
    3014:	9e 81       	ldd	r25, Y+6	; 0x06
    3016:	00 97       	sbiw	r24, 0x00	; 0
    3018:	69 f7       	brne	.-38     	; 0x2ff4 <Lcd_ES_tsendChar_xy+0x1c4>
    301a:	18 c0       	rjmp	.+48     	; 0x304c <Lcd_ES_tsendChar_xy+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    301c:	6f 81       	ldd	r22, Y+7	; 0x07
    301e:	78 85       	ldd	r23, Y+8	; 0x08
    3020:	89 85       	ldd	r24, Y+9	; 0x09
    3022:	9a 85       	ldd	r25, Y+10	; 0x0a
    3024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3028:	dc 01       	movw	r26, r24
    302a:	cb 01       	movw	r24, r22
    302c:	9e 83       	std	Y+6, r25	; 0x06
    302e:	8d 83       	std	Y+5, r24	; 0x05
    3030:	8d 81       	ldd	r24, Y+5	; 0x05
    3032:	9e 81       	ldd	r25, Y+6	; 0x06
    3034:	9a 83       	std	Y+2, r25	; 0x02
    3036:	89 83       	std	Y+1, r24	; 0x01
    3038:	89 81       	ldd	r24, Y+1	; 0x01
    303a:	9a 81       	ldd	r25, Y+2	; 0x02
    303c:	01 97       	sbiw	r24, 0x01	; 1
    303e:	f1 f7       	brne	.-4      	; 0x303c <Lcd_ES_tsendChar_xy+0x20c>
    3040:	9a 83       	std	Y+2, r25	; 0x02
    3042:	89 83       	std	Y+1, r24	; 0x01
    3044:	03 c0       	rjmp	.+6      	; 0x304c <Lcd_ES_tsendChar_xy+0x21c>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    3046:	81 e0       	ldi	r24, 0x01	; 1
    3048:	8a a3       	std	Y+34, r24	; 0x22
    304a:	19 c0       	rjmp	.+50     	; 0x307e <Lcd_ES_tsendChar_xy+0x24e>
	}

	for(int j=1;j<=col;j++){
    304c:	81 e0       	ldi	r24, 0x01	; 1
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	9e 8f       	std	Y+30, r25	; 0x1e
    3052:	8d 8f       	std	Y+29, r24	; 0x1d
    3054:	08 c0       	rjmp	.+16     	; 0x3066 <Lcd_ES_tsendChar_xy+0x236>
		Lcd_ES_tsendCmd(ShiftRight);
    3056:	8c e1       	ldi	r24, 0x1C	; 28
    3058:	0e 94 c2 13 	call	0x2784	; 0x2784 <Lcd_ES_tsendCmd>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
	}

	for(int j=1;j<=col;j++){
    305c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    305e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3060:	01 96       	adiw	r24, 0x01	; 1
    3062:	9e 8f       	std	Y+30, r25	; 0x1e
    3064:	8d 8f       	std	Y+29, r24	; 0x1d
    3066:	89 a1       	ldd	r24, Y+33	; 0x21
    3068:	28 2f       	mov	r18, r24
    306a:	30 e0       	ldi	r19, 0x00	; 0
    306c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    306e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3070:	28 17       	cp	r18, r24
    3072:	39 07       	cpc	r19, r25
    3074:	84 f7       	brge	.-32     	; 0x3056 <Lcd_ES_tsendChar_xy+0x226>
		Lcd_ES_tsendCmd(ShiftRight);
	}
	Lcd_ES_tsendChar(data);
    3076:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3078:	0e 94 76 14 	call	0x28ec	; 0x28ec <Lcd_ES_tsendChar>
	return ES_OK;
    307c:	1a a2       	std	Y+34, r1	; 0x22
    307e:	8a a1       	ldd	r24, Y+34	; 0x22
}
    3080:	a2 96       	adiw	r28, 0x22	; 34
    3082:	0f b6       	in	r0, 0x3f	; 63
    3084:	f8 94       	cli
    3086:	de bf       	out	0x3e, r29	; 62
    3088:	0f be       	out	0x3f, r0	; 63
    308a:	cd bf       	out	0x3d, r28	; 61
    308c:	cf 91       	pop	r28
    308e:	df 91       	pop	r29
    3090:	08 95       	ret

00003092 <LCD_ES_tSet_Cursor_Pos>:

static ES_t LCD_ES_tSet_Cursor_Pos(u8 row,u8 column){
    3092:	df 93       	push	r29
    3094:	cf 93       	push	r28
    3096:	00 d0       	rcall	.+0      	; 0x3098 <LCD_ES_tSet_Cursor_Pos+0x6>
    3098:	00 d0       	rcall	.+0      	; 0x309a <LCD_ES_tSet_Cursor_Pos+0x8>
    309a:	0f 92       	push	r0
    309c:	cd b7       	in	r28, 0x3d	; 61
    309e:	de b7       	in	r29, 0x3e	; 62
    30a0:	89 83       	std	Y+1, r24	; 0x01
    30a2:	6a 83       	std	Y+2, r22	; 0x02
	column--;
    30a4:	8a 81       	ldd	r24, Y+2	; 0x02
    30a6:	81 50       	subi	r24, 0x01	; 1
    30a8:	8a 83       	std	Y+2, r24	; 0x02
	switch(row){
    30aa:	89 81       	ldd	r24, Y+1	; 0x01
    30ac:	28 2f       	mov	r18, r24
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	3d 83       	std	Y+5, r19	; 0x05
    30b2:	2c 83       	std	Y+4, r18	; 0x04
    30b4:	8c 81       	ldd	r24, Y+4	; 0x04
    30b6:	9d 81       	ldd	r25, Y+5	; 0x05
    30b8:	81 30       	cpi	r24, 0x01	; 1
    30ba:	91 05       	cpc	r25, r1
    30bc:	31 f0       	breq	.+12     	; 0x30ca <LCD_ES_tSet_Cursor_Pos+0x38>
    30be:	2c 81       	ldd	r18, Y+4	; 0x04
    30c0:	3d 81       	ldd	r19, Y+5	; 0x05
    30c2:	22 30       	cpi	r18, 0x02	; 2
    30c4:	31 05       	cpc	r19, r1
    30c6:	31 f0       	breq	.+12     	; 0x30d4 <LCD_ES_tSet_Cursor_Pos+0x42>
    30c8:	0a c0       	rjmp	.+20     	; 0x30de <LCD_ES_tSet_Cursor_Pos+0x4c>
	         case 1:
	        	 Lcd_ES_tsendCmd((0x80 + column));
    30ca:	8a 81       	ldd	r24, Y+2	; 0x02
    30cc:	80 58       	subi	r24, 0x80	; 128
    30ce:	0e 94 c2 13 	call	0x2784	; 0x2784 <Lcd_ES_tsendCmd>
    30d2:	08 c0       	rjmp	.+16     	; 0x30e4 <LCD_ES_tSet_Cursor_Pos+0x52>
	        	 break;
	         case 2:
	        	 Lcd_ES_tsendCmd((0xc0 + column));
    30d4:	8a 81       	ldd	r24, Y+2	; 0x02
    30d6:	80 54       	subi	r24, 0x40	; 64
    30d8:	0e 94 c2 13 	call	0x2784	; 0x2784 <Lcd_ES_tsendCmd>
    30dc:	03 c0       	rjmp	.+6      	; 0x30e4 <LCD_ES_tSet_Cursor_Pos+0x52>
	        	 break;
	         default:
	        	 return ES_NOT_OK;
    30de:	31 e0       	ldi	r19, 0x01	; 1
    30e0:	3b 83       	std	Y+3, r19	; 0x03
    30e2:	01 c0       	rjmp	.+2      	; 0x30e6 <LCD_ES_tSet_Cursor_Pos+0x54>
	}
	return ES_OK;
    30e4:	1b 82       	std	Y+3, r1	; 0x03
    30e6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    30e8:	0f 90       	pop	r0
    30ea:	0f 90       	pop	r0
    30ec:	0f 90       	pop	r0
    30ee:	0f 90       	pop	r0
    30f0:	0f 90       	pop	r0
    30f2:	cf 91       	pop	r28
    30f4:	df 91       	pop	r29
    30f6:	08 95       	ret

000030f8 <LCD_ES_tGoTo>:

/************************************************************************/
ES_t LCD_ES_tGoTo(u8 Line, u8 x){
    30f8:	df 93       	push	r29
    30fa:	cf 93       	push	r28
    30fc:	00 d0       	rcall	.+0      	; 0x30fe <LCD_ES_tGoTo+0x6>
    30fe:	0f 92       	push	r0
    3100:	cd b7       	in	r28, 0x3d	; 61
    3102:	de b7       	in	r29, 0x3e	; 62
    3104:	89 83       	std	Y+1, r24	; 0x01
    3106:	6a 83       	std	Y+2, r22	; 0x02
	if(0 == Line)
    3108:	89 81       	ldd	r24, Y+1	; 0x01
    310a:	88 23       	and	r24, r24
    310c:	41 f4       	brne	.+16     	; 0x311e <LCD_ES_tGoTo+0x26>
	{
		if ( x <=15)
    310e:	8a 81       	ldd	r24, Y+2	; 0x02
    3110:	80 31       	cpi	r24, 0x10	; 16
    3112:	98 f4       	brcc	.+38     	; 0x313a <LCD_ES_tGoTo+0x42>
		{
			Lcd_ES_tsendCmd(0x80 + x);
    3114:	8a 81       	ldd	r24, Y+2	; 0x02
    3116:	80 58       	subi	r24, 0x80	; 128
    3118:	0e 94 c2 13 	call	0x2784	; 0x2784 <Lcd_ES_tsendCmd>
    311c:	0e c0       	rjmp	.+28     	; 0x313a <LCD_ES_tGoTo+0x42>
		}
	}
	else if (1 == Line)
    311e:	89 81       	ldd	r24, Y+1	; 0x01
    3120:	81 30       	cpi	r24, 0x01	; 1
    3122:	41 f4       	brne	.+16     	; 0x3134 <LCD_ES_tGoTo+0x3c>
	{
		if ( x <=15)
    3124:	8a 81       	ldd	r24, Y+2	; 0x02
    3126:	80 31       	cpi	r24, 0x10	; 16
    3128:	40 f4       	brcc	.+16     	; 0x313a <LCD_ES_tGoTo+0x42>
		{
			Lcd_ES_tsendCmd(0xC0 + x);
    312a:	8a 81       	ldd	r24, Y+2	; 0x02
    312c:	80 54       	subi	r24, 0x40	; 64
    312e:	0e 94 c2 13 	call	0x2784	; 0x2784 <Lcd_ES_tsendCmd>
    3132:	03 c0       	rjmp	.+6      	; 0x313a <LCD_ES_tGoTo+0x42>
		}
	}else{
		return ES_NOT_OK;
    3134:	81 e0       	ldi	r24, 0x01	; 1
    3136:	8b 83       	std	Y+3, r24	; 0x03
    3138:	01 c0       	rjmp	.+2      	; 0x313c <LCD_ES_tGoTo+0x44>
	}
	return ES_OK;
    313a:	1b 82       	std	Y+3, r1	; 0x03
    313c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    313e:	0f 90       	pop	r0
    3140:	0f 90       	pop	r0
    3142:	0f 90       	pop	r0
    3144:	cf 91       	pop	r28
    3146:	df 91       	pop	r29
    3148:	08 95       	ret

0000314a <KPD_ES_tGetKeyPressed>:
// To avoid the unarrangement and uncontiguous
const u8 KPD_Au8RowsPins[4] = {KPD_U8_R1,KPD_U8_R2,KPD_U8_R3,KPD_U8_R4};
const u8 KPD_Au8ColsPins[4] = {KPD_U8_C1,KPD_U8_C2,KPD_U8_C3,KPD_U8_C4};

ES_t KPD_ES_tGetKeyPressed(u8 *copy_pu8ReturnedKey)
{
    314a:	df 93       	push	r29
    314c:	cf 93       	push	r28
    314e:	cd b7       	in	r28, 0x3d	; 61
    3150:	de b7       	in	r29, 0x3e	; 62
    3152:	65 97       	sbiw	r28, 0x15	; 21
    3154:	0f b6       	in	r0, 0x3f	; 63
    3156:	f8 94       	cli
    3158:	de bf       	out	0x3e, r29	; 62
    315a:	0f be       	out	0x3f, r0	; 63
    315c:	cd bf       	out	0x3d, r28	; 61
    315e:	9c 8b       	std	Y+20, r25	; 0x14
    3160:	8b 8b       	std	Y+19, r24	; 0x13
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
    3162:	eb 89       	ldd	r30, Y+19	; 0x13
    3164:	fc 89       	ldd	r31, Y+20	; 0x14
    3166:	8f ef       	ldi	r24, 0xFF	; 255
    3168:	80 83       	st	Z, r24
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
    316a:	1f 86       	std	Y+15, r1	; 0x0f
	if(copy_pu8ReturnedKey != NULL)
    316c:	8b 89       	ldd	r24, Y+19	; 0x13
    316e:	9c 89       	ldd	r25, Y+20	; 0x14
    3170:	00 97       	sbiw	r24, 0x00	; 0
    3172:	09 f4       	brne	.+2      	; 0x3176 <KPD_ES_tGetKeyPressed+0x2c>
    3174:	ed c0       	rjmp	.+474    	; 0x3350 <KPD_ES_tGetKeyPressed+0x206>
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
    3176:	19 8a       	std	Y+17, r1	; 0x11
    3178:	e5 c0       	rjmp	.+458    	; 0x3344 <KPD_ES_tGetKeyPressed+0x1fa>
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
    317a:	89 89       	ldd	r24, Y+17	; 0x11
    317c:	88 2f       	mov	r24, r24
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	fc 01       	movw	r30, r24
    3182:	ef 56       	subi	r30, 0x6F	; 111
    3184:	fe 4f       	sbci	r31, 0xFE	; 254
    3186:	90 81       	ld	r25, Z
    3188:	81 e0       	ldi	r24, 0x01	; 1
    318a:	69 2f       	mov	r22, r25
    318c:	40 e0       	ldi	r20, 0x00	; 0
    318e:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
    3192:	18 8a       	std	Y+16, r1	; 0x10
    3194:	c1 c0       	rjmp	.+386    	; 0x3318 <KPD_ES_tGetKeyPressed+0x1ce>
			{
				DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);
    3196:	88 89       	ldd	r24, Y+16	; 0x10
    3198:	88 2f       	mov	r24, r24
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	fc 01       	movw	r30, r24
    319e:	eb 56       	subi	r30, 0x6B	; 107
    31a0:	fe 4f       	sbci	r31, 0xFE	; 254
    31a2:	90 81       	ld	r25, Z
    31a4:	9e 01       	movw	r18, r28
    31a6:	2e 5e       	subi	r18, 0xEE	; 238
    31a8:	3f 4f       	sbci	r19, 0xFF	; 255
    31aa:	83 e0       	ldi	r24, 0x03	; 3
    31ac:	69 2f       	mov	r22, r25
    31ae:	a9 01       	movw	r20, r18
    31b0:	0e 94 75 0a 	call	0x14ea	; 0x14ea <DIO_ES_tGetPinValue>
				if(Local_u8PinVal == LOW){ /* Switch is pressed */
    31b4:	8a 89       	ldd	r24, Y+18	; 0x12
    31b6:	88 23       	and	r24, r24
    31b8:	09 f0       	breq	.+2      	; 0x31bc <KPD_ES_tGetKeyPressed+0x72>
    31ba:	ab c0       	rjmp	.+342    	; 0x3312 <KPD_ES_tGetKeyPressed+0x1c8>
    31bc:	80 e0       	ldi	r24, 0x00	; 0
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	a0 ea       	ldi	r26, 0xA0	; 160
    31c2:	b1 e4       	ldi	r27, 0x41	; 65
    31c4:	8b 87       	std	Y+11, r24	; 0x0b
    31c6:	9c 87       	std	Y+12, r25	; 0x0c
    31c8:	ad 87       	std	Y+13, r26	; 0x0d
    31ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    31ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    31d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    31d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    31d4:	20 e0       	ldi	r18, 0x00	; 0
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	4a e7       	ldi	r20, 0x7A	; 122
    31da:	55 e4       	ldi	r21, 0x45	; 69
    31dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e0:	dc 01       	movw	r26, r24
    31e2:	cb 01       	movw	r24, r22
    31e4:	8f 83       	std	Y+7, r24	; 0x07
    31e6:	98 87       	std	Y+8, r25	; 0x08
    31e8:	a9 87       	std	Y+9, r26	; 0x09
    31ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31ec:	6f 81       	ldd	r22, Y+7	; 0x07
    31ee:	78 85       	ldd	r23, Y+8	; 0x08
    31f0:	89 85       	ldd	r24, Y+9	; 0x09
    31f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    31f4:	20 e0       	ldi	r18, 0x00	; 0
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	40 e8       	ldi	r20, 0x80	; 128
    31fa:	5f e3       	ldi	r21, 0x3F	; 63
    31fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3200:	88 23       	and	r24, r24
    3202:	2c f4       	brge	.+10     	; 0x320e <KPD_ES_tGetKeyPressed+0xc4>
		__ticks = 1;
    3204:	81 e0       	ldi	r24, 0x01	; 1
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	9e 83       	std	Y+6, r25	; 0x06
    320a:	8d 83       	std	Y+5, r24	; 0x05
    320c:	3f c0       	rjmp	.+126    	; 0x328c <KPD_ES_tGetKeyPressed+0x142>
	else if (__tmp > 65535)
    320e:	6f 81       	ldd	r22, Y+7	; 0x07
    3210:	78 85       	ldd	r23, Y+8	; 0x08
    3212:	89 85       	ldd	r24, Y+9	; 0x09
    3214:	9a 85       	ldd	r25, Y+10	; 0x0a
    3216:	20 e0       	ldi	r18, 0x00	; 0
    3218:	3f ef       	ldi	r19, 0xFF	; 255
    321a:	4f e7       	ldi	r20, 0x7F	; 127
    321c:	57 e4       	ldi	r21, 0x47	; 71
    321e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3222:	18 16       	cp	r1, r24
    3224:	4c f5       	brge	.+82     	; 0x3278 <KPD_ES_tGetKeyPressed+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3226:	6b 85       	ldd	r22, Y+11	; 0x0b
    3228:	7c 85       	ldd	r23, Y+12	; 0x0c
    322a:	8d 85       	ldd	r24, Y+13	; 0x0d
    322c:	9e 85       	ldd	r25, Y+14	; 0x0e
    322e:	20 e0       	ldi	r18, 0x00	; 0
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	40 e2       	ldi	r20, 0x20	; 32
    3234:	51 e4       	ldi	r21, 0x41	; 65
    3236:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    323a:	dc 01       	movw	r26, r24
    323c:	cb 01       	movw	r24, r22
    323e:	bc 01       	movw	r22, r24
    3240:	cd 01       	movw	r24, r26
    3242:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3246:	dc 01       	movw	r26, r24
    3248:	cb 01       	movw	r24, r22
    324a:	9e 83       	std	Y+6, r25	; 0x06
    324c:	8d 83       	std	Y+5, r24	; 0x05
    324e:	0f c0       	rjmp	.+30     	; 0x326e <KPD_ES_tGetKeyPressed+0x124>
    3250:	80 e9       	ldi	r24, 0x90	; 144
    3252:	91 e0       	ldi	r25, 0x01	; 1
    3254:	9c 83       	std	Y+4, r25	; 0x04
    3256:	8b 83       	std	Y+3, r24	; 0x03
    3258:	8b 81       	ldd	r24, Y+3	; 0x03
    325a:	9c 81       	ldd	r25, Y+4	; 0x04
    325c:	01 97       	sbiw	r24, 0x01	; 1
    325e:	f1 f7       	brne	.-4      	; 0x325c <KPD_ES_tGetKeyPressed+0x112>
    3260:	9c 83       	std	Y+4, r25	; 0x04
    3262:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3264:	8d 81       	ldd	r24, Y+5	; 0x05
    3266:	9e 81       	ldd	r25, Y+6	; 0x06
    3268:	01 97       	sbiw	r24, 0x01	; 1
    326a:	9e 83       	std	Y+6, r25	; 0x06
    326c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    326e:	8d 81       	ldd	r24, Y+5	; 0x05
    3270:	9e 81       	ldd	r25, Y+6	; 0x06
    3272:	00 97       	sbiw	r24, 0x00	; 0
    3274:	69 f7       	brne	.-38     	; 0x3250 <KPD_ES_tGetKeyPressed+0x106>
    3276:	14 c0       	rjmp	.+40     	; 0x32a0 <KPD_ES_tGetKeyPressed+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3278:	6f 81       	ldd	r22, Y+7	; 0x07
    327a:	78 85       	ldd	r23, Y+8	; 0x08
    327c:	89 85       	ldd	r24, Y+9	; 0x09
    327e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3280:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3284:	dc 01       	movw	r26, r24
    3286:	cb 01       	movw	r24, r22
    3288:	9e 83       	std	Y+6, r25	; 0x06
    328a:	8d 83       	std	Y+5, r24	; 0x05
    328c:	8d 81       	ldd	r24, Y+5	; 0x05
    328e:	9e 81       	ldd	r25, Y+6	; 0x06
    3290:	9a 83       	std	Y+2, r25	; 0x02
    3292:	89 83       	std	Y+1, r24	; 0x01
    3294:	89 81       	ldd	r24, Y+1	; 0x01
    3296:	9a 81       	ldd	r25, Y+2	; 0x02
    3298:	01 97       	sbiw	r24, 0x01	; 1
    329a:	f1 f7       	brne	.-4      	; 0x3298 <KPD_ES_tGetKeyPressed+0x14e>
    329c:	9a 83       	std	Y+2, r25	; 0x02
    329e:	89 83       	std	Y+1, r24	; 0x01
					/* The switch which reaches between the activated
					 * Column and the pressed key */
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    32a0:	88 89       	ldd	r24, Y+16	; 0x10
    32a2:	88 2f       	mov	r24, r24
    32a4:	90 e0       	ldi	r25, 0x00	; 0
    32a6:	fc 01       	movw	r30, r24
    32a8:	eb 56       	subi	r30, 0x6B	; 107
    32aa:	fe 4f       	sbci	r31, 0xFE	; 254
    32ac:	90 81       	ld	r25, Z
    32ae:	9e 01       	movw	r18, r28
    32b0:	2e 5e       	subi	r18, 0xEE	; 238
    32b2:	3f 4f       	sbci	r19, 0xFF	; 255
    32b4:	83 e0       	ldi	r24, 0x03	; 3
    32b6:	69 2f       	mov	r22, r25
    32b8:	a9 01       	movw	r20, r18
    32ba:	0e 94 75 0a 	call	0x14ea	; 0x14ea <DIO_ES_tGetPinValue>
    32be:	0f c0       	rjmp	.+30     	; 0x32de <KPD_ES_tGetKeyPressed+0x194>
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    32c0:	88 89       	ldd	r24, Y+16	; 0x10
    32c2:	88 2f       	mov	r24, r24
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	fc 01       	movw	r30, r24
    32c8:	eb 56       	subi	r30, 0x6B	; 107
    32ca:	fe 4f       	sbci	r31, 0xFE	; 254
    32cc:	90 81       	ld	r25, Z
    32ce:	9e 01       	movw	r18, r28
    32d0:	2e 5e       	subi	r18, 0xEE	; 238
    32d2:	3f 4f       	sbci	r19, 0xFF	; 255
    32d4:	83 e0       	ldi	r24, 0x03	; 3
    32d6:	69 2f       	mov	r22, r25
    32d8:	a9 01       	movw	r20, r18
    32da:	0e 94 75 0a 	call	0x14ea	; 0x14ea <DIO_ES_tGetPinValue>
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
    32de:	8a 89       	ldd	r24, Y+18	; 0x12
    32e0:	88 23       	and	r24, r24
    32e2:	71 f3       	breq	.-36     	; 0x32c0 <KPD_ES_tGetKeyPressed+0x176>
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					}
					*copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    32e4:	89 89       	ldd	r24, Y+17	; 0x11
    32e6:	48 2f       	mov	r20, r24
    32e8:	50 e0       	ldi	r21, 0x00	; 0
    32ea:	88 89       	ldd	r24, Y+16	; 0x10
    32ec:	28 2f       	mov	r18, r24
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	ca 01       	movw	r24, r20
    32f2:	88 0f       	add	r24, r24
    32f4:	99 1f       	adc	r25, r25
    32f6:	88 0f       	add	r24, r24
    32f8:	99 1f       	adc	r25, r25
    32fa:	82 0f       	add	r24, r18
    32fc:	93 1f       	adc	r25, r19
    32fe:	fc 01       	movw	r30, r24
    3300:	ef 57       	subi	r30, 0x7F	; 127
    3302:	fe 4f       	sbci	r31, 0xFE	; 254
    3304:	80 81       	ld	r24, Z
    3306:	eb 89       	ldd	r30, Y+19	; 0x13
    3308:	fc 89       	ldd	r31, Y+20	; 0x14
    330a:	80 83       	st	Z, r24
					Local_u8Flag = HIGH;
    330c:	81 e0       	ldi	r24, 0x01	; 1
    330e:	8f 87       	std	Y+15, r24	; 0x0f
    3310:	07 c0       	rjmp	.+14     	; 0x3320 <KPD_ES_tGetKeyPressed+0x1d6>
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
    3312:	88 89       	ldd	r24, Y+16	; 0x10
    3314:	8f 5f       	subi	r24, 0xFF	; 255
    3316:	88 8b       	std	Y+16, r24	; 0x10
    3318:	88 89       	ldd	r24, Y+16	; 0x10
    331a:	84 30       	cpi	r24, 0x04	; 4
    331c:	08 f4       	brcc	.+2      	; 0x3320 <KPD_ES_tGetKeyPressed+0x1d6>
    331e:	3b cf       	rjmp	.-394    	; 0x3196 <KPD_ES_tGetKeyPressed+0x4c>
					Local_u8Flag = HIGH;
					break;
				}
			}
			// Deactivate ROW
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],HIGH);
    3320:	89 89       	ldd	r24, Y+17	; 0x11
    3322:	88 2f       	mov	r24, r24
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	fc 01       	movw	r30, r24
    3328:	ef 56       	subi	r30, 0x6F	; 111
    332a:	fe 4f       	sbci	r31, 0xFE	; 254
    332c:	90 81       	ld	r25, Z
    332e:	81 e0       	ldi	r24, 0x01	; 1
    3330:	69 2f       	mov	r22, r25
    3332:	41 e0       	ldi	r20, 0x01	; 1
    3334:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
			if(Local_u8Flag == HIGH)
    3338:	8f 85       	ldd	r24, Y+15	; 0x0f
    333a:	81 30       	cpi	r24, 0x01	; 1
    333c:	39 f0       	breq	.+14     	; 0x334c <KPD_ES_tGetKeyPressed+0x202>
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
	if(copy_pu8ReturnedKey != NULL)
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
    333e:	89 89       	ldd	r24, Y+17	; 0x11
    3340:	8f 5f       	subi	r24, 0xFF	; 255
    3342:	89 8b       	std	Y+17, r24	; 0x11
    3344:	89 89       	ldd	r24, Y+17	; 0x11
    3346:	84 30       	cpi	r24, 0x04	; 4
    3348:	08 f4       	brcc	.+2      	; 0x334c <KPD_ES_tGetKeyPressed+0x202>
    334a:	17 cf       	rjmp	.-466    	; 0x317a <KPD_ES_tGetKeyPressed+0x30>


	}else{
		return ES_NOT_OK;
	}
	return ES_OK;
    334c:	1d 8a       	std	Y+21, r1	; 0x15
    334e:	02 c0       	rjmp	.+4      	; 0x3354 <KPD_ES_tGetKeyPressed+0x20a>
				break;
		}


	}else{
		return ES_NOT_OK;
    3350:	81 e0       	ldi	r24, 0x01	; 1
    3352:	8d 8b       	std	Y+21, r24	; 0x15
    3354:	8d 89       	ldd	r24, Y+21	; 0x15
	}
	return ES_OK;
}
    3356:	65 96       	adiw	r28, 0x15	; 21
    3358:	0f b6       	in	r0, 0x3f	; 63
    335a:	f8 94       	cli
    335c:	de bf       	out	0x3e, r29	; 62
    335e:	0f be       	out	0x3f, r0	; 63
    3360:	cd bf       	out	0x3d, r28	; 61
    3362:	cf 91       	pop	r28
    3364:	df 91       	pop	r29
    3366:	08 95       	ret

00003368 <DC_Motor_Init>:
#include "DC_Motor.h"
#include "DC_MotorCfg.h"


ES_t DC_Motor_Init(DC_MOTOR_Index Motor)
{
    3368:	df 93       	push	r29
    336a:	cf 93       	push	r28
    336c:	00 d0       	rcall	.+0      	; 0x336e <DC_Motor_Init+0x6>
    336e:	cd b7       	in	r28, 0x3d	; 61
    3370:	de b7       	in	r29, 0x3e	; 62
    3372:	89 83       	std	Y+1, r24	; 0x01
	if(Motor == DC_MOTOR_0){
    3374:	89 81       	ldd	r24, Y+1	; 0x01
    3376:	88 23       	and	r24, r24
    3378:	59 f4       	brne	.+22     	; 0x3390 <DC_Motor_Init+0x28>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN1, OUTPUT);
    337a:	82 e0       	ldi	r24, 0x02	; 2
    337c:	61 e0       	ldi	r22, 0x01	; 1
    337e:	41 e0       	ldi	r20, 0x01	; 1
    3380:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN2, OUTPUT);
    3384:	82 e0       	ldi	r24, 0x02	; 2
    3386:	62 e0       	ldi	r22, 0x02	; 2
    3388:	41 e0       	ldi	r20, 0x01	; 1
    338a:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_ES_tSetPinDirection>
    338e:	11 c0       	rjmp	.+34     	; 0x33b2 <DC_Motor_Init+0x4a>
	}else if(Motor == DC_MOTOR_1){
    3390:	89 81       	ldd	r24, Y+1	; 0x01
    3392:	81 30       	cpi	r24, 0x01	; 1
    3394:	59 f4       	brne	.+22     	; 0x33ac <DC_Motor_Init+0x44>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN3, OUTPUT);
    3396:	82 e0       	ldi	r24, 0x02	; 2
    3398:	63 e0       	ldi	r22, 0x03	; 3
    339a:	41 e0       	ldi	r20, 0x01	; 1
    339c:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN4, OUTPUT);
    33a0:	82 e0       	ldi	r24, 0x02	; 2
    33a2:	64 e0       	ldi	r22, 0x04	; 4
    33a4:	41 e0       	ldi	r20, 0x01	; 1
    33a6:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_ES_tSetPinDirection>
    33aa:	03 c0       	rjmp	.+6      	; 0x33b2 <DC_Motor_Init+0x4a>
	}else{
		return ES_NOT_OK;
    33ac:	81 e0       	ldi	r24, 0x01	; 1
    33ae:	8a 83       	std	Y+2, r24	; 0x02
    33b0:	01 c0       	rjmp	.+2      	; 0x33b4 <DC_Motor_Init+0x4c>
	}
	return ES_OK;
    33b2:	1a 82       	std	Y+2, r1	; 0x02
    33b4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    33b6:	0f 90       	pop	r0
    33b8:	0f 90       	pop	r0
    33ba:	cf 91       	pop	r28
    33bc:	df 91       	pop	r29
    33be:	08 95       	ret

000033c0 <DC_Motor_Stop>:


ES_t DC_Motor_Stop(DC_MOTOR_Index Motor)
{
    33c0:	df 93       	push	r29
    33c2:	cf 93       	push	r28
    33c4:	00 d0       	rcall	.+0      	; 0x33c6 <DC_Motor_Stop+0x6>
    33c6:	cd b7       	in	r28, 0x3d	; 61
    33c8:	de b7       	in	r29, 0x3e	; 62
    33ca:	89 83       	std	Y+1, r24	; 0x01
	if(Motor == DC_MOTOR_0){
    33cc:	89 81       	ldd	r24, Y+1	; 0x01
    33ce:	88 23       	and	r24, r24
    33d0:	59 f4       	brne	.+22     	; 0x33e8 <DC_Motor_Stop+0x28>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN1, LOW);
    33d2:	82 e0       	ldi	r24, 0x02	; 2
    33d4:	61 e0       	ldi	r22, 0x01	; 1
    33d6:	40 e0       	ldi	r20, 0x00	; 0
    33d8:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN2, LOW);
    33dc:	82 e0       	ldi	r24, 0x02	; 2
    33de:	62 e0       	ldi	r22, 0x02	; 2
    33e0:	40 e0       	ldi	r20, 0x00	; 0
    33e2:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    33e6:	11 c0       	rjmp	.+34     	; 0x340a <DC_Motor_Stop+0x4a>
	}else if(Motor == DC_MOTOR_1){
    33e8:	89 81       	ldd	r24, Y+1	; 0x01
    33ea:	81 30       	cpi	r24, 0x01	; 1
    33ec:	59 f4       	brne	.+22     	; 0x3404 <DC_Motor_Stop+0x44>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN3, LOW);
    33ee:	82 e0       	ldi	r24, 0x02	; 2
    33f0:	63 e0       	ldi	r22, 0x03	; 3
    33f2:	40 e0       	ldi	r20, 0x00	; 0
    33f4:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN4, LOW);
    33f8:	82 e0       	ldi	r24, 0x02	; 2
    33fa:	64 e0       	ldi	r22, 0x04	; 4
    33fc:	40 e0       	ldi	r20, 0x00	; 0
    33fe:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    3402:	03 c0       	rjmp	.+6      	; 0x340a <DC_Motor_Stop+0x4a>
	}else{
		return ES_NOT_OK;
    3404:	81 e0       	ldi	r24, 0x01	; 1
    3406:	8a 83       	std	Y+2, r24	; 0x02
    3408:	01 c0       	rjmp	.+2      	; 0x340c <DC_Motor_Stop+0x4c>
	}
	return ES_OK;
    340a:	1a 82       	std	Y+2, r1	; 0x02
    340c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    340e:	0f 90       	pop	r0
    3410:	0f 90       	pop	r0
    3412:	cf 91       	pop	r28
    3414:	df 91       	pop	r29
    3416:	08 95       	ret

00003418 <DC_Motor_Move>:


ES_t DC_Motor_Move(DC_MOTOR_Index Motor,DC_MOTOR_Cfg MotorCfg)
{
    3418:	df 93       	push	r29
    341a:	cf 93       	push	r28
    341c:	00 d0       	rcall	.+0      	; 0x341e <DC_Motor_Move+0x6>
    341e:	00 d0       	rcall	.+0      	; 0x3420 <DC_Motor_Move+0x8>
    3420:	0f 92       	push	r0
    3422:	cd b7       	in	r28, 0x3d	; 61
    3424:	de b7       	in	r29, 0x3e	; 62
    3426:	89 83       	std	Y+1, r24	; 0x01
    3428:	6a 83       	std	Y+2, r22	; 0x02
	switch(MotorCfg){
    342a:	8a 81       	ldd	r24, Y+2	; 0x02
    342c:	28 2f       	mov	r18, r24
    342e:	30 e0       	ldi	r19, 0x00	; 0
    3430:	3d 83       	std	Y+5, r19	; 0x05
    3432:	2c 83       	std	Y+4, r18	; 0x04
    3434:	8c 81       	ldd	r24, Y+4	; 0x04
    3436:	9d 81       	ldd	r25, Y+5	; 0x05
    3438:	00 97       	sbiw	r24, 0x00	; 0
    343a:	31 f0       	breq	.+12     	; 0x3448 <DC_Motor_Move+0x30>
    343c:	2c 81       	ldd	r18, Y+4	; 0x04
    343e:	3d 81       	ldd	r19, Y+5	; 0x05
    3440:	21 30       	cpi	r18, 0x01	; 1
    3442:	31 05       	cpc	r19, r1
    3444:	e9 f0       	breq	.+58     	; 0x3480 <DC_Motor_Move+0x68>
    3446:	38 c0       	rjmp	.+112    	; 0x34b8 <DC_Motor_Move+0xa0>
	case DC_MOTOR_CW:
		if(Motor == DC_MOTOR_0){
    3448:	89 81       	ldd	r24, Y+1	; 0x01
    344a:	88 23       	and	r24, r24
    344c:	59 f4       	brne	.+22     	; 0x3464 <DC_Motor_Move+0x4c>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN1, HIGH);
    344e:	82 e0       	ldi	r24, 0x02	; 2
    3450:	61 e0       	ldi	r22, 0x01	; 1
    3452:	41 e0       	ldi	r20, 0x01	; 1
    3454:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN2, LOW);
    3458:	82 e0       	ldi	r24, 0x02	; 2
    345a:	62 e0       	ldi	r22, 0x02	; 2
    345c:	40 e0       	ldi	r20, 0x00	; 0
    345e:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    3462:	2d c0       	rjmp	.+90     	; 0x34be <DC_Motor_Move+0xa6>
		}else if(Motor == DC_MOTOR_1){
    3464:	89 81       	ldd	r24, Y+1	; 0x01
    3466:	81 30       	cpi	r24, 0x01	; 1
    3468:	51 f5       	brne	.+84     	; 0x34be <DC_Motor_Move+0xa6>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN3, HIGH);
    346a:	82 e0       	ldi	r24, 0x02	; 2
    346c:	63 e0       	ldi	r22, 0x03	; 3
    346e:	41 e0       	ldi	r20, 0x01	; 1
    3470:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN4, LOW);
    3474:	82 e0       	ldi	r24, 0x02	; 2
    3476:	64 e0       	ldi	r22, 0x04	; 4
    3478:	40 e0       	ldi	r20, 0x00	; 0
    347a:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    347e:	1f c0       	rjmp	.+62     	; 0x34be <DC_Motor_Move+0xa6>
		}
		break;
	case DC_MOTOR_CCW:
		if(Motor == DC_MOTOR_0){
    3480:	89 81       	ldd	r24, Y+1	; 0x01
    3482:	88 23       	and	r24, r24
    3484:	59 f4       	brne	.+22     	; 0x349c <DC_Motor_Move+0x84>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN1, LOW);
    3486:	82 e0       	ldi	r24, 0x02	; 2
    3488:	61 e0       	ldi	r22, 0x01	; 1
    348a:	40 e0       	ldi	r20, 0x00	; 0
    348c:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN2, HIGH);
    3490:	82 e0       	ldi	r24, 0x02	; 2
    3492:	62 e0       	ldi	r22, 0x02	; 2
    3494:	41 e0       	ldi	r20, 0x01	; 1
    3496:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    349a:	11 c0       	rjmp	.+34     	; 0x34be <DC_Motor_Move+0xa6>
		}else if(Motor == DC_MOTOR_1){
    349c:	89 81       	ldd	r24, Y+1	; 0x01
    349e:	81 30       	cpi	r24, 0x01	; 1
    34a0:	71 f4       	brne	.+28     	; 0x34be <DC_Motor_Move+0xa6>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN3, LOW);
    34a2:	82 e0       	ldi	r24, 0x02	; 2
    34a4:	63 e0       	ldi	r22, 0x03	; 3
    34a6:	40 e0       	ldi	r20, 0x00	; 0
    34a8:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN4, HIGH);
    34ac:	82 e0       	ldi	r24, 0x02	; 2
    34ae:	64 e0       	ldi	r22, 0x04	; 4
    34b0:	41 e0       	ldi	r20, 0x01	; 1
    34b2:	0e 94 86 09 	call	0x130c	; 0x130c <DIO_ES_tSetPinValue>
    34b6:	03 c0       	rjmp	.+6      	; 0x34be <DC_Motor_Move+0xa6>
		}
		break;
	default:
		return ES_NOT_OK;
    34b8:	31 e0       	ldi	r19, 0x01	; 1
    34ba:	3b 83       	std	Y+3, r19	; 0x03
    34bc:	01 c0       	rjmp	.+2      	; 0x34c0 <DC_Motor_Move+0xa8>
	}
	return ES_OK;
    34be:	1b 82       	std	Y+3, r1	; 0x03
    34c0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    34c2:	0f 90       	pop	r0
    34c4:	0f 90       	pop	r0
    34c6:	0f 90       	pop	r0
    34c8:	0f 90       	pop	r0
    34ca:	0f 90       	pop	r0
    34cc:	cf 91       	pop	r28
    34ce:	df 91       	pop	r29
    34d0:	08 95       	ret

000034d2 <Enter_IRQ_CallBack>:
u8 gettingMotorOption=0,gettingMovingOption=0,gettingStepperOption=0;

State currentState;

void Enter_IRQ_CallBack(void)
{
    34d2:	df 93       	push	r29
    34d4:	cf 93       	push	r28
    34d6:	cd b7       	in	r28, 0x3d	; 61
    34d8:	de b7       	in	r29, 0x3e	; 62
	currentState = STATE_MAIN_SCREEN;
    34da:	81 e0       	ldi	r24, 0x01	; 1
    34dc:	80 93 b2 01 	sts	0x01B2, r24
}
    34e0:	cf 91       	pop	r28
    34e2:	df 91       	pop	r29
    34e4:	08 95       	ret

000034e6 <main>:

int main()
{
    34e6:	0f 93       	push	r16
    34e8:	1f 93       	push	r17
    34ea:	df 93       	push	r29
    34ec:	cf 93       	push	r28
    34ee:	cd b7       	in	r28, 0x3d	; 61
    34f0:	de b7       	in	r29, 0x3e	; 62
    34f2:	c8 57       	subi	r28, 0x78	; 120
    34f4:	d0 40       	sbci	r29, 0x00	; 0
    34f6:	0f b6       	in	r0, 0x3f	; 63
    34f8:	f8 94       	cli
    34fa:	de bf       	out	0x3e, r29	; 62
    34fc:	0f be       	out	0x3f, r0	; 63
    34fe:	cd bf       	out	0x3d, r28	; 61
	DIO_ES_tInit();
    3500:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_ES_tInit>
	Lcd_ES_tInit();
    3504:	0e 94 22 13 	call	0x2644	; 0x2644 <Lcd_ES_tInit>
	Stepper_Init();
    3508:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <Stepper_Init>
	sei();
    350c:	78 94       	sei

	DC_Motor_Init(DC_MOTOR_0);
    350e:	80 e0       	ldi	r24, 0x00	; 0
    3510:	0e 94 b4 19 	call	0x3368	; 0x3368 <DC_Motor_Init>

	u8 Value;
	char Option,Option2,Option3;
	u8 count=0;
    3514:	fe 01       	movw	r30, r28
    3516:	ee 58       	subi	r30, 0x8E	; 142
    3518:	ff 4f       	sbci	r31, 0xFF	; 255
    351a:	10 82       	st	Z, r1
	u8 stepperAngle=0;
    351c:	fe 01       	movw	r30, r28
    351e:	ef 58       	subi	r30, 0x8F	; 143
    3520:	ff 4f       	sbci	r31, 0xFF	; 255
    3522:	10 82       	st	Z, r1

	EXI_TriggerEdge(EX_INT2,RISING_EDGE);
    3524:	82 e0       	ldi	r24, 0x02	; 2
    3526:	63 e0       	ldi	r22, 0x03	; 3
    3528:	0e 94 f6 06 	call	0xdec	; 0xdec <EXI_TriggerEdge>
	EXI_ENABLE(EX_INT2);
    352c:	82 e0       	ldi	r24, 0x02	; 2
    352e:	0e 94 88 06 	call	0xd10	; 0xd10 <EXI_ENABLE>
	EXI_Set_CallBack(EX_INT2,Enter_IRQ_CallBack);
    3532:	29 e6       	ldi	r18, 0x69	; 105
    3534:	3a e1       	ldi	r19, 0x1A	; 26
    3536:	82 e0       	ldi	r24, 0x02	; 2
    3538:	b9 01       	movw	r22, r18
    353a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <EXI_Set_CallBack>


	currentState = STATE_NULL_STATE;
    353e:	10 92 b2 01 	sts	0x01B2, r1


	Lcd_ES_tsendString("Enter Password !");
    3542:	80 e6       	ldi	r24, 0x60	; 96
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <Lcd_ES_tsendString>
	LCD_ES_tGoTo(1, 5);
    354a:	81 e0       	ldi	r24, 0x01	; 1
    354c:	65 e0       	ldi	r22, 0x05	; 5
    354e:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <LCD_ES_tGoTo>

	while(1)
	{
		switch(currentState)
    3552:	80 91 b2 01 	lds	r24, 0x01B2
    3556:	28 2f       	mov	r18, r24
    3558:	30 e0       	ldi	r19, 0x00	; 0
    355a:	e9 96       	adiw	r28, 0x39	; 57
    355c:	3f af       	std	Y+63, r19	; 0x3f
    355e:	2e af       	std	Y+62, r18	; 0x3e
    3560:	e9 97       	sbiw	r28, 0x39	; 57
    3562:	e9 96       	adiw	r28, 0x39	; 57
    3564:	4e ad       	ldd	r20, Y+62	; 0x3e
    3566:	5f ad       	ldd	r21, Y+63	; 0x3f
    3568:	e9 97       	sbiw	r28, 0x39	; 57
    356a:	42 30       	cpi	r20, 0x02	; 2
    356c:	51 05       	cpc	r21, r1
    356e:	09 f4       	brne	.+2      	; 0x3572 <main+0x8c>
    3570:	c7 c2       	rjmp	.+1422   	; 0x3b00 <main+0x61a>
    3572:	e9 96       	adiw	r28, 0x39	; 57
    3574:	8e ad       	ldd	r24, Y+62	; 0x3e
    3576:	9f ad       	ldd	r25, Y+63	; 0x3f
    3578:	e9 97       	sbiw	r28, 0x39	; 57
    357a:	83 30       	cpi	r24, 0x03	; 3
    357c:	91 05       	cpc	r25, r1
    357e:	7c f4       	brge	.+30     	; 0x359e <main+0xb8>
    3580:	e9 96       	adiw	r28, 0x39	; 57
    3582:	ee ad       	ldd	r30, Y+62	; 0x3e
    3584:	ff ad       	ldd	r31, Y+63	; 0x3f
    3586:	e9 97       	sbiw	r28, 0x39	; 57
    3588:	30 97       	sbiw	r30, 0x00	; 0
    358a:	11 f1       	breq	.+68     	; 0x35d0 <main+0xea>
    358c:	e9 96       	adiw	r28, 0x39	; 57
    358e:	2e ad       	ldd	r18, Y+62	; 0x3e
    3590:	3f ad       	ldd	r19, Y+63	; 0x3f
    3592:	e9 97       	sbiw	r28, 0x39	; 57
    3594:	21 30       	cpi	r18, 0x01	; 1
    3596:	31 05       	cpc	r19, r1
    3598:	09 f4       	brne	.+2      	; 0x359c <main+0xb6>
    359a:	d3 c0       	rjmp	.+422    	; 0x3742 <main+0x25c>
    359c:	da cf       	rjmp	.-76     	; 0x3552 <main+0x6c>
    359e:	e9 96       	adiw	r28, 0x39	; 57
    35a0:	4e ad       	ldd	r20, Y+62	; 0x3e
    35a2:	5f ad       	ldd	r21, Y+63	; 0x3f
    35a4:	e9 97       	sbiw	r28, 0x39	; 57
    35a6:	44 30       	cpi	r20, 0x04	; 4
    35a8:	51 05       	cpc	r21, r1
    35aa:	09 f4       	brne	.+2      	; 0x35ae <main+0xc8>
    35ac:	1c c5       	rjmp	.+2616   	; 0x3fe6 <main+0xb00>
    35ae:	e9 96       	adiw	r28, 0x39	; 57
    35b0:	8e ad       	ldd	r24, Y+62	; 0x3e
    35b2:	9f ad       	ldd	r25, Y+63	; 0x3f
    35b4:	e9 97       	sbiw	r28, 0x39	; 57
    35b6:	84 30       	cpi	r24, 0x04	; 4
    35b8:	91 05       	cpc	r25, r1
    35ba:	0c f4       	brge	.+2      	; 0x35be <main+0xd8>
    35bc:	69 c3       	rjmp	.+1746   	; 0x3c90 <main+0x7aa>
    35be:	e9 96       	adiw	r28, 0x39	; 57
    35c0:	ee ad       	ldd	r30, Y+62	; 0x3e
    35c2:	ff ad       	ldd	r31, Y+63	; 0x3f
    35c4:	e9 97       	sbiw	r28, 0x39	; 57
    35c6:	e5 30       	cpi	r30, 0x05	; 5
    35c8:	f1 05       	cpc	r31, r1
    35ca:	09 f4       	brne	.+2      	; 0x35ce <main+0xe8>
    35cc:	86 c5       	rjmp	.+2828   	; 0x40da <main+0xbf4>
    35ce:	c1 cf       	rjmp	.-126    	; 0x3552 <main+0x6c>
		{
		case STATE_NULL_STATE:
			DIO_ES_tTOGPin(DIO_U8_PORT_D, DIO_U8_PIN_7);
    35d0:	83 e0       	ldi	r24, 0x03	; 3
    35d2:	67 e0       	ldi	r22, 0x07	; 7
    35d4:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DIO_ES_tTOGPin>
    35d8:	fe 01       	movw	r30, r28
    35da:	e3 59       	subi	r30, 0x93	; 147
    35dc:	ff 4f       	sbci	r31, 0xFF	; 255
    35de:	80 e0       	ldi	r24, 0x00	; 0
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	aa ef       	ldi	r26, 0xFA	; 250
    35e4:	b3 e4       	ldi	r27, 0x43	; 67
    35e6:	80 83       	st	Z, r24
    35e8:	91 83       	std	Z+1, r25	; 0x01
    35ea:	a2 83       	std	Z+2, r26	; 0x02
    35ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35ee:	8e 01       	movw	r16, r28
    35f0:	07 59       	subi	r16, 0x97	; 151
    35f2:	1f 4f       	sbci	r17, 0xFF	; 255
    35f4:	fe 01       	movw	r30, r28
    35f6:	e3 59       	subi	r30, 0x93	; 147
    35f8:	ff 4f       	sbci	r31, 0xFF	; 255
    35fa:	60 81       	ld	r22, Z
    35fc:	71 81       	ldd	r23, Z+1	; 0x01
    35fe:	82 81       	ldd	r24, Z+2	; 0x02
    3600:	93 81       	ldd	r25, Z+3	; 0x03
    3602:	20 e0       	ldi	r18, 0x00	; 0
    3604:	30 e0       	ldi	r19, 0x00	; 0
    3606:	4a e7       	ldi	r20, 0x7A	; 122
    3608:	55 e4       	ldi	r21, 0x45	; 69
    360a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    360e:	dc 01       	movw	r26, r24
    3610:	cb 01       	movw	r24, r22
    3612:	f8 01       	movw	r30, r16
    3614:	80 83       	st	Z, r24
    3616:	91 83       	std	Z+1, r25	; 0x01
    3618:	a2 83       	std	Z+2, r26	; 0x02
    361a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    361c:	fe 01       	movw	r30, r28
    361e:	e7 59       	subi	r30, 0x97	; 151
    3620:	ff 4f       	sbci	r31, 0xFF	; 255
    3622:	60 81       	ld	r22, Z
    3624:	71 81       	ldd	r23, Z+1	; 0x01
    3626:	82 81       	ldd	r24, Z+2	; 0x02
    3628:	93 81       	ldd	r25, Z+3	; 0x03
    362a:	20 e0       	ldi	r18, 0x00	; 0
    362c:	30 e0       	ldi	r19, 0x00	; 0
    362e:	40 e8       	ldi	r20, 0x80	; 128
    3630:	5f e3       	ldi	r21, 0x3F	; 63
    3632:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3636:	88 23       	and	r24, r24
    3638:	44 f4       	brge	.+16     	; 0x364a <main+0x164>
		__ticks = 1;
    363a:	fe 01       	movw	r30, r28
    363c:	e9 59       	subi	r30, 0x99	; 153
    363e:	ff 4f       	sbci	r31, 0xFF	; 255
    3640:	81 e0       	ldi	r24, 0x01	; 1
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	91 83       	std	Z+1, r25	; 0x01
    3646:	80 83       	st	Z, r24
    3648:	64 c0       	rjmp	.+200    	; 0x3712 <main+0x22c>
	else if (__tmp > 65535)
    364a:	fe 01       	movw	r30, r28
    364c:	e7 59       	subi	r30, 0x97	; 151
    364e:	ff 4f       	sbci	r31, 0xFF	; 255
    3650:	60 81       	ld	r22, Z
    3652:	71 81       	ldd	r23, Z+1	; 0x01
    3654:	82 81       	ldd	r24, Z+2	; 0x02
    3656:	93 81       	ldd	r25, Z+3	; 0x03
    3658:	20 e0       	ldi	r18, 0x00	; 0
    365a:	3f ef       	ldi	r19, 0xFF	; 255
    365c:	4f e7       	ldi	r20, 0x7F	; 127
    365e:	57 e4       	ldi	r21, 0x47	; 71
    3660:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3664:	18 16       	cp	r1, r24
    3666:	0c f0       	brlt	.+2      	; 0x366a <main+0x184>
    3668:	43 c0       	rjmp	.+134    	; 0x36f0 <main+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    366a:	fe 01       	movw	r30, r28
    366c:	e3 59       	subi	r30, 0x93	; 147
    366e:	ff 4f       	sbci	r31, 0xFF	; 255
    3670:	60 81       	ld	r22, Z
    3672:	71 81       	ldd	r23, Z+1	; 0x01
    3674:	82 81       	ldd	r24, Z+2	; 0x02
    3676:	93 81       	ldd	r25, Z+3	; 0x03
    3678:	20 e0       	ldi	r18, 0x00	; 0
    367a:	30 e0       	ldi	r19, 0x00	; 0
    367c:	40 e2       	ldi	r20, 0x20	; 32
    367e:	51 e4       	ldi	r21, 0x41	; 65
    3680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3684:	dc 01       	movw	r26, r24
    3686:	cb 01       	movw	r24, r22
    3688:	8e 01       	movw	r16, r28
    368a:	09 59       	subi	r16, 0x99	; 153
    368c:	1f 4f       	sbci	r17, 0xFF	; 255
    368e:	bc 01       	movw	r22, r24
    3690:	cd 01       	movw	r24, r26
    3692:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3696:	dc 01       	movw	r26, r24
    3698:	cb 01       	movw	r24, r22
    369a:	f8 01       	movw	r30, r16
    369c:	91 83       	std	Z+1, r25	; 0x01
    369e:	80 83       	st	Z, r24
    36a0:	1f c0       	rjmp	.+62     	; 0x36e0 <main+0x1fa>
    36a2:	fe 01       	movw	r30, r28
    36a4:	eb 59       	subi	r30, 0x9B	; 155
    36a6:	ff 4f       	sbci	r31, 0xFF	; 255
    36a8:	80 e9       	ldi	r24, 0x90	; 144
    36aa:	91 e0       	ldi	r25, 0x01	; 1
    36ac:	91 83       	std	Z+1, r25	; 0x01
    36ae:	80 83       	st	Z, r24
    36b0:	fe 01       	movw	r30, r28
    36b2:	eb 59       	subi	r30, 0x9B	; 155
    36b4:	ff 4f       	sbci	r31, 0xFF	; 255
    36b6:	80 81       	ld	r24, Z
    36b8:	91 81       	ldd	r25, Z+1	; 0x01
    36ba:	01 97       	sbiw	r24, 0x01	; 1
    36bc:	f1 f7       	brne	.-4      	; 0x36ba <main+0x1d4>
    36be:	fe 01       	movw	r30, r28
    36c0:	eb 59       	subi	r30, 0x9B	; 155
    36c2:	ff 4f       	sbci	r31, 0xFF	; 255
    36c4:	91 83       	std	Z+1, r25	; 0x01
    36c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36c8:	de 01       	movw	r26, r28
    36ca:	a9 59       	subi	r26, 0x99	; 153
    36cc:	bf 4f       	sbci	r27, 0xFF	; 255
    36ce:	fe 01       	movw	r30, r28
    36d0:	e9 59       	subi	r30, 0x99	; 153
    36d2:	ff 4f       	sbci	r31, 0xFF	; 255
    36d4:	80 81       	ld	r24, Z
    36d6:	91 81       	ldd	r25, Z+1	; 0x01
    36d8:	01 97       	sbiw	r24, 0x01	; 1
    36da:	11 96       	adiw	r26, 0x01	; 1
    36dc:	9c 93       	st	X, r25
    36de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36e0:	fe 01       	movw	r30, r28
    36e2:	e9 59       	subi	r30, 0x99	; 153
    36e4:	ff 4f       	sbci	r31, 0xFF	; 255
    36e6:	80 81       	ld	r24, Z
    36e8:	91 81       	ldd	r25, Z+1	; 0x01
    36ea:	00 97       	sbiw	r24, 0x00	; 0
    36ec:	d1 f6       	brne	.-76     	; 0x36a2 <main+0x1bc>
    36ee:	31 cf       	rjmp	.-414    	; 0x3552 <main+0x6c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36f0:	8e 01       	movw	r16, r28
    36f2:	09 59       	subi	r16, 0x99	; 153
    36f4:	1f 4f       	sbci	r17, 0xFF	; 255
    36f6:	fe 01       	movw	r30, r28
    36f8:	e7 59       	subi	r30, 0x97	; 151
    36fa:	ff 4f       	sbci	r31, 0xFF	; 255
    36fc:	60 81       	ld	r22, Z
    36fe:	71 81       	ldd	r23, Z+1	; 0x01
    3700:	82 81       	ldd	r24, Z+2	; 0x02
    3702:	93 81       	ldd	r25, Z+3	; 0x03
    3704:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3708:	dc 01       	movw	r26, r24
    370a:	cb 01       	movw	r24, r22
    370c:	f8 01       	movw	r30, r16
    370e:	91 83       	std	Z+1, r25	; 0x01
    3710:	80 83       	st	Z, r24
    3712:	de 01       	movw	r26, r28
    3714:	ad 59       	subi	r26, 0x9D	; 157
    3716:	bf 4f       	sbci	r27, 0xFF	; 255
    3718:	fe 01       	movw	r30, r28
    371a:	e9 59       	subi	r30, 0x99	; 153
    371c:	ff 4f       	sbci	r31, 0xFF	; 255
    371e:	80 81       	ld	r24, Z
    3720:	91 81       	ldd	r25, Z+1	; 0x01
    3722:	11 96       	adiw	r26, 0x01	; 1
    3724:	9c 93       	st	X, r25
    3726:	8e 93       	st	-X, r24
    3728:	fe 01       	movw	r30, r28
    372a:	ed 59       	subi	r30, 0x9D	; 157
    372c:	ff 4f       	sbci	r31, 0xFF	; 255
    372e:	80 81       	ld	r24, Z
    3730:	91 81       	ldd	r25, Z+1	; 0x01
    3732:	01 97       	sbiw	r24, 0x01	; 1
    3734:	f1 f7       	brne	.-4      	; 0x3732 <main+0x24c>
    3736:	fe 01       	movw	r30, r28
    3738:	ed 59       	subi	r30, 0x9D	; 157
    373a:	ff 4f       	sbci	r31, 0xFF	; 255
    373c:	91 83       	std	Z+1, r25	; 0x01
    373e:	80 83       	st	Z, r24
    3740:	08 cf       	rjmp	.-496    	; 0x3552 <main+0x6c>
			_delay_ms(500);
			break;


		case STATE_MAIN_SCREEN:
			KPD_ES_tGetKeyPressed(&Value);
    3742:	ce 01       	movw	r24, r28
    3744:	8d 58       	subi	r24, 0x8D	; 141
    3746:	9f 4f       	sbci	r25, 0xFF	; 255
    3748:	0e 94 a5 18 	call	0x314a	; 0x314a <KPD_ES_tGetKeyPressed>
			if(Value != KPD_U8_NOT_PRESSED){
    374c:	fe 01       	movw	r30, r28
    374e:	ed 58       	subi	r30, 0x8D	; 141
    3750:	ff 4f       	sbci	r31, 0xFF	; 255
    3752:	80 81       	ld	r24, Z
    3754:	8f 3f       	cpi	r24, 0xFF	; 255
    3756:	09 f4       	brne	.+2      	; 0x375a <main+0x274>
    3758:	fc ce       	rjmp	.-520    	; 0x3552 <main+0x6c>

				Lcd_ES_tsendChar('*');
    375a:	8a e2       	ldi	r24, 0x2A	; 42
    375c:	0e 94 76 14 	call	0x28ec	; 0x28ec <Lcd_ES_tsendChar>
				input[indexz] = Value; // Store input in array
    3760:	80 91 a8 01 	lds	r24, 0x01A8
    3764:	88 2f       	mov	r24, r24
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	fe 01       	movw	r30, r28
    376a:	ed 58       	subi	r30, 0x8D	; 141
    376c:	ff 4f       	sbci	r31, 0xFF	; 255
    376e:	20 81       	ld	r18, Z
    3770:	fc 01       	movw	r30, r24
    3772:	ed 55       	subi	r30, 0x5D	; 93
    3774:	fe 4f       	sbci	r31, 0xFE	; 254
    3776:	20 83       	st	Z, r18
				indexz++;
    3778:	80 91 a8 01 	lds	r24, 0x01A8
    377c:	8f 5f       	subi	r24, 0xFF	; 255
    377e:	80 93 a8 01 	sts	0x01A8, r24
				if (indexz >= 4) { // Check if password entered
    3782:	80 91 a8 01 	lds	r24, 0x01A8
    3786:	84 30       	cpi	r24, 0x04	; 4
    3788:	08 f4       	brcc	.+2      	; 0x378c <main+0x2a6>
    378a:	e3 ce       	rjmp	.-570    	; 0x3552 <main+0x6c>
					if (strcmp(input, password) == 0) {
    378c:	83 ea       	ldi	r24, 0xA3	; 163
    378e:	91 e0       	ldi	r25, 0x01	; 1
    3790:	2c e7       	ldi	r18, 0x7C	; 124
    3792:	31 e0       	ldi	r19, 0x01	; 1
    3794:	b9 01       	movw	r22, r18
    3796:	0e 94 67 21 	call	0x42ce	; 0x42ce <strcmp>
    379a:	00 97       	sbiw	r24, 0x00	; 0
    379c:	09 f0       	breq	.+2      	; 0x37a0 <main+0x2ba>
    379e:	c6 c0       	rjmp	.+396    	; 0x392c <main+0x446>
						// Password is correct, perform action
						lcd_ES_tclear();
    37a0:	0e 94 39 13 	call	0x2672	; 0x2672 <lcd_ES_tclear>
						Lcd_ES_tsendString("Welcome to Motor");
    37a4:	81 e7       	ldi	r24, 0x71	; 113
    37a6:	90 e0       	ldi	r25, 0x00	; 0
    37a8:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <Lcd_ES_tsendString>
						LCD_ES_tGoTo(1, 0);
    37ac:	81 e0       	ldi	r24, 0x01	; 1
    37ae:	60 e0       	ldi	r22, 0x00	; 0
    37b0:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <LCD_ES_tGoTo>
						Lcd_ES_tsendString("Dash board");
    37b4:	82 e8       	ldi	r24, 0x82	; 130
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <Lcd_ES_tsendString>
    37bc:	fe 01       	movw	r30, r28
    37be:	e1 5a       	subi	r30, 0xA1	; 161
    37c0:	ff 4f       	sbci	r31, 0xFF	; 255
    37c2:	80 e0       	ldi	r24, 0x00	; 0
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	aa ef       	ldi	r26, 0xFA	; 250
    37c8:	b4 e4       	ldi	r27, 0x44	; 68
    37ca:	80 83       	st	Z, r24
    37cc:	91 83       	std	Z+1, r25	; 0x01
    37ce:	a2 83       	std	Z+2, r26	; 0x02
    37d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37d2:	8e 01       	movw	r16, r28
    37d4:	05 5a       	subi	r16, 0xA5	; 165
    37d6:	1f 4f       	sbci	r17, 0xFF	; 255
    37d8:	fe 01       	movw	r30, r28
    37da:	e1 5a       	subi	r30, 0xA1	; 161
    37dc:	ff 4f       	sbci	r31, 0xFF	; 255
    37de:	60 81       	ld	r22, Z
    37e0:	71 81       	ldd	r23, Z+1	; 0x01
    37e2:	82 81       	ldd	r24, Z+2	; 0x02
    37e4:	93 81       	ldd	r25, Z+3	; 0x03
    37e6:	20 e0       	ldi	r18, 0x00	; 0
    37e8:	30 e0       	ldi	r19, 0x00	; 0
    37ea:	4a e7       	ldi	r20, 0x7A	; 122
    37ec:	55 e4       	ldi	r21, 0x45	; 69
    37ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f2:	dc 01       	movw	r26, r24
    37f4:	cb 01       	movw	r24, r22
    37f6:	f8 01       	movw	r30, r16
    37f8:	80 83       	st	Z, r24
    37fa:	91 83       	std	Z+1, r25	; 0x01
    37fc:	a2 83       	std	Z+2, r26	; 0x02
    37fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3800:	fe 01       	movw	r30, r28
    3802:	e5 5a       	subi	r30, 0xA5	; 165
    3804:	ff 4f       	sbci	r31, 0xFF	; 255
    3806:	60 81       	ld	r22, Z
    3808:	71 81       	ldd	r23, Z+1	; 0x01
    380a:	82 81       	ldd	r24, Z+2	; 0x02
    380c:	93 81       	ldd	r25, Z+3	; 0x03
    380e:	20 e0       	ldi	r18, 0x00	; 0
    3810:	30 e0       	ldi	r19, 0x00	; 0
    3812:	40 e8       	ldi	r20, 0x80	; 128
    3814:	5f e3       	ldi	r21, 0x3F	; 63
    3816:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    381a:	88 23       	and	r24, r24
    381c:	44 f4       	brge	.+16     	; 0x382e <main+0x348>
		__ticks = 1;
    381e:	fe 01       	movw	r30, r28
    3820:	e7 5a       	subi	r30, 0xA7	; 167
    3822:	ff 4f       	sbci	r31, 0xFF	; 255
    3824:	81 e0       	ldi	r24, 0x01	; 1
    3826:	90 e0       	ldi	r25, 0x00	; 0
    3828:	91 83       	std	Z+1, r25	; 0x01
    382a:	80 83       	st	Z, r24
    382c:	64 c0       	rjmp	.+200    	; 0x38f6 <main+0x410>
	else if (__tmp > 65535)
    382e:	fe 01       	movw	r30, r28
    3830:	e5 5a       	subi	r30, 0xA5	; 165
    3832:	ff 4f       	sbci	r31, 0xFF	; 255
    3834:	60 81       	ld	r22, Z
    3836:	71 81       	ldd	r23, Z+1	; 0x01
    3838:	82 81       	ldd	r24, Z+2	; 0x02
    383a:	93 81       	ldd	r25, Z+3	; 0x03
    383c:	20 e0       	ldi	r18, 0x00	; 0
    383e:	3f ef       	ldi	r19, 0xFF	; 255
    3840:	4f e7       	ldi	r20, 0x7F	; 127
    3842:	57 e4       	ldi	r21, 0x47	; 71
    3844:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3848:	18 16       	cp	r1, r24
    384a:	0c f0       	brlt	.+2      	; 0x384e <main+0x368>
    384c:	43 c0       	rjmp	.+134    	; 0x38d4 <main+0x3ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    384e:	fe 01       	movw	r30, r28
    3850:	e1 5a       	subi	r30, 0xA1	; 161
    3852:	ff 4f       	sbci	r31, 0xFF	; 255
    3854:	60 81       	ld	r22, Z
    3856:	71 81       	ldd	r23, Z+1	; 0x01
    3858:	82 81       	ldd	r24, Z+2	; 0x02
    385a:	93 81       	ldd	r25, Z+3	; 0x03
    385c:	20 e0       	ldi	r18, 0x00	; 0
    385e:	30 e0       	ldi	r19, 0x00	; 0
    3860:	40 e2       	ldi	r20, 0x20	; 32
    3862:	51 e4       	ldi	r21, 0x41	; 65
    3864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3868:	dc 01       	movw	r26, r24
    386a:	cb 01       	movw	r24, r22
    386c:	8e 01       	movw	r16, r28
    386e:	07 5a       	subi	r16, 0xA7	; 167
    3870:	1f 4f       	sbci	r17, 0xFF	; 255
    3872:	bc 01       	movw	r22, r24
    3874:	cd 01       	movw	r24, r26
    3876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    387a:	dc 01       	movw	r26, r24
    387c:	cb 01       	movw	r24, r22
    387e:	f8 01       	movw	r30, r16
    3880:	91 83       	std	Z+1, r25	; 0x01
    3882:	80 83       	st	Z, r24
    3884:	1f c0       	rjmp	.+62     	; 0x38c4 <main+0x3de>
    3886:	fe 01       	movw	r30, r28
    3888:	e9 5a       	subi	r30, 0xA9	; 169
    388a:	ff 4f       	sbci	r31, 0xFF	; 255
    388c:	80 e9       	ldi	r24, 0x90	; 144
    388e:	91 e0       	ldi	r25, 0x01	; 1
    3890:	91 83       	std	Z+1, r25	; 0x01
    3892:	80 83       	st	Z, r24
    3894:	fe 01       	movw	r30, r28
    3896:	e9 5a       	subi	r30, 0xA9	; 169
    3898:	ff 4f       	sbci	r31, 0xFF	; 255
    389a:	80 81       	ld	r24, Z
    389c:	91 81       	ldd	r25, Z+1	; 0x01
    389e:	01 97       	sbiw	r24, 0x01	; 1
    38a0:	f1 f7       	brne	.-4      	; 0x389e <main+0x3b8>
    38a2:	fe 01       	movw	r30, r28
    38a4:	e9 5a       	subi	r30, 0xA9	; 169
    38a6:	ff 4f       	sbci	r31, 0xFF	; 255
    38a8:	91 83       	std	Z+1, r25	; 0x01
    38aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38ac:	de 01       	movw	r26, r28
    38ae:	a7 5a       	subi	r26, 0xA7	; 167
    38b0:	bf 4f       	sbci	r27, 0xFF	; 255
    38b2:	fe 01       	movw	r30, r28
    38b4:	e7 5a       	subi	r30, 0xA7	; 167
    38b6:	ff 4f       	sbci	r31, 0xFF	; 255
    38b8:	80 81       	ld	r24, Z
    38ba:	91 81       	ldd	r25, Z+1	; 0x01
    38bc:	01 97       	sbiw	r24, 0x01	; 1
    38be:	11 96       	adiw	r26, 0x01	; 1
    38c0:	9c 93       	st	X, r25
    38c2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38c4:	fe 01       	movw	r30, r28
    38c6:	e7 5a       	subi	r30, 0xA7	; 167
    38c8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ca:	80 81       	ld	r24, Z
    38cc:	91 81       	ldd	r25, Z+1	; 0x01
    38ce:	00 97       	sbiw	r24, 0x00	; 0
    38d0:	d1 f6       	brne	.-76     	; 0x3886 <main+0x3a0>
    38d2:	28 c0       	rjmp	.+80     	; 0x3924 <main+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38d4:	8e 01       	movw	r16, r28
    38d6:	07 5a       	subi	r16, 0xA7	; 167
    38d8:	1f 4f       	sbci	r17, 0xFF	; 255
    38da:	fe 01       	movw	r30, r28
    38dc:	e5 5a       	subi	r30, 0xA5	; 165
    38de:	ff 4f       	sbci	r31, 0xFF	; 255
    38e0:	60 81       	ld	r22, Z
    38e2:	71 81       	ldd	r23, Z+1	; 0x01
    38e4:	82 81       	ldd	r24, Z+2	; 0x02
    38e6:	93 81       	ldd	r25, Z+3	; 0x03
    38e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ec:	dc 01       	movw	r26, r24
    38ee:	cb 01       	movw	r24, r22
    38f0:	f8 01       	movw	r30, r16
    38f2:	91 83       	std	Z+1, r25	; 0x01
    38f4:	80 83       	st	Z, r24
    38f6:	de 01       	movw	r26, r28
    38f8:	ab 5a       	subi	r26, 0xAB	; 171
    38fa:	bf 4f       	sbci	r27, 0xFF	; 255
    38fc:	fe 01       	movw	r30, r28
    38fe:	e7 5a       	subi	r30, 0xA7	; 167
    3900:	ff 4f       	sbci	r31, 0xFF	; 255
    3902:	80 81       	ld	r24, Z
    3904:	91 81       	ldd	r25, Z+1	; 0x01
    3906:	11 96       	adiw	r26, 0x01	; 1
    3908:	9c 93       	st	X, r25
    390a:	8e 93       	st	-X, r24
    390c:	fe 01       	movw	r30, r28
    390e:	eb 5a       	subi	r30, 0xAB	; 171
    3910:	ff 4f       	sbci	r31, 0xFF	; 255
    3912:	80 81       	ld	r24, Z
    3914:	91 81       	ldd	r25, Z+1	; 0x01
    3916:	01 97       	sbiw	r24, 0x01	; 1
    3918:	f1 f7       	brne	.-4      	; 0x3916 <main+0x430>
    391a:	fe 01       	movw	r30, r28
    391c:	eb 5a       	subi	r30, 0xAB	; 171
    391e:	ff 4f       	sbci	r31, 0xFF	; 255
    3920:	91 83       	std	Z+1, r25	; 0x01
    3922:	80 83       	st	Z, r24
						_delay_ms(2000);
						currentState = STATE_MOTOR_OPTIONS;
    3924:	82 e0       	ldi	r24, 0x02	; 2
    3926:	80 93 b2 01 	sts	0x01B2, r24
    392a:	13 ce       	rjmp	.-986    	; 0x3552 <main+0x6c>
					}
					else {
						// Password is incorrect, reset input
						lcd_ES_tclear();
    392c:	0e 94 39 13 	call	0x2672	; 0x2672 <lcd_ES_tclear>
						Lcd_ES_tsendString("Wrong Password");
    3930:	8d e8       	ldi	r24, 0x8D	; 141
    3932:	90 e0       	ldi	r25, 0x00	; 0
    3934:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <Lcd_ES_tsendString>
						memset(input, '\0', sizeof(input));
    3938:	83 ea       	ldi	r24, 0xA3	; 163
    393a:	91 e0       	ldi	r25, 0x01	; 1
    393c:	60 e0       	ldi	r22, 0x00	; 0
    393e:	70 e0       	ldi	r23, 0x00	; 0
    3940:	45 e0       	ldi	r20, 0x05	; 5
    3942:	50 e0       	ldi	r21, 0x00	; 0
    3944:	0e 94 60 21 	call	0x42c0	; 0x42c0 <memset>
						indexz = 0;
    3948:	10 92 a8 01 	sts	0x01A8, r1
    394c:	fe 01       	movw	r30, r28
    394e:	ef 5a       	subi	r30, 0xAF	; 175
    3950:	ff 4f       	sbci	r31, 0xFF	; 255
    3952:	80 e0       	ldi	r24, 0x00	; 0
    3954:	90 e8       	ldi	r25, 0x80	; 128
    3956:	ab eb       	ldi	r26, 0xBB	; 187
    3958:	b4 e4       	ldi	r27, 0x44	; 68
    395a:	80 83       	st	Z, r24
    395c:	91 83       	std	Z+1, r25	; 0x01
    395e:	a2 83       	std	Z+2, r26	; 0x02
    3960:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3962:	8e 01       	movw	r16, r28
    3964:	03 5b       	subi	r16, 0xB3	; 179
    3966:	1f 4f       	sbci	r17, 0xFF	; 255
    3968:	fe 01       	movw	r30, r28
    396a:	ef 5a       	subi	r30, 0xAF	; 175
    396c:	ff 4f       	sbci	r31, 0xFF	; 255
    396e:	60 81       	ld	r22, Z
    3970:	71 81       	ldd	r23, Z+1	; 0x01
    3972:	82 81       	ldd	r24, Z+2	; 0x02
    3974:	93 81       	ldd	r25, Z+3	; 0x03
    3976:	20 e0       	ldi	r18, 0x00	; 0
    3978:	30 e0       	ldi	r19, 0x00	; 0
    397a:	4a e7       	ldi	r20, 0x7A	; 122
    397c:	55 e4       	ldi	r21, 0x45	; 69
    397e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3982:	dc 01       	movw	r26, r24
    3984:	cb 01       	movw	r24, r22
    3986:	f8 01       	movw	r30, r16
    3988:	80 83       	st	Z, r24
    398a:	91 83       	std	Z+1, r25	; 0x01
    398c:	a2 83       	std	Z+2, r26	; 0x02
    398e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3990:	fe 01       	movw	r30, r28
    3992:	e3 5b       	subi	r30, 0xB3	; 179
    3994:	ff 4f       	sbci	r31, 0xFF	; 255
    3996:	60 81       	ld	r22, Z
    3998:	71 81       	ldd	r23, Z+1	; 0x01
    399a:	82 81       	ldd	r24, Z+2	; 0x02
    399c:	93 81       	ldd	r25, Z+3	; 0x03
    399e:	20 e0       	ldi	r18, 0x00	; 0
    39a0:	30 e0       	ldi	r19, 0x00	; 0
    39a2:	40 e8       	ldi	r20, 0x80	; 128
    39a4:	5f e3       	ldi	r21, 0x3F	; 63
    39a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39aa:	88 23       	and	r24, r24
    39ac:	44 f4       	brge	.+16     	; 0x39be <main+0x4d8>
		__ticks = 1;
    39ae:	fe 01       	movw	r30, r28
    39b0:	e5 5b       	subi	r30, 0xB5	; 181
    39b2:	ff 4f       	sbci	r31, 0xFF	; 255
    39b4:	81 e0       	ldi	r24, 0x01	; 1
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	91 83       	std	Z+1, r25	; 0x01
    39ba:	80 83       	st	Z, r24
    39bc:	64 c0       	rjmp	.+200    	; 0x3a86 <main+0x5a0>
	else if (__tmp > 65535)
    39be:	fe 01       	movw	r30, r28
    39c0:	e3 5b       	subi	r30, 0xB3	; 179
    39c2:	ff 4f       	sbci	r31, 0xFF	; 255
    39c4:	60 81       	ld	r22, Z
    39c6:	71 81       	ldd	r23, Z+1	; 0x01
    39c8:	82 81       	ldd	r24, Z+2	; 0x02
    39ca:	93 81       	ldd	r25, Z+3	; 0x03
    39cc:	20 e0       	ldi	r18, 0x00	; 0
    39ce:	3f ef       	ldi	r19, 0xFF	; 255
    39d0:	4f e7       	ldi	r20, 0x7F	; 127
    39d2:	57 e4       	ldi	r21, 0x47	; 71
    39d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39d8:	18 16       	cp	r1, r24
    39da:	0c f0       	brlt	.+2      	; 0x39de <main+0x4f8>
    39dc:	43 c0       	rjmp	.+134    	; 0x3a64 <main+0x57e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39de:	fe 01       	movw	r30, r28
    39e0:	ef 5a       	subi	r30, 0xAF	; 175
    39e2:	ff 4f       	sbci	r31, 0xFF	; 255
    39e4:	60 81       	ld	r22, Z
    39e6:	71 81       	ldd	r23, Z+1	; 0x01
    39e8:	82 81       	ldd	r24, Z+2	; 0x02
    39ea:	93 81       	ldd	r25, Z+3	; 0x03
    39ec:	20 e0       	ldi	r18, 0x00	; 0
    39ee:	30 e0       	ldi	r19, 0x00	; 0
    39f0:	40 e2       	ldi	r20, 0x20	; 32
    39f2:	51 e4       	ldi	r21, 0x41	; 65
    39f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39f8:	dc 01       	movw	r26, r24
    39fa:	cb 01       	movw	r24, r22
    39fc:	8e 01       	movw	r16, r28
    39fe:	05 5b       	subi	r16, 0xB5	; 181
    3a00:	1f 4f       	sbci	r17, 0xFF	; 255
    3a02:	bc 01       	movw	r22, r24
    3a04:	cd 01       	movw	r24, r26
    3a06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a0a:	dc 01       	movw	r26, r24
    3a0c:	cb 01       	movw	r24, r22
    3a0e:	f8 01       	movw	r30, r16
    3a10:	91 83       	std	Z+1, r25	; 0x01
    3a12:	80 83       	st	Z, r24
    3a14:	1f c0       	rjmp	.+62     	; 0x3a54 <main+0x56e>
    3a16:	fe 01       	movw	r30, r28
    3a18:	e7 5b       	subi	r30, 0xB7	; 183
    3a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1c:	80 e9       	ldi	r24, 0x90	; 144
    3a1e:	91 e0       	ldi	r25, 0x01	; 1
    3a20:	91 83       	std	Z+1, r25	; 0x01
    3a22:	80 83       	st	Z, r24
    3a24:	fe 01       	movw	r30, r28
    3a26:	e7 5b       	subi	r30, 0xB7	; 183
    3a28:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2a:	80 81       	ld	r24, Z
    3a2c:	91 81       	ldd	r25, Z+1	; 0x01
    3a2e:	01 97       	sbiw	r24, 0x01	; 1
    3a30:	f1 f7       	brne	.-4      	; 0x3a2e <main+0x548>
    3a32:	fe 01       	movw	r30, r28
    3a34:	e7 5b       	subi	r30, 0xB7	; 183
    3a36:	ff 4f       	sbci	r31, 0xFF	; 255
    3a38:	91 83       	std	Z+1, r25	; 0x01
    3a3a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a3c:	de 01       	movw	r26, r28
    3a3e:	a5 5b       	subi	r26, 0xB5	; 181
    3a40:	bf 4f       	sbci	r27, 0xFF	; 255
    3a42:	fe 01       	movw	r30, r28
    3a44:	e5 5b       	subi	r30, 0xB5	; 181
    3a46:	ff 4f       	sbci	r31, 0xFF	; 255
    3a48:	80 81       	ld	r24, Z
    3a4a:	91 81       	ldd	r25, Z+1	; 0x01
    3a4c:	01 97       	sbiw	r24, 0x01	; 1
    3a4e:	11 96       	adiw	r26, 0x01	; 1
    3a50:	9c 93       	st	X, r25
    3a52:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a54:	fe 01       	movw	r30, r28
    3a56:	e5 5b       	subi	r30, 0xB5	; 181
    3a58:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5a:	80 81       	ld	r24, Z
    3a5c:	91 81       	ldd	r25, Z+1	; 0x01
    3a5e:	00 97       	sbiw	r24, 0x00	; 0
    3a60:	d1 f6       	brne	.-76     	; 0x3a16 <main+0x530>
    3a62:	27 c0       	rjmp	.+78     	; 0x3ab2 <main+0x5cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a64:	8e 01       	movw	r16, r28
    3a66:	05 5b       	subi	r16, 0xB5	; 181
    3a68:	1f 4f       	sbci	r17, 0xFF	; 255
    3a6a:	fe 01       	movw	r30, r28
    3a6c:	e3 5b       	subi	r30, 0xB3	; 179
    3a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a70:	60 81       	ld	r22, Z
    3a72:	71 81       	ldd	r23, Z+1	; 0x01
    3a74:	82 81       	ldd	r24, Z+2	; 0x02
    3a76:	93 81       	ldd	r25, Z+3	; 0x03
    3a78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a7c:	dc 01       	movw	r26, r24
    3a7e:	cb 01       	movw	r24, r22
    3a80:	f8 01       	movw	r30, r16
    3a82:	91 83       	std	Z+1, r25	; 0x01
    3a84:	80 83       	st	Z, r24
    3a86:	de 01       	movw	r26, r28
    3a88:	a9 5b       	subi	r26, 0xB9	; 185
    3a8a:	bf 4f       	sbci	r27, 0xFF	; 255
    3a8c:	fe 01       	movw	r30, r28
    3a8e:	e5 5b       	subi	r30, 0xB5	; 181
    3a90:	ff 4f       	sbci	r31, 0xFF	; 255
    3a92:	80 81       	ld	r24, Z
    3a94:	91 81       	ldd	r25, Z+1	; 0x01
    3a96:	8d 93       	st	X+, r24
    3a98:	9c 93       	st	X, r25
    3a9a:	fe 01       	movw	r30, r28
    3a9c:	e9 5b       	subi	r30, 0xB9	; 185
    3a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa0:	80 81       	ld	r24, Z
    3aa2:	91 81       	ldd	r25, Z+1	; 0x01
    3aa4:	01 97       	sbiw	r24, 0x01	; 1
    3aa6:	f1 f7       	brne	.-4      	; 0x3aa4 <main+0x5be>
    3aa8:	fe 01       	movw	r30, r28
    3aaa:	e9 5b       	subi	r30, 0xB9	; 185
    3aac:	ff 4f       	sbci	r31, 0xFF	; 255
    3aae:	91 83       	std	Z+1, r25	; 0x01
    3ab0:	80 83       	st	Z, r24
						_delay_ms(1500);
						flag=0;
    3ab2:	10 92 a2 01 	sts	0x01A2, r1
						count++;
    3ab6:	de 01       	movw	r26, r28
    3ab8:	ae 58       	subi	r26, 0x8E	; 142
    3aba:	bf 4f       	sbci	r27, 0xFF	; 255
    3abc:	fe 01       	movw	r30, r28
    3abe:	ee 58       	subi	r30, 0x8E	; 142
    3ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac2:	80 81       	ld	r24, Z
    3ac4:	8f 5f       	subi	r24, 0xFF	; 255
    3ac6:	8c 93       	st	X, r24
						lcd_ES_tclear();
    3ac8:	0e 94 39 13 	call	0x2672	; 0x2672 <lcd_ES_tclear>
						Lcd_ES_tsendString("Try again");
    3acc:	8c e9       	ldi	r24, 0x9C	; 156
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <Lcd_ES_tsendString>
						LCD_ES_tGoTo(1, 5);
    3ad4:	81 e0       	ldi	r24, 0x01	; 1
    3ad6:	65 e0       	ldi	r22, 0x05	; 5
    3ad8:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <LCD_ES_tGoTo>
						if(count == 3){
    3adc:	fe 01       	movw	r30, r28
    3ade:	ee 58       	subi	r30, 0x8E	; 142
    3ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae2:	80 81       	ld	r24, Z
    3ae4:	83 30       	cpi	r24, 0x03	; 3
    3ae6:	09 f0       	breq	.+2      	; 0x3aea <main+0x604>
    3ae8:	34 cd       	rjmp	.-1432   	; 0x3552 <main+0x6c>
							lcd_ES_tclear();
    3aea:	0e 94 39 13 	call	0x2672	; 0x2672 <lcd_ES_tclear>
							Lcd_ES_tsendString("Blocked !!!");
    3aee:	86 ea       	ldi	r24, 0xA6	; 166
    3af0:	90 e0       	ldi	r25, 0x00	; 0
    3af2:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <Lcd_ES_tsendString>
							count=0;
    3af6:	fe 01       	movw	r30, r28
    3af8:	ee 58       	subi	r30, 0x8E	; 142
    3afa:	ff 4f       	sbci	r31, 0xFF	; 255
    3afc:	10 82       	st	Z, r1
    3afe:	29 cd       	rjmp	.-1454   	; 0x3552 <main+0x6c>

			break;


		case STATE_MOTOR_OPTIONS:
			if (!gettingMotorOption) {
    3b00:	80 91 af 01 	lds	r24, 0x01AF
    3b04:	88 23       	and	r24, r24
    3b06:	89 f4       	brne	.+34     	; 0x3b2a <main+0x644>
				lcd_ES_tclear();
    3b08:	0e 94 39 13 	call	0x2672	; 0x2672 <lcd_ES_tclear>
				Lcd_ES_tsendString("1- DC Motor");
    3b0c:	82 eb       	ldi	r24, 0xB2	; 178
    3b0e:	90 e0       	ldi	r25, 0x00	; 0
    3b10:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <Lcd_ES_tsendString>
				LCD_ES_tGoTo(1, 0);
    3b14:	81 e0       	ldi	r24, 0x01	; 1
    3b16:	60 e0       	ldi	r22, 0x00	; 0
    3b18:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <LCD_ES_tGoTo>
				Lcd_ES_tsendString("2- Stepper");
    3b1c:	8e eb       	ldi	r24, 0xBE	; 190
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <Lcd_ES_tsendString>
				gettingMotorOption = 1;
    3b24:	81 e0       	ldi	r24, 0x01	; 1
    3b26:	80 93 af 01 	sts	0x01AF, r24
			}

			KPD_ES_tGetKeyPressed(&Option);
    3b2a:	ce 01       	movw	r24, r28
    3b2c:	8c 58       	subi	r24, 0x8C	; 140
    3b2e:	9f 4f       	sbci	r25, 0xFF	; 255
    3b30:	0e 94 a5 18 	call	0x314a	; 0x314a <KPD_ES_tGetKeyPressed>
			if (Option != KPD_U8_NOT_PRESSED) {
    3b34:	fe 01       	movw	r30, r28
    3b36:	ec 58       	subi	r30, 0x8C	; 140
    3b38:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3a:	80 81       	ld	r24, Z
    3b3c:	8f 3f       	cpi	r24, 0xFF	; 255
    3b3e:	09 f4       	brne	.+2      	; 0x3b42 <main+0x65c>
    3b40:	08 cd       	rjmp	.-1520   	; 0x3552 <main+0x6c>
				if (Option == '1') {  // DC Motor
    3b42:	fe 01       	movw	r30, r28
    3b44:	ec 58       	subi	r30, 0x8C	; 140
    3b46:	ff 4f       	sbci	r31, 0xFF	; 255
    3b48:	80 81       	ld	r24, Z
    3b4a:	81 33       	cpi	r24, 0x31	; 49
    3b4c:	31 f4       	brne	.+12     	; 0x3b5a <main+0x674>
					gettingMotorOption = 0;
    3b4e:	10 92 af 01 	sts	0x01AF, r1
					currentState = STATE_DC_MOTOR_MOVE;
    3b52:	83 e0       	ldi	r24, 0x03	; 3
    3b54:	80 93 b2 01 	sts	0x01B2, r24
    3b58:	fc cc       	rjmp	.-1544   	; 0x3552 <main+0x6c>
				} else if (Option == '2') {  // Stepper Motor
    3b5a:	fe 01       	movw	r30, r28
    3b5c:	ec 58       	subi	r30, 0x8C	; 140
    3b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b60:	80 81       	ld	r24, Z
    3b62:	82 33       	cpi	r24, 0x32	; 50
    3b64:	21 f4       	brne	.+8      	; 0x3b6e <main+0x688>
					currentState = STATE_STEPPER_MOVE;
    3b66:	84 e0       	ldi	r24, 0x04	; 4
    3b68:	80 93 b2 01 	sts	0x01B2, r24
    3b6c:	f2 cc       	rjmp	.-1564   	; 0x3552 <main+0x6c>
				} else {
					lcd_ES_tclear();
    3b6e:	0e 94 39 13 	call	0x2672	; 0x2672 <lcd_ES_tclear>
					Lcd_ES_tsendString("Invalid Option");
    3b72:	89 ec       	ldi	r24, 0xC9	; 201
    3b74:	90 e0       	ldi	r25, 0x00	; 0
    3b76:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <Lcd_ES_tsendString>
    3b7a:	fe 01       	movw	r30, r28
    3b7c:	ed 5b       	subi	r30, 0xBD	; 189
    3b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b80:	80 e0       	ldi	r24, 0x00	; 0
    3b82:	90 e0       	ldi	r25, 0x00	; 0
    3b84:	aa ef       	ldi	r26, 0xFA	; 250
    3b86:	b4 e4       	ldi	r27, 0x44	; 68
    3b88:	80 83       	st	Z, r24
    3b8a:	91 83       	std	Z+1, r25	; 0x01
    3b8c:	a2 83       	std	Z+2, r26	; 0x02
    3b8e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b90:	8e 01       	movw	r16, r28
    3b92:	01 5c       	subi	r16, 0xC1	; 193
    3b94:	1f 4f       	sbci	r17, 0xFF	; 255
    3b96:	fe 01       	movw	r30, r28
    3b98:	ed 5b       	subi	r30, 0xBD	; 189
    3b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9c:	60 81       	ld	r22, Z
    3b9e:	71 81       	ldd	r23, Z+1	; 0x01
    3ba0:	82 81       	ldd	r24, Z+2	; 0x02
    3ba2:	93 81       	ldd	r25, Z+3	; 0x03
    3ba4:	20 e0       	ldi	r18, 0x00	; 0
    3ba6:	30 e0       	ldi	r19, 0x00	; 0
    3ba8:	4a e7       	ldi	r20, 0x7A	; 122
    3baa:	55 e4       	ldi	r21, 0x45	; 69
    3bac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bb0:	dc 01       	movw	r26, r24
    3bb2:	cb 01       	movw	r24, r22
    3bb4:	f8 01       	movw	r30, r16
    3bb6:	80 83       	st	Z, r24
    3bb8:	91 83       	std	Z+1, r25	; 0x01
    3bba:	a2 83       	std	Z+2, r26	; 0x02
    3bbc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bbe:	fe 01       	movw	r30, r28
    3bc0:	ff 96       	adiw	r30, 0x3f	; 63
    3bc2:	60 81       	ld	r22, Z
    3bc4:	71 81       	ldd	r23, Z+1	; 0x01
    3bc6:	82 81       	ldd	r24, Z+2	; 0x02
    3bc8:	93 81       	ldd	r25, Z+3	; 0x03
    3bca:	20 e0       	ldi	r18, 0x00	; 0
    3bcc:	30 e0       	ldi	r19, 0x00	; 0
    3bce:	40 e8       	ldi	r20, 0x80	; 128
    3bd0:	5f e3       	ldi	r21, 0x3F	; 63
    3bd2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bd6:	88 23       	and	r24, r24
    3bd8:	2c f4       	brge	.+10     	; 0x3be4 <main+0x6fe>
		__ticks = 1;
    3bda:	81 e0       	ldi	r24, 0x01	; 1
    3bdc:	90 e0       	ldi	r25, 0x00	; 0
    3bde:	9e af       	std	Y+62, r25	; 0x3e
    3be0:	8d af       	std	Y+61, r24	; 0x3d
    3be2:	46 c0       	rjmp	.+140    	; 0x3c70 <main+0x78a>
	else if (__tmp > 65535)
    3be4:	fe 01       	movw	r30, r28
    3be6:	ff 96       	adiw	r30, 0x3f	; 63
    3be8:	60 81       	ld	r22, Z
    3bea:	71 81       	ldd	r23, Z+1	; 0x01
    3bec:	82 81       	ldd	r24, Z+2	; 0x02
    3bee:	93 81       	ldd	r25, Z+3	; 0x03
    3bf0:	20 e0       	ldi	r18, 0x00	; 0
    3bf2:	3f ef       	ldi	r19, 0xFF	; 255
    3bf4:	4f e7       	ldi	r20, 0x7F	; 127
    3bf6:	57 e4       	ldi	r21, 0x47	; 71
    3bf8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bfc:	18 16       	cp	r1, r24
    3bfe:	64 f5       	brge	.+88     	; 0x3c58 <main+0x772>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c00:	fe 01       	movw	r30, r28
    3c02:	ed 5b       	subi	r30, 0xBD	; 189
    3c04:	ff 4f       	sbci	r31, 0xFF	; 255
    3c06:	60 81       	ld	r22, Z
    3c08:	71 81       	ldd	r23, Z+1	; 0x01
    3c0a:	82 81       	ldd	r24, Z+2	; 0x02
    3c0c:	93 81       	ldd	r25, Z+3	; 0x03
    3c0e:	20 e0       	ldi	r18, 0x00	; 0
    3c10:	30 e0       	ldi	r19, 0x00	; 0
    3c12:	40 e2       	ldi	r20, 0x20	; 32
    3c14:	51 e4       	ldi	r21, 0x41	; 65
    3c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c1a:	dc 01       	movw	r26, r24
    3c1c:	cb 01       	movw	r24, r22
    3c1e:	bc 01       	movw	r22, r24
    3c20:	cd 01       	movw	r24, r26
    3c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c26:	dc 01       	movw	r26, r24
    3c28:	cb 01       	movw	r24, r22
    3c2a:	9e af       	std	Y+62, r25	; 0x3e
    3c2c:	8d af       	std	Y+61, r24	; 0x3d
    3c2e:	0f c0       	rjmp	.+30     	; 0x3c4e <main+0x768>
    3c30:	80 e9       	ldi	r24, 0x90	; 144
    3c32:	91 e0       	ldi	r25, 0x01	; 1
    3c34:	9c af       	std	Y+60, r25	; 0x3c
    3c36:	8b af       	std	Y+59, r24	; 0x3b
    3c38:	8b ad       	ldd	r24, Y+59	; 0x3b
    3c3a:	9c ad       	ldd	r25, Y+60	; 0x3c
    3c3c:	01 97       	sbiw	r24, 0x01	; 1
    3c3e:	f1 f7       	brne	.-4      	; 0x3c3c <main+0x756>
    3c40:	9c af       	std	Y+60, r25	; 0x3c
    3c42:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c44:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c46:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c48:	01 97       	sbiw	r24, 0x01	; 1
    3c4a:	9e af       	std	Y+62, r25	; 0x3e
    3c4c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c4e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c50:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c52:	00 97       	sbiw	r24, 0x00	; 0
    3c54:	69 f7       	brne	.-38     	; 0x3c30 <main+0x74a>
    3c56:	16 c0       	rjmp	.+44     	; 0x3c84 <main+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c58:	fe 01       	movw	r30, r28
    3c5a:	ff 96       	adiw	r30, 0x3f	; 63
    3c5c:	60 81       	ld	r22, Z
    3c5e:	71 81       	ldd	r23, Z+1	; 0x01
    3c60:	82 81       	ldd	r24, Z+2	; 0x02
    3c62:	93 81       	ldd	r25, Z+3	; 0x03
    3c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c68:	dc 01       	movw	r26, r24
    3c6a:	cb 01       	movw	r24, r22
    3c6c:	9e af       	std	Y+62, r25	; 0x3e
    3c6e:	8d af       	std	Y+61, r24	; 0x3d
    3c70:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c72:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c74:	9a af       	std	Y+58, r25	; 0x3a
    3c76:	89 af       	std	Y+57, r24	; 0x39
    3c78:	89 ad       	ldd	r24, Y+57	; 0x39
    3c7a:	9a ad       	ldd	r25, Y+58	; 0x3a
    3c7c:	01 97       	sbiw	r24, 0x01	; 1
    3c7e:	f1 f7       	brne	.-4      	; 0x3c7c <main+0x796>
    3c80:	9a af       	std	Y+58, r25	; 0x3a
    3c82:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(2000);
					gettingMotorOption=0;
    3c84:	10 92 af 01 	sts	0x01AF, r1
					currentState = STATE_MOTOR_OPTIONS;
    3c88:	82 e0       	ldi	r24, 0x02	; 2
    3c8a:	80 93 b2 01 	sts	0x01B2, r24
    3c8e:	61 cc       	rjmp	.-1854   	; 0x3552 <main+0x6c>
				}
			}
			break;

		case STATE_DC_MOTOR_MOVE:
			if (!gettingMovingOption) {
    3c90:	80 91 b0 01 	lds	r24, 0x01B0
    3c94:	88 23       	and	r24, r24
    3c96:	89 f4       	brne	.+34     	; 0x3cba <main+0x7d4>
				lcd_ES_tclear();
    3c98:	0e 94 39 13 	call	0x2672	; 0x2672 <lcd_ES_tclear>
				Lcd_ES_tsendString("1- Rotate CW");
    3c9c:	88 ed       	ldi	r24, 0xD8	; 216
    3c9e:	90 e0       	ldi	r25, 0x00	; 0
    3ca0:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <Lcd_ES_tsendString>
				LCD_ES_tGoTo(1, 0);
    3ca4:	81 e0       	ldi	r24, 0x01	; 1
    3ca6:	60 e0       	ldi	r22, 0x00	; 0
    3ca8:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <LCD_ES_tGoTo>
				Lcd_ES_tsendString("2- Rotate CCW");
    3cac:	85 ee       	ldi	r24, 0xE5	; 229
    3cae:	90 e0       	ldi	r25, 0x00	; 0
    3cb0:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <Lcd_ES_tsendString>
				gettingMovingOption = 1;
    3cb4:	81 e0       	ldi	r24, 0x01	; 1
    3cb6:	80 93 b0 01 	sts	0x01B0, r24
			}

			KPD_ES_tGetKeyPressed(&Option2);
    3cba:	ce 01       	movw	r24, r28
    3cbc:	8b 58       	subi	r24, 0x8B	; 139
    3cbe:	9f 4f       	sbci	r25, 0xFF	; 255
    3cc0:	0e 94 a5 18 	call	0x314a	; 0x314a <KPD_ES_tGetKeyPressed>
			if (Option2 != KPD_U8_NOT_PRESSED) {
    3cc4:	fe 01       	movw	r30, r28
    3cc6:	eb 58       	subi	r30, 0x8B	; 139
    3cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cca:	80 81       	ld	r24, Z
    3ccc:	8f 3f       	cpi	r24, 0xFF	; 255
    3cce:	09 f4       	brne	.+2      	; 0x3cd2 <main+0x7ec>
    3cd0:	40 cc       	rjmp	.-1920   	; 0x3552 <main+0x6c>
				if (Option2 == '1') {
    3cd2:	fe 01       	movw	r30, r28
    3cd4:	eb 58       	subi	r30, 0x8B	; 139
    3cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd8:	80 81       	ld	r24, Z
    3cda:	81 33       	cpi	r24, 0x31	; 49
    3cdc:	09 f0       	breq	.+2      	; 0x3ce0 <main+0x7fa>
    3cde:	7f c0       	rjmp	.+254    	; 0x3dde <main+0x8f8>
					DC_Motor_Move(DC_MOTOR_0, DC_MOTOR_CW);
    3ce0:	80 e0       	ldi	r24, 0x00	; 0
    3ce2:	60 e0       	ldi	r22, 0x00	; 0
    3ce4:	0e 94 0c 1a 	call	0x3418	; 0x3418 <DC_Motor_Move>
    3ce8:	80 e0       	ldi	r24, 0x00	; 0
    3cea:	90 e8       	ldi	r25, 0x80	; 128
    3cec:	ab e3       	ldi	r26, 0x3B	; 59
    3cee:	b5 e4       	ldi	r27, 0x45	; 69
    3cf0:	8d ab       	std	Y+53, r24	; 0x35
    3cf2:	9e ab       	std	Y+54, r25	; 0x36
    3cf4:	af ab       	std	Y+55, r26	; 0x37
    3cf6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cf8:	6d a9       	ldd	r22, Y+53	; 0x35
    3cfa:	7e a9       	ldd	r23, Y+54	; 0x36
    3cfc:	8f a9       	ldd	r24, Y+55	; 0x37
    3cfe:	98 ad       	ldd	r25, Y+56	; 0x38
    3d00:	20 e0       	ldi	r18, 0x00	; 0
    3d02:	30 e0       	ldi	r19, 0x00	; 0
    3d04:	4a e7       	ldi	r20, 0x7A	; 122
    3d06:	55 e4       	ldi	r21, 0x45	; 69
    3d08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d0c:	dc 01       	movw	r26, r24
    3d0e:	cb 01       	movw	r24, r22
    3d10:	89 ab       	std	Y+49, r24	; 0x31
    3d12:	9a ab       	std	Y+50, r25	; 0x32
    3d14:	ab ab       	std	Y+51, r26	; 0x33
    3d16:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3d18:	69 a9       	ldd	r22, Y+49	; 0x31
    3d1a:	7a a9       	ldd	r23, Y+50	; 0x32
    3d1c:	8b a9       	ldd	r24, Y+51	; 0x33
    3d1e:	9c a9       	ldd	r25, Y+52	; 0x34
    3d20:	20 e0       	ldi	r18, 0x00	; 0
    3d22:	30 e0       	ldi	r19, 0x00	; 0
    3d24:	40 e8       	ldi	r20, 0x80	; 128
    3d26:	5f e3       	ldi	r21, 0x3F	; 63
    3d28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d2c:	88 23       	and	r24, r24
    3d2e:	2c f4       	brge	.+10     	; 0x3d3a <main+0x854>
		__ticks = 1;
    3d30:	81 e0       	ldi	r24, 0x01	; 1
    3d32:	90 e0       	ldi	r25, 0x00	; 0
    3d34:	98 ab       	std	Y+48, r25	; 0x30
    3d36:	8f a7       	std	Y+47, r24	; 0x2f
    3d38:	3f c0       	rjmp	.+126    	; 0x3db8 <main+0x8d2>
	else if (__tmp > 65535)
    3d3a:	69 a9       	ldd	r22, Y+49	; 0x31
    3d3c:	7a a9       	ldd	r23, Y+50	; 0x32
    3d3e:	8b a9       	ldd	r24, Y+51	; 0x33
    3d40:	9c a9       	ldd	r25, Y+52	; 0x34
    3d42:	20 e0       	ldi	r18, 0x00	; 0
    3d44:	3f ef       	ldi	r19, 0xFF	; 255
    3d46:	4f e7       	ldi	r20, 0x7F	; 127
    3d48:	57 e4       	ldi	r21, 0x47	; 71
    3d4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d4e:	18 16       	cp	r1, r24
    3d50:	4c f5       	brge	.+82     	; 0x3da4 <main+0x8be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d52:	6d a9       	ldd	r22, Y+53	; 0x35
    3d54:	7e a9       	ldd	r23, Y+54	; 0x36
    3d56:	8f a9       	ldd	r24, Y+55	; 0x37
    3d58:	98 ad       	ldd	r25, Y+56	; 0x38
    3d5a:	20 e0       	ldi	r18, 0x00	; 0
    3d5c:	30 e0       	ldi	r19, 0x00	; 0
    3d5e:	40 e2       	ldi	r20, 0x20	; 32
    3d60:	51 e4       	ldi	r21, 0x41	; 65
    3d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d66:	dc 01       	movw	r26, r24
    3d68:	cb 01       	movw	r24, r22
    3d6a:	bc 01       	movw	r22, r24
    3d6c:	cd 01       	movw	r24, r26
    3d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d72:	dc 01       	movw	r26, r24
    3d74:	cb 01       	movw	r24, r22
    3d76:	98 ab       	std	Y+48, r25	; 0x30
    3d78:	8f a7       	std	Y+47, r24	; 0x2f
    3d7a:	0f c0       	rjmp	.+30     	; 0x3d9a <main+0x8b4>
    3d7c:	80 e9       	ldi	r24, 0x90	; 144
    3d7e:	91 e0       	ldi	r25, 0x01	; 1
    3d80:	9e a7       	std	Y+46, r25	; 0x2e
    3d82:	8d a7       	std	Y+45, r24	; 0x2d
    3d84:	8d a5       	ldd	r24, Y+45	; 0x2d
    3d86:	9e a5       	ldd	r25, Y+46	; 0x2e
    3d88:	01 97       	sbiw	r24, 0x01	; 1
    3d8a:	f1 f7       	brne	.-4      	; 0x3d88 <main+0x8a2>
    3d8c:	9e a7       	std	Y+46, r25	; 0x2e
    3d8e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d90:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d92:	98 a9       	ldd	r25, Y+48	; 0x30
    3d94:	01 97       	sbiw	r24, 0x01	; 1
    3d96:	98 ab       	std	Y+48, r25	; 0x30
    3d98:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d9c:	98 a9       	ldd	r25, Y+48	; 0x30
    3d9e:	00 97       	sbiw	r24, 0x00	; 0
    3da0:	69 f7       	brne	.-38     	; 0x3d7c <main+0x896>
    3da2:	14 c0       	rjmp	.+40     	; 0x3dcc <main+0x8e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3da4:	69 a9       	ldd	r22, Y+49	; 0x31
    3da6:	7a a9       	ldd	r23, Y+50	; 0x32
    3da8:	8b a9       	ldd	r24, Y+51	; 0x33
    3daa:	9c a9       	ldd	r25, Y+52	; 0x34
    3dac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3db0:	dc 01       	movw	r26, r24
    3db2:	cb 01       	movw	r24, r22
    3db4:	98 ab       	std	Y+48, r25	; 0x30
    3db6:	8f a7       	std	Y+47, r24	; 0x2f
    3db8:	8f a5       	ldd	r24, Y+47	; 0x2f
    3dba:	98 a9       	ldd	r25, Y+48	; 0x30
    3dbc:	9c a7       	std	Y+44, r25	; 0x2c
    3dbe:	8b a7       	std	Y+43, r24	; 0x2b
    3dc0:	8b a5       	ldd	r24, Y+43	; 0x2b
    3dc2:	9c a5       	ldd	r25, Y+44	; 0x2c
    3dc4:	01 97       	sbiw	r24, 0x01	; 1
    3dc6:	f1 f7       	brne	.-4      	; 0x3dc4 <main+0x8de>
    3dc8:	9c a7       	std	Y+44, r25	; 0x2c
    3dca:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(3000);
					DC_Motor_Stop(DC_MOTOR_0);
    3dcc:	80 e0       	ldi	r24, 0x00	; 0
    3dce:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <DC_Motor_Stop>
					gettingMovingOption = 0;
    3dd2:	10 92 b0 01 	sts	0x01B0, r1
					currentState = STATE_MOTOR_OPTIONS;
    3dd6:	82 e0       	ldi	r24, 0x02	; 2
    3dd8:	80 93 b2 01 	sts	0x01B2, r24
    3ddc:	ba cb       	rjmp	.-2188   	; 0x3552 <main+0x6c>
				} else if (Option2 == '2') {
    3dde:	fe 01       	movw	r30, r28
    3de0:	eb 58       	subi	r30, 0x8B	; 139
    3de2:	ff 4f       	sbci	r31, 0xFF	; 255
    3de4:	80 81       	ld	r24, Z
    3de6:	82 33       	cpi	r24, 0x32	; 50
    3de8:	09 f0       	breq	.+2      	; 0x3dec <main+0x906>
    3dea:	7f c0       	rjmp	.+254    	; 0x3eea <main+0xa04>
					DC_Motor_Move(DC_MOTOR_0, DC_MOTOR_CCW);
    3dec:	80 e0       	ldi	r24, 0x00	; 0
    3dee:	61 e0       	ldi	r22, 0x01	; 1
    3df0:	0e 94 0c 1a 	call	0x3418	; 0x3418 <DC_Motor_Move>
    3df4:	80 e0       	ldi	r24, 0x00	; 0
    3df6:	90 e8       	ldi	r25, 0x80	; 128
    3df8:	ab e3       	ldi	r26, 0x3B	; 59
    3dfa:	b5 e4       	ldi	r27, 0x45	; 69
    3dfc:	8f a3       	std	Y+39, r24	; 0x27
    3dfe:	98 a7       	std	Y+40, r25	; 0x28
    3e00:	a9 a7       	std	Y+41, r26	; 0x29
    3e02:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e04:	6f a1       	ldd	r22, Y+39	; 0x27
    3e06:	78 a5       	ldd	r23, Y+40	; 0x28
    3e08:	89 a5       	ldd	r24, Y+41	; 0x29
    3e0a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e0c:	20 e0       	ldi	r18, 0x00	; 0
    3e0e:	30 e0       	ldi	r19, 0x00	; 0
    3e10:	4a e7       	ldi	r20, 0x7A	; 122
    3e12:	55 e4       	ldi	r21, 0x45	; 69
    3e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e18:	dc 01       	movw	r26, r24
    3e1a:	cb 01       	movw	r24, r22
    3e1c:	8b a3       	std	Y+35, r24	; 0x23
    3e1e:	9c a3       	std	Y+36, r25	; 0x24
    3e20:	ad a3       	std	Y+37, r26	; 0x25
    3e22:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3e24:	6b a1       	ldd	r22, Y+35	; 0x23
    3e26:	7c a1       	ldd	r23, Y+36	; 0x24
    3e28:	8d a1       	ldd	r24, Y+37	; 0x25
    3e2a:	9e a1       	ldd	r25, Y+38	; 0x26
    3e2c:	20 e0       	ldi	r18, 0x00	; 0
    3e2e:	30 e0       	ldi	r19, 0x00	; 0
    3e30:	40 e8       	ldi	r20, 0x80	; 128
    3e32:	5f e3       	ldi	r21, 0x3F	; 63
    3e34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e38:	88 23       	and	r24, r24
    3e3a:	2c f4       	brge	.+10     	; 0x3e46 <main+0x960>
		__ticks = 1;
    3e3c:	81 e0       	ldi	r24, 0x01	; 1
    3e3e:	90 e0       	ldi	r25, 0x00	; 0
    3e40:	9a a3       	std	Y+34, r25	; 0x22
    3e42:	89 a3       	std	Y+33, r24	; 0x21
    3e44:	3f c0       	rjmp	.+126    	; 0x3ec4 <main+0x9de>
	else if (__tmp > 65535)
    3e46:	6b a1       	ldd	r22, Y+35	; 0x23
    3e48:	7c a1       	ldd	r23, Y+36	; 0x24
    3e4a:	8d a1       	ldd	r24, Y+37	; 0x25
    3e4c:	9e a1       	ldd	r25, Y+38	; 0x26
    3e4e:	20 e0       	ldi	r18, 0x00	; 0
    3e50:	3f ef       	ldi	r19, 0xFF	; 255
    3e52:	4f e7       	ldi	r20, 0x7F	; 127
    3e54:	57 e4       	ldi	r21, 0x47	; 71
    3e56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e5a:	18 16       	cp	r1, r24
    3e5c:	4c f5       	brge	.+82     	; 0x3eb0 <main+0x9ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e5e:	6f a1       	ldd	r22, Y+39	; 0x27
    3e60:	78 a5       	ldd	r23, Y+40	; 0x28
    3e62:	89 a5       	ldd	r24, Y+41	; 0x29
    3e64:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e66:	20 e0       	ldi	r18, 0x00	; 0
    3e68:	30 e0       	ldi	r19, 0x00	; 0
    3e6a:	40 e2       	ldi	r20, 0x20	; 32
    3e6c:	51 e4       	ldi	r21, 0x41	; 65
    3e6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e72:	dc 01       	movw	r26, r24
    3e74:	cb 01       	movw	r24, r22
    3e76:	bc 01       	movw	r22, r24
    3e78:	cd 01       	movw	r24, r26
    3e7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e7e:	dc 01       	movw	r26, r24
    3e80:	cb 01       	movw	r24, r22
    3e82:	9a a3       	std	Y+34, r25	; 0x22
    3e84:	89 a3       	std	Y+33, r24	; 0x21
    3e86:	0f c0       	rjmp	.+30     	; 0x3ea6 <main+0x9c0>
    3e88:	80 e9       	ldi	r24, 0x90	; 144
    3e8a:	91 e0       	ldi	r25, 0x01	; 1
    3e8c:	98 a3       	std	Y+32, r25	; 0x20
    3e8e:	8f 8f       	std	Y+31, r24	; 0x1f
    3e90:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3e92:	98 a1       	ldd	r25, Y+32	; 0x20
    3e94:	01 97       	sbiw	r24, 0x01	; 1
    3e96:	f1 f7       	brne	.-4      	; 0x3e94 <main+0x9ae>
    3e98:	98 a3       	std	Y+32, r25	; 0x20
    3e9a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e9c:	89 a1       	ldd	r24, Y+33	; 0x21
    3e9e:	9a a1       	ldd	r25, Y+34	; 0x22
    3ea0:	01 97       	sbiw	r24, 0x01	; 1
    3ea2:	9a a3       	std	Y+34, r25	; 0x22
    3ea4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ea6:	89 a1       	ldd	r24, Y+33	; 0x21
    3ea8:	9a a1       	ldd	r25, Y+34	; 0x22
    3eaa:	00 97       	sbiw	r24, 0x00	; 0
    3eac:	69 f7       	brne	.-38     	; 0x3e88 <main+0x9a2>
    3eae:	14 c0       	rjmp	.+40     	; 0x3ed8 <main+0x9f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3eb0:	6b a1       	ldd	r22, Y+35	; 0x23
    3eb2:	7c a1       	ldd	r23, Y+36	; 0x24
    3eb4:	8d a1       	ldd	r24, Y+37	; 0x25
    3eb6:	9e a1       	ldd	r25, Y+38	; 0x26
    3eb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ebc:	dc 01       	movw	r26, r24
    3ebe:	cb 01       	movw	r24, r22
    3ec0:	9a a3       	std	Y+34, r25	; 0x22
    3ec2:	89 a3       	std	Y+33, r24	; 0x21
    3ec4:	89 a1       	ldd	r24, Y+33	; 0x21
    3ec6:	9a a1       	ldd	r25, Y+34	; 0x22
    3ec8:	9e 8f       	std	Y+30, r25	; 0x1e
    3eca:	8d 8f       	std	Y+29, r24	; 0x1d
    3ecc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ece:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3ed0:	01 97       	sbiw	r24, 0x01	; 1
    3ed2:	f1 f7       	brne	.-4      	; 0x3ed0 <main+0x9ea>
    3ed4:	9e 8f       	std	Y+30, r25	; 0x1e
    3ed6:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(3000);
					DC_Motor_Stop(DC_MOTOR_0);
    3ed8:	80 e0       	ldi	r24, 0x00	; 0
    3eda:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <DC_Motor_Stop>
					gettingMovingOption = 0;
    3ede:	10 92 b0 01 	sts	0x01B0, r1
					currentState = STATE_MOTOR_OPTIONS;
    3ee2:	82 e0       	ldi	r24, 0x02	; 2
    3ee4:	80 93 b2 01 	sts	0x01B2, r24
    3ee8:	34 cb       	rjmp	.-2456   	; 0x3552 <main+0x6c>
				} else {
					lcd_ES_tclear();
    3eea:	0e 94 39 13 	call	0x2672	; 0x2672 <lcd_ES_tclear>
					Lcd_ES_tsendString("Invalid Option");
    3eee:	89 ec       	ldi	r24, 0xC9	; 201
    3ef0:	90 e0       	ldi	r25, 0x00	; 0
    3ef2:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <Lcd_ES_tsendString>
    3ef6:	80 e0       	ldi	r24, 0x00	; 0
    3ef8:	90 e0       	ldi	r25, 0x00	; 0
    3efa:	aa ef       	ldi	r26, 0xFA	; 250
    3efc:	b4 e4       	ldi	r27, 0x44	; 68
    3efe:	89 8f       	std	Y+25, r24	; 0x19
    3f00:	9a 8f       	std	Y+26, r25	; 0x1a
    3f02:	ab 8f       	std	Y+27, r26	; 0x1b
    3f04:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f06:	69 8d       	ldd	r22, Y+25	; 0x19
    3f08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f0e:	20 e0       	ldi	r18, 0x00	; 0
    3f10:	30 e0       	ldi	r19, 0x00	; 0
    3f12:	4a e7       	ldi	r20, 0x7A	; 122
    3f14:	55 e4       	ldi	r21, 0x45	; 69
    3f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f1a:	dc 01       	movw	r26, r24
    3f1c:	cb 01       	movw	r24, r22
    3f1e:	8d 8b       	std	Y+21, r24	; 0x15
    3f20:	9e 8b       	std	Y+22, r25	; 0x16
    3f22:	af 8b       	std	Y+23, r26	; 0x17
    3f24:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3f26:	6d 89       	ldd	r22, Y+21	; 0x15
    3f28:	7e 89       	ldd	r23, Y+22	; 0x16
    3f2a:	8f 89       	ldd	r24, Y+23	; 0x17
    3f2c:	98 8d       	ldd	r25, Y+24	; 0x18
    3f2e:	20 e0       	ldi	r18, 0x00	; 0
    3f30:	30 e0       	ldi	r19, 0x00	; 0
    3f32:	40 e8       	ldi	r20, 0x80	; 128
    3f34:	5f e3       	ldi	r21, 0x3F	; 63
    3f36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f3a:	88 23       	and	r24, r24
    3f3c:	2c f4       	brge	.+10     	; 0x3f48 <main+0xa62>
		__ticks = 1;
    3f3e:	81 e0       	ldi	r24, 0x01	; 1
    3f40:	90 e0       	ldi	r25, 0x00	; 0
    3f42:	9c 8b       	std	Y+20, r25	; 0x14
    3f44:	8b 8b       	std	Y+19, r24	; 0x13
    3f46:	3f c0       	rjmp	.+126    	; 0x3fc6 <main+0xae0>
	else if (__tmp > 65535)
    3f48:	6d 89       	ldd	r22, Y+21	; 0x15
    3f4a:	7e 89       	ldd	r23, Y+22	; 0x16
    3f4c:	8f 89       	ldd	r24, Y+23	; 0x17
    3f4e:	98 8d       	ldd	r25, Y+24	; 0x18
    3f50:	20 e0       	ldi	r18, 0x00	; 0
    3f52:	3f ef       	ldi	r19, 0xFF	; 255
    3f54:	4f e7       	ldi	r20, 0x7F	; 127
    3f56:	57 e4       	ldi	r21, 0x47	; 71
    3f58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f5c:	18 16       	cp	r1, r24
    3f5e:	4c f5       	brge	.+82     	; 0x3fb2 <main+0xacc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f60:	69 8d       	ldd	r22, Y+25	; 0x19
    3f62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f68:	20 e0       	ldi	r18, 0x00	; 0
    3f6a:	30 e0       	ldi	r19, 0x00	; 0
    3f6c:	40 e2       	ldi	r20, 0x20	; 32
    3f6e:	51 e4       	ldi	r21, 0x41	; 65
    3f70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f74:	dc 01       	movw	r26, r24
    3f76:	cb 01       	movw	r24, r22
    3f78:	bc 01       	movw	r22, r24
    3f7a:	cd 01       	movw	r24, r26
    3f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f80:	dc 01       	movw	r26, r24
    3f82:	cb 01       	movw	r24, r22
    3f84:	9c 8b       	std	Y+20, r25	; 0x14
    3f86:	8b 8b       	std	Y+19, r24	; 0x13
    3f88:	0f c0       	rjmp	.+30     	; 0x3fa8 <main+0xac2>
    3f8a:	80 e9       	ldi	r24, 0x90	; 144
    3f8c:	91 e0       	ldi	r25, 0x01	; 1
    3f8e:	9a 8b       	std	Y+18, r25	; 0x12
    3f90:	89 8b       	std	Y+17, r24	; 0x11
    3f92:	89 89       	ldd	r24, Y+17	; 0x11
    3f94:	9a 89       	ldd	r25, Y+18	; 0x12
    3f96:	01 97       	sbiw	r24, 0x01	; 1
    3f98:	f1 f7       	brne	.-4      	; 0x3f96 <main+0xab0>
    3f9a:	9a 8b       	std	Y+18, r25	; 0x12
    3f9c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f9e:	8b 89       	ldd	r24, Y+19	; 0x13
    3fa0:	9c 89       	ldd	r25, Y+20	; 0x14
    3fa2:	01 97       	sbiw	r24, 0x01	; 1
    3fa4:	9c 8b       	std	Y+20, r25	; 0x14
    3fa6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fa8:	8b 89       	ldd	r24, Y+19	; 0x13
    3faa:	9c 89       	ldd	r25, Y+20	; 0x14
    3fac:	00 97       	sbiw	r24, 0x00	; 0
    3fae:	69 f7       	brne	.-38     	; 0x3f8a <main+0xaa4>
    3fb0:	14 c0       	rjmp	.+40     	; 0x3fda <main+0xaf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fb2:	6d 89       	ldd	r22, Y+21	; 0x15
    3fb4:	7e 89       	ldd	r23, Y+22	; 0x16
    3fb6:	8f 89       	ldd	r24, Y+23	; 0x17
    3fb8:	98 8d       	ldd	r25, Y+24	; 0x18
    3fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fbe:	dc 01       	movw	r26, r24
    3fc0:	cb 01       	movw	r24, r22
    3fc2:	9c 8b       	std	Y+20, r25	; 0x14
    3fc4:	8b 8b       	std	Y+19, r24	; 0x13
    3fc6:	8b 89       	ldd	r24, Y+19	; 0x13
    3fc8:	9c 89       	ldd	r25, Y+20	; 0x14
    3fca:	98 8b       	std	Y+16, r25	; 0x10
    3fcc:	8f 87       	std	Y+15, r24	; 0x0f
    3fce:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fd0:	98 89       	ldd	r25, Y+16	; 0x10
    3fd2:	01 97       	sbiw	r24, 0x01	; 1
    3fd4:	f1 f7       	brne	.-4      	; 0x3fd2 <main+0xaec>
    3fd6:	98 8b       	std	Y+16, r25	; 0x10
    3fd8:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(2000);
					gettingMovingOption=0;
    3fda:	10 92 b0 01 	sts	0x01B0, r1
					currentState = STATE_DC_MOTOR_MOVE;
    3fde:	83 e0       	ldi	r24, 0x03	; 3
    3fe0:	80 93 b2 01 	sts	0x01B2, r24
    3fe4:	b6 ca       	rjmp	.-2708   	; 0x3552 <main+0x6c>
			break;



		case STATE_STEPPER_MOVE:
			if (!gettingStepperOption) {
    3fe6:	80 91 b1 01 	lds	r24, 0x01B1
    3fea:	88 23       	and	r24, r24
    3fec:	49 f4       	brne	.+18     	; 0x4000 <main+0xb1a>
				lcd_ES_tclear();
    3fee:	0e 94 39 13 	call	0x2672	; 0x2672 <lcd_ES_tclear>
				Lcd_ES_tsendString("Angle(3dig) :");
    3ff2:	83 ef       	ldi	r24, 0xF3	; 243
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <Lcd_ES_tsendString>
				gettingStepperOption = 1;
    3ffa:	81 e0       	ldi	r24, 0x01	; 1
    3ffc:	80 93 b1 01 	sts	0x01B1, r24
			}
			KPD_ES_tGetKeyPressed(&Option3);
    4000:	ce 01       	movw	r24, r28
    4002:	8a 58       	subi	r24, 0x8A	; 138
    4004:	9f 4f       	sbci	r25, 0xFF	; 255
    4006:	0e 94 a5 18 	call	0x314a	; 0x314a <KPD_ES_tGetKeyPressed>
			if (Option3 != KPD_U8_NOT_PRESSED) {
    400a:	fe 01       	movw	r30, r28
    400c:	ea 58       	subi	r30, 0x8A	; 138
    400e:	ff 4f       	sbci	r31, 0xFF	; 255
    4010:	80 81       	ld	r24, Z
    4012:	8f 3f       	cpi	r24, 0xFF	; 255
    4014:	09 f4       	brne	.+2      	; 0x4018 <main+0xb32>
    4016:	9d ca       	rjmp	.-2758   	; 0x3552 <main+0x6c>
				LCD_ES_tGoTo(1, indexStepper);
    4018:	90 91 ae 01 	lds	r25, 0x01AE
    401c:	81 e0       	ldi	r24, 0x01	; 1
    401e:	69 2f       	mov	r22, r25
    4020:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <LCD_ES_tGoTo>
				Lcd_ES_tsendChar(Option3);
    4024:	fe 01       	movw	r30, r28
    4026:	ea 58       	subi	r30, 0x8A	; 138
    4028:	ff 4f       	sbci	r31, 0xFF	; 255
    402a:	80 81       	ld	r24, Z
    402c:	0e 94 76 14 	call	0x28ec	; 0x28ec <Lcd_ES_tsendChar>
				inputSteper[indexStepper] = Option3 - '0'; // Convert character to integer
    4030:	80 91 ae 01 	lds	r24, 0x01AE
    4034:	28 2f       	mov	r18, r24
    4036:	30 e0       	ldi	r19, 0x00	; 0
    4038:	fe 01       	movw	r30, r28
    403a:	ea 58       	subi	r30, 0x8A	; 138
    403c:	ff 4f       	sbci	r31, 0xFF	; 255
    403e:	80 81       	ld	r24, Z
    4040:	80 53       	subi	r24, 0x30	; 48
    4042:	f9 01       	movw	r30, r18
    4044:	e7 55       	subi	r30, 0x57	; 87
    4046:	fe 4f       	sbci	r31, 0xFE	; 254
    4048:	80 83       	st	Z, r24
				indexStepper++;
    404a:	80 91 ae 01 	lds	r24, 0x01AE
    404e:	8f 5f       	subi	r24, 0xFF	; 255
    4050:	80 93 ae 01 	sts	0x01AE, r24
				if (indexStepper >= 3) { // Use indexStepper instead of indexz
    4054:	80 91 ae 01 	lds	r24, 0x01AE
    4058:	83 30       	cpi	r24, 0x03	; 3
    405a:	08 f4       	brcc	.+2      	; 0x405e <main+0xb78>
    405c:	7a ca       	rjmp	.-2828   	; 0x3552 <main+0x6c>
					stepperAngle = (inputSteper[0] * 100) + (inputSteper[1] * 10) + inputSteper[2];
    405e:	80 91 a9 01 	lds	r24, 0x01A9
    4062:	28 2f       	mov	r18, r24
    4064:	30 e0       	ldi	r19, 0x00	; 0
    4066:	84 e6       	ldi	r24, 0x64	; 100
    4068:	90 e0       	ldi	r25, 0x00	; 0
    406a:	ac 01       	movw	r20, r24
    406c:	24 9f       	mul	r18, r20
    406e:	c0 01       	movw	r24, r0
    4070:	25 9f       	mul	r18, r21
    4072:	90 0d       	add	r25, r0
    4074:	34 9f       	mul	r19, r20
    4076:	90 0d       	add	r25, r0
    4078:	11 24       	eor	r1, r1
    407a:	48 2f       	mov	r20, r24
    407c:	80 91 aa 01 	lds	r24, 0x01AA
    4080:	88 2f       	mov	r24, r24
    4082:	90 e0       	ldi	r25, 0x00	; 0
    4084:	9c 01       	movw	r18, r24
    4086:	22 0f       	add	r18, r18
    4088:	33 1f       	adc	r19, r19
    408a:	c9 01       	movw	r24, r18
    408c:	88 0f       	add	r24, r24
    408e:	99 1f       	adc	r25, r25
    4090:	88 0f       	add	r24, r24
    4092:	99 1f       	adc	r25, r25
    4094:	82 0f       	add	r24, r18
    4096:	93 1f       	adc	r25, r19
    4098:	94 2f       	mov	r25, r20
    409a:	98 0f       	add	r25, r24
    409c:	80 91 ab 01 	lds	r24, 0x01AB
    40a0:	fe 01       	movw	r30, r28
    40a2:	ef 58       	subi	r30, 0x8F	; 143
    40a4:	ff 4f       	sbci	r31, 0xFF	; 255
    40a6:	89 0f       	add	r24, r25
    40a8:	80 83       	st	Z, r24
					Stepper_Rotate(stepperAngle);
    40aa:	fe 01       	movw	r30, r28
    40ac:	ef 58       	subi	r30, 0x8F	; 143
    40ae:	ff 4f       	sbci	r31, 0xFF	; 255
    40b0:	80 81       	ld	r24, Z
    40b2:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <Stepper_Rotate>
					memset(inputSteper, '\0', sizeof(inputSteper));
    40b6:	89 ea       	ldi	r24, 0xA9	; 169
    40b8:	91 e0       	ldi	r25, 0x01	; 1
    40ba:	60 e0       	ldi	r22, 0x00	; 0
    40bc:	70 e0       	ldi	r23, 0x00	; 0
    40be:	45 e0       	ldi	r20, 0x05	; 5
    40c0:	50 e0       	ldi	r21, 0x00	; 0
    40c2:	0e 94 60 21 	call	0x42c0	; 0x42c0 <memset>
					indexStepper = 0;
    40c6:	10 92 ae 01 	sts	0x01AE, r1
					gettingStepperOption = 0;
    40ca:	10 92 b1 01 	sts	0x01B1, r1
					gettingMotorOption=0;
    40ce:	10 92 af 01 	sts	0x01AF, r1
					currentState = STATE_MOTOR_OPTIONS;
    40d2:	82 e0       	ldi	r24, 0x02	; 2
    40d4:	80 93 b2 01 	sts	0x01B2, r24
    40d8:	3c ca       	rjmp	.-2952   	; 0x3552 <main+0x6c>
			break;



		case STATE_EXIT:
			lcd_ES_tclear();
    40da:	0e 94 39 13 	call	0x2672	; 0x2672 <lcd_ES_tclear>
			Lcd_ES_tsendString("Exit System :)");
    40de:	81 e0       	ldi	r24, 0x01	; 1
    40e0:	91 e0       	ldi	r25, 0x01	; 1
    40e2:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <Lcd_ES_tsendString>
    40e6:	80 e0       	ldi	r24, 0x00	; 0
    40e8:	90 e0       	ldi	r25, 0x00	; 0
    40ea:	aa e7       	ldi	r26, 0x7A	; 122
    40ec:	b4 e4       	ldi	r27, 0x44	; 68
    40ee:	8b 87       	std	Y+11, r24	; 0x0b
    40f0:	9c 87       	std	Y+12, r25	; 0x0c
    40f2:	ad 87       	std	Y+13, r26	; 0x0d
    40f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    40f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    40fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    40fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    40fe:	20 e0       	ldi	r18, 0x00	; 0
    4100:	30 e0       	ldi	r19, 0x00	; 0
    4102:	4a e7       	ldi	r20, 0x7A	; 122
    4104:	55 e4       	ldi	r21, 0x45	; 69
    4106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    410a:	dc 01       	movw	r26, r24
    410c:	cb 01       	movw	r24, r22
    410e:	8f 83       	std	Y+7, r24	; 0x07
    4110:	98 87       	std	Y+8, r25	; 0x08
    4112:	a9 87       	std	Y+9, r26	; 0x09
    4114:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4116:	6f 81       	ldd	r22, Y+7	; 0x07
    4118:	78 85       	ldd	r23, Y+8	; 0x08
    411a:	89 85       	ldd	r24, Y+9	; 0x09
    411c:	9a 85       	ldd	r25, Y+10	; 0x0a
    411e:	20 e0       	ldi	r18, 0x00	; 0
    4120:	30 e0       	ldi	r19, 0x00	; 0
    4122:	40 e8       	ldi	r20, 0x80	; 128
    4124:	5f e3       	ldi	r21, 0x3F	; 63
    4126:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    412a:	88 23       	and	r24, r24
    412c:	2c f4       	brge	.+10     	; 0x4138 <main+0xc52>
		__ticks = 1;
    412e:	81 e0       	ldi	r24, 0x01	; 1
    4130:	90 e0       	ldi	r25, 0x00	; 0
    4132:	9e 83       	std	Y+6, r25	; 0x06
    4134:	8d 83       	std	Y+5, r24	; 0x05
    4136:	3f c0       	rjmp	.+126    	; 0x41b6 <main+0xcd0>
	else if (__tmp > 65535)
    4138:	6f 81       	ldd	r22, Y+7	; 0x07
    413a:	78 85       	ldd	r23, Y+8	; 0x08
    413c:	89 85       	ldd	r24, Y+9	; 0x09
    413e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4140:	20 e0       	ldi	r18, 0x00	; 0
    4142:	3f ef       	ldi	r19, 0xFF	; 255
    4144:	4f e7       	ldi	r20, 0x7F	; 127
    4146:	57 e4       	ldi	r21, 0x47	; 71
    4148:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    414c:	18 16       	cp	r1, r24
    414e:	4c f5       	brge	.+82     	; 0x41a2 <main+0xcbc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4150:	6b 85       	ldd	r22, Y+11	; 0x0b
    4152:	7c 85       	ldd	r23, Y+12	; 0x0c
    4154:	8d 85       	ldd	r24, Y+13	; 0x0d
    4156:	9e 85       	ldd	r25, Y+14	; 0x0e
    4158:	20 e0       	ldi	r18, 0x00	; 0
    415a:	30 e0       	ldi	r19, 0x00	; 0
    415c:	40 e2       	ldi	r20, 0x20	; 32
    415e:	51 e4       	ldi	r21, 0x41	; 65
    4160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4164:	dc 01       	movw	r26, r24
    4166:	cb 01       	movw	r24, r22
    4168:	bc 01       	movw	r22, r24
    416a:	cd 01       	movw	r24, r26
    416c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4170:	dc 01       	movw	r26, r24
    4172:	cb 01       	movw	r24, r22
    4174:	9e 83       	std	Y+6, r25	; 0x06
    4176:	8d 83       	std	Y+5, r24	; 0x05
    4178:	0f c0       	rjmp	.+30     	; 0x4198 <main+0xcb2>
    417a:	80 e9       	ldi	r24, 0x90	; 144
    417c:	91 e0       	ldi	r25, 0x01	; 1
    417e:	9c 83       	std	Y+4, r25	; 0x04
    4180:	8b 83       	std	Y+3, r24	; 0x03
    4182:	8b 81       	ldd	r24, Y+3	; 0x03
    4184:	9c 81       	ldd	r25, Y+4	; 0x04
    4186:	01 97       	sbiw	r24, 0x01	; 1
    4188:	f1 f7       	brne	.-4      	; 0x4186 <main+0xca0>
    418a:	9c 83       	std	Y+4, r25	; 0x04
    418c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    418e:	8d 81       	ldd	r24, Y+5	; 0x05
    4190:	9e 81       	ldd	r25, Y+6	; 0x06
    4192:	01 97       	sbiw	r24, 0x01	; 1
    4194:	9e 83       	std	Y+6, r25	; 0x06
    4196:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4198:	8d 81       	ldd	r24, Y+5	; 0x05
    419a:	9e 81       	ldd	r25, Y+6	; 0x06
    419c:	00 97       	sbiw	r24, 0x00	; 0
    419e:	69 f7       	brne	.-38     	; 0x417a <main+0xc94>
    41a0:	14 c0       	rjmp	.+40     	; 0x41ca <main+0xce4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41a2:	6f 81       	ldd	r22, Y+7	; 0x07
    41a4:	78 85       	ldd	r23, Y+8	; 0x08
    41a6:	89 85       	ldd	r24, Y+9	; 0x09
    41a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    41aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ae:	dc 01       	movw	r26, r24
    41b0:	cb 01       	movw	r24, r22
    41b2:	9e 83       	std	Y+6, r25	; 0x06
    41b4:	8d 83       	std	Y+5, r24	; 0x05
    41b6:	8d 81       	ldd	r24, Y+5	; 0x05
    41b8:	9e 81       	ldd	r25, Y+6	; 0x06
    41ba:	9a 83       	std	Y+2, r25	; 0x02
    41bc:	89 83       	std	Y+1, r24	; 0x01
    41be:	89 81       	ldd	r24, Y+1	; 0x01
    41c0:	9a 81       	ldd	r25, Y+2	; 0x02
    41c2:	01 97       	sbiw	r24, 0x01	; 1
    41c4:	f1 f7       	brne	.-4      	; 0x41c2 <main+0xcdc>
    41c6:	9a 83       	std	Y+2, r25	; 0x02
    41c8:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			return 0;
    41ca:	80 e0       	ldi	r24, 0x00	; 0
    41cc:	90 e0       	ldi	r25, 0x00	; 0
		}
	}

	return 0;
}
    41ce:	c8 58       	subi	r28, 0x88	; 136
    41d0:	df 4f       	sbci	r29, 0xFF	; 255
    41d2:	0f b6       	in	r0, 0x3f	; 63
    41d4:	f8 94       	cli
    41d6:	de bf       	out	0x3e, r29	; 62
    41d8:	0f be       	out	0x3f, r0	; 63
    41da:	cd bf       	out	0x3d, r28	; 61
    41dc:	cf 91       	pop	r28
    41de:	df 91       	pop	r29
    41e0:	1f 91       	pop	r17
    41e2:	0f 91       	pop	r16
    41e4:	08 95       	ret

000041e6 <__udivmodhi4>:
    41e6:	aa 1b       	sub	r26, r26
    41e8:	bb 1b       	sub	r27, r27
    41ea:	51 e1       	ldi	r21, 0x11	; 17
    41ec:	07 c0       	rjmp	.+14     	; 0x41fc <__udivmodhi4_ep>

000041ee <__udivmodhi4_loop>:
    41ee:	aa 1f       	adc	r26, r26
    41f0:	bb 1f       	adc	r27, r27
    41f2:	a6 17       	cp	r26, r22
    41f4:	b7 07       	cpc	r27, r23
    41f6:	10 f0       	brcs	.+4      	; 0x41fc <__udivmodhi4_ep>
    41f8:	a6 1b       	sub	r26, r22
    41fa:	b7 0b       	sbc	r27, r23

000041fc <__udivmodhi4_ep>:
    41fc:	88 1f       	adc	r24, r24
    41fe:	99 1f       	adc	r25, r25
    4200:	5a 95       	dec	r21
    4202:	a9 f7       	brne	.-22     	; 0x41ee <__udivmodhi4_loop>
    4204:	80 95       	com	r24
    4206:	90 95       	com	r25
    4208:	bc 01       	movw	r22, r24
    420a:	cd 01       	movw	r24, r26
    420c:	08 95       	ret

0000420e <__udivmodsi4>:
    420e:	a1 e2       	ldi	r26, 0x21	; 33
    4210:	1a 2e       	mov	r1, r26
    4212:	aa 1b       	sub	r26, r26
    4214:	bb 1b       	sub	r27, r27
    4216:	fd 01       	movw	r30, r26
    4218:	0d c0       	rjmp	.+26     	; 0x4234 <__udivmodsi4_ep>

0000421a <__udivmodsi4_loop>:
    421a:	aa 1f       	adc	r26, r26
    421c:	bb 1f       	adc	r27, r27
    421e:	ee 1f       	adc	r30, r30
    4220:	ff 1f       	adc	r31, r31
    4222:	a2 17       	cp	r26, r18
    4224:	b3 07       	cpc	r27, r19
    4226:	e4 07       	cpc	r30, r20
    4228:	f5 07       	cpc	r31, r21
    422a:	20 f0       	brcs	.+8      	; 0x4234 <__udivmodsi4_ep>
    422c:	a2 1b       	sub	r26, r18
    422e:	b3 0b       	sbc	r27, r19
    4230:	e4 0b       	sbc	r30, r20
    4232:	f5 0b       	sbc	r31, r21

00004234 <__udivmodsi4_ep>:
    4234:	66 1f       	adc	r22, r22
    4236:	77 1f       	adc	r23, r23
    4238:	88 1f       	adc	r24, r24
    423a:	99 1f       	adc	r25, r25
    423c:	1a 94       	dec	r1
    423e:	69 f7       	brne	.-38     	; 0x421a <__udivmodsi4_loop>
    4240:	60 95       	com	r22
    4242:	70 95       	com	r23
    4244:	80 95       	com	r24
    4246:	90 95       	com	r25
    4248:	9b 01       	movw	r18, r22
    424a:	ac 01       	movw	r20, r24
    424c:	bd 01       	movw	r22, r26
    424e:	cf 01       	movw	r24, r30
    4250:	08 95       	ret

00004252 <__prologue_saves__>:
    4252:	2f 92       	push	r2
    4254:	3f 92       	push	r3
    4256:	4f 92       	push	r4
    4258:	5f 92       	push	r5
    425a:	6f 92       	push	r6
    425c:	7f 92       	push	r7
    425e:	8f 92       	push	r8
    4260:	9f 92       	push	r9
    4262:	af 92       	push	r10
    4264:	bf 92       	push	r11
    4266:	cf 92       	push	r12
    4268:	df 92       	push	r13
    426a:	ef 92       	push	r14
    426c:	ff 92       	push	r15
    426e:	0f 93       	push	r16
    4270:	1f 93       	push	r17
    4272:	cf 93       	push	r28
    4274:	df 93       	push	r29
    4276:	cd b7       	in	r28, 0x3d	; 61
    4278:	de b7       	in	r29, 0x3e	; 62
    427a:	ca 1b       	sub	r28, r26
    427c:	db 0b       	sbc	r29, r27
    427e:	0f b6       	in	r0, 0x3f	; 63
    4280:	f8 94       	cli
    4282:	de bf       	out	0x3e, r29	; 62
    4284:	0f be       	out	0x3f, r0	; 63
    4286:	cd bf       	out	0x3d, r28	; 61
    4288:	09 94       	ijmp

0000428a <__epilogue_restores__>:
    428a:	2a 88       	ldd	r2, Y+18	; 0x12
    428c:	39 88       	ldd	r3, Y+17	; 0x11
    428e:	48 88       	ldd	r4, Y+16	; 0x10
    4290:	5f 84       	ldd	r5, Y+15	; 0x0f
    4292:	6e 84       	ldd	r6, Y+14	; 0x0e
    4294:	7d 84       	ldd	r7, Y+13	; 0x0d
    4296:	8c 84       	ldd	r8, Y+12	; 0x0c
    4298:	9b 84       	ldd	r9, Y+11	; 0x0b
    429a:	aa 84       	ldd	r10, Y+10	; 0x0a
    429c:	b9 84       	ldd	r11, Y+9	; 0x09
    429e:	c8 84       	ldd	r12, Y+8	; 0x08
    42a0:	df 80       	ldd	r13, Y+7	; 0x07
    42a2:	ee 80       	ldd	r14, Y+6	; 0x06
    42a4:	fd 80       	ldd	r15, Y+5	; 0x05
    42a6:	0c 81       	ldd	r16, Y+4	; 0x04
    42a8:	1b 81       	ldd	r17, Y+3	; 0x03
    42aa:	aa 81       	ldd	r26, Y+2	; 0x02
    42ac:	b9 81       	ldd	r27, Y+1	; 0x01
    42ae:	ce 0f       	add	r28, r30
    42b0:	d1 1d       	adc	r29, r1
    42b2:	0f b6       	in	r0, 0x3f	; 63
    42b4:	f8 94       	cli
    42b6:	de bf       	out	0x3e, r29	; 62
    42b8:	0f be       	out	0x3f, r0	; 63
    42ba:	cd bf       	out	0x3d, r28	; 61
    42bc:	ed 01       	movw	r28, r26
    42be:	08 95       	ret

000042c0 <memset>:
    42c0:	dc 01       	movw	r26, r24
    42c2:	01 c0       	rjmp	.+2      	; 0x42c6 <memset+0x6>
    42c4:	6d 93       	st	X+, r22
    42c6:	41 50       	subi	r20, 0x01	; 1
    42c8:	50 40       	sbci	r21, 0x00	; 0
    42ca:	e0 f7       	brcc	.-8      	; 0x42c4 <memset+0x4>
    42cc:	08 95       	ret

000042ce <strcmp>:
    42ce:	fb 01       	movw	r30, r22
    42d0:	dc 01       	movw	r26, r24
    42d2:	8d 91       	ld	r24, X+
    42d4:	01 90       	ld	r0, Z+
    42d6:	80 19       	sub	r24, r0
    42d8:	01 10       	cpse	r0, r1
    42da:	d9 f3       	breq	.-10     	; 0x42d2 <strcmp+0x4>
    42dc:	99 0b       	sbc	r25, r25
    42de:	08 95       	ret

000042e0 <_exit>:
    42e0:	f8 94       	cli

000042e2 <__stop_program>:
    42e2:	ff cf       	rjmp	.-2      	; 0x42e2 <__stop_program>
