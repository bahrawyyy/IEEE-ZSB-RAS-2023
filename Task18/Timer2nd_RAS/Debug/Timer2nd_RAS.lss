
Timer2nd_RAS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000040f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000019e  00800060  000040f4  00004188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  008001fe  008001fe  00004326  2**0
                  ALLOC
  3 .stab         00000bf4  00000000  00000000  00004328  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fc1  00000000  00000000  00004f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000003a0  00000000  00000000  00005edd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000591  00000000  00000000  0000627d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003edc  00000000  00000000  0000680e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001c70  00000000  00000000  0000a6ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002f76  00000000  00000000  0000c35a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004a0  00000000  00000000  0000f2d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000ee4  00000000  00000000  0000f770  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00010654  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001f0  00000000  00000000  0001106e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 8c 0d 	jmp	0x1b18	; 0x1b18 <__vector_1>
       8:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__vector_2>
       c:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 aa 0b 	jmp	0x1754	; 0x1754 <__vector_10>
      2c:	0c 94 67 0b 	jmp	0x16ce	; 0x16ce <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ef       	ldi	r30, 0xF4	; 244
      68:	f0 e4       	ldi	r31, 0x40	; 64
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3f       	cpi	r26, 0xFE	; 254
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae ef       	ldi	r26, 0xFE	; 254
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 32       	cpi	r26, 0x23	; 35
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <main>
      8a:	0c 94 78 20 	jmp	0x40f0	; 0x40f0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 41 20 	jmp	0x4082	; 0x4082 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e6       	ldi	r26, 0x6F	; 111
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5d 20 	jmp	0x40ba	; 0x40ba <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4d 20 	jmp	0x409a	; 0x409a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 69 20 	jmp	0x40d2	; 0x40d2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4d 20 	jmp	0x409a	; 0x409a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 69 20 	jmp	0x40d2	; 0x40d2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 41 20 	jmp	0x4082	; 0x4082 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e6       	ldi	r24, 0x6F	; 111
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5d 20 	jmp	0x40ba	; 0x40ba <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 49 20 	jmp	0x4092	; 0x4092 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e6       	ldi	r22, 0x6F	; 111
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 65 20 	jmp	0x40ca	; 0x40ca <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 4d 20 	jmp	0x409a	; 0x409a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 69 20 	jmp	0x40d2	; 0x40d2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 4d 20 	jmp	0x409a	; 0x409a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 69 20 	jmp	0x40d2	; 0x40d2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 4d 20 	jmp	0x409a	; 0x409a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 69 20 	jmp	0x40d2	; 0x40d2 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 4a 20 	jmp	0x4094	; 0x4094 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 66 20 	jmp	0x40cc	; 0x40cc <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 51 20 	jmp	0x40a2	; 0x40a2 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 6d 20 	jmp	0x40da	; 0x40da <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 49 20 	jmp	0x4092	; 0x4092 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 65 20 	jmp	0x40ca	; 0x40ca <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e9 58       	subi	r30, 0x89	; 137
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <TIMER0_Init>:
volatile u8 Global_Delay_Status=0;



ES_t TIMER0_Init(TIMER0_Config_t *TIME0_Cfg)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	2a 97       	sbiw	r28, 0x0a	; 10
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	9b 83       	std	Y+3, r25	; 0x03
     f00:	8a 83       	std	Y+2, r24	; 0x02
	ES_t RetValue = ES_NOT_OK;
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	89 83       	std	Y+1, r24	; 0x01
	if(TIME0_Cfg == NULLPTR){
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	9b 81       	ldd	r25, Y+3	; 0x03
     f0a:	00 97       	sbiw	r24, 0x00	; 0
     f0c:	19 f4       	brne	.+6      	; 0xf14 <TIMER0_Init+0x2a>
		RetValue = ES_NOT_OK;
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	89 83       	std	Y+1, r24	; 0x01
     f12:	bb c0       	rjmp	.+374    	; 0x108a <TIMER0_Init+0x1a0>
	}else
	{
		// Copy the configuration in a global structure in case of
		// usage inside othe functions
		Global_Timer0_Cfg = *TIME0_Cfg;
     f14:	8a 81       	ldd	r24, Y+2	; 0x02
     f16:	9b 81       	ldd	r25, Y+3	; 0x03
     f18:	2e e0       	ldi	r18, 0x0E	; 14
     f1a:	32 e0       	ldi	r19, 0x02	; 2
     f1c:	3f 83       	std	Y+7, r19	; 0x07
     f1e:	2e 83       	std	Y+6, r18	; 0x06
     f20:	99 87       	std	Y+9, r25	; 0x09
     f22:	88 87       	std	Y+8, r24	; 0x08
     f24:	35 e0       	ldi	r19, 0x05	; 5
     f26:	3a 87       	std	Y+10, r19	; 0x0a
     f28:	e8 85       	ldd	r30, Y+8	; 0x08
     f2a:	f9 85       	ldd	r31, Y+9	; 0x09
     f2c:	00 80       	ld	r0, Z
     f2e:	28 85       	ldd	r18, Y+8	; 0x08
     f30:	39 85       	ldd	r19, Y+9	; 0x09
     f32:	2f 5f       	subi	r18, 0xFF	; 255
     f34:	3f 4f       	sbci	r19, 0xFF	; 255
     f36:	39 87       	std	Y+9, r19	; 0x09
     f38:	28 87       	std	Y+8, r18	; 0x08
     f3a:	ee 81       	ldd	r30, Y+6	; 0x06
     f3c:	ff 81       	ldd	r31, Y+7	; 0x07
     f3e:	00 82       	st	Z, r0
     f40:	2e 81       	ldd	r18, Y+6	; 0x06
     f42:	3f 81       	ldd	r19, Y+7	; 0x07
     f44:	2f 5f       	subi	r18, 0xFF	; 255
     f46:	3f 4f       	sbci	r19, 0xFF	; 255
     f48:	3f 83       	std	Y+7, r19	; 0x07
     f4a:	2e 83       	std	Y+6, r18	; 0x06
     f4c:	3a 85       	ldd	r19, Y+10	; 0x0a
     f4e:	31 50       	subi	r19, 0x01	; 1
     f50:	3a 87       	std	Y+10, r19	; 0x0a
     f52:	8a 85       	ldd	r24, Y+10	; 0x0a
     f54:	88 23       	and	r24, r24
     f56:	41 f7       	brne	.-48     	; 0xf28 <TIMER0_Init+0x3e>


		// Timer0 mode Configurations
		if((TIME0_Cfg->mode >= TIMER0_NORMAL_MODE) && (TIME0_Cfg->mode <= TIMER0_FAST_PWM_MODE))
     f58:	ea 81       	ldd	r30, Y+2	; 0x02
     f5a:	fb 81       	ldd	r31, Y+3	; 0x03
     f5c:	80 81       	ld	r24, Z
     f5e:	84 30       	cpi	r24, 0x04	; 4
     f60:	08 f0       	brcs	.+2      	; 0xf64 <TIMER0_Init+0x7a>
     f62:	5e c0       	rjmp	.+188    	; 0x1020 <TIMER0_Init+0x136>
		{
			RetValue = ES_OK;
     f64:	19 82       	std	Y+1, r1	; 0x01
			switch(TIME0_Cfg->mode)
     f66:	ea 81       	ldd	r30, Y+2	; 0x02
     f68:	fb 81       	ldd	r31, Y+3	; 0x03
     f6a:	80 81       	ld	r24, Z
     f6c:	e8 2f       	mov	r30, r24
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	fd 83       	std	Y+5, r31	; 0x05
     f72:	ec 83       	std	Y+4, r30	; 0x04
     f74:	2c 81       	ldd	r18, Y+4	; 0x04
     f76:	3d 81       	ldd	r19, Y+5	; 0x05
     f78:	21 30       	cpi	r18, 0x01	; 1
     f7a:	31 05       	cpc	r19, r1
     f7c:	21 f1       	breq	.+72     	; 0xfc6 <TIMER0_Init+0xdc>
     f7e:	8c 81       	ldd	r24, Y+4	; 0x04
     f80:	9d 81       	ldd	r25, Y+5	; 0x05
     f82:	82 30       	cpi	r24, 0x02	; 2
     f84:	91 05       	cpc	r25, r1
     f86:	2c f4       	brge	.+10     	; 0xf92 <TIMER0_Init+0xa8>
     f88:	ec 81       	ldd	r30, Y+4	; 0x04
     f8a:	fd 81       	ldd	r31, Y+5	; 0x05
     f8c:	30 97       	sbiw	r30, 0x00	; 0
     f8e:	61 f0       	breq	.+24     	; 0xfa8 <TIMER0_Init+0xbe>
     f90:	49 c0       	rjmp	.+146    	; 0x1024 <TIMER0_Init+0x13a>
     f92:	2c 81       	ldd	r18, Y+4	; 0x04
     f94:	3d 81       	ldd	r19, Y+5	; 0x05
     f96:	22 30       	cpi	r18, 0x02	; 2
     f98:	31 05       	cpc	r19, r1
     f9a:	21 f1       	breq	.+72     	; 0xfe4 <TIMER0_Init+0xfa>
     f9c:	8c 81       	ldd	r24, Y+4	; 0x04
     f9e:	9d 81       	ldd	r25, Y+5	; 0x05
     fa0:	83 30       	cpi	r24, 0x03	; 3
     fa2:	91 05       	cpc	r25, r1
     fa4:	71 f1       	breq	.+92     	; 0x1002 <TIMER0_Init+0x118>
     fa6:	3e c0       	rjmp	.+124    	; 0x1024 <TIMER0_Init+0x13a>
			{
			case TIMER0_NORMAL_MODE:
				CLR_BIT(TCCR0,WGM00);
     fa8:	a3 e5       	ldi	r26, 0x53	; 83
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e3 e5       	ldi	r30, 0x53	; 83
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	8f 7b       	andi	r24, 0xBF	; 191
     fb4:	8c 93       	st	X, r24
				CLR_BIT(TCCR0,WGM01);
     fb6:	a3 e5       	ldi	r26, 0x53	; 83
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e3 e5       	ldi	r30, 0x53	; 83
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	87 7f       	andi	r24, 0xF7	; 247
     fc2:	8c 93       	st	X, r24
     fc4:	2f c0       	rjmp	.+94     	; 0x1024 <TIMER0_Init+0x13a>
				break;
			case TIMER0_PHASE_CORRECT_MODE:
				SET_BIT(TCCR0,WGM00);
     fc6:	a3 e5       	ldi	r26, 0x53	; 83
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e3 e5       	ldi	r30, 0x53	; 83
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	80 64       	ori	r24, 0x40	; 64
     fd2:	8c 93       	st	X, r24
				CLR_BIT(TCCR0,WGM01);
     fd4:	a3 e5       	ldi	r26, 0x53	; 83
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e3 e5       	ldi	r30, 0x53	; 83
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	87 7f       	andi	r24, 0xF7	; 247
     fe0:	8c 93       	st	X, r24
     fe2:	20 c0       	rjmp	.+64     	; 0x1024 <TIMER0_Init+0x13a>
				break;
			case TIMER0_CTC_MODE:
				CLR_BIT(TCCR0,WGM00);
     fe4:	a3 e5       	ldi	r26, 0x53	; 83
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e3 e5       	ldi	r30, 0x53	; 83
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	8f 7b       	andi	r24, 0xBF	; 191
     ff0:	8c 93       	st	X, r24
				SET_BIT(TCCR0,WGM01);
     ff2:	a3 e5       	ldi	r26, 0x53	; 83
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e3 e5       	ldi	r30, 0x53	; 83
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	88 60       	ori	r24, 0x08	; 8
     ffe:	8c 93       	st	X, r24
    1000:	11 c0       	rjmp	.+34     	; 0x1024 <TIMER0_Init+0x13a>
				break;
			case TIMER0_FAST_PWM_MODE:
				SET_BIT(TCCR0,WGM00);
    1002:	a3 e5       	ldi	r26, 0x53	; 83
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e3 e5       	ldi	r30, 0x53	; 83
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	80 64       	ori	r24, 0x40	; 64
    100e:	8c 93       	st	X, r24
				SET_BIT(TCCR0,WGM01);
    1010:	a3 e5       	ldi	r26, 0x53	; 83
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e3 e5       	ldi	r30, 0x53	; 83
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	88 60       	ori	r24, 0x08	; 8
    101c:	8c 93       	st	X, r24
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <TIMER0_Init+0x13a>
				break;
			}
		}else{
			RetValue = ES_NOT_OK;
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	89 83       	std	Y+1, r24	; 0x01
		}

		// Timer_0 Prescalar Configuration
		if((TIME0_Cfg->prescalar >= TIMER0_STOP) && (TIME0_Cfg->prescalar <= EXTERNAL_RISING))
    1024:	ea 81       	ldd	r30, Y+2	; 0x02
    1026:	fb 81       	ldd	r31, Y+3	; 0x03
    1028:	81 81       	ldd	r24, Z+1	; 0x01
    102a:	88 30       	cpi	r24, 0x08	; 8
    102c:	58 f4       	brcc	.+22     	; 0x1044 <TIMER0_Init+0x15a>
		{
			TCCR0 |= TIME0_Cfg->prescalar;
    102e:	a3 e5       	ldi	r26, 0x53	; 83
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e3 e5       	ldi	r30, 0x53	; 83
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	90 81       	ld	r25, Z
    1038:	ea 81       	ldd	r30, Y+2	; 0x02
    103a:	fb 81       	ldd	r31, Y+3	; 0x03
    103c:	81 81       	ldd	r24, Z+1	; 0x01
    103e:	89 2b       	or	r24, r25
    1040:	8c 93       	st	X, r24
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <TIMER0_Init+0x15e>
		}else{
			RetValue = ES_NOT_OK;
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	89 83       	std	Y+1, r24	; 0x01
		}


		// Timer_0 OC0 Pin
		TCCR0 |= (TIME0_Cfg->oc0_mode << COM00);
    1048:	a3 e5       	ldi	r26, 0x53	; 83
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e3 e5       	ldi	r30, 0x53	; 83
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	28 2f       	mov	r18, r24
    1054:	ea 81       	ldd	r30, Y+2	; 0x02
    1056:	fb 81       	ldd	r31, Y+3	; 0x03
    1058:	82 81       	ldd	r24, Z+2	; 0x02
    105a:	88 2f       	mov	r24, r24
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	82 95       	swap	r24
    1060:	92 95       	swap	r25
    1062:	90 7f       	andi	r25, 0xF0	; 240
    1064:	98 27       	eor	r25, r24
    1066:	80 7f       	andi	r24, 0xF0	; 240
    1068:	98 27       	eor	r25, r24
    106a:	82 2b       	or	r24, r18
    106c:	8c 93       	st	X, r24


		// Timer_0 Interrupts
		TIMSK |= (TIME0_Cfg->OVF_Interrupt) | (TIME0_Cfg->OCM_Interrupt);
    106e:	a9 e5       	ldi	r26, 0x59	; 89
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e9 e5       	ldi	r30, 0x59	; 89
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	20 81       	ld	r18, Z
    1078:	ea 81       	ldd	r30, Y+2	; 0x02
    107a:	fb 81       	ldd	r31, Y+3	; 0x03
    107c:	93 81       	ldd	r25, Z+3	; 0x03
    107e:	ea 81       	ldd	r30, Y+2	; 0x02
    1080:	fb 81       	ldd	r31, Y+3	; 0x03
    1082:	84 81       	ldd	r24, Z+4	; 0x04
    1084:	89 2b       	or	r24, r25
    1086:	82 2b       	or	r24, r18
    1088:	8c 93       	st	X, r24



	}

	return RetValue;
    108a:	89 81       	ldd	r24, Y+1	; 0x01

}
    108c:	2a 96       	adiw	r28, 0x0a	; 10
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	08 95       	ret

0000109e <TIMER0_Stop>:
ES_t TIMER0_Stop(void)
{
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
	// No clock source
	CLR_BIT(TCCR0,CS00);
    10a6:	a3 e5       	ldi	r26, 0x53	; 83
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e3 e5       	ldi	r30, 0x53	; 83
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	8e 7f       	andi	r24, 0xFE	; 254
    10b2:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS01);
    10b4:	a3 e5       	ldi	r26, 0x53	; 83
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e3 e5       	ldi	r30, 0x53	; 83
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	8d 7f       	andi	r24, 0xFD	; 253
    10c0:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS02);
    10c2:	a3 e5       	ldi	r26, 0x53	; 83
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e3 e5       	ldi	r30, 0x53	; 83
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	8b 7f       	andi	r24, 0xFB	; 251
    10ce:	8c 93       	st	X, r24
	return ES_OK;
    10d0:	80 e0       	ldi	r24, 0x00	; 0
}
    10d2:	cf 91       	pop	r28
    10d4:	df 91       	pop	r29
    10d6:	08 95       	ret

000010d8 <TIMER0_GetCompareValue>:

ES_t TIMER0_GetCompareValue(u8 *CM_Value)
{
    10d8:	df 93       	push	r29
    10da:	cf 93       	push	r28
    10dc:	00 d0       	rcall	.+0      	; 0x10de <TIMER0_GetCompareValue+0x6>
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
    10e2:	9a 83       	std	Y+2, r25	; 0x02
    10e4:	89 83       	std	Y+1, r24	; 0x01
	*CM_Value = OCR0;
    10e6:	ec e5       	ldi	r30, 0x5C	; 92
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	e9 81       	ldd	r30, Y+1	; 0x01
    10ee:	fa 81       	ldd	r31, Y+2	; 0x02
    10f0:	80 83       	st	Z, r24

	return ES_OK;
    10f2:	80 e0       	ldi	r24, 0x00	; 0

}
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	cf 91       	pop	r28
    10fa:	df 91       	pop	r29
    10fc:	08 95       	ret

000010fe <TIMER0_SetCompareValue>:
ES_t TIMER0_SetCompareValue(u8 CM_Value)
{
    10fe:	df 93       	push	r29
    1100:	cf 93       	push	r28
    1102:	0f 92       	push	r0
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
    1108:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = CM_Value;
    110a:	ec e5       	ldi	r30, 0x5C	; 92
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	80 83       	st	Z, r24

	return ES_OK;
    1112:	80 e0       	ldi	r24, 0x00	; 0

}
    1114:	0f 90       	pop	r0
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <TIMER0_GetCounterValue>:

ES_t TIMER0_GetCounterValue(u8 *TCNT_Value)
{
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	00 d0       	rcall	.+0      	; 0x1122 <TIMER0_GetCounterValue+0x6>
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	9a 83       	std	Y+2, r25	; 0x02
    1128:	89 83       	std	Y+1, r24	; 0x01

	*TCNT_Value = TCNT0;
    112a:	e2 e5       	ldi	r30, 0x52	; 82
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	e9 81       	ldd	r30, Y+1	; 0x01
    1132:	fa 81       	ldd	r31, Y+2	; 0x02
    1134:	80 83       	st	Z, r24


	return ES_OK;
    1136:	80 e0       	ldi	r24, 0x00	; 0
}
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	cf 91       	pop	r28
    113e:	df 91       	pop	r29
    1140:	08 95       	ret

00001142 <TIMER0_SetCounterValue>:


ES_t TIMER0_SetCounterValue(u8 TCNT_Value)
{
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	0f 92       	push	r0
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
    114c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = TCNT_Value;
    114e:	e2 e5       	ldi	r30, 0x52	; 82
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	80 83       	st	Z, r24

	return ES_OK;
    1156:	80 e0       	ldi	r24, 0x00	; 0

}
    1158:	0f 90       	pop	r0
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	08 95       	ret

00001160 <TIMER0_GetOVF_Flag>:

// In case of larger than 255
ES_t TIMER0_GetOVF_Flag(u8 *OVF_Value)
{
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	00 d0       	rcall	.+0      	; 0x1166 <TIMER0_GetOVF_Flag+0x6>
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
    116a:	9a 83       	std	Y+2, r25	; 0x02
    116c:	89 83       	std	Y+1, r24	; 0x01

	*OVF_Value = OVF_Number;
    116e:	80 91 03 02 	lds	r24, 0x0203
    1172:	90 91 04 02 	lds	r25, 0x0204
    1176:	a0 91 05 02 	lds	r26, 0x0205
    117a:	b0 91 06 02 	lds	r27, 0x0206
    117e:	e9 81       	ldd	r30, Y+1	; 0x01
    1180:	fa 81       	ldd	r31, Y+2	; 0x02
    1182:	80 83       	st	Z, r24
	return ES_OK;
    1184:	80 e0       	ldi	r24, 0x00	; 0

}
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <PWM_Set_DutyCycle>:



ES_t PWM_Set_DutyCycle(float dutyCycle)
{
    1190:	0f 93       	push	r16
    1192:	1f 93       	push	r17
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	00 d0       	rcall	.+0      	; 0x119a <PWM_Set_DutyCycle+0xa>
    119a:	00 d0       	rcall	.+0      	; 0x119c <PWM_Set_DutyCycle+0xc>
    119c:	0f 92       	push	r0
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	6a 83       	std	Y+2, r22	; 0x02
    11a4:	7b 83       	std	Y+3, r23	; 0x03
    11a6:	8c 83       	std	Y+4, r24	; 0x04
    11a8:	9d 83       	std	Y+5, r25	; 0x05
	ES_t RetValue;

	if((Global_Timer0_Cfg.mode == TIMER0_FAST_PWM_MODE) || (Global_Timer0_Cfg.mode == TIMER0_PHASE_CORRECT_MODE))
    11aa:	80 91 0e 02 	lds	r24, 0x020E
    11ae:	83 30       	cpi	r24, 0x03	; 3
    11b0:	29 f0       	breq	.+10     	; 0x11bc <PWM_Set_DutyCycle+0x2c>
    11b2:	80 91 0e 02 	lds	r24, 0x020E
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	09 f0       	breq	.+2      	; 0x11bc <PWM_Set_DutyCycle+0x2c>
    11ba:	57 c0       	rjmp	.+174    	; 0x126a <PWM_Set_DutyCycle+0xda>
	{
		if(Global_Timer0_Cfg.oc0_mode == OC0_NON_INVERTING)
    11bc:	80 91 10 02 	lds	r24, 0x0210
    11c0:	82 30       	cpi	r24, 0x02	; 2
    11c2:	11 f5       	brne	.+68     	; 0x1208 <PWM_Set_DutyCycle+0x78>
		{
			OCR0 = (u8)((dutyCycle/100.0)*256) - 1;
    11c4:	0c e5       	ldi	r16, 0x5C	; 92
    11c6:	10 e0       	ldi	r17, 0x00	; 0
    11c8:	6a 81       	ldd	r22, Y+2	; 0x02
    11ca:	7b 81       	ldd	r23, Y+3	; 0x03
    11cc:	8c 81       	ldd	r24, Y+4	; 0x04
    11ce:	9d 81       	ldd	r25, Y+5	; 0x05
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	48 ec       	ldi	r20, 0xC8	; 200
    11d6:	52 e4       	ldi	r21, 0x42	; 66
    11d8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	bc 01       	movw	r22, r24
    11e2:	cd 01       	movw	r24, r26
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	40 e8       	ldi	r20, 0x80	; 128
    11ea:	53 e4       	ldi	r21, 0x43	; 67
    11ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11f0:	dc 01       	movw	r26, r24
    11f2:	cb 01       	movw	r24, r22
    11f4:	bc 01       	movw	r22, r24
    11f6:	cd 01       	movw	r24, r26
    11f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	81 50       	subi	r24, 0x01	; 1
    1202:	f8 01       	movw	r30, r16
    1204:	80 83       	st	Z, r24
    1206:	2f c0       	rjmp	.+94     	; 0x1266 <PWM_Set_DutyCycle+0xd6>

		}else if(Global_Timer0_Cfg.oc0_mode == OC0_INVERTING)
    1208:	80 91 10 02 	lds	r24, 0x0210
    120c:	83 30       	cpi	r24, 0x03	; 3
    120e:	59 f5       	brne	.+86     	; 0x1266 <PWM_Set_DutyCycle+0xd6>
		{
			OCR0 = (u8)(256-((256*dutyCycle)/100.0)) - 1;
    1210:	0c e5       	ldi	r16, 0x5C	; 92
    1212:	10 e0       	ldi	r17, 0x00	; 0
    1214:	6a 81       	ldd	r22, Y+2	; 0x02
    1216:	7b 81       	ldd	r23, Y+3	; 0x03
    1218:	8c 81       	ldd	r24, Y+4	; 0x04
    121a:	9d 81       	ldd	r25, Y+5	; 0x05
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	40 e8       	ldi	r20, 0x80	; 128
    1222:	53 e4       	ldi	r21, 0x43	; 67
    1224:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1228:	dc 01       	movw	r26, r24
    122a:	cb 01       	movw	r24, r22
    122c:	bc 01       	movw	r22, r24
    122e:	cd 01       	movw	r24, r26
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	48 ec       	ldi	r20, 0xC8	; 200
    1236:	52 ec       	ldi	r21, 0xC2	; 194
    1238:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	bc 01       	movw	r22, r24
    1242:	cd 01       	movw	r24, r26
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	40 e8       	ldi	r20, 0x80	; 128
    124a:	53 e4       	ldi	r21, 0x43	; 67
    124c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	bc 01       	movw	r22, r24
    1256:	cd 01       	movw	r24, r26
    1258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    125c:	dc 01       	movw	r26, r24
    125e:	cb 01       	movw	r24, r22
    1260:	81 50       	subi	r24, 0x01	; 1
    1262:	f8 01       	movw	r30, r16
    1264:	80 83       	st	Z, r24
		}
		RetValue = ES_OK;
    1266:	19 82       	std	Y+1, r1	; 0x01
    1268:	02 c0       	rjmp	.+4      	; 0x126e <PWM_Set_DutyCycle+0xde>
	}else{
		RetValue = ES_NOT_OK;
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	89 83       	std	Y+1, r24	; 0x01
	}
	return RetValue;
    126e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	1f 91       	pop	r17
    1280:	0f 91       	pop	r16
    1282:	08 95       	ret

00001284 <Timer0_Set_Delay_ms>:



void Timer0_Set_Delay_ms(u32 delay_ms)
{
    1284:	df 93       	push	r29
    1286:	cf 93       	push	r28
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
    128c:	67 97       	sbiw	r28, 0x17	; 23
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
    1298:	6d 87       	std	Y+13, r22	; 0x0d
    129a:	7e 87       	std	Y+14, r23	; 0x0e
    129c:	8f 87       	std	Y+15, r24	; 0x0f
    129e:	98 8b       	std	Y+16, r25	; 0x10
	TIMER0_Config_t Timer0Cfg = {TIMER0_NORMAL_MODE, TIMER0_PRESCALAR_1024, OC0_DISCONNECTED, TOIE0_ENABLE, OCIE0_DISABLE};
    12a0:	9e 01       	movw	r18, r28
    12a2:	28 5f       	subi	r18, 0xF8	; 248
    12a4:	3f 4f       	sbci	r19, 0xFF	; 255
    12a6:	3c 8b       	std	Y+20, r19	; 0x14
    12a8:	2b 8b       	std	Y+19, r18	; 0x13
    12aa:	87 ed       	ldi	r24, 0xD7	; 215
    12ac:	91 e0       	ldi	r25, 0x01	; 1
    12ae:	9e 8b       	std	Y+22, r25	; 0x16
    12b0:	8d 8b       	std	Y+21, r24	; 0x15
    12b2:	95 e0       	ldi	r25, 0x05	; 5
    12b4:	9f 8b       	std	Y+23, r25	; 0x17
    12b6:	ed 89       	ldd	r30, Y+21	; 0x15
    12b8:	fe 89       	ldd	r31, Y+22	; 0x16
    12ba:	00 80       	ld	r0, Z
    12bc:	2d 89       	ldd	r18, Y+21	; 0x15
    12be:	3e 89       	ldd	r19, Y+22	; 0x16
    12c0:	2f 5f       	subi	r18, 0xFF	; 255
    12c2:	3f 4f       	sbci	r19, 0xFF	; 255
    12c4:	3e 8b       	std	Y+22, r19	; 0x16
    12c6:	2d 8b       	std	Y+21, r18	; 0x15
    12c8:	eb 89       	ldd	r30, Y+19	; 0x13
    12ca:	fc 89       	ldd	r31, Y+20	; 0x14
    12cc:	00 82       	st	Z, r0
    12ce:	2b 89       	ldd	r18, Y+19	; 0x13
    12d0:	3c 89       	ldd	r19, Y+20	; 0x14
    12d2:	2f 5f       	subi	r18, 0xFF	; 255
    12d4:	3f 4f       	sbci	r19, 0xFF	; 255
    12d6:	3c 8b       	std	Y+20, r19	; 0x14
    12d8:	2b 8b       	std	Y+19, r18	; 0x13
    12da:	3f 89       	ldd	r19, Y+23	; 0x17
    12dc:	31 50       	subi	r19, 0x01	; 1
    12de:	3f 8b       	std	Y+23, r19	; 0x17
    12e0:	8f 89       	ldd	r24, Y+23	; 0x17
    12e2:	88 23       	and	r24, r24
    12e4:	41 f7       	brne	.-48     	; 0x12b6 <Timer0_Set_Delay_ms+0x32>
	TIMER0_Init(&Timer0Cfg);
    12e6:	ce 01       	movw	r24, r28
    12e8:	08 96       	adiw	r24, 0x08	; 8
    12ea:	0e 94 75 07 	call	0xeea	; 0xeea <TIMER0_Init>

	u16 prescalar = 0;
    12ee:	1f 82       	std	Y+7, r1	; 0x07
    12f0:	1e 82       	std	Y+6, r1	; 0x06
	switch(Timer0Cfg.prescalar){
    12f2:	89 85       	ldd	r24, Y+9	; 0x09
    12f4:	e8 2f       	mov	r30, r24
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	fa 8b       	std	Y+18, r31	; 0x12
    12fa:	e9 8b       	std	Y+17, r30	; 0x11
    12fc:	29 89       	ldd	r18, Y+17	; 0x11
    12fe:	3a 89       	ldd	r19, Y+18	; 0x12
    1300:	23 30       	cpi	r18, 0x03	; 3
    1302:	31 05       	cpc	r19, r1
    1304:	49 f1       	breq	.+82     	; 0x1358 <Timer0_Set_Delay_ms+0xd4>
    1306:	89 89       	ldd	r24, Y+17	; 0x11
    1308:	9a 89       	ldd	r25, Y+18	; 0x12
    130a:	84 30       	cpi	r24, 0x04	; 4
    130c:	91 05       	cpc	r25, r1
    130e:	7c f4       	brge	.+30     	; 0x132e <Timer0_Set_Delay_ms+0xaa>
    1310:	e9 89       	ldd	r30, Y+17	; 0x11
    1312:	fa 89       	ldd	r31, Y+18	; 0x12
    1314:	e1 30       	cpi	r30, 0x01	; 1
    1316:	f1 05       	cpc	r31, r1
    1318:	49 f1       	breq	.+82     	; 0x136c <Timer0_Set_Delay_ms+0xe8>
    131a:	29 89       	ldd	r18, Y+17	; 0x11
    131c:	3a 89       	ldd	r19, Y+18	; 0x12
    131e:	22 30       	cpi	r18, 0x02	; 2
    1320:	31 05       	cpc	r19, r1
    1322:	fc f4       	brge	.+62     	; 0x1362 <Timer0_Set_Delay_ms+0xde>
    1324:	89 89       	ldd	r24, Y+17	; 0x11
    1326:	9a 89       	ldd	r25, Y+18	; 0x12
    1328:	00 97       	sbiw	r24, 0x00	; 0
    132a:	29 f1       	breq	.+74     	; 0x1376 <Timer0_Set_Delay_ms+0xf2>
    132c:	26 c0       	rjmp	.+76     	; 0x137a <Timer0_Set_Delay_ms+0xf6>
    132e:	e9 89       	ldd	r30, Y+17	; 0x11
    1330:	fa 89       	ldd	r31, Y+18	; 0x12
    1332:	e5 30       	cpi	r30, 0x05	; 5
    1334:	f1 05       	cpc	r31, r1
    1336:	31 f0       	breq	.+12     	; 0x1344 <Timer0_Set_Delay_ms+0xc0>
    1338:	29 89       	ldd	r18, Y+17	; 0x11
    133a:	3a 89       	ldd	r19, Y+18	; 0x12
    133c:	25 30       	cpi	r18, 0x05	; 5
    133e:	31 05       	cpc	r19, r1
    1340:	34 f0       	brlt	.+12     	; 0x134e <Timer0_Set_Delay_ms+0xca>
    1342:	1b c0       	rjmp	.+54     	; 0x137a <Timer0_Set_Delay_ms+0xf6>
	case TIMER0_PRESCALAR_1024:
		prescalar = 1024;
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	94 e0       	ldi	r25, 0x04	; 4
    1348:	9f 83       	std	Y+7, r25	; 0x07
    134a:	8e 83       	std	Y+6, r24	; 0x06
    134c:	16 c0       	rjmp	.+44     	; 0x137a <Timer0_Set_Delay_ms+0xf6>
		break;
	case TIMER0_PRESCALAR_256:
		prescalar = 256;
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	91 e0       	ldi	r25, 0x01	; 1
    1352:	9f 83       	std	Y+7, r25	; 0x07
    1354:	8e 83       	std	Y+6, r24	; 0x06
    1356:	11 c0       	rjmp	.+34     	; 0x137a <Timer0_Set_Delay_ms+0xf6>
		break;
	case TIMER0_PRESCALAR_64:
		prescalar = 64;
    1358:	80 e4       	ldi	r24, 0x40	; 64
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	9f 83       	std	Y+7, r25	; 0x07
    135e:	8e 83       	std	Y+6, r24	; 0x06
    1360:	0c c0       	rjmp	.+24     	; 0x137a <Timer0_Set_Delay_ms+0xf6>
		break;
	case TIMER0_PRESCALAR_8:
		prescalar = 8;
    1362:	88 e0       	ldi	r24, 0x08	; 8
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	9f 83       	std	Y+7, r25	; 0x07
    1368:	8e 83       	std	Y+6, r24	; 0x06
    136a:	07 c0       	rjmp	.+14     	; 0x137a <Timer0_Set_Delay_ms+0xf6>
		break;
	case TIMER0_PRESCALAR_1:
		prescalar = 1;
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	9f 83       	std	Y+7, r25	; 0x07
    1372:	8e 83       	std	Y+6, r24	; 0x06
    1374:	02 c0       	rjmp	.+4      	; 0x137a <Timer0_Set_Delay_ms+0xf6>
		break;
	case EXTERNAL_FALLING:
	case EXTERNAL_RISING:
		break;
	case TIMER0_STOP:
		prescalar = 0;
    1376:	1f 82       	std	Y+7, r1	; 0x07
    1378:	1e 82       	std	Y+6, r1	; 0x06
		break;
	}

	u32 CountsNum = (u32)((F_CPU / (prescalar * 1000UL)) * (delay_ms));
    137a:	8e 81       	ldd	r24, Y+6	; 0x06
    137c:	9f 81       	ldd	r25, Y+7	; 0x07
    137e:	cc 01       	movw	r24, r24
    1380:	a0 e0       	ldi	r26, 0x00	; 0
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	28 ee       	ldi	r18, 0xE8	; 232
    1386:	33 e0       	ldi	r19, 0x03	; 3
    1388:	40 e0       	ldi	r20, 0x00	; 0
    138a:	50 e0       	ldi	r21, 0x00	; 0
    138c:	bc 01       	movw	r22, r24
    138e:	cd 01       	movw	r24, r26
    1390:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <__mulsi3>
    1394:	9b 01       	movw	r18, r22
    1396:	ac 01       	movw	r20, r24
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	94 e2       	ldi	r25, 0x24	; 36
    139c:	a4 ef       	ldi	r26, 0xF4	; 244
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	bc 01       	movw	r22, r24
    13a2:	cd 01       	movw	r24, r26
    13a4:	0e 94 0b 20 	call	0x4016	; 0x4016 <__udivmodsi4>
    13a8:	da 01       	movw	r26, r20
    13aa:	c9 01       	movw	r24, r18
    13ac:	2d 85       	ldd	r18, Y+13	; 0x0d
    13ae:	3e 85       	ldd	r19, Y+14	; 0x0e
    13b0:	4f 85       	ldd	r20, Y+15	; 0x0f
    13b2:	58 89       	ldd	r21, Y+16	; 0x10
    13b4:	bc 01       	movw	r22, r24
    13b6:	cd 01       	movw	r24, r26
    13b8:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <__mulsi3>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	8a 83       	std	Y+2, r24	; 0x02
    13c2:	9b 83       	std	Y+3, r25	; 0x03
    13c4:	ac 83       	std	Y+4, r26	; 0x04
    13c6:	bd 83       	std	Y+5, r27	; 0x05
	OVF_Number = (u32)(CountsNum / 256);
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	9b 81       	ldd	r25, Y+3	; 0x03
    13cc:	ac 81       	ldd	r26, Y+4	; 0x04
    13ce:	bd 81       	ldd	r27, Y+5	; 0x05
    13d0:	89 2f       	mov	r24, r25
    13d2:	9a 2f       	mov	r25, r26
    13d4:	ab 2f       	mov	r26, r27
    13d6:	bb 27       	eor	r27, r27
    13d8:	80 93 03 02 	sts	0x0203, r24
    13dc:	90 93 04 02 	sts	0x0204, r25
    13e0:	a0 93 05 02 	sts	0x0205, r26
    13e4:	b0 93 06 02 	sts	0x0206, r27
	u8 RestCounts = CountsNum % 256;
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	89 83       	std	Y+1, r24	; 0x01



	TIMER0_SetCounterValue(0);
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	0e 94 a1 08 	call	0x1142	; 0x1142 <TIMER0_SetCounterValue>

	while(OVF_Number > 0);
    13f2:	80 91 03 02 	lds	r24, 0x0203
    13f6:	90 91 04 02 	lds	r25, 0x0204
    13fa:	a0 91 05 02 	lds	r26, 0x0205
    13fe:	b0 91 06 02 	lds	r27, 0x0206
    1402:	00 97       	sbiw	r24, 0x00	; 0
    1404:	a1 05       	cpc	r26, r1
    1406:	b1 05       	cpc	r27, r1
    1408:	a1 f7       	brne	.-24     	; 0x13f2 <Timer0_Set_Delay_ms+0x16e>

	while(TCNT0 < RestCounts);
    140a:	e2 e5       	ldi	r30, 0x52	; 82
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	90 81       	ld	r25, Z
    1410:	89 81       	ldd	r24, Y+1	; 0x01
    1412:	98 17       	cp	r25, r24
    1414:	d0 f3       	brcs	.-12     	; 0x140a <Timer0_Set_Delay_ms+0x186>

	TIMER0_Stop();
    1416:	0e 94 4f 08 	call	0x109e	; 0x109e <TIMER0_Stop>

	// Disable Timer0 overflow interrupt
	TIMSK &= ~(1 << TOIE0);
    141a:	a9 e5       	ldi	r26, 0x59	; 89
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e9 e5       	ldi	r30, 0x59	; 89
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	8e 7f       	andi	r24, 0xFE	; 254
    1426:	8c 93       	st	X, r24
}
    1428:	67 96       	adiw	r28, 0x17	; 23
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	cd bf       	out	0x3d, r28	; 61
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	08 95       	ret

0000143a <Timer0_OVF_SetCallBack>:


void Timer0_OVF_SetCallBack(void (*Local_ptr_toFunc))
{
    143a:	df 93       	push	r29
    143c:	cf 93       	push	r28
    143e:	00 d0       	rcall	.+0      	; 0x1440 <Timer0_OVF_SetCallBack+0x6>
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	9a 83       	std	Y+2, r25	; 0x02
    1446:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OVF_Fptr = Local_ptr_toFunc;
    1448:	89 81       	ldd	r24, Y+1	; 0x01
    144a:	9a 81       	ldd	r25, Y+2	; 0x02
    144c:	90 93 ff 01 	sts	0x01FF, r25
    1450:	80 93 fe 01 	sts	0x01FE, r24


}
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	cf 91       	pop	r28
    145a:	df 91       	pop	r29
    145c:	08 95       	ret

0000145e <Timer0_OCM_SetCallBack>:
void Timer0_OCM_SetCallBack(void (*Local_ptr_toFunc))
{
    145e:	df 93       	push	r29
    1460:	cf 93       	push	r28
    1462:	00 d0       	rcall	.+0      	; 0x1464 <Timer0_OCM_SetCallBack+0x6>
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	9a 83       	std	Y+2, r25	; 0x02
    146a:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OCM_Fptr = Local_ptr_toFunc;
    146c:	89 81       	ldd	r24, Y+1	; 0x01
    146e:	9a 81       	ldd	r25, Y+2	; 0x02
    1470:	90 93 01 02 	sts	0x0201, r25
    1474:	80 93 00 02 	sts	0x0200, r24
}
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <TIMER1_Init>:

// ===========================================================


ES_t TIMER1_Init(TIMER1_Config_t *TIME1_Cfg)
{
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	2a 97       	sbiw	r28, 0x0a	; 10
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	de bf       	out	0x3e, r29	; 62
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	cd bf       	out	0x3d, r28	; 61
    1496:	9b 83       	std	Y+3, r25	; 0x03
    1498:	8a 83       	std	Y+2, r24	; 0x02
	ES_t RetValue = ES_NOT_OK;
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	89 83       	std	Y+1, r24	; 0x01
	if(TIME1_Cfg == NULLPTR){
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	9b 81       	ldd	r25, Y+3	; 0x03
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	19 f4       	brne	.+6      	; 0x14ac <TIMER1_Init+0x2a>
		RetValue = ES_NOT_OK;
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	89 83       	std	Y+1, r24	; 0x01
    14aa:	ea c0       	rjmp	.+468    	; 0x1680 <TIMER1_Init+0x1fe>
	}else
	{
		// Copy the configuration in a global structure in case of
		// usage inside othe functions
		Global_Timer1_Cfg = *TIME1_Cfg;
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	9b 81       	ldd	r25, Y+3	; 0x03
    14b0:	23 e1       	ldi	r18, 0x13	; 19
    14b2:	32 e0       	ldi	r19, 0x02	; 2
    14b4:	3f 83       	std	Y+7, r19	; 0x07
    14b6:	2e 83       	std	Y+6, r18	; 0x06
    14b8:	99 87       	std	Y+9, r25	; 0x09
    14ba:	88 87       	std	Y+8, r24	; 0x08
    14bc:	38 e0       	ldi	r19, 0x08	; 8
    14be:	3a 87       	std	Y+10, r19	; 0x0a
    14c0:	e8 85       	ldd	r30, Y+8	; 0x08
    14c2:	f9 85       	ldd	r31, Y+9	; 0x09
    14c4:	00 80       	ld	r0, Z
    14c6:	28 85       	ldd	r18, Y+8	; 0x08
    14c8:	39 85       	ldd	r19, Y+9	; 0x09
    14ca:	2f 5f       	subi	r18, 0xFF	; 255
    14cc:	3f 4f       	sbci	r19, 0xFF	; 255
    14ce:	39 87       	std	Y+9, r19	; 0x09
    14d0:	28 87       	std	Y+8, r18	; 0x08
    14d2:	ee 81       	ldd	r30, Y+6	; 0x06
    14d4:	ff 81       	ldd	r31, Y+7	; 0x07
    14d6:	00 82       	st	Z, r0
    14d8:	2e 81       	ldd	r18, Y+6	; 0x06
    14da:	3f 81       	ldd	r19, Y+7	; 0x07
    14dc:	2f 5f       	subi	r18, 0xFF	; 255
    14de:	3f 4f       	sbci	r19, 0xFF	; 255
    14e0:	3f 83       	std	Y+7, r19	; 0x07
    14e2:	2e 83       	std	Y+6, r18	; 0x06
    14e4:	3a 85       	ldd	r19, Y+10	; 0x0a
    14e6:	31 50       	subi	r19, 0x01	; 1
    14e8:	3a 87       	std	Y+10, r19	; 0x0a
    14ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    14ec:	88 23       	and	r24, r24
    14ee:	41 f7       	brne	.-48     	; 0x14c0 <TIMER1_Init+0x3e>


		// Timer0 mode Configurations
		if((TIME1_Cfg->mode >= TIMER1_NORMAL_MODE) && (TIME1_Cfg->mode <= TIMER1_FAST_PWM_OCR1A_TOP))
    14f0:	ea 81       	ldd	r30, Y+2	; 0x02
    14f2:	fb 81       	ldd	r31, Y+3	; 0x03
    14f4:	80 81       	ld	r24, Z
    14f6:	83 30       	cpi	r24, 0x03	; 3
    14f8:	08 f0       	brcs	.+2      	; 0x14fc <TIMER1_Init+0x7a>
    14fa:	6f c0       	rjmp	.+222    	; 0x15da <TIMER1_Init+0x158>
		{
			RetValue = ES_OK;
    14fc:	19 82       	std	Y+1, r1	; 0x01
			switch(TIME1_Cfg->mode)
    14fe:	ea 81       	ldd	r30, Y+2	; 0x02
    1500:	fb 81       	ldd	r31, Y+3	; 0x03
    1502:	80 81       	ld	r24, Z
    1504:	e8 2f       	mov	r30, r24
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	fd 83       	std	Y+5, r31	; 0x05
    150a:	ec 83       	std	Y+4, r30	; 0x04
    150c:	2c 81       	ldd	r18, Y+4	; 0x04
    150e:	3d 81       	ldd	r19, Y+5	; 0x05
    1510:	21 30       	cpi	r18, 0x01	; 1
    1512:	31 05       	cpc	r19, r1
    1514:	41 f1       	breq	.+80     	; 0x1566 <TIMER1_Init+0xe4>
    1516:	8c 81       	ldd	r24, Y+4	; 0x04
    1518:	9d 81       	ldd	r25, Y+5	; 0x05
    151a:	82 30       	cpi	r24, 0x02	; 2
    151c:	91 05       	cpc	r25, r1
    151e:	09 f4       	brne	.+2      	; 0x1522 <TIMER1_Init+0xa0>
    1520:	3f c0       	rjmp	.+126    	; 0x15a0 <TIMER1_Init+0x11e>
    1522:	ec 81       	ldd	r30, Y+4	; 0x04
    1524:	fd 81       	ldd	r31, Y+5	; 0x05
    1526:	30 97       	sbiw	r30, 0x00	; 0
    1528:	09 f0       	breq	.+2      	; 0x152c <TIMER1_Init+0xaa>
    152a:	59 c0       	rjmp	.+178    	; 0x15de <TIMER1_Init+0x15c>
			{
			case TIMER1_NORMAL_MODE:
				CLR_BIT(TCCR1A,WGM10);
    152c:	af e4       	ldi	r26, 0x4F	; 79
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	ef e4       	ldi	r30, 0x4F	; 79
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	8e 7f       	andi	r24, 0xFE	; 254
    1538:	8c 93       	st	X, r24
				CLR_BIT(TCCR1A,WGM11);
    153a:	af e4       	ldi	r26, 0x4F	; 79
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	ef e4       	ldi	r30, 0x4F	; 79
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	8d 7f       	andi	r24, 0xFD	; 253
    1546:	8c 93       	st	X, r24
				CLR_BIT(TCCR1B,WGM12);
    1548:	ae e4       	ldi	r26, 0x4E	; 78
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	ee e4       	ldi	r30, 0x4E	; 78
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	87 7f       	andi	r24, 0xF7	; 247
    1554:	8c 93       	st	X, r24
				CLR_BIT(TCCR1B,WGM13);
    1556:	ae e4       	ldi	r26, 0x4E	; 78
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	ee e4       	ldi	r30, 0x4E	; 78
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	8f 7e       	andi	r24, 0xEF	; 239
    1562:	8c 93       	st	X, r24
    1564:	3c c0       	rjmp	.+120    	; 0x15de <TIMER1_Init+0x15c>
				break;
			case TIMER1_FAST_PWM_ICR1_TOP:
				CLR_BIT(TCCR1A,WGM10);
    1566:	af e4       	ldi	r26, 0x4F	; 79
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	ef e4       	ldi	r30, 0x4F	; 79
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	8e 7f       	andi	r24, 0xFE	; 254
    1572:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,WGM11);
    1574:	af e4       	ldi	r26, 0x4F	; 79
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	ef e4       	ldi	r30, 0x4F	; 79
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	82 60       	ori	r24, 0x02	; 2
    1580:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,WGM12);
    1582:	ae e4       	ldi	r26, 0x4E	; 78
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	ee e4       	ldi	r30, 0x4E	; 78
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	88 60       	ori	r24, 0x08	; 8
    158e:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,WGM13);
    1590:	ae e4       	ldi	r26, 0x4E	; 78
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	ee e4       	ldi	r30, 0x4E	; 78
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	80 61       	ori	r24, 0x10	; 16
    159c:	8c 93       	st	X, r24
    159e:	1f c0       	rjmp	.+62     	; 0x15de <TIMER1_Init+0x15c>
				break;
			case TIMER1_FAST_PWM_OCR1A_TOP:
				SET_BIT(TCCR1A,WGM10);
    15a0:	af e4       	ldi	r26, 0x4F	; 79
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	ef e4       	ldi	r30, 0x4F	; 79
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	81 60       	ori	r24, 0x01	; 1
    15ac:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,WGM11);
    15ae:	af e4       	ldi	r26, 0x4F	; 79
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	ef e4       	ldi	r30, 0x4F	; 79
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	82 60       	ori	r24, 0x02	; 2
    15ba:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,WGM12);
    15bc:	ae e4       	ldi	r26, 0x4E	; 78
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	ee e4       	ldi	r30, 0x4E	; 78
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	88 60       	ori	r24, 0x08	; 8
    15c8:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,WGM13);
    15ca:	ae e4       	ldi	r26, 0x4E	; 78
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	ee e4       	ldi	r30, 0x4E	; 78
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	80 61       	ori	r24, 0x10	; 16
    15d6:	8c 93       	st	X, r24
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <TIMER1_Init+0x15c>
				break;
			}
		}else{
			RetValue = ES_NOT_OK;
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	89 83       	std	Y+1, r24	; 0x01
		}

		// Timer_0 Prescalar Configuration
		if((TIME1_Cfg->prescalar >= TIMER1_STOP) && (TIME1_Cfg->prescalar <= EXTERNAL1_RISING))
    15de:	ea 81       	ldd	r30, Y+2	; 0x02
    15e0:	fb 81       	ldd	r31, Y+3	; 0x03
    15e2:	81 81       	ldd	r24, Z+1	; 0x01
    15e4:	88 30       	cpi	r24, 0x08	; 8
    15e6:	58 f4       	brcc	.+22     	; 0x15fe <TIMER1_Init+0x17c>
		{
			TCCR1B |= TIME1_Cfg->prescalar;
    15e8:	ae e4       	ldi	r26, 0x4E	; 78
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	ee e4       	ldi	r30, 0x4E	; 78
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	90 81       	ld	r25, Z
    15f2:	ea 81       	ldd	r30, Y+2	; 0x02
    15f4:	fb 81       	ldd	r31, Y+3	; 0x03
    15f6:	81 81       	ldd	r24, Z+1	; 0x01
    15f8:	89 2b       	or	r24, r25
    15fa:	8c 93       	st	X, r24
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <TIMER1_Init+0x180>
		}else{
			RetValue = ES_NOT_OK;
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	89 83       	std	Y+1, r24	; 0x01
		}


		// Timer_1 OCA Pin
		TCCR1A |= (TIME1_Cfg->OC1A_mode << COM1A0);
    1602:	af e4       	ldi	r26, 0x4F	; 79
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	ef e4       	ldi	r30, 0x4F	; 79
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	28 2f       	mov	r18, r24
    160e:	ea 81       	ldd	r30, Y+2	; 0x02
    1610:	fb 81       	ldd	r31, Y+3	; 0x03
    1612:	82 81       	ldd	r24, Z+2	; 0x02
    1614:	88 2f       	mov	r24, r24
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	00 24       	eor	r0, r0
    161a:	96 95       	lsr	r25
    161c:	87 95       	ror	r24
    161e:	07 94       	ror	r0
    1620:	96 95       	lsr	r25
    1622:	87 95       	ror	r24
    1624:	07 94       	ror	r0
    1626:	98 2f       	mov	r25, r24
    1628:	80 2d       	mov	r24, r0
    162a:	82 2b       	or	r24, r18
    162c:	8c 93       	st	X, r24

		// Timer_1 OCA Pin
		TCCR1A |= (TIME1_Cfg->OC1B_mode << COM1B0);
    162e:	af e4       	ldi	r26, 0x4F	; 79
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	ef e4       	ldi	r30, 0x4F	; 79
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	28 2f       	mov	r18, r24
    163a:	ea 81       	ldd	r30, Y+2	; 0x02
    163c:	fb 81       	ldd	r31, Y+3	; 0x03
    163e:	83 81       	ldd	r24, Z+3	; 0x03
    1640:	88 2f       	mov	r24, r24
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	82 95       	swap	r24
    1646:	92 95       	swap	r25
    1648:	90 7f       	andi	r25, 0xF0	; 240
    164a:	98 27       	eor	r25, r24
    164c:	80 7f       	andi	r24, 0xF0	; 240
    164e:	98 27       	eor	r25, r24
    1650:	82 2b       	or	r24, r18
    1652:	8c 93       	st	X, r24


		// Timer_1 Interrupts
		TIMSK |= (TIME1_Cfg->OVF_Interrupt) | (TIME1_Cfg->ICU_Interrupt) | (TIME1_Cfg->OCA_Interrupt) | (TIME1_Cfg->OCB_Interrupt);
    1654:	a9 e5       	ldi	r26, 0x59	; 89
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e9 e5       	ldi	r30, 0x59	; 89
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	20 81       	ld	r18, Z
    165e:	ea 81       	ldd	r30, Y+2	; 0x02
    1660:	fb 81       	ldd	r31, Y+3	; 0x03
    1662:	94 81       	ldd	r25, Z+4	; 0x04
    1664:	ea 81       	ldd	r30, Y+2	; 0x02
    1666:	fb 81       	ldd	r31, Y+3	; 0x03
    1668:	85 81       	ldd	r24, Z+5	; 0x05
    166a:	98 2b       	or	r25, r24
    166c:	ea 81       	ldd	r30, Y+2	; 0x02
    166e:	fb 81       	ldd	r31, Y+3	; 0x03
    1670:	86 81       	ldd	r24, Z+6	; 0x06
    1672:	98 2b       	or	r25, r24
    1674:	ea 81       	ldd	r30, Y+2	; 0x02
    1676:	fb 81       	ldd	r31, Y+3	; 0x03
    1678:	87 81       	ldd	r24, Z+7	; 0x07
    167a:	89 2b       	or	r24, r25
    167c:	82 2b       	or	r24, r18
    167e:	8c 93       	st	X, r24



	}

	return RetValue;
    1680:	89 81       	ldd	r24, Y+1	; 0x01
}
    1682:	2a 96       	adiw	r28, 0x0a	; 10
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	cd bf       	out	0x3d, r28	; 61
    168e:	cf 91       	pop	r28
    1690:	df 91       	pop	r29
    1692:	08 95       	ret

00001694 <TIMER1_Stop>:


ES_t TIMER1_Stop(void)
{
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
	// No clock source
	CLR_BIT(TCCR1B,CS10);
    169c:	ae e4       	ldi	r26, 0x4E	; 78
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	ee e4       	ldi	r30, 0x4E	; 78
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	8e 7f       	andi	r24, 0xFE	; 254
    16a8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS11);
    16aa:	ae e4       	ldi	r26, 0x4E	; 78
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	ee e4       	ldi	r30, 0x4E	; 78
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	8d 7f       	andi	r24, 0xFD	; 253
    16b6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS12);
    16b8:	ae e4       	ldi	r26, 0x4E	; 78
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	ee e4       	ldi	r30, 0x4E	; 78
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	8b 7f       	andi	r24, 0xFB	; 251
    16c4:	8c 93       	st	X, r24
	return ES_OK;
    16c6:	80 e0       	ldi	r24, 0x00	; 0
}
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	08 95       	ret

000016ce <__vector_11>:




ISR(TIMER0_OVF_vect)
{
    16ce:	1f 92       	push	r1
    16d0:	0f 92       	push	r0
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	0f 92       	push	r0
    16d6:	11 24       	eor	r1, r1
    16d8:	8f 93       	push	r24
    16da:	9f 93       	push	r25
    16dc:	af 93       	push	r26
    16de:	bf 93       	push	r27
    16e0:	ef 93       	push	r30
    16e2:	ff 93       	push	r31
    16e4:	df 93       	push	r29
    16e6:	cf 93       	push	r28
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62
	if(OVF_Number > 0){
    16ec:	80 91 03 02 	lds	r24, 0x0203
    16f0:	90 91 04 02 	lds	r25, 0x0204
    16f4:	a0 91 05 02 	lds	r26, 0x0205
    16f8:	b0 91 06 02 	lds	r27, 0x0206
    16fc:	00 97       	sbiw	r24, 0x00	; 0
    16fe:	a1 05       	cpc	r26, r1
    1700:	b1 05       	cpc	r27, r1
    1702:	a1 f0       	breq	.+40     	; 0x172c <__vector_11+0x5e>
//		Lcd_ES_tdisplayNum(OVF_Number);
//		Lcd_ES_tsendString("  ");
		OVF_Number--;
    1704:	80 91 03 02 	lds	r24, 0x0203
    1708:	90 91 04 02 	lds	r25, 0x0204
    170c:	a0 91 05 02 	lds	r26, 0x0205
    1710:	b0 91 06 02 	lds	r27, 0x0206
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	a1 09       	sbc	r26, r1
    1718:	b1 09       	sbc	r27, r1
    171a:	80 93 03 02 	sts	0x0203, r24
    171e:	90 93 04 02 	sts	0x0204, r25
    1722:	a0 93 05 02 	sts	0x0205, r26
    1726:	b0 93 06 02 	sts	0x0206, r27
    172a:	07 c0       	rjmp	.+14     	; 0x173a <__vector_11+0x6c>
	}else {
		// If all overflows are done, disable the interrupt
		TIMSK &= ~(1 << TOIE0);
    172c:	a9 e5       	ldi	r26, 0x59	; 89
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e9 e5       	ldi	r30, 0x59	; 89
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	8e 7f       	andi	r24, 0xFE	; 254
    1738:	8c 93       	st	X, r24
	}

}
    173a:	cf 91       	pop	r28
    173c:	df 91       	pop	r29
    173e:	ff 91       	pop	r31
    1740:	ef 91       	pop	r30
    1742:	bf 91       	pop	r27
    1744:	af 91       	pop	r26
    1746:	9f 91       	pop	r25
    1748:	8f 91       	pop	r24
    174a:	0f 90       	pop	r0
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	0f 90       	pop	r0
    1750:	1f 90       	pop	r1
    1752:	18 95       	reti

00001754 <__vector_10>:


ISR(TIMER0_COMP_vect)
{
    1754:	1f 92       	push	r1
    1756:	0f 92       	push	r0
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	0f 92       	push	r0
    175c:	11 24       	eor	r1, r1
    175e:	2f 93       	push	r18
    1760:	3f 93       	push	r19
    1762:	4f 93       	push	r20
    1764:	5f 93       	push	r21
    1766:	6f 93       	push	r22
    1768:	7f 93       	push	r23
    176a:	8f 93       	push	r24
    176c:	9f 93       	push	r25
    176e:	af 93       	push	r26
    1770:	bf 93       	push	r27
    1772:	ef 93       	push	r30
    1774:	ff 93       	push	r31
    1776:	df 93       	push	r29
    1778:	cf 93       	push	r28
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_OCM_Fptr != NULLPTR)
    177e:	80 91 00 02 	lds	r24, 0x0200
    1782:	90 91 01 02 	lds	r25, 0x0201
    1786:	00 97       	sbiw	r24, 0x00	; 0
    1788:	29 f0       	breq	.+10     	; 0x1794 <__vector_10+0x40>
	{
		Timer0_OCM_Fptr();
    178a:	e0 91 00 02 	lds	r30, 0x0200
    178e:	f0 91 01 02 	lds	r31, 0x0201
    1792:	09 95       	icall
	}
}
    1794:	cf 91       	pop	r28
    1796:	df 91       	pop	r29
    1798:	ff 91       	pop	r31
    179a:	ef 91       	pop	r30
    179c:	bf 91       	pop	r27
    179e:	af 91       	pop	r26
    17a0:	9f 91       	pop	r25
    17a2:	8f 91       	pop	r24
    17a4:	7f 91       	pop	r23
    17a6:	6f 91       	pop	r22
    17a8:	5f 91       	pop	r21
    17aa:	4f 91       	pop	r20
    17ac:	3f 91       	pop	r19
    17ae:	2f 91       	pop	r18
    17b0:	0f 90       	pop	r0
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	0f 90       	pop	r0
    17b6:	1f 90       	pop	r1
    17b8:	18 95       	reti

000017ba <EXI_Set_CallBack>:
/* void (*LocalPtr)(void) is a local pointer to function */
/* The name of function without () is an address to that function */
/* The function he passes must take void and return void also */
/************************************************************************/

void EXI_Set_CallBack(EX_Interrupt_Source_type interrupt, void (*LocalPtr)(void)){
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	00 d0       	rcall	.+0      	; 0x17c0 <EXI_Set_CallBack+0x6>
    17c0:	00 d0       	rcall	.+0      	; 0x17c2 <EXI_Set_CallBack+0x8>
    17c2:	0f 92       	push	r0
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
    17c8:	89 83       	std	Y+1, r24	; 0x01
    17ca:	7b 83       	std	Y+3, r23	; 0x03
    17cc:	6a 83       	std	Y+2, r22	; 0x02
	switch(interrupt){
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	3d 83       	std	Y+5, r19	; 0x05
    17d6:	2c 83       	std	Y+4, r18	; 0x04
    17d8:	8c 81       	ldd	r24, Y+4	; 0x04
    17da:	9d 81       	ldd	r25, Y+5	; 0x05
    17dc:	81 30       	cpi	r24, 0x01	; 1
    17de:	91 05       	cpc	r25, r1
    17e0:	81 f0       	breq	.+32     	; 0x1802 <EXI_Set_CallBack+0x48>
    17e2:	2c 81       	ldd	r18, Y+4	; 0x04
    17e4:	3d 81       	ldd	r19, Y+5	; 0x05
    17e6:	22 30       	cpi	r18, 0x02	; 2
    17e8:	31 05       	cpc	r19, r1
    17ea:	91 f0       	breq	.+36     	; 0x1810 <EXI_Set_CallBack+0x56>
    17ec:	8c 81       	ldd	r24, Y+4	; 0x04
    17ee:	9d 81       	ldd	r25, Y+5	; 0x05
    17f0:	00 97       	sbiw	r24, 0x00	; 0
    17f2:	a1 f4       	brne	.+40     	; 0x181c <EXI_Set_CallBack+0x62>
	case EX_INT0:
		INT0_Fptr = LocalPtr;
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	9b 81       	ldd	r25, Y+3	; 0x03
    17f8:	90 93 09 02 	sts	0x0209, r25
    17fc:	80 93 08 02 	sts	0x0208, r24
    1800:	0d c0       	rjmp	.+26     	; 0x181c <EXI_Set_CallBack+0x62>
		break;
	case EX_INT1:
		INT1_Fptr = LocalPtr;
    1802:	8a 81       	ldd	r24, Y+2	; 0x02
    1804:	9b 81       	ldd	r25, Y+3	; 0x03
    1806:	90 93 0b 02 	sts	0x020B, r25
    180a:	80 93 0a 02 	sts	0x020A, r24
    180e:	06 c0       	rjmp	.+12     	; 0x181c <EXI_Set_CallBack+0x62>
		break;
	case EX_INT2:
		INT2_Fptr = LocalPtr;
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	9b 81       	ldd	r25, Y+3	; 0x03
    1814:	90 93 0d 02 	sts	0x020D, r25
    1818:	80 93 0c 02 	sts	0x020C, r24
		break;
	}
}
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	08 95       	ret

0000182c <EXI_ENABLE>:
/************************************************************************/
/*  Enabling and disabling the interrupt                                */
/************************************************************************/


void EXI_ENABLE(EX_Interrupt_Source_type interrupt){
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	00 d0       	rcall	.+0      	; 0x1832 <EXI_ENABLE+0x6>
    1832:	0f 92       	push	r0
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt){
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	28 2f       	mov	r18, r24
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	3b 83       	std	Y+3, r19	; 0x03
    1842:	2a 83       	std	Y+2, r18	; 0x02
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	9b 81       	ldd	r25, Y+3	; 0x03
    1848:	81 30       	cpi	r24, 0x01	; 1
    184a:	91 05       	cpc	r25, r1
    184c:	89 f0       	breq	.+34     	; 0x1870 <EXI_ENABLE+0x44>
    184e:	2a 81       	ldd	r18, Y+2	; 0x02
    1850:	3b 81       	ldd	r19, Y+3	; 0x03
    1852:	22 30       	cpi	r18, 0x02	; 2
    1854:	31 05       	cpc	r19, r1
    1856:	a1 f0       	breq	.+40     	; 0x1880 <EXI_ENABLE+0x54>
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	9b 81       	ldd	r25, Y+3	; 0x03
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	b9 f4       	brne	.+46     	; 0x188e <EXI_ENABLE+0x62>
	case EX_INT0:
		SET_BIT(GICR,INT0);
    1860:	ab e5       	ldi	r26, 0x5B	; 91
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	eb e5       	ldi	r30, 0x5B	; 91
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	80 64       	ori	r24, 0x40	; 64
    186c:	8c 93       	st	X, r24
    186e:	0f c0       	rjmp	.+30     	; 0x188e <EXI_ENABLE+0x62>
		break;
	case EX_INT1:
		SET_BIT(GICR,INT1);
    1870:	ab e5       	ldi	r26, 0x5B	; 91
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	eb e5       	ldi	r30, 0x5B	; 91
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	80 68       	ori	r24, 0x80	; 128
    187c:	8c 93       	st	X, r24
    187e:	07 c0       	rjmp	.+14     	; 0x188e <EXI_ENABLE+0x62>
		break;
	case EX_INT2:
		SET_BIT(GICR,INT2);
    1880:	ab e5       	ldi	r26, 0x5B	; 91
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	eb e5       	ldi	r30, 0x5B	; 91
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	80 62       	ori	r24, 0x20	; 32
    188c:	8c 93       	st	X, r24
		break;
	}
}
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	cf 91       	pop	r28
    1896:	df 91       	pop	r29
    1898:	08 95       	ret

0000189a <EXI_DISABLE>:


void EXI_DISABLE(EX_Interrupt_Source_type interrupt){
    189a:	df 93       	push	r29
    189c:	cf 93       	push	r28
    189e:	00 d0       	rcall	.+0      	; 0x18a0 <EXI_DISABLE+0x6>
    18a0:	0f 92       	push	r0
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
    18a6:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt){
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	28 2f       	mov	r18, r24
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	3b 83       	std	Y+3, r19	; 0x03
    18b0:	2a 83       	std	Y+2, r18	; 0x02
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
    18b4:	9b 81       	ldd	r25, Y+3	; 0x03
    18b6:	81 30       	cpi	r24, 0x01	; 1
    18b8:	91 05       	cpc	r25, r1
    18ba:	89 f0       	breq	.+34     	; 0x18de <EXI_DISABLE+0x44>
    18bc:	2a 81       	ldd	r18, Y+2	; 0x02
    18be:	3b 81       	ldd	r19, Y+3	; 0x03
    18c0:	22 30       	cpi	r18, 0x02	; 2
    18c2:	31 05       	cpc	r19, r1
    18c4:	a1 f0       	breq	.+40     	; 0x18ee <EXI_DISABLE+0x54>
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	9b 81       	ldd	r25, Y+3	; 0x03
    18ca:	00 97       	sbiw	r24, 0x00	; 0
    18cc:	b9 f4       	brne	.+46     	; 0x18fc <EXI_DISABLE+0x62>
	case EX_INT0:
		CLR_BIT(GICR,INT0);
    18ce:	ab e5       	ldi	r26, 0x5B	; 91
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	eb e5       	ldi	r30, 0x5B	; 91
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	8f 7b       	andi	r24, 0xBF	; 191
    18da:	8c 93       	st	X, r24
    18dc:	0f c0       	rjmp	.+30     	; 0x18fc <EXI_DISABLE+0x62>
		break;
	case EX_INT1:
		CLR_BIT(GICR,INT1);
    18de:	ab e5       	ldi	r26, 0x5B	; 91
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	eb e5       	ldi	r30, 0x5B	; 91
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	8f 77       	andi	r24, 0x7F	; 127
    18ea:	8c 93       	st	X, r24
    18ec:	07 c0       	rjmp	.+14     	; 0x18fc <EXI_DISABLE+0x62>
		break;
	case EX_INT2:
		CLR_BIT(GICR,INT2);
    18ee:	ab e5       	ldi	r26, 0x5B	; 91
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	eb e5       	ldi	r30, 0x5B	; 91
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	8f 7d       	andi	r24, 0xDF	; 223
    18fa:	8c 93       	st	X, r24
		break;
	}
}
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	cf 91       	pop	r28
    1904:	df 91       	pop	r29
    1906:	08 95       	ret

00001908 <EXI_TriggerEdge>:

void EXI_TriggerEdge(EX_Interrupt_Source_type interrupt,Trigger_Edge_type edge){
    1908:	df 93       	push	r29
    190a:	cf 93       	push	r28
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
    1910:	2a 97       	sbiw	r28, 0x0a	; 10
    1912:	0f b6       	in	r0, 0x3f	; 63
    1914:	f8 94       	cli
    1916:	de bf       	out	0x3e, r29	; 62
    1918:	0f be       	out	0x3f, r0	; 63
    191a:	cd bf       	out	0x3d, r28	; 61
    191c:	89 83       	std	Y+1, r24	; 0x01
    191e:	6a 83       	std	Y+2, r22	; 0x02
	switch(interrupt){
    1920:	89 81       	ldd	r24, Y+1	; 0x01
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	3a 87       	std	Y+10, r19	; 0x0a
    1928:	29 87       	std	Y+9, r18	; 0x09
    192a:	89 85       	ldd	r24, Y+9	; 0x09
    192c:	9a 85       	ldd	r25, Y+10	; 0x0a
    192e:	81 30       	cpi	r24, 0x01	; 1
    1930:	91 05       	cpc	r25, r1
    1932:	09 f4       	brne	.+2      	; 0x1936 <EXI_TriggerEdge+0x2e>
    1934:	66 c0       	rjmp	.+204    	; 0x1a02 <EXI_TriggerEdge+0xfa>
    1936:	29 85       	ldd	r18, Y+9	; 0x09
    1938:	3a 85       	ldd	r19, Y+10	; 0x0a
    193a:	22 30       	cpi	r18, 0x02	; 2
    193c:	31 05       	cpc	r19, r1
    193e:	09 f4       	brne	.+2      	; 0x1942 <EXI_TriggerEdge+0x3a>
    1940:	bb c0       	rjmp	.+374    	; 0x1ab8 <EXI_TriggerEdge+0x1b0>
    1942:	89 85       	ldd	r24, Y+9	; 0x09
    1944:	9a 85       	ldd	r25, Y+10	; 0x0a
    1946:	00 97       	sbiw	r24, 0x00	; 0
    1948:	09 f0       	breq	.+2      	; 0x194c <EXI_TriggerEdge+0x44>
    194a:	dd c0       	rjmp	.+442    	; 0x1b06 <EXI_TriggerEdge+0x1fe>
	case EX_INT0:
		switch(edge){
    194c:	8a 81       	ldd	r24, Y+2	; 0x02
    194e:	28 2f       	mov	r18, r24
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	38 87       	std	Y+8, r19	; 0x08
    1954:	2f 83       	std	Y+7, r18	; 0x07
    1956:	8f 81       	ldd	r24, Y+7	; 0x07
    1958:	98 85       	ldd	r25, Y+8	; 0x08
    195a:	81 30       	cpi	r24, 0x01	; 1
    195c:	91 05       	cpc	r25, r1
    195e:	21 f1       	breq	.+72     	; 0x19a8 <EXI_TriggerEdge+0xa0>
    1960:	2f 81       	ldd	r18, Y+7	; 0x07
    1962:	38 85       	ldd	r19, Y+8	; 0x08
    1964:	22 30       	cpi	r18, 0x02	; 2
    1966:	31 05       	cpc	r19, r1
    1968:	2c f4       	brge	.+10     	; 0x1974 <EXI_TriggerEdge+0x6c>
    196a:	8f 81       	ldd	r24, Y+7	; 0x07
    196c:	98 85       	ldd	r25, Y+8	; 0x08
    196e:	00 97       	sbiw	r24, 0x00	; 0
    1970:	61 f0       	breq	.+24     	; 0x198a <EXI_TriggerEdge+0x82>
    1972:	c9 c0       	rjmp	.+402    	; 0x1b06 <EXI_TriggerEdge+0x1fe>
    1974:	2f 81       	ldd	r18, Y+7	; 0x07
    1976:	38 85       	ldd	r19, Y+8	; 0x08
    1978:	22 30       	cpi	r18, 0x02	; 2
    197a:	31 05       	cpc	r19, r1
    197c:	21 f1       	breq	.+72     	; 0x19c6 <EXI_TriggerEdge+0xbe>
    197e:	8f 81       	ldd	r24, Y+7	; 0x07
    1980:	98 85       	ldd	r25, Y+8	; 0x08
    1982:	83 30       	cpi	r24, 0x03	; 3
    1984:	91 05       	cpc	r25, r1
    1986:	71 f1       	breq	.+92     	; 0x19e4 <EXI_TriggerEdge+0xdc>
    1988:	be c0       	rjmp	.+380    	; 0x1b06 <EXI_TriggerEdge+0x1fe>
		case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC00);
    198a:	a5 e5       	ldi	r26, 0x55	; 85
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	e5 e5       	ldi	r30, 0x55	; 85
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	8e 7f       	andi	r24, 0xFE	; 254
    1996:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
    1998:	a5 e5       	ldi	r26, 0x55	; 85
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	e5 e5       	ldi	r30, 0x55	; 85
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	8d 7f       	andi	r24, 0xFD	; 253
    19a4:	8c 93       	st	X, r24
    19a6:	af c0       	rjmp	.+350    	; 0x1b06 <EXI_TriggerEdge+0x1fe>
			break;
		case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC00);
    19a8:	a5 e5       	ldi	r26, 0x55	; 85
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e5 e5       	ldi	r30, 0x55	; 85
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	81 60       	ori	r24, 0x01	; 1
    19b4:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
    19b6:	a5 e5       	ldi	r26, 0x55	; 85
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e5 e5       	ldi	r30, 0x55	; 85
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	8d 7f       	andi	r24, 0xFD	; 253
    19c2:	8c 93       	st	X, r24
    19c4:	a0 c0       	rjmp	.+320    	; 0x1b06 <EXI_TriggerEdge+0x1fe>
			break;
		case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC00);
    19c6:	a5 e5       	ldi	r26, 0x55	; 85
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e5 e5       	ldi	r30, 0x55	; 85
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	8e 7f       	andi	r24, 0xFE	; 254
    19d2:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    19d4:	a5 e5       	ldi	r26, 0x55	; 85
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	e5 e5       	ldi	r30, 0x55	; 85
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	82 60       	ori	r24, 0x02	; 2
    19e0:	8c 93       	st	X, r24
    19e2:	91 c0       	rjmp	.+290    	; 0x1b06 <EXI_TriggerEdge+0x1fe>
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
    19e4:	a5 e5       	ldi	r26, 0x55	; 85
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e5 e5       	ldi	r30, 0x55	; 85
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	81 60       	ori	r24, 0x01	; 1
    19f0:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    19f2:	a5 e5       	ldi	r26, 0x55	; 85
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e5 e5       	ldi	r30, 0x55	; 85
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	82 60       	ori	r24, 0x02	; 2
    19fe:	8c 93       	st	X, r24
    1a00:	82 c0       	rjmp	.+260    	; 0x1b06 <EXI_TriggerEdge+0x1fe>
			break;
		}
		break;
		case EX_INT1:
			switch(edge){
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	28 2f       	mov	r18, r24
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	3e 83       	std	Y+6, r19	; 0x06
    1a0a:	2d 83       	std	Y+5, r18	; 0x05
    1a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a10:	81 30       	cpi	r24, 0x01	; 1
    1a12:	91 05       	cpc	r25, r1
    1a14:	21 f1       	breq	.+72     	; 0x1a5e <EXI_TriggerEdge+0x156>
    1a16:	2d 81       	ldd	r18, Y+5	; 0x05
    1a18:	3e 81       	ldd	r19, Y+6	; 0x06
    1a1a:	22 30       	cpi	r18, 0x02	; 2
    1a1c:	31 05       	cpc	r19, r1
    1a1e:	2c f4       	brge	.+10     	; 0x1a2a <EXI_TriggerEdge+0x122>
    1a20:	8d 81       	ldd	r24, Y+5	; 0x05
    1a22:	9e 81       	ldd	r25, Y+6	; 0x06
    1a24:	00 97       	sbiw	r24, 0x00	; 0
    1a26:	61 f0       	breq	.+24     	; 0x1a40 <EXI_TriggerEdge+0x138>
    1a28:	6e c0       	rjmp	.+220    	; 0x1b06 <EXI_TriggerEdge+0x1fe>
    1a2a:	2d 81       	ldd	r18, Y+5	; 0x05
    1a2c:	3e 81       	ldd	r19, Y+6	; 0x06
    1a2e:	22 30       	cpi	r18, 0x02	; 2
    1a30:	31 05       	cpc	r19, r1
    1a32:	21 f1       	breq	.+72     	; 0x1a7c <EXI_TriggerEdge+0x174>
    1a34:	8d 81       	ldd	r24, Y+5	; 0x05
    1a36:	9e 81       	ldd	r25, Y+6	; 0x06
    1a38:	83 30       	cpi	r24, 0x03	; 3
    1a3a:	91 05       	cpc	r25, r1
    1a3c:	71 f1       	breq	.+92     	; 0x1a9a <EXI_TriggerEdge+0x192>
    1a3e:	63 c0       	rjmp	.+198    	; 0x1b06 <EXI_TriggerEdge+0x1fe>
			case LOW_LEVEL:
				CLR_BIT(MCUCR,ISC10);
    1a40:	a5 e5       	ldi	r26, 0x55	; 85
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e5 e5       	ldi	r30, 0x55	; 85
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	8b 7f       	andi	r24, 0xFB	; 251
    1a4c:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC11);
    1a4e:	a5 e5       	ldi	r26, 0x55	; 85
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	e5 e5       	ldi	r30, 0x55	; 85
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	87 7f       	andi	r24, 0xF7	; 247
    1a5a:	8c 93       	st	X, r24
    1a5c:	54 c0       	rjmp	.+168    	; 0x1b06 <EXI_TriggerEdge+0x1fe>
				break;
			case ANY_LOGIC_CHANGE:
				SET_BIT(MCUCR,ISC10);
    1a5e:	a5 e5       	ldi	r26, 0x55	; 85
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	e5 e5       	ldi	r30, 0x55	; 85
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	84 60       	ori	r24, 0x04	; 4
    1a6a:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC11);
    1a6c:	a5 e5       	ldi	r26, 0x55	; 85
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	e5 e5       	ldi	r30, 0x55	; 85
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	87 7f       	andi	r24, 0xF7	; 247
    1a78:	8c 93       	st	X, r24
    1a7a:	45 c0       	rjmp	.+138    	; 0x1b06 <EXI_TriggerEdge+0x1fe>
				break;
			case FALLING_EDGE:
				CLR_BIT(MCUCR,ISC10);
    1a7c:	a5 e5       	ldi	r26, 0x55	; 85
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	e5 e5       	ldi	r30, 0x55	; 85
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	8b 7f       	andi	r24, 0xFB	; 251
    1a88:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
    1a8a:	a5 e5       	ldi	r26, 0x55	; 85
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	e5 e5       	ldi	r30, 0x55	; 85
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	88 60       	ori	r24, 0x08	; 8
    1a96:	8c 93       	st	X, r24
    1a98:	36 c0       	rjmp	.+108    	; 0x1b06 <EXI_TriggerEdge+0x1fe>
				break;
			case RISING_EDGE:
				SET_BIT(MCUCR,ISC10);
    1a9a:	a5 e5       	ldi	r26, 0x55	; 85
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	e5 e5       	ldi	r30, 0x55	; 85
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	84 60       	ori	r24, 0x04	; 4
    1aa6:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
    1aa8:	a5 e5       	ldi	r26, 0x55	; 85
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e5 e5       	ldi	r30, 0x55	; 85
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	88 60       	ori	r24, 0x08	; 8
    1ab4:	8c 93       	st	X, r24
    1ab6:	27 c0       	rjmp	.+78     	; 0x1b06 <EXI_TriggerEdge+0x1fe>
				break;
			}
			break;
			case EX_INT2:
				switch(edge){
    1ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aba:	28 2f       	mov	r18, r24
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	3c 83       	std	Y+4, r19	; 0x04
    1ac0:	2b 83       	std	Y+3, r18	; 0x03
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac6:	82 30       	cpi	r24, 0x02	; 2
    1ac8:	91 05       	cpc	r25, r1
    1aca:	31 f0       	breq	.+12     	; 0x1ad8 <EXI_TriggerEdge+0x1d0>
    1acc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ace:	3c 81       	ldd	r19, Y+4	; 0x04
    1ad0:	23 30       	cpi	r18, 0x03	; 3
    1ad2:	31 05       	cpc	r19, r1
    1ad4:	49 f0       	breq	.+18     	; 0x1ae8 <EXI_TriggerEdge+0x1e0>
    1ad6:	10 c0       	rjmp	.+32     	; 0x1af8 <EXI_TriggerEdge+0x1f0>
				case FALLING_EDGE:
					CLR_BIT(MCUCSR,ISC2);
    1ad8:	a4 e5       	ldi	r26, 0x54	; 84
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	e4 e5       	ldi	r30, 0x54	; 84
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	8f 7b       	andi	r24, 0xBF	; 191
    1ae4:	8c 93       	st	X, r24
    1ae6:	0f c0       	rjmp	.+30     	; 0x1b06 <EXI_TriggerEdge+0x1fe>
					break;
				case RISING_EDGE:
					SET_BIT(MCUCSR,ISC2);
    1ae8:	a4 e5       	ldi	r26, 0x54	; 84
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	e4 e5       	ldi	r30, 0x54	; 84
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	80 64       	ori	r24, 0x40	; 64
    1af4:	8c 93       	st	X, r24
    1af6:	07 c0       	rjmp	.+14     	; 0x1b06 <EXI_TriggerEdge+0x1fe>
					break;
				default:   // Because we haven't handled all cases just cuz of data sheet
					CLR_BIT(MCUCSR,ISC2);
    1af8:	a4 e5       	ldi	r26, 0x54	; 84
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e4 e5       	ldi	r30, 0x54	; 84
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	8f 7b       	andi	r24, 0xBF	; 191
    1b04:	8c 93       	st	X, r24
				}
				break;
	}
}
    1b06:	2a 96       	adiw	r28, 0x0a	; 10
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	f8 94       	cli
    1b0c:	de bf       	out	0x3e, r29	; 62
    1b0e:	0f be       	out	0x3f, r0	; 63
    1b10:	cd bf       	out	0x3d, r28	; 61
    1b12:	cf 91       	pop	r28
    1b14:	df 91       	pop	r29
    1b16:	08 95       	ret

00001b18 <__vector_1>:
/*                     ISR                                              */
/************************************************************************/

/* What if the user forgot to send a function to SetCallBack, We made an initialization with NULLPTR, So we can't call a NULLPTR, it will give undefined behavior  */

ISR(INT0_vect){
    1b18:	1f 92       	push	r1
    1b1a:	0f 92       	push	r0
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	0f 92       	push	r0
    1b20:	11 24       	eor	r1, r1
    1b22:	2f 93       	push	r18
    1b24:	3f 93       	push	r19
    1b26:	4f 93       	push	r20
    1b28:	5f 93       	push	r21
    1b2a:	6f 93       	push	r22
    1b2c:	7f 93       	push	r23
    1b2e:	8f 93       	push	r24
    1b30:	9f 93       	push	r25
    1b32:	af 93       	push	r26
    1b34:	bf 93       	push	r27
    1b36:	ef 93       	push	r30
    1b38:	ff 93       	push	r31
    1b3a:	df 93       	push	r29
    1b3c:	cf 93       	push	r28
    1b3e:	cd b7       	in	r28, 0x3d	; 61
    1b40:	de b7       	in	r29, 0x3e	; 62
	if(INT0_Fptr != NULLPTR){
    1b42:	80 91 08 02 	lds	r24, 0x0208
    1b46:	90 91 09 02 	lds	r25, 0x0209
    1b4a:	00 97       	sbiw	r24, 0x00	; 0
    1b4c:	29 f0       	breq	.+10     	; 0x1b58 <__vector_1+0x40>
		INT0_Fptr();
    1b4e:	e0 91 08 02 	lds	r30, 0x0208
    1b52:	f0 91 09 02 	lds	r31, 0x0209
    1b56:	09 95       	icall
	}
}
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	ff 91       	pop	r31
    1b5e:	ef 91       	pop	r30
    1b60:	bf 91       	pop	r27
    1b62:	af 91       	pop	r26
    1b64:	9f 91       	pop	r25
    1b66:	8f 91       	pop	r24
    1b68:	7f 91       	pop	r23
    1b6a:	6f 91       	pop	r22
    1b6c:	5f 91       	pop	r21
    1b6e:	4f 91       	pop	r20
    1b70:	3f 91       	pop	r19
    1b72:	2f 91       	pop	r18
    1b74:	0f 90       	pop	r0
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	0f 90       	pop	r0
    1b7a:	1f 90       	pop	r1
    1b7c:	18 95       	reti

00001b7e <__vector_2>:

ISR(INT1_vect){
    1b7e:	1f 92       	push	r1
    1b80:	0f 92       	push	r0
    1b82:	0f b6       	in	r0, 0x3f	; 63
    1b84:	0f 92       	push	r0
    1b86:	11 24       	eor	r1, r1
    1b88:	2f 93       	push	r18
    1b8a:	3f 93       	push	r19
    1b8c:	4f 93       	push	r20
    1b8e:	5f 93       	push	r21
    1b90:	6f 93       	push	r22
    1b92:	7f 93       	push	r23
    1b94:	8f 93       	push	r24
    1b96:	9f 93       	push	r25
    1b98:	af 93       	push	r26
    1b9a:	bf 93       	push	r27
    1b9c:	ef 93       	push	r30
    1b9e:	ff 93       	push	r31
    1ba0:	df 93       	push	r29
    1ba2:	cf 93       	push	r28
    1ba4:	cd b7       	in	r28, 0x3d	; 61
    1ba6:	de b7       	in	r29, 0x3e	; 62
	if(INT1_Fptr != NULLPTR){
    1ba8:	80 91 0a 02 	lds	r24, 0x020A
    1bac:	90 91 0b 02 	lds	r25, 0x020B
    1bb0:	00 97       	sbiw	r24, 0x00	; 0
    1bb2:	29 f0       	breq	.+10     	; 0x1bbe <__vector_2+0x40>
		INT1_Fptr();
    1bb4:	e0 91 0a 02 	lds	r30, 0x020A
    1bb8:	f0 91 0b 02 	lds	r31, 0x020B
    1bbc:	09 95       	icall
	}
}
    1bbe:	cf 91       	pop	r28
    1bc0:	df 91       	pop	r29
    1bc2:	ff 91       	pop	r31
    1bc4:	ef 91       	pop	r30
    1bc6:	bf 91       	pop	r27
    1bc8:	af 91       	pop	r26
    1bca:	9f 91       	pop	r25
    1bcc:	8f 91       	pop	r24
    1bce:	7f 91       	pop	r23
    1bd0:	6f 91       	pop	r22
    1bd2:	5f 91       	pop	r21
    1bd4:	4f 91       	pop	r20
    1bd6:	3f 91       	pop	r19
    1bd8:	2f 91       	pop	r18
    1bda:	0f 90       	pop	r0
    1bdc:	0f be       	out	0x3f, r0	; 63
    1bde:	0f 90       	pop	r0
    1be0:	1f 90       	pop	r1
    1be2:	18 95       	reti

00001be4 <__vector_3>:

ISR(INT2_vect){
    1be4:	1f 92       	push	r1
    1be6:	0f 92       	push	r0
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	0f 92       	push	r0
    1bec:	11 24       	eor	r1, r1
    1bee:	2f 93       	push	r18
    1bf0:	3f 93       	push	r19
    1bf2:	4f 93       	push	r20
    1bf4:	5f 93       	push	r21
    1bf6:	6f 93       	push	r22
    1bf8:	7f 93       	push	r23
    1bfa:	8f 93       	push	r24
    1bfc:	9f 93       	push	r25
    1bfe:	af 93       	push	r26
    1c00:	bf 93       	push	r27
    1c02:	ef 93       	push	r30
    1c04:	ff 93       	push	r31
    1c06:	df 93       	push	r29
    1c08:	cf 93       	push	r28
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
	if(INT2_Fptr != NULLPTR){
    1c0e:	80 91 0c 02 	lds	r24, 0x020C
    1c12:	90 91 0d 02 	lds	r25, 0x020D
    1c16:	00 97       	sbiw	r24, 0x00	; 0
    1c18:	29 f0       	breq	.+10     	; 0x1c24 <__vector_3+0x40>
		INT2_Fptr();
    1c1a:	e0 91 0c 02 	lds	r30, 0x020C
    1c1e:	f0 91 0d 02 	lds	r31, 0x020D
    1c22:	09 95       	icall
	}
}
    1c24:	cf 91       	pop	r28
    1c26:	df 91       	pop	r29
    1c28:	ff 91       	pop	r31
    1c2a:	ef 91       	pop	r30
    1c2c:	bf 91       	pop	r27
    1c2e:	af 91       	pop	r26
    1c30:	9f 91       	pop	r25
    1c32:	8f 91       	pop	r24
    1c34:	7f 91       	pop	r23
    1c36:	6f 91       	pop	r22
    1c38:	5f 91       	pop	r21
    1c3a:	4f 91       	pop	r20
    1c3c:	3f 91       	pop	r19
    1c3e:	2f 91       	pop	r18
    1c40:	0f 90       	pop	r0
    1c42:	0f be       	out	0x3f, r0	; 63
    1c44:	0f 90       	pop	r0
    1c46:	1f 90       	pop	r1
    1c48:	18 95       	reti

00001c4a <DIO_ES_tSetPinDirection>:
 * DIO_ES_tSetPinDirection is used to set pin direction
 * ( INPUT or OUTPUT )
 */

ES_t DIO_ES_tSetPinDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Dir_Type copy_u8_PinDirection)
{
    1c4a:	df 93       	push	r29
    1c4c:	cf 93       	push	r28
    1c4e:	00 d0       	rcall	.+0      	; 0x1c50 <DIO_ES_tSetPinDirection+0x6>
    1c50:	00 d0       	rcall	.+0      	; 0x1c52 <DIO_ES_tSetPinDirection+0x8>
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
    1c56:	89 83       	std	Y+1, r24	; 0x01
    1c58:	6a 83       	std	Y+2, r22	; 0x02
    1c5a:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	88 30       	cpi	r24, 0x08	; 8
    1c60:	18 f0       	brcs	.+6      	; 0x1c68 <DIO_ES_tSetPinDirection+0x1e>
		return ES_NOT_OK;
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	8c 83       	std	Y+4, r24	; 0x04
    1c66:	d8 c0       	rjmp	.+432    	; 0x1e18 <DIO_ES_tSetPinDirection+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	88 23       	and	r24, r24
    1c6c:	91 f5       	brne	.+100    	; 0x1cd2 <DIO_ES_tSetPinDirection+0x88>
		if(copy_u8_PinDirection == OUTPUT){
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	81 30       	cpi	r24, 0x01	; 1
    1c72:	a1 f4       	brne	.+40     	; 0x1c9c <DIO_ES_tSetPinDirection+0x52>
			SET_BIT(DDRA,copy_u8_PinId);
    1c74:	aa e3       	ldi	r26, 0x3A	; 58
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	ea e3       	ldi	r30, 0x3A	; 58
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	48 2f       	mov	r20, r24
    1c80:	8a 81       	ldd	r24, Y+2	; 0x02
    1c82:	28 2f       	mov	r18, r24
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	02 2e       	mov	r0, r18
    1c8c:	02 c0       	rjmp	.+4      	; 0x1c92 <DIO_ES_tSetPinDirection+0x48>
    1c8e:	88 0f       	add	r24, r24
    1c90:	99 1f       	adc	r25, r25
    1c92:	0a 94       	dec	r0
    1c94:	e2 f7       	brpl	.-8      	; 0x1c8e <DIO_ES_tSetPinDirection+0x44>
    1c96:	84 2b       	or	r24, r20
    1c98:	8c 93       	st	X, r24
    1c9a:	bd c0       	rjmp	.+378    	; 0x1e16 <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    1c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9e:	88 23       	and	r24, r24
    1ca0:	a9 f4       	brne	.+42     	; 0x1ccc <DIO_ES_tSetPinDirection+0x82>
			CLR_BIT(DDRA,copy_u8_PinId);
    1ca2:	aa e3       	ldi	r26, 0x3A	; 58
    1ca4:	b0 e0       	ldi	r27, 0x00	; 0
    1ca6:	ea e3       	ldi	r30, 0x3A	; 58
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	48 2f       	mov	r20, r24
    1cae:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb0:	28 2f       	mov	r18, r24
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	02 2e       	mov	r0, r18
    1cba:	02 c0       	rjmp	.+4      	; 0x1cc0 <DIO_ES_tSetPinDirection+0x76>
    1cbc:	88 0f       	add	r24, r24
    1cbe:	99 1f       	adc	r25, r25
    1cc0:	0a 94       	dec	r0
    1cc2:	e2 f7       	brpl	.-8      	; 0x1cbc <DIO_ES_tSetPinDirection+0x72>
    1cc4:	80 95       	com	r24
    1cc6:	84 23       	and	r24, r20
    1cc8:	8c 93       	st	X, r24
    1cca:	a5 c0       	rjmp	.+330    	; 0x1e16 <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	8c 83       	std	Y+4, r24	; 0x04
    1cd0:	a3 c0       	rjmp	.+326    	; 0x1e18 <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    1cd2:	89 81       	ldd	r24, Y+1	; 0x01
    1cd4:	81 30       	cpi	r24, 0x01	; 1
    1cd6:	91 f5       	brne	.+100    	; 0x1d3c <DIO_ES_tSetPinDirection+0xf2>
		if(copy_u8_PinDirection == OUTPUT){
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	81 30       	cpi	r24, 0x01	; 1
    1cdc:	a1 f4       	brne	.+40     	; 0x1d06 <DIO_ES_tSetPinDirection+0xbc>
			SET_BIT(DDRB,copy_u8_PinId);
    1cde:	a7 e3       	ldi	r26, 0x37	; 55
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	e7 e3       	ldi	r30, 0x37	; 55
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	48 2f       	mov	r20, r24
    1cea:	8a 81       	ldd	r24, Y+2	; 0x02
    1cec:	28 2f       	mov	r18, r24
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	02 2e       	mov	r0, r18
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <DIO_ES_tSetPinDirection+0xb2>
    1cf8:	88 0f       	add	r24, r24
    1cfa:	99 1f       	adc	r25, r25
    1cfc:	0a 94       	dec	r0
    1cfe:	e2 f7       	brpl	.-8      	; 0x1cf8 <DIO_ES_tSetPinDirection+0xae>
    1d00:	84 2b       	or	r24, r20
    1d02:	8c 93       	st	X, r24
    1d04:	88 c0       	rjmp	.+272    	; 0x1e16 <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    1d06:	8b 81       	ldd	r24, Y+3	; 0x03
    1d08:	88 23       	and	r24, r24
    1d0a:	a9 f4       	brne	.+42     	; 0x1d36 <DIO_ES_tSetPinDirection+0xec>
			CLR_BIT(DDRB,copy_u8_PinId);
    1d0c:	a7 e3       	ldi	r26, 0x37	; 55
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	e7 e3       	ldi	r30, 0x37	; 55
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	48 2f       	mov	r20, r24
    1d18:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	02 2e       	mov	r0, r18
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <DIO_ES_tSetPinDirection+0xe0>
    1d26:	88 0f       	add	r24, r24
    1d28:	99 1f       	adc	r25, r25
    1d2a:	0a 94       	dec	r0
    1d2c:	e2 f7       	brpl	.-8      	; 0x1d26 <DIO_ES_tSetPinDirection+0xdc>
    1d2e:	80 95       	com	r24
    1d30:	84 23       	and	r24, r20
    1d32:	8c 93       	st	X, r24
    1d34:	70 c0       	rjmp	.+224    	; 0x1e16 <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	8c 83       	std	Y+4, r24	; 0x04
    1d3a:	6e c0       	rjmp	.+220    	; 0x1e18 <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	82 30       	cpi	r24, 0x02	; 2
    1d40:	91 f5       	brne	.+100    	; 0x1da6 <DIO_ES_tSetPinDirection+0x15c>
		if(copy_u8_PinDirection == OUTPUT){
    1d42:	8b 81       	ldd	r24, Y+3	; 0x03
    1d44:	81 30       	cpi	r24, 0x01	; 1
    1d46:	a1 f4       	brne	.+40     	; 0x1d70 <DIO_ES_tSetPinDirection+0x126>
			SET_BIT(DDRC,copy_u8_PinId);
    1d48:	a4 e3       	ldi	r26, 0x34	; 52
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	e4 e3       	ldi	r30, 0x34	; 52
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	48 2f       	mov	r20, r24
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	28 2f       	mov	r18, r24
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	02 2e       	mov	r0, r18
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <DIO_ES_tSetPinDirection+0x11c>
    1d62:	88 0f       	add	r24, r24
    1d64:	99 1f       	adc	r25, r25
    1d66:	0a 94       	dec	r0
    1d68:	e2 f7       	brpl	.-8      	; 0x1d62 <DIO_ES_tSetPinDirection+0x118>
    1d6a:	84 2b       	or	r24, r20
    1d6c:	8c 93       	st	X, r24
    1d6e:	53 c0       	rjmp	.+166    	; 0x1e16 <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    1d70:	8b 81       	ldd	r24, Y+3	; 0x03
    1d72:	88 23       	and	r24, r24
    1d74:	a9 f4       	brne	.+42     	; 0x1da0 <DIO_ES_tSetPinDirection+0x156>
			CLR_BIT(DDRC,copy_u8_PinId);
    1d76:	a4 e3       	ldi	r26, 0x34	; 52
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	e4 e3       	ldi	r30, 0x34	; 52
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	48 2f       	mov	r20, r24
    1d82:	8a 81       	ldd	r24, Y+2	; 0x02
    1d84:	28 2f       	mov	r18, r24
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	02 2e       	mov	r0, r18
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <DIO_ES_tSetPinDirection+0x14a>
    1d90:	88 0f       	add	r24, r24
    1d92:	99 1f       	adc	r25, r25
    1d94:	0a 94       	dec	r0
    1d96:	e2 f7       	brpl	.-8      	; 0x1d90 <DIO_ES_tSetPinDirection+0x146>
    1d98:	80 95       	com	r24
    1d9a:	84 23       	and	r24, r20
    1d9c:	8c 93       	st	X, r24
    1d9e:	3b c0       	rjmp	.+118    	; 0x1e16 <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	8c 83       	std	Y+4, r24	; 0x04
    1da4:	39 c0       	rjmp	.+114    	; 0x1e18 <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
    1da8:	83 30       	cpi	r24, 0x03	; 3
    1daa:	91 f5       	brne	.+100    	; 0x1e10 <DIO_ES_tSetPinDirection+0x1c6>
		if(copy_u8_PinDirection == OUTPUT){
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	81 30       	cpi	r24, 0x01	; 1
    1db0:	a1 f4       	brne	.+40     	; 0x1dda <DIO_ES_tSetPinDirection+0x190>
			SET_BIT(DDRD,copy_u8_PinId);
    1db2:	a1 e3       	ldi	r26, 0x31	; 49
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	e1 e3       	ldi	r30, 0x31	; 49
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	48 2f       	mov	r20, r24
    1dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc0:	28 2f       	mov	r18, r24
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	02 2e       	mov	r0, r18
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <DIO_ES_tSetPinDirection+0x186>
    1dcc:	88 0f       	add	r24, r24
    1dce:	99 1f       	adc	r25, r25
    1dd0:	0a 94       	dec	r0
    1dd2:	e2 f7       	brpl	.-8      	; 0x1dcc <DIO_ES_tSetPinDirection+0x182>
    1dd4:	84 2b       	or	r24, r20
    1dd6:	8c 93       	st	X, r24
    1dd8:	1e c0       	rjmp	.+60     	; 0x1e16 <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    1dda:	8b 81       	ldd	r24, Y+3	; 0x03
    1ddc:	88 23       	and	r24, r24
    1dde:	a9 f4       	brne	.+42     	; 0x1e0a <DIO_ES_tSetPinDirection+0x1c0>
			CLR_BIT(DDRD,copy_u8_PinId);
    1de0:	a1 e3       	ldi	r26, 0x31	; 49
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	e1 e3       	ldi	r30, 0x31	; 49
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	48 2f       	mov	r20, r24
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	28 2f       	mov	r18, r24
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	02 2e       	mov	r0, r18
    1df8:	02 c0       	rjmp	.+4      	; 0x1dfe <DIO_ES_tSetPinDirection+0x1b4>
    1dfa:	88 0f       	add	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	0a 94       	dec	r0
    1e00:	e2 f7       	brpl	.-8      	; 0x1dfa <DIO_ES_tSetPinDirection+0x1b0>
    1e02:	80 95       	com	r24
    1e04:	84 23       	and	r24, r20
    1e06:	8c 93       	st	X, r24
    1e08:	06 c0       	rjmp	.+12     	; 0x1e16 <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	8c 83       	std	Y+4, r24	; 0x04
    1e0e:	04 c0       	rjmp	.+8      	; 0x1e18 <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else{
		return ES_NOT_OK;
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	8c 83       	std	Y+4, r24	; 0x04
    1e14:	01 c0       	rjmp	.+2      	; 0x1e18 <DIO_ES_tSetPinDirection+0x1ce>
	}
	return ES_OK;
    1e16:	1c 82       	std	Y+4, r1	; 0x04
    1e18:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	cf 91       	pop	r28
    1e24:	df 91       	pop	r29
    1e26:	08 95       	ret

00001e28 <DIO_ES_tSetPinValue>:
 * DIO_ES_tSetPinValue is used to set pin value
 * ( LOW or HIGH )
 */

ES_t DIO_ES_tSetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type copy_u8_PinValue)
{
    1e28:	df 93       	push	r29
    1e2a:	cf 93       	push	r28
    1e2c:	00 d0       	rcall	.+0      	; 0x1e2e <DIO_ES_tSetPinValue+0x6>
    1e2e:	00 d0       	rcall	.+0      	; 0x1e30 <DIO_ES_tSetPinValue+0x8>
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
    1e34:	89 83       	std	Y+1, r24	; 0x01
    1e36:	6a 83       	std	Y+2, r22	; 0x02
    1e38:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    1e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3c:	88 30       	cpi	r24, 0x08	; 8
    1e3e:	18 f0       	brcs	.+6      	; 0x1e46 <DIO_ES_tSetPinValue+0x1e>
		return ES_NOT_OK;
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	8c 83       	std	Y+4, r24	; 0x04
    1e44:	d8 c0       	rjmp	.+432    	; 0x1ff6 <DIO_ES_tSetPinValue+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	88 23       	and	r24, r24
    1e4a:	91 f5       	brne	.+100    	; 0x1eb0 <DIO_ES_tSetPinValue+0x88>
		if(copy_u8_PinValue == HIGH){
    1e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4e:	81 30       	cpi	r24, 0x01	; 1
    1e50:	a1 f4       	brne	.+40     	; 0x1e7a <DIO_ES_tSetPinValue+0x52>
			SET_BIT(PORTA,copy_u8_PinId);
    1e52:	ab e3       	ldi	r26, 0x3B	; 59
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	eb e3       	ldi	r30, 0x3B	; 59
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	48 2f       	mov	r20, r24
    1e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e60:	28 2f       	mov	r18, r24
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	02 2e       	mov	r0, r18
    1e6a:	02 c0       	rjmp	.+4      	; 0x1e70 <DIO_ES_tSetPinValue+0x48>
    1e6c:	88 0f       	add	r24, r24
    1e6e:	99 1f       	adc	r25, r25
    1e70:	0a 94       	dec	r0
    1e72:	e2 f7       	brpl	.-8      	; 0x1e6c <DIO_ES_tSetPinValue+0x44>
    1e74:	84 2b       	or	r24, r20
    1e76:	8c 93       	st	X, r24
    1e78:	bd c0       	rjmp	.+378    	; 0x1ff4 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    1e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7c:	88 23       	and	r24, r24
    1e7e:	a9 f4       	brne	.+42     	; 0x1eaa <DIO_ES_tSetPinValue+0x82>
			CLR_BIT(PORTA,copy_u8_PinId);
    1e80:	ab e3       	ldi	r26, 0x3B	; 59
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	eb e3       	ldi	r30, 0x3B	; 59
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	48 2f       	mov	r20, r24
    1e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8e:	28 2f       	mov	r18, r24
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	02 2e       	mov	r0, r18
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <DIO_ES_tSetPinValue+0x76>
    1e9a:	88 0f       	add	r24, r24
    1e9c:	99 1f       	adc	r25, r25
    1e9e:	0a 94       	dec	r0
    1ea0:	e2 f7       	brpl	.-8      	; 0x1e9a <DIO_ES_tSetPinValue+0x72>
    1ea2:	80 95       	com	r24
    1ea4:	84 23       	and	r24, r20
    1ea6:	8c 93       	st	X, r24
    1ea8:	a5 c0       	rjmp	.+330    	; 0x1ff4 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	8c 83       	std	Y+4, r24	; 0x04
    1eae:	a3 c0       	rjmp	.+326    	; 0x1ff6 <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	81 30       	cpi	r24, 0x01	; 1
    1eb4:	91 f5       	brne	.+100    	; 0x1f1a <DIO_ES_tSetPinValue+0xf2>
		if(copy_u8_PinValue == HIGH){
    1eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb8:	81 30       	cpi	r24, 0x01	; 1
    1eba:	a1 f4       	brne	.+40     	; 0x1ee4 <DIO_ES_tSetPinValue+0xbc>
			SET_BIT(PORTB,copy_u8_PinId);
    1ebc:	a8 e3       	ldi	r26, 0x38	; 56
    1ebe:	b0 e0       	ldi	r27, 0x00	; 0
    1ec0:	e8 e3       	ldi	r30, 0x38	; 56
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	48 2f       	mov	r20, r24
    1ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eca:	28 2f       	mov	r18, r24
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	02 2e       	mov	r0, r18
    1ed4:	02 c0       	rjmp	.+4      	; 0x1eda <DIO_ES_tSetPinValue+0xb2>
    1ed6:	88 0f       	add	r24, r24
    1ed8:	99 1f       	adc	r25, r25
    1eda:	0a 94       	dec	r0
    1edc:	e2 f7       	brpl	.-8      	; 0x1ed6 <DIO_ES_tSetPinValue+0xae>
    1ede:	84 2b       	or	r24, r20
    1ee0:	8c 93       	st	X, r24
    1ee2:	88 c0       	rjmp	.+272    	; 0x1ff4 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    1ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee6:	88 23       	and	r24, r24
    1ee8:	a9 f4       	brne	.+42     	; 0x1f14 <DIO_ES_tSetPinValue+0xec>
			CLR_BIT(PORTB,copy_u8_PinId);
    1eea:	a8 e3       	ldi	r26, 0x38	; 56
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	e8 e3       	ldi	r30, 0x38	; 56
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	48 2f       	mov	r20, r24
    1ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef8:	28 2f       	mov	r18, r24
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	02 2e       	mov	r0, r18
    1f02:	02 c0       	rjmp	.+4      	; 0x1f08 <DIO_ES_tSetPinValue+0xe0>
    1f04:	88 0f       	add	r24, r24
    1f06:	99 1f       	adc	r25, r25
    1f08:	0a 94       	dec	r0
    1f0a:	e2 f7       	brpl	.-8      	; 0x1f04 <DIO_ES_tSetPinValue+0xdc>
    1f0c:	80 95       	com	r24
    1f0e:	84 23       	and	r24, r20
    1f10:	8c 93       	st	X, r24
    1f12:	70 c0       	rjmp	.+224    	; 0x1ff4 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	8c 83       	std	Y+4, r24	; 0x04
    1f18:	6e c0       	rjmp	.+220    	; 0x1ff6 <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	82 30       	cpi	r24, 0x02	; 2
    1f1e:	91 f5       	brne	.+100    	; 0x1f84 <DIO_ES_tSetPinValue+0x15c>
		if(copy_u8_PinValue == HIGH){
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	81 30       	cpi	r24, 0x01	; 1
    1f24:	a1 f4       	brne	.+40     	; 0x1f4e <DIO_ES_tSetPinValue+0x126>
			SET_BIT(PORTC,copy_u8_PinId);
    1f26:	a5 e3       	ldi	r26, 0x35	; 53
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	e5 e3       	ldi	r30, 0x35	; 53
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	48 2f       	mov	r20, r24
    1f32:	8a 81       	ldd	r24, Y+2	; 0x02
    1f34:	28 2f       	mov	r18, r24
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	02 2e       	mov	r0, r18
    1f3e:	02 c0       	rjmp	.+4      	; 0x1f44 <DIO_ES_tSetPinValue+0x11c>
    1f40:	88 0f       	add	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	0a 94       	dec	r0
    1f46:	e2 f7       	brpl	.-8      	; 0x1f40 <DIO_ES_tSetPinValue+0x118>
    1f48:	84 2b       	or	r24, r20
    1f4a:	8c 93       	st	X, r24
    1f4c:	53 c0       	rjmp	.+166    	; 0x1ff4 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    1f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f50:	88 23       	and	r24, r24
    1f52:	a9 f4       	brne	.+42     	; 0x1f7e <DIO_ES_tSetPinValue+0x156>
			CLR_BIT(PORTC,copy_u8_PinId);
    1f54:	a5 e3       	ldi	r26, 0x35	; 53
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	e5 e3       	ldi	r30, 0x35	; 53
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	80 81       	ld	r24, Z
    1f5e:	48 2f       	mov	r20, r24
    1f60:	8a 81       	ldd	r24, Y+2	; 0x02
    1f62:	28 2f       	mov	r18, r24
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	02 2e       	mov	r0, r18
    1f6c:	02 c0       	rjmp	.+4      	; 0x1f72 <DIO_ES_tSetPinValue+0x14a>
    1f6e:	88 0f       	add	r24, r24
    1f70:	99 1f       	adc	r25, r25
    1f72:	0a 94       	dec	r0
    1f74:	e2 f7       	brpl	.-8      	; 0x1f6e <DIO_ES_tSetPinValue+0x146>
    1f76:	80 95       	com	r24
    1f78:	84 23       	and	r24, r20
    1f7a:	8c 93       	st	X, r24
    1f7c:	3b c0       	rjmp	.+118    	; 0x1ff4 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	8c 83       	std	Y+4, r24	; 0x04
    1f82:	39 c0       	rjmp	.+114    	; 0x1ff6 <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	83 30       	cpi	r24, 0x03	; 3
    1f88:	91 f5       	brne	.+100    	; 0x1fee <DIO_ES_tSetPinValue+0x1c6>
		if(copy_u8_PinValue == HIGH){
    1f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8c:	81 30       	cpi	r24, 0x01	; 1
    1f8e:	a1 f4       	brne	.+40     	; 0x1fb8 <DIO_ES_tSetPinValue+0x190>
			SET_BIT(PORTD,copy_u8_PinId);
    1f90:	a2 e3       	ldi	r26, 0x32	; 50
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	e2 e3       	ldi	r30, 0x32	; 50
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	80 81       	ld	r24, Z
    1f9a:	48 2f       	mov	r20, r24
    1f9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9e:	28 2f       	mov	r18, r24
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	02 2e       	mov	r0, r18
    1fa8:	02 c0       	rjmp	.+4      	; 0x1fae <DIO_ES_tSetPinValue+0x186>
    1faa:	88 0f       	add	r24, r24
    1fac:	99 1f       	adc	r25, r25
    1fae:	0a 94       	dec	r0
    1fb0:	e2 f7       	brpl	.-8      	; 0x1faa <DIO_ES_tSetPinValue+0x182>
    1fb2:	84 2b       	or	r24, r20
    1fb4:	8c 93       	st	X, r24
    1fb6:	1e c0       	rjmp	.+60     	; 0x1ff4 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    1fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fba:	88 23       	and	r24, r24
    1fbc:	a9 f4       	brne	.+42     	; 0x1fe8 <DIO_ES_tSetPinValue+0x1c0>
			CLR_BIT(PORTD,copy_u8_PinId);
    1fbe:	a2 e3       	ldi	r26, 0x32	; 50
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	e2 e3       	ldi	r30, 0x32	; 50
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	48 2f       	mov	r20, r24
    1fca:	8a 81       	ldd	r24, Y+2	; 0x02
    1fcc:	28 2f       	mov	r18, r24
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	02 2e       	mov	r0, r18
    1fd6:	02 c0       	rjmp	.+4      	; 0x1fdc <DIO_ES_tSetPinValue+0x1b4>
    1fd8:	88 0f       	add	r24, r24
    1fda:	99 1f       	adc	r25, r25
    1fdc:	0a 94       	dec	r0
    1fde:	e2 f7       	brpl	.-8      	; 0x1fd8 <DIO_ES_tSetPinValue+0x1b0>
    1fe0:	80 95       	com	r24
    1fe2:	84 23       	and	r24, r20
    1fe4:	8c 93       	st	X, r24
    1fe6:	06 c0       	rjmp	.+12     	; 0x1ff4 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	8c 83       	std	Y+4, r24	; 0x04
    1fec:	04 c0       	rjmp	.+8      	; 0x1ff6 <DIO_ES_tSetPinValue+0x1ce>
		}
	}else{
		return ES_NOT_OK;
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	8c 83       	std	Y+4, r24	; 0x04
    1ff2:	01 c0       	rjmp	.+2      	; 0x1ff6 <DIO_ES_tSetPinValue+0x1ce>
	}
	return ES_OK;
    1ff4:	1c 82       	std	Y+4, r1	; 0x04
    1ff6:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1ff8:	0f 90       	pop	r0
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	cf 91       	pop	r28
    2002:	df 91       	pop	r29
    2004:	08 95       	ret

00002006 <DIO_ES_tGetPinValue>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tGetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type* copy_pu8_PinValue)
{
    2006:	df 93       	push	r29
    2008:	cf 93       	push	r28
    200a:	00 d0       	rcall	.+0      	; 0x200c <DIO_ES_tGetPinValue+0x6>
    200c:	00 d0       	rcall	.+0      	; 0x200e <DIO_ES_tGetPinValue+0x8>
    200e:	0f 92       	push	r0
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
    2014:	89 83       	std	Y+1, r24	; 0x01
    2016:	6a 83       	std	Y+2, r22	; 0x02
    2018:	5c 83       	std	Y+4, r21	; 0x04
    201a:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    201c:	8a 81       	ldd	r24, Y+2	; 0x02
    201e:	88 30       	cpi	r24, 0x08	; 8
    2020:	18 f0       	brcs	.+6      	; 0x2028 <DIO_ES_tGetPinValue+0x22>
		return ES_NOT_OK;
    2022:	41 e0       	ldi	r20, 0x01	; 1
    2024:	4d 83       	std	Y+5, r20	; 0x05
    2026:	60 c0       	rjmp	.+192    	; 0x20e8 <DIO_ES_tGetPinValue+0xe2>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	88 23       	and	r24, r24
    202c:	a1 f4       	brne	.+40     	; 0x2056 <DIO_ES_tGetPinValue+0x50>
		*copy_pu8_PinValue = GET_BIT(PINA,copy_u8_PinId);
    202e:	e9 e3       	ldi	r30, 0x39	; 57
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	28 2f       	mov	r18, r24
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	8a 81       	ldd	r24, Y+2	; 0x02
    203a:	88 2f       	mov	r24, r24
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	a9 01       	movw	r20, r18
    2040:	02 c0       	rjmp	.+4      	; 0x2046 <DIO_ES_tGetPinValue+0x40>
    2042:	55 95       	asr	r21
    2044:	47 95       	ror	r20
    2046:	8a 95       	dec	r24
    2048:	e2 f7       	brpl	.-8      	; 0x2042 <DIO_ES_tGetPinValue+0x3c>
    204a:	ca 01       	movw	r24, r20
    204c:	81 70       	andi	r24, 0x01	; 1
    204e:	eb 81       	ldd	r30, Y+3	; 0x03
    2050:	fc 81       	ldd	r31, Y+4	; 0x04
    2052:	80 83       	st	Z, r24
    2054:	48 c0       	rjmp	.+144    	; 0x20e6 <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	81 30       	cpi	r24, 0x01	; 1
    205a:	a1 f4       	brne	.+40     	; 0x2084 <DIO_ES_tGetPinValue+0x7e>
		*copy_pu8_PinValue = GET_BIT(PINB,copy_u8_PinId);
    205c:	e6 e3       	ldi	r30, 0x36	; 54
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	28 2f       	mov	r18, r24
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	88 2f       	mov	r24, r24
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	a9 01       	movw	r20, r18
    206e:	02 c0       	rjmp	.+4      	; 0x2074 <DIO_ES_tGetPinValue+0x6e>
    2070:	55 95       	asr	r21
    2072:	47 95       	ror	r20
    2074:	8a 95       	dec	r24
    2076:	e2 f7       	brpl	.-8      	; 0x2070 <DIO_ES_tGetPinValue+0x6a>
    2078:	ca 01       	movw	r24, r20
    207a:	81 70       	andi	r24, 0x01	; 1
    207c:	eb 81       	ldd	r30, Y+3	; 0x03
    207e:	fc 81       	ldd	r31, Y+4	; 0x04
    2080:	80 83       	st	Z, r24
    2082:	31 c0       	rjmp	.+98     	; 0x20e6 <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    2084:	89 81       	ldd	r24, Y+1	; 0x01
    2086:	82 30       	cpi	r24, 0x02	; 2
    2088:	a1 f4       	brne	.+40     	; 0x20b2 <DIO_ES_tGetPinValue+0xac>
		*copy_pu8_PinValue = GET_BIT(PINC,copy_u8_PinId);
    208a:	e3 e3       	ldi	r30, 0x33	; 51
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	28 2f       	mov	r18, r24
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	8a 81       	ldd	r24, Y+2	; 0x02
    2096:	88 2f       	mov	r24, r24
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	a9 01       	movw	r20, r18
    209c:	02 c0       	rjmp	.+4      	; 0x20a2 <DIO_ES_tGetPinValue+0x9c>
    209e:	55 95       	asr	r21
    20a0:	47 95       	ror	r20
    20a2:	8a 95       	dec	r24
    20a4:	e2 f7       	brpl	.-8      	; 0x209e <DIO_ES_tGetPinValue+0x98>
    20a6:	ca 01       	movw	r24, r20
    20a8:	81 70       	andi	r24, 0x01	; 1
    20aa:	eb 81       	ldd	r30, Y+3	; 0x03
    20ac:	fc 81       	ldd	r31, Y+4	; 0x04
    20ae:	80 83       	st	Z, r24
    20b0:	1a c0       	rjmp	.+52     	; 0x20e6 <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	83 30       	cpi	r24, 0x03	; 3
    20b6:	a1 f4       	brne	.+40     	; 0x20e0 <DIO_ES_tGetPinValue+0xda>
		*copy_pu8_PinValue = GET_BIT(PIND,copy_u8_PinId);
    20b8:	e0 e3       	ldi	r30, 0x30	; 48
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	28 2f       	mov	r18, r24
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	8a 81       	ldd	r24, Y+2	; 0x02
    20c4:	88 2f       	mov	r24, r24
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	a9 01       	movw	r20, r18
    20ca:	02 c0       	rjmp	.+4      	; 0x20d0 <DIO_ES_tGetPinValue+0xca>
    20cc:	55 95       	asr	r21
    20ce:	47 95       	ror	r20
    20d0:	8a 95       	dec	r24
    20d2:	e2 f7       	brpl	.-8      	; 0x20cc <DIO_ES_tGetPinValue+0xc6>
    20d4:	ca 01       	movw	r24, r20
    20d6:	81 70       	andi	r24, 0x01	; 1
    20d8:	eb 81       	ldd	r30, Y+3	; 0x03
    20da:	fc 81       	ldd	r31, Y+4	; 0x04
    20dc:	80 83       	st	Z, r24
    20de:	03 c0       	rjmp	.+6      	; 0x20e6 <DIO_ES_tGetPinValue+0xe0>
	}else{
		return ES_NOT_OK;
    20e0:	51 e0       	ldi	r21, 0x01	; 1
    20e2:	5d 83       	std	Y+5, r21	; 0x05
    20e4:	01 c0       	rjmp	.+2      	; 0x20e8 <DIO_ES_tGetPinValue+0xe2>
	}
	return ES_OK;
    20e6:	1d 82       	std	Y+5, r1	; 0x05
    20e8:	8d 81       	ldd	r24, Y+5	; 0x05
}
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	cf 91       	pop	r28
    20f6:	df 91       	pop	r29
    20f8:	08 95       	ret

000020fa <DIO_ES_tSetPortDirection>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tSetPortDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Dir_Type copy_u8_PortDirection)
{
    20fa:	df 93       	push	r29
    20fc:	cf 93       	push	r28
    20fe:	00 d0       	rcall	.+0      	; 0x2100 <DIO_ES_tSetPortDirection+0x6>
    2100:	00 d0       	rcall	.+0      	; 0x2102 <DIO_ES_tSetPortDirection+0x8>
    2102:	0f 92       	push	r0
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
    2108:	89 83       	std	Y+1, r24	; 0x01
    210a:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortDirection != OUTPUT) && (copy_u8_PortDirection != OUTPUT)){
    210c:	8a 81       	ldd	r24, Y+2	; 0x02
    210e:	81 30       	cpi	r24, 0x01	; 1
    2110:	31 f0       	breq	.+12     	; 0x211e <DIO_ES_tSetPortDirection+0x24>
    2112:	8a 81       	ldd	r24, Y+2	; 0x02
    2114:	81 30       	cpi	r24, 0x01	; 1
    2116:	19 f0       	breq	.+6      	; 0x211e <DIO_ES_tSetPortDirection+0x24>
		return ES_NOT_OK;
    2118:	21 e0       	ldi	r18, 0x01	; 1
    211a:	2d 83       	std	Y+5, r18	; 0x05
    211c:	53 c0       	rjmp	.+166    	; 0x21c4 <DIO_ES_tSetPortDirection+0xca>
	}
	switch(copy_u8_PortId){
    211e:	89 81       	ldd	r24, Y+1	; 0x01
    2120:	28 2f       	mov	r18, r24
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	3c 83       	std	Y+4, r19	; 0x04
    2126:	2b 83       	std	Y+3, r18	; 0x03
    2128:	8b 81       	ldd	r24, Y+3	; 0x03
    212a:	9c 81       	ldd	r25, Y+4	; 0x04
    212c:	81 30       	cpi	r24, 0x01	; 1
    212e:	91 05       	cpc	r25, r1
    2130:	09 f1       	breq	.+66     	; 0x2174 <DIO_ES_tSetPortDirection+0x7a>
    2132:	2b 81       	ldd	r18, Y+3	; 0x03
    2134:	3c 81       	ldd	r19, Y+4	; 0x04
    2136:	22 30       	cpi	r18, 0x02	; 2
    2138:	31 05       	cpc	r19, r1
    213a:	2c f4       	brge	.+10     	; 0x2146 <DIO_ES_tSetPortDirection+0x4c>
    213c:	8b 81       	ldd	r24, Y+3	; 0x03
    213e:	9c 81       	ldd	r25, Y+4	; 0x04
    2140:	00 97       	sbiw	r24, 0x00	; 0
    2142:	61 f0       	breq	.+24     	; 0x215c <DIO_ES_tSetPortDirection+0x62>
    2144:	3b c0       	rjmp	.+118    	; 0x21bc <DIO_ES_tSetPortDirection+0xc2>
    2146:	2b 81       	ldd	r18, Y+3	; 0x03
    2148:	3c 81       	ldd	r19, Y+4	; 0x04
    214a:	22 30       	cpi	r18, 0x02	; 2
    214c:	31 05       	cpc	r19, r1
    214e:	f1 f0       	breq	.+60     	; 0x218c <DIO_ES_tSetPortDirection+0x92>
    2150:	8b 81       	ldd	r24, Y+3	; 0x03
    2152:	9c 81       	ldd	r25, Y+4	; 0x04
    2154:	83 30       	cpi	r24, 0x03	; 3
    2156:	91 05       	cpc	r25, r1
    2158:	29 f1       	breq	.+74     	; 0x21a4 <DIO_ES_tSetPortDirection+0xaa>
    215a:	30 c0       	rjmp	.+96     	; 0x21bc <DIO_ES_tSetPortDirection+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortDirection == OUTPUT)
    215c:	8a 81       	ldd	r24, Y+2	; 0x02
    215e:	81 30       	cpi	r24, 0x01	; 1
    2160:	29 f4       	brne	.+10     	; 0x216c <DIO_ES_tSetPortDirection+0x72>
			DDRA = 0xff;
    2162:	ea e3       	ldi	r30, 0x3A	; 58
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	8f ef       	ldi	r24, 0xFF	; 255
    2168:	80 83       	st	Z, r24
    216a:	2b c0       	rjmp	.+86     	; 0x21c2 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRA = 0x00;
    216c:	ea e3       	ldi	r30, 0x3A	; 58
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	10 82       	st	Z, r1
    2172:	27 c0       	rjmp	.+78     	; 0x21c2 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortDirection == OUTPUT)
    2174:	8a 81       	ldd	r24, Y+2	; 0x02
    2176:	81 30       	cpi	r24, 0x01	; 1
    2178:	29 f4       	brne	.+10     	; 0x2184 <DIO_ES_tSetPortDirection+0x8a>
			DDRB = 0xff;
    217a:	e7 e3       	ldi	r30, 0x37	; 55
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	8f ef       	ldi	r24, 0xFF	; 255
    2180:	80 83       	st	Z, r24
    2182:	1f c0       	rjmp	.+62     	; 0x21c2 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRB = 0x00;
    2184:	e7 e3       	ldi	r30, 0x37	; 55
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	10 82       	st	Z, r1
    218a:	1b c0       	rjmp	.+54     	; 0x21c2 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortDirection == OUTPUT)
    218c:	8a 81       	ldd	r24, Y+2	; 0x02
    218e:	81 30       	cpi	r24, 0x01	; 1
    2190:	29 f4       	brne	.+10     	; 0x219c <DIO_ES_tSetPortDirection+0xa2>
			DDRC = 0xff;
    2192:	e4 e3       	ldi	r30, 0x34	; 52
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	8f ef       	ldi	r24, 0xFF	; 255
    2198:	80 83       	st	Z, r24
    219a:	13 c0       	rjmp	.+38     	; 0x21c2 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRC = 0x00;
    219c:	e4 e3       	ldi	r30, 0x34	; 52
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	10 82       	st	Z, r1
    21a2:	0f c0       	rjmp	.+30     	; 0x21c2 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortDirection == OUTPUT)
    21a4:	8a 81       	ldd	r24, Y+2	; 0x02
    21a6:	81 30       	cpi	r24, 0x01	; 1
    21a8:	29 f4       	brne	.+10     	; 0x21b4 <DIO_ES_tSetPortDirection+0xba>
			DDRD = 0xff;
    21aa:	e1 e3       	ldi	r30, 0x31	; 49
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	8f ef       	ldi	r24, 0xFF	; 255
    21b0:	80 83       	st	Z, r24
    21b2:	07 c0       	rjmp	.+14     	; 0x21c2 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRD = 0x00;
    21b4:	e1 e3       	ldi	r30, 0x31	; 49
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	10 82       	st	Z, r1
    21ba:	03 c0       	rjmp	.+6      	; 0x21c2 <DIO_ES_tSetPortDirection+0xc8>
		break;
	default:
		return ES_NOT_OK;
    21bc:	91 e0       	ldi	r25, 0x01	; 1
    21be:	9d 83       	std	Y+5, r25	; 0x05
    21c0:	01 c0       	rjmp	.+2      	; 0x21c4 <DIO_ES_tSetPortDirection+0xca>
		break;
	}
	return ES_OK;
    21c2:	1d 82       	std	Y+5, r1	; 0x05
    21c4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    21c6:	0f 90       	pop	r0
    21c8:	0f 90       	pop	r0
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	0f 90       	pop	r0
    21d0:	cf 91       	pop	r28
    21d2:	df 91       	pop	r29
    21d4:	08 95       	ret

000021d6 <DIO_ES_tSetPortValue>:



ES_t DIO_ES_tSetPortValue(DIO_U8_Port_Type copy_u8_PortId, u8 copy_u8_PortValue)
{
    21d6:	df 93       	push	r29
    21d8:	cf 93       	push	r28
    21da:	00 d0       	rcall	.+0      	; 0x21dc <DIO_ES_tSetPortValue+0x6>
    21dc:	00 d0       	rcall	.+0      	; 0x21de <DIO_ES_tSetPortValue+0x8>
    21de:	0f 92       	push	r0
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62
    21e4:	89 83       	std	Y+1, r24	; 0x01
    21e6:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortValue != HIGH) && (copy_u8_PortValue != LOW)){
    21e8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ea:	81 30       	cpi	r24, 0x01	; 1
    21ec:	31 f0       	breq	.+12     	; 0x21fa <DIO_ES_tSetPortValue+0x24>
    21ee:	8a 81       	ldd	r24, Y+2	; 0x02
    21f0:	88 23       	and	r24, r24
    21f2:	19 f0       	breq	.+6      	; 0x21fa <DIO_ES_tSetPortValue+0x24>
		return ES_NOT_OK;
    21f4:	21 e0       	ldi	r18, 0x01	; 1
    21f6:	2d 83       	std	Y+5, r18	; 0x05
    21f8:	53 c0       	rjmp	.+166    	; 0x22a0 <DIO_ES_tSetPortValue+0xca>
	}
	switch(copy_u8_PortId){
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	28 2f       	mov	r18, r24
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	3c 83       	std	Y+4, r19	; 0x04
    2202:	2b 83       	std	Y+3, r18	; 0x03
    2204:	8b 81       	ldd	r24, Y+3	; 0x03
    2206:	9c 81       	ldd	r25, Y+4	; 0x04
    2208:	81 30       	cpi	r24, 0x01	; 1
    220a:	91 05       	cpc	r25, r1
    220c:	09 f1       	breq	.+66     	; 0x2250 <DIO_ES_tSetPortValue+0x7a>
    220e:	2b 81       	ldd	r18, Y+3	; 0x03
    2210:	3c 81       	ldd	r19, Y+4	; 0x04
    2212:	22 30       	cpi	r18, 0x02	; 2
    2214:	31 05       	cpc	r19, r1
    2216:	2c f4       	brge	.+10     	; 0x2222 <DIO_ES_tSetPortValue+0x4c>
    2218:	8b 81       	ldd	r24, Y+3	; 0x03
    221a:	9c 81       	ldd	r25, Y+4	; 0x04
    221c:	00 97       	sbiw	r24, 0x00	; 0
    221e:	61 f0       	breq	.+24     	; 0x2238 <DIO_ES_tSetPortValue+0x62>
    2220:	3b c0       	rjmp	.+118    	; 0x2298 <DIO_ES_tSetPortValue+0xc2>
    2222:	2b 81       	ldd	r18, Y+3	; 0x03
    2224:	3c 81       	ldd	r19, Y+4	; 0x04
    2226:	22 30       	cpi	r18, 0x02	; 2
    2228:	31 05       	cpc	r19, r1
    222a:	f1 f0       	breq	.+60     	; 0x2268 <DIO_ES_tSetPortValue+0x92>
    222c:	8b 81       	ldd	r24, Y+3	; 0x03
    222e:	9c 81       	ldd	r25, Y+4	; 0x04
    2230:	83 30       	cpi	r24, 0x03	; 3
    2232:	91 05       	cpc	r25, r1
    2234:	29 f1       	breq	.+74     	; 0x2280 <DIO_ES_tSetPortValue+0xaa>
    2236:	30 c0       	rjmp	.+96     	; 0x2298 <DIO_ES_tSetPortValue+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortValue == HIGH)
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	81 30       	cpi	r24, 0x01	; 1
    223c:	29 f4       	brne	.+10     	; 0x2248 <DIO_ES_tSetPortValue+0x72>
			PORTA = 0xff;
    223e:	eb e3       	ldi	r30, 0x3B	; 59
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	8f ef       	ldi	r24, 0xFF	; 255
    2244:	80 83       	st	Z, r24
    2246:	2b c0       	rjmp	.+86     	; 0x229e <DIO_ES_tSetPortValue+0xc8>
		else
			PORTA = 0x00;
    2248:	eb e3       	ldi	r30, 0x3B	; 59
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	10 82       	st	Z, r1
    224e:	27 c0       	rjmp	.+78     	; 0x229e <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortValue == HIGH)
    2250:	8a 81       	ldd	r24, Y+2	; 0x02
    2252:	81 30       	cpi	r24, 0x01	; 1
    2254:	29 f4       	brne	.+10     	; 0x2260 <DIO_ES_tSetPortValue+0x8a>
			PORTB = 0xff;
    2256:	e8 e3       	ldi	r30, 0x38	; 56
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	8f ef       	ldi	r24, 0xFF	; 255
    225c:	80 83       	st	Z, r24
    225e:	1f c0       	rjmp	.+62     	; 0x229e <DIO_ES_tSetPortValue+0xc8>
		else
			PORTB = 0x00;
    2260:	e8 e3       	ldi	r30, 0x38	; 56
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	10 82       	st	Z, r1
    2266:	1b c0       	rjmp	.+54     	; 0x229e <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortValue == HIGH)
    2268:	8a 81       	ldd	r24, Y+2	; 0x02
    226a:	81 30       	cpi	r24, 0x01	; 1
    226c:	29 f4       	brne	.+10     	; 0x2278 <DIO_ES_tSetPortValue+0xa2>
			PORTC = 0xff;
    226e:	e5 e3       	ldi	r30, 0x35	; 53
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	8f ef       	ldi	r24, 0xFF	; 255
    2274:	80 83       	st	Z, r24
    2276:	13 c0       	rjmp	.+38     	; 0x229e <DIO_ES_tSetPortValue+0xc8>
		else
			PORTC = 0x00;
    2278:	e5 e3       	ldi	r30, 0x35	; 53
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	10 82       	st	Z, r1
    227e:	0f c0       	rjmp	.+30     	; 0x229e <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortValue == HIGH)
    2280:	8a 81       	ldd	r24, Y+2	; 0x02
    2282:	81 30       	cpi	r24, 0x01	; 1
    2284:	29 f4       	brne	.+10     	; 0x2290 <DIO_ES_tSetPortValue+0xba>
			PORTD = 0xff;
    2286:	e2 e3       	ldi	r30, 0x32	; 50
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	8f ef       	ldi	r24, 0xFF	; 255
    228c:	80 83       	st	Z, r24
    228e:	07 c0       	rjmp	.+14     	; 0x229e <DIO_ES_tSetPortValue+0xc8>
		else
			PORTD = 0x00;
    2290:	e2 e3       	ldi	r30, 0x32	; 50
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	10 82       	st	Z, r1
    2296:	03 c0       	rjmp	.+6      	; 0x229e <DIO_ES_tSetPortValue+0xc8>
		break;
	default:
		return ES_NOT_OK;
    2298:	91 e0       	ldi	r25, 0x01	; 1
    229a:	9d 83       	std	Y+5, r25	; 0x05
    229c:	01 c0       	rjmp	.+2      	; 0x22a0 <DIO_ES_tSetPortValue+0xca>
		break;
	}
	return ES_OK;
    229e:	1d 82       	std	Y+5, r1	; 0x05
    22a0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    22a2:	0f 90       	pop	r0
    22a4:	0f 90       	pop	r0
    22a6:	0f 90       	pop	r0
    22a8:	0f 90       	pop	r0
    22aa:	0f 90       	pop	r0
    22ac:	cf 91       	pop	r28
    22ae:	df 91       	pop	r29
    22b0:	08 95       	ret

000022b2 <DIO_ES_tTOGPin>:
/*
 * DIO_ES_tTOGPin is used to Toggle a specific pin
 */

ES_t DIO_ES_tTOGPin(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId)
{
    22b2:	df 93       	push	r29
    22b4:	cf 93       	push	r28
    22b6:	00 d0       	rcall	.+0      	; 0x22b8 <DIO_ES_tTOGPin+0x6>
    22b8:	0f 92       	push	r0
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62
    22be:	89 83       	std	Y+1, r24	; 0x01
    22c0:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8_PinId > PIN_LIMIT){
    22c2:	8a 81       	ldd	r24, Y+2	; 0x02
    22c4:	88 30       	cpi	r24, 0x08	; 8
    22c6:	18 f0       	brcs	.+6      	; 0x22ce <DIO_ES_tTOGPin+0x1c>
		return ES_NOT_OK;
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	8b 83       	std	Y+3, r24	; 0x03
    22cc:	60 c0       	rjmp	.+192    	; 0x238e <DIO_ES_tTOGPin+0xdc>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    22ce:	89 81       	ldd	r24, Y+1	; 0x01
    22d0:	88 23       	and	r24, r24
    22d2:	a1 f4       	brne	.+40     	; 0x22fc <DIO_ES_tTOGPin+0x4a>
		TOG_BIT(PORTA,copy_u8_PinId);
    22d4:	ab e3       	ldi	r26, 0x3B	; 59
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	eb e3       	ldi	r30, 0x3B	; 59
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	48 2f       	mov	r20, r24
    22e0:	8a 81       	ldd	r24, Y+2	; 0x02
    22e2:	28 2f       	mov	r18, r24
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	02 2e       	mov	r0, r18
    22ec:	02 c0       	rjmp	.+4      	; 0x22f2 <DIO_ES_tTOGPin+0x40>
    22ee:	88 0f       	add	r24, r24
    22f0:	99 1f       	adc	r25, r25
    22f2:	0a 94       	dec	r0
    22f4:	e2 f7       	brpl	.-8      	; 0x22ee <DIO_ES_tTOGPin+0x3c>
    22f6:	84 27       	eor	r24, r20
    22f8:	8c 93       	st	X, r24
    22fa:	48 c0       	rjmp	.+144    	; 0x238c <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    22fc:	89 81       	ldd	r24, Y+1	; 0x01
    22fe:	81 30       	cpi	r24, 0x01	; 1
    2300:	a1 f4       	brne	.+40     	; 0x232a <DIO_ES_tTOGPin+0x78>
		TOG_BIT(PORTB,copy_u8_PinId);
    2302:	a8 e3       	ldi	r26, 0x38	; 56
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	e8 e3       	ldi	r30, 0x38	; 56
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	48 2f       	mov	r20, r24
    230e:	8a 81       	ldd	r24, Y+2	; 0x02
    2310:	28 2f       	mov	r18, r24
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	02 2e       	mov	r0, r18
    231a:	02 c0       	rjmp	.+4      	; 0x2320 <DIO_ES_tTOGPin+0x6e>
    231c:	88 0f       	add	r24, r24
    231e:	99 1f       	adc	r25, r25
    2320:	0a 94       	dec	r0
    2322:	e2 f7       	brpl	.-8      	; 0x231c <DIO_ES_tTOGPin+0x6a>
    2324:	84 27       	eor	r24, r20
    2326:	8c 93       	st	X, r24
    2328:	31 c0       	rjmp	.+98     	; 0x238c <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    232a:	89 81       	ldd	r24, Y+1	; 0x01
    232c:	82 30       	cpi	r24, 0x02	; 2
    232e:	a1 f4       	brne	.+40     	; 0x2358 <DIO_ES_tTOGPin+0xa6>
		TOG_BIT(PORTC,copy_u8_PinId);
    2330:	a5 e3       	ldi	r26, 0x35	; 53
    2332:	b0 e0       	ldi	r27, 0x00	; 0
    2334:	e5 e3       	ldi	r30, 0x35	; 53
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	80 81       	ld	r24, Z
    233a:	48 2f       	mov	r20, r24
    233c:	8a 81       	ldd	r24, Y+2	; 0x02
    233e:	28 2f       	mov	r18, r24
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	02 2e       	mov	r0, r18
    2348:	02 c0       	rjmp	.+4      	; 0x234e <DIO_ES_tTOGPin+0x9c>
    234a:	88 0f       	add	r24, r24
    234c:	99 1f       	adc	r25, r25
    234e:	0a 94       	dec	r0
    2350:	e2 f7       	brpl	.-8      	; 0x234a <DIO_ES_tTOGPin+0x98>
    2352:	84 27       	eor	r24, r20
    2354:	8c 93       	st	X, r24
    2356:	1a c0       	rjmp	.+52     	; 0x238c <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    2358:	89 81       	ldd	r24, Y+1	; 0x01
    235a:	83 30       	cpi	r24, 0x03	; 3
    235c:	a1 f4       	brne	.+40     	; 0x2386 <DIO_ES_tTOGPin+0xd4>
		TOG_BIT(PORTD,copy_u8_PinId);
    235e:	a2 e3       	ldi	r26, 0x32	; 50
    2360:	b0 e0       	ldi	r27, 0x00	; 0
    2362:	e2 e3       	ldi	r30, 0x32	; 50
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	80 81       	ld	r24, Z
    2368:	48 2f       	mov	r20, r24
    236a:	8a 81       	ldd	r24, Y+2	; 0x02
    236c:	28 2f       	mov	r18, r24
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	02 2e       	mov	r0, r18
    2376:	02 c0       	rjmp	.+4      	; 0x237c <DIO_ES_tTOGPin+0xca>
    2378:	88 0f       	add	r24, r24
    237a:	99 1f       	adc	r25, r25
    237c:	0a 94       	dec	r0
    237e:	e2 f7       	brpl	.-8      	; 0x2378 <DIO_ES_tTOGPin+0xc6>
    2380:	84 27       	eor	r24, r20
    2382:	8c 93       	st	X, r24
    2384:	03 c0       	rjmp	.+6      	; 0x238c <DIO_ES_tTOGPin+0xda>
	}else{
		return ES_NOT_OK;
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	8b 83       	std	Y+3, r24	; 0x03
    238a:	01 c0       	rjmp	.+2      	; 0x238e <DIO_ES_tTOGPin+0xdc>
	}
	return ES_OK;
    238c:	1b 82       	std	Y+3, r1	; 0x03
    238e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
    2394:	0f 90       	pop	r0
    2396:	cf 91       	pop	r28
    2398:	df 91       	pop	r29
    239a:	08 95       	ret

0000239c <DIO_ES_tInit>:




ES_t DIO_ES_tInit(void)
{
    239c:	df 93       	push	r29
    239e:	cf 93       	push	r28
    23a0:	00 d0       	rcall	.+0      	; 0x23a2 <DIO_ES_tInit+0x6>
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
	int i = 0;
    23a6:	1a 82       	std	Y+2, r1	; 0x02
    23a8:	19 82       	std	Y+1, r1	; 0x01
	for(i=0 ; i<PIN_COUNT ; i++){
    23aa:	1a 82       	std	Y+2, r1	; 0x02
    23ac:	19 82       	std	Y+1, r1	; 0x01
    23ae:	a3 c2       	rjmp	.+1350   	; 0x28f6 <DIO_ES_tInit+0x55a>
		if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_A){
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	9a 81       	ldd	r25, Y+2	; 0x02
    23b4:	88 0f       	add	r24, r24
    23b6:	99 1f       	adc	r25, r25
    23b8:	88 0f       	add	r24, r24
    23ba:	99 1f       	adc	r25, r25
    23bc:	fc 01       	movw	r30, r24
    23be:	e9 58       	subi	r30, 0x89	; 137
    23c0:	fe 4f       	sbci	r31, 0xFE	; 254
    23c2:	80 81       	ld	r24, Z
    23c4:	88 23       	and	r24, r24
    23c6:	09 f0       	breq	.+2      	; 0x23ca <DIO_ES_tInit+0x2e>
    23c8:	9b c0       	rjmp	.+310    	; 0x2500 <DIO_ES_tInit+0x164>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    23ca:	89 81       	ldd	r24, Y+1	; 0x01
    23cc:	9a 81       	ldd	r25, Y+2	; 0x02
    23ce:	88 0f       	add	r24, r24
    23d0:	99 1f       	adc	r25, r25
    23d2:	01 96       	adiw	r24, 0x01	; 1
    23d4:	88 0f       	add	r24, r24
    23d6:	99 1f       	adc	r25, r25
    23d8:	fc 01       	movw	r30, r24
    23da:	e9 58       	subi	r30, 0x89	; 137
    23dc:	fe 4f       	sbci	r31, 0xFE	; 254
    23de:	80 81       	ld	r24, Z
    23e0:	81 30       	cpi	r24, 0x01	; 1
    23e2:	e9 f4       	brne	.+58     	; 0x241e <DIO_ES_tInit+0x82>
				SET_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    23e4:	aa e3       	ldi	r26, 0x3A	; 58
    23e6:	b0 e0       	ldi	r27, 0x00	; 0
    23e8:	ea e3       	ldi	r30, 0x3A	; 58
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	80 81       	ld	r24, Z
    23ee:	48 2f       	mov	r20, r24
    23f0:	89 81       	ldd	r24, Y+1	; 0x01
    23f2:	9a 81       	ldd	r25, Y+2	; 0x02
    23f4:	88 0f       	add	r24, r24
    23f6:	99 1f       	adc	r25, r25
    23f8:	88 0f       	add	r24, r24
    23fa:	99 1f       	adc	r25, r25
    23fc:	fc 01       	movw	r30, r24
    23fe:	e8 58       	subi	r30, 0x88	; 136
    2400:	fe 4f       	sbci	r31, 0xFE	; 254
    2402:	80 81       	ld	r24, Z
    2404:	28 2f       	mov	r18, r24
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	02 2e       	mov	r0, r18
    240e:	02 c0       	rjmp	.+4      	; 0x2414 <DIO_ES_tInit+0x78>
    2410:	88 0f       	add	r24, r24
    2412:	99 1f       	adc	r25, r25
    2414:	0a 94       	dec	r0
    2416:	e2 f7       	brpl	.-8      	; 0x2410 <DIO_ES_tInit+0x74>
    2418:	84 2b       	or	r24, r20
    241a:	8c 93       	st	X, r24
    241c:	67 c2       	rjmp	.+1230   	; 0x28ec <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    241e:	aa e3       	ldi	r26, 0x3A	; 58
    2420:	b0 e0       	ldi	r27, 0x00	; 0
    2422:	ea e3       	ldi	r30, 0x3A	; 58
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	80 81       	ld	r24, Z
    2428:	48 2f       	mov	r20, r24
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	9a 81       	ldd	r25, Y+2	; 0x02
    242e:	88 0f       	add	r24, r24
    2430:	99 1f       	adc	r25, r25
    2432:	88 0f       	add	r24, r24
    2434:	99 1f       	adc	r25, r25
    2436:	fc 01       	movw	r30, r24
    2438:	e8 58       	subi	r30, 0x88	; 136
    243a:	fe 4f       	sbci	r31, 0xFE	; 254
    243c:	80 81       	ld	r24, Z
    243e:	28 2f       	mov	r18, r24
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	02 2e       	mov	r0, r18
    2448:	02 c0       	rjmp	.+4      	; 0x244e <DIO_ES_tInit+0xb2>
    244a:	88 0f       	add	r24, r24
    244c:	99 1f       	adc	r25, r25
    244e:	0a 94       	dec	r0
    2450:	e2 f7       	brpl	.-8      	; 0x244a <DIO_ES_tInit+0xae>
    2452:	80 95       	com	r24
    2454:	84 23       	and	r24, r20
    2456:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    2458:	89 81       	ldd	r24, Y+1	; 0x01
    245a:	9a 81       	ldd	r25, Y+2	; 0x02
    245c:	88 0f       	add	r24, r24
    245e:	99 1f       	adc	r25, r25
    2460:	88 0f       	add	r24, r24
    2462:	99 1f       	adc	r25, r25
    2464:	fc 01       	movw	r30, r24
    2466:	e6 58       	subi	r30, 0x86	; 134
    2468:	fe 4f       	sbci	r31, 0xFE	; 254
    246a:	80 81       	ld	r24, Z
    246c:	81 30       	cpi	r24, 0x01	; 1
    246e:	e9 f4       	brne	.+58     	; 0x24aa <DIO_ES_tInit+0x10e>
					SET_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    2470:	ab e3       	ldi	r26, 0x3B	; 59
    2472:	b0 e0       	ldi	r27, 0x00	; 0
    2474:	eb e3       	ldi	r30, 0x3B	; 59
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	80 81       	ld	r24, Z
    247a:	48 2f       	mov	r20, r24
    247c:	89 81       	ldd	r24, Y+1	; 0x01
    247e:	9a 81       	ldd	r25, Y+2	; 0x02
    2480:	88 0f       	add	r24, r24
    2482:	99 1f       	adc	r25, r25
    2484:	88 0f       	add	r24, r24
    2486:	99 1f       	adc	r25, r25
    2488:	fc 01       	movw	r30, r24
    248a:	e8 58       	subi	r30, 0x88	; 136
    248c:	fe 4f       	sbci	r31, 0xFE	; 254
    248e:	80 81       	ld	r24, Z
    2490:	28 2f       	mov	r18, r24
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	02 2e       	mov	r0, r18
    249a:	02 c0       	rjmp	.+4      	; 0x24a0 <DIO_ES_tInit+0x104>
    249c:	88 0f       	add	r24, r24
    249e:	99 1f       	adc	r25, r25
    24a0:	0a 94       	dec	r0
    24a2:	e2 f7       	brpl	.-8      	; 0x249c <DIO_ES_tInit+0x100>
    24a4:	84 2b       	or	r24, r20
    24a6:	8c 93       	st	X, r24
    24a8:	21 c2       	rjmp	.+1090   	; 0x28ec <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    24aa:	89 81       	ldd	r24, Y+1	; 0x01
    24ac:	9a 81       	ldd	r25, Y+2	; 0x02
    24ae:	88 0f       	add	r24, r24
    24b0:	99 1f       	adc	r25, r25
    24b2:	88 0f       	add	r24, r24
    24b4:	99 1f       	adc	r25, r25
    24b6:	fc 01       	movw	r30, r24
    24b8:	e6 58       	subi	r30, 0x86	; 134
    24ba:	fe 4f       	sbci	r31, 0xFE	; 254
    24bc:	80 81       	ld	r24, Z
    24be:	88 23       	and	r24, r24
    24c0:	09 f0       	breq	.+2      	; 0x24c4 <DIO_ES_tInit+0x128>
    24c2:	14 c2       	rjmp	.+1064   	; 0x28ec <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    24c4:	ab e3       	ldi	r26, 0x3B	; 59
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	eb e3       	ldi	r30, 0x3B	; 59
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	80 81       	ld	r24, Z
    24ce:	48 2f       	mov	r20, r24
    24d0:	89 81       	ldd	r24, Y+1	; 0x01
    24d2:	9a 81       	ldd	r25, Y+2	; 0x02
    24d4:	88 0f       	add	r24, r24
    24d6:	99 1f       	adc	r25, r25
    24d8:	88 0f       	add	r24, r24
    24da:	99 1f       	adc	r25, r25
    24dc:	fc 01       	movw	r30, r24
    24de:	e8 58       	subi	r30, 0x88	; 136
    24e0:	fe 4f       	sbci	r31, 0xFE	; 254
    24e2:	80 81       	ld	r24, Z
    24e4:	28 2f       	mov	r18, r24
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	02 2e       	mov	r0, r18
    24ee:	02 c0       	rjmp	.+4      	; 0x24f4 <DIO_ES_tInit+0x158>
    24f0:	88 0f       	add	r24, r24
    24f2:	99 1f       	adc	r25, r25
    24f4:	0a 94       	dec	r0
    24f6:	e2 f7       	brpl	.-8      	; 0x24f0 <DIO_ES_tInit+0x154>
    24f8:	80 95       	com	r24
    24fa:	84 23       	and	r24, r20
    24fc:	8c 93       	st	X, r24
    24fe:	f6 c1       	rjmp	.+1004   	; 0x28ec <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_B){
    2500:	89 81       	ldd	r24, Y+1	; 0x01
    2502:	9a 81       	ldd	r25, Y+2	; 0x02
    2504:	88 0f       	add	r24, r24
    2506:	99 1f       	adc	r25, r25
    2508:	88 0f       	add	r24, r24
    250a:	99 1f       	adc	r25, r25
    250c:	fc 01       	movw	r30, r24
    250e:	e9 58       	subi	r30, 0x89	; 137
    2510:	fe 4f       	sbci	r31, 0xFE	; 254
    2512:	80 81       	ld	r24, Z
    2514:	81 30       	cpi	r24, 0x01	; 1
    2516:	09 f0       	breq	.+2      	; 0x251a <DIO_ES_tInit+0x17e>
    2518:	9b c0       	rjmp	.+310    	; 0x2650 <DIO_ES_tInit+0x2b4>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    251a:	89 81       	ldd	r24, Y+1	; 0x01
    251c:	9a 81       	ldd	r25, Y+2	; 0x02
    251e:	88 0f       	add	r24, r24
    2520:	99 1f       	adc	r25, r25
    2522:	01 96       	adiw	r24, 0x01	; 1
    2524:	88 0f       	add	r24, r24
    2526:	99 1f       	adc	r25, r25
    2528:	fc 01       	movw	r30, r24
    252a:	e9 58       	subi	r30, 0x89	; 137
    252c:	fe 4f       	sbci	r31, 0xFE	; 254
    252e:	80 81       	ld	r24, Z
    2530:	81 30       	cpi	r24, 0x01	; 1
    2532:	e9 f4       	brne	.+58     	; 0x256e <DIO_ES_tInit+0x1d2>
				SET_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    2534:	a7 e3       	ldi	r26, 0x37	; 55
    2536:	b0 e0       	ldi	r27, 0x00	; 0
    2538:	e7 e3       	ldi	r30, 0x37	; 55
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	80 81       	ld	r24, Z
    253e:	48 2f       	mov	r20, r24
    2540:	89 81       	ldd	r24, Y+1	; 0x01
    2542:	9a 81       	ldd	r25, Y+2	; 0x02
    2544:	88 0f       	add	r24, r24
    2546:	99 1f       	adc	r25, r25
    2548:	88 0f       	add	r24, r24
    254a:	99 1f       	adc	r25, r25
    254c:	fc 01       	movw	r30, r24
    254e:	e8 58       	subi	r30, 0x88	; 136
    2550:	fe 4f       	sbci	r31, 0xFE	; 254
    2552:	80 81       	ld	r24, Z
    2554:	28 2f       	mov	r18, r24
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	02 2e       	mov	r0, r18
    255e:	02 c0       	rjmp	.+4      	; 0x2564 <DIO_ES_tInit+0x1c8>
    2560:	88 0f       	add	r24, r24
    2562:	99 1f       	adc	r25, r25
    2564:	0a 94       	dec	r0
    2566:	e2 f7       	brpl	.-8      	; 0x2560 <DIO_ES_tInit+0x1c4>
    2568:	84 2b       	or	r24, r20
    256a:	8c 93       	st	X, r24
    256c:	bf c1       	rjmp	.+894    	; 0x28ec <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    256e:	a7 e3       	ldi	r26, 0x37	; 55
    2570:	b0 e0       	ldi	r27, 0x00	; 0
    2572:	e7 e3       	ldi	r30, 0x37	; 55
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	80 81       	ld	r24, Z
    2578:	48 2f       	mov	r20, r24
    257a:	89 81       	ldd	r24, Y+1	; 0x01
    257c:	9a 81       	ldd	r25, Y+2	; 0x02
    257e:	88 0f       	add	r24, r24
    2580:	99 1f       	adc	r25, r25
    2582:	88 0f       	add	r24, r24
    2584:	99 1f       	adc	r25, r25
    2586:	fc 01       	movw	r30, r24
    2588:	e8 58       	subi	r30, 0x88	; 136
    258a:	fe 4f       	sbci	r31, 0xFE	; 254
    258c:	80 81       	ld	r24, Z
    258e:	28 2f       	mov	r18, r24
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	02 2e       	mov	r0, r18
    2598:	02 c0       	rjmp	.+4      	; 0x259e <DIO_ES_tInit+0x202>
    259a:	88 0f       	add	r24, r24
    259c:	99 1f       	adc	r25, r25
    259e:	0a 94       	dec	r0
    25a0:	e2 f7       	brpl	.-8      	; 0x259a <DIO_ES_tInit+0x1fe>
    25a2:	80 95       	com	r24
    25a4:	84 23       	and	r24, r20
    25a6:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    25a8:	89 81       	ldd	r24, Y+1	; 0x01
    25aa:	9a 81       	ldd	r25, Y+2	; 0x02
    25ac:	88 0f       	add	r24, r24
    25ae:	99 1f       	adc	r25, r25
    25b0:	88 0f       	add	r24, r24
    25b2:	99 1f       	adc	r25, r25
    25b4:	fc 01       	movw	r30, r24
    25b6:	e6 58       	subi	r30, 0x86	; 134
    25b8:	fe 4f       	sbci	r31, 0xFE	; 254
    25ba:	80 81       	ld	r24, Z
    25bc:	81 30       	cpi	r24, 0x01	; 1
    25be:	e9 f4       	brne	.+58     	; 0x25fa <DIO_ES_tInit+0x25e>
					SET_BIT(PORTB,Dio_CfgPinsArray[i].Pin);
    25c0:	a8 e3       	ldi	r26, 0x38	; 56
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	e8 e3       	ldi	r30, 0x38	; 56
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	80 81       	ld	r24, Z
    25ca:	48 2f       	mov	r20, r24
    25cc:	89 81       	ldd	r24, Y+1	; 0x01
    25ce:	9a 81       	ldd	r25, Y+2	; 0x02
    25d0:	88 0f       	add	r24, r24
    25d2:	99 1f       	adc	r25, r25
    25d4:	88 0f       	add	r24, r24
    25d6:	99 1f       	adc	r25, r25
    25d8:	fc 01       	movw	r30, r24
    25da:	e8 58       	subi	r30, 0x88	; 136
    25dc:	fe 4f       	sbci	r31, 0xFE	; 254
    25de:	80 81       	ld	r24, Z
    25e0:	28 2f       	mov	r18, r24
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	02 2e       	mov	r0, r18
    25ea:	02 c0       	rjmp	.+4      	; 0x25f0 <DIO_ES_tInit+0x254>
    25ec:	88 0f       	add	r24, r24
    25ee:	99 1f       	adc	r25, r25
    25f0:	0a 94       	dec	r0
    25f2:	e2 f7       	brpl	.-8      	; 0x25ec <DIO_ES_tInit+0x250>
    25f4:	84 2b       	or	r24, r20
    25f6:	8c 93       	st	X, r24
    25f8:	79 c1       	rjmp	.+754    	; 0x28ec <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    25fa:	89 81       	ldd	r24, Y+1	; 0x01
    25fc:	9a 81       	ldd	r25, Y+2	; 0x02
    25fe:	88 0f       	add	r24, r24
    2600:	99 1f       	adc	r25, r25
    2602:	88 0f       	add	r24, r24
    2604:	99 1f       	adc	r25, r25
    2606:	fc 01       	movw	r30, r24
    2608:	e6 58       	subi	r30, 0x86	; 134
    260a:	fe 4f       	sbci	r31, 0xFE	; 254
    260c:	80 81       	ld	r24, Z
    260e:	88 23       	and	r24, r24
    2610:	09 f0       	breq	.+2      	; 0x2614 <DIO_ES_tInit+0x278>
    2612:	6c c1       	rjmp	.+728    	; 0x28ec <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    2614:	ab e3       	ldi	r26, 0x3B	; 59
    2616:	b0 e0       	ldi	r27, 0x00	; 0
    2618:	eb e3       	ldi	r30, 0x3B	; 59
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	80 81       	ld	r24, Z
    261e:	48 2f       	mov	r20, r24
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	9a 81       	ldd	r25, Y+2	; 0x02
    2624:	88 0f       	add	r24, r24
    2626:	99 1f       	adc	r25, r25
    2628:	88 0f       	add	r24, r24
    262a:	99 1f       	adc	r25, r25
    262c:	fc 01       	movw	r30, r24
    262e:	e8 58       	subi	r30, 0x88	; 136
    2630:	fe 4f       	sbci	r31, 0xFE	; 254
    2632:	80 81       	ld	r24, Z
    2634:	28 2f       	mov	r18, r24
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	02 2e       	mov	r0, r18
    263e:	02 c0       	rjmp	.+4      	; 0x2644 <DIO_ES_tInit+0x2a8>
    2640:	88 0f       	add	r24, r24
    2642:	99 1f       	adc	r25, r25
    2644:	0a 94       	dec	r0
    2646:	e2 f7       	brpl	.-8      	; 0x2640 <DIO_ES_tInit+0x2a4>
    2648:	80 95       	com	r24
    264a:	84 23       	and	r24, r20
    264c:	8c 93       	st	X, r24
    264e:	4e c1       	rjmp	.+668    	; 0x28ec <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_C){
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	9a 81       	ldd	r25, Y+2	; 0x02
    2654:	88 0f       	add	r24, r24
    2656:	99 1f       	adc	r25, r25
    2658:	88 0f       	add	r24, r24
    265a:	99 1f       	adc	r25, r25
    265c:	fc 01       	movw	r30, r24
    265e:	e9 58       	subi	r30, 0x89	; 137
    2660:	fe 4f       	sbci	r31, 0xFE	; 254
    2662:	80 81       	ld	r24, Z
    2664:	82 30       	cpi	r24, 0x02	; 2
    2666:	09 f0       	breq	.+2      	; 0x266a <DIO_ES_tInit+0x2ce>
    2668:	9b c0       	rjmp	.+310    	; 0x27a0 <DIO_ES_tInit+0x404>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    266a:	89 81       	ldd	r24, Y+1	; 0x01
    266c:	9a 81       	ldd	r25, Y+2	; 0x02
    266e:	88 0f       	add	r24, r24
    2670:	99 1f       	adc	r25, r25
    2672:	01 96       	adiw	r24, 0x01	; 1
    2674:	88 0f       	add	r24, r24
    2676:	99 1f       	adc	r25, r25
    2678:	fc 01       	movw	r30, r24
    267a:	e9 58       	subi	r30, 0x89	; 137
    267c:	fe 4f       	sbci	r31, 0xFE	; 254
    267e:	80 81       	ld	r24, Z
    2680:	81 30       	cpi	r24, 0x01	; 1
    2682:	e9 f4       	brne	.+58     	; 0x26be <DIO_ES_tInit+0x322>
				SET_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    2684:	a4 e3       	ldi	r26, 0x34	; 52
    2686:	b0 e0       	ldi	r27, 0x00	; 0
    2688:	e4 e3       	ldi	r30, 0x34	; 52
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	80 81       	ld	r24, Z
    268e:	48 2f       	mov	r20, r24
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	9a 81       	ldd	r25, Y+2	; 0x02
    2694:	88 0f       	add	r24, r24
    2696:	99 1f       	adc	r25, r25
    2698:	88 0f       	add	r24, r24
    269a:	99 1f       	adc	r25, r25
    269c:	fc 01       	movw	r30, r24
    269e:	e8 58       	subi	r30, 0x88	; 136
    26a0:	fe 4f       	sbci	r31, 0xFE	; 254
    26a2:	80 81       	ld	r24, Z
    26a4:	28 2f       	mov	r18, r24
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	02 2e       	mov	r0, r18
    26ae:	02 c0       	rjmp	.+4      	; 0x26b4 <DIO_ES_tInit+0x318>
    26b0:	88 0f       	add	r24, r24
    26b2:	99 1f       	adc	r25, r25
    26b4:	0a 94       	dec	r0
    26b6:	e2 f7       	brpl	.-8      	; 0x26b0 <DIO_ES_tInit+0x314>
    26b8:	84 2b       	or	r24, r20
    26ba:	8c 93       	st	X, r24
    26bc:	17 c1       	rjmp	.+558    	; 0x28ec <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    26be:	a4 e3       	ldi	r26, 0x34	; 52
    26c0:	b0 e0       	ldi	r27, 0x00	; 0
    26c2:	e4 e3       	ldi	r30, 0x34	; 52
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	80 81       	ld	r24, Z
    26c8:	48 2f       	mov	r20, r24
    26ca:	89 81       	ldd	r24, Y+1	; 0x01
    26cc:	9a 81       	ldd	r25, Y+2	; 0x02
    26ce:	88 0f       	add	r24, r24
    26d0:	99 1f       	adc	r25, r25
    26d2:	88 0f       	add	r24, r24
    26d4:	99 1f       	adc	r25, r25
    26d6:	fc 01       	movw	r30, r24
    26d8:	e8 58       	subi	r30, 0x88	; 136
    26da:	fe 4f       	sbci	r31, 0xFE	; 254
    26dc:	80 81       	ld	r24, Z
    26de:	28 2f       	mov	r18, r24
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	02 2e       	mov	r0, r18
    26e8:	02 c0       	rjmp	.+4      	; 0x26ee <DIO_ES_tInit+0x352>
    26ea:	88 0f       	add	r24, r24
    26ec:	99 1f       	adc	r25, r25
    26ee:	0a 94       	dec	r0
    26f0:	e2 f7       	brpl	.-8      	; 0x26ea <DIO_ES_tInit+0x34e>
    26f2:	80 95       	com	r24
    26f4:	84 23       	and	r24, r20
    26f6:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    26f8:	89 81       	ldd	r24, Y+1	; 0x01
    26fa:	9a 81       	ldd	r25, Y+2	; 0x02
    26fc:	88 0f       	add	r24, r24
    26fe:	99 1f       	adc	r25, r25
    2700:	88 0f       	add	r24, r24
    2702:	99 1f       	adc	r25, r25
    2704:	fc 01       	movw	r30, r24
    2706:	e6 58       	subi	r30, 0x86	; 134
    2708:	fe 4f       	sbci	r31, 0xFE	; 254
    270a:	80 81       	ld	r24, Z
    270c:	81 30       	cpi	r24, 0x01	; 1
    270e:	e9 f4       	brne	.+58     	; 0x274a <DIO_ES_tInit+0x3ae>
					SET_BIT(PORTC,Dio_CfgPinsArray[i].Pin);
    2710:	a5 e3       	ldi	r26, 0x35	; 53
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	e5 e3       	ldi	r30, 0x35	; 53
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	48 2f       	mov	r20, r24
    271c:	89 81       	ldd	r24, Y+1	; 0x01
    271e:	9a 81       	ldd	r25, Y+2	; 0x02
    2720:	88 0f       	add	r24, r24
    2722:	99 1f       	adc	r25, r25
    2724:	88 0f       	add	r24, r24
    2726:	99 1f       	adc	r25, r25
    2728:	fc 01       	movw	r30, r24
    272a:	e8 58       	subi	r30, 0x88	; 136
    272c:	fe 4f       	sbci	r31, 0xFE	; 254
    272e:	80 81       	ld	r24, Z
    2730:	28 2f       	mov	r18, r24
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	02 2e       	mov	r0, r18
    273a:	02 c0       	rjmp	.+4      	; 0x2740 <DIO_ES_tInit+0x3a4>
    273c:	88 0f       	add	r24, r24
    273e:	99 1f       	adc	r25, r25
    2740:	0a 94       	dec	r0
    2742:	e2 f7       	brpl	.-8      	; 0x273c <DIO_ES_tInit+0x3a0>
    2744:	84 2b       	or	r24, r20
    2746:	8c 93       	st	X, r24
    2748:	d1 c0       	rjmp	.+418    	; 0x28ec <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    274a:	89 81       	ldd	r24, Y+1	; 0x01
    274c:	9a 81       	ldd	r25, Y+2	; 0x02
    274e:	88 0f       	add	r24, r24
    2750:	99 1f       	adc	r25, r25
    2752:	88 0f       	add	r24, r24
    2754:	99 1f       	adc	r25, r25
    2756:	fc 01       	movw	r30, r24
    2758:	e6 58       	subi	r30, 0x86	; 134
    275a:	fe 4f       	sbci	r31, 0xFE	; 254
    275c:	80 81       	ld	r24, Z
    275e:	88 23       	and	r24, r24
    2760:	09 f0       	breq	.+2      	; 0x2764 <DIO_ES_tInit+0x3c8>
    2762:	c4 c0       	rjmp	.+392    	; 0x28ec <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    2764:	ab e3       	ldi	r26, 0x3B	; 59
    2766:	b0 e0       	ldi	r27, 0x00	; 0
    2768:	eb e3       	ldi	r30, 0x3B	; 59
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	80 81       	ld	r24, Z
    276e:	48 2f       	mov	r20, r24
    2770:	89 81       	ldd	r24, Y+1	; 0x01
    2772:	9a 81       	ldd	r25, Y+2	; 0x02
    2774:	88 0f       	add	r24, r24
    2776:	99 1f       	adc	r25, r25
    2778:	88 0f       	add	r24, r24
    277a:	99 1f       	adc	r25, r25
    277c:	fc 01       	movw	r30, r24
    277e:	e8 58       	subi	r30, 0x88	; 136
    2780:	fe 4f       	sbci	r31, 0xFE	; 254
    2782:	80 81       	ld	r24, Z
    2784:	28 2f       	mov	r18, r24
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	02 2e       	mov	r0, r18
    278e:	02 c0       	rjmp	.+4      	; 0x2794 <DIO_ES_tInit+0x3f8>
    2790:	88 0f       	add	r24, r24
    2792:	99 1f       	adc	r25, r25
    2794:	0a 94       	dec	r0
    2796:	e2 f7       	brpl	.-8      	; 0x2790 <DIO_ES_tInit+0x3f4>
    2798:	80 95       	com	r24
    279a:	84 23       	and	r24, r20
    279c:	8c 93       	st	X, r24
    279e:	a6 c0       	rjmp	.+332    	; 0x28ec <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_D){
    27a0:	89 81       	ldd	r24, Y+1	; 0x01
    27a2:	9a 81       	ldd	r25, Y+2	; 0x02
    27a4:	88 0f       	add	r24, r24
    27a6:	99 1f       	adc	r25, r25
    27a8:	88 0f       	add	r24, r24
    27aa:	99 1f       	adc	r25, r25
    27ac:	fc 01       	movw	r30, r24
    27ae:	e9 58       	subi	r30, 0x89	; 137
    27b0:	fe 4f       	sbci	r31, 0xFE	; 254
    27b2:	80 81       	ld	r24, Z
    27b4:	83 30       	cpi	r24, 0x03	; 3
    27b6:	09 f0       	breq	.+2      	; 0x27ba <DIO_ES_tInit+0x41e>
    27b8:	99 c0       	rjmp	.+306    	; 0x28ec <DIO_ES_tInit+0x550>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    27ba:	89 81       	ldd	r24, Y+1	; 0x01
    27bc:	9a 81       	ldd	r25, Y+2	; 0x02
    27be:	88 0f       	add	r24, r24
    27c0:	99 1f       	adc	r25, r25
    27c2:	01 96       	adiw	r24, 0x01	; 1
    27c4:	88 0f       	add	r24, r24
    27c6:	99 1f       	adc	r25, r25
    27c8:	fc 01       	movw	r30, r24
    27ca:	e9 58       	subi	r30, 0x89	; 137
    27cc:	fe 4f       	sbci	r31, 0xFE	; 254
    27ce:	80 81       	ld	r24, Z
    27d0:	81 30       	cpi	r24, 0x01	; 1
    27d2:	e9 f4       	brne	.+58     	; 0x280e <DIO_ES_tInit+0x472>
				SET_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    27d4:	a1 e3       	ldi	r26, 0x31	; 49
    27d6:	b0 e0       	ldi	r27, 0x00	; 0
    27d8:	e1 e3       	ldi	r30, 0x31	; 49
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	80 81       	ld	r24, Z
    27de:	48 2f       	mov	r20, r24
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	9a 81       	ldd	r25, Y+2	; 0x02
    27e4:	88 0f       	add	r24, r24
    27e6:	99 1f       	adc	r25, r25
    27e8:	88 0f       	add	r24, r24
    27ea:	99 1f       	adc	r25, r25
    27ec:	fc 01       	movw	r30, r24
    27ee:	e8 58       	subi	r30, 0x88	; 136
    27f0:	fe 4f       	sbci	r31, 0xFE	; 254
    27f2:	80 81       	ld	r24, Z
    27f4:	28 2f       	mov	r18, r24
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	81 e0       	ldi	r24, 0x01	; 1
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	02 2e       	mov	r0, r18
    27fe:	02 c0       	rjmp	.+4      	; 0x2804 <DIO_ES_tInit+0x468>
    2800:	88 0f       	add	r24, r24
    2802:	99 1f       	adc	r25, r25
    2804:	0a 94       	dec	r0
    2806:	e2 f7       	brpl	.-8      	; 0x2800 <DIO_ES_tInit+0x464>
    2808:	84 2b       	or	r24, r20
    280a:	8c 93       	st	X, r24
    280c:	6f c0       	rjmp	.+222    	; 0x28ec <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    280e:	a1 e3       	ldi	r26, 0x31	; 49
    2810:	b0 e0       	ldi	r27, 0x00	; 0
    2812:	e1 e3       	ldi	r30, 0x31	; 49
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	80 81       	ld	r24, Z
    2818:	48 2f       	mov	r20, r24
    281a:	89 81       	ldd	r24, Y+1	; 0x01
    281c:	9a 81       	ldd	r25, Y+2	; 0x02
    281e:	88 0f       	add	r24, r24
    2820:	99 1f       	adc	r25, r25
    2822:	88 0f       	add	r24, r24
    2824:	99 1f       	adc	r25, r25
    2826:	fc 01       	movw	r30, r24
    2828:	e8 58       	subi	r30, 0x88	; 136
    282a:	fe 4f       	sbci	r31, 0xFE	; 254
    282c:	80 81       	ld	r24, Z
    282e:	28 2f       	mov	r18, r24
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	02 2e       	mov	r0, r18
    2838:	02 c0       	rjmp	.+4      	; 0x283e <DIO_ES_tInit+0x4a2>
    283a:	88 0f       	add	r24, r24
    283c:	99 1f       	adc	r25, r25
    283e:	0a 94       	dec	r0
    2840:	e2 f7       	brpl	.-8      	; 0x283a <DIO_ES_tInit+0x49e>
    2842:	80 95       	com	r24
    2844:	84 23       	and	r24, r20
    2846:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    2848:	89 81       	ldd	r24, Y+1	; 0x01
    284a:	9a 81       	ldd	r25, Y+2	; 0x02
    284c:	88 0f       	add	r24, r24
    284e:	99 1f       	adc	r25, r25
    2850:	88 0f       	add	r24, r24
    2852:	99 1f       	adc	r25, r25
    2854:	fc 01       	movw	r30, r24
    2856:	e6 58       	subi	r30, 0x86	; 134
    2858:	fe 4f       	sbci	r31, 0xFE	; 254
    285a:	80 81       	ld	r24, Z
    285c:	81 30       	cpi	r24, 0x01	; 1
    285e:	e9 f4       	brne	.+58     	; 0x289a <DIO_ES_tInit+0x4fe>
					SET_BIT(PORTD,Dio_CfgPinsArray[i].Pin);
    2860:	a2 e3       	ldi	r26, 0x32	; 50
    2862:	b0 e0       	ldi	r27, 0x00	; 0
    2864:	e2 e3       	ldi	r30, 0x32	; 50
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	80 81       	ld	r24, Z
    286a:	48 2f       	mov	r20, r24
    286c:	89 81       	ldd	r24, Y+1	; 0x01
    286e:	9a 81       	ldd	r25, Y+2	; 0x02
    2870:	88 0f       	add	r24, r24
    2872:	99 1f       	adc	r25, r25
    2874:	88 0f       	add	r24, r24
    2876:	99 1f       	adc	r25, r25
    2878:	fc 01       	movw	r30, r24
    287a:	e8 58       	subi	r30, 0x88	; 136
    287c:	fe 4f       	sbci	r31, 0xFE	; 254
    287e:	80 81       	ld	r24, Z
    2880:	28 2f       	mov	r18, r24
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	02 2e       	mov	r0, r18
    288a:	02 c0       	rjmp	.+4      	; 0x2890 <DIO_ES_tInit+0x4f4>
    288c:	88 0f       	add	r24, r24
    288e:	99 1f       	adc	r25, r25
    2890:	0a 94       	dec	r0
    2892:	e2 f7       	brpl	.-8      	; 0x288c <DIO_ES_tInit+0x4f0>
    2894:	84 2b       	or	r24, r20
    2896:	8c 93       	st	X, r24
    2898:	29 c0       	rjmp	.+82     	; 0x28ec <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    289a:	89 81       	ldd	r24, Y+1	; 0x01
    289c:	9a 81       	ldd	r25, Y+2	; 0x02
    289e:	88 0f       	add	r24, r24
    28a0:	99 1f       	adc	r25, r25
    28a2:	88 0f       	add	r24, r24
    28a4:	99 1f       	adc	r25, r25
    28a6:	fc 01       	movw	r30, r24
    28a8:	e6 58       	subi	r30, 0x86	; 134
    28aa:	fe 4f       	sbci	r31, 0xFE	; 254
    28ac:	80 81       	ld	r24, Z
    28ae:	88 23       	and	r24, r24
    28b0:	e9 f4       	brne	.+58     	; 0x28ec <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    28b2:	ab e3       	ldi	r26, 0x3B	; 59
    28b4:	b0 e0       	ldi	r27, 0x00	; 0
    28b6:	eb e3       	ldi	r30, 0x3B	; 59
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	80 81       	ld	r24, Z
    28bc:	48 2f       	mov	r20, r24
    28be:	89 81       	ldd	r24, Y+1	; 0x01
    28c0:	9a 81       	ldd	r25, Y+2	; 0x02
    28c2:	88 0f       	add	r24, r24
    28c4:	99 1f       	adc	r25, r25
    28c6:	88 0f       	add	r24, r24
    28c8:	99 1f       	adc	r25, r25
    28ca:	fc 01       	movw	r30, r24
    28cc:	e8 58       	subi	r30, 0x88	; 136
    28ce:	fe 4f       	sbci	r31, 0xFE	; 254
    28d0:	80 81       	ld	r24, Z
    28d2:	28 2f       	mov	r18, r24
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	02 2e       	mov	r0, r18
    28dc:	02 c0       	rjmp	.+4      	; 0x28e2 <DIO_ES_tInit+0x546>
    28de:	88 0f       	add	r24, r24
    28e0:	99 1f       	adc	r25, r25
    28e2:	0a 94       	dec	r0
    28e4:	e2 f7       	brpl	.-8      	; 0x28de <DIO_ES_tInit+0x542>
    28e6:	80 95       	com	r24
    28e8:	84 23       	and	r24, r20
    28ea:	8c 93       	st	X, r24


ES_t DIO_ES_tInit(void)
{
	int i = 0;
	for(i=0 ; i<PIN_COUNT ; i++){
    28ec:	89 81       	ldd	r24, Y+1	; 0x01
    28ee:	9a 81       	ldd	r25, Y+2	; 0x02
    28f0:	01 96       	adiw	r24, 0x01	; 1
    28f2:	9a 83       	std	Y+2, r25	; 0x02
    28f4:	89 83       	std	Y+1, r24	; 0x01
    28f6:	89 81       	ldd	r24, Y+1	; 0x01
    28f8:	9a 81       	ldd	r25, Y+2	; 0x02
    28fa:	88 31       	cpi	r24, 0x18	; 24
    28fc:	91 05       	cpc	r25, r1
    28fe:	0c f4       	brge	.+2      	; 0x2902 <DIO_ES_tInit+0x566>
    2900:	57 cd       	rjmp	.-1362   	; 0x23b0 <DIO_ES_tInit+0x14>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
				}
			}
		}
	}
	return ES_OK;
    2902:	80 e0       	ldi	r24, 0x00	; 0
}
    2904:	0f 90       	pop	r0
    2906:	0f 90       	pop	r0
    2908:	cf 91       	pop	r28
    290a:	df 91       	pop	r29
    290c:	08 95       	ret

0000290e <ADC_init>:
 * 4)SET the ADPS1,ADPS2 (from data sheet)
 * 5)Choose the reference voltage, we choose the internal voltage 2.65v
 * 6)SET REFS1,REFS0 in ADMUX
 */

void ADC_init(void){
    290e:	df 93       	push	r29
    2910:	cf 93       	push	r28
    2912:	cd b7       	in	r28, 0x3d	; 61
    2914:	de b7       	in	r29, 0x3e	; 62
	//ADCSRA |= (1<<ADEN) | (1<<ADPS1) | (1<<ADPS2);
	//ADMUX |= (1<<REFS1) | (1<<REFS0);
#if	ADC_ENABLE == ENABLE
	SET_BIT(ADCSRA,ADEN);  // Enable the ADC
    2916:	a6 e2       	ldi	r26, 0x26	; 38
    2918:	b0 e0       	ldi	r27, 0x00	; 0
    291a:	e6 e2       	ldi	r30, 0x26	; 38
    291c:	f0 e0       	ldi	r31, 0x00	; 0
    291e:	80 81       	ld	r24, Z
    2920:	80 68       	ori	r24, 0x80	; 128
    2922:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS2);
#elif Prescalar_Type == Prescalar_64
	SET_BIT(ADCSRA,ADPS1); // Choose the Prescalar
	SET_BIT(ADCSRA,ADPS2);
#elif Prescalar_Type == Prescalar_128
	SET_BIT(ADCSRA,ADPS0);
    2924:	a6 e2       	ldi	r26, 0x26	; 38
    2926:	b0 e0       	ldi	r27, 0x00	; 0
    2928:	e6 e2       	ldi	r30, 0x26	; 38
    292a:	f0 e0       	ldi	r31, 0x00	; 0
    292c:	80 81       	ld	r24, Z
    292e:	81 60       	ori	r24, 0x01	; 1
    2930:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
    2932:	a6 e2       	ldi	r26, 0x26	; 38
    2934:	b0 e0       	ldi	r27, 0x00	; 0
    2936:	e6 e2       	ldi	r30, 0x26	; 38
    2938:	f0 e0       	ldi	r31, 0x00	; 0
    293a:	80 81       	ld	r24, Z
    293c:	82 60       	ori	r24, 0x02	; 2
    293e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS2);
    2940:	a6 e2       	ldi	r26, 0x26	; 38
    2942:	b0 e0       	ldi	r27, 0x00	; 0
    2944:	e6 e2       	ldi	r30, 0x26	; 38
    2946:	f0 e0       	ldi	r31, 0x00	; 0
    2948:	80 81       	ld	r24, Z
    294a:	84 60       	ori	r24, 0x04	; 4
    294c:	8c 93       	st	X, r24

#if ADC_SOURCE == ADC_SOURCE_VREF
	CLR_BIT(ADMUX,REFS0);
	CLR_BIT(ADMUX,REFS1);
#elif ADC_SOURCE == ADC_SOURCE_AVCC
	SET_BIT(ADMUX,REFS0);
    294e:	a7 e2       	ldi	r26, 0x27	; 39
    2950:	b0 e0       	ldi	r27, 0x00	; 0
    2952:	e7 e2       	ldi	r30, 0x27	; 39
    2954:	f0 e0       	ldi	r31, 0x00	; 0
    2956:	80 81       	ld	r24, Z
    2958:	80 64       	ori	r24, 0x40	; 64
    295a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,REFS1);
    295c:	a7 e2       	ldi	r26, 0x27	; 39
    295e:	b0 e0       	ldi	r27, 0x00	; 0
    2960:	e7 e2       	ldi	r30, 0x27	; 39
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	80 81       	ld	r24, Z
    2966:	8f 77       	andi	r24, 0x7F	; 127
    2968:	8c 93       	st	X, r24
	SET_BIT(ADMUX,REFS0);
	SET_BIT(ADMUX,REFS1);
#endif

#endif
}
    296a:	cf 91       	pop	r28
    296c:	df 91       	pop	r29
    296e:	08 95       	ret

00002970 <ADC_read>:

 */



u16 ADC_read(u8 channel) {
    2970:	df 93       	push	r29
    2972:	cf 93       	push	r28
    2974:	00 d0       	rcall	.+0      	; 0x2976 <ADC_read+0x6>
    2976:	00 d0       	rcall	.+0      	; 0x2978 <ADC_read+0x8>
    2978:	0f 92       	push	r0
    297a:	cd b7       	in	r28, 0x3d	; 61
    297c:	de b7       	in	r29, 0x3e	; 62
    297e:	8d 83       	std	Y+5, r24	; 0x05
	// Select ADC channel with safety mask
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
    2980:	a7 e2       	ldi	r26, 0x27	; 39
    2982:	b0 e0       	ldi	r27, 0x00	; 0
    2984:	e7 e2       	ldi	r30, 0x27	; 39
    2986:	f0 e0       	ldi	r31, 0x00	; 0
    2988:	80 81       	ld	r24, Z
    298a:	98 2f       	mov	r25, r24
    298c:	90 7f       	andi	r25, 0xF0	; 240
    298e:	8d 81       	ldd	r24, Y+5	; 0x05
    2990:	8f 70       	andi	r24, 0x0F	; 15
    2992:	89 2b       	or	r24, r25
    2994:	8c 93       	st	X, r24
	// Start single conversion
	ADCSRA |= (1 << ADSC);
    2996:	a6 e2       	ldi	r26, 0x26	; 38
    2998:	b0 e0       	ldi	r27, 0x00	; 0
    299a:	e6 e2       	ldi	r30, 0x26	; 38
    299c:	f0 e0       	ldi	r31, 0x00	; 0
    299e:	80 81       	ld	r24, Z
    29a0:	80 64       	ori	r24, 0x40	; 64
    29a2:	8c 93       	st	X, r24
	// Wait for conversion to complete
	while (!GET_BIT(ADCSRA,ADIF));
    29a4:	e6 e2       	ldi	r30, 0x26	; 38
    29a6:	f0 e0       	ldi	r31, 0x00	; 0
    29a8:	80 81       	ld	r24, Z
    29aa:	82 95       	swap	r24
    29ac:	8f 70       	andi	r24, 0x0F	; 15
    29ae:	88 2f       	mov	r24, r24
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	81 70       	andi	r24, 0x01	; 1
    29b4:	90 70       	andi	r25, 0x00	; 0
    29b6:	00 97       	sbiw	r24, 0x00	; 0
    29b8:	a9 f3       	breq	.-22     	; 0x29a4 <ADC_read+0x34>
	CLR_BIT(ADCSRA,ADIF);
    29ba:	a6 e2       	ldi	r26, 0x26	; 38
    29bc:	b0 e0       	ldi	r27, 0x00	; 0
    29be:	e6 e2       	ldi	r30, 0x26	; 38
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	80 81       	ld	r24, Z
    29c4:	8f 7e       	andi	r24, 0xEF	; 239
    29c6:	8c 93       	st	X, r24

	u8 lowByte = ADCL;
    29c8:	e4 e2       	ldi	r30, 0x24	; 36
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	80 81       	ld	r24, Z
    29ce:	8c 83       	std	Y+4, r24	; 0x04
	u8 highByte = ADCH;
    29d0:	e5 e2       	ldi	r30, 0x25	; 37
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	80 81       	ld	r24, Z
    29d6:	8b 83       	std	Y+3, r24	; 0x03

	// Combine the two 8-bit registers to get the 10-bit ADC result
	u16 result = (highByte << 8) | lowByte;
    29d8:	8b 81       	ldd	r24, Y+3	; 0x03
    29da:	88 2f       	mov	r24, r24
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	38 2f       	mov	r19, r24
    29e0:	22 27       	eor	r18, r18
    29e2:	8c 81       	ldd	r24, Y+4	; 0x04
    29e4:	88 2f       	mov	r24, r24
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	82 2b       	or	r24, r18
    29ea:	93 2b       	or	r25, r19
    29ec:	9a 83       	std	Y+2, r25	; 0x02
    29ee:	89 83       	std	Y+1, r24	; 0x01


	return result;
    29f0:	89 81       	ldd	r24, Y+1	; 0x01
    29f2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    29f4:	0f 90       	pop	r0
    29f6:	0f 90       	pop	r0
    29f8:	0f 90       	pop	r0
    29fa:	0f 90       	pop	r0
    29fc:	0f 90       	pop	r0
    29fe:	cf 91       	pop	r28
    2a00:	df 91       	pop	r29
    2a02:	08 95       	ret

00002a04 <Servo_Init>:
//the left.
//-90" (~1


void Servo_Init(void)
{
    2a04:	df 93       	push	r29
    2a06:	cf 93       	push	r28
    2a08:	cd b7       	in	r28, 0x3d	; 61
    2a0a:	de b7       	in	r29, 0x3e	; 62
    2a0c:	28 97       	sbiw	r28, 0x08	; 8
    2a0e:	0f b6       	in	r0, 0x3f	; 63
    2a10:	f8 94       	cli
    2a12:	de bf       	out	0x3e, r29	; 62
    2a14:	0f be       	out	0x3f, r0	; 63
    2a16:	cd bf       	out	0x3d, r28	; 61

	DIO_ES_tSetPinDirection(DIO_U8_PORT_D, DIO_U8_PIN_4, OUTPUT);
    2a18:	83 e0       	ldi	r24, 0x03	; 3
    2a1a:	64 e0       	ldi	r22, 0x04	; 4
    2a1c:	41 e0       	ldi	r20, 0x01	; 1
    2a1e:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(DIO_U8_PORT_D, DIO_U8_PIN_5, OUTPUT);
    2a22:	83 e0       	ldi	r24, 0x03	; 3
    2a24:	65 e0       	ldi	r22, 0x05	; 5
    2a26:	41 e0       	ldi	r20, 0x01	; 1
    2a28:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <DIO_ES_tSetPinDirection>


	TIMER1_Config_t Timer1Cfg;
	Timer1Cfg.mode = TIMER1_FAST_PWM_ICR1_TOP;
    2a2c:	81 e0       	ldi	r24, 0x01	; 1
    2a2e:	89 83       	std	Y+1, r24	; 0x01
	Timer1Cfg.prescalar = TIMER1_PRESCALAR_64;
    2a30:	83 e0       	ldi	r24, 0x03	; 3
    2a32:	8a 83       	std	Y+2, r24	; 0x02
	Timer1Cfg.OC1A_mode = OCRA_NON_INVERTING;
    2a34:	82 e0       	ldi	r24, 0x02	; 2
    2a36:	8b 83       	std	Y+3, r24	; 0x03
	Timer1Cfg.OC1B_mode = OCRB_NON_INVERTING;
    2a38:	82 e0       	ldi	r24, 0x02	; 2
    2a3a:	8c 83       	std	Y+4, r24	; 0x04
	TIMER1_Init(&Timer1Cfg);
    2a3c:	ce 01       	movw	r24, r28
    2a3e:	01 96       	adiw	r24, 0x01	; 1
    2a40:	0e 94 41 0a 	call	0x1482	; 0x1482 <TIMER1_Init>


}
    2a44:	28 96       	adiw	r28, 0x08	; 8
    2a46:	0f b6       	in	r0, 0x3f	; 63
    2a48:	f8 94       	cli
    2a4a:	de bf       	out	0x3e, r29	; 62
    2a4c:	0f be       	out	0x3f, r0	; 63
    2a4e:	cd bf       	out	0x3d, r28	; 61
    2a50:	cf 91       	pop	r28
    2a52:	df 91       	pop	r29
    2a54:	08 95       	ret

00002a56 <Servo_Turn>:



// From 0 to 180
void Servo_Turn(int angle)
{
    2a56:	df 93       	push	r29
    2a58:	cf 93       	push	r28
    2a5a:	00 d0       	rcall	.+0      	; 0x2a5c <Servo_Turn+0x6>
    2a5c:	00 d0       	rcall	.+0      	; 0x2a5e <Servo_Turn+0x8>
    2a5e:	00 d0       	rcall	.+0      	; 0x2a60 <Servo_Turn+0xa>
    2a60:	cd b7       	in	r28, 0x3d	; 61
    2a62:	de b7       	in	r29, 0x3e	; 62
    2a64:	9e 83       	std	Y+6, r25	; 0x06
    2a66:	8d 83       	std	Y+5, r24	; 0x05
	// Limit the angle to the range -90 to +90 degrees
	if (angle < -90)
    2a68:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6c:	2f ef       	ldi	r18, 0xFF	; 255
    2a6e:	86 3a       	cpi	r24, 0xA6	; 166
    2a70:	92 07       	cpc	r25, r18
    2a72:	2c f4       	brge	.+10     	; 0x2a7e <Servo_Turn+0x28>
		angle = -90;
    2a74:	86 ea       	ldi	r24, 0xA6	; 166
    2a76:	9f ef       	ldi	r25, 0xFF	; 255
    2a78:	9e 83       	std	Y+6, r25	; 0x06
    2a7a:	8d 83       	std	Y+5, r24	; 0x05
    2a7c:	09 c0       	rjmp	.+18     	; 0x2a90 <Servo_Turn+0x3a>
	else if (angle > 90)
    2a7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a80:	9e 81       	ldd	r25, Y+6	; 0x06
    2a82:	8b 35       	cpi	r24, 0x5B	; 91
    2a84:	91 05       	cpc	r25, r1
    2a86:	24 f0       	brlt	.+8      	; 0x2a90 <Servo_Turn+0x3a>
		angle = 90;
    2a88:	8a e5       	ldi	r24, 0x5A	; 90
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	9e 83       	std	Y+6, r25	; 0x06
    2a8e:	8d 83       	std	Y+5, r24	; 0x05

	// Calculate the pulse width based on the desired angle
	u16 pulse_width_microseconds = 1500 + ((angle / 90) * 500);
    2a90:	8d 81       	ldd	r24, Y+5	; 0x05
    2a92:	9e 81       	ldd	r25, Y+6	; 0x06
    2a94:	2a e5       	ldi	r18, 0x5A	; 90
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	b9 01       	movw	r22, r18
    2a9a:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <__divmodhi4>
    2a9e:	cb 01       	movw	r24, r22
    2aa0:	9c 01       	movw	r18, r24
    2aa2:	84 ef       	ldi	r24, 0xF4	; 244
    2aa4:	91 e0       	ldi	r25, 0x01	; 1
    2aa6:	ac 01       	movw	r20, r24
    2aa8:	24 9f       	mul	r18, r20
    2aaa:	c0 01       	movw	r24, r0
    2aac:	25 9f       	mul	r18, r21
    2aae:	90 0d       	add	r25, r0
    2ab0:	34 9f       	mul	r19, r20
    2ab2:	90 0d       	add	r25, r0
    2ab4:	11 24       	eor	r1, r1
    2ab6:	84 52       	subi	r24, 0x24	; 36
    2ab8:	9a 4f       	sbci	r25, 0xFA	; 250
    2aba:	9c 83       	std	Y+4, r25	; 0x04
    2abc:	8b 83       	std	Y+3, r24	; 0x03
	u16 pulse_width_counts = pulse_width_microseconds / 4; // Timer 1 resolution prescaler is 64
    2abe:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac2:	96 95       	lsr	r25
    2ac4:	87 95       	ror	r24
    2ac6:	96 95       	lsr	r25
    2ac8:	87 95       	ror	r24
    2aca:	9a 83       	std	Y+2, r25	; 0x02
    2acc:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = pulse_width_counts - 1;
    2ace:	ea e4       	ldi	r30, 0x4A	; 74
    2ad0:	f0 e0       	ldi	r31, 0x00	; 0
    2ad2:	89 81       	ldd	r24, Y+1	; 0x01
    2ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad6:	01 97       	sbiw	r24, 0x01	; 1
    2ad8:	91 83       	std	Z+1, r25	; 0x01
    2ada:	80 83       	st	Z, r24


	ICR1 = 4999;			// 20 ms in data sheet of servo
    2adc:	e6 e4       	ldi	r30, 0x46	; 70
    2ade:	f0 e0       	ldi	r31, 0x00	; 0
    2ae0:	87 e8       	ldi	r24, 0x87	; 135
    2ae2:	93 e1       	ldi	r25, 0x13	; 19
    2ae4:	91 83       	std	Z+1, r25	; 0x01
    2ae6:	80 83       	st	Z, r24
}
    2ae8:	26 96       	adiw	r28, 0x06	; 6
    2aea:	0f b6       	in	r0, 0x3f	; 63
    2aec:	f8 94       	cli
    2aee:	de bf       	out	0x3e, r29	; 62
    2af0:	0f be       	out	0x3f, r0	; 63
    2af2:	cd bf       	out	0x3d, r28	; 61
    2af4:	cf 91       	pop	r28
    2af6:	df 91       	pop	r29
    2af8:	08 95       	ret

00002afa <Servo_Stop>:

void Servo_Stop()
{
    2afa:	df 93       	push	r29
    2afc:	cf 93       	push	r28
    2afe:	cd b7       	in	r28, 0x3d	; 61
    2b00:	de b7       	in	r29, 0x3e	; 62

	TIMER1_Stop();
    2b02:	0e 94 4a 0b 	call	0x1694	; 0x1694 <TIMER1_Stop>
}
    2b06:	cf 91       	pop	r28
    2b08:	df 91       	pop	r29
    2b0a:	08 95       	ret

00002b0c <LCD_ES_tTrigger_Enable>:
//ProtoType of static is defined in source file itself(Private declaration)
static ES_t LCD_ES_tTrigger_Enable(void);
static ES_t LCD_ES_tSet_Cursor_Pos(u8 row,u8 column);

//We make it static cuz we won't use it anywhere but here
static ES_t LCD_ES_tTrigger_Enable(void){
    2b0c:	df 93       	push	r29
    2b0e:	cf 93       	push	r28
    2b10:	cd b7       	in	r28, 0x3d	; 61
    2b12:	de b7       	in	r29, 0x3e	; 62
    2b14:	e0 97       	sbiw	r28, 0x30	; 48
    2b16:	0f b6       	in	r0, 0x3f	; 63
    2b18:	f8 94       	cli
    2b1a:	de bf       	out	0x3e, r29	; 62
    2b1c:	0f be       	out	0x3f, r0	; 63
    2b1e:	cd bf       	out	0x3d, r28	; 61
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, HIGH);
    2b20:	81 e0       	ldi	r24, 0x01	; 1
    2b22:	62 e0       	ldi	r22, 0x02	; 2
    2b24:	41 e0       	ldi	r20, 0x01	; 1
    2b26:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    2b2a:	80 e0       	ldi	r24, 0x00	; 0
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	a0 e2       	ldi	r26, 0x20	; 32
    2b30:	b1 e4       	ldi	r27, 0x41	; 65
    2b32:	8d a7       	std	Y+45, r24	; 0x2d
    2b34:	9e a7       	std	Y+46, r25	; 0x2e
    2b36:	af a7       	std	Y+47, r26	; 0x2f
    2b38:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b3a:	6d a5       	ldd	r22, Y+45	; 0x2d
    2b3c:	7e a5       	ldd	r23, Y+46	; 0x2e
    2b3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b40:	98 a9       	ldd	r25, Y+48	; 0x30
    2b42:	2b ea       	ldi	r18, 0xAB	; 171
    2b44:	3a ea       	ldi	r19, 0xAA	; 170
    2b46:	4a ea       	ldi	r20, 0xAA	; 170
    2b48:	50 e4       	ldi	r21, 0x40	; 64
    2b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	89 a7       	std	Y+41, r24	; 0x29
    2b54:	9a a7       	std	Y+42, r25	; 0x2a
    2b56:	ab a7       	std	Y+43, r26	; 0x2b
    2b58:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2b5a:	69 a5       	ldd	r22, Y+41	; 0x29
    2b5c:	7a a5       	ldd	r23, Y+42	; 0x2a
    2b5e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b60:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b62:	20 e0       	ldi	r18, 0x00	; 0
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	40 e8       	ldi	r20, 0x80	; 128
    2b68:	5f e3       	ldi	r21, 0x3F	; 63
    2b6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b6e:	88 23       	and	r24, r24
    2b70:	1c f4       	brge	.+6      	; 0x2b78 <LCD_ES_tTrigger_Enable+0x6c>
		__ticks = 1;
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	88 a7       	std	Y+40, r24	; 0x28
    2b76:	91 c0       	rjmp	.+290    	; 0x2c9a <LCD_ES_tTrigger_Enable+0x18e>
	else if (__tmp > 255)
    2b78:	69 a5       	ldd	r22, Y+41	; 0x29
    2b7a:	7a a5       	ldd	r23, Y+42	; 0x2a
    2b7c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b7e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	4f e7       	ldi	r20, 0x7F	; 127
    2b86:	53 e4       	ldi	r21, 0x43	; 67
    2b88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b8c:	18 16       	cp	r1, r24
    2b8e:	0c f0       	brlt	.+2      	; 0x2b92 <LCD_ES_tTrigger_Enable+0x86>
    2b90:	7b c0       	rjmp	.+246    	; 0x2c88 <LCD_ES_tTrigger_Enable+0x17c>
	{
		_delay_ms(__us / 1000.0);
    2b92:	6d a5       	ldd	r22, Y+45	; 0x2d
    2b94:	7e a5       	ldd	r23, Y+46	; 0x2e
    2b96:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b98:	98 a9       	ldd	r25, Y+48	; 0x30
    2b9a:	20 e0       	ldi	r18, 0x00	; 0
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	4a e7       	ldi	r20, 0x7A	; 122
    2ba0:	54 e4       	ldi	r21, 0x44	; 68
    2ba2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ba6:	dc 01       	movw	r26, r24
    2ba8:	cb 01       	movw	r24, r22
    2baa:	8c a3       	std	Y+36, r24	; 0x24
    2bac:	9d a3       	std	Y+37, r25	; 0x25
    2bae:	ae a3       	std	Y+38, r26	; 0x26
    2bb0:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bb2:	6c a1       	ldd	r22, Y+36	; 0x24
    2bb4:	7d a1       	ldd	r23, Y+37	; 0x25
    2bb6:	8e a1       	ldd	r24, Y+38	; 0x26
    2bb8:	9f a1       	ldd	r25, Y+39	; 0x27
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	4a e7       	ldi	r20, 0x7A	; 122
    2bc0:	55 e4       	ldi	r21, 0x45	; 69
    2bc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc6:	dc 01       	movw	r26, r24
    2bc8:	cb 01       	movw	r24, r22
    2bca:	88 a3       	std	Y+32, r24	; 0x20
    2bcc:	99 a3       	std	Y+33, r25	; 0x21
    2bce:	aa a3       	std	Y+34, r26	; 0x22
    2bd0:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2bd2:	68 a1       	ldd	r22, Y+32	; 0x20
    2bd4:	79 a1       	ldd	r23, Y+33	; 0x21
    2bd6:	8a a1       	ldd	r24, Y+34	; 0x22
    2bd8:	9b a1       	ldd	r25, Y+35	; 0x23
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	40 e8       	ldi	r20, 0x80	; 128
    2be0:	5f e3       	ldi	r21, 0x3F	; 63
    2be2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2be6:	88 23       	and	r24, r24
    2be8:	2c f4       	brge	.+10     	; 0x2bf4 <LCD_ES_tTrigger_Enable+0xe8>
		__ticks = 1;
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	9f 8f       	std	Y+31, r25	; 0x1f
    2bf0:	8e 8f       	std	Y+30, r24	; 0x1e
    2bf2:	3f c0       	rjmp	.+126    	; 0x2c72 <LCD_ES_tTrigger_Enable+0x166>
	else if (__tmp > 65535)
    2bf4:	68 a1       	ldd	r22, Y+32	; 0x20
    2bf6:	79 a1       	ldd	r23, Y+33	; 0x21
    2bf8:	8a a1       	ldd	r24, Y+34	; 0x22
    2bfa:	9b a1       	ldd	r25, Y+35	; 0x23
    2bfc:	20 e0       	ldi	r18, 0x00	; 0
    2bfe:	3f ef       	ldi	r19, 0xFF	; 255
    2c00:	4f e7       	ldi	r20, 0x7F	; 127
    2c02:	57 e4       	ldi	r21, 0x47	; 71
    2c04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c08:	18 16       	cp	r1, r24
    2c0a:	4c f5       	brge	.+82     	; 0x2c5e <LCD_ES_tTrigger_Enable+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c0c:	6c a1       	ldd	r22, Y+36	; 0x24
    2c0e:	7d a1       	ldd	r23, Y+37	; 0x25
    2c10:	8e a1       	ldd	r24, Y+38	; 0x26
    2c12:	9f a1       	ldd	r25, Y+39	; 0x27
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	40 e2       	ldi	r20, 0x20	; 32
    2c1a:	51 e4       	ldi	r21, 0x41	; 65
    2c1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c20:	dc 01       	movw	r26, r24
    2c22:	cb 01       	movw	r24, r22
    2c24:	bc 01       	movw	r22, r24
    2c26:	cd 01       	movw	r24, r26
    2c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c2c:	dc 01       	movw	r26, r24
    2c2e:	cb 01       	movw	r24, r22
    2c30:	9f 8f       	std	Y+31, r25	; 0x1f
    2c32:	8e 8f       	std	Y+30, r24	; 0x1e
    2c34:	0f c0       	rjmp	.+30     	; 0x2c54 <LCD_ES_tTrigger_Enable+0x148>
    2c36:	80 e9       	ldi	r24, 0x90	; 144
    2c38:	91 e0       	ldi	r25, 0x01	; 1
    2c3a:	9d 8f       	std	Y+29, r25	; 0x1d
    2c3c:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c3e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c40:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2c42:	01 97       	sbiw	r24, 0x01	; 1
    2c44:	f1 f7       	brne	.-4      	; 0x2c42 <LCD_ES_tTrigger_Enable+0x136>
    2c46:	9d 8f       	std	Y+29, r25	; 0x1d
    2c48:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c4a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c4c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c4e:	01 97       	sbiw	r24, 0x01	; 1
    2c50:	9f 8f       	std	Y+31, r25	; 0x1f
    2c52:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c54:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c56:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c58:	00 97       	sbiw	r24, 0x00	; 0
    2c5a:	69 f7       	brne	.-38     	; 0x2c36 <LCD_ES_tTrigger_Enable+0x12a>
    2c5c:	24 c0       	rjmp	.+72     	; 0x2ca6 <LCD_ES_tTrigger_Enable+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c5e:	68 a1       	ldd	r22, Y+32	; 0x20
    2c60:	79 a1       	ldd	r23, Y+33	; 0x21
    2c62:	8a a1       	ldd	r24, Y+34	; 0x22
    2c64:	9b a1       	ldd	r25, Y+35	; 0x23
    2c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c6a:	dc 01       	movw	r26, r24
    2c6c:	cb 01       	movw	r24, r22
    2c6e:	9f 8f       	std	Y+31, r25	; 0x1f
    2c70:	8e 8f       	std	Y+30, r24	; 0x1e
    2c72:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c74:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c76:	9b 8f       	std	Y+27, r25	; 0x1b
    2c78:	8a 8f       	std	Y+26, r24	; 0x1a
    2c7a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c7c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2c7e:	01 97       	sbiw	r24, 0x01	; 1
    2c80:	f1 f7       	brne	.-4      	; 0x2c7e <LCD_ES_tTrigger_Enable+0x172>
    2c82:	9b 8f       	std	Y+27, r25	; 0x1b
    2c84:	8a 8f       	std	Y+26, r24	; 0x1a
    2c86:	0f c0       	rjmp	.+30     	; 0x2ca6 <LCD_ES_tTrigger_Enable+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c88:	69 a5       	ldd	r22, Y+41	; 0x29
    2c8a:	7a a5       	ldd	r23, Y+42	; 0x2a
    2c8c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c8e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c94:	dc 01       	movw	r26, r24
    2c96:	cb 01       	movw	r24, r22
    2c98:	88 a7       	std	Y+40, r24	; 0x28
    2c9a:	88 a5       	ldd	r24, Y+40	; 0x28
    2c9c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c9e:	89 8d       	ldd	r24, Y+25	; 0x19
    2ca0:	8a 95       	dec	r24
    2ca2:	f1 f7       	brne	.-4      	; 0x2ca0 <LCD_ES_tTrigger_Enable+0x194>
    2ca4:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, LOW);
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	62 e0       	ldi	r22, 0x02	; 2
    2caa:	40 e0       	ldi	r20, 0x00	; 0
    2cac:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    2cb0:	80 e0       	ldi	r24, 0x00	; 0
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	aa ef       	ldi	r26, 0xFA	; 250
    2cb6:	b4 e4       	ldi	r27, 0x44	; 68
    2cb8:	8d 8b       	std	Y+21, r24	; 0x15
    2cba:	9e 8b       	std	Y+22, r25	; 0x16
    2cbc:	af 8b       	std	Y+23, r26	; 0x17
    2cbe:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2cc0:	6d 89       	ldd	r22, Y+21	; 0x15
    2cc2:	7e 89       	ldd	r23, Y+22	; 0x16
    2cc4:	8f 89       	ldd	r24, Y+23	; 0x17
    2cc6:	98 8d       	ldd	r25, Y+24	; 0x18
    2cc8:	2b ea       	ldi	r18, 0xAB	; 171
    2cca:	3a ea       	ldi	r19, 0xAA	; 170
    2ccc:	4a ea       	ldi	r20, 0xAA	; 170
    2cce:	50 e4       	ldi	r21, 0x40	; 64
    2cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd4:	dc 01       	movw	r26, r24
    2cd6:	cb 01       	movw	r24, r22
    2cd8:	89 8b       	std	Y+17, r24	; 0x11
    2cda:	9a 8b       	std	Y+18, r25	; 0x12
    2cdc:	ab 8b       	std	Y+19, r26	; 0x13
    2cde:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2ce0:	69 89       	ldd	r22, Y+17	; 0x11
    2ce2:	7a 89       	ldd	r23, Y+18	; 0x12
    2ce4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ce6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ce8:	20 e0       	ldi	r18, 0x00	; 0
    2cea:	30 e0       	ldi	r19, 0x00	; 0
    2cec:	40 e8       	ldi	r20, 0x80	; 128
    2cee:	5f e3       	ldi	r21, 0x3F	; 63
    2cf0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cf4:	88 23       	and	r24, r24
    2cf6:	1c f4       	brge	.+6      	; 0x2cfe <LCD_ES_tTrigger_Enable+0x1f2>
		__ticks = 1;
    2cf8:	81 e0       	ldi	r24, 0x01	; 1
    2cfa:	88 8b       	std	Y+16, r24	; 0x10
    2cfc:	91 c0       	rjmp	.+290    	; 0x2e20 <LCD_ES_tTrigger_Enable+0x314>
	else if (__tmp > 255)
    2cfe:	69 89       	ldd	r22, Y+17	; 0x11
    2d00:	7a 89       	ldd	r23, Y+18	; 0x12
    2d02:	8b 89       	ldd	r24, Y+19	; 0x13
    2d04:	9c 89       	ldd	r25, Y+20	; 0x14
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	4f e7       	ldi	r20, 0x7F	; 127
    2d0c:	53 e4       	ldi	r21, 0x43	; 67
    2d0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d12:	18 16       	cp	r1, r24
    2d14:	0c f0       	brlt	.+2      	; 0x2d18 <LCD_ES_tTrigger_Enable+0x20c>
    2d16:	7b c0       	rjmp	.+246    	; 0x2e0e <LCD_ES_tTrigger_Enable+0x302>
	{
		_delay_ms(__us / 1000.0);
    2d18:	6d 89       	ldd	r22, Y+21	; 0x15
    2d1a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d1c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d1e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	4a e7       	ldi	r20, 0x7A	; 122
    2d26:	54 e4       	ldi	r21, 0x44	; 68
    2d28:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2d2c:	dc 01       	movw	r26, r24
    2d2e:	cb 01       	movw	r24, r22
    2d30:	8c 87       	std	Y+12, r24	; 0x0c
    2d32:	9d 87       	std	Y+13, r25	; 0x0d
    2d34:	ae 87       	std	Y+14, r26	; 0x0e
    2d36:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d38:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d3a:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d3c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d3e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d40:	20 e0       	ldi	r18, 0x00	; 0
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	4a e7       	ldi	r20, 0x7A	; 122
    2d46:	55 e4       	ldi	r21, 0x45	; 69
    2d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	88 87       	std	Y+8, r24	; 0x08
    2d52:	99 87       	std	Y+9, r25	; 0x09
    2d54:	aa 87       	std	Y+10, r26	; 0x0a
    2d56:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2d58:	68 85       	ldd	r22, Y+8	; 0x08
    2d5a:	79 85       	ldd	r23, Y+9	; 0x09
    2d5c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d5e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	40 e8       	ldi	r20, 0x80	; 128
    2d66:	5f e3       	ldi	r21, 0x3F	; 63
    2d68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d6c:	88 23       	and	r24, r24
    2d6e:	2c f4       	brge	.+10     	; 0x2d7a <LCD_ES_tTrigger_Enable+0x26e>
		__ticks = 1;
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	9f 83       	std	Y+7, r25	; 0x07
    2d76:	8e 83       	std	Y+6, r24	; 0x06
    2d78:	3f c0       	rjmp	.+126    	; 0x2df8 <LCD_ES_tTrigger_Enable+0x2ec>
	else if (__tmp > 65535)
    2d7a:	68 85       	ldd	r22, Y+8	; 0x08
    2d7c:	79 85       	ldd	r23, Y+9	; 0x09
    2d7e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d80:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d82:	20 e0       	ldi	r18, 0x00	; 0
    2d84:	3f ef       	ldi	r19, 0xFF	; 255
    2d86:	4f e7       	ldi	r20, 0x7F	; 127
    2d88:	57 e4       	ldi	r21, 0x47	; 71
    2d8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d8e:	18 16       	cp	r1, r24
    2d90:	4c f5       	brge	.+82     	; 0x2de4 <LCD_ES_tTrigger_Enable+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d92:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d94:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d96:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d98:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d9a:	20 e0       	ldi	r18, 0x00	; 0
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	40 e2       	ldi	r20, 0x20	; 32
    2da0:	51 e4       	ldi	r21, 0x41	; 65
    2da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	bc 01       	movw	r22, r24
    2dac:	cd 01       	movw	r24, r26
    2dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db2:	dc 01       	movw	r26, r24
    2db4:	cb 01       	movw	r24, r22
    2db6:	9f 83       	std	Y+7, r25	; 0x07
    2db8:	8e 83       	std	Y+6, r24	; 0x06
    2dba:	0f c0       	rjmp	.+30     	; 0x2dda <LCD_ES_tTrigger_Enable+0x2ce>
    2dbc:	80 e9       	ldi	r24, 0x90	; 144
    2dbe:	91 e0       	ldi	r25, 0x01	; 1
    2dc0:	9d 83       	std	Y+5, r25	; 0x05
    2dc2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2dc4:	8c 81       	ldd	r24, Y+4	; 0x04
    2dc6:	9d 81       	ldd	r25, Y+5	; 0x05
    2dc8:	01 97       	sbiw	r24, 0x01	; 1
    2dca:	f1 f7       	brne	.-4      	; 0x2dc8 <LCD_ES_tTrigger_Enable+0x2bc>
    2dcc:	9d 83       	std	Y+5, r25	; 0x05
    2dce:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd0:	8e 81       	ldd	r24, Y+6	; 0x06
    2dd2:	9f 81       	ldd	r25, Y+7	; 0x07
    2dd4:	01 97       	sbiw	r24, 0x01	; 1
    2dd6:	9f 83       	std	Y+7, r25	; 0x07
    2dd8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dda:	8e 81       	ldd	r24, Y+6	; 0x06
    2ddc:	9f 81       	ldd	r25, Y+7	; 0x07
    2dde:	00 97       	sbiw	r24, 0x00	; 0
    2de0:	69 f7       	brne	.-38     	; 0x2dbc <LCD_ES_tTrigger_Enable+0x2b0>
    2de2:	24 c0       	rjmp	.+72     	; 0x2e2c <LCD_ES_tTrigger_Enable+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2de4:	68 85       	ldd	r22, Y+8	; 0x08
    2de6:	79 85       	ldd	r23, Y+9	; 0x09
    2de8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2dea:	9b 85       	ldd	r25, Y+11	; 0x0b
    2dec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df0:	dc 01       	movw	r26, r24
    2df2:	cb 01       	movw	r24, r22
    2df4:	9f 83       	std	Y+7, r25	; 0x07
    2df6:	8e 83       	std	Y+6, r24	; 0x06
    2df8:	8e 81       	ldd	r24, Y+6	; 0x06
    2dfa:	9f 81       	ldd	r25, Y+7	; 0x07
    2dfc:	9b 83       	std	Y+3, r25	; 0x03
    2dfe:	8a 83       	std	Y+2, r24	; 0x02
    2e00:	8a 81       	ldd	r24, Y+2	; 0x02
    2e02:	9b 81       	ldd	r25, Y+3	; 0x03
    2e04:	01 97       	sbiw	r24, 0x01	; 1
    2e06:	f1 f7       	brne	.-4      	; 0x2e04 <LCD_ES_tTrigger_Enable+0x2f8>
    2e08:	9b 83       	std	Y+3, r25	; 0x03
    2e0a:	8a 83       	std	Y+2, r24	; 0x02
    2e0c:	0f c0       	rjmp	.+30     	; 0x2e2c <LCD_ES_tTrigger_Enable+0x320>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e0e:	69 89       	ldd	r22, Y+17	; 0x11
    2e10:	7a 89       	ldd	r23, Y+18	; 0x12
    2e12:	8b 89       	ldd	r24, Y+19	; 0x13
    2e14:	9c 89       	ldd	r25, Y+20	; 0x14
    2e16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	88 8b       	std	Y+16, r24	; 0x10
    2e20:	88 89       	ldd	r24, Y+16	; 0x10
    2e22:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e24:	89 81       	ldd	r24, Y+1	; 0x01
    2e26:	8a 95       	dec	r24
    2e28:	f1 f7       	brne	.-4      	; 0x2e26 <LCD_ES_tTrigger_Enable+0x31a>
    2e2a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2000);
	return ES_OK;
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
}
    2e2e:	e0 96       	adiw	r28, 0x30	; 48
    2e30:	0f b6       	in	r0, 0x3f	; 63
    2e32:	f8 94       	cli
    2e34:	de bf       	out	0x3e, r29	; 62
    2e36:	0f be       	out	0x3f, r0	; 63
    2e38:	cd bf       	out	0x3d, r28	; 61
    2e3a:	cf 91       	pop	r28
    2e3c:	df 91       	pop	r29
    2e3e:	08 95       	ret

00002e40 <Lcd_ES_tInit>:


ES_t Lcd_ES_tInit(){
    2e40:	df 93       	push	r29
    2e42:	cf 93       	push	r28
    2e44:	cd b7       	in	r28, 0x3d	; 61
    2e46:	de b7       	in	r29, 0x3e	; 62
#if LCD_MODE == FOUR_BIT_MODE
	Lcd_ES_tsendCmd(Four_BitMode);   /* Go into 4-bit operating mode*/
    2e48:	82 e0       	ldi	r24, 0x02	; 2
    2e4a:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(D4_D7);  /* 2 Line, 5*7 matrix in 4-bit mode */
    2e4e:	88 e2       	ldi	r24, 0x28	; 40
    2e50:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
    2e54:	8e e0       	ldi	r24, 0x0E	; 14
    2e56:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
    2e5a:	86 e0       	ldi	r24, 0x06	; 6
    2e5c:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
    2e60:	81 e0       	ldi	r24, 0x01	; 1
    2e62:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <Lcd_ES_tsendCmd>
	return ES_OK;
    2e66:	80 e0       	ldi	r24, 0x00	; 0
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
	return ES_OK;
#endif
}
    2e68:	cf 91       	pop	r28
    2e6a:	df 91       	pop	r29
    2e6c:	08 95       	ret

00002e6e <lcd_ES_tclear>:
 *
 *	Ex. 0x28 0b 0010 1000  //Read bit by bit and see if it is low or high
 */

ES_t lcd_ES_tclear()
{
    2e6e:	df 93       	push	r29
    2e70:	cf 93       	push	r28
    2e72:	cd b7       	in	r28, 0x3d	; 61
    2e74:	de b7       	in	r29, 0x3e	; 62
    2e76:	2e 97       	sbiw	r28, 0x0e	; 14
    2e78:	0f b6       	in	r0, 0x3f	; 63
    2e7a:	f8 94       	cli
    2e7c:	de bf       	out	0x3e, r29	; 62
    2e7e:	0f be       	out	0x3f, r0	; 63
    2e80:	cd bf       	out	0x3d, r28	; 61
	Lcd_ES_tsendCmd(CLR_Display);
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <Lcd_ES_tsendCmd>
    2e88:	80 e0       	ldi	r24, 0x00	; 0
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	a0 e0       	ldi	r26, 0x00	; 0
    2e8e:	b0 e4       	ldi	r27, 0x40	; 64
    2e90:	8b 87       	std	Y+11, r24	; 0x0b
    2e92:	9c 87       	std	Y+12, r25	; 0x0c
    2e94:	ad 87       	std	Y+13, r26	; 0x0d
    2e96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e98:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	4a e7       	ldi	r20, 0x7A	; 122
    2ea6:	55 e4       	ldi	r21, 0x45	; 69
    2ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eac:	dc 01       	movw	r26, r24
    2eae:	cb 01       	movw	r24, r22
    2eb0:	8f 83       	std	Y+7, r24	; 0x07
    2eb2:	98 87       	std	Y+8, r25	; 0x08
    2eb4:	a9 87       	std	Y+9, r26	; 0x09
    2eb6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eb8:	6f 81       	ldd	r22, Y+7	; 0x07
    2eba:	78 85       	ldd	r23, Y+8	; 0x08
    2ebc:	89 85       	ldd	r24, Y+9	; 0x09
    2ebe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	40 e8       	ldi	r20, 0x80	; 128
    2ec6:	5f e3       	ldi	r21, 0x3F	; 63
    2ec8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ecc:	88 23       	and	r24, r24
    2ece:	2c f4       	brge	.+10     	; 0x2eda <lcd_ES_tclear+0x6c>
		__ticks = 1;
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	9e 83       	std	Y+6, r25	; 0x06
    2ed6:	8d 83       	std	Y+5, r24	; 0x05
    2ed8:	3f c0       	rjmp	.+126    	; 0x2f58 <lcd_ES_tclear+0xea>
	else if (__tmp > 65535)
    2eda:	6f 81       	ldd	r22, Y+7	; 0x07
    2edc:	78 85       	ldd	r23, Y+8	; 0x08
    2ede:	89 85       	ldd	r24, Y+9	; 0x09
    2ee0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ee2:	20 e0       	ldi	r18, 0x00	; 0
    2ee4:	3f ef       	ldi	r19, 0xFF	; 255
    2ee6:	4f e7       	ldi	r20, 0x7F	; 127
    2ee8:	57 e4       	ldi	r21, 0x47	; 71
    2eea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eee:	18 16       	cp	r1, r24
    2ef0:	4c f5       	brge	.+82     	; 0x2f44 <lcd_ES_tclear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ef2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ef4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ef6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ef8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	40 e2       	ldi	r20, 0x20	; 32
    2f00:	51 e4       	ldi	r21, 0x41	; 65
    2f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	bc 01       	movw	r22, r24
    2f0c:	cd 01       	movw	r24, r26
    2f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f12:	dc 01       	movw	r26, r24
    2f14:	cb 01       	movw	r24, r22
    2f16:	9e 83       	std	Y+6, r25	; 0x06
    2f18:	8d 83       	std	Y+5, r24	; 0x05
    2f1a:	0f c0       	rjmp	.+30     	; 0x2f3a <lcd_ES_tclear+0xcc>
    2f1c:	80 e9       	ldi	r24, 0x90	; 144
    2f1e:	91 e0       	ldi	r25, 0x01	; 1
    2f20:	9c 83       	std	Y+4, r25	; 0x04
    2f22:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f24:	8b 81       	ldd	r24, Y+3	; 0x03
    2f26:	9c 81       	ldd	r25, Y+4	; 0x04
    2f28:	01 97       	sbiw	r24, 0x01	; 1
    2f2a:	f1 f7       	brne	.-4      	; 0x2f28 <lcd_ES_tclear+0xba>
    2f2c:	9c 83       	std	Y+4, r25	; 0x04
    2f2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f30:	8d 81       	ldd	r24, Y+5	; 0x05
    2f32:	9e 81       	ldd	r25, Y+6	; 0x06
    2f34:	01 97       	sbiw	r24, 0x01	; 1
    2f36:	9e 83       	std	Y+6, r25	; 0x06
    2f38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f3e:	00 97       	sbiw	r24, 0x00	; 0
    2f40:	69 f7       	brne	.-38     	; 0x2f1c <lcd_ES_tclear+0xae>
    2f42:	14 c0       	rjmp	.+40     	; 0x2f6c <lcd_ES_tclear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f44:	6f 81       	ldd	r22, Y+7	; 0x07
    2f46:	78 85       	ldd	r23, Y+8	; 0x08
    2f48:	89 85       	ldd	r24, Y+9	; 0x09
    2f4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f50:	dc 01       	movw	r26, r24
    2f52:	cb 01       	movw	r24, r22
    2f54:	9e 83       	std	Y+6, r25	; 0x06
    2f56:	8d 83       	std	Y+5, r24	; 0x05
    2f58:	8d 81       	ldd	r24, Y+5	; 0x05
    2f5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f5c:	9a 83       	std	Y+2, r25	; 0x02
    2f5e:	89 83       	std	Y+1, r24	; 0x01
    2f60:	89 81       	ldd	r24, Y+1	; 0x01
    2f62:	9a 81       	ldd	r25, Y+2	; 0x02
    2f64:	01 97       	sbiw	r24, 0x01	; 1
    2f66:	f1 f7       	brne	.-4      	; 0x2f64 <lcd_ES_tclear+0xf6>
    2f68:	9a 83       	std	Y+2, r25	; 0x02
    2f6a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	return ES_OK;
    2f6c:	80 e0       	ldi	r24, 0x00	; 0
}
    2f6e:	2e 96       	adiw	r28, 0x0e	; 14
    2f70:	0f b6       	in	r0, 0x3f	; 63
    2f72:	f8 94       	cli
    2f74:	de bf       	out	0x3e, r29	; 62
    2f76:	0f be       	out	0x3f, r0	; 63
    2f78:	cd bf       	out	0x3d, r28	; 61
    2f7a:	cf 91       	pop	r28
    2f7c:	df 91       	pop	r29
    2f7e:	08 95       	ret

00002f80 <Lcd_ES_tsendCmd>:

ES_t Lcd_ES_tsendCmd(u8 cmd){
    2f80:	df 93       	push	r29
    2f82:	cf 93       	push	r28
    2f84:	0f 92       	push	r0
    2f86:	cd b7       	in	r28, 0x3d	; 61
    2f88:	de b7       	in	r29, 0x3e	; 62
    2f8a:	89 83       	std	Y+1, r24	; 0x01
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, LOW);
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	61 e0       	ldi	r22, 0x01	; 1
    2f90:	40 e0       	ldi	r20, 0x00	; 0
    2f92:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2f96:	81 e0       	ldi	r24, 0x01	; 1
    2f98:	60 e0       	ldi	r22, 0x00	; 0
    2f9a:	40 e0       	ldi	r20, 0x00	; 0
    2f9c:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	// DIO_ES_tGetPinValue, DIO_ES_tSetPinValue
	// if(GET_BIT(cmd,7)){Dio_Write(D7,HIGH);}else{Dio_write(D7,LOW);}
	// We use ternary operator instead
#if LCD_MODE == FOUR_BIT_MODE
	(GET_BIT(cmd,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    2fa0:	89 81       	ldd	r24, Y+1	; 0x01
    2fa2:	88 23       	and	r24, r24
    2fa4:	34 f4       	brge	.+12     	; 0x2fb2 <Lcd_ES_tsendCmd+0x32>
    2fa6:	80 e0       	ldi	r24, 0x00	; 0
    2fa8:	66 e0       	ldi	r22, 0x06	; 6
    2faa:	41 e0       	ldi	r20, 0x01	; 1
    2fac:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    2fb0:	05 c0       	rjmp	.+10     	; 0x2fbc <Lcd_ES_tsendCmd+0x3c>
    2fb2:	80 e0       	ldi	r24, 0x00	; 0
    2fb4:	66 e0       	ldi	r22, 0x06	; 6
    2fb6:	40 e0       	ldi	r20, 0x00	; 0
    2fb8:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    2fbc:	89 81       	ldd	r24, Y+1	; 0x01
    2fbe:	82 95       	swap	r24
    2fc0:	86 95       	lsr	r24
    2fc2:	86 95       	lsr	r24
    2fc4:	83 70       	andi	r24, 0x03	; 3
    2fc6:	88 2f       	mov	r24, r24
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	81 70       	andi	r24, 0x01	; 1
    2fcc:	90 70       	andi	r25, 0x00	; 0
    2fce:	88 23       	and	r24, r24
    2fd0:	31 f0       	breq	.+12     	; 0x2fde <Lcd_ES_tsendCmd+0x5e>
    2fd2:	80 e0       	ldi	r24, 0x00	; 0
    2fd4:	65 e0       	ldi	r22, 0x05	; 5
    2fd6:	41 e0       	ldi	r20, 0x01	; 1
    2fd8:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    2fdc:	05 c0       	rjmp	.+10     	; 0x2fe8 <Lcd_ES_tsendCmd+0x68>
    2fde:	80 e0       	ldi	r24, 0x00	; 0
    2fe0:	65 e0       	ldi	r22, 0x05	; 5
    2fe2:	40 e0       	ldi	r20, 0x00	; 0
    2fe4:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    2fe8:	89 81       	ldd	r24, Y+1	; 0x01
    2fea:	82 95       	swap	r24
    2fec:	86 95       	lsr	r24
    2fee:	87 70       	andi	r24, 0x07	; 7
    2ff0:	88 2f       	mov	r24, r24
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	81 70       	andi	r24, 0x01	; 1
    2ff6:	90 70       	andi	r25, 0x00	; 0
    2ff8:	88 23       	and	r24, r24
    2ffa:	31 f0       	breq	.+12     	; 0x3008 <Lcd_ES_tsendCmd+0x88>
    2ffc:	80 e0       	ldi	r24, 0x00	; 0
    2ffe:	64 e0       	ldi	r22, 0x04	; 4
    3000:	41 e0       	ldi	r20, 0x01	; 1
    3002:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    3006:	05 c0       	rjmp	.+10     	; 0x3012 <Lcd_ES_tsendCmd+0x92>
    3008:	80 e0       	ldi	r24, 0x00	; 0
    300a:	64 e0       	ldi	r22, 0x04	; 4
    300c:	40 e0       	ldi	r20, 0x00	; 0
    300e:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    3012:	89 81       	ldd	r24, Y+1	; 0x01
    3014:	82 95       	swap	r24
    3016:	8f 70       	andi	r24, 0x0F	; 15
    3018:	88 2f       	mov	r24, r24
    301a:	90 e0       	ldi	r25, 0x00	; 0
    301c:	81 70       	andi	r24, 0x01	; 1
    301e:	90 70       	andi	r25, 0x00	; 0
    3020:	88 23       	and	r24, r24
    3022:	31 f0       	breq	.+12     	; 0x3030 <Lcd_ES_tsendCmd+0xb0>
    3024:	80 e0       	ldi	r24, 0x00	; 0
    3026:	63 e0       	ldi	r22, 0x03	; 3
    3028:	41 e0       	ldi	r20, 0x01	; 1
    302a:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    302e:	05 c0       	rjmp	.+10     	; 0x303a <Lcd_ES_tsendCmd+0xba>
    3030:	80 e0       	ldi	r24, 0x00	; 0
    3032:	63 e0       	ldi	r22, 0x03	; 3
    3034:	40 e0       	ldi	r20, 0x00	; 0
    3036:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    303a:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <LCD_ES_tTrigger_Enable>
	(GET_BIT(cmd,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    303e:	89 81       	ldd	r24, Y+1	; 0x01
    3040:	86 95       	lsr	r24
    3042:	86 95       	lsr	r24
    3044:	86 95       	lsr	r24
    3046:	88 2f       	mov	r24, r24
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	81 70       	andi	r24, 0x01	; 1
    304c:	90 70       	andi	r25, 0x00	; 0
    304e:	88 23       	and	r24, r24
    3050:	31 f0       	breq	.+12     	; 0x305e <Lcd_ES_tsendCmd+0xde>
    3052:	80 e0       	ldi	r24, 0x00	; 0
    3054:	66 e0       	ldi	r22, 0x06	; 6
    3056:	41 e0       	ldi	r20, 0x01	; 1
    3058:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    305c:	05 c0       	rjmp	.+10     	; 0x3068 <Lcd_ES_tsendCmd+0xe8>
    305e:	80 e0       	ldi	r24, 0x00	; 0
    3060:	66 e0       	ldi	r22, 0x06	; 6
    3062:	40 e0       	ldi	r20, 0x00	; 0
    3064:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    3068:	89 81       	ldd	r24, Y+1	; 0x01
    306a:	86 95       	lsr	r24
    306c:	86 95       	lsr	r24
    306e:	88 2f       	mov	r24, r24
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	81 70       	andi	r24, 0x01	; 1
    3074:	90 70       	andi	r25, 0x00	; 0
    3076:	88 23       	and	r24, r24
    3078:	31 f0       	breq	.+12     	; 0x3086 <Lcd_ES_tsendCmd+0x106>
    307a:	80 e0       	ldi	r24, 0x00	; 0
    307c:	65 e0       	ldi	r22, 0x05	; 5
    307e:	41 e0       	ldi	r20, 0x01	; 1
    3080:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    3084:	05 c0       	rjmp	.+10     	; 0x3090 <Lcd_ES_tsendCmd+0x110>
    3086:	80 e0       	ldi	r24, 0x00	; 0
    3088:	65 e0       	ldi	r22, 0x05	; 5
    308a:	40 e0       	ldi	r20, 0x00	; 0
    308c:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    3090:	89 81       	ldd	r24, Y+1	; 0x01
    3092:	86 95       	lsr	r24
    3094:	88 2f       	mov	r24, r24
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	81 70       	andi	r24, 0x01	; 1
    309a:	90 70       	andi	r25, 0x00	; 0
    309c:	88 23       	and	r24, r24
    309e:	31 f0       	breq	.+12     	; 0x30ac <Lcd_ES_tsendCmd+0x12c>
    30a0:	80 e0       	ldi	r24, 0x00	; 0
    30a2:	64 e0       	ldi	r22, 0x04	; 4
    30a4:	41 e0       	ldi	r20, 0x01	; 1
    30a6:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    30aa:	05 c0       	rjmp	.+10     	; 0x30b6 <Lcd_ES_tsendCmd+0x136>
    30ac:	80 e0       	ldi	r24, 0x00	; 0
    30ae:	64 e0       	ldi	r22, 0x04	; 4
    30b0:	40 e0       	ldi	r20, 0x00	; 0
    30b2:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    30b6:	89 81       	ldd	r24, Y+1	; 0x01
    30b8:	88 2f       	mov	r24, r24
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	81 70       	andi	r24, 0x01	; 1
    30be:	90 70       	andi	r25, 0x00	; 0
    30c0:	88 23       	and	r24, r24
    30c2:	31 f0       	breq	.+12     	; 0x30d0 <Lcd_ES_tsendCmd+0x150>
    30c4:	80 e0       	ldi	r24, 0x00	; 0
    30c6:	63 e0       	ldi	r22, 0x03	; 3
    30c8:	41 e0       	ldi	r20, 0x01	; 1
    30ca:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    30ce:	05 c0       	rjmp	.+10     	; 0x30da <Lcd_ES_tsendCmd+0x15a>
    30d0:	80 e0       	ldi	r24, 0x00	; 0
    30d2:	63 e0       	ldi	r22, 0x03	; 3
    30d4:	40 e0       	ldi	r20, 0x00	; 0
    30d6:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    30da:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <LCD_ES_tTrigger_Enable>
	return ES_OK;
    30de:	80 e0       	ldi	r24, 0x00	; 0
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D0,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D0,LOW);
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif
}
    30e0:	0f 90       	pop	r0
    30e2:	cf 91       	pop	r28
    30e4:	df 91       	pop	r29
    30e6:	08 95       	ret

000030e8 <Lcd_ES_tsendChar>:
ES_t Lcd_ES_tsendChar(u8 data){
    30e8:	df 93       	push	r29
    30ea:	cf 93       	push	r28
    30ec:	0f 92       	push	r0
    30ee:	cd b7       	in	r28, 0x3d	; 61
    30f0:	de b7       	in	r29, 0x3e	; 62
    30f2:	89 83       	std	Y+1, r24	; 0x01
#if LCD_MODE == FOUR_BIT_MODE
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    30f4:	81 e0       	ldi	r24, 0x01	; 1
    30f6:	61 e0       	ldi	r22, 0x01	; 1
    30f8:	41 e0       	ldi	r20, 0x01	; 1
    30fa:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    30fe:	81 e0       	ldi	r24, 0x01	; 1
    3100:	60 e0       	ldi	r22, 0x00	; 0
    3102:	40 e0       	ldi	r20, 0x00	; 0
    3104:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	(GET_BIT(data,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    3108:	89 81       	ldd	r24, Y+1	; 0x01
    310a:	88 23       	and	r24, r24
    310c:	34 f4       	brge	.+12     	; 0x311a <Lcd_ES_tsendChar+0x32>
    310e:	80 e0       	ldi	r24, 0x00	; 0
    3110:	66 e0       	ldi	r22, 0x06	; 6
    3112:	41 e0       	ldi	r20, 0x01	; 1
    3114:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    3118:	05 c0       	rjmp	.+10     	; 0x3124 <Lcd_ES_tsendChar+0x3c>
    311a:	80 e0       	ldi	r24, 0x00	; 0
    311c:	66 e0       	ldi	r22, 0x06	; 6
    311e:	40 e0       	ldi	r20, 0x00	; 0
    3120:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	(GET_BIT(data,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    3124:	89 81       	ldd	r24, Y+1	; 0x01
    3126:	82 95       	swap	r24
    3128:	86 95       	lsr	r24
    312a:	86 95       	lsr	r24
    312c:	83 70       	andi	r24, 0x03	; 3
    312e:	88 2f       	mov	r24, r24
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	81 70       	andi	r24, 0x01	; 1
    3134:	90 70       	andi	r25, 0x00	; 0
    3136:	88 23       	and	r24, r24
    3138:	31 f0       	breq	.+12     	; 0x3146 <Lcd_ES_tsendChar+0x5e>
    313a:	80 e0       	ldi	r24, 0x00	; 0
    313c:	65 e0       	ldi	r22, 0x05	; 5
    313e:	41 e0       	ldi	r20, 0x01	; 1
    3140:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    3144:	05 c0       	rjmp	.+10     	; 0x3150 <Lcd_ES_tsendChar+0x68>
    3146:	80 e0       	ldi	r24, 0x00	; 0
    3148:	65 e0       	ldi	r22, 0x05	; 5
    314a:	40 e0       	ldi	r20, 0x00	; 0
    314c:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	(GET_BIT(data,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    3150:	89 81       	ldd	r24, Y+1	; 0x01
    3152:	82 95       	swap	r24
    3154:	86 95       	lsr	r24
    3156:	87 70       	andi	r24, 0x07	; 7
    3158:	88 2f       	mov	r24, r24
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	81 70       	andi	r24, 0x01	; 1
    315e:	90 70       	andi	r25, 0x00	; 0
    3160:	88 23       	and	r24, r24
    3162:	31 f0       	breq	.+12     	; 0x3170 <Lcd_ES_tsendChar+0x88>
    3164:	80 e0       	ldi	r24, 0x00	; 0
    3166:	64 e0       	ldi	r22, 0x04	; 4
    3168:	41 e0       	ldi	r20, 0x01	; 1
    316a:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    316e:	05 c0       	rjmp	.+10     	; 0x317a <Lcd_ES_tsendChar+0x92>
    3170:	80 e0       	ldi	r24, 0x00	; 0
    3172:	64 e0       	ldi	r22, 0x04	; 4
    3174:	40 e0       	ldi	r20, 0x00	; 0
    3176:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	(GET_BIT(data,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    317a:	89 81       	ldd	r24, Y+1	; 0x01
    317c:	82 95       	swap	r24
    317e:	8f 70       	andi	r24, 0x0F	; 15
    3180:	88 2f       	mov	r24, r24
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	81 70       	andi	r24, 0x01	; 1
    3186:	90 70       	andi	r25, 0x00	; 0
    3188:	88 23       	and	r24, r24
    318a:	31 f0       	breq	.+12     	; 0x3198 <Lcd_ES_tsendChar+0xb0>
    318c:	80 e0       	ldi	r24, 0x00	; 0
    318e:	63 e0       	ldi	r22, 0x03	; 3
    3190:	41 e0       	ldi	r20, 0x01	; 1
    3192:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    3196:	05 c0       	rjmp	.+10     	; 0x31a2 <Lcd_ES_tsendChar+0xba>
    3198:	80 e0       	ldi	r24, 0x00	; 0
    319a:	63 e0       	ldi	r22, 0x03	; 3
    319c:	40 e0       	ldi	r20, 0x00	; 0
    319e:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    31a2:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <LCD_ES_tTrigger_Enable>
	(GET_BIT(data,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    31a6:	89 81       	ldd	r24, Y+1	; 0x01
    31a8:	86 95       	lsr	r24
    31aa:	86 95       	lsr	r24
    31ac:	86 95       	lsr	r24
    31ae:	88 2f       	mov	r24, r24
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	81 70       	andi	r24, 0x01	; 1
    31b4:	90 70       	andi	r25, 0x00	; 0
    31b6:	88 23       	and	r24, r24
    31b8:	31 f0       	breq	.+12     	; 0x31c6 <Lcd_ES_tsendChar+0xde>
    31ba:	80 e0       	ldi	r24, 0x00	; 0
    31bc:	66 e0       	ldi	r22, 0x06	; 6
    31be:	41 e0       	ldi	r20, 0x01	; 1
    31c0:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    31c4:	05 c0       	rjmp	.+10     	; 0x31d0 <Lcd_ES_tsendChar+0xe8>
    31c6:	80 e0       	ldi	r24, 0x00	; 0
    31c8:	66 e0       	ldi	r22, 0x06	; 6
    31ca:	40 e0       	ldi	r20, 0x00	; 0
    31cc:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	(GET_BIT(data,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    31d0:	89 81       	ldd	r24, Y+1	; 0x01
    31d2:	86 95       	lsr	r24
    31d4:	86 95       	lsr	r24
    31d6:	88 2f       	mov	r24, r24
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	81 70       	andi	r24, 0x01	; 1
    31dc:	90 70       	andi	r25, 0x00	; 0
    31de:	88 23       	and	r24, r24
    31e0:	31 f0       	breq	.+12     	; 0x31ee <Lcd_ES_tsendChar+0x106>
    31e2:	80 e0       	ldi	r24, 0x00	; 0
    31e4:	65 e0       	ldi	r22, 0x05	; 5
    31e6:	41 e0       	ldi	r20, 0x01	; 1
    31e8:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    31ec:	05 c0       	rjmp	.+10     	; 0x31f8 <Lcd_ES_tsendChar+0x110>
    31ee:	80 e0       	ldi	r24, 0x00	; 0
    31f0:	65 e0       	ldi	r22, 0x05	; 5
    31f2:	40 e0       	ldi	r20, 0x00	; 0
    31f4:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	(GET_BIT(data,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    31f8:	89 81       	ldd	r24, Y+1	; 0x01
    31fa:	86 95       	lsr	r24
    31fc:	88 2f       	mov	r24, r24
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	81 70       	andi	r24, 0x01	; 1
    3202:	90 70       	andi	r25, 0x00	; 0
    3204:	88 23       	and	r24, r24
    3206:	31 f0       	breq	.+12     	; 0x3214 <Lcd_ES_tsendChar+0x12c>
    3208:	80 e0       	ldi	r24, 0x00	; 0
    320a:	64 e0       	ldi	r22, 0x04	; 4
    320c:	41 e0       	ldi	r20, 0x01	; 1
    320e:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    3212:	05 c0       	rjmp	.+10     	; 0x321e <Lcd_ES_tsendChar+0x136>
    3214:	80 e0       	ldi	r24, 0x00	; 0
    3216:	64 e0       	ldi	r22, 0x04	; 4
    3218:	40 e0       	ldi	r20, 0x00	; 0
    321a:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	(GET_BIT(data,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    321e:	89 81       	ldd	r24, Y+1	; 0x01
    3220:	88 2f       	mov	r24, r24
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	81 70       	andi	r24, 0x01	; 1
    3226:	90 70       	andi	r25, 0x00	; 0
    3228:	88 23       	and	r24, r24
    322a:	31 f0       	breq	.+12     	; 0x3238 <Lcd_ES_tsendChar+0x150>
    322c:	80 e0       	ldi	r24, 0x00	; 0
    322e:	63 e0       	ldi	r22, 0x03	; 3
    3230:	41 e0       	ldi	r20, 0x01	; 1
    3232:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    3236:	05 c0       	rjmp	.+10     	; 0x3242 <Lcd_ES_tsendChar+0x15a>
    3238:	80 e0       	ldi	r24, 0x00	; 0
    323a:	63 e0       	ldi	r22, 0x03	; 3
    323c:	40 e0       	ldi	r20, 0x00	; 0
    323e:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    3242:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <LCD_ES_tTrigger_Enable>
	return ES_OK;
    3246:	80 e0       	ldi	r24, 0x00	; 0
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif

}
    3248:	0f 90       	pop	r0
    324a:	cf 91       	pop	r28
    324c:	df 91       	pop	r29
    324e:	08 95       	ret

00003250 <Lcd_ES_tsendString>:

ES_t Lcd_ES_tsendString(char *data)
{
    3250:	df 93       	push	r29
    3252:	cf 93       	push	r28
    3254:	00 d0       	rcall	.+0      	; 0x3256 <Lcd_ES_tsendString+0x6>
    3256:	0f 92       	push	r0
    3258:	cd b7       	in	r28, 0x3d	; 61
    325a:	de b7       	in	r29, 0x3e	; 62
    325c:	9b 83       	std	Y+3, r25	; 0x03
    325e:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    3260:	81 e0       	ldi	r24, 0x01	; 1
    3262:	61 e0       	ldi	r22, 0x01	; 1
    3264:	41 e0       	ldi	r20, 0x01	; 1
    3266:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    326a:	81 e0       	ldi	r24, 0x01	; 1
    326c:	60 e0       	ldi	r22, 0x00	; 0
    326e:	40 e0       	ldi	r20, 0x00	; 0
    3270:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>

	unsigned char i=0;
    3274:	19 82       	std	Y+1, r1	; 0x01
    3276:	0e c0       	rjmp	.+28     	; 0x3294 <Lcd_ES_tsendString+0x44>
	while(data[i]!=0)
	{
		Lcd_ES_tsendChar(data[i]);
    3278:	89 81       	ldd	r24, Y+1	; 0x01
    327a:	28 2f       	mov	r18, r24
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	8a 81       	ldd	r24, Y+2	; 0x02
    3280:	9b 81       	ldd	r25, Y+3	; 0x03
    3282:	fc 01       	movw	r30, r24
    3284:	e2 0f       	add	r30, r18
    3286:	f3 1f       	adc	r31, r19
    3288:	80 81       	ld	r24, Z
    328a:	0e 94 74 18 	call	0x30e8	; 0x30e8 <Lcd_ES_tsendChar>
		i++;
    328e:	89 81       	ldd	r24, Y+1	; 0x01
    3290:	8f 5f       	subi	r24, 0xFF	; 255
    3292:	89 83       	std	Y+1, r24	; 0x01
{
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);

	unsigned char i=0;
	while(data[i]!=0)
    3294:	89 81       	ldd	r24, Y+1	; 0x01
    3296:	28 2f       	mov	r18, r24
    3298:	30 e0       	ldi	r19, 0x00	; 0
    329a:	8a 81       	ldd	r24, Y+2	; 0x02
    329c:	9b 81       	ldd	r25, Y+3	; 0x03
    329e:	fc 01       	movw	r30, r24
    32a0:	e2 0f       	add	r30, r18
    32a2:	f3 1f       	adc	r31, r19
    32a4:	80 81       	ld	r24, Z
    32a6:	88 23       	and	r24, r24
    32a8:	39 f7       	brne	.-50     	; 0x3278 <Lcd_ES_tsendString+0x28>
	{
		Lcd_ES_tsendChar(data[i]);
		i++;
	}
	return ES_OK;
    32aa:	80 e0       	ldi	r24, 0x00	; 0
}
    32ac:	0f 90       	pop	r0
    32ae:	0f 90       	pop	r0
    32b0:	0f 90       	pop	r0
    32b2:	cf 91       	pop	r28
    32b4:	df 91       	pop	r29
    32b6:	08 95       	ret

000032b8 <Lcd_ES_tsendString_xy>:

ES_t Lcd_ES_tsendString_xy(char *data,u8 row,u8 col){
    32b8:	df 93       	push	r29
    32ba:	cf 93       	push	r28
    32bc:	00 d0       	rcall	.+0      	; 0x32be <Lcd_ES_tsendString_xy+0x6>
    32be:	00 d0       	rcall	.+0      	; 0x32c0 <Lcd_ES_tsendString_xy+0x8>
    32c0:	cd b7       	in	r28, 0x3d	; 61
    32c2:	de b7       	in	r29, 0x3e	; 62
    32c4:	9a 83       	std	Y+2, r25	; 0x02
    32c6:	89 83       	std	Y+1, r24	; 0x01
    32c8:	6b 83       	std	Y+3, r22	; 0x03
    32ca:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    32cc:	81 e0       	ldi	r24, 0x01	; 1
    32ce:	61 e0       	ldi	r22, 0x01	; 1
    32d0:	41 e0       	ldi	r20, 0x01	; 1
    32d2:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    32d6:	81 e0       	ldi	r24, 0x01	; 1
    32d8:	60 e0       	ldi	r22, 0x00	; 0
    32da:	40 e0       	ldi	r20, 0x00	; 0
    32dc:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>

	LCD_ES_tSet_Cursor_Pos(row,col);
    32e0:	8b 81       	ldd	r24, Y+3	; 0x03
    32e2:	6c 81       	ldd	r22, Y+4	; 0x04
    32e4:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <LCD_ES_tSet_Cursor_Pos>
	Lcd_ES_tsendString(data);
    32e8:	89 81       	ldd	r24, Y+1	; 0x01
    32ea:	9a 81       	ldd	r25, Y+2	; 0x02
    32ec:	0e 94 28 19 	call	0x3250	; 0x3250 <Lcd_ES_tsendString>
	return ES_OK;
    32f0:	80 e0       	ldi	r24, 0x00	; 0

}
    32f2:	0f 90       	pop	r0
    32f4:	0f 90       	pop	r0
    32f6:	0f 90       	pop	r0
    32f8:	0f 90       	pop	r0
    32fa:	cf 91       	pop	r28
    32fc:	df 91       	pop	r29
    32fe:	08 95       	ret

00003300 <Lcd_ES_tdisplayNum>:


//A function to display Numbers instead of characters
ES_t Lcd_ES_tdisplayNum(u32 num)
{
    3300:	0f 93       	push	r16
    3302:	1f 93       	push	r17
    3304:	df 93       	push	r29
    3306:	cf 93       	push	r28
    3308:	cd b7       	in	r28, 0x3d	; 61
    330a:	de b7       	in	r29, 0x3e	; 62
    330c:	60 97       	sbiw	r28, 0x10	; 16
    330e:	0f b6       	in	r0, 0x3f	; 63
    3310:	f8 94       	cli
    3312:	de bf       	out	0x3e, r29	; 62
    3314:	0f be       	out	0x3f, r0	; 63
    3316:	cd bf       	out	0x3d, r28	; 61
    3318:	6d 87       	std	Y+13, r22	; 0x0d
    331a:	7e 87       	std	Y+14, r23	; 0x0e
    331c:	8f 87       	std	Y+15, r24	; 0x0f
    331e:	98 8b       	std	Y+16, r25	; 0x10
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    3320:	81 e0       	ldi	r24, 0x01	; 1
    3322:	61 e0       	ldi	r22, 0x01	; 1
    3324:	41 e0       	ldi	r20, 0x01	; 1
    3326:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    332a:	81 e0       	ldi	r24, 0x01	; 1
    332c:	60 e0       	ldi	r22, 0x00	; 0
    332e:	40 e0       	ldi	r20, 0x00	; 0
    3330:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>

	uint8_t ch[10],i=0,j=0;
    3334:	1a 82       	std	Y+2, r1	; 0x02
    3336:	19 82       	std	Y+1, r1	; 0x01
	if(num == 0)
    3338:	8d 85       	ldd	r24, Y+13	; 0x0d
    333a:	9e 85       	ldd	r25, Y+14	; 0x0e
    333c:	af 85       	ldd	r26, Y+15	; 0x0f
    333e:	b8 89       	ldd	r27, Y+16	; 0x10
    3340:	00 97       	sbiw	r24, 0x00	; 0
    3342:	a1 05       	cpc	r26, r1
    3344:	b1 05       	cpc	r27, r1
    3346:	91 f5       	brne	.+100    	; 0x33ac <Lcd_ES_tdisplayNum+0xac>
	{
		Lcd_ES_tsendChar('0');
    3348:	80 e3       	ldi	r24, 0x30	; 48
    334a:	0e 94 74 18 	call	0x30e8	; 0x30e8 <Lcd_ES_tsendChar>
    334e:	4d c0       	rjmp	.+154    	; 0x33ea <Lcd_ES_tdisplayNum+0xea>
	}
	else
	{
		while(num)
		{
			ch[i] = num % 10 + '0';  //To convert int to char
    3350:	8a 81       	ldd	r24, Y+2	; 0x02
    3352:	08 2f       	mov	r16, r24
    3354:	10 e0       	ldi	r17, 0x00	; 0
    3356:	8d 85       	ldd	r24, Y+13	; 0x0d
    3358:	9e 85       	ldd	r25, Y+14	; 0x0e
    335a:	af 85       	ldd	r26, Y+15	; 0x0f
    335c:	b8 89       	ldd	r27, Y+16	; 0x10
    335e:	2a e0       	ldi	r18, 0x0A	; 10
    3360:	30 e0       	ldi	r19, 0x00	; 0
    3362:	40 e0       	ldi	r20, 0x00	; 0
    3364:	50 e0       	ldi	r21, 0x00	; 0
    3366:	bc 01       	movw	r22, r24
    3368:	cd 01       	movw	r24, r26
    336a:	0e 94 0b 20 	call	0x4016	; 0x4016 <__udivmodsi4>
    336e:	dc 01       	movw	r26, r24
    3370:	cb 01       	movw	r24, r22
    3372:	28 2f       	mov	r18, r24
    3374:	20 5d       	subi	r18, 0xD0	; 208
    3376:	ce 01       	movw	r24, r28
    3378:	03 96       	adiw	r24, 0x03	; 3
    337a:	fc 01       	movw	r30, r24
    337c:	e0 0f       	add	r30, r16
    337e:	f1 1f       	adc	r31, r17
    3380:	20 83       	st	Z, r18
			num /= 10;
    3382:	8d 85       	ldd	r24, Y+13	; 0x0d
    3384:	9e 85       	ldd	r25, Y+14	; 0x0e
    3386:	af 85       	ldd	r26, Y+15	; 0x0f
    3388:	b8 89       	ldd	r27, Y+16	; 0x10
    338a:	2a e0       	ldi	r18, 0x0A	; 10
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	40 e0       	ldi	r20, 0x00	; 0
    3390:	50 e0       	ldi	r21, 0x00	; 0
    3392:	bc 01       	movw	r22, r24
    3394:	cd 01       	movw	r24, r26
    3396:	0e 94 0b 20 	call	0x4016	; 0x4016 <__udivmodsi4>
    339a:	da 01       	movw	r26, r20
    339c:	c9 01       	movw	r24, r18
    339e:	8d 87       	std	Y+13, r24	; 0x0d
    33a0:	9e 87       	std	Y+14, r25	; 0x0e
    33a2:	af 87       	std	Y+15, r26	; 0x0f
    33a4:	b8 8b       	std	Y+16, r27	; 0x10
			i++;
    33a6:	8a 81       	ldd	r24, Y+2	; 0x02
    33a8:	8f 5f       	subi	r24, 0xFF	; 255
    33aa:	8a 83       	std	Y+2, r24	; 0x02
	{
		Lcd_ES_tsendChar('0');
	}
	else
	{
		while(num)
    33ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    33ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    33b0:	af 85       	ldd	r26, Y+15	; 0x0f
    33b2:	b8 89       	ldd	r27, Y+16	; 0x10
    33b4:	00 97       	sbiw	r24, 0x00	; 0
    33b6:	a1 05       	cpc	r26, r1
    33b8:	b1 05       	cpc	r27, r1
    33ba:	51 f6       	brne	.-108    	; 0x3350 <Lcd_ES_tdisplayNum+0x50>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    33bc:	8a 81       	ldd	r24, Y+2	; 0x02
    33be:	89 83       	std	Y+1, r24	; 0x01
    33c0:	11 c0       	rjmp	.+34     	; 0x33e4 <Lcd_ES_tdisplayNum+0xe4>
		{
			Lcd_ES_tsendChar(ch[j-1]);
    33c2:	89 81       	ldd	r24, Y+1	; 0x01
    33c4:	88 2f       	mov	r24, r24
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	9c 01       	movw	r18, r24
    33ca:	21 50       	subi	r18, 0x01	; 1
    33cc:	30 40       	sbci	r19, 0x00	; 0
    33ce:	ce 01       	movw	r24, r28
    33d0:	03 96       	adiw	r24, 0x03	; 3
    33d2:	fc 01       	movw	r30, r24
    33d4:	e2 0f       	add	r30, r18
    33d6:	f3 1f       	adc	r31, r19
    33d8:	80 81       	ld	r24, Z
    33da:	0e 94 74 18 	call	0x30e8	; 0x30e8 <Lcd_ES_tsendChar>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    33de:	89 81       	ldd	r24, Y+1	; 0x01
    33e0:	81 50       	subi	r24, 0x01	; 1
    33e2:	89 83       	std	Y+1, r24	; 0x01
    33e4:	89 81       	ldd	r24, Y+1	; 0x01
    33e6:	88 23       	and	r24, r24
    33e8:	61 f7       	brne	.-40     	; 0x33c2 <Lcd_ES_tdisplayNum+0xc2>
		{
			Lcd_ES_tsendChar(ch[j-1]);
		}
	}
	return ES_OK;
    33ea:	80 e0       	ldi	r24, 0x00	; 0
}
    33ec:	60 96       	adiw	r28, 0x10	; 16
    33ee:	0f b6       	in	r0, 0x3f	; 63
    33f0:	f8 94       	cli
    33f2:	de bf       	out	0x3e, r29	; 62
    33f4:	0f be       	out	0x3f, r0	; 63
    33f6:	cd bf       	out	0x3d, r28	; 61
    33f8:	cf 91       	pop	r28
    33fa:	df 91       	pop	r29
    33fc:	1f 91       	pop	r17
    33fe:	0f 91       	pop	r16
    3400:	08 95       	ret

00003402 <Lcd_ES_tdisplayNum_xy>:

ES_t Lcd_ES_tdisplayNum_xy(u32 num,u8 row,u8 col){
    3402:	df 93       	push	r29
    3404:	cf 93       	push	r28
    3406:	cd b7       	in	r28, 0x3d	; 61
    3408:	de b7       	in	r29, 0x3e	; 62
    340a:	a5 97       	sbiw	r28, 0x25	; 37
    340c:	0f b6       	in	r0, 0x3f	; 63
    340e:	f8 94       	cli
    3410:	de bf       	out	0x3e, r29	; 62
    3412:	0f be       	out	0x3f, r0	; 63
    3414:	cd bf       	out	0x3d, r28	; 61
    3416:	6f 8f       	std	Y+31, r22	; 0x1f
    3418:	78 a3       	std	Y+32, r23	; 0x20
    341a:	89 a3       	std	Y+33, r24	; 0x21
    341c:	9a a3       	std	Y+34, r25	; 0x22
    341e:	4b a3       	std	Y+35, r20	; 0x23
    3420:	2c a3       	std	Y+36, r18	; 0x24

	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    3422:	81 e0       	ldi	r24, 0x01	; 1
    3424:	61 e0       	ldi	r22, 0x01	; 1
    3426:	41 e0       	ldi	r20, 0x01	; 1
    3428:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    342c:	81 e0       	ldi	r24, 0x01	; 1
    342e:	60 e0       	ldi	r22, 0x00	; 0
    3430:	40 e0       	ldi	r20, 0x00	; 0
    3432:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>


	if(row == 1){
    3436:	8b a1       	ldd	r24, Y+35	; 0x23
    3438:	81 30       	cpi	r24, 0x01	; 1
    343a:	09 f0       	breq	.+2      	; 0x343e <Lcd_ES_tdisplayNum_xy+0x3c>
    343c:	76 c0       	rjmp	.+236    	; 0x352a <Lcd_ES_tdisplayNum_xy+0x128>
		Lcd_ES_tsendCmd(Force1stline);
    343e:	80 e8       	ldi	r24, 0x80	; 128
    3440:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <Lcd_ES_tsendCmd>
    3444:	80 e0       	ldi	r24, 0x00	; 0
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	a0 e8       	ldi	r26, 0x80	; 128
    344a:	bf e3       	ldi	r27, 0x3F	; 63
    344c:	89 8f       	std	Y+25, r24	; 0x19
    344e:	9a 8f       	std	Y+26, r25	; 0x1a
    3450:	ab 8f       	std	Y+27, r26	; 0x1b
    3452:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3454:	69 8d       	ldd	r22, Y+25	; 0x19
    3456:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3458:	8b 8d       	ldd	r24, Y+27	; 0x1b
    345a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    345c:	20 e0       	ldi	r18, 0x00	; 0
    345e:	30 e0       	ldi	r19, 0x00	; 0
    3460:	4a e7       	ldi	r20, 0x7A	; 122
    3462:	55 e4       	ldi	r21, 0x45	; 69
    3464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3468:	dc 01       	movw	r26, r24
    346a:	cb 01       	movw	r24, r22
    346c:	8d 8b       	std	Y+21, r24	; 0x15
    346e:	9e 8b       	std	Y+22, r25	; 0x16
    3470:	af 8b       	std	Y+23, r26	; 0x17
    3472:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3474:	6d 89       	ldd	r22, Y+21	; 0x15
    3476:	7e 89       	ldd	r23, Y+22	; 0x16
    3478:	8f 89       	ldd	r24, Y+23	; 0x17
    347a:	98 8d       	ldd	r25, Y+24	; 0x18
    347c:	20 e0       	ldi	r18, 0x00	; 0
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	40 e8       	ldi	r20, 0x80	; 128
    3482:	5f e3       	ldi	r21, 0x3F	; 63
    3484:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3488:	88 23       	and	r24, r24
    348a:	2c f4       	brge	.+10     	; 0x3496 <Lcd_ES_tdisplayNum_xy+0x94>
		__ticks = 1;
    348c:	81 e0       	ldi	r24, 0x01	; 1
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	9c 8b       	std	Y+20, r25	; 0x14
    3492:	8b 8b       	std	Y+19, r24	; 0x13
    3494:	3f c0       	rjmp	.+126    	; 0x3514 <Lcd_ES_tdisplayNum_xy+0x112>
	else if (__tmp > 65535)
    3496:	6d 89       	ldd	r22, Y+21	; 0x15
    3498:	7e 89       	ldd	r23, Y+22	; 0x16
    349a:	8f 89       	ldd	r24, Y+23	; 0x17
    349c:	98 8d       	ldd	r25, Y+24	; 0x18
    349e:	20 e0       	ldi	r18, 0x00	; 0
    34a0:	3f ef       	ldi	r19, 0xFF	; 255
    34a2:	4f e7       	ldi	r20, 0x7F	; 127
    34a4:	57 e4       	ldi	r21, 0x47	; 71
    34a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34aa:	18 16       	cp	r1, r24
    34ac:	4c f5       	brge	.+82     	; 0x3500 <Lcd_ES_tdisplayNum_xy+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34ae:	69 8d       	ldd	r22, Y+25	; 0x19
    34b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34b6:	20 e0       	ldi	r18, 0x00	; 0
    34b8:	30 e0       	ldi	r19, 0x00	; 0
    34ba:	40 e2       	ldi	r20, 0x20	; 32
    34bc:	51 e4       	ldi	r21, 0x41	; 65
    34be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34c2:	dc 01       	movw	r26, r24
    34c4:	cb 01       	movw	r24, r22
    34c6:	bc 01       	movw	r22, r24
    34c8:	cd 01       	movw	r24, r26
    34ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ce:	dc 01       	movw	r26, r24
    34d0:	cb 01       	movw	r24, r22
    34d2:	9c 8b       	std	Y+20, r25	; 0x14
    34d4:	8b 8b       	std	Y+19, r24	; 0x13
    34d6:	0f c0       	rjmp	.+30     	; 0x34f6 <Lcd_ES_tdisplayNum_xy+0xf4>
    34d8:	80 e9       	ldi	r24, 0x90	; 144
    34da:	91 e0       	ldi	r25, 0x01	; 1
    34dc:	9a 8b       	std	Y+18, r25	; 0x12
    34de:	89 8b       	std	Y+17, r24	; 0x11
    34e0:	89 89       	ldd	r24, Y+17	; 0x11
    34e2:	9a 89       	ldd	r25, Y+18	; 0x12
    34e4:	01 97       	sbiw	r24, 0x01	; 1
    34e6:	f1 f7       	brne	.-4      	; 0x34e4 <Lcd_ES_tdisplayNum_xy+0xe2>
    34e8:	9a 8b       	std	Y+18, r25	; 0x12
    34ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34ec:	8b 89       	ldd	r24, Y+19	; 0x13
    34ee:	9c 89       	ldd	r25, Y+20	; 0x14
    34f0:	01 97       	sbiw	r24, 0x01	; 1
    34f2:	9c 8b       	std	Y+20, r25	; 0x14
    34f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34f6:	8b 89       	ldd	r24, Y+19	; 0x13
    34f8:	9c 89       	ldd	r25, Y+20	; 0x14
    34fa:	00 97       	sbiw	r24, 0x00	; 0
    34fc:	69 f7       	brne	.-38     	; 0x34d8 <Lcd_ES_tdisplayNum_xy+0xd6>
    34fe:	92 c0       	rjmp	.+292    	; 0x3624 <Lcd_ES_tdisplayNum_xy+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3500:	6d 89       	ldd	r22, Y+21	; 0x15
    3502:	7e 89       	ldd	r23, Y+22	; 0x16
    3504:	8f 89       	ldd	r24, Y+23	; 0x17
    3506:	98 8d       	ldd	r25, Y+24	; 0x18
    3508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    350c:	dc 01       	movw	r26, r24
    350e:	cb 01       	movw	r24, r22
    3510:	9c 8b       	std	Y+20, r25	; 0x14
    3512:	8b 8b       	std	Y+19, r24	; 0x13
    3514:	8b 89       	ldd	r24, Y+19	; 0x13
    3516:	9c 89       	ldd	r25, Y+20	; 0x14
    3518:	98 8b       	std	Y+16, r25	; 0x10
    351a:	8f 87       	std	Y+15, r24	; 0x0f
    351c:	8f 85       	ldd	r24, Y+15	; 0x0f
    351e:	98 89       	ldd	r25, Y+16	; 0x10
    3520:	01 97       	sbiw	r24, 0x01	; 1
    3522:	f1 f7       	brne	.-4      	; 0x3520 <Lcd_ES_tdisplayNum_xy+0x11e>
    3524:	98 8b       	std	Y+16, r25	; 0x10
    3526:	8f 87       	std	Y+15, r24	; 0x0f
    3528:	7d c0       	rjmp	.+250    	; 0x3624 <Lcd_ES_tdisplayNum_xy+0x222>
		_delay_ms(1);
	}else if(row == 2){
    352a:	8b a1       	ldd	r24, Y+35	; 0x23
    352c:	82 30       	cpi	r24, 0x02	; 2
    352e:	09 f0       	breq	.+2      	; 0x3532 <Lcd_ES_tdisplayNum_xy+0x130>
    3530:	76 c0       	rjmp	.+236    	; 0x361e <Lcd_ES_tdisplayNum_xy+0x21c>
		Lcd_ES_tsendCmd(Force2ndline);
    3532:	80 ec       	ldi	r24, 0xC0	; 192
    3534:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <Lcd_ES_tsendCmd>
    3538:	80 e0       	ldi	r24, 0x00	; 0
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	a0 e2       	ldi	r26, 0x20	; 32
    353e:	b1 e4       	ldi	r27, 0x41	; 65
    3540:	8b 87       	std	Y+11, r24	; 0x0b
    3542:	9c 87       	std	Y+12, r25	; 0x0c
    3544:	ad 87       	std	Y+13, r26	; 0x0d
    3546:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3548:	6b 85       	ldd	r22, Y+11	; 0x0b
    354a:	7c 85       	ldd	r23, Y+12	; 0x0c
    354c:	8d 85       	ldd	r24, Y+13	; 0x0d
    354e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3550:	20 e0       	ldi	r18, 0x00	; 0
    3552:	30 e0       	ldi	r19, 0x00	; 0
    3554:	4a e7       	ldi	r20, 0x7A	; 122
    3556:	55 e4       	ldi	r21, 0x45	; 69
    3558:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    355c:	dc 01       	movw	r26, r24
    355e:	cb 01       	movw	r24, r22
    3560:	8f 83       	std	Y+7, r24	; 0x07
    3562:	98 87       	std	Y+8, r25	; 0x08
    3564:	a9 87       	std	Y+9, r26	; 0x09
    3566:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3568:	6f 81       	ldd	r22, Y+7	; 0x07
    356a:	78 85       	ldd	r23, Y+8	; 0x08
    356c:	89 85       	ldd	r24, Y+9	; 0x09
    356e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3570:	20 e0       	ldi	r18, 0x00	; 0
    3572:	30 e0       	ldi	r19, 0x00	; 0
    3574:	40 e8       	ldi	r20, 0x80	; 128
    3576:	5f e3       	ldi	r21, 0x3F	; 63
    3578:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    357c:	88 23       	and	r24, r24
    357e:	2c f4       	brge	.+10     	; 0x358a <Lcd_ES_tdisplayNum_xy+0x188>
		__ticks = 1;
    3580:	81 e0       	ldi	r24, 0x01	; 1
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	9e 83       	std	Y+6, r25	; 0x06
    3586:	8d 83       	std	Y+5, r24	; 0x05
    3588:	3f c0       	rjmp	.+126    	; 0x3608 <Lcd_ES_tdisplayNum_xy+0x206>
	else if (__tmp > 65535)
    358a:	6f 81       	ldd	r22, Y+7	; 0x07
    358c:	78 85       	ldd	r23, Y+8	; 0x08
    358e:	89 85       	ldd	r24, Y+9	; 0x09
    3590:	9a 85       	ldd	r25, Y+10	; 0x0a
    3592:	20 e0       	ldi	r18, 0x00	; 0
    3594:	3f ef       	ldi	r19, 0xFF	; 255
    3596:	4f e7       	ldi	r20, 0x7F	; 127
    3598:	57 e4       	ldi	r21, 0x47	; 71
    359a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    359e:	18 16       	cp	r1, r24
    35a0:	4c f5       	brge	.+82     	; 0x35f4 <Lcd_ES_tdisplayNum_xy+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    35a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    35a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    35a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    35aa:	20 e0       	ldi	r18, 0x00	; 0
    35ac:	30 e0       	ldi	r19, 0x00	; 0
    35ae:	40 e2       	ldi	r20, 0x20	; 32
    35b0:	51 e4       	ldi	r21, 0x41	; 65
    35b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35b6:	dc 01       	movw	r26, r24
    35b8:	cb 01       	movw	r24, r22
    35ba:	bc 01       	movw	r22, r24
    35bc:	cd 01       	movw	r24, r26
    35be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35c2:	dc 01       	movw	r26, r24
    35c4:	cb 01       	movw	r24, r22
    35c6:	9e 83       	std	Y+6, r25	; 0x06
    35c8:	8d 83       	std	Y+5, r24	; 0x05
    35ca:	0f c0       	rjmp	.+30     	; 0x35ea <Lcd_ES_tdisplayNum_xy+0x1e8>
    35cc:	80 e9       	ldi	r24, 0x90	; 144
    35ce:	91 e0       	ldi	r25, 0x01	; 1
    35d0:	9c 83       	std	Y+4, r25	; 0x04
    35d2:	8b 83       	std	Y+3, r24	; 0x03
    35d4:	8b 81       	ldd	r24, Y+3	; 0x03
    35d6:	9c 81       	ldd	r25, Y+4	; 0x04
    35d8:	01 97       	sbiw	r24, 0x01	; 1
    35da:	f1 f7       	brne	.-4      	; 0x35d8 <Lcd_ES_tdisplayNum_xy+0x1d6>
    35dc:	9c 83       	std	Y+4, r25	; 0x04
    35de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35e0:	8d 81       	ldd	r24, Y+5	; 0x05
    35e2:	9e 81       	ldd	r25, Y+6	; 0x06
    35e4:	01 97       	sbiw	r24, 0x01	; 1
    35e6:	9e 83       	std	Y+6, r25	; 0x06
    35e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35ea:	8d 81       	ldd	r24, Y+5	; 0x05
    35ec:	9e 81       	ldd	r25, Y+6	; 0x06
    35ee:	00 97       	sbiw	r24, 0x00	; 0
    35f0:	69 f7       	brne	.-38     	; 0x35cc <Lcd_ES_tdisplayNum_xy+0x1ca>
    35f2:	18 c0       	rjmp	.+48     	; 0x3624 <Lcd_ES_tdisplayNum_xy+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35f4:	6f 81       	ldd	r22, Y+7	; 0x07
    35f6:	78 85       	ldd	r23, Y+8	; 0x08
    35f8:	89 85       	ldd	r24, Y+9	; 0x09
    35fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    35fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3600:	dc 01       	movw	r26, r24
    3602:	cb 01       	movw	r24, r22
    3604:	9e 83       	std	Y+6, r25	; 0x06
    3606:	8d 83       	std	Y+5, r24	; 0x05
    3608:	8d 81       	ldd	r24, Y+5	; 0x05
    360a:	9e 81       	ldd	r25, Y+6	; 0x06
    360c:	9a 83       	std	Y+2, r25	; 0x02
    360e:	89 83       	std	Y+1, r24	; 0x01
    3610:	89 81       	ldd	r24, Y+1	; 0x01
    3612:	9a 81       	ldd	r25, Y+2	; 0x02
    3614:	01 97       	sbiw	r24, 0x01	; 1
    3616:	f1 f7       	brne	.-4      	; 0x3614 <Lcd_ES_tdisplayNum_xy+0x212>
    3618:	9a 83       	std	Y+2, r25	; 0x02
    361a:	89 83       	std	Y+1, r24	; 0x01
    361c:	03 c0       	rjmp	.+6      	; 0x3624 <Lcd_ES_tdisplayNum_xy+0x222>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    361e:	81 e0       	ldi	r24, 0x01	; 1
    3620:	8d a3       	std	Y+37, r24	; 0x25
    3622:	1e c0       	rjmp	.+60     	; 0x3660 <Lcd_ES_tdisplayNum_xy+0x25e>
	}


	for(int j=1;j<=col;j++){
    3624:	81 e0       	ldi	r24, 0x01	; 1
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	9e 8f       	std	Y+30, r25	; 0x1e
    362a:	8d 8f       	std	Y+29, r24	; 0x1d
    362c:	08 c0       	rjmp	.+16     	; 0x363e <Lcd_ES_tdisplayNum_xy+0x23c>
		Lcd_ES_tsendCmd(ShiftRight);
    362e:	8c e1       	ldi	r24, 0x1C	; 28
    3630:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <Lcd_ES_tsendCmd>
	}else{
		return ES_NOT_OK;
	}


	for(int j=1;j<=col;j++){
    3634:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3636:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3638:	01 96       	adiw	r24, 0x01	; 1
    363a:	9e 8f       	std	Y+30, r25	; 0x1e
    363c:	8d 8f       	std	Y+29, r24	; 0x1d
    363e:	8c a1       	ldd	r24, Y+36	; 0x24
    3640:	28 2f       	mov	r18, r24
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3646:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3648:	28 17       	cp	r18, r24
    364a:	39 07       	cpc	r19, r25
    364c:	84 f7       	brge	.-32     	; 0x362e <Lcd_ES_tdisplayNum_xy+0x22c>
		Lcd_ES_tsendCmd(ShiftRight);
	}

	Lcd_ES_tdisplayNum(num);
    364e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3650:	98 a1       	ldd	r25, Y+32	; 0x20
    3652:	a9 a1       	ldd	r26, Y+33	; 0x21
    3654:	ba a1       	ldd	r27, Y+34	; 0x22
    3656:	bc 01       	movw	r22, r24
    3658:	cd 01       	movw	r24, r26
    365a:	0e 94 80 19 	call	0x3300	; 0x3300 <Lcd_ES_tdisplayNum>
	return ES_OK;
    365e:	1d a2       	std	Y+37, r1	; 0x25
    3660:	8d a1       	ldd	r24, Y+37	; 0x25

}
    3662:	a5 96       	adiw	r28, 0x25	; 37
    3664:	0f b6       	in	r0, 0x3f	; 63
    3666:	f8 94       	cli
    3668:	de bf       	out	0x3e, r29	; 62
    366a:	0f be       	out	0x3f, r0	; 63
    366c:	cd bf       	out	0x3d, r28	; 61
    366e:	cf 91       	pop	r28
    3670:	df 91       	pop	r29
    3672:	08 95       	ret

00003674 <Lcd_ES_tsendChar_xy>:

ES_t Lcd_ES_tsendChar_xy(u8 data,u8 row,u8 col){
    3674:	df 93       	push	r29
    3676:	cf 93       	push	r28
    3678:	cd b7       	in	r28, 0x3d	; 61
    367a:	de b7       	in	r29, 0x3e	; 62
    367c:	a2 97       	sbiw	r28, 0x22	; 34
    367e:	0f b6       	in	r0, 0x3f	; 63
    3680:	f8 94       	cli
    3682:	de bf       	out	0x3e, r29	; 62
    3684:	0f be       	out	0x3f, r0	; 63
    3686:	cd bf       	out	0x3d, r28	; 61
    3688:	8f 8f       	std	Y+31, r24	; 0x1f
    368a:	68 a3       	std	Y+32, r22	; 0x20
    368c:	49 a3       	std	Y+33, r20	; 0x21
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    368e:	81 e0       	ldi	r24, 0x01	; 1
    3690:	61 e0       	ldi	r22, 0x01	; 1
    3692:	41 e0       	ldi	r20, 0x01	; 1
    3694:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    3698:	81 e0       	ldi	r24, 0x01	; 1
    369a:	60 e0       	ldi	r22, 0x00	; 0
    369c:	40 e0       	ldi	r20, 0x00	; 0
    369e:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>


	if(row == 1){
    36a2:	88 a1       	ldd	r24, Y+32	; 0x20
    36a4:	81 30       	cpi	r24, 0x01	; 1
    36a6:	09 f0       	breq	.+2      	; 0x36aa <Lcd_ES_tsendChar_xy+0x36>
    36a8:	76 c0       	rjmp	.+236    	; 0x3796 <Lcd_ES_tsendChar_xy+0x122>
		Lcd_ES_tsendCmd(Force1stline);
    36aa:	80 e8       	ldi	r24, 0x80	; 128
    36ac:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <Lcd_ES_tsendCmd>
    36b0:	80 e0       	ldi	r24, 0x00	; 0
    36b2:	90 e0       	ldi	r25, 0x00	; 0
    36b4:	a0 e8       	ldi	r26, 0x80	; 128
    36b6:	bf e3       	ldi	r27, 0x3F	; 63
    36b8:	89 8f       	std	Y+25, r24	; 0x19
    36ba:	9a 8f       	std	Y+26, r25	; 0x1a
    36bc:	ab 8f       	std	Y+27, r26	; 0x1b
    36be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36c0:	69 8d       	ldd	r22, Y+25	; 0x19
    36c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36c8:	20 e0       	ldi	r18, 0x00	; 0
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	4a e7       	ldi	r20, 0x7A	; 122
    36ce:	55 e4       	ldi	r21, 0x45	; 69
    36d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d4:	dc 01       	movw	r26, r24
    36d6:	cb 01       	movw	r24, r22
    36d8:	8d 8b       	std	Y+21, r24	; 0x15
    36da:	9e 8b       	std	Y+22, r25	; 0x16
    36dc:	af 8b       	std	Y+23, r26	; 0x17
    36de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    36e0:	6d 89       	ldd	r22, Y+21	; 0x15
    36e2:	7e 89       	ldd	r23, Y+22	; 0x16
    36e4:	8f 89       	ldd	r24, Y+23	; 0x17
    36e6:	98 8d       	ldd	r25, Y+24	; 0x18
    36e8:	20 e0       	ldi	r18, 0x00	; 0
    36ea:	30 e0       	ldi	r19, 0x00	; 0
    36ec:	40 e8       	ldi	r20, 0x80	; 128
    36ee:	5f e3       	ldi	r21, 0x3F	; 63
    36f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36f4:	88 23       	and	r24, r24
    36f6:	2c f4       	brge	.+10     	; 0x3702 <Lcd_ES_tsendChar_xy+0x8e>
		__ticks = 1;
    36f8:	81 e0       	ldi	r24, 0x01	; 1
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	9c 8b       	std	Y+20, r25	; 0x14
    36fe:	8b 8b       	std	Y+19, r24	; 0x13
    3700:	3f c0       	rjmp	.+126    	; 0x3780 <Lcd_ES_tsendChar_xy+0x10c>
	else if (__tmp > 65535)
    3702:	6d 89       	ldd	r22, Y+21	; 0x15
    3704:	7e 89       	ldd	r23, Y+22	; 0x16
    3706:	8f 89       	ldd	r24, Y+23	; 0x17
    3708:	98 8d       	ldd	r25, Y+24	; 0x18
    370a:	20 e0       	ldi	r18, 0x00	; 0
    370c:	3f ef       	ldi	r19, 0xFF	; 255
    370e:	4f e7       	ldi	r20, 0x7F	; 127
    3710:	57 e4       	ldi	r21, 0x47	; 71
    3712:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3716:	18 16       	cp	r1, r24
    3718:	4c f5       	brge	.+82     	; 0x376c <Lcd_ES_tsendChar_xy+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    371a:	69 8d       	ldd	r22, Y+25	; 0x19
    371c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    371e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3720:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3722:	20 e0       	ldi	r18, 0x00	; 0
    3724:	30 e0       	ldi	r19, 0x00	; 0
    3726:	40 e2       	ldi	r20, 0x20	; 32
    3728:	51 e4       	ldi	r21, 0x41	; 65
    372a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    372e:	dc 01       	movw	r26, r24
    3730:	cb 01       	movw	r24, r22
    3732:	bc 01       	movw	r22, r24
    3734:	cd 01       	movw	r24, r26
    3736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    373a:	dc 01       	movw	r26, r24
    373c:	cb 01       	movw	r24, r22
    373e:	9c 8b       	std	Y+20, r25	; 0x14
    3740:	8b 8b       	std	Y+19, r24	; 0x13
    3742:	0f c0       	rjmp	.+30     	; 0x3762 <Lcd_ES_tsendChar_xy+0xee>
    3744:	80 e9       	ldi	r24, 0x90	; 144
    3746:	91 e0       	ldi	r25, 0x01	; 1
    3748:	9a 8b       	std	Y+18, r25	; 0x12
    374a:	89 8b       	std	Y+17, r24	; 0x11
    374c:	89 89       	ldd	r24, Y+17	; 0x11
    374e:	9a 89       	ldd	r25, Y+18	; 0x12
    3750:	01 97       	sbiw	r24, 0x01	; 1
    3752:	f1 f7       	brne	.-4      	; 0x3750 <Lcd_ES_tsendChar_xy+0xdc>
    3754:	9a 8b       	std	Y+18, r25	; 0x12
    3756:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3758:	8b 89       	ldd	r24, Y+19	; 0x13
    375a:	9c 89       	ldd	r25, Y+20	; 0x14
    375c:	01 97       	sbiw	r24, 0x01	; 1
    375e:	9c 8b       	std	Y+20, r25	; 0x14
    3760:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3762:	8b 89       	ldd	r24, Y+19	; 0x13
    3764:	9c 89       	ldd	r25, Y+20	; 0x14
    3766:	00 97       	sbiw	r24, 0x00	; 0
    3768:	69 f7       	brne	.-38     	; 0x3744 <Lcd_ES_tsendChar_xy+0xd0>
    376a:	92 c0       	rjmp	.+292    	; 0x3890 <Lcd_ES_tsendChar_xy+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    376c:	6d 89       	ldd	r22, Y+21	; 0x15
    376e:	7e 89       	ldd	r23, Y+22	; 0x16
    3770:	8f 89       	ldd	r24, Y+23	; 0x17
    3772:	98 8d       	ldd	r25, Y+24	; 0x18
    3774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3778:	dc 01       	movw	r26, r24
    377a:	cb 01       	movw	r24, r22
    377c:	9c 8b       	std	Y+20, r25	; 0x14
    377e:	8b 8b       	std	Y+19, r24	; 0x13
    3780:	8b 89       	ldd	r24, Y+19	; 0x13
    3782:	9c 89       	ldd	r25, Y+20	; 0x14
    3784:	98 8b       	std	Y+16, r25	; 0x10
    3786:	8f 87       	std	Y+15, r24	; 0x0f
    3788:	8f 85       	ldd	r24, Y+15	; 0x0f
    378a:	98 89       	ldd	r25, Y+16	; 0x10
    378c:	01 97       	sbiw	r24, 0x01	; 1
    378e:	f1 f7       	brne	.-4      	; 0x378c <Lcd_ES_tsendChar_xy+0x118>
    3790:	98 8b       	std	Y+16, r25	; 0x10
    3792:	8f 87       	std	Y+15, r24	; 0x0f
    3794:	7d c0       	rjmp	.+250    	; 0x3890 <Lcd_ES_tsendChar_xy+0x21c>
		_delay_ms(1);
	}else if(row == 2){
    3796:	88 a1       	ldd	r24, Y+32	; 0x20
    3798:	82 30       	cpi	r24, 0x02	; 2
    379a:	09 f0       	breq	.+2      	; 0x379e <Lcd_ES_tsendChar_xy+0x12a>
    379c:	76 c0       	rjmp	.+236    	; 0x388a <Lcd_ES_tsendChar_xy+0x216>
		Lcd_ES_tsendCmd(Force2ndline);
    379e:	80 ec       	ldi	r24, 0xC0	; 192
    37a0:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <Lcd_ES_tsendCmd>
    37a4:	80 e0       	ldi	r24, 0x00	; 0
    37a6:	90 e0       	ldi	r25, 0x00	; 0
    37a8:	a0 e2       	ldi	r26, 0x20	; 32
    37aa:	b1 e4       	ldi	r27, 0x41	; 65
    37ac:	8b 87       	std	Y+11, r24	; 0x0b
    37ae:	9c 87       	std	Y+12, r25	; 0x0c
    37b0:	ad 87       	std	Y+13, r26	; 0x0d
    37b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    37b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    37b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    37ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    37bc:	20 e0       	ldi	r18, 0x00	; 0
    37be:	30 e0       	ldi	r19, 0x00	; 0
    37c0:	4a e7       	ldi	r20, 0x7A	; 122
    37c2:	55 e4       	ldi	r21, 0x45	; 69
    37c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37c8:	dc 01       	movw	r26, r24
    37ca:	cb 01       	movw	r24, r22
    37cc:	8f 83       	std	Y+7, r24	; 0x07
    37ce:	98 87       	std	Y+8, r25	; 0x08
    37d0:	a9 87       	std	Y+9, r26	; 0x09
    37d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37d4:	6f 81       	ldd	r22, Y+7	; 0x07
    37d6:	78 85       	ldd	r23, Y+8	; 0x08
    37d8:	89 85       	ldd	r24, Y+9	; 0x09
    37da:	9a 85       	ldd	r25, Y+10	; 0x0a
    37dc:	20 e0       	ldi	r18, 0x00	; 0
    37de:	30 e0       	ldi	r19, 0x00	; 0
    37e0:	40 e8       	ldi	r20, 0x80	; 128
    37e2:	5f e3       	ldi	r21, 0x3F	; 63
    37e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37e8:	88 23       	and	r24, r24
    37ea:	2c f4       	brge	.+10     	; 0x37f6 <Lcd_ES_tsendChar_xy+0x182>
		__ticks = 1;
    37ec:	81 e0       	ldi	r24, 0x01	; 1
    37ee:	90 e0       	ldi	r25, 0x00	; 0
    37f0:	9e 83       	std	Y+6, r25	; 0x06
    37f2:	8d 83       	std	Y+5, r24	; 0x05
    37f4:	3f c0       	rjmp	.+126    	; 0x3874 <Lcd_ES_tsendChar_xy+0x200>
	else if (__tmp > 65535)
    37f6:	6f 81       	ldd	r22, Y+7	; 0x07
    37f8:	78 85       	ldd	r23, Y+8	; 0x08
    37fa:	89 85       	ldd	r24, Y+9	; 0x09
    37fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    37fe:	20 e0       	ldi	r18, 0x00	; 0
    3800:	3f ef       	ldi	r19, 0xFF	; 255
    3802:	4f e7       	ldi	r20, 0x7F	; 127
    3804:	57 e4       	ldi	r21, 0x47	; 71
    3806:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    380a:	18 16       	cp	r1, r24
    380c:	4c f5       	brge	.+82     	; 0x3860 <Lcd_ES_tsendChar_xy+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    380e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3810:	7c 85       	ldd	r23, Y+12	; 0x0c
    3812:	8d 85       	ldd	r24, Y+13	; 0x0d
    3814:	9e 85       	ldd	r25, Y+14	; 0x0e
    3816:	20 e0       	ldi	r18, 0x00	; 0
    3818:	30 e0       	ldi	r19, 0x00	; 0
    381a:	40 e2       	ldi	r20, 0x20	; 32
    381c:	51 e4       	ldi	r21, 0x41	; 65
    381e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3822:	dc 01       	movw	r26, r24
    3824:	cb 01       	movw	r24, r22
    3826:	bc 01       	movw	r22, r24
    3828:	cd 01       	movw	r24, r26
    382a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    382e:	dc 01       	movw	r26, r24
    3830:	cb 01       	movw	r24, r22
    3832:	9e 83       	std	Y+6, r25	; 0x06
    3834:	8d 83       	std	Y+5, r24	; 0x05
    3836:	0f c0       	rjmp	.+30     	; 0x3856 <Lcd_ES_tsendChar_xy+0x1e2>
    3838:	80 e9       	ldi	r24, 0x90	; 144
    383a:	91 e0       	ldi	r25, 0x01	; 1
    383c:	9c 83       	std	Y+4, r25	; 0x04
    383e:	8b 83       	std	Y+3, r24	; 0x03
    3840:	8b 81       	ldd	r24, Y+3	; 0x03
    3842:	9c 81       	ldd	r25, Y+4	; 0x04
    3844:	01 97       	sbiw	r24, 0x01	; 1
    3846:	f1 f7       	brne	.-4      	; 0x3844 <Lcd_ES_tsendChar_xy+0x1d0>
    3848:	9c 83       	std	Y+4, r25	; 0x04
    384a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    384c:	8d 81       	ldd	r24, Y+5	; 0x05
    384e:	9e 81       	ldd	r25, Y+6	; 0x06
    3850:	01 97       	sbiw	r24, 0x01	; 1
    3852:	9e 83       	std	Y+6, r25	; 0x06
    3854:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3856:	8d 81       	ldd	r24, Y+5	; 0x05
    3858:	9e 81       	ldd	r25, Y+6	; 0x06
    385a:	00 97       	sbiw	r24, 0x00	; 0
    385c:	69 f7       	brne	.-38     	; 0x3838 <Lcd_ES_tsendChar_xy+0x1c4>
    385e:	18 c0       	rjmp	.+48     	; 0x3890 <Lcd_ES_tsendChar_xy+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3860:	6f 81       	ldd	r22, Y+7	; 0x07
    3862:	78 85       	ldd	r23, Y+8	; 0x08
    3864:	89 85       	ldd	r24, Y+9	; 0x09
    3866:	9a 85       	ldd	r25, Y+10	; 0x0a
    3868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    386c:	dc 01       	movw	r26, r24
    386e:	cb 01       	movw	r24, r22
    3870:	9e 83       	std	Y+6, r25	; 0x06
    3872:	8d 83       	std	Y+5, r24	; 0x05
    3874:	8d 81       	ldd	r24, Y+5	; 0x05
    3876:	9e 81       	ldd	r25, Y+6	; 0x06
    3878:	9a 83       	std	Y+2, r25	; 0x02
    387a:	89 83       	std	Y+1, r24	; 0x01
    387c:	89 81       	ldd	r24, Y+1	; 0x01
    387e:	9a 81       	ldd	r25, Y+2	; 0x02
    3880:	01 97       	sbiw	r24, 0x01	; 1
    3882:	f1 f7       	brne	.-4      	; 0x3880 <Lcd_ES_tsendChar_xy+0x20c>
    3884:	9a 83       	std	Y+2, r25	; 0x02
    3886:	89 83       	std	Y+1, r24	; 0x01
    3888:	03 c0       	rjmp	.+6      	; 0x3890 <Lcd_ES_tsendChar_xy+0x21c>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    388a:	81 e0       	ldi	r24, 0x01	; 1
    388c:	8a a3       	std	Y+34, r24	; 0x22
    388e:	19 c0       	rjmp	.+50     	; 0x38c2 <Lcd_ES_tsendChar_xy+0x24e>
	}

	for(int j=1;j<=col;j++){
    3890:	81 e0       	ldi	r24, 0x01	; 1
    3892:	90 e0       	ldi	r25, 0x00	; 0
    3894:	9e 8f       	std	Y+30, r25	; 0x1e
    3896:	8d 8f       	std	Y+29, r24	; 0x1d
    3898:	08 c0       	rjmp	.+16     	; 0x38aa <Lcd_ES_tsendChar_xy+0x236>
		Lcd_ES_tsendCmd(ShiftRight);
    389a:	8c e1       	ldi	r24, 0x1C	; 28
    389c:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <Lcd_ES_tsendCmd>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
	}

	for(int j=1;j<=col;j++){
    38a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    38a4:	01 96       	adiw	r24, 0x01	; 1
    38a6:	9e 8f       	std	Y+30, r25	; 0x1e
    38a8:	8d 8f       	std	Y+29, r24	; 0x1d
    38aa:	89 a1       	ldd	r24, Y+33	; 0x21
    38ac:	28 2f       	mov	r18, r24
    38ae:	30 e0       	ldi	r19, 0x00	; 0
    38b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    38b4:	28 17       	cp	r18, r24
    38b6:	39 07       	cpc	r19, r25
    38b8:	84 f7       	brge	.-32     	; 0x389a <Lcd_ES_tsendChar_xy+0x226>
		Lcd_ES_tsendCmd(ShiftRight);
	}
	Lcd_ES_tsendChar(data);
    38ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38bc:	0e 94 74 18 	call	0x30e8	; 0x30e8 <Lcd_ES_tsendChar>
	return ES_OK;
    38c0:	1a a2       	std	Y+34, r1	; 0x22
    38c2:	8a a1       	ldd	r24, Y+34	; 0x22
}
    38c4:	a2 96       	adiw	r28, 0x22	; 34
    38c6:	0f b6       	in	r0, 0x3f	; 63
    38c8:	f8 94       	cli
    38ca:	de bf       	out	0x3e, r29	; 62
    38cc:	0f be       	out	0x3f, r0	; 63
    38ce:	cd bf       	out	0x3d, r28	; 61
    38d0:	cf 91       	pop	r28
    38d2:	df 91       	pop	r29
    38d4:	08 95       	ret

000038d6 <LCD_ES_tSet_Cursor_Pos>:

static ES_t LCD_ES_tSet_Cursor_Pos(u8 row,u8 column){
    38d6:	df 93       	push	r29
    38d8:	cf 93       	push	r28
    38da:	00 d0       	rcall	.+0      	; 0x38dc <LCD_ES_tSet_Cursor_Pos+0x6>
    38dc:	00 d0       	rcall	.+0      	; 0x38de <LCD_ES_tSet_Cursor_Pos+0x8>
    38de:	0f 92       	push	r0
    38e0:	cd b7       	in	r28, 0x3d	; 61
    38e2:	de b7       	in	r29, 0x3e	; 62
    38e4:	89 83       	std	Y+1, r24	; 0x01
    38e6:	6a 83       	std	Y+2, r22	; 0x02
	column--;
    38e8:	8a 81       	ldd	r24, Y+2	; 0x02
    38ea:	81 50       	subi	r24, 0x01	; 1
    38ec:	8a 83       	std	Y+2, r24	; 0x02
	switch(row){
    38ee:	89 81       	ldd	r24, Y+1	; 0x01
    38f0:	28 2f       	mov	r18, r24
    38f2:	30 e0       	ldi	r19, 0x00	; 0
    38f4:	3d 83       	std	Y+5, r19	; 0x05
    38f6:	2c 83       	std	Y+4, r18	; 0x04
    38f8:	8c 81       	ldd	r24, Y+4	; 0x04
    38fa:	9d 81       	ldd	r25, Y+5	; 0x05
    38fc:	81 30       	cpi	r24, 0x01	; 1
    38fe:	91 05       	cpc	r25, r1
    3900:	31 f0       	breq	.+12     	; 0x390e <LCD_ES_tSet_Cursor_Pos+0x38>
    3902:	2c 81       	ldd	r18, Y+4	; 0x04
    3904:	3d 81       	ldd	r19, Y+5	; 0x05
    3906:	22 30       	cpi	r18, 0x02	; 2
    3908:	31 05       	cpc	r19, r1
    390a:	31 f0       	breq	.+12     	; 0x3918 <LCD_ES_tSet_Cursor_Pos+0x42>
    390c:	0a c0       	rjmp	.+20     	; 0x3922 <LCD_ES_tSet_Cursor_Pos+0x4c>
	         case 1:
	        	 Lcd_ES_tsendCmd((0x80 + column));
    390e:	8a 81       	ldd	r24, Y+2	; 0x02
    3910:	80 58       	subi	r24, 0x80	; 128
    3912:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <Lcd_ES_tsendCmd>
    3916:	08 c0       	rjmp	.+16     	; 0x3928 <LCD_ES_tSet_Cursor_Pos+0x52>
	        	 break;
	         case 2:
	        	 Lcd_ES_tsendCmd((0xc0 + column));
    3918:	8a 81       	ldd	r24, Y+2	; 0x02
    391a:	80 54       	subi	r24, 0x40	; 64
    391c:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <Lcd_ES_tsendCmd>
    3920:	03 c0       	rjmp	.+6      	; 0x3928 <LCD_ES_tSet_Cursor_Pos+0x52>
	        	 break;
	         default:
	        	 return ES_NOT_OK;
    3922:	31 e0       	ldi	r19, 0x01	; 1
    3924:	3b 83       	std	Y+3, r19	; 0x03
    3926:	01 c0       	rjmp	.+2      	; 0x392a <LCD_ES_tSet_Cursor_Pos+0x54>
	}
	return ES_OK;
    3928:	1b 82       	std	Y+3, r1	; 0x03
    392a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    392c:	0f 90       	pop	r0
    392e:	0f 90       	pop	r0
    3930:	0f 90       	pop	r0
    3932:	0f 90       	pop	r0
    3934:	0f 90       	pop	r0
    3936:	cf 91       	pop	r28
    3938:	df 91       	pop	r29
    393a:	08 95       	ret

0000393c <LCD_ES_tGoTo>:

/************************************************************************/
ES_t LCD_ES_tGoTo(u8 Line, u8 x){
    393c:	df 93       	push	r29
    393e:	cf 93       	push	r28
    3940:	00 d0       	rcall	.+0      	; 0x3942 <LCD_ES_tGoTo+0x6>
    3942:	0f 92       	push	r0
    3944:	cd b7       	in	r28, 0x3d	; 61
    3946:	de b7       	in	r29, 0x3e	; 62
    3948:	89 83       	std	Y+1, r24	; 0x01
    394a:	6a 83       	std	Y+2, r22	; 0x02
	if(0 == Line)
    394c:	89 81       	ldd	r24, Y+1	; 0x01
    394e:	88 23       	and	r24, r24
    3950:	41 f4       	brne	.+16     	; 0x3962 <LCD_ES_tGoTo+0x26>
	{
		if ( x <=15)
    3952:	8a 81       	ldd	r24, Y+2	; 0x02
    3954:	80 31       	cpi	r24, 0x10	; 16
    3956:	98 f4       	brcc	.+38     	; 0x397e <LCD_ES_tGoTo+0x42>
		{
			Lcd_ES_tsendCmd(0x80 + x);
    3958:	8a 81       	ldd	r24, Y+2	; 0x02
    395a:	80 58       	subi	r24, 0x80	; 128
    395c:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <Lcd_ES_tsendCmd>
    3960:	0e c0       	rjmp	.+28     	; 0x397e <LCD_ES_tGoTo+0x42>
		}
	}
	else if (1 == Line)
    3962:	89 81       	ldd	r24, Y+1	; 0x01
    3964:	81 30       	cpi	r24, 0x01	; 1
    3966:	41 f4       	brne	.+16     	; 0x3978 <LCD_ES_tGoTo+0x3c>
	{
		if ( x <=15)
    3968:	8a 81       	ldd	r24, Y+2	; 0x02
    396a:	80 31       	cpi	r24, 0x10	; 16
    396c:	40 f4       	brcc	.+16     	; 0x397e <LCD_ES_tGoTo+0x42>
		{
			Lcd_ES_tsendCmd(0xC0 + x);
    396e:	8a 81       	ldd	r24, Y+2	; 0x02
    3970:	80 54       	subi	r24, 0x40	; 64
    3972:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <Lcd_ES_tsendCmd>
    3976:	03 c0       	rjmp	.+6      	; 0x397e <LCD_ES_tGoTo+0x42>
		}
	}else{
		return ES_NOT_OK;
    3978:	81 e0       	ldi	r24, 0x01	; 1
    397a:	8b 83       	std	Y+3, r24	; 0x03
    397c:	01 c0       	rjmp	.+2      	; 0x3980 <LCD_ES_tGoTo+0x44>
	}
	return ES_OK;
    397e:	1b 82       	std	Y+3, r1	; 0x03
    3980:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3982:	0f 90       	pop	r0
    3984:	0f 90       	pop	r0
    3986:	0f 90       	pop	r0
    3988:	cf 91       	pop	r28
    398a:	df 91       	pop	r29
    398c:	08 95       	ret

0000398e <KPD_ES_tGetKeyPressed>:
// To avoid the unarrangement and uncontiguous
const u8 KPD_Au8RowsPins[4] = {KPD_U8_R1,KPD_U8_R2,KPD_U8_R3,KPD_U8_R4};
const u8 KPD_Au8ColsPins[4] = {KPD_U8_C1,KPD_U8_C2,KPD_U8_C3,KPD_U8_C4};

ES_t KPD_ES_tGetKeyPressed(u8 *copy_pu8ReturnedKey)
{
    398e:	df 93       	push	r29
    3990:	cf 93       	push	r28
    3992:	cd b7       	in	r28, 0x3d	; 61
    3994:	de b7       	in	r29, 0x3e	; 62
    3996:	65 97       	sbiw	r28, 0x15	; 21
    3998:	0f b6       	in	r0, 0x3f	; 63
    399a:	f8 94       	cli
    399c:	de bf       	out	0x3e, r29	; 62
    399e:	0f be       	out	0x3f, r0	; 63
    39a0:	cd bf       	out	0x3d, r28	; 61
    39a2:	9c 8b       	std	Y+20, r25	; 0x14
    39a4:	8b 8b       	std	Y+19, r24	; 0x13
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
    39a6:	eb 89       	ldd	r30, Y+19	; 0x13
    39a8:	fc 89       	ldd	r31, Y+20	; 0x14
    39aa:	8f ef       	ldi	r24, 0xFF	; 255
    39ac:	80 83       	st	Z, r24
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
    39ae:	1f 86       	std	Y+15, r1	; 0x0f
	if(copy_pu8ReturnedKey != NULL)
    39b0:	8b 89       	ldd	r24, Y+19	; 0x13
    39b2:	9c 89       	ldd	r25, Y+20	; 0x14
    39b4:	00 97       	sbiw	r24, 0x00	; 0
    39b6:	09 f4       	brne	.+2      	; 0x39ba <KPD_ES_tGetKeyPressed+0x2c>
    39b8:	ed c0       	rjmp	.+474    	; 0x3b94 <KPD_ES_tGetKeyPressed+0x206>
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
    39ba:	19 8a       	std	Y+17, r1	; 0x11
    39bc:	e5 c0       	rjmp	.+458    	; 0x3b88 <KPD_ES_tGetKeyPressed+0x1fa>
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
    39be:	89 89       	ldd	r24, Y+17	; 0x11
    39c0:	88 2f       	mov	r24, r24
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	fc 01       	movw	r30, r24
    39c6:	e4 51       	subi	r30, 0x14	; 20
    39c8:	fe 4f       	sbci	r31, 0xFE	; 254
    39ca:	90 81       	ld	r25, Z
    39cc:	81 e0       	ldi	r24, 0x01	; 1
    39ce:	69 2f       	mov	r22, r25
    39d0:	40 e0       	ldi	r20, 0x00	; 0
    39d2:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
    39d6:	18 8a       	std	Y+16, r1	; 0x10
    39d8:	c1 c0       	rjmp	.+386    	; 0x3b5c <KPD_ES_tGetKeyPressed+0x1ce>
			{
				DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);
    39da:	88 89       	ldd	r24, Y+16	; 0x10
    39dc:	88 2f       	mov	r24, r24
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	fc 01       	movw	r30, r24
    39e2:	e0 51       	subi	r30, 0x10	; 16
    39e4:	fe 4f       	sbci	r31, 0xFE	; 254
    39e6:	90 81       	ld	r25, Z
    39e8:	9e 01       	movw	r18, r28
    39ea:	2e 5e       	subi	r18, 0xEE	; 238
    39ec:	3f 4f       	sbci	r19, 0xFF	; 255
    39ee:	83 e0       	ldi	r24, 0x03	; 3
    39f0:	69 2f       	mov	r22, r25
    39f2:	a9 01       	movw	r20, r18
    39f4:	0e 94 03 10 	call	0x2006	; 0x2006 <DIO_ES_tGetPinValue>
				if(Local_u8PinVal == LOW){ /* Switch is pressed */
    39f8:	8a 89       	ldd	r24, Y+18	; 0x12
    39fa:	88 23       	and	r24, r24
    39fc:	09 f0       	breq	.+2      	; 0x3a00 <KPD_ES_tGetKeyPressed+0x72>
    39fe:	ab c0       	rjmp	.+342    	; 0x3b56 <KPD_ES_tGetKeyPressed+0x1c8>
    3a00:	80 e0       	ldi	r24, 0x00	; 0
    3a02:	90 e0       	ldi	r25, 0x00	; 0
    3a04:	a0 ea       	ldi	r26, 0xA0	; 160
    3a06:	b1 e4       	ldi	r27, 0x41	; 65
    3a08:	8b 87       	std	Y+11, r24	; 0x0b
    3a0a:	9c 87       	std	Y+12, r25	; 0x0c
    3a0c:	ad 87       	std	Y+13, r26	; 0x0d
    3a0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a10:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a12:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a14:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a16:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a18:	20 e0       	ldi	r18, 0x00	; 0
    3a1a:	30 e0       	ldi	r19, 0x00	; 0
    3a1c:	4a e7       	ldi	r20, 0x7A	; 122
    3a1e:	55 e4       	ldi	r21, 0x45	; 69
    3a20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a24:	dc 01       	movw	r26, r24
    3a26:	cb 01       	movw	r24, r22
    3a28:	8f 83       	std	Y+7, r24	; 0x07
    3a2a:	98 87       	std	Y+8, r25	; 0x08
    3a2c:	a9 87       	std	Y+9, r26	; 0x09
    3a2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a30:	6f 81       	ldd	r22, Y+7	; 0x07
    3a32:	78 85       	ldd	r23, Y+8	; 0x08
    3a34:	89 85       	ldd	r24, Y+9	; 0x09
    3a36:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a38:	20 e0       	ldi	r18, 0x00	; 0
    3a3a:	30 e0       	ldi	r19, 0x00	; 0
    3a3c:	40 e8       	ldi	r20, 0x80	; 128
    3a3e:	5f e3       	ldi	r21, 0x3F	; 63
    3a40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a44:	88 23       	and	r24, r24
    3a46:	2c f4       	brge	.+10     	; 0x3a52 <KPD_ES_tGetKeyPressed+0xc4>
		__ticks = 1;
    3a48:	81 e0       	ldi	r24, 0x01	; 1
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	9e 83       	std	Y+6, r25	; 0x06
    3a4e:	8d 83       	std	Y+5, r24	; 0x05
    3a50:	3f c0       	rjmp	.+126    	; 0x3ad0 <KPD_ES_tGetKeyPressed+0x142>
	else if (__tmp > 65535)
    3a52:	6f 81       	ldd	r22, Y+7	; 0x07
    3a54:	78 85       	ldd	r23, Y+8	; 0x08
    3a56:	89 85       	ldd	r24, Y+9	; 0x09
    3a58:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a5a:	20 e0       	ldi	r18, 0x00	; 0
    3a5c:	3f ef       	ldi	r19, 0xFF	; 255
    3a5e:	4f e7       	ldi	r20, 0x7F	; 127
    3a60:	57 e4       	ldi	r21, 0x47	; 71
    3a62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a66:	18 16       	cp	r1, r24
    3a68:	4c f5       	brge	.+82     	; 0x3abc <KPD_ES_tGetKeyPressed+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a70:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a72:	20 e0       	ldi	r18, 0x00	; 0
    3a74:	30 e0       	ldi	r19, 0x00	; 0
    3a76:	40 e2       	ldi	r20, 0x20	; 32
    3a78:	51 e4       	ldi	r21, 0x41	; 65
    3a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a7e:	dc 01       	movw	r26, r24
    3a80:	cb 01       	movw	r24, r22
    3a82:	bc 01       	movw	r22, r24
    3a84:	cd 01       	movw	r24, r26
    3a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a8a:	dc 01       	movw	r26, r24
    3a8c:	cb 01       	movw	r24, r22
    3a8e:	9e 83       	std	Y+6, r25	; 0x06
    3a90:	8d 83       	std	Y+5, r24	; 0x05
    3a92:	0f c0       	rjmp	.+30     	; 0x3ab2 <KPD_ES_tGetKeyPressed+0x124>
    3a94:	80 e9       	ldi	r24, 0x90	; 144
    3a96:	91 e0       	ldi	r25, 0x01	; 1
    3a98:	9c 83       	std	Y+4, r25	; 0x04
    3a9a:	8b 83       	std	Y+3, r24	; 0x03
    3a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a9e:	9c 81       	ldd	r25, Y+4	; 0x04
    3aa0:	01 97       	sbiw	r24, 0x01	; 1
    3aa2:	f1 f7       	brne	.-4      	; 0x3aa0 <KPD_ES_tGetKeyPressed+0x112>
    3aa4:	9c 83       	std	Y+4, r25	; 0x04
    3aa6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aa8:	8d 81       	ldd	r24, Y+5	; 0x05
    3aaa:	9e 81       	ldd	r25, Y+6	; 0x06
    3aac:	01 97       	sbiw	r24, 0x01	; 1
    3aae:	9e 83       	std	Y+6, r25	; 0x06
    3ab0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ab4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ab6:	00 97       	sbiw	r24, 0x00	; 0
    3ab8:	69 f7       	brne	.-38     	; 0x3a94 <KPD_ES_tGetKeyPressed+0x106>
    3aba:	14 c0       	rjmp	.+40     	; 0x3ae4 <KPD_ES_tGetKeyPressed+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3abc:	6f 81       	ldd	r22, Y+7	; 0x07
    3abe:	78 85       	ldd	r23, Y+8	; 0x08
    3ac0:	89 85       	ldd	r24, Y+9	; 0x09
    3ac2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ac8:	dc 01       	movw	r26, r24
    3aca:	cb 01       	movw	r24, r22
    3acc:	9e 83       	std	Y+6, r25	; 0x06
    3ace:	8d 83       	std	Y+5, r24	; 0x05
    3ad0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ad2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ad4:	9a 83       	std	Y+2, r25	; 0x02
    3ad6:	89 83       	std	Y+1, r24	; 0x01
    3ad8:	89 81       	ldd	r24, Y+1	; 0x01
    3ada:	9a 81       	ldd	r25, Y+2	; 0x02
    3adc:	01 97       	sbiw	r24, 0x01	; 1
    3ade:	f1 f7       	brne	.-4      	; 0x3adc <KPD_ES_tGetKeyPressed+0x14e>
    3ae0:	9a 83       	std	Y+2, r25	; 0x02
    3ae2:	89 83       	std	Y+1, r24	; 0x01
					/* The switch which reaches between the activated
					 * Column and the pressed key */
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    3ae4:	88 89       	ldd	r24, Y+16	; 0x10
    3ae6:	88 2f       	mov	r24, r24
    3ae8:	90 e0       	ldi	r25, 0x00	; 0
    3aea:	fc 01       	movw	r30, r24
    3aec:	e0 51       	subi	r30, 0x10	; 16
    3aee:	fe 4f       	sbci	r31, 0xFE	; 254
    3af0:	90 81       	ld	r25, Z
    3af2:	9e 01       	movw	r18, r28
    3af4:	2e 5e       	subi	r18, 0xEE	; 238
    3af6:	3f 4f       	sbci	r19, 0xFF	; 255
    3af8:	83 e0       	ldi	r24, 0x03	; 3
    3afa:	69 2f       	mov	r22, r25
    3afc:	a9 01       	movw	r20, r18
    3afe:	0e 94 03 10 	call	0x2006	; 0x2006 <DIO_ES_tGetPinValue>
    3b02:	0f c0       	rjmp	.+30     	; 0x3b22 <KPD_ES_tGetKeyPressed+0x194>
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    3b04:	88 89       	ldd	r24, Y+16	; 0x10
    3b06:	88 2f       	mov	r24, r24
    3b08:	90 e0       	ldi	r25, 0x00	; 0
    3b0a:	fc 01       	movw	r30, r24
    3b0c:	e0 51       	subi	r30, 0x10	; 16
    3b0e:	fe 4f       	sbci	r31, 0xFE	; 254
    3b10:	90 81       	ld	r25, Z
    3b12:	9e 01       	movw	r18, r28
    3b14:	2e 5e       	subi	r18, 0xEE	; 238
    3b16:	3f 4f       	sbci	r19, 0xFF	; 255
    3b18:	83 e0       	ldi	r24, 0x03	; 3
    3b1a:	69 2f       	mov	r22, r25
    3b1c:	a9 01       	movw	r20, r18
    3b1e:	0e 94 03 10 	call	0x2006	; 0x2006 <DIO_ES_tGetPinValue>
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
    3b22:	8a 89       	ldd	r24, Y+18	; 0x12
    3b24:	88 23       	and	r24, r24
    3b26:	71 f3       	breq	.-36     	; 0x3b04 <KPD_ES_tGetKeyPressed+0x176>
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					}
					*copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    3b28:	89 89       	ldd	r24, Y+17	; 0x11
    3b2a:	48 2f       	mov	r20, r24
    3b2c:	50 e0       	ldi	r21, 0x00	; 0
    3b2e:	88 89       	ldd	r24, Y+16	; 0x10
    3b30:	28 2f       	mov	r18, r24
    3b32:	30 e0       	ldi	r19, 0x00	; 0
    3b34:	ca 01       	movw	r24, r20
    3b36:	88 0f       	add	r24, r24
    3b38:	99 1f       	adc	r25, r25
    3b3a:	88 0f       	add	r24, r24
    3b3c:	99 1f       	adc	r25, r25
    3b3e:	82 0f       	add	r24, r18
    3b40:	93 1f       	adc	r25, r19
    3b42:	fc 01       	movw	r30, r24
    3b44:	e4 52       	subi	r30, 0x24	; 36
    3b46:	fe 4f       	sbci	r31, 0xFE	; 254
    3b48:	80 81       	ld	r24, Z
    3b4a:	eb 89       	ldd	r30, Y+19	; 0x13
    3b4c:	fc 89       	ldd	r31, Y+20	; 0x14
    3b4e:	80 83       	st	Z, r24
					Local_u8Flag = HIGH;
    3b50:	81 e0       	ldi	r24, 0x01	; 1
    3b52:	8f 87       	std	Y+15, r24	; 0x0f
    3b54:	07 c0       	rjmp	.+14     	; 0x3b64 <KPD_ES_tGetKeyPressed+0x1d6>
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
    3b56:	88 89       	ldd	r24, Y+16	; 0x10
    3b58:	8f 5f       	subi	r24, 0xFF	; 255
    3b5a:	88 8b       	std	Y+16, r24	; 0x10
    3b5c:	88 89       	ldd	r24, Y+16	; 0x10
    3b5e:	84 30       	cpi	r24, 0x04	; 4
    3b60:	08 f4       	brcc	.+2      	; 0x3b64 <KPD_ES_tGetKeyPressed+0x1d6>
    3b62:	3b cf       	rjmp	.-394    	; 0x39da <KPD_ES_tGetKeyPressed+0x4c>
					Local_u8Flag = HIGH;
					break;
				}
			}
			// Deactivate ROW
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],HIGH);
    3b64:	89 89       	ldd	r24, Y+17	; 0x11
    3b66:	88 2f       	mov	r24, r24
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	fc 01       	movw	r30, r24
    3b6c:	e4 51       	subi	r30, 0x14	; 20
    3b6e:	fe 4f       	sbci	r31, 0xFE	; 254
    3b70:	90 81       	ld	r25, Z
    3b72:	81 e0       	ldi	r24, 0x01	; 1
    3b74:	69 2f       	mov	r22, r25
    3b76:	41 e0       	ldi	r20, 0x01	; 1
    3b78:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
			if(Local_u8Flag == HIGH)
    3b7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b7e:	81 30       	cpi	r24, 0x01	; 1
    3b80:	39 f0       	breq	.+14     	; 0x3b90 <KPD_ES_tGetKeyPressed+0x202>
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
	if(copy_pu8ReturnedKey != NULL)
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
    3b82:	89 89       	ldd	r24, Y+17	; 0x11
    3b84:	8f 5f       	subi	r24, 0xFF	; 255
    3b86:	89 8b       	std	Y+17, r24	; 0x11
    3b88:	89 89       	ldd	r24, Y+17	; 0x11
    3b8a:	84 30       	cpi	r24, 0x04	; 4
    3b8c:	08 f4       	brcc	.+2      	; 0x3b90 <KPD_ES_tGetKeyPressed+0x202>
    3b8e:	17 cf       	rjmp	.-466    	; 0x39be <KPD_ES_tGetKeyPressed+0x30>


	}else{
		return ES_NOT_OK;
	}
	return ES_OK;
    3b90:	1d 8a       	std	Y+21, r1	; 0x15
    3b92:	02 c0       	rjmp	.+4      	; 0x3b98 <KPD_ES_tGetKeyPressed+0x20a>
				break;
		}


	}else{
		return ES_NOT_OK;
    3b94:	81 e0       	ldi	r24, 0x01	; 1
    3b96:	8d 8b       	std	Y+21, r24	; 0x15
    3b98:	8d 89       	ldd	r24, Y+21	; 0x15
	}
	return ES_OK;
}
    3b9a:	65 96       	adiw	r28, 0x15	; 21
    3b9c:	0f b6       	in	r0, 0x3f	; 63
    3b9e:	f8 94       	cli
    3ba0:	de bf       	out	0x3e, r29	; 62
    3ba2:	0f be       	out	0x3f, r0	; 63
    3ba4:	cd bf       	out	0x3d, r28	; 61
    3ba6:	cf 91       	pop	r28
    3ba8:	df 91       	pop	r29
    3baa:	08 95       	ret

00003bac <DC_Motor_Init>:
#include "DC_MotorCfg.h"



ES_t DC_Motor_Init(DC_MOTOR_Index Motor)
{
    3bac:	df 93       	push	r29
    3bae:	cf 93       	push	r28
    3bb0:	cd b7       	in	r28, 0x3d	; 61
    3bb2:	de b7       	in	r29, 0x3e	; 62
    3bb4:	2c 97       	sbiw	r28, 0x0c	; 12
    3bb6:	0f b6       	in	r0, 0x3f	; 63
    3bb8:	f8 94       	cli
    3bba:	de bf       	out	0x3e, r29	; 62
    3bbc:	0f be       	out	0x3f, r0	; 63
    3bbe:	cd bf       	out	0x3d, r28	; 61
    3bc0:	8e 83       	std	Y+6, r24	; 0x06
	if(Motor == DC_MOTOR_0){
    3bc2:	8e 81       	ldd	r24, Y+6	; 0x06
    3bc4:	88 23       	and	r24, r24
    3bc6:	59 f4       	brne	.+22     	; 0x3bde <DC_Motor_Init+0x32>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN1, OUTPUT);
    3bc8:	82 e0       	ldi	r24, 0x02	; 2
    3bca:	61 e0       	ldi	r22, 0x01	; 1
    3bcc:	41 e0       	ldi	r20, 0x01	; 1
    3bce:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN2, OUTPUT);
    3bd2:	82 e0       	ldi	r24, 0x02	; 2
    3bd4:	62 e0       	ldi	r22, 0x02	; 2
    3bd6:	41 e0       	ldi	r20, 0x01	; 1
    3bd8:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <DIO_ES_tSetPinDirection>
    3bdc:	11 c0       	rjmp	.+34     	; 0x3c00 <DC_Motor_Init+0x54>
	}else if(Motor == DC_MOTOR_1){
    3bde:	8e 81       	ldd	r24, Y+6	; 0x06
    3be0:	81 30       	cpi	r24, 0x01	; 1
    3be2:	59 f4       	brne	.+22     	; 0x3bfa <DC_Motor_Init+0x4e>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN3, OUTPUT);
    3be4:	82 e0       	ldi	r24, 0x02	; 2
    3be6:	63 e0       	ldi	r22, 0x03	; 3
    3be8:	41 e0       	ldi	r20, 0x01	; 1
    3bea:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN4, OUTPUT);
    3bee:	82 e0       	ldi	r24, 0x02	; 2
    3bf0:	64 e0       	ldi	r22, 0x04	; 4
    3bf2:	41 e0       	ldi	r20, 0x01	; 1
    3bf4:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <DIO_ES_tSetPinDirection>
    3bf8:	03 c0       	rjmp	.+6      	; 0x3c00 <DC_Motor_Init+0x54>
	}else{
		return ES_NOT_OK;
    3bfa:	81 e0       	ldi	r24, 0x01	; 1
    3bfc:	8f 83       	std	Y+7, r24	; 0x07
    3bfe:	2a c0       	rjmp	.+84     	; 0x3c54 <DC_Motor_Init+0xa8>
	}


	DIO_ES_tSetPinDirection(DIO_U8_PORT_B, DIO_U8_PIN_3, OUTPUT);
    3c00:	81 e0       	ldi	r24, 0x01	; 1
    3c02:	63 e0       	ldi	r22, 0x03	; 3
    3c04:	41 e0       	ldi	r20, 0x01	; 1
    3c06:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <DIO_ES_tSetPinDirection>
	TIMER0_Config_t Timer0Cfg = {TIMER0_PHASE_CORRECT_MODE, TIMER0_PRESCALAR_8, OC0_NON_INVERTING, TOIE0_DISABLE, OCIE0_DISABLE};
    3c0a:	fe 01       	movw	r30, r28
    3c0c:	31 96       	adiw	r30, 0x01	; 1
    3c0e:	f9 87       	std	Y+9, r31	; 0x09
    3c10:	e8 87       	std	Y+8, r30	; 0x08
    3c12:	84 ef       	ldi	r24, 0xF4	; 244
    3c14:	91 e0       	ldi	r25, 0x01	; 1
    3c16:	9b 87       	std	Y+11, r25	; 0x0b
    3c18:	8a 87       	std	Y+10, r24	; 0x0a
    3c1a:	95 e0       	ldi	r25, 0x05	; 5
    3c1c:	9c 87       	std	Y+12, r25	; 0x0c
    3c1e:	ea 85       	ldd	r30, Y+10	; 0x0a
    3c20:	fb 85       	ldd	r31, Y+11	; 0x0b
    3c22:	00 80       	ld	r0, Z
    3c24:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c26:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c28:	01 96       	adiw	r24, 0x01	; 1
    3c2a:	9b 87       	std	Y+11, r25	; 0x0b
    3c2c:	8a 87       	std	Y+10, r24	; 0x0a
    3c2e:	e8 85       	ldd	r30, Y+8	; 0x08
    3c30:	f9 85       	ldd	r31, Y+9	; 0x09
    3c32:	00 82       	st	Z, r0
    3c34:	88 85       	ldd	r24, Y+8	; 0x08
    3c36:	99 85       	ldd	r25, Y+9	; 0x09
    3c38:	01 96       	adiw	r24, 0x01	; 1
    3c3a:	99 87       	std	Y+9, r25	; 0x09
    3c3c:	88 87       	std	Y+8, r24	; 0x08
    3c3e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c40:	91 50       	subi	r25, 0x01	; 1
    3c42:	9c 87       	std	Y+12, r25	; 0x0c
    3c44:	ec 85       	ldd	r30, Y+12	; 0x0c
    3c46:	ee 23       	and	r30, r30
    3c48:	51 f7       	brne	.-44     	; 0x3c1e <DC_Motor_Init+0x72>
	TIMER0_Init(&Timer0Cfg);
    3c4a:	ce 01       	movw	r24, r28
    3c4c:	01 96       	adiw	r24, 0x01	; 1
    3c4e:	0e 94 75 07 	call	0xeea	; 0xeea <TIMER0_Init>




	return ES_OK;
    3c52:	1f 82       	std	Y+7, r1	; 0x07
    3c54:	8f 81       	ldd	r24, Y+7	; 0x07
}
    3c56:	2c 96       	adiw	r28, 0x0c	; 12
    3c58:	0f b6       	in	r0, 0x3f	; 63
    3c5a:	f8 94       	cli
    3c5c:	de bf       	out	0x3e, r29	; 62
    3c5e:	0f be       	out	0x3f, r0	; 63
    3c60:	cd bf       	out	0x3d, r28	; 61
    3c62:	cf 91       	pop	r28
    3c64:	df 91       	pop	r29
    3c66:	08 95       	ret

00003c68 <DC_Motor_Stop>:


ES_t DC_Motor_Stop(DC_MOTOR_Index Motor)
{
    3c68:	df 93       	push	r29
    3c6a:	cf 93       	push	r28
    3c6c:	00 d0       	rcall	.+0      	; 0x3c6e <DC_Motor_Stop+0x6>
    3c6e:	cd b7       	in	r28, 0x3d	; 61
    3c70:	de b7       	in	r29, 0x3e	; 62
    3c72:	89 83       	std	Y+1, r24	; 0x01
	if(Motor == DC_MOTOR_0){
    3c74:	89 81       	ldd	r24, Y+1	; 0x01
    3c76:	88 23       	and	r24, r24
    3c78:	59 f4       	brne	.+22     	; 0x3c90 <DC_Motor_Stop+0x28>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN1, LOW);
    3c7a:	82 e0       	ldi	r24, 0x02	; 2
    3c7c:	61 e0       	ldi	r22, 0x01	; 1
    3c7e:	40 e0       	ldi	r20, 0x00	; 0
    3c80:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN2, LOW);
    3c84:	82 e0       	ldi	r24, 0x02	; 2
    3c86:	62 e0       	ldi	r22, 0x02	; 2
    3c88:	40 e0       	ldi	r20, 0x00	; 0
    3c8a:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    3c8e:	11 c0       	rjmp	.+34     	; 0x3cb2 <DC_Motor_Stop+0x4a>
	}else if(Motor == DC_MOTOR_1){
    3c90:	89 81       	ldd	r24, Y+1	; 0x01
    3c92:	81 30       	cpi	r24, 0x01	; 1
    3c94:	59 f4       	brne	.+22     	; 0x3cac <DC_Motor_Stop+0x44>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN3, LOW);
    3c96:	82 e0       	ldi	r24, 0x02	; 2
    3c98:	63 e0       	ldi	r22, 0x03	; 3
    3c9a:	40 e0       	ldi	r20, 0x00	; 0
    3c9c:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN4, LOW);
    3ca0:	82 e0       	ldi	r24, 0x02	; 2
    3ca2:	64 e0       	ldi	r22, 0x04	; 4
    3ca4:	40 e0       	ldi	r20, 0x00	; 0
    3ca6:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    3caa:	03 c0       	rjmp	.+6      	; 0x3cb2 <DC_Motor_Stop+0x4a>
	}else{
		return ES_NOT_OK;
    3cac:	81 e0       	ldi	r24, 0x01	; 1
    3cae:	8a 83       	std	Y+2, r24	; 0x02
    3cb0:	01 c0       	rjmp	.+2      	; 0x3cb4 <DC_Motor_Stop+0x4c>
	}
	return ES_OK;
    3cb2:	1a 82       	std	Y+2, r1	; 0x02
    3cb4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3cb6:	0f 90       	pop	r0
    3cb8:	0f 90       	pop	r0
    3cba:	cf 91       	pop	r28
    3cbc:	df 91       	pop	r29
    3cbe:	08 95       	ret

00003cc0 <DC_Motor_Move>:


ES_t DC_Motor_Move(DC_MOTOR_Index Motor,DC_MOTOR_Dir MotorDir,u8 SpeedOF100)
{
    3cc0:	df 93       	push	r29
    3cc2:	cf 93       	push	r28
    3cc4:	00 d0       	rcall	.+0      	; 0x3cc6 <DC_Motor_Move+0x6>
    3cc6:	00 d0       	rcall	.+0      	; 0x3cc8 <DC_Motor_Move+0x8>
    3cc8:	00 d0       	rcall	.+0      	; 0x3cca <DC_Motor_Move+0xa>
    3cca:	cd b7       	in	r28, 0x3d	; 61
    3ccc:	de b7       	in	r29, 0x3e	; 62
    3cce:	89 83       	std	Y+1, r24	; 0x01
    3cd0:	6a 83       	std	Y+2, r22	; 0x02
    3cd2:	4b 83       	std	Y+3, r20	; 0x03

	switch(MotorDir){
    3cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd6:	28 2f       	mov	r18, r24
    3cd8:	30 e0       	ldi	r19, 0x00	; 0
    3cda:	3e 83       	std	Y+6, r19	; 0x06
    3cdc:	2d 83       	std	Y+5, r18	; 0x05
    3cde:	8d 81       	ldd	r24, Y+5	; 0x05
    3ce0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ce2:	00 97       	sbiw	r24, 0x00	; 0
    3ce4:	31 f0       	breq	.+12     	; 0x3cf2 <DC_Motor_Move+0x32>
    3ce6:	2d 81       	ldd	r18, Y+5	; 0x05
    3ce8:	3e 81       	ldd	r19, Y+6	; 0x06
    3cea:	21 30       	cpi	r18, 0x01	; 1
    3cec:	31 05       	cpc	r19, r1
    3cee:	e9 f0       	breq	.+58     	; 0x3d2a <DC_Motor_Move+0x6a>
    3cf0:	38 c0       	rjmp	.+112    	; 0x3d62 <DC_Motor_Move+0xa2>
	case DC_MOTOR_CW:
		if(Motor == DC_MOTOR_0){
    3cf2:	89 81       	ldd	r24, Y+1	; 0x01
    3cf4:	88 23       	and	r24, r24
    3cf6:	59 f4       	brne	.+22     	; 0x3d0e <DC_Motor_Move+0x4e>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN1, HIGH);
    3cf8:	82 e0       	ldi	r24, 0x02	; 2
    3cfa:	61 e0       	ldi	r22, 0x01	; 1
    3cfc:	41 e0       	ldi	r20, 0x01	; 1
    3cfe:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN2, LOW);
    3d02:	82 e0       	ldi	r24, 0x02	; 2
    3d04:	62 e0       	ldi	r22, 0x02	; 2
    3d06:	40 e0       	ldi	r20, 0x00	; 0
    3d08:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    3d0c:	2d c0       	rjmp	.+90     	; 0x3d68 <DC_Motor_Move+0xa8>
		}else if(Motor == DC_MOTOR_1){
    3d0e:	89 81       	ldd	r24, Y+1	; 0x01
    3d10:	81 30       	cpi	r24, 0x01	; 1
    3d12:	51 f5       	brne	.+84     	; 0x3d68 <DC_Motor_Move+0xa8>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN3, HIGH);
    3d14:	82 e0       	ldi	r24, 0x02	; 2
    3d16:	63 e0       	ldi	r22, 0x03	; 3
    3d18:	41 e0       	ldi	r20, 0x01	; 1
    3d1a:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN4, LOW);
    3d1e:	82 e0       	ldi	r24, 0x02	; 2
    3d20:	64 e0       	ldi	r22, 0x04	; 4
    3d22:	40 e0       	ldi	r20, 0x00	; 0
    3d24:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    3d28:	1f c0       	rjmp	.+62     	; 0x3d68 <DC_Motor_Move+0xa8>
		}
		break;
	case DC_MOTOR_CCW:
		if(Motor == DC_MOTOR_0){
    3d2a:	89 81       	ldd	r24, Y+1	; 0x01
    3d2c:	88 23       	and	r24, r24
    3d2e:	59 f4       	brne	.+22     	; 0x3d46 <DC_Motor_Move+0x86>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN1, LOW);
    3d30:	82 e0       	ldi	r24, 0x02	; 2
    3d32:	61 e0       	ldi	r22, 0x01	; 1
    3d34:	40 e0       	ldi	r20, 0x00	; 0
    3d36:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN2, HIGH);
    3d3a:	82 e0       	ldi	r24, 0x02	; 2
    3d3c:	62 e0       	ldi	r22, 0x02	; 2
    3d3e:	41 e0       	ldi	r20, 0x01	; 1
    3d40:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    3d44:	11 c0       	rjmp	.+34     	; 0x3d68 <DC_Motor_Move+0xa8>
		}else if(Motor == DC_MOTOR_1){
    3d46:	89 81       	ldd	r24, Y+1	; 0x01
    3d48:	81 30       	cpi	r24, 0x01	; 1
    3d4a:	71 f4       	brne	.+28     	; 0x3d68 <DC_Motor_Move+0xa8>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN3, LOW);
    3d4c:	82 e0       	ldi	r24, 0x02	; 2
    3d4e:	63 e0       	ldi	r22, 0x03	; 3
    3d50:	40 e0       	ldi	r20, 0x00	; 0
    3d52:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN4, HIGH);
    3d56:	82 e0       	ldi	r24, 0x02	; 2
    3d58:	64 e0       	ldi	r22, 0x04	; 4
    3d5a:	41 e0       	ldi	r20, 0x01	; 1
    3d5c:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    3d60:	03 c0       	rjmp	.+6      	; 0x3d68 <DC_Motor_Move+0xa8>
		}
		break;
	default:
		return ES_NOT_OK;
    3d62:	31 e0       	ldi	r19, 0x01	; 1
    3d64:	3c 83       	std	Y+4, r19	; 0x04
    3d66:	10 c0       	rjmp	.+32     	; 0x3d88 <DC_Motor_Move+0xc8>
	}


	PWM_Set_DutyCycle(SpeedOF100);
    3d68:	8b 81       	ldd	r24, Y+3	; 0x03
    3d6a:	88 2f       	mov	r24, r24
    3d6c:	90 e0       	ldi	r25, 0x00	; 0
    3d6e:	a0 e0       	ldi	r26, 0x00	; 0
    3d70:	b0 e0       	ldi	r27, 0x00	; 0
    3d72:	bc 01       	movw	r22, r24
    3d74:	cd 01       	movw	r24, r26
    3d76:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3d7a:	dc 01       	movw	r26, r24
    3d7c:	cb 01       	movw	r24, r22
    3d7e:	bc 01       	movw	r22, r24
    3d80:	cd 01       	movw	r24, r26
    3d82:	0e 94 c8 08 	call	0x1190	; 0x1190 <PWM_Set_DutyCycle>




	return ES_OK;
    3d86:	1c 82       	std	Y+4, r1	; 0x04
    3d88:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3d8a:	26 96       	adiw	r28, 0x06	; 6
    3d8c:	0f b6       	in	r0, 0x3f	; 63
    3d8e:	f8 94       	cli
    3d90:	de bf       	out	0x3e, r29	; 62
    3d92:	0f be       	out	0x3f, r0	; 63
    3d94:	cd bf       	out	0x3d, r28	; 61
    3d96:	cf 91       	pop	r28
    3d98:	df 91       	pop	r29
    3d9a:	08 95       	ret

00003d9c <main>:
#include "../MCAL/ADC/ADC.h"



int main()
{
    3d9c:	df 93       	push	r29
    3d9e:	cf 93       	push	r28
    3da0:	cd b7       	in	r28, 0x3d	; 61
    3da2:	de b7       	in	r29, 0x3e	; 62
    3da4:	6a 97       	sbiw	r28, 0x1a	; 26
    3da6:	0f b6       	in	r0, 0x3f	; 63
    3da8:	f8 94       	cli
    3daa:	de bf       	out	0x3e, r29	; 62
    3dac:	0f be       	out	0x3f, r0	; 63
    3dae:	cd bf       	out	0x3d, r28	; 61
	// Initialization
	DIO_ES_tInit();
    3db0:	0e 94 ce 11 	call	0x239c	; 0x239c <DIO_ES_tInit>
	Lcd_ES_tInit();
    3db4:	0e 94 20 17 	call	0x2e40	; 0x2e40 <Lcd_ES_tInit>
	DIO_ES_tSetPinDirection(DIO_U8_PORT_B, DIO_U8_PIN_3, OUTPUT);
    3db8:	81 e0       	ldi	r24, 0x01	; 1
    3dba:	63 e0       	ldi	r22, 0x03	; 3
    3dbc:	41 e0       	ldi	r20, 0x01	; 1
    3dbe:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(DIO_U8_PORT_A, DIO_U8_PIN_0, INPUT);
    3dc2:	80 e0       	ldi	r24, 0x00	; 0
    3dc4:	60 e0       	ldi	r22, 0x00	; 0
    3dc6:	40 e0       	ldi	r20, 0x00	; 0
    3dc8:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <DIO_ES_tSetPinDirection>
	ADC_init();
    3dcc:	0e 94 87 14 	call	0x290e	; 0x290e <ADC_init>


	TIMER0_Config_t Timer0Cfg = {TIMER0_PHASE_CORRECT_MODE, TIMER0_PRESCALAR_64, OC0_NON_INVERTING, TOIE0_DISABLE, OCIE0_DISABLE};
    3dd0:	ce 01       	movw	r24, r28
    3dd2:	41 96       	adiw	r24, 0x11	; 17
    3dd4:	9f 8b       	std	Y+23, r25	; 0x17
    3dd6:	8e 8b       	std	Y+22, r24	; 0x16
    3dd8:	e9 ef       	ldi	r30, 0xF9	; 249
    3dda:	f1 e0       	ldi	r31, 0x01	; 1
    3ddc:	f9 8f       	std	Y+25, r31	; 0x19
    3dde:	e8 8f       	std	Y+24, r30	; 0x18
    3de0:	f5 e0       	ldi	r31, 0x05	; 5
    3de2:	fa 8f       	std	Y+26, r31	; 0x1a
    3de4:	e8 8d       	ldd	r30, Y+24	; 0x18
    3de6:	f9 8d       	ldd	r31, Y+25	; 0x19
    3de8:	00 80       	ld	r0, Z
    3dea:	88 8d       	ldd	r24, Y+24	; 0x18
    3dec:	99 8d       	ldd	r25, Y+25	; 0x19
    3dee:	01 96       	adiw	r24, 0x01	; 1
    3df0:	99 8f       	std	Y+25, r25	; 0x19
    3df2:	88 8f       	std	Y+24, r24	; 0x18
    3df4:	ee 89       	ldd	r30, Y+22	; 0x16
    3df6:	ff 89       	ldd	r31, Y+23	; 0x17
    3df8:	00 82       	st	Z, r0
    3dfa:	8e 89       	ldd	r24, Y+22	; 0x16
    3dfc:	9f 89       	ldd	r25, Y+23	; 0x17
    3dfe:	01 96       	adiw	r24, 0x01	; 1
    3e00:	9f 8b       	std	Y+23, r25	; 0x17
    3e02:	8e 8b       	std	Y+22, r24	; 0x16
    3e04:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3e06:	91 50       	subi	r25, 0x01	; 1
    3e08:	9a 8f       	std	Y+26, r25	; 0x1a
    3e0a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3e0c:	ee 23       	and	r30, r30
    3e0e:	51 f7       	brne	.-44     	; 0x3de4 <main+0x48>

	TIMER0_Init(&Timer0Cfg);
    3e10:	ce 01       	movw	r24, r28
    3e12:	41 96       	adiw	r24, 0x11	; 17
    3e14:	0e 94 75 07 	call	0xeea	; 0xeea <TIMER0_Init>



	int PotValue = 0;
    3e18:	18 8a       	std	Y+16, r1	; 0x10
    3e1a:	1f 86       	std	Y+15, r1	; 0x0f


	Lcd_ES_tsendString("Percent : ");
    3e1c:	80 e6       	ldi	r24, 0x60	; 96
    3e1e:	90 e0       	ldi	r25, 0x00	; 0
    3e20:	0e 94 28 19 	call	0x3250	; 0x3250 <Lcd_ES_tsendString>

	sei();
    3e24:	78 94       	sei

	while (1)
	{
		PotValue = ADC_read(ADC0);
    3e26:	80 e0       	ldi	r24, 0x00	; 0
    3e28:	0e 94 b8 14 	call	0x2970	; 0x2970 <ADC_read>
    3e2c:	98 8b       	std	Y+16, r25	; 0x10
    3e2e:	8f 87       	std	Y+15, r24	; 0x0f
		// Convert it to percentage
		PotValue = ((PotValue / 1024.0) * 100.0);
    3e30:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e32:	98 89       	ldd	r25, Y+16	; 0x10
    3e34:	aa 27       	eor	r26, r26
    3e36:	97 fd       	sbrc	r25, 7
    3e38:	a0 95       	com	r26
    3e3a:	ba 2f       	mov	r27, r26
    3e3c:	bc 01       	movw	r22, r24
    3e3e:	cd 01       	movw	r24, r26
    3e40:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3e44:	dc 01       	movw	r26, r24
    3e46:	cb 01       	movw	r24, r22
    3e48:	bc 01       	movw	r22, r24
    3e4a:	cd 01       	movw	r24, r26
    3e4c:	20 e0       	ldi	r18, 0x00	; 0
    3e4e:	30 e0       	ldi	r19, 0x00	; 0
    3e50:	40 e8       	ldi	r20, 0x80	; 128
    3e52:	54 e4       	ldi	r21, 0x44	; 68
    3e54:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3e58:	dc 01       	movw	r26, r24
    3e5a:	cb 01       	movw	r24, r22
    3e5c:	bc 01       	movw	r22, r24
    3e5e:	cd 01       	movw	r24, r26
    3e60:	20 e0       	ldi	r18, 0x00	; 0
    3e62:	30 e0       	ldi	r19, 0x00	; 0
    3e64:	48 ec       	ldi	r20, 0xC8	; 200
    3e66:	52 e4       	ldi	r21, 0x42	; 66
    3e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e6c:	dc 01       	movw	r26, r24
    3e6e:	cb 01       	movw	r24, r22
    3e70:	bc 01       	movw	r22, r24
    3e72:	cd 01       	movw	r24, r26
    3e74:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3e78:	dc 01       	movw	r26, r24
    3e7a:	cb 01       	movw	r24, r22
    3e7c:	98 8b       	std	Y+16, r25	; 0x10
    3e7e:	8f 87       	std	Y+15, r24	; 0x0f

		PWM_Set_DutyCycle(PotValue);
    3e80:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e82:	98 89       	ldd	r25, Y+16	; 0x10
    3e84:	aa 27       	eor	r26, r26
    3e86:	97 fd       	sbrc	r25, 7
    3e88:	a0 95       	com	r26
    3e8a:	ba 2f       	mov	r27, r26
    3e8c:	bc 01       	movw	r22, r24
    3e8e:	cd 01       	movw	r24, r26
    3e90:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3e94:	dc 01       	movw	r26, r24
    3e96:	cb 01       	movw	r24, r22
    3e98:	bc 01       	movw	r22, r24
    3e9a:	cd 01       	movw	r24, r26
    3e9c:	0e 94 c8 08 	call	0x1190	; 0x1190 <PWM_Set_DutyCycle>


		LCD_ES_tGoTo(0, 12);
    3ea0:	80 e0       	ldi	r24, 0x00	; 0
    3ea2:	6c e0       	ldi	r22, 0x0C	; 12
    3ea4:	0e 94 9e 1c 	call	0x393c	; 0x393c <LCD_ES_tGoTo>
		Lcd_ES_tsendString("   ");
    3ea8:	8b e6       	ldi	r24, 0x6B	; 107
    3eaa:	90 e0       	ldi	r25, 0x00	; 0
    3eac:	0e 94 28 19 	call	0x3250	; 0x3250 <Lcd_ES_tsendString>
		LCD_ES_tGoTo(0, 12);
    3eb0:	80 e0       	ldi	r24, 0x00	; 0
    3eb2:	6c e0       	ldi	r22, 0x0C	; 12
    3eb4:	0e 94 9e 1c 	call	0x393c	; 0x393c <LCD_ES_tGoTo>
		Lcd_ES_tdisplayNum(PotValue);
    3eb8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3eba:	98 89       	ldd	r25, Y+16	; 0x10
    3ebc:	aa 27       	eor	r26, r26
    3ebe:	97 fd       	sbrc	r25, 7
    3ec0:	a0 95       	com	r26
    3ec2:	ba 2f       	mov	r27, r26
    3ec4:	bc 01       	movw	r22, r24
    3ec6:	cd 01       	movw	r24, r26
    3ec8:	0e 94 80 19 	call	0x3300	; 0x3300 <Lcd_ES_tdisplayNum>
    3ecc:	80 e0       	ldi	r24, 0x00	; 0
    3ece:	90 e0       	ldi	r25, 0x00	; 0
    3ed0:	aa e7       	ldi	r26, 0x7A	; 122
    3ed2:	b4 e4       	ldi	r27, 0x44	; 68
    3ed4:	8b 87       	std	Y+11, r24	; 0x0b
    3ed6:	9c 87       	std	Y+12, r25	; 0x0c
    3ed8:	ad 87       	std	Y+13, r26	; 0x0d
    3eda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3edc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ede:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ee0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ee2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ee4:	20 e0       	ldi	r18, 0x00	; 0
    3ee6:	30 e0       	ldi	r19, 0x00	; 0
    3ee8:	4a e7       	ldi	r20, 0x7A	; 122
    3eea:	55 e4       	ldi	r21, 0x45	; 69
    3eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ef0:	dc 01       	movw	r26, r24
    3ef2:	cb 01       	movw	r24, r22
    3ef4:	8f 83       	std	Y+7, r24	; 0x07
    3ef6:	98 87       	std	Y+8, r25	; 0x08
    3ef8:	a9 87       	std	Y+9, r26	; 0x09
    3efa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3efc:	6f 81       	ldd	r22, Y+7	; 0x07
    3efe:	78 85       	ldd	r23, Y+8	; 0x08
    3f00:	89 85       	ldd	r24, Y+9	; 0x09
    3f02:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f04:	20 e0       	ldi	r18, 0x00	; 0
    3f06:	30 e0       	ldi	r19, 0x00	; 0
    3f08:	40 e8       	ldi	r20, 0x80	; 128
    3f0a:	5f e3       	ldi	r21, 0x3F	; 63
    3f0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f10:	88 23       	and	r24, r24
    3f12:	2c f4       	brge	.+10     	; 0x3f1e <main+0x182>
		__ticks = 1;
    3f14:	81 e0       	ldi	r24, 0x01	; 1
    3f16:	90 e0       	ldi	r25, 0x00	; 0
    3f18:	9e 83       	std	Y+6, r25	; 0x06
    3f1a:	8d 83       	std	Y+5, r24	; 0x05
    3f1c:	3f c0       	rjmp	.+126    	; 0x3f9c <main+0x200>
	else if (__tmp > 65535)
    3f1e:	6f 81       	ldd	r22, Y+7	; 0x07
    3f20:	78 85       	ldd	r23, Y+8	; 0x08
    3f22:	89 85       	ldd	r24, Y+9	; 0x09
    3f24:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f26:	20 e0       	ldi	r18, 0x00	; 0
    3f28:	3f ef       	ldi	r19, 0xFF	; 255
    3f2a:	4f e7       	ldi	r20, 0x7F	; 127
    3f2c:	57 e4       	ldi	r21, 0x47	; 71
    3f2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f32:	18 16       	cp	r1, r24
    3f34:	4c f5       	brge	.+82     	; 0x3f88 <main+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f36:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f38:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f3e:	20 e0       	ldi	r18, 0x00	; 0
    3f40:	30 e0       	ldi	r19, 0x00	; 0
    3f42:	40 e2       	ldi	r20, 0x20	; 32
    3f44:	51 e4       	ldi	r21, 0x41	; 65
    3f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f4a:	dc 01       	movw	r26, r24
    3f4c:	cb 01       	movw	r24, r22
    3f4e:	bc 01       	movw	r22, r24
    3f50:	cd 01       	movw	r24, r26
    3f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f56:	dc 01       	movw	r26, r24
    3f58:	cb 01       	movw	r24, r22
    3f5a:	9e 83       	std	Y+6, r25	; 0x06
    3f5c:	8d 83       	std	Y+5, r24	; 0x05
    3f5e:	0f c0       	rjmp	.+30     	; 0x3f7e <main+0x1e2>
    3f60:	80 e9       	ldi	r24, 0x90	; 144
    3f62:	91 e0       	ldi	r25, 0x01	; 1
    3f64:	9c 83       	std	Y+4, r25	; 0x04
    3f66:	8b 83       	std	Y+3, r24	; 0x03
    3f68:	8b 81       	ldd	r24, Y+3	; 0x03
    3f6a:	9c 81       	ldd	r25, Y+4	; 0x04
    3f6c:	01 97       	sbiw	r24, 0x01	; 1
    3f6e:	f1 f7       	brne	.-4      	; 0x3f6c <main+0x1d0>
    3f70:	9c 83       	std	Y+4, r25	; 0x04
    3f72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f74:	8d 81       	ldd	r24, Y+5	; 0x05
    3f76:	9e 81       	ldd	r25, Y+6	; 0x06
    3f78:	01 97       	sbiw	r24, 0x01	; 1
    3f7a:	9e 83       	std	Y+6, r25	; 0x06
    3f7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f7e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f80:	9e 81       	ldd	r25, Y+6	; 0x06
    3f82:	00 97       	sbiw	r24, 0x00	; 0
    3f84:	69 f7       	brne	.-38     	; 0x3f60 <main+0x1c4>
    3f86:	4f cf       	rjmp	.-354    	; 0x3e26 <main+0x8a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f88:	6f 81       	ldd	r22, Y+7	; 0x07
    3f8a:	78 85       	ldd	r23, Y+8	; 0x08
    3f8c:	89 85       	ldd	r24, Y+9	; 0x09
    3f8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f94:	dc 01       	movw	r26, r24
    3f96:	cb 01       	movw	r24, r22
    3f98:	9e 83       	std	Y+6, r25	; 0x06
    3f9a:	8d 83       	std	Y+5, r24	; 0x05
    3f9c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f9e:	9e 81       	ldd	r25, Y+6	; 0x06
    3fa0:	9a 83       	std	Y+2, r25	; 0x02
    3fa2:	89 83       	std	Y+1, r24	; 0x01
    3fa4:	89 81       	ldd	r24, Y+1	; 0x01
    3fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    3fa8:	01 97       	sbiw	r24, 0x01	; 1
    3faa:	f1 f7       	brne	.-4      	; 0x3fa8 <main+0x20c>
    3fac:	9a 83       	std	Y+2, r25	; 0x02
    3fae:	89 83       	std	Y+1, r24	; 0x01
    3fb0:	3a cf       	rjmp	.-396    	; 0x3e26 <main+0x8a>

00003fb2 <__mulsi3>:
    3fb2:	62 9f       	mul	r22, r18
    3fb4:	d0 01       	movw	r26, r0
    3fb6:	73 9f       	mul	r23, r19
    3fb8:	f0 01       	movw	r30, r0
    3fba:	82 9f       	mul	r24, r18
    3fbc:	e0 0d       	add	r30, r0
    3fbe:	f1 1d       	adc	r31, r1
    3fc0:	64 9f       	mul	r22, r20
    3fc2:	e0 0d       	add	r30, r0
    3fc4:	f1 1d       	adc	r31, r1
    3fc6:	92 9f       	mul	r25, r18
    3fc8:	f0 0d       	add	r31, r0
    3fca:	83 9f       	mul	r24, r19
    3fcc:	f0 0d       	add	r31, r0
    3fce:	74 9f       	mul	r23, r20
    3fd0:	f0 0d       	add	r31, r0
    3fd2:	65 9f       	mul	r22, r21
    3fd4:	f0 0d       	add	r31, r0
    3fd6:	99 27       	eor	r25, r25
    3fd8:	72 9f       	mul	r23, r18
    3fda:	b0 0d       	add	r27, r0
    3fdc:	e1 1d       	adc	r30, r1
    3fde:	f9 1f       	adc	r31, r25
    3fe0:	63 9f       	mul	r22, r19
    3fe2:	b0 0d       	add	r27, r0
    3fe4:	e1 1d       	adc	r30, r1
    3fe6:	f9 1f       	adc	r31, r25
    3fe8:	bd 01       	movw	r22, r26
    3fea:	cf 01       	movw	r24, r30
    3fec:	11 24       	eor	r1, r1
    3fee:	08 95       	ret

00003ff0 <__divmodhi4>:
    3ff0:	97 fb       	bst	r25, 7
    3ff2:	09 2e       	mov	r0, r25
    3ff4:	07 26       	eor	r0, r23
    3ff6:	0a d0       	rcall	.+20     	; 0x400c <__divmodhi4_neg1>
    3ff8:	77 fd       	sbrc	r23, 7
    3ffa:	04 d0       	rcall	.+8      	; 0x4004 <__divmodhi4_neg2>
    3ffc:	2e d0       	rcall	.+92     	; 0x405a <__udivmodhi4>
    3ffe:	06 d0       	rcall	.+12     	; 0x400c <__divmodhi4_neg1>
    4000:	00 20       	and	r0, r0
    4002:	1a f4       	brpl	.+6      	; 0x400a <__divmodhi4_exit>

00004004 <__divmodhi4_neg2>:
    4004:	70 95       	com	r23
    4006:	61 95       	neg	r22
    4008:	7f 4f       	sbci	r23, 0xFF	; 255

0000400a <__divmodhi4_exit>:
    400a:	08 95       	ret

0000400c <__divmodhi4_neg1>:
    400c:	f6 f7       	brtc	.-4      	; 0x400a <__divmodhi4_exit>
    400e:	90 95       	com	r25
    4010:	81 95       	neg	r24
    4012:	9f 4f       	sbci	r25, 0xFF	; 255
    4014:	08 95       	ret

00004016 <__udivmodsi4>:
    4016:	a1 e2       	ldi	r26, 0x21	; 33
    4018:	1a 2e       	mov	r1, r26
    401a:	aa 1b       	sub	r26, r26
    401c:	bb 1b       	sub	r27, r27
    401e:	fd 01       	movw	r30, r26
    4020:	0d c0       	rjmp	.+26     	; 0x403c <__udivmodsi4_ep>

00004022 <__udivmodsi4_loop>:
    4022:	aa 1f       	adc	r26, r26
    4024:	bb 1f       	adc	r27, r27
    4026:	ee 1f       	adc	r30, r30
    4028:	ff 1f       	adc	r31, r31
    402a:	a2 17       	cp	r26, r18
    402c:	b3 07       	cpc	r27, r19
    402e:	e4 07       	cpc	r30, r20
    4030:	f5 07       	cpc	r31, r21
    4032:	20 f0       	brcs	.+8      	; 0x403c <__udivmodsi4_ep>
    4034:	a2 1b       	sub	r26, r18
    4036:	b3 0b       	sbc	r27, r19
    4038:	e4 0b       	sbc	r30, r20
    403a:	f5 0b       	sbc	r31, r21

0000403c <__udivmodsi4_ep>:
    403c:	66 1f       	adc	r22, r22
    403e:	77 1f       	adc	r23, r23
    4040:	88 1f       	adc	r24, r24
    4042:	99 1f       	adc	r25, r25
    4044:	1a 94       	dec	r1
    4046:	69 f7       	brne	.-38     	; 0x4022 <__udivmodsi4_loop>
    4048:	60 95       	com	r22
    404a:	70 95       	com	r23
    404c:	80 95       	com	r24
    404e:	90 95       	com	r25
    4050:	9b 01       	movw	r18, r22
    4052:	ac 01       	movw	r20, r24
    4054:	bd 01       	movw	r22, r26
    4056:	cf 01       	movw	r24, r30
    4058:	08 95       	ret

0000405a <__udivmodhi4>:
    405a:	aa 1b       	sub	r26, r26
    405c:	bb 1b       	sub	r27, r27
    405e:	51 e1       	ldi	r21, 0x11	; 17
    4060:	07 c0       	rjmp	.+14     	; 0x4070 <__udivmodhi4_ep>

00004062 <__udivmodhi4_loop>:
    4062:	aa 1f       	adc	r26, r26
    4064:	bb 1f       	adc	r27, r27
    4066:	a6 17       	cp	r26, r22
    4068:	b7 07       	cpc	r27, r23
    406a:	10 f0       	brcs	.+4      	; 0x4070 <__udivmodhi4_ep>
    406c:	a6 1b       	sub	r26, r22
    406e:	b7 0b       	sbc	r27, r23

00004070 <__udivmodhi4_ep>:
    4070:	88 1f       	adc	r24, r24
    4072:	99 1f       	adc	r25, r25
    4074:	5a 95       	dec	r21
    4076:	a9 f7       	brne	.-22     	; 0x4062 <__udivmodhi4_loop>
    4078:	80 95       	com	r24
    407a:	90 95       	com	r25
    407c:	bc 01       	movw	r22, r24
    407e:	cd 01       	movw	r24, r26
    4080:	08 95       	ret

00004082 <__prologue_saves__>:
    4082:	2f 92       	push	r2
    4084:	3f 92       	push	r3
    4086:	4f 92       	push	r4
    4088:	5f 92       	push	r5
    408a:	6f 92       	push	r6
    408c:	7f 92       	push	r7
    408e:	8f 92       	push	r8
    4090:	9f 92       	push	r9
    4092:	af 92       	push	r10
    4094:	bf 92       	push	r11
    4096:	cf 92       	push	r12
    4098:	df 92       	push	r13
    409a:	ef 92       	push	r14
    409c:	ff 92       	push	r15
    409e:	0f 93       	push	r16
    40a0:	1f 93       	push	r17
    40a2:	cf 93       	push	r28
    40a4:	df 93       	push	r29
    40a6:	cd b7       	in	r28, 0x3d	; 61
    40a8:	de b7       	in	r29, 0x3e	; 62
    40aa:	ca 1b       	sub	r28, r26
    40ac:	db 0b       	sbc	r29, r27
    40ae:	0f b6       	in	r0, 0x3f	; 63
    40b0:	f8 94       	cli
    40b2:	de bf       	out	0x3e, r29	; 62
    40b4:	0f be       	out	0x3f, r0	; 63
    40b6:	cd bf       	out	0x3d, r28	; 61
    40b8:	09 94       	ijmp

000040ba <__epilogue_restores__>:
    40ba:	2a 88       	ldd	r2, Y+18	; 0x12
    40bc:	39 88       	ldd	r3, Y+17	; 0x11
    40be:	48 88       	ldd	r4, Y+16	; 0x10
    40c0:	5f 84       	ldd	r5, Y+15	; 0x0f
    40c2:	6e 84       	ldd	r6, Y+14	; 0x0e
    40c4:	7d 84       	ldd	r7, Y+13	; 0x0d
    40c6:	8c 84       	ldd	r8, Y+12	; 0x0c
    40c8:	9b 84       	ldd	r9, Y+11	; 0x0b
    40ca:	aa 84       	ldd	r10, Y+10	; 0x0a
    40cc:	b9 84       	ldd	r11, Y+9	; 0x09
    40ce:	c8 84       	ldd	r12, Y+8	; 0x08
    40d0:	df 80       	ldd	r13, Y+7	; 0x07
    40d2:	ee 80       	ldd	r14, Y+6	; 0x06
    40d4:	fd 80       	ldd	r15, Y+5	; 0x05
    40d6:	0c 81       	ldd	r16, Y+4	; 0x04
    40d8:	1b 81       	ldd	r17, Y+3	; 0x03
    40da:	aa 81       	ldd	r26, Y+2	; 0x02
    40dc:	b9 81       	ldd	r27, Y+1	; 0x01
    40de:	ce 0f       	add	r28, r30
    40e0:	d1 1d       	adc	r29, r1
    40e2:	0f b6       	in	r0, 0x3f	; 63
    40e4:	f8 94       	cli
    40e6:	de bf       	out	0x3e, r29	; 62
    40e8:	0f be       	out	0x3f, r0	; 63
    40ea:	cd bf       	out	0x3d, r28	; 61
    40ec:	ed 01       	movw	r28, r26
    40ee:	08 95       	ret

000040f0 <_exit>:
    40f0:	f8 94       	cli

000040f2 <__stop_program>:
    40f2:	ff cf       	rjmp	.-2      	; 0x40f2 <__stop_program>
