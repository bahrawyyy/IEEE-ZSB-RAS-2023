
Timer_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000046f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001ce  00800060  000046f4  00004788  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  0080022e  0080022e  00004956  2**0
                  ALLOC
  3 .stab         00000aa4  00000000  00000000  00004958  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d83  00000000  00000000  000053fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000004b0  00000000  00000000  0000617f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000007f5  00000000  00000000  0000662f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000041f9  00000000  00000000  00006e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001de8  00000000  00000000  0000b01d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003657  00000000  00000000  0000ce05  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000680  00000000  00000000  0001045c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000011b8  00000000  00000000  00010adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00011c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000308  00000000  00000000  00012602  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 39 11 	jmp	0x2272	; 0x2272 <__vector_1>
       8:	0c 94 6c 11 	jmp	0x22d8	; 0x22d8 <__vector_2>
       c:	0c 94 9f 11 	jmp	0x233e	; 0x233e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__vector_10>
      2c:	0c 94 15 0d 	jmp	0x1a2a	; 0x1a2a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 9e 08 	jmp	0x113c	; 0x113c <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ef       	ldi	r30, 0xF4	; 244
      68:	f6 e4       	ldi	r31, 0x46	; 70
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 32       	cpi	r26, 0x2E	; 46
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae e2       	ldi	r26, 0x2E	; 46
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 35       	cpi	r26, 0x5A	; 90
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 dc 21 	call	0x43b8	; 0x43b8 <main>
      8a:	0c 94 78 23 	jmp	0x46f0	; 0x46f0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 41 23 	jmp	0x4682	; 0x4682 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5d 23 	jmp	0x46ba	; 0x46ba <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4d 23 	jmp	0x469a	; 0x469a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 69 23 	jmp	0x46d2	; 0x46d2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4d 23 	jmp	0x469a	; 0x469a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 69 23 	jmp	0x46d2	; 0x46d2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 41 23 	jmp	0x4682	; 0x4682 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5d 23 	jmp	0x46ba	; 0x46ba <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 49 23 	jmp	0x4692	; 0x4692 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 65 23 	jmp	0x46ca	; 0x46ca <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 4d 23 	jmp	0x469a	; 0x469a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 69 23 	jmp	0x46d2	; 0x46d2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 4d 23 	jmp	0x469a	; 0x469a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 69 23 	jmp	0x46d2	; 0x46d2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 4d 23 	jmp	0x469a	; 0x469a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 69 23 	jmp	0x46d2	; 0x46d2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 51 23 	jmp	0x46a2	; 0x46a2 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 6d 23 	jmp	0x46da	; 0x46da <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 49 23 	jmp	0x4692	; 0x4692 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 65 23 	jmp	0x46ca	; 0x46ca <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <WDT_START>:

#include "WDT.h"


ES_t WDT_START(u8 timing)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	0f 92       	push	r0
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	89 83       	std	Y+1, r24	; 0x01
	// The WDP2, WDP1, and WDP0 bits determine the Watchdog Timer prescaling when the
	// Watchdog Timer is enabled
	WDTCR |= (1<<WDE) | timing;
     e3a:	a1 e4       	ldi	r26, 0x41	; 65
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e1 e4       	ldi	r30, 0x41	; 65
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	90 81       	ld	r25, Z
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	89 2b       	or	r24, r25
     e48:	88 60       	ori	r24, 0x08	; 8
     e4a:	8c 93       	st	X, r24
	return ES_OK;
     e4c:	80 e0       	ldi	r24, 0x00	; 0
}
     e4e:	0f 90       	pop	r0
     e50:	cf 91       	pop	r28
     e52:	df 91       	pop	r29
     e54:	08 95       	ret

00000e56 <WDT_Stop>:



ES_t WDT_Stop(void)
{
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
//	- In the same operation, write a logic one to WDTOE and WDE. A logic one must
//	be written to WDE even though it is set to one before the disable operation starts.
//	- Within the next four clock cycles, write a logic 0 to WDE. This disables the
//	Watchdog.

	WDTCR |= (1<<WDE) | (1<<WDTOE);
     e5e:	a1 e4       	ldi	r26, 0x41	; 65
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e1 e4       	ldi	r30, 0x41	; 65
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	88 61       	ori	r24, 0x18	; 24
     e6a:	8c 93       	st	X, r24
	WDTCR = 0x00;
     e6c:	e1 e4       	ldi	r30, 0x41	; 65
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	10 82       	st	Z, r1

	return ES_OK;
     e72:	80 e0       	ldi	r24, 0x00	; 0

}
     e74:	cf 91       	pop	r28
     e76:	df 91       	pop	r29
     e78:	08 95       	ret

00000e7a <UART_Init>:
// 		Initialization
// ==============================================


void UART_Init(void)
{
     e7a:	df 93       	push	r29
     e7c:	cf 93       	push	r28
     e7e:	00 d0       	rcall	.+0      	; 0xe80 <UART_Init+0x6>
     e80:	0f 92       	push	r0
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
	u8  UCSRC_var=0;
     e86:	1b 82       	std	Y+3, r1	; 0x03
	u16 UBRR_var=0;
     e88:	1a 82       	std	Y+2, r1	; 0x02
     e8a:	19 82       	std	Y+1, r1	; 0x01

#if (SPEED_MODE==NORMAL_SPEED)
	CLR_BIT(UCSRA,U2X);
     e8c:	ab e2       	ldi	r26, 0x2B	; 43
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	eb e2       	ldi	r30, 0x2B	; 43
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	8d 7f       	andi	r24, 0xFD	; 253
     e98:	8c 93       	st	X, r24
#elif (SPEED_MODE==DOUBLE_SPEED)
	SET_BIT(UCSRA,U2X);
#endif

	// Set URSEL to write data to UCSRC register
	SET_BIT(UCSRC_var,URSEL);
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	80 68       	ori	r24, 0x80	; 128
     e9e:	8b 83       	std	Y+3, r24	; 0x03


#if (SYNCH_MODE==SYNCH)
	SET_BIT(UCSRC_var,UMSEL)
#elif (SYNCH_MODE==ASYNCH)
	CLR_BIT(UCSRC_var,UMSEL);
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	8f 7b       	andi	r24, 0xBF	; 191
     ea4:	8b 83       	std	Y+3, r24	; 0x03
#endif

#if (PARITY_MODE==NO_PARITY)
	CLR_BIT(UCSRC_var,UPM0);
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
     ea8:	8f 7e       	andi	r24, 0xEF	; 239
     eaa:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(UCSRC_var,UPM1);
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	8f 7d       	andi	r24, 0xDF	; 223
     eb0:	8b 83       	std	Y+3, r24	; 0x03
#elif (N_DATA_BITS==_7_DATA_BITS)
	CLR_BIT(UCSRC_var,UCSZ0);
	SET_BIT(UCSRC_var,UCSZ1);
	CLR_BIT(UCSRB,UCSZ2);
#elif (N_DATA_BITS==_8_DATA_BITS)
	SET_BIT(UCSRC_var,UCSZ0);
     eb2:	8b 81       	ldd	r24, Y+3	; 0x03
     eb4:	82 60       	ori	r24, 0x02	; 2
     eb6:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(UCSRC_var,UCSZ1);
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	84 60       	ori	r24, 0x04	; 4
     ebc:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(UCSRB,UCSZ2);
     ebe:	aa e2       	ldi	r26, 0x2A	; 42
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	ea e2       	ldi	r30, 0x2A	; 42
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	8b 7f       	andi	r24, 0xFB	; 251
     eca:	8c 93       	st	X, r24
	SET_BIT(UCSRC_var,UCSZ1);
	SET_BIT(UCSRB,UCSZ2);
#endif

#if (N_STOP_BITS==ONE_STOP_BIT)
	CLR_BIT(UCSRC_var,USBS);
     ecc:	8b 81       	ldd	r24, Y+3	; 0x03
     ece:	87 7f       	andi	r24, 0xF7	; 247
     ed0:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(UCSRC_var,USBS);
#endif


	// Set UCSRC value
	UCSRC=UCSRC_var;
     ed2:	e0 e4       	ldi	r30, 0x40	; 64
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	8b 81       	ldd	r24, Y+3	; 0x03
     ed8:	80 83       	st	Z, r24


	// Baud rate
	UBRR_var = BaudRateArray[SPEED_MODE][CPU_F][BUAD_RATE];
     eda:	80 91 e5 01 	lds	r24, 0x01E5
     ede:	90 91 e6 01 	lds	r25, 0x01E6
     ee2:	9a 83       	std	Y+2, r25	; 0x02
     ee4:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = (u8)(UBRR_var>>8);
     ee6:	e0 e4       	ldi	r30, 0x40	; 64
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	89 81       	ldd	r24, Y+1	; 0x01
     eec:	9a 81       	ldd	r25, Y+2	; 0x02
     eee:	89 2f       	mov	r24, r25
     ef0:	99 27       	eor	r25, r25
     ef2:	80 83       	st	Z, r24
	UBRRL = (u8)UBRR_var;
     ef4:	e9 e2       	ldi	r30, 0x29	; 41
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	80 83       	st	Z, r24


	// Enabling UART
	//enable UART  receiver
	SET_BIT(UCSRB,RXEN);
     efc:	aa e2       	ldi	r26, 0x2A	; 42
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	ea e2       	ldi	r30, 0x2A	; 42
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	80 61       	ori	r24, 0x10	; 16
     f08:	8c 93       	st	X, r24
	//enable UART  transmitter
	SET_BIT(UCSRB,TXEN);
     f0a:	aa e2       	ldi	r26, 0x2A	; 42
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	ea e2       	ldi	r30, 0x2A	; 42
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	88 60       	ori	r24, 0x08	; 8
     f16:	8c 93       	st	X, r24

}
     f18:	0f 90       	pop	r0
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <UART_SendByteNoBlock>:
// ========================================================



void UART_SendByteNoBlock(u8 data)
{
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	0f 92       	push	r0
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
     f2e:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;
     f30:	ec e2       	ldi	r30, 0x2C	; 44
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	80 83       	st	Z, r24
}
     f38:	0f 90       	pop	r0
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	08 95       	ret

00000f40 <UART_ReceiveByteNoBlock>:

u8 UART_ReceiveByteNoBlock(void)
{
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
    return UDR;
     f48:	ec e2       	ldi	r30, 0x2C	; 44
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
}
     f4e:	cf 91       	pop	r28
     f50:	df 91       	pop	r29
     f52:	08 95       	ret

00000f54 <UART_Send_Char>:
// ========================================================
// 			Busy Wait Functions
// ========================================================

void UART_Send_Char(u8 data)
{
     f54:	df 93       	push	r29
     f56:	cf 93       	push	r28
     f58:	0f 92       	push	r0
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
     f5e:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the buffer is empty and ready for transmitting
		a new byte so wait until this flag is set to one and it will cleared by
		hardware when u write new data to buffer */
	// Busy wait
	while(!GET_BIT(UCSRA,UDRE));
     f60:	eb e2       	ldi	r30, 0x2B	; 43
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	82 95       	swap	r24
     f68:	86 95       	lsr	r24
     f6a:	87 70       	andi	r24, 0x07	; 7
     f6c:	88 2f       	mov	r24, r24
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	81 70       	andi	r24, 0x01	; 1
     f72:	90 70       	andi	r25, 0x00	; 0
     f74:	00 97       	sbiw	r24, 0x00	; 0
     f76:	a1 f3       	breq	.-24     	; 0xf60 <UART_Send_Char+0xc>
	UDR = data;
     f78:	ec e2       	ldi	r30, 0x2C	; 44
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	80 83       	st	Z, r24
}
     f80:	0f 90       	pop	r0
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <UART_Receive_Char>:


u8 UART_Receive_Char(void)
{
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receives data so wait until this flag
		is set to one and it will be cleared by hardware when u read data  */
	// The CPU is stucking here
	while(!GET_BIT(UCSRA,RXC));
     f90:	eb e2       	ldi	r30, 0x2B	; 43
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	88 23       	and	r24, r24
     f98:	dc f7       	brge	.-10     	; 0xf90 <UART_Receive_Char+0x8>
	return UDR;
     f9a:	ec e2       	ldi	r30, 0x2C	; 44
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
}
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	08 95       	ret

00000fa6 <UART_Send_String>:


void UART_Send_String(char* string)
{
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	00 d0       	rcall	.+0      	; 0xfac <UART_Send_String+0x6>
     fac:	0f 92       	push	r0
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
     fb2:	9b 83       	std	Y+3, r25	; 0x03
     fb4:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
     fb6:	19 82       	std	Y+1, r1	; 0x01
     fb8:	0e c0       	rjmp	.+28     	; 0xfd6 <UART_Send_String+0x30>
	while(string[i] != '\0'){
		UART_Send_Char(string[i]);
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	9b 81       	ldd	r25, Y+3	; 0x03
     fc4:	fc 01       	movw	r30, r24
     fc6:	e2 0f       	add	r30, r18
     fc8:	f3 1f       	adc	r31, r19
     fca:	80 81       	ld	r24, Z
     fcc:	0e 94 aa 07 	call	0xf54	; 0xf54 <UART_Send_Char>
		i++;
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	8f 5f       	subi	r24, 0xFF	; 255
     fd4:	89 83       	std	Y+1, r24	; 0x01


void UART_Send_String(char* string)
{
	u8 i=0;
	while(string[i] != '\0'){
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	9b 81       	ldd	r25, Y+3	; 0x03
     fe0:	fc 01       	movw	r30, r24
     fe2:	e2 0f       	add	r30, r18
     fe4:	f3 1f       	adc	r31, r19
     fe6:	80 81       	ld	r24, Z
     fe8:	88 23       	and	r24, r24
     fea:	39 f7       	brne	.-50     	; 0xfba <UART_Send_String+0x14>
		UART_Send_Char(string[i]);
		i++;
	}
	// Send (Enter) as a terminating char
	UART_Send_Char(DefaultStop);
     fec:	8d e0       	ldi	r24, 0x0D	; 13
     fee:	0e 94 aa 07 	call	0xf54	; 0xf54 <UART_Send_Char>
}
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <UART_Receive_String>:


void UART_Receive_String(char *Buffer)
{
     ffe:	0f 93       	push	r16
    1000:	1f 93       	push	r17
    1002:	df 93       	push	r29
    1004:	cf 93       	push	r28
    1006:	00 d0       	rcall	.+0      	; 0x1008 <UART_Receive_String+0xa>
    1008:	00 d0       	rcall	.+0      	; 0x100a <UART_Receive_String+0xc>
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
    100e:	9c 83       	std	Y+4, r25	; 0x04
    1010:	8b 83       	std	Y+3, r24	; 0x03
    int i = 0;
    1012:	1a 82       	std	Y+2, r1	; 0x02
    1014:	19 82       	std	Y+1, r1	; 0x01

    Buffer[i] = UART_Receive_Char();
    1016:	29 81       	ldd	r18, Y+1	; 0x01
    1018:	3a 81       	ldd	r19, Y+2	; 0x02
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	9c 81       	ldd	r25, Y+4	; 0x04
    101e:	8c 01       	movw	r16, r24
    1020:	02 0f       	add	r16, r18
    1022:	13 1f       	adc	r17, r19
    1024:	0e 94 c4 07 	call	0xf88	; 0xf88 <UART_Receive_Char>
    1028:	f8 01       	movw	r30, r16
    102a:	80 83       	st	Z, r24
    102c:	10 c0       	rjmp	.+32     	; 0x104e <UART_Receive_String+0x50>
    while (Buffer[i] != DefaultStop) {
        i++;
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	9a 81       	ldd	r25, Y+2	; 0x02
    1032:	01 96       	adiw	r24, 0x01	; 1
    1034:	9a 83       	std	Y+2, r25	; 0x02
    1036:	89 83       	std	Y+1, r24	; 0x01
        Buffer[i] = UART_Receive_Char();
    1038:	29 81       	ldd	r18, Y+1	; 0x01
    103a:	3a 81       	ldd	r19, Y+2	; 0x02
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	9c 81       	ldd	r25, Y+4	; 0x04
    1040:	8c 01       	movw	r16, r24
    1042:	02 0f       	add	r16, r18
    1044:	13 1f       	adc	r17, r19
    1046:	0e 94 c4 07 	call	0xf88	; 0xf88 <UART_Receive_Char>
    104a:	f8 01       	movw	r30, r16
    104c:	80 83       	st	Z, r24
void UART_Receive_String(char *Buffer)
{
    int i = 0;

    Buffer[i] = UART_Receive_Char();
    while (Buffer[i] != DefaultStop) {
    104e:	29 81       	ldd	r18, Y+1	; 0x01
    1050:	3a 81       	ldd	r19, Y+2	; 0x02
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	9c 81       	ldd	r25, Y+4	; 0x04
    1056:	fc 01       	movw	r30, r24
    1058:	e2 0f       	add	r30, r18
    105a:	f3 1f       	adc	r31, r19
    105c:	80 81       	ld	r24, Z
    105e:	8d 30       	cpi	r24, 0x0D	; 13
    1060:	31 f7       	brne	.-52     	; 0x102e <UART_Receive_String+0x30>
        i++;
        Buffer[i] = UART_Receive_Char();

    }

    Buffer[i] = '\0'; // Null-terminate the string
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	9a 81       	ldd	r25, Y+2	; 0x02
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	f9 01       	movw	r30, r18
    106c:	e8 0f       	add	r30, r24
    106e:	f9 1f       	adc	r31, r25
    1070:	10 82       	st	Z, r1
}
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	1f 91       	pop	r17
    1080:	0f 91       	pop	r16
    1082:	08 95       	ret

00001084 <UART_RX_InterruptEnable>:
// ==============================================


// Receive complete
void UART_RX_InterruptEnable(void)
{
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,RXCIE);
    108c:	aa e2       	ldi	r26, 0x2A	; 42
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	ea e2       	ldi	r30, 0x2A	; 42
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	80 68       	ori	r24, 0x80	; 128
    1098:	8c 93       	st	X, r24
}
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <UART_TX_InterruptEnable>:

// Transmission complete
void UART_TX_InterruptEnable(void)
{
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,TXCIE);
    10a8:	aa e2       	ldi	r26, 0x2A	; 42
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	ea e2       	ldi	r30, 0x2A	; 42
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	80 64       	ori	r24, 0x40	; 64
    10b4:	8c 93       	st	X, r24
}
    10b6:	cf 91       	pop	r28
    10b8:	df 91       	pop	r29
    10ba:	08 95       	ret

000010bc <UART_RX_InterruptDisable>:


// Receive complete
void UART_RX_InterruptDisable(void)
{
    10bc:	df 93       	push	r29
    10be:	cf 93       	push	r28
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,RXCIE);
    10c4:	aa e2       	ldi	r26, 0x2A	; 42
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	ea e2       	ldi	r30, 0x2A	; 42
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	8f 77       	andi	r24, 0x7F	; 127
    10d0:	8c 93       	st	X, r24
}
    10d2:	cf 91       	pop	r28
    10d4:	df 91       	pop	r29
    10d6:	08 95       	ret

000010d8 <UART_TX_InterruptDisable>:

// Transmission complete
void UART_TX_InterruptDisable(void)
{
    10d8:	df 93       	push	r29
    10da:	cf 93       	push	r28
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,TXCIE);
    10e0:	aa e2       	ldi	r26, 0x2A	; 42
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	ea e2       	ldi	r30, 0x2A	; 42
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	8f 7b       	andi	r24, 0xBF	; 191
    10ec:	8c 93       	st	X, r24
}
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <UART_RX_SetCallBack>:
// 		Call Back functions
// ==============================================


void UART_RX_SetCallBack(void (*LocalFptr)(void))
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	00 d0       	rcall	.+0      	; 0x10fa <UART_RX_SetCallBack+0x6>
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	9a 83       	std	Y+2, r25	; 0x02
    1100:	89 83       	std	Y+1, r24	; 0x01
	UART_RX_Fptr = LocalFptr;
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	9a 81       	ldd	r25, Y+2	; 0x02
    1106:	90 93 34 02 	sts	0x0234, r25
    110a:	80 93 33 02 	sts	0x0233, r24
}
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	08 95       	ret

00001118 <UART_TX_SetCallBack>:

void UART_TX_SetCallBack(void (*LocalFptr)(void))
{
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	00 d0       	rcall	.+0      	; 0x111e <UART_TX_SetCallBack+0x6>
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	9a 83       	std	Y+2, r25	; 0x02
    1124:	89 83       	std	Y+1, r24	; 0x01
	UART_TX_Fptr = LocalFptr;
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	9a 81       	ldd	r25, Y+2	; 0x02
    112a:	90 93 36 02 	sts	0x0236, r25
    112e:	80 93 35 02 	sts	0x0235, r24
}
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <__vector_15>:
// 		ISR
// ==============================================


ISR(USART_TXC_vect)
{
    113c:	1f 92       	push	r1
    113e:	0f 92       	push	r0
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	0f 92       	push	r0
    1144:	11 24       	eor	r1, r1
    1146:	2f 93       	push	r18
    1148:	3f 93       	push	r19
    114a:	4f 93       	push	r20
    114c:	5f 93       	push	r21
    114e:	6f 93       	push	r22
    1150:	7f 93       	push	r23
    1152:	8f 93       	push	r24
    1154:	9f 93       	push	r25
    1156:	af 93       	push	r26
    1158:	bf 93       	push	r27
    115a:	ef 93       	push	r30
    115c:	ff 93       	push	r31
    115e:	df 93       	push	r29
    1160:	cf 93       	push	r28
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
	if(UART_TX_Fptr!=NULLPTR)
    1166:	80 91 35 02 	lds	r24, 0x0235
    116a:	90 91 36 02 	lds	r25, 0x0236
    116e:	00 97       	sbiw	r24, 0x00	; 0
    1170:	29 f0       	breq	.+10     	; 0x117c <__vector_15+0x40>
	{
		UART_TX_Fptr();
    1172:	e0 91 35 02 	lds	r30, 0x0235
    1176:	f0 91 36 02 	lds	r31, 0x0236
    117a:	09 95       	icall
	}
}
    117c:	cf 91       	pop	r28
    117e:	df 91       	pop	r29
    1180:	ff 91       	pop	r31
    1182:	ef 91       	pop	r30
    1184:	bf 91       	pop	r27
    1186:	af 91       	pop	r26
    1188:	9f 91       	pop	r25
    118a:	8f 91       	pop	r24
    118c:	7f 91       	pop	r23
    118e:	6f 91       	pop	r22
    1190:	5f 91       	pop	r21
    1192:	4f 91       	pop	r20
    1194:	3f 91       	pop	r19
    1196:	2f 91       	pop	r18
    1198:	0f 90       	pop	r0
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	0f 90       	pop	r0
    119e:	1f 90       	pop	r1
    11a0:	18 95       	reti

000011a2 <__vector_13>:


ISR(USART_RXC_vect)
{
    11a2:	1f 92       	push	r1
    11a4:	0f 92       	push	r0
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	0f 92       	push	r0
    11aa:	11 24       	eor	r1, r1
    11ac:	2f 93       	push	r18
    11ae:	3f 93       	push	r19
    11b0:	4f 93       	push	r20
    11b2:	5f 93       	push	r21
    11b4:	6f 93       	push	r22
    11b6:	7f 93       	push	r23
    11b8:	8f 93       	push	r24
    11ba:	9f 93       	push	r25
    11bc:	af 93       	push	r26
    11be:	bf 93       	push	r27
    11c0:	ef 93       	push	r30
    11c2:	ff 93       	push	r31
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
	if(UART_RX_Fptr!=NULLPTR)
    11cc:	80 91 33 02 	lds	r24, 0x0233
    11d0:	90 91 34 02 	lds	r25, 0x0234
    11d4:	00 97       	sbiw	r24, 0x00	; 0
    11d6:	29 f0       	breq	.+10     	; 0x11e2 <__vector_13+0x40>
	{
		UART_RX_Fptr();
    11d8:	e0 91 33 02 	lds	r30, 0x0233
    11dc:	f0 91 34 02 	lds	r31, 0x0234
    11e0:	09 95       	icall
	}
}
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	ff 91       	pop	r31
    11e8:	ef 91       	pop	r30
    11ea:	bf 91       	pop	r27
    11ec:	af 91       	pop	r26
    11ee:	9f 91       	pop	r25
    11f0:	8f 91       	pop	r24
    11f2:	7f 91       	pop	r23
    11f4:	6f 91       	pop	r22
    11f6:	5f 91       	pop	r21
    11f8:	4f 91       	pop	r20
    11fa:	3f 91       	pop	r19
    11fc:	2f 91       	pop	r18
    11fe:	0f 90       	pop	r0
    1200:	0f be       	out	0x3f, r0	; 63
    1202:	0f 90       	pop	r0
    1204:	1f 90       	pop	r1
    1206:	18 95       	reti

00001208 <UART_Receive_NoBlock>:


u8 UART_Receive_NoBlock(u8 *pdata)
{
    1208:	df 93       	push	r29
    120a:	cf 93       	push	r28
    120c:	00 d0       	rcall	.+0      	; 0x120e <UART_Receive_NoBlock+0x6>
    120e:	0f 92       	push	r0
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	9b 83       	std	Y+3, r25	; 0x03
    1216:	8a 83       	std	Y+2, r24	; 0x02
	u8 status = 0;
    1218:	19 82       	std	Y+1, r1	; 0x01
	// Check if any data is received and store it in the passed buffer
	if(GET_BIT(UCSRA,RXC))
    121a:	eb e2       	ldi	r30, 0x2B	; 43
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	88 23       	and	r24, r24
    1222:	4c f4       	brge	.+18     	; 0x1236 <UART_Receive_NoBlock+0x2e>
	{
		*pdata = UDR;
    1224:	ec e2       	ldi	r30, 0x2C	; 44
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	ea 81       	ldd	r30, Y+2	; 0x02
    122c:	fb 81       	ldd	r31, Y+3	; 0x03
    122e:	80 83       	st	Z, r24
		status=1;
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	89 83       	std	Y+1, r24	; 0x01
    1234:	01 c0       	rjmp	.+2      	; 0x1238 <UART_Receive_NoBlock+0x30>
	}else{
		status = 0;
    1236:	19 82       	std	Y+1, r1	; 0x01
	}
	return status;
    1238:	89 81       	ldd	r24, Y+1	; 0x01
}
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <UART_SendString_ASYNCH>:
// 		Asynchronous functions
// ==============================================


void UART_SendString_ASYNCH(u8 *str)
{
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	00 d0       	rcall	.+0      	; 0x124c <UART_SendString_ASYNCH+0x6>
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	9a 83       	std	Y+2, r25	; 0x02
    1252:	89 83       	std	Y+1, r24	; 0x01
	Asynch_Send_Str = str;
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	9a 81       	ldd	r25, Y+2	; 0x02
    1258:	90 93 30 02 	sts	0x0230, r25
    125c:	80 93 2f 02 	sts	0x022F, r24
	UART_Send_Char(str[0]);
    1260:	e9 81       	ldd	r30, Y+1	; 0x01
    1262:	fa 81       	ldd	r31, Y+2	; 0x02
    1264:	80 81       	ld	r24, Z
    1266:	0e 94 aa 07 	call	0xf54	; 0xf54 <UART_Send_Char>

	UART_TX_SetCallBack(Func_TX);
    126a:	80 e4       	ldi	r24, 0x40	; 64
    126c:	99 e0       	ldi	r25, 0x09	; 9
    126e:	0e 94 8c 08 	call	0x1118	; 0x1118 <UART_TX_SetCallBack>
	UART_TX_InterruptEnable();
    1272:	0e 94 50 08 	call	0x10a0	; 0x10a0 <UART_TX_InterruptEnable>
}
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	08 95       	ret

00001280 <Func_TX>:


static void Func_TX(void)
{
    1280:	df 93       	push	r29
    1282:	cf 93       	push	r28
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
	static u8 i=1;
	if(Asynch_Send_Str[i] != '\0')
    1288:	20 91 2f 02 	lds	r18, 0x022F
    128c:	30 91 30 02 	lds	r19, 0x0230
    1290:	80 91 68 01 	lds	r24, 0x0168
    1294:	88 2f       	mov	r24, r24
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	f9 01       	movw	r30, r18
    129a:	e8 0f       	add	r30, r24
    129c:	f9 1f       	adc	r31, r25
    129e:	80 81       	ld	r24, Z
    12a0:	88 23       	and	r24, r24
    12a2:	a1 f0       	breq	.+40     	; 0x12cc <Func_TX+0x4c>
	{
		UART_SendByteNoBlock(Asynch_Send_Str[i]);
    12a4:	20 91 2f 02 	lds	r18, 0x022F
    12a8:	30 91 30 02 	lds	r19, 0x0230
    12ac:	80 91 68 01 	lds	r24, 0x0168
    12b0:	88 2f       	mov	r24, r24
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	f9 01       	movw	r30, r18
    12b6:	e8 0f       	add	r30, r24
    12b8:	f9 1f       	adc	r31, r25
    12ba:	80 81       	ld	r24, Z
    12bc:	0e 94 92 07 	call	0xf24	; 0xf24 <UART_SendByteNoBlock>
		i++;
    12c0:	80 91 68 01 	lds	r24, 0x0168
    12c4:	8f 5f       	subi	r24, 0xFF	; 255
    12c6:	80 93 68 01 	sts	0x0168, r24
    12ca:	05 c0       	rjmp	.+10     	; 0x12d6 <Func_TX+0x56>
	}else{
		i=1;
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	80 93 68 01 	sts	0x0168, r24
		UART_TX_InterruptDisable();
    12d2:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <UART_TX_InterruptDisable>
	}
}
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	08 95       	ret

000012dc <UART_ReceiveString_ASYNCH>:

// -----------------------------------------------

void UART_ReceiveString_ASYNCH(u8* str)
{
    12dc:	df 93       	push	r29
    12de:	cf 93       	push	r28
    12e0:	00 d0       	rcall	.+0      	; 0x12e2 <UART_ReceiveString_ASYNCH+0x6>
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    12e6:	9a 83       	std	Y+2, r25	; 0x02
    12e8:	89 83       	std	Y+1, r24	; 0x01
	Asynch_receive_str = str;
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	9a 81       	ldd	r25, Y+2	; 0x02
    12ee:	90 93 32 02 	sts	0x0232, r25
    12f2:	80 93 31 02 	sts	0x0231, r24
	UART_RX_InterruptEnable();
    12f6:	0e 94 42 08 	call	0x1084	; 0x1084 <UART_RX_InterruptEnable>
	UART_RX_SetCallBack(Receive_Int_Function);
    12fa:	86 e8       	ldi	r24, 0x86	; 134
    12fc:	99 e0       	ldi	r25, 0x09	; 9
    12fe:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <UART_RX_SetCallBack>
}
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <Receive_Int_Function>:



static void Receive_Int_Function(void)
{
    130c:	0f 93       	push	r16
    130e:	1f 93       	push	r17
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
	static u8 i=0;
	Asynch_receive_str[i] = UART_ReceiveByteNoBlock();
    1318:	20 91 31 02 	lds	r18, 0x0231
    131c:	30 91 32 02 	lds	r19, 0x0232
    1320:	80 91 2e 02 	lds	r24, 0x022E
    1324:	88 2f       	mov	r24, r24
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	89 01       	movw	r16, r18
    132a:	08 0f       	add	r16, r24
    132c:	19 1f       	adc	r17, r25
    132e:	0e 94 a0 07 	call	0xf40	; 0xf40 <UART_ReceiveByteNoBlock>
    1332:	f8 01       	movw	r30, r16
    1334:	80 83       	st	Z, r24
	i++;
    1336:	80 91 2e 02 	lds	r24, 0x022E
    133a:	8f 5f       	subi	r24, 0xFF	; 255
    133c:	80 93 2e 02 	sts	0x022E, r24
}
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	1f 91       	pop	r17
    1346:	0f 91       	pop	r16
    1348:	08 95       	ret

0000134a <TIMER0_Init>:
volatile u8 Global_Delay_Status=0;



ES_t TIMER0_Init(TIMER0_Config_t *TIME0_Cfg)
{
    134a:	df 93       	push	r29
    134c:	cf 93       	push	r28
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	2a 97       	sbiw	r28, 0x0a	; 10
    1354:	0f b6       	in	r0, 0x3f	; 63
    1356:	f8 94       	cli
    1358:	de bf       	out	0x3e, r29	; 62
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	cd bf       	out	0x3d, r28	; 61
    135e:	9b 83       	std	Y+3, r25	; 0x03
    1360:	8a 83       	std	Y+2, r24	; 0x02
	ES_t RetValue = ES_NOT_OK;
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	89 83       	std	Y+1, r24	; 0x01
	if(TIME0_Cfg == NULLPTR){
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	9b 81       	ldd	r25, Y+3	; 0x03
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	19 f4       	brne	.+6      	; 0x1374 <TIMER0_Init+0x2a>
		RetValue = ES_NOT_OK;
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	89 83       	std	Y+1, r24	; 0x01
    1372:	bb c0       	rjmp	.+374    	; 0x14ea <TIMER0_Init+0x1a0>
	}else
	{
		// Copy the configuration in a global structure in case of
		// usage inside othe functions
		Global_Timer0_Cfg = *TIME0_Cfg;
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	9b 81       	ldd	r25, Y+3	; 0x03
    1378:	23 e4       	ldi	r18, 0x43	; 67
    137a:	32 e0       	ldi	r19, 0x02	; 2
    137c:	3f 83       	std	Y+7, r19	; 0x07
    137e:	2e 83       	std	Y+6, r18	; 0x06
    1380:	99 87       	std	Y+9, r25	; 0x09
    1382:	88 87       	std	Y+8, r24	; 0x08
    1384:	35 e0       	ldi	r19, 0x05	; 5
    1386:	3a 87       	std	Y+10, r19	; 0x0a
    1388:	e8 85       	ldd	r30, Y+8	; 0x08
    138a:	f9 85       	ldd	r31, Y+9	; 0x09
    138c:	00 80       	ld	r0, Z
    138e:	28 85       	ldd	r18, Y+8	; 0x08
    1390:	39 85       	ldd	r19, Y+9	; 0x09
    1392:	2f 5f       	subi	r18, 0xFF	; 255
    1394:	3f 4f       	sbci	r19, 0xFF	; 255
    1396:	39 87       	std	Y+9, r19	; 0x09
    1398:	28 87       	std	Y+8, r18	; 0x08
    139a:	ee 81       	ldd	r30, Y+6	; 0x06
    139c:	ff 81       	ldd	r31, Y+7	; 0x07
    139e:	00 82       	st	Z, r0
    13a0:	2e 81       	ldd	r18, Y+6	; 0x06
    13a2:	3f 81       	ldd	r19, Y+7	; 0x07
    13a4:	2f 5f       	subi	r18, 0xFF	; 255
    13a6:	3f 4f       	sbci	r19, 0xFF	; 255
    13a8:	3f 83       	std	Y+7, r19	; 0x07
    13aa:	2e 83       	std	Y+6, r18	; 0x06
    13ac:	3a 85       	ldd	r19, Y+10	; 0x0a
    13ae:	31 50       	subi	r19, 0x01	; 1
    13b0:	3a 87       	std	Y+10, r19	; 0x0a
    13b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    13b4:	88 23       	and	r24, r24
    13b6:	41 f7       	brne	.-48     	; 0x1388 <TIMER0_Init+0x3e>


		// Timer0 mode Configurations
		if((TIME0_Cfg->mode >= TIMER0_NORMAL_MODE) && (TIME0_Cfg->mode <= TIMER0_FAST_PWM_MODE))
    13b8:	ea 81       	ldd	r30, Y+2	; 0x02
    13ba:	fb 81       	ldd	r31, Y+3	; 0x03
    13bc:	80 81       	ld	r24, Z
    13be:	84 30       	cpi	r24, 0x04	; 4
    13c0:	08 f0       	brcs	.+2      	; 0x13c4 <TIMER0_Init+0x7a>
    13c2:	5e c0       	rjmp	.+188    	; 0x1480 <TIMER0_Init+0x136>
		{
			RetValue = ES_OK;
    13c4:	19 82       	std	Y+1, r1	; 0x01
			switch(TIME0_Cfg->mode)
    13c6:	ea 81       	ldd	r30, Y+2	; 0x02
    13c8:	fb 81       	ldd	r31, Y+3	; 0x03
    13ca:	80 81       	ld	r24, Z
    13cc:	e8 2f       	mov	r30, r24
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	fd 83       	std	Y+5, r31	; 0x05
    13d2:	ec 83       	std	Y+4, r30	; 0x04
    13d4:	2c 81       	ldd	r18, Y+4	; 0x04
    13d6:	3d 81       	ldd	r19, Y+5	; 0x05
    13d8:	21 30       	cpi	r18, 0x01	; 1
    13da:	31 05       	cpc	r19, r1
    13dc:	21 f1       	breq	.+72     	; 0x1426 <TIMER0_Init+0xdc>
    13de:	8c 81       	ldd	r24, Y+4	; 0x04
    13e0:	9d 81       	ldd	r25, Y+5	; 0x05
    13e2:	82 30       	cpi	r24, 0x02	; 2
    13e4:	91 05       	cpc	r25, r1
    13e6:	2c f4       	brge	.+10     	; 0x13f2 <TIMER0_Init+0xa8>
    13e8:	ec 81       	ldd	r30, Y+4	; 0x04
    13ea:	fd 81       	ldd	r31, Y+5	; 0x05
    13ec:	30 97       	sbiw	r30, 0x00	; 0
    13ee:	61 f0       	breq	.+24     	; 0x1408 <TIMER0_Init+0xbe>
    13f0:	49 c0       	rjmp	.+146    	; 0x1484 <TIMER0_Init+0x13a>
    13f2:	2c 81       	ldd	r18, Y+4	; 0x04
    13f4:	3d 81       	ldd	r19, Y+5	; 0x05
    13f6:	22 30       	cpi	r18, 0x02	; 2
    13f8:	31 05       	cpc	r19, r1
    13fa:	21 f1       	breq	.+72     	; 0x1444 <TIMER0_Init+0xfa>
    13fc:	8c 81       	ldd	r24, Y+4	; 0x04
    13fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1400:	83 30       	cpi	r24, 0x03	; 3
    1402:	91 05       	cpc	r25, r1
    1404:	71 f1       	breq	.+92     	; 0x1462 <TIMER0_Init+0x118>
    1406:	3e c0       	rjmp	.+124    	; 0x1484 <TIMER0_Init+0x13a>
			{
			case TIMER0_NORMAL_MODE:
				CLR_BIT(TCCR0,WGM00);
    1408:	a3 e5       	ldi	r26, 0x53	; 83
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e3 e5       	ldi	r30, 0x53	; 83
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	8f 7b       	andi	r24, 0xBF	; 191
    1414:	8c 93       	st	X, r24
				CLR_BIT(TCCR0,WGM01);
    1416:	a3 e5       	ldi	r26, 0x53	; 83
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e3 e5       	ldi	r30, 0x53	; 83
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	87 7f       	andi	r24, 0xF7	; 247
    1422:	8c 93       	st	X, r24
    1424:	2f c0       	rjmp	.+94     	; 0x1484 <TIMER0_Init+0x13a>
				break;
			case TIMER0_PHASE_CORRECT_MODE:
				SET_BIT(TCCR0,WGM00);
    1426:	a3 e5       	ldi	r26, 0x53	; 83
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	e3 e5       	ldi	r30, 0x53	; 83
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	80 64       	ori	r24, 0x40	; 64
    1432:	8c 93       	st	X, r24
				CLR_BIT(TCCR0,WGM01);
    1434:	a3 e5       	ldi	r26, 0x53	; 83
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e3 e5       	ldi	r30, 0x53	; 83
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	87 7f       	andi	r24, 0xF7	; 247
    1440:	8c 93       	st	X, r24
    1442:	20 c0       	rjmp	.+64     	; 0x1484 <TIMER0_Init+0x13a>
				break;
			case TIMER0_CTC_MODE:
				CLR_BIT(TCCR0,WGM00);
    1444:	a3 e5       	ldi	r26, 0x53	; 83
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e3 e5       	ldi	r30, 0x53	; 83
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	8f 7b       	andi	r24, 0xBF	; 191
    1450:	8c 93       	st	X, r24
				SET_BIT(TCCR0,WGM01);
    1452:	a3 e5       	ldi	r26, 0x53	; 83
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e3 e5       	ldi	r30, 0x53	; 83
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	88 60       	ori	r24, 0x08	; 8
    145e:	8c 93       	st	X, r24
    1460:	11 c0       	rjmp	.+34     	; 0x1484 <TIMER0_Init+0x13a>
				break;
			case TIMER0_FAST_PWM_MODE:
				SET_BIT(TCCR0,WGM00);
    1462:	a3 e5       	ldi	r26, 0x53	; 83
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	e3 e5       	ldi	r30, 0x53	; 83
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	80 64       	ori	r24, 0x40	; 64
    146e:	8c 93       	st	X, r24
				SET_BIT(TCCR0,WGM01);
    1470:	a3 e5       	ldi	r26, 0x53	; 83
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	e3 e5       	ldi	r30, 0x53	; 83
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	88 60       	ori	r24, 0x08	; 8
    147c:	8c 93       	st	X, r24
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <TIMER0_Init+0x13a>
				break;
			}
		}else{
			RetValue = ES_NOT_OK;
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	89 83       	std	Y+1, r24	; 0x01
		}

		// Timer_0 Prescalar Configuration
		if((TIME0_Cfg->prescalar >= TIMER0_STOP) && (TIME0_Cfg->prescalar <= EXTERNAL_RISING))
    1484:	ea 81       	ldd	r30, Y+2	; 0x02
    1486:	fb 81       	ldd	r31, Y+3	; 0x03
    1488:	81 81       	ldd	r24, Z+1	; 0x01
    148a:	88 30       	cpi	r24, 0x08	; 8
    148c:	58 f4       	brcc	.+22     	; 0x14a4 <TIMER0_Init+0x15a>
		{
			TCCR0 |= TIME0_Cfg->prescalar;
    148e:	a3 e5       	ldi	r26, 0x53	; 83
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e3 e5       	ldi	r30, 0x53	; 83
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	90 81       	ld	r25, Z
    1498:	ea 81       	ldd	r30, Y+2	; 0x02
    149a:	fb 81       	ldd	r31, Y+3	; 0x03
    149c:	81 81       	ldd	r24, Z+1	; 0x01
    149e:	89 2b       	or	r24, r25
    14a0:	8c 93       	st	X, r24
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <TIMER0_Init+0x15e>
		}else{
			RetValue = ES_NOT_OK;
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	89 83       	std	Y+1, r24	; 0x01
		}


		// Timer_0 OC0 Pin
		TCCR0 |= (TIME0_Cfg->oc0_mode << COM00);
    14a8:	a3 e5       	ldi	r26, 0x53	; 83
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e3 e5       	ldi	r30, 0x53	; 83
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	28 2f       	mov	r18, r24
    14b4:	ea 81       	ldd	r30, Y+2	; 0x02
    14b6:	fb 81       	ldd	r31, Y+3	; 0x03
    14b8:	82 81       	ldd	r24, Z+2	; 0x02
    14ba:	88 2f       	mov	r24, r24
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	82 95       	swap	r24
    14c0:	92 95       	swap	r25
    14c2:	90 7f       	andi	r25, 0xF0	; 240
    14c4:	98 27       	eor	r25, r24
    14c6:	80 7f       	andi	r24, 0xF0	; 240
    14c8:	98 27       	eor	r25, r24
    14ca:	82 2b       	or	r24, r18
    14cc:	8c 93       	st	X, r24


		// Timer_0 Interrupts
		TIMSK |= (TIME0_Cfg->OVF_Interrupt) | (TIME0_Cfg->OCM_Interrupt);
    14ce:	a9 e5       	ldi	r26, 0x59	; 89
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e9 e5       	ldi	r30, 0x59	; 89
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	20 81       	ld	r18, Z
    14d8:	ea 81       	ldd	r30, Y+2	; 0x02
    14da:	fb 81       	ldd	r31, Y+3	; 0x03
    14dc:	93 81       	ldd	r25, Z+3	; 0x03
    14de:	ea 81       	ldd	r30, Y+2	; 0x02
    14e0:	fb 81       	ldd	r31, Y+3	; 0x03
    14e2:	84 81       	ldd	r24, Z+4	; 0x04
    14e4:	89 2b       	or	r24, r25
    14e6:	82 2b       	or	r24, r18
    14e8:	8c 93       	st	X, r24



	}

	return RetValue;
    14ea:	89 81       	ldd	r24, Y+1	; 0x01

}
    14ec:	2a 96       	adiw	r28, 0x0a	; 10
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	de bf       	out	0x3e, r29	; 62
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	cd bf       	out	0x3d, r28	; 61
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <TIMER0_Stop>:
ES_t TIMER0_Stop(void)
{
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
	// No clock source
	CLR_BIT(TCCR0,CS00);
    1506:	a3 e5       	ldi	r26, 0x53	; 83
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	e3 e5       	ldi	r30, 0x53	; 83
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	8e 7f       	andi	r24, 0xFE	; 254
    1512:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS01);
    1514:	a3 e5       	ldi	r26, 0x53	; 83
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e3 e5       	ldi	r30, 0x53	; 83
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	8d 7f       	andi	r24, 0xFD	; 253
    1520:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS02);
    1522:	a3 e5       	ldi	r26, 0x53	; 83
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e3 e5       	ldi	r30, 0x53	; 83
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	8b 7f       	andi	r24, 0xFB	; 251
    152e:	8c 93       	st	X, r24
	return ES_OK;
    1530:	80 e0       	ldi	r24, 0x00	; 0
}
    1532:	cf 91       	pop	r28
    1534:	df 91       	pop	r29
    1536:	08 95       	ret

00001538 <TIMER0_GetCompareValue>:

ES_t TIMER0_GetCompareValue(u8 *CM_Value)
{
    1538:	df 93       	push	r29
    153a:	cf 93       	push	r28
    153c:	00 d0       	rcall	.+0      	; 0x153e <TIMER0_GetCompareValue+0x6>
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
    1542:	9a 83       	std	Y+2, r25	; 0x02
    1544:	89 83       	std	Y+1, r24	; 0x01
	*CM_Value = OCR0;
    1546:	ec e5       	ldi	r30, 0x5C	; 92
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	e9 81       	ldd	r30, Y+1	; 0x01
    154e:	fa 81       	ldd	r31, Y+2	; 0x02
    1550:	80 83       	st	Z, r24

	return ES_OK;
    1552:	80 e0       	ldi	r24, 0x00	; 0

}
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <TIMER0_SetCompareValue>:
ES_t TIMER0_SetCompareValue(u8 CM_Value)
{
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	0f 92       	push	r0
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
    1568:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = CM_Value;
    156a:	ec e5       	ldi	r30, 0x5C	; 92
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	80 83       	st	Z, r24

	return ES_OK;
    1572:	80 e0       	ldi	r24, 0x00	; 0

}
    1574:	0f 90       	pop	r0
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	08 95       	ret

0000157c <TIMER0_GetCounterValue>:

ES_t TIMER0_GetCounterValue(u8 *TCNT_Value)
{
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	00 d0       	rcall	.+0      	; 0x1582 <TIMER0_GetCounterValue+0x6>
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	9a 83       	std	Y+2, r25	; 0x02
    1588:	89 83       	std	Y+1, r24	; 0x01

	*TCNT_Value = TCNT0;
    158a:	e2 e5       	ldi	r30, 0x52	; 82
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	e9 81       	ldd	r30, Y+1	; 0x01
    1592:	fa 81       	ldd	r31, Y+2	; 0x02
    1594:	80 83       	st	Z, r24


	return ES_OK;
    1596:	80 e0       	ldi	r24, 0x00	; 0
}
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <TIMER0_SetCounterValue>:


ES_t TIMER0_SetCounterValue(u8 TCNT_Value)
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	0f 92       	push	r0
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
    15ac:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = TCNT_Value;
    15ae:	e2 e5       	ldi	r30, 0x52	; 82
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	80 83       	st	Z, r24

	return ES_OK;
    15b6:	80 e0       	ldi	r24, 0x00	; 0

}
    15b8:	0f 90       	pop	r0
    15ba:	cf 91       	pop	r28
    15bc:	df 91       	pop	r29
    15be:	08 95       	ret

000015c0 <TIMER0_GetOVF_Flag>:

// In case of larger than 255
ES_t TIMER0_GetOVF_Flag(u8 *OVF_Value)
{
    15c0:	df 93       	push	r29
    15c2:	cf 93       	push	r28
    15c4:	00 d0       	rcall	.+0      	; 0x15c6 <TIMER0_GetOVF_Flag+0x6>
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	9a 83       	std	Y+2, r25	; 0x02
    15cc:	89 83       	std	Y+1, r24	; 0x01

	*OVF_Value = OVF_Number;
    15ce:	80 91 3b 02 	lds	r24, 0x023B
    15d2:	e9 81       	ldd	r30, Y+1	; 0x01
    15d4:	fa 81       	ldd	r31, Y+2	; 0x02
    15d6:	80 83       	st	Z, r24
	return ES_OK;
    15d8:	80 e0       	ldi	r24, 0x00	; 0

}
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	cf 91       	pop	r28
    15e0:	df 91       	pop	r29
    15e2:	08 95       	ret

000015e4 <PWM_Set_DutyCycle>:



ES_t PWM_Set_DutyCycle(float dutyCycle)
{
    15e4:	0f 93       	push	r16
    15e6:	1f 93       	push	r17
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	00 d0       	rcall	.+0      	; 0x15ee <PWM_Set_DutyCycle+0xa>
    15ee:	00 d0       	rcall	.+0      	; 0x15f0 <PWM_Set_DutyCycle+0xc>
    15f0:	0f 92       	push	r0
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	6a 83       	std	Y+2, r22	; 0x02
    15f8:	7b 83       	std	Y+3, r23	; 0x03
    15fa:	8c 83       	std	Y+4, r24	; 0x04
    15fc:	9d 83       	std	Y+5, r25	; 0x05
	ES_t RetValue;

	if((Global_Timer0_Cfg.mode == TIMER0_FAST_PWM_MODE) || (Global_Timer0_Cfg.mode == TIMER0_PHASE_CORRECT_MODE))
    15fe:	80 91 43 02 	lds	r24, 0x0243
    1602:	83 30       	cpi	r24, 0x03	; 3
    1604:	29 f0       	breq	.+10     	; 0x1610 <PWM_Set_DutyCycle+0x2c>
    1606:	80 91 43 02 	lds	r24, 0x0243
    160a:	81 30       	cpi	r24, 0x01	; 1
    160c:	09 f0       	breq	.+2      	; 0x1610 <PWM_Set_DutyCycle+0x2c>
    160e:	57 c0       	rjmp	.+174    	; 0x16be <PWM_Set_DutyCycle+0xda>
	{
		if(Global_Timer0_Cfg.oc0_mode == OC0_NON_INVERTING)
    1610:	80 91 45 02 	lds	r24, 0x0245
    1614:	82 30       	cpi	r24, 0x02	; 2
    1616:	11 f5       	brne	.+68     	; 0x165c <PWM_Set_DutyCycle+0x78>
		{
			OCR0 = (u8)((dutyCycle/100.0)*256) - 1;
    1618:	0c e5       	ldi	r16, 0x5C	; 92
    161a:	10 e0       	ldi	r17, 0x00	; 0
    161c:	6a 81       	ldd	r22, Y+2	; 0x02
    161e:	7b 81       	ldd	r23, Y+3	; 0x03
    1620:	8c 81       	ldd	r24, Y+4	; 0x04
    1622:	9d 81       	ldd	r25, Y+5	; 0x05
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	48 ec       	ldi	r20, 0xC8	; 200
    162a:	52 e4       	ldi	r21, 0x42	; 66
    162c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1630:	dc 01       	movw	r26, r24
    1632:	cb 01       	movw	r24, r22
    1634:	bc 01       	movw	r22, r24
    1636:	cd 01       	movw	r24, r26
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	40 e8       	ldi	r20, 0x80	; 128
    163e:	53 e4       	ldi	r21, 0x43	; 67
    1640:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	bc 01       	movw	r22, r24
    164a:	cd 01       	movw	r24, r26
    164c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	81 50       	subi	r24, 0x01	; 1
    1656:	f8 01       	movw	r30, r16
    1658:	80 83       	st	Z, r24
    165a:	2f c0       	rjmp	.+94     	; 0x16ba <PWM_Set_DutyCycle+0xd6>

		}else if(Global_Timer0_Cfg.oc0_mode == OC0_INVERTING)
    165c:	80 91 45 02 	lds	r24, 0x0245
    1660:	83 30       	cpi	r24, 0x03	; 3
    1662:	59 f5       	brne	.+86     	; 0x16ba <PWM_Set_DutyCycle+0xd6>
		{
			OCR0 = (u8)(256-((256*dutyCycle)/100.0)) - 1;
    1664:	0c e5       	ldi	r16, 0x5C	; 92
    1666:	10 e0       	ldi	r17, 0x00	; 0
    1668:	6a 81       	ldd	r22, Y+2	; 0x02
    166a:	7b 81       	ldd	r23, Y+3	; 0x03
    166c:	8c 81       	ldd	r24, Y+4	; 0x04
    166e:	9d 81       	ldd	r25, Y+5	; 0x05
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	40 e8       	ldi	r20, 0x80	; 128
    1676:	53 e4       	ldi	r21, 0x43	; 67
    1678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	bc 01       	movw	r22, r24
    1682:	cd 01       	movw	r24, r26
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	48 ec       	ldi	r20, 0xC8	; 200
    168a:	52 ec       	ldi	r21, 0xC2	; 194
    168c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	bc 01       	movw	r22, r24
    1696:	cd 01       	movw	r24, r26
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	40 e8       	ldi	r20, 0x80	; 128
    169e:	53 e4       	ldi	r21, 0x43	; 67
    16a0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	bc 01       	movw	r22, r24
    16aa:	cd 01       	movw	r24, r26
    16ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	81 50       	subi	r24, 0x01	; 1
    16b6:	f8 01       	movw	r30, r16
    16b8:	80 83       	st	Z, r24
		}
		RetValue = ES_OK;
    16ba:	19 82       	std	Y+1, r1	; 0x01
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <PWM_Set_DutyCycle+0xde>
	}else{
		RetValue = ES_NOT_OK;
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	89 83       	std	Y+1, r24	; 0x01
	}
	return RetValue;
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    16c4:	0f 90       	pop	r0
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	cf 91       	pop	r28
    16d0:	df 91       	pop	r29
    16d2:	1f 91       	pop	r17
    16d4:	0f 91       	pop	r16
    16d6:	08 95       	ret

000016d8 <Timer0_Set_Delay_ms>:



void Timer0_Set_Delay_ms(u32 delay_ms)
{
    16d8:	ef 92       	push	r14
    16da:	ff 92       	push	r15
    16dc:	0f 93       	push	r16
    16de:	1f 93       	push	r17
    16e0:	df 93       	push	r29
    16e2:	cf 93       	push	r28
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    16e8:	29 97       	sbiw	r28, 0x09	; 9
    16ea:	0f b6       	in	r0, 0x3f	; 63
    16ec:	f8 94       	cli
    16ee:	de bf       	out	0x3e, r29	; 62
    16f0:	0f be       	out	0x3f, r0	; 63
    16f2:	cd bf       	out	0x3d, r28	; 61
    16f4:	6e 83       	std	Y+6, r22	; 0x06
    16f6:	7f 83       	std	Y+7, r23	; 0x07
    16f8:	88 87       	std	Y+8, r24	; 0x08
    16fa:	99 87       	std	Y+9, r25	; 0x09
	u32 CountsNum = (delay_ms * F_CPU) / (1000UL * Global_Timer0_Cfg.prescalar);
    16fc:	8e 81       	ldd	r24, Y+6	; 0x06
    16fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1700:	a8 85       	ldd	r26, Y+8	; 0x08
    1702:	b9 85       	ldd	r27, Y+9	; 0x09
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	34 e2       	ldi	r19, 0x24	; 36
    1708:	44 ef       	ldi	r20, 0xF4	; 244
    170a:	50 e0       	ldi	r21, 0x00	; 0
    170c:	bc 01       	movw	r22, r24
    170e:	cd 01       	movw	r24, r26
    1710:	0e 94 d9 22 	call	0x45b2	; 0x45b2 <__mulsi3>
    1714:	7b 01       	movw	r14, r22
    1716:	8c 01       	movw	r16, r24
    1718:	80 91 44 02 	lds	r24, 0x0244
    171c:	88 2f       	mov	r24, r24
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	a0 e0       	ldi	r26, 0x00	; 0
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	28 ee       	ldi	r18, 0xE8	; 232
    1726:	33 e0       	ldi	r19, 0x03	; 3
    1728:	40 e0       	ldi	r20, 0x00	; 0
    172a:	50 e0       	ldi	r21, 0x00	; 0
    172c:	bc 01       	movw	r22, r24
    172e:	cd 01       	movw	r24, r26
    1730:	0e 94 d9 22 	call	0x45b2	; 0x45b2 <__mulsi3>
    1734:	9b 01       	movw	r18, r22
    1736:	ac 01       	movw	r20, r24
    1738:	c8 01       	movw	r24, r16
    173a:	b7 01       	movw	r22, r14
    173c:	0e 94 1f 23 	call	0x463e	; 0x463e <__udivmodsi4>
    1740:	da 01       	movw	r26, r20
    1742:	c9 01       	movw	r24, r18
    1744:	8a 83       	std	Y+2, r24	; 0x02
    1746:	9b 83       	std	Y+3, r25	; 0x03
    1748:	ac 83       	std	Y+4, r26	; 0x04
    174a:	bd 83       	std	Y+5, r27	; 0x05
	OVF_Num_Delay = CountsNum / 256;
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	9b 81       	ldd	r25, Y+3	; 0x03
    1750:	ac 81       	ldd	r26, Y+4	; 0x04
    1752:	bd 81       	ldd	r27, Y+5	; 0x05
    1754:	89 2f       	mov	r24, r25
    1756:	9a 2f       	mov	r25, r26
    1758:	ab 2f       	mov	r26, r27
    175a:	bb 27       	eor	r27, r27
    175c:	90 93 49 02 	sts	0x0249, r25
    1760:	80 93 48 02 	sts	0x0248, r24
	u8 RestCounts = CountsNum % 256;
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	89 83       	std	Y+1, r24	; 0x01

	TIMER0_SetCounterValue(256 - RestCounts);
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	81 95       	neg	r24
    176c:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <TIMER0_SetCounterValue>

	Global_Delay_Status = 0; // Reset the delay status
    1770:	10 92 3c 02 	sts	0x023C, r1
	while (!Global_Delay_Status);
    1774:	80 91 3c 02 	lds	r24, 0x023C
    1778:	88 23       	and	r24, r24
    177a:	e1 f3       	breq	.-8      	; 0x1774 <Timer0_Set_Delay_ms+0x9c>
}
    177c:	29 96       	adiw	r28, 0x09	; 9
    177e:	0f b6       	in	r0, 0x3f	; 63
    1780:	f8 94       	cli
    1782:	de bf       	out	0x3e, r29	; 62
    1784:	0f be       	out	0x3f, r0	; 63
    1786:	cd bf       	out	0x3d, r28	; 61
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	1f 91       	pop	r17
    178e:	0f 91       	pop	r16
    1790:	ff 90       	pop	r15
    1792:	ef 90       	pop	r14
    1794:	08 95       	ret

00001796 <Timer0_OVF_SetCallBack>:


void Timer0_OVF_SetCallBack(void (*Local_ptr_toFunc))
{
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	00 d0       	rcall	.+0      	; 0x179c <Timer0_OVF_SetCallBack+0x6>
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
    17a0:	9a 83       	std	Y+2, r25	; 0x02
    17a2:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OVF_Fptr = Local_ptr_toFunc;
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	9a 81       	ldd	r25, Y+2	; 0x02
    17a8:	90 93 38 02 	sts	0x0238, r25
    17ac:	80 93 37 02 	sts	0x0237, r24


}
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	08 95       	ret

000017ba <Timer0_OCM_SetCallBack>:
void Timer0_OCM_SetCallBack(void (*Local_ptr_toFunc))
{
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	00 d0       	rcall	.+0      	; 0x17c0 <Timer0_OCM_SetCallBack+0x6>
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
    17c4:	9a 83       	std	Y+2, r25	; 0x02
    17c6:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OCM_Fptr = Local_ptr_toFunc;
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	9a 81       	ldd	r25, Y+2	; 0x02
    17cc:	90 93 3a 02 	sts	0x023A, r25
    17d0:	80 93 39 02 	sts	0x0239, r24
}
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	08 95       	ret

000017de <TIMER1_Init>:

// ===========================================================


ES_t TIMER1_Init(TIMER1_Config_t *TIME1_Cfg)
{
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
    17e6:	2a 97       	sbiw	r28, 0x0a	; 10
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	f8 94       	cli
    17ec:	de bf       	out	0x3e, r29	; 62
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	cd bf       	out	0x3d, r28	; 61
    17f2:	9b 83       	std	Y+3, r25	; 0x03
    17f4:	8a 83       	std	Y+2, r24	; 0x02
	ES_t RetValue = ES_NOT_OK;
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	89 83       	std	Y+1, r24	; 0x01
	if(TIME1_Cfg == NULLPTR){
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	9b 81       	ldd	r25, Y+3	; 0x03
    17fe:	00 97       	sbiw	r24, 0x00	; 0
    1800:	19 f4       	brne	.+6      	; 0x1808 <TIMER1_Init+0x2a>
		RetValue = ES_NOT_OK;
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	89 83       	std	Y+1, r24	; 0x01
    1806:	ea c0       	rjmp	.+468    	; 0x19dc <TIMER1_Init+0x1fe>
	}else
	{
		// Copy the configuration in a global structure in case of
		// usage inside othe functions
		Global_Timer1_Cfg = *TIME1_Cfg;
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	9b 81       	ldd	r25, Y+3	; 0x03
    180c:	2a e4       	ldi	r18, 0x4A	; 74
    180e:	32 e0       	ldi	r19, 0x02	; 2
    1810:	3f 83       	std	Y+7, r19	; 0x07
    1812:	2e 83       	std	Y+6, r18	; 0x06
    1814:	99 87       	std	Y+9, r25	; 0x09
    1816:	88 87       	std	Y+8, r24	; 0x08
    1818:	38 e0       	ldi	r19, 0x08	; 8
    181a:	3a 87       	std	Y+10, r19	; 0x0a
    181c:	e8 85       	ldd	r30, Y+8	; 0x08
    181e:	f9 85       	ldd	r31, Y+9	; 0x09
    1820:	00 80       	ld	r0, Z
    1822:	28 85       	ldd	r18, Y+8	; 0x08
    1824:	39 85       	ldd	r19, Y+9	; 0x09
    1826:	2f 5f       	subi	r18, 0xFF	; 255
    1828:	3f 4f       	sbci	r19, 0xFF	; 255
    182a:	39 87       	std	Y+9, r19	; 0x09
    182c:	28 87       	std	Y+8, r18	; 0x08
    182e:	ee 81       	ldd	r30, Y+6	; 0x06
    1830:	ff 81       	ldd	r31, Y+7	; 0x07
    1832:	00 82       	st	Z, r0
    1834:	2e 81       	ldd	r18, Y+6	; 0x06
    1836:	3f 81       	ldd	r19, Y+7	; 0x07
    1838:	2f 5f       	subi	r18, 0xFF	; 255
    183a:	3f 4f       	sbci	r19, 0xFF	; 255
    183c:	3f 83       	std	Y+7, r19	; 0x07
    183e:	2e 83       	std	Y+6, r18	; 0x06
    1840:	3a 85       	ldd	r19, Y+10	; 0x0a
    1842:	31 50       	subi	r19, 0x01	; 1
    1844:	3a 87       	std	Y+10, r19	; 0x0a
    1846:	8a 85       	ldd	r24, Y+10	; 0x0a
    1848:	88 23       	and	r24, r24
    184a:	41 f7       	brne	.-48     	; 0x181c <TIMER1_Init+0x3e>


		// Timer0 mode Configurations
		if((TIME1_Cfg->mode >= TIMER1_NORMAL_MODE) && (TIME1_Cfg->mode <= TIMER1_FAST_PWM_OCR1A_TOP))
    184c:	ea 81       	ldd	r30, Y+2	; 0x02
    184e:	fb 81       	ldd	r31, Y+3	; 0x03
    1850:	80 81       	ld	r24, Z
    1852:	83 30       	cpi	r24, 0x03	; 3
    1854:	08 f0       	brcs	.+2      	; 0x1858 <TIMER1_Init+0x7a>
    1856:	6f c0       	rjmp	.+222    	; 0x1936 <TIMER1_Init+0x158>
		{
			RetValue = ES_OK;
    1858:	19 82       	std	Y+1, r1	; 0x01
			switch(TIME1_Cfg->mode)
    185a:	ea 81       	ldd	r30, Y+2	; 0x02
    185c:	fb 81       	ldd	r31, Y+3	; 0x03
    185e:	80 81       	ld	r24, Z
    1860:	e8 2f       	mov	r30, r24
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	fd 83       	std	Y+5, r31	; 0x05
    1866:	ec 83       	std	Y+4, r30	; 0x04
    1868:	2c 81       	ldd	r18, Y+4	; 0x04
    186a:	3d 81       	ldd	r19, Y+5	; 0x05
    186c:	21 30       	cpi	r18, 0x01	; 1
    186e:	31 05       	cpc	r19, r1
    1870:	41 f1       	breq	.+80     	; 0x18c2 <TIMER1_Init+0xe4>
    1872:	8c 81       	ldd	r24, Y+4	; 0x04
    1874:	9d 81       	ldd	r25, Y+5	; 0x05
    1876:	82 30       	cpi	r24, 0x02	; 2
    1878:	91 05       	cpc	r25, r1
    187a:	09 f4       	brne	.+2      	; 0x187e <TIMER1_Init+0xa0>
    187c:	3f c0       	rjmp	.+126    	; 0x18fc <TIMER1_Init+0x11e>
    187e:	ec 81       	ldd	r30, Y+4	; 0x04
    1880:	fd 81       	ldd	r31, Y+5	; 0x05
    1882:	30 97       	sbiw	r30, 0x00	; 0
    1884:	09 f0       	breq	.+2      	; 0x1888 <TIMER1_Init+0xaa>
    1886:	59 c0       	rjmp	.+178    	; 0x193a <TIMER1_Init+0x15c>
			{
			case TIMER1_NORMAL_MODE:
				CLR_BIT(TCCR1A,WGM10);
    1888:	af e4       	ldi	r26, 0x4F	; 79
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	ef e4       	ldi	r30, 0x4F	; 79
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	8e 7f       	andi	r24, 0xFE	; 254
    1894:	8c 93       	st	X, r24
				CLR_BIT(TCCR1A,WGM11);
    1896:	af e4       	ldi	r26, 0x4F	; 79
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	ef e4       	ldi	r30, 0x4F	; 79
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	8d 7f       	andi	r24, 0xFD	; 253
    18a2:	8c 93       	st	X, r24
				CLR_BIT(TCCR1B,WGM12);
    18a4:	ae e4       	ldi	r26, 0x4E	; 78
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	ee e4       	ldi	r30, 0x4E	; 78
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	87 7f       	andi	r24, 0xF7	; 247
    18b0:	8c 93       	st	X, r24
				CLR_BIT(TCCR1B,WGM13);
    18b2:	ae e4       	ldi	r26, 0x4E	; 78
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	ee e4       	ldi	r30, 0x4E	; 78
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	8f 7e       	andi	r24, 0xEF	; 239
    18be:	8c 93       	st	X, r24
    18c0:	3c c0       	rjmp	.+120    	; 0x193a <TIMER1_Init+0x15c>
				break;
			case TIMER1_FAST_PWM_ICR1_TOP:
				CLR_BIT(TCCR1A,WGM10);
    18c2:	af e4       	ldi	r26, 0x4F	; 79
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	ef e4       	ldi	r30, 0x4F	; 79
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	8e 7f       	andi	r24, 0xFE	; 254
    18ce:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,WGM11);
    18d0:	af e4       	ldi	r26, 0x4F	; 79
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	ef e4       	ldi	r30, 0x4F	; 79
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	82 60       	ori	r24, 0x02	; 2
    18dc:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,WGM12);
    18de:	ae e4       	ldi	r26, 0x4E	; 78
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	ee e4       	ldi	r30, 0x4E	; 78
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	88 60       	ori	r24, 0x08	; 8
    18ea:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,WGM13);
    18ec:	ae e4       	ldi	r26, 0x4E	; 78
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	ee e4       	ldi	r30, 0x4E	; 78
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	80 61       	ori	r24, 0x10	; 16
    18f8:	8c 93       	st	X, r24
    18fa:	1f c0       	rjmp	.+62     	; 0x193a <TIMER1_Init+0x15c>
				break;
			case TIMER1_FAST_PWM_OCR1A_TOP:
				SET_BIT(TCCR1A,WGM10);
    18fc:	af e4       	ldi	r26, 0x4F	; 79
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	ef e4       	ldi	r30, 0x4F	; 79
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	81 60       	ori	r24, 0x01	; 1
    1908:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,WGM11);
    190a:	af e4       	ldi	r26, 0x4F	; 79
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	ef e4       	ldi	r30, 0x4F	; 79
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	82 60       	ori	r24, 0x02	; 2
    1916:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,WGM12);
    1918:	ae e4       	ldi	r26, 0x4E	; 78
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	ee e4       	ldi	r30, 0x4E	; 78
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	88 60       	ori	r24, 0x08	; 8
    1924:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,WGM13);
    1926:	ae e4       	ldi	r26, 0x4E	; 78
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	ee e4       	ldi	r30, 0x4E	; 78
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	80 61       	ori	r24, 0x10	; 16
    1932:	8c 93       	st	X, r24
    1934:	02 c0       	rjmp	.+4      	; 0x193a <TIMER1_Init+0x15c>
				break;
			}
		}else{
			RetValue = ES_NOT_OK;
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	89 83       	std	Y+1, r24	; 0x01
		}

		// Timer_0 Prescalar Configuration
		if((TIME1_Cfg->prescalar >= TIMER1_STOP) && (TIME1_Cfg->prescalar <= EXTERNAL1_RISING))
    193a:	ea 81       	ldd	r30, Y+2	; 0x02
    193c:	fb 81       	ldd	r31, Y+3	; 0x03
    193e:	81 81       	ldd	r24, Z+1	; 0x01
    1940:	88 30       	cpi	r24, 0x08	; 8
    1942:	58 f4       	brcc	.+22     	; 0x195a <TIMER1_Init+0x17c>
		{
			TCCR1B |= TIME1_Cfg->prescalar;
    1944:	ae e4       	ldi	r26, 0x4E	; 78
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	ee e4       	ldi	r30, 0x4E	; 78
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	90 81       	ld	r25, Z
    194e:	ea 81       	ldd	r30, Y+2	; 0x02
    1950:	fb 81       	ldd	r31, Y+3	; 0x03
    1952:	81 81       	ldd	r24, Z+1	; 0x01
    1954:	89 2b       	or	r24, r25
    1956:	8c 93       	st	X, r24
    1958:	02 c0       	rjmp	.+4      	; 0x195e <TIMER1_Init+0x180>
		}else{
			RetValue = ES_NOT_OK;
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	89 83       	std	Y+1, r24	; 0x01
		}


		// Timer_1 OCA Pin
		TCCR1A |= (TIME1_Cfg->OC1A_mode << COM1A0);
    195e:	af e4       	ldi	r26, 0x4F	; 79
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	ef e4       	ldi	r30, 0x4F	; 79
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	28 2f       	mov	r18, r24
    196a:	ea 81       	ldd	r30, Y+2	; 0x02
    196c:	fb 81       	ldd	r31, Y+3	; 0x03
    196e:	82 81       	ldd	r24, Z+2	; 0x02
    1970:	88 2f       	mov	r24, r24
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	00 24       	eor	r0, r0
    1976:	96 95       	lsr	r25
    1978:	87 95       	ror	r24
    197a:	07 94       	ror	r0
    197c:	96 95       	lsr	r25
    197e:	87 95       	ror	r24
    1980:	07 94       	ror	r0
    1982:	98 2f       	mov	r25, r24
    1984:	80 2d       	mov	r24, r0
    1986:	82 2b       	or	r24, r18
    1988:	8c 93       	st	X, r24

		// Timer_1 OCA Pin
		TCCR1A |= (TIME1_Cfg->OC1B_mode << COM1B0);
    198a:	af e4       	ldi	r26, 0x4F	; 79
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	ef e4       	ldi	r30, 0x4F	; 79
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	28 2f       	mov	r18, r24
    1996:	ea 81       	ldd	r30, Y+2	; 0x02
    1998:	fb 81       	ldd	r31, Y+3	; 0x03
    199a:	83 81       	ldd	r24, Z+3	; 0x03
    199c:	88 2f       	mov	r24, r24
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	82 95       	swap	r24
    19a2:	92 95       	swap	r25
    19a4:	90 7f       	andi	r25, 0xF0	; 240
    19a6:	98 27       	eor	r25, r24
    19a8:	80 7f       	andi	r24, 0xF0	; 240
    19aa:	98 27       	eor	r25, r24
    19ac:	82 2b       	or	r24, r18
    19ae:	8c 93       	st	X, r24


		// Timer_1 Interrupts
		TIMSK |= (TIME1_Cfg->OVF_Interrupt) | (TIME1_Cfg->ICU_Interrupt) | (TIME1_Cfg->OCA_Interrupt) | (TIME1_Cfg->OCB_Interrupt);
    19b0:	a9 e5       	ldi	r26, 0x59	; 89
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	e9 e5       	ldi	r30, 0x59	; 89
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	20 81       	ld	r18, Z
    19ba:	ea 81       	ldd	r30, Y+2	; 0x02
    19bc:	fb 81       	ldd	r31, Y+3	; 0x03
    19be:	94 81       	ldd	r25, Z+4	; 0x04
    19c0:	ea 81       	ldd	r30, Y+2	; 0x02
    19c2:	fb 81       	ldd	r31, Y+3	; 0x03
    19c4:	85 81       	ldd	r24, Z+5	; 0x05
    19c6:	98 2b       	or	r25, r24
    19c8:	ea 81       	ldd	r30, Y+2	; 0x02
    19ca:	fb 81       	ldd	r31, Y+3	; 0x03
    19cc:	86 81       	ldd	r24, Z+6	; 0x06
    19ce:	98 2b       	or	r25, r24
    19d0:	ea 81       	ldd	r30, Y+2	; 0x02
    19d2:	fb 81       	ldd	r31, Y+3	; 0x03
    19d4:	87 81       	ldd	r24, Z+7	; 0x07
    19d6:	89 2b       	or	r24, r25
    19d8:	82 2b       	or	r24, r18
    19da:	8c 93       	st	X, r24



	}

	return RetValue;
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    19de:	2a 96       	adiw	r28, 0x0a	; 10
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	de bf       	out	0x3e, r29	; 62
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	cd bf       	out	0x3d, r28	; 61
    19ea:	cf 91       	pop	r28
    19ec:	df 91       	pop	r29
    19ee:	08 95       	ret

000019f0 <TIMER1_Stop>:


ES_t TIMER1_Stop(void)
{
    19f0:	df 93       	push	r29
    19f2:	cf 93       	push	r28
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
	// No clock source
	CLR_BIT(TCCR1B,CS10);
    19f8:	ae e4       	ldi	r26, 0x4E	; 78
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	ee e4       	ldi	r30, 0x4E	; 78
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	8e 7f       	andi	r24, 0xFE	; 254
    1a04:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS11);
    1a06:	ae e4       	ldi	r26, 0x4E	; 78
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	ee e4       	ldi	r30, 0x4E	; 78
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	8d 7f       	andi	r24, 0xFD	; 253
    1a12:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS12);
    1a14:	ae e4       	ldi	r26, 0x4E	; 78
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	ee e4       	ldi	r30, 0x4E	; 78
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	8b 7f       	andi	r24, 0xFB	; 251
    1a20:	8c 93       	st	X, r24
	return ES_OK;
    1a22:	80 e0       	ldi	r24, 0x00	; 0
}
    1a24:	cf 91       	pop	r28
    1a26:	df 91       	pop	r29
    1a28:	08 95       	ret

00001a2a <__vector_11>:




ISR(TIMER0_OVF_vect)
{
    1a2a:	1f 92       	push	r1
    1a2c:	0f 92       	push	r0
    1a2e:	0f b6       	in	r0, 0x3f	; 63
    1a30:	0f 92       	push	r0
    1a32:	11 24       	eor	r1, r1
    1a34:	2f 93       	push	r18
    1a36:	3f 93       	push	r19
    1a38:	4f 93       	push	r20
    1a3a:	5f 93       	push	r21
    1a3c:	6f 93       	push	r22
    1a3e:	7f 93       	push	r23
    1a40:	8f 93       	push	r24
    1a42:	9f 93       	push	r25
    1a44:	af 93       	push	r26
    1a46:	bf 93       	push	r27
    1a48:	ef 93       	push	r30
    1a4a:	ff 93       	push	r31
    1a4c:	df 93       	push	r29
    1a4e:	cf 93       	push	r28
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
	if (Timer0_OVF_Fptr != NULLPTR)
    1a54:	80 91 37 02 	lds	r24, 0x0237
    1a58:	90 91 38 02 	lds	r25, 0x0238
    1a5c:	00 97       	sbiw	r24, 0x00	; 0
    1a5e:	51 f0       	breq	.+20     	; 0x1a74 <__vector_11+0x4a>
	{
		OVF_Number++;
    1a60:	80 91 3b 02 	lds	r24, 0x023B
    1a64:	8f 5f       	subi	r24, 0xFF	; 255
    1a66:	80 93 3b 02 	sts	0x023B, r24
		Timer0_OVF_Fptr();
    1a6a:	e0 91 37 02 	lds	r30, 0x0237
    1a6e:	f0 91 38 02 	lds	r31, 0x0238
    1a72:	09 95       	icall
	}
}
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	ff 91       	pop	r31
    1a7a:	ef 91       	pop	r30
    1a7c:	bf 91       	pop	r27
    1a7e:	af 91       	pop	r26
    1a80:	9f 91       	pop	r25
    1a82:	8f 91       	pop	r24
    1a84:	7f 91       	pop	r23
    1a86:	6f 91       	pop	r22
    1a88:	5f 91       	pop	r21
    1a8a:	4f 91       	pop	r20
    1a8c:	3f 91       	pop	r19
    1a8e:	2f 91       	pop	r18
    1a90:	0f 90       	pop	r0
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	0f 90       	pop	r0
    1a96:	1f 90       	pop	r1
    1a98:	18 95       	reti

00001a9a <__vector_10>:


ISR(TIMER0_COMP_vect)
{
    1a9a:	1f 92       	push	r1
    1a9c:	0f 92       	push	r0
    1a9e:	0f b6       	in	r0, 0x3f	; 63
    1aa0:	0f 92       	push	r0
    1aa2:	11 24       	eor	r1, r1
    1aa4:	2f 93       	push	r18
    1aa6:	3f 93       	push	r19
    1aa8:	4f 93       	push	r20
    1aaa:	5f 93       	push	r21
    1aac:	6f 93       	push	r22
    1aae:	7f 93       	push	r23
    1ab0:	8f 93       	push	r24
    1ab2:	9f 93       	push	r25
    1ab4:	af 93       	push	r26
    1ab6:	bf 93       	push	r27
    1ab8:	ef 93       	push	r30
    1aba:	ff 93       	push	r31
    1abc:	df 93       	push	r29
    1abe:	cf 93       	push	r28
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_OCM_Fptr != NULLPTR)
    1ac4:	80 91 39 02 	lds	r24, 0x0239
    1ac8:	90 91 3a 02 	lds	r25, 0x023A
    1acc:	00 97       	sbiw	r24, 0x00	; 0
    1ace:	29 f0       	breq	.+10     	; 0x1ada <__vector_10+0x40>
	{
		Timer0_OCM_Fptr();
    1ad0:	e0 91 39 02 	lds	r30, 0x0239
    1ad4:	f0 91 3a 02 	lds	r31, 0x023A
    1ad8:	09 95       	icall
	}
}
    1ada:	cf 91       	pop	r28
    1adc:	df 91       	pop	r29
    1ade:	ff 91       	pop	r31
    1ae0:	ef 91       	pop	r30
    1ae2:	bf 91       	pop	r27
    1ae4:	af 91       	pop	r26
    1ae6:	9f 91       	pop	r25
    1ae8:	8f 91       	pop	r24
    1aea:	7f 91       	pop	r23
    1aec:	6f 91       	pop	r22
    1aee:	5f 91       	pop	r21
    1af0:	4f 91       	pop	r20
    1af2:	3f 91       	pop	r19
    1af4:	2f 91       	pop	r18
    1af6:	0f 90       	pop	r0
    1af8:	0f be       	out	0x3f, r0	; 63
    1afa:	0f 90       	pop	r0
    1afc:	1f 90       	pop	r1
    1afe:	18 95       	reti

00001b00 <SPI_Init>:
#include "SPI.h"



void SPI_Init(SPI_Config_t * SPI_Cfg)
{
    1b00:	df 93       	push	r29
    1b02:	cf 93       	push	r28
    1b04:	00 d0       	rcall	.+0      	; 0x1b06 <SPI_Init+0x6>
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
    1b0a:	9a 83       	std	Y+2, r25	; 0x02
    1b0c:	89 83       	std	Y+1, r24	; 0x01
	if(SPI_Cfg->Device_Mode == SPI_DEVICE_MODE_MASTER)
    1b0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b10:	fa 81       	ldd	r31, Y+2	; 0x02
    1b12:	80 81       	ld	r24, Z
    1b14:	80 31       	cpi	r24, 0x10	; 16
    1b16:	09 f0       	breq	.+2      	; 0x1b1a <SPI_Init+0x1a>
    1b18:	d8 c0       	rjmp	.+432    	; 0x1cca <SPI_Init+0x1ca>
	{
		// SCK, MOSI, SS Output
		DIO_ES_tSetPinDirection(SPI_REG, SCK, OUTPUT);
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	67 e0       	ldi	r22, 0x07	; 7
    1b1e:	41 e0       	ldi	r20, 0x01	; 1
    1b20:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(SPI_REG, MOSI, OUTPUT);
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	65 e0       	ldi	r22, 0x05	; 5
    1b28:	41 e0       	ldi	r20, 0x01	; 1
    1b2a:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(SPI_REG, SS, OUTPUT);
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	64 e0       	ldi	r22, 0x04	; 4
    1b32:	41 e0       	ldi	r20, 0x01	; 1
    1b34:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_ES_tSetPinDirection>

		// Set MISO pin as INPUT
		DIO_ES_tSetPinDirection(SPI_REG, MISO, INPUT);
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	66 e0       	ldi	r22, 0x06	; 6
    1b3c:	40 e0       	ldi	r20, 0x00	; 0
    1b3e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_ES_tSetPinDirection>


		SPCR |= SPI_DEVICE_MODE_MASTER;
    1b42:	ad e2       	ldi	r26, 0x2D	; 45
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	ed e2       	ldi	r30, 0x2D	; 45
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	80 61       	ori	r24, 0x10	; 16
    1b4e:	8c 93       	st	X, r24

		// The master is the one who generates the clock
		if(SPI_Cfg->Prescalar == SPI_Prescalar_4){
    1b50:	e9 81       	ldd	r30, Y+1	; 0x01
    1b52:	fa 81       	ldd	r31, Y+2	; 0x02
    1b54:	84 81       	ldd	r24, Z+4	; 0x04
    1b56:	88 23       	and	r24, r24
    1b58:	b1 f4       	brne	.+44     	; 0x1b86 <SPI_Init+0x86>
			CLR_BIT(SPCR,SPR0);
    1b5a:	ad e2       	ldi	r26, 0x2D	; 45
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	ed e2       	ldi	r30, 0x2D	; 45
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	8e 7f       	andi	r24, 0xFE	; 254
    1b66:	8c 93       	st	X, r24
			CLR_BIT(SPCR,SPR1);
    1b68:	ad e2       	ldi	r26, 0x2D	; 45
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	ed e2       	ldi	r30, 0x2D	; 45
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	8d 7f       	andi	r24, 0xFD	; 253
    1b74:	8c 93       	st	X, r24
			CLR_BIT(SPSR,SPI2X);
    1b76:	ae e2       	ldi	r26, 0x2E	; 46
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	ee e2       	ldi	r30, 0x2E	; 46
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	8e 7f       	andi	r24, 0xFE	; 254
    1b82:	8c 93       	st	X, r24
    1b84:	bd c0       	rjmp	.+378    	; 0x1d00 <SPI_Init+0x200>
		}else if(SPI_Cfg->Prescalar == SPI_Prescalar_16){
    1b86:	e9 81       	ldd	r30, Y+1	; 0x01
    1b88:	fa 81       	ldd	r31, Y+2	; 0x02
    1b8a:	84 81       	ldd	r24, Z+4	; 0x04
    1b8c:	81 30       	cpi	r24, 0x01	; 1
    1b8e:	b1 f4       	brne	.+44     	; 0x1bbc <SPI_Init+0xbc>
			SET_BIT(SPCR,SPR0);
    1b90:	ad e2       	ldi	r26, 0x2D	; 45
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	ed e2       	ldi	r30, 0x2D	; 45
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	81 60       	ori	r24, 0x01	; 1
    1b9c:	8c 93       	st	X, r24
			CLR_BIT(SPCR,SPR1);
    1b9e:	ad e2       	ldi	r26, 0x2D	; 45
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	ed e2       	ldi	r30, 0x2D	; 45
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	8d 7f       	andi	r24, 0xFD	; 253
    1baa:	8c 93       	st	X, r24
			CLR_BIT(SPSR,SPI2X);
    1bac:	ae e2       	ldi	r26, 0x2E	; 46
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	ee e2       	ldi	r30, 0x2E	; 46
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	8e 7f       	andi	r24, 0xFE	; 254
    1bb8:	8c 93       	st	X, r24
    1bba:	a2 c0       	rjmp	.+324    	; 0x1d00 <SPI_Init+0x200>
		}else if(SPI_Cfg->Prescalar == SPI_Prescalar_64){
    1bbc:	e9 81       	ldd	r30, Y+1	; 0x01
    1bbe:	fa 81       	ldd	r31, Y+2	; 0x02
    1bc0:	84 81       	ldd	r24, Z+4	; 0x04
    1bc2:	82 30       	cpi	r24, 0x02	; 2
    1bc4:	b1 f4       	brne	.+44     	; 0x1bf2 <SPI_Init+0xf2>
			CLR_BIT(SPCR,SPR0);
    1bc6:	ad e2       	ldi	r26, 0x2D	; 45
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	ed e2       	ldi	r30, 0x2D	; 45
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	8e 7f       	andi	r24, 0xFE	; 254
    1bd2:	8c 93       	st	X, r24
			SET_BIT(SPCR,SPR1);
    1bd4:	ad e2       	ldi	r26, 0x2D	; 45
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	ed e2       	ldi	r30, 0x2D	; 45
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	82 60       	ori	r24, 0x02	; 2
    1be0:	8c 93       	st	X, r24
			CLR_BIT(SPSR,SPI2X);
    1be2:	ae e2       	ldi	r26, 0x2E	; 46
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	ee e2       	ldi	r30, 0x2E	; 46
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	8e 7f       	andi	r24, 0xFE	; 254
    1bee:	8c 93       	st	X, r24
    1bf0:	87 c0       	rjmp	.+270    	; 0x1d00 <SPI_Init+0x200>
		}else if(SPI_Cfg->Prescalar == SPI_Prescalar_128){
    1bf2:	e9 81       	ldd	r30, Y+1	; 0x01
    1bf4:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf6:	84 81       	ldd	r24, Z+4	; 0x04
    1bf8:	83 30       	cpi	r24, 0x03	; 3
    1bfa:	b1 f4       	brne	.+44     	; 0x1c28 <SPI_Init+0x128>
			SET_BIT(SPCR,SPR0);
    1bfc:	ad e2       	ldi	r26, 0x2D	; 45
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	ed e2       	ldi	r30, 0x2D	; 45
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	81 60       	ori	r24, 0x01	; 1
    1c08:	8c 93       	st	X, r24
			SET_BIT(SPCR,SPR1);
    1c0a:	ad e2       	ldi	r26, 0x2D	; 45
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	ed e2       	ldi	r30, 0x2D	; 45
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	82 60       	ori	r24, 0x02	; 2
    1c16:	8c 93       	st	X, r24
			CLR_BIT(SPSR,SPI2X);
    1c18:	ae e2       	ldi	r26, 0x2E	; 46
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	ee e2       	ldi	r30, 0x2E	; 46
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	8e 7f       	andi	r24, 0xFE	; 254
    1c24:	8c 93       	st	X, r24
    1c26:	6c c0       	rjmp	.+216    	; 0x1d00 <SPI_Init+0x200>
		}else if(SPI_Cfg->Prescalar == SPI_Prescalar_2){
    1c28:	e9 81       	ldd	r30, Y+1	; 0x01
    1c2a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c2c:	84 81       	ldd	r24, Z+4	; 0x04
    1c2e:	84 30       	cpi	r24, 0x04	; 4
    1c30:	b1 f4       	brne	.+44     	; 0x1c5e <SPI_Init+0x15e>
			CLR_BIT(SPCR,SPR0);
    1c32:	ad e2       	ldi	r26, 0x2D	; 45
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	ed e2       	ldi	r30, 0x2D	; 45
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	8e 7f       	andi	r24, 0xFE	; 254
    1c3e:	8c 93       	st	X, r24
			CLR_BIT(SPCR,SPR1);
    1c40:	ad e2       	ldi	r26, 0x2D	; 45
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	ed e2       	ldi	r30, 0x2D	; 45
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	8d 7f       	andi	r24, 0xFD	; 253
    1c4c:	8c 93       	st	X, r24
			SET_BIT(SPSR,SPI2X);
    1c4e:	ae e2       	ldi	r26, 0x2E	; 46
    1c50:	b0 e0       	ldi	r27, 0x00	; 0
    1c52:	ee e2       	ldi	r30, 0x2E	; 46
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	81 60       	ori	r24, 0x01	; 1
    1c5a:	8c 93       	st	X, r24
    1c5c:	51 c0       	rjmp	.+162    	; 0x1d00 <SPI_Init+0x200>
		}else if(SPI_Cfg->Prescalar == SPI_Prescalar_8){
    1c5e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c60:	fa 81       	ldd	r31, Y+2	; 0x02
    1c62:	84 81       	ldd	r24, Z+4	; 0x04
    1c64:	85 30       	cpi	r24, 0x05	; 5
    1c66:	b1 f4       	brne	.+44     	; 0x1c94 <SPI_Init+0x194>
			SET_BIT(SPCR,SPR0);
    1c68:	ad e2       	ldi	r26, 0x2D	; 45
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	ed e2       	ldi	r30, 0x2D	; 45
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	81 60       	ori	r24, 0x01	; 1
    1c74:	8c 93       	st	X, r24
			CLR_BIT(SPCR,SPR1);
    1c76:	ad e2       	ldi	r26, 0x2D	; 45
    1c78:	b0 e0       	ldi	r27, 0x00	; 0
    1c7a:	ed e2       	ldi	r30, 0x2D	; 45
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	80 81       	ld	r24, Z
    1c80:	8d 7f       	andi	r24, 0xFD	; 253
    1c82:	8c 93       	st	X, r24
			SET_BIT(SPSR,SPI2X);
    1c84:	ae e2       	ldi	r26, 0x2E	; 46
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	ee e2       	ldi	r30, 0x2E	; 46
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	81 60       	ori	r24, 0x01	; 1
    1c90:	8c 93       	st	X, r24
    1c92:	36 c0       	rjmp	.+108    	; 0x1d00 <SPI_Init+0x200>
		}else if(SPI_Cfg->Prescalar == SPI_Prescalar_32){
    1c94:	e9 81       	ldd	r30, Y+1	; 0x01
    1c96:	fa 81       	ldd	r31, Y+2	; 0x02
    1c98:	84 81       	ldd	r24, Z+4	; 0x04
    1c9a:	86 30       	cpi	r24, 0x06	; 6
    1c9c:	89 f5       	brne	.+98     	; 0x1d00 <SPI_Init+0x200>
			CLR_BIT(SPCR,SPR0);
    1c9e:	ad e2       	ldi	r26, 0x2D	; 45
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	ed e2       	ldi	r30, 0x2D	; 45
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	8e 7f       	andi	r24, 0xFE	; 254
    1caa:	8c 93       	st	X, r24
			SET_BIT(SPCR,SPR1);
    1cac:	ad e2       	ldi	r26, 0x2D	; 45
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	ed e2       	ldi	r30, 0x2D	; 45
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	82 60       	ori	r24, 0x02	; 2
    1cb8:	8c 93       	st	X, r24
			SET_BIT(SPSR,SPI2X);
    1cba:	ae e2       	ldi	r26, 0x2E	; 46
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	ee e2       	ldi	r30, 0x2E	; 46
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	81 60       	ori	r24, 0x01	; 1
    1cc6:	8c 93       	st	X, r24
    1cc8:	1b c0       	rjmp	.+54     	; 0x1d00 <SPI_Init+0x200>
		}

	}else
	{   // Slave

		DIO_ES_tSetPinDirection(SPI_REG, MISO, OUTPUT);
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	66 e0       	ldi	r22, 0x06	; 6
    1cce:	41 e0       	ldi	r20, 0x01	; 1
    1cd0:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_ES_tSetPinDirection>
		// Set SCK, MOSI, and SS pins as INPUT (slave mode doesn't need them as output)
		DIO_ES_tSetPinDirection(SPI_REG, SCK, INPUT);
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	67 e0       	ldi	r22, 0x07	; 7
    1cd8:	40 e0       	ldi	r20, 0x00	; 0
    1cda:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(SPI_REG, MOSI, INPUT);
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	65 e0       	ldi	r22, 0x05	; 5
    1ce2:	40 e0       	ldi	r20, 0x00	; 0
    1ce4:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(SPI_REG, SS, INPUT);
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	64 e0       	ldi	r22, 0x04	; 4
    1cec:	40 e0       	ldi	r20, 0x00	; 0
    1cee:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_ES_tSetPinDirection>


		SPCR &= SPI_DEVICE_MODE_SLAVE;
    1cf2:	ad e2       	ldi	r26, 0x2D	; 45
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	ed e2       	ldi	r30, 0x2D	; 45
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	8f 7e       	andi	r24, 0xEF	; 239
    1cfe:	8c 93       	st	X, r24
	}



	// Common Configurations
	SPCR |= SPI_Cfg->CLK_Polarity;
    1d00:	ad e2       	ldi	r26, 0x2D	; 45
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	ed e2       	ldi	r30, 0x2D	; 45
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	90 81       	ld	r25, Z
    1d0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d0e:	82 81       	ldd	r24, Z+2	; 0x02
    1d10:	89 2b       	or	r24, r25
    1d12:	8c 93       	st	X, r24

	SPCR |= SPI_Cfg->CLK_PHASE;
    1d14:	ad e2       	ldi	r26, 0x2D	; 45
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	ed e2       	ldi	r30, 0x2D	; 45
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	90 81       	ld	r25, Z
    1d1e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d20:	fa 81       	ldd	r31, Y+2	; 0x02
    1d22:	83 81       	ldd	r24, Z+3	; 0x03
    1d24:	89 2b       	or	r24, r25
    1d26:	8c 93       	st	X, r24

	SPCR |= SPI_Cfg->Data_Order;
    1d28:	ad e2       	ldi	r26, 0x2D	; 45
    1d2a:	b0 e0       	ldi	r27, 0x00	; 0
    1d2c:	ed e2       	ldi	r30, 0x2D	; 45
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	90 81       	ld	r25, Z
    1d32:	e9 81       	ldd	r30, Y+1	; 0x01
    1d34:	fa 81       	ldd	r31, Y+2	; 0x02
    1d36:	81 81       	ldd	r24, Z+1	; 0x01
    1d38:	89 2b       	or	r24, r25
    1d3a:	8c 93       	st	X, r24


	// Enable SPI
	SET_BIT(SPCR,SPE);
    1d3c:	ad e2       	ldi	r26, 0x2D	; 45
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	ed e2       	ldi	r30, 0x2D	; 45
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	80 64       	ori	r24, 0x40	; 64
    1d48:	8c 93       	st	X, r24
}
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	cf 91       	pop	r28
    1d50:	df 91       	pop	r29
    1d52:	08 95       	ret

00001d54 <SPI_Transmit_Receive>:




u8 SPI_Transmit_Receive(u8 data)
{
    1d54:	df 93       	push	r29
    1d56:	cf 93       	push	r28
    1d58:	0f 92       	push	r0
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
    1d5e:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
    1d60:	ef e2       	ldi	r30, 0x2F	; 47
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
    1d66:	80 83       	st	Z, r24
	while(!GET_BIT(SPSR,SPIF));
    1d68:	ee e2       	ldi	r30, 0x2E	; 46
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	88 23       	and	r24, r24
    1d70:	dc f7       	brge	.-10     	; 0x1d68 <SPI_Transmit_Receive+0x14>
	// Return data received from slave
	return SPDR;
    1d72:	ef e2       	ldi	r30, 0x2F	; 47
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z

}
    1d78:	0f 90       	pop	r0
    1d7a:	cf 91       	pop	r28
    1d7c:	df 91       	pop	r29
    1d7e:	08 95       	ret

00001d80 <I2C_Init>:
#include "I2C.h"



void I2C_Init(unsigned long SCL_Clock)
{
    1d80:	0f 93       	push	r16
    1d82:	1f 93       	push	r17
    1d84:	df 93       	push	r29
    1d86:	cf 93       	push	r28
    1d88:	00 d0       	rcall	.+0      	; 0x1d8a <I2C_Init+0xa>
    1d8a:	00 d0       	rcall	.+0      	; 0x1d8c <I2C_Init+0xc>
    1d8c:	cd b7       	in	r28, 0x3d	; 61
    1d8e:	de b7       	in	r29, 0x3e	; 62
    1d90:	69 83       	std	Y+1, r22	; 0x01
    1d92:	7a 83       	std	Y+2, r23	; 0x02
    1d94:	8b 83       	std	Y+3, r24	; 0x03
    1d96:	9c 83       	std	Y+4, r25	; 0x04
	TWBR = (unsigned char)(((F_CPU/SCL_Clock)-16)/(2*I2C_PRESCALAR));
    1d98:	00 e2       	ldi	r16, 0x20	; 32
    1d9a:	10 e0       	ldi	r17, 0x00	; 0
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	94 e2       	ldi	r25, 0x24	; 36
    1da0:	a4 ef       	ldi	r26, 0xF4	; 244
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	29 81       	ldd	r18, Y+1	; 0x01
    1da6:	3a 81       	ldd	r19, Y+2	; 0x02
    1da8:	4b 81       	ldd	r20, Y+3	; 0x03
    1daa:	5c 81       	ldd	r21, Y+4	; 0x04
    1dac:	bc 01       	movw	r22, r24
    1dae:	cd 01       	movw	r24, r26
    1db0:	0e 94 1f 23 	call	0x463e	; 0x463e <__udivmodsi4>
    1db4:	da 01       	movw	r26, r20
    1db6:	c9 01       	movw	r24, r18
    1db8:	40 97       	sbiw	r24, 0x10	; 16
    1dba:	a1 09       	sbc	r26, r1
    1dbc:	b1 09       	sbc	r27, r1
    1dbe:	b6 95       	lsr	r27
    1dc0:	a7 95       	ror	r26
    1dc2:	97 95       	ror	r25
    1dc4:	87 95       	ror	r24
    1dc6:	f8 01       	movw	r30, r16
    1dc8:	80 83       	st	Z, r24

	switch(I2C_PRESCALAR)
	{
	case I2C_PRESCALAR_1:
		CLR_BIT(TWSR,TWPS0);
    1dca:	a1 e2       	ldi	r26, 0x21	; 33
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	e1 e2       	ldi	r30, 0x21	; 33
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	8e 7f       	andi	r24, 0xFE	; 254
    1dd6:	8c 93       	st	X, r24
		CLR_BIT(TWSR,TWPS1);
    1dd8:	a1 e2       	ldi	r26, 0x21	; 33
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	e1 e2       	ldi	r30, 0x21	; 33
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	8d 7f       	andi	r24, 0xFD	; 253
    1de4:	8c 93       	st	X, r24
	case I2C_PRESCALAR_64:
		SET_BIT(TWSR,TWPS0);
		SET_BIT(TWSR,TWPS1);
		break;
	}
}
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	cf 91       	pop	r28
    1df0:	df 91       	pop	r29
    1df2:	1f 91       	pop	r17
    1df4:	0f 91       	pop	r16
    1df6:	08 95       	ret

00001df8 <I2C_Start>:




void I2C_Start(void)
{
    1df8:	df 93       	push	r29
    1dfa:	cf 93       	push	r28
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62
	// Send start condition
	// Writing a one to TWINT clears the Flag.
	// The TWI will not start any operation as long as the
	// TWINT bit in TWCR is set
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1e00:	e6 e5       	ldi	r30, 0x56	; 86
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	84 ea       	ldi	r24, 0xA4	; 164
    1e06:	80 83       	st	Z, r24
	while(!GET_BIT(TWCR,TWINT));	// wait for transmission of START BIT
    1e08:	e6 e5       	ldi	r30, 0x56	; 86
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	88 23       	and	r24, r24
    1e10:	dc f7       	brge	.-10     	; 0x1e08 <I2C_Start+0x10>
	while(TWSR != TWSR_START_TRANSMITTED);	// A START condition has been transmitted
    1e12:	e1 e2       	ldi	r30, 0x21	; 33
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	88 30       	cpi	r24, 0x08	; 8
    1e1a:	d9 f7       	brne	.-10     	; 0x1e12 <I2C_Start+0x1a>
}
    1e1c:	cf 91       	pop	r28
    1e1e:	df 91       	pop	r29
    1e20:	08 95       	ret

00001e22 <I2C_Write>:



void I2C_Write(u8 cByte)
{
    1e22:	df 93       	push	r29
    1e24:	cf 93       	push	r28
    1e26:	0f 92       	push	r0
    1e28:	cd b7       	in	r28, 0x3d	; 61
    1e2a:	de b7       	in	r29, 0x3e	; 62
    1e2c:	89 83       	std	Y+1, r24	; 0x01
	TWDR = cByte;
    1e2e:	e3 e2       	ldi	r30, 0x23	; 35
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	89 81       	ldd	r24, Y+1	; 0x01
    1e34:	80 83       	st	Z, r24
	// Clear TWINT bit in TWCR to start transmission of (address/data)
	TWCR = (1<<TWINT) | (1<<TWEN);
    1e36:	e6 e5       	ldi	r30, 0x56	; 86
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	84 e8       	ldi	r24, 0x84	; 132
    1e3c:	80 83       	st	Z, r24
	//	Wait for TWINT Flag set. This indicates
	//	that the SLA+W has been transmitted,
	//	and ACK/NACK has been received.
	while(!GET_BIT(TWCR,TWINT));
    1e3e:	e6 e5       	ldi	r30, 0x56	; 86
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	88 23       	and	r24, r24
    1e46:	dc f7       	brge	.-10     	; 0x1e3e <I2C_Write+0x1c>
}
    1e48:	0f 90       	pop	r0
    1e4a:	cf 91       	pop	r28
    1e4c:	df 91       	pop	r29
    1e4e:	08 95       	ret

00001e50 <I2C_Stop>:



void I2C_Stop(void)
{
    1e50:	df 93       	push	r29
    1e52:	cf 93       	push	r28
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    1e58:	e6 e5       	ldi	r30, 0x56	; 86
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	84 e9       	ldi	r24, 0x94	; 148
    1e5e:	80 83       	st	Z, r24
}
    1e60:	cf 91       	pop	r28
    1e62:	df 91       	pop	r29
    1e64:	08 95       	ret

00001e66 <I2C_Set_Address>:



void I2C_Set_Address(u8 slaveAddress)
{
    1e66:	df 93       	push	r29
    1e68:	cf 93       	push	r28
    1e6a:	0f 92       	push	r0
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	89 83       	std	Y+1, r24	; 0x01
	//	The TWAR should be loaded with the 7-bit slave address (in the seven most significant
	//	bits of TWAR)
	TWAR = (slaveAddress << 1);
    1e72:	e2 e2       	ldi	r30, 0x22	; 34
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	88 0f       	add	r24, r24
    1e7a:	80 83       	st	Z, r24
}
    1e7c:	0f 90       	pop	r0
    1e7e:	cf 91       	pop	r28
    1e80:	df 91       	pop	r29
    1e82:	08 95       	ret

00001e84 <I2C_Slave_Read>:



// Read address and continue to read data byte
u8 I2C_Slave_Read(u8 *status)
{
    1e84:	df 93       	push	r29
    1e86:	cf 93       	push	r28
    1e88:	00 d0       	rcall	.+0      	; 0x1e8a <I2C_Slave_Read+0x6>
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
    1e8e:	9a 83       	std	Y+2, r25	; 0x02
    1e90:	89 83       	std	Y+1, r24	; 0x01
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    1e92:	e6 e5       	ldi	r30, 0x56	; 86
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	84 ec       	ldi	r24, 0xC4	; 196
    1e98:	80 83       	st	Z, r24
	while(!GET_BIT(TWCR,TWINT));	// After its own slave address and the write bit have been received, the TWINT
    1e9a:	e6 e5       	ldi	r30, 0x56	; 86
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	88 23       	and	r24, r24
    1ea2:	dc f7       	brge	.-10     	; 0x1e9a <I2C_Slave_Read+0x16>
    1ea4:	04 c0       	rjmp	.+8      	; 0x1eae <I2C_Slave_Read+0x2a>
	// Flag is set and a valid status code can be read from TWSR

	while (TWSR != TWSR_Add_ACK_RETURNED) {
		// Handle error, expected SLA+R ACK not received
		*status = TWSR_Add_ACK_RETURNED;
    1ea6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eaa:	80 e6       	ldi	r24, 0x60	; 96
    1eac:	80 83       	st	Z, r24
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
	while(!GET_BIT(TWCR,TWINT));	// After its own slave address and the write bit have been received, the TWINT
	// Flag is set and a valid status code can be read from TWSR

	while (TWSR != TWSR_Add_ACK_RETURNED) {
    1eae:	e1 e2       	ldi	r30, 0x21	; 33
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	80 36       	cpi	r24, 0x60	; 96
    1eb6:	b9 f7       	brne	.-18     	; 0x1ea6 <I2C_Slave_Read+0x22>
		// Handle error, expected SLA+R ACK not received
		*status = TWSR_Add_ACK_RETURNED;
	}
	// Continue Listening
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    1eb8:	e6 e5       	ldi	r30, 0x56	; 86
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	84 ec       	ldi	r24, 0xC4	; 196
    1ebe:	80 83       	st	Z, r24
	while(!GET_BIT(TWCR,TWINT));
    1ec0:	e6 e5       	ldi	r30, 0x56	; 86
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	88 23       	and	r24, r24
    1ec8:	dc f7       	brge	.-10     	; 0x1ec0 <I2C_Slave_Read+0x3c>
    1eca:	04 c0       	rjmp	.+8      	; 0x1ed4 <I2C_Slave_Read+0x50>
	// Data has been received ACK has been returned
	while(TWSR != TWSR_Data_ACK_RETURNED){
		*status = TWSR_Data_ACK_RETURNED;
    1ecc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ece:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed0:	80 e8       	ldi	r24, 0x80	; 128
    1ed2:	80 83       	st	Z, r24
	}
	// Continue Listening
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
	while(!GET_BIT(TWCR,TWINT));
	// Data has been received ACK has been returned
	while(TWSR != TWSR_Data_ACK_RETURNED){
    1ed4:	e1 e2       	ldi	r30, 0x21	; 33
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	80 38       	cpi	r24, 0x80	; 128
    1edc:	b9 f7       	brne	.-18     	; 0x1ecc <I2C_Slave_Read+0x48>
		*status = TWSR_Data_ACK_RETURNED;
	}

	return TWDR;
    1ede:	e3 e2       	ldi	r30, 0x23	; 35
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
}
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	cf 91       	pop	r28
    1eea:	df 91       	pop	r29
    1eec:	08 95       	ret

00001eee <I2C_Read>:


// Just read a byte
u8 I2C_Read(void)
{
    1eee:	df 93       	push	r29
    1ef0:	cf 93       	push	r28
    1ef2:	cd b7       	in	r28, 0x3d	; 61
    1ef4:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    1ef6:	e6 e5       	ldi	r30, 0x56	; 86
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	84 ec       	ldi	r24, 0xC4	; 196
    1efc:	80 83       	st	Z, r24
	while(!GET_BIT(TWCR,TWINT));	// After its own slave address and the write bit have been received, the TWINT
    1efe:	e6 e5       	ldi	r30, 0x56	; 86
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	88 23       	and	r24, r24
    1f06:	dc f7       	brge	.-10     	; 0x1efe <I2C_Read+0x10>
	return TWDR;
    1f08:	e3 e2       	ldi	r30, 0x23	; 35
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
}
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	08 95       	ret

00001f14 <EXI_Set_CallBack>:
/* void (*LocalPtr)(void) is a local pointer to function */
/* The name of function without () is an address to that function */
/* The function he passes must take void and return void also */
/************************************************************************/

void EXI_Set_CallBack(EX_Interrupt_Source_type interrupt, void (*LocalPtr)(void)){
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	00 d0       	rcall	.+0      	; 0x1f1a <EXI_Set_CallBack+0x6>
    1f1a:	00 d0       	rcall	.+0      	; 0x1f1c <EXI_Set_CallBack+0x8>
    1f1c:	0f 92       	push	r0
    1f1e:	cd b7       	in	r28, 0x3d	; 61
    1f20:	de b7       	in	r29, 0x3e	; 62
    1f22:	89 83       	std	Y+1, r24	; 0x01
    1f24:	7b 83       	std	Y+3, r23	; 0x03
    1f26:	6a 83       	std	Y+2, r22	; 0x02
	switch(interrupt){
    1f28:	89 81       	ldd	r24, Y+1	; 0x01
    1f2a:	28 2f       	mov	r18, r24
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	3d 83       	std	Y+5, r19	; 0x05
    1f30:	2c 83       	std	Y+4, r18	; 0x04
    1f32:	8c 81       	ldd	r24, Y+4	; 0x04
    1f34:	9d 81       	ldd	r25, Y+5	; 0x05
    1f36:	81 30       	cpi	r24, 0x01	; 1
    1f38:	91 05       	cpc	r25, r1
    1f3a:	81 f0       	breq	.+32     	; 0x1f5c <EXI_Set_CallBack+0x48>
    1f3c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f3e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f40:	22 30       	cpi	r18, 0x02	; 2
    1f42:	31 05       	cpc	r19, r1
    1f44:	91 f0       	breq	.+36     	; 0x1f6a <EXI_Set_CallBack+0x56>
    1f46:	8c 81       	ldd	r24, Y+4	; 0x04
    1f48:	9d 81       	ldd	r25, Y+5	; 0x05
    1f4a:	00 97       	sbiw	r24, 0x00	; 0
    1f4c:	a1 f4       	brne	.+40     	; 0x1f76 <EXI_Set_CallBack+0x62>
	case EX_INT0:
		INT0_Fptr = LocalPtr;
    1f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f50:	9b 81       	ldd	r25, Y+3	; 0x03
    1f52:	90 93 3e 02 	sts	0x023E, r25
    1f56:	80 93 3d 02 	sts	0x023D, r24
    1f5a:	0d c0       	rjmp	.+26     	; 0x1f76 <EXI_Set_CallBack+0x62>
		break;
	case EX_INT1:
		INT1_Fptr = LocalPtr;
    1f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f60:	90 93 40 02 	sts	0x0240, r25
    1f64:	80 93 3f 02 	sts	0x023F, r24
    1f68:	06 c0       	rjmp	.+12     	; 0x1f76 <EXI_Set_CallBack+0x62>
		break;
	case EX_INT2:
		INT2_Fptr = LocalPtr;
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f6e:	90 93 42 02 	sts	0x0242, r25
    1f72:	80 93 41 02 	sts	0x0241, r24
		break;
	}
}
    1f76:	0f 90       	pop	r0
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	0f 90       	pop	r0
    1f7e:	0f 90       	pop	r0
    1f80:	cf 91       	pop	r28
    1f82:	df 91       	pop	r29
    1f84:	08 95       	ret

00001f86 <EXI_ENABLE>:
/************************************************************************/
/*  Enabling and disabling the interrupt                                */
/************************************************************************/


void EXI_ENABLE(EX_Interrupt_Source_type interrupt){
    1f86:	df 93       	push	r29
    1f88:	cf 93       	push	r28
    1f8a:	00 d0       	rcall	.+0      	; 0x1f8c <EXI_ENABLE+0x6>
    1f8c:	0f 92       	push	r0
    1f8e:	cd b7       	in	r28, 0x3d	; 61
    1f90:	de b7       	in	r29, 0x3e	; 62
    1f92:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt){
    1f94:	89 81       	ldd	r24, Y+1	; 0x01
    1f96:	28 2f       	mov	r18, r24
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	3b 83       	std	Y+3, r19	; 0x03
    1f9c:	2a 83       	std	Y+2, r18	; 0x02
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa2:	81 30       	cpi	r24, 0x01	; 1
    1fa4:	91 05       	cpc	r25, r1
    1fa6:	89 f0       	breq	.+34     	; 0x1fca <EXI_ENABLE+0x44>
    1fa8:	2a 81       	ldd	r18, Y+2	; 0x02
    1faa:	3b 81       	ldd	r19, Y+3	; 0x03
    1fac:	22 30       	cpi	r18, 0x02	; 2
    1fae:	31 05       	cpc	r19, r1
    1fb0:	a1 f0       	breq	.+40     	; 0x1fda <EXI_ENABLE+0x54>
    1fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb6:	00 97       	sbiw	r24, 0x00	; 0
    1fb8:	b9 f4       	brne	.+46     	; 0x1fe8 <EXI_ENABLE+0x62>
	case EX_INT0:
		SET_BIT(GICR,INT0);
    1fba:	ab e5       	ldi	r26, 0x5B	; 91
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	eb e5       	ldi	r30, 0x5B	; 91
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 81       	ld	r24, Z
    1fc4:	80 64       	ori	r24, 0x40	; 64
    1fc6:	8c 93       	st	X, r24
    1fc8:	0f c0       	rjmp	.+30     	; 0x1fe8 <EXI_ENABLE+0x62>
		break;
	case EX_INT1:
		SET_BIT(GICR,INT1);
    1fca:	ab e5       	ldi	r26, 0x5B	; 91
    1fcc:	b0 e0       	ldi	r27, 0x00	; 0
    1fce:	eb e5       	ldi	r30, 0x5B	; 91
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	80 68       	ori	r24, 0x80	; 128
    1fd6:	8c 93       	st	X, r24
    1fd8:	07 c0       	rjmp	.+14     	; 0x1fe8 <EXI_ENABLE+0x62>
		break;
	case EX_INT2:
		SET_BIT(GICR,INT2);
    1fda:	ab e5       	ldi	r26, 0x5B	; 91
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	eb e5       	ldi	r30, 0x5B	; 91
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	80 62       	ori	r24, 0x20	; 32
    1fe6:	8c 93       	st	X, r24
		break;
	}
}
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	cf 91       	pop	r28
    1ff0:	df 91       	pop	r29
    1ff2:	08 95       	ret

00001ff4 <EXI_DISABLE>:


void EXI_DISABLE(EX_Interrupt_Source_type interrupt){
    1ff4:	df 93       	push	r29
    1ff6:	cf 93       	push	r28
    1ff8:	00 d0       	rcall	.+0      	; 0x1ffa <EXI_DISABLE+0x6>
    1ffa:	0f 92       	push	r0
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
    2000:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt){
    2002:	89 81       	ldd	r24, Y+1	; 0x01
    2004:	28 2f       	mov	r18, r24
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	3b 83       	std	Y+3, r19	; 0x03
    200a:	2a 83       	std	Y+2, r18	; 0x02
    200c:	8a 81       	ldd	r24, Y+2	; 0x02
    200e:	9b 81       	ldd	r25, Y+3	; 0x03
    2010:	81 30       	cpi	r24, 0x01	; 1
    2012:	91 05       	cpc	r25, r1
    2014:	89 f0       	breq	.+34     	; 0x2038 <EXI_DISABLE+0x44>
    2016:	2a 81       	ldd	r18, Y+2	; 0x02
    2018:	3b 81       	ldd	r19, Y+3	; 0x03
    201a:	22 30       	cpi	r18, 0x02	; 2
    201c:	31 05       	cpc	r19, r1
    201e:	a1 f0       	breq	.+40     	; 0x2048 <EXI_DISABLE+0x54>
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	9b 81       	ldd	r25, Y+3	; 0x03
    2024:	00 97       	sbiw	r24, 0x00	; 0
    2026:	b9 f4       	brne	.+46     	; 0x2056 <EXI_DISABLE+0x62>
	case EX_INT0:
		CLR_BIT(GICR,INT0);
    2028:	ab e5       	ldi	r26, 0x5B	; 91
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	eb e5       	ldi	r30, 0x5B	; 91
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	8f 7b       	andi	r24, 0xBF	; 191
    2034:	8c 93       	st	X, r24
    2036:	0f c0       	rjmp	.+30     	; 0x2056 <EXI_DISABLE+0x62>
		break;
	case EX_INT1:
		CLR_BIT(GICR,INT1);
    2038:	ab e5       	ldi	r26, 0x5B	; 91
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	eb e5       	ldi	r30, 0x5B	; 91
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	80 81       	ld	r24, Z
    2042:	8f 77       	andi	r24, 0x7F	; 127
    2044:	8c 93       	st	X, r24
    2046:	07 c0       	rjmp	.+14     	; 0x2056 <EXI_DISABLE+0x62>
		break;
	case EX_INT2:
		CLR_BIT(GICR,INT2);
    2048:	ab e5       	ldi	r26, 0x5B	; 91
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	eb e5       	ldi	r30, 0x5B	; 91
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	80 81       	ld	r24, Z
    2052:	8f 7d       	andi	r24, 0xDF	; 223
    2054:	8c 93       	st	X, r24
		break;
	}
}
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	0f 90       	pop	r0
    205c:	cf 91       	pop	r28
    205e:	df 91       	pop	r29
    2060:	08 95       	ret

00002062 <EXI_TriggerEdge>:

void EXI_TriggerEdge(EX_Interrupt_Source_type interrupt,Trigger_Edge_type edge){
    2062:	df 93       	push	r29
    2064:	cf 93       	push	r28
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
    206a:	2a 97       	sbiw	r28, 0x0a	; 10
    206c:	0f b6       	in	r0, 0x3f	; 63
    206e:	f8 94       	cli
    2070:	de bf       	out	0x3e, r29	; 62
    2072:	0f be       	out	0x3f, r0	; 63
    2074:	cd bf       	out	0x3d, r28	; 61
    2076:	89 83       	std	Y+1, r24	; 0x01
    2078:	6a 83       	std	Y+2, r22	; 0x02
	switch(interrupt){
    207a:	89 81       	ldd	r24, Y+1	; 0x01
    207c:	28 2f       	mov	r18, r24
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	3a 87       	std	Y+10, r19	; 0x0a
    2082:	29 87       	std	Y+9, r18	; 0x09
    2084:	89 85       	ldd	r24, Y+9	; 0x09
    2086:	9a 85       	ldd	r25, Y+10	; 0x0a
    2088:	81 30       	cpi	r24, 0x01	; 1
    208a:	91 05       	cpc	r25, r1
    208c:	09 f4       	brne	.+2      	; 0x2090 <EXI_TriggerEdge+0x2e>
    208e:	66 c0       	rjmp	.+204    	; 0x215c <EXI_TriggerEdge+0xfa>
    2090:	29 85       	ldd	r18, Y+9	; 0x09
    2092:	3a 85       	ldd	r19, Y+10	; 0x0a
    2094:	22 30       	cpi	r18, 0x02	; 2
    2096:	31 05       	cpc	r19, r1
    2098:	09 f4       	brne	.+2      	; 0x209c <EXI_TriggerEdge+0x3a>
    209a:	bb c0       	rjmp	.+374    	; 0x2212 <EXI_TriggerEdge+0x1b0>
    209c:	89 85       	ldd	r24, Y+9	; 0x09
    209e:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a0:	00 97       	sbiw	r24, 0x00	; 0
    20a2:	09 f0       	breq	.+2      	; 0x20a6 <EXI_TriggerEdge+0x44>
    20a4:	dd c0       	rjmp	.+442    	; 0x2260 <EXI_TriggerEdge+0x1fe>
	case EX_INT0:
		switch(edge){
    20a6:	8a 81       	ldd	r24, Y+2	; 0x02
    20a8:	28 2f       	mov	r18, r24
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	38 87       	std	Y+8, r19	; 0x08
    20ae:	2f 83       	std	Y+7, r18	; 0x07
    20b0:	8f 81       	ldd	r24, Y+7	; 0x07
    20b2:	98 85       	ldd	r25, Y+8	; 0x08
    20b4:	81 30       	cpi	r24, 0x01	; 1
    20b6:	91 05       	cpc	r25, r1
    20b8:	21 f1       	breq	.+72     	; 0x2102 <EXI_TriggerEdge+0xa0>
    20ba:	2f 81       	ldd	r18, Y+7	; 0x07
    20bc:	38 85       	ldd	r19, Y+8	; 0x08
    20be:	22 30       	cpi	r18, 0x02	; 2
    20c0:	31 05       	cpc	r19, r1
    20c2:	2c f4       	brge	.+10     	; 0x20ce <EXI_TriggerEdge+0x6c>
    20c4:	8f 81       	ldd	r24, Y+7	; 0x07
    20c6:	98 85       	ldd	r25, Y+8	; 0x08
    20c8:	00 97       	sbiw	r24, 0x00	; 0
    20ca:	61 f0       	breq	.+24     	; 0x20e4 <EXI_TriggerEdge+0x82>
    20cc:	c9 c0       	rjmp	.+402    	; 0x2260 <EXI_TriggerEdge+0x1fe>
    20ce:	2f 81       	ldd	r18, Y+7	; 0x07
    20d0:	38 85       	ldd	r19, Y+8	; 0x08
    20d2:	22 30       	cpi	r18, 0x02	; 2
    20d4:	31 05       	cpc	r19, r1
    20d6:	21 f1       	breq	.+72     	; 0x2120 <EXI_TriggerEdge+0xbe>
    20d8:	8f 81       	ldd	r24, Y+7	; 0x07
    20da:	98 85       	ldd	r25, Y+8	; 0x08
    20dc:	83 30       	cpi	r24, 0x03	; 3
    20de:	91 05       	cpc	r25, r1
    20e0:	71 f1       	breq	.+92     	; 0x213e <EXI_TriggerEdge+0xdc>
    20e2:	be c0       	rjmp	.+380    	; 0x2260 <EXI_TriggerEdge+0x1fe>
		case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC00);
    20e4:	a5 e5       	ldi	r26, 0x55	; 85
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	e5 e5       	ldi	r30, 0x55	; 85
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	8e 7f       	andi	r24, 0xFE	; 254
    20f0:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
    20f2:	a5 e5       	ldi	r26, 0x55	; 85
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	e5 e5       	ldi	r30, 0x55	; 85
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	8d 7f       	andi	r24, 0xFD	; 253
    20fe:	8c 93       	st	X, r24
    2100:	af c0       	rjmp	.+350    	; 0x2260 <EXI_TriggerEdge+0x1fe>
			break;
		case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC00);
    2102:	a5 e5       	ldi	r26, 0x55	; 85
    2104:	b0 e0       	ldi	r27, 0x00	; 0
    2106:	e5 e5       	ldi	r30, 0x55	; 85
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	80 81       	ld	r24, Z
    210c:	81 60       	ori	r24, 0x01	; 1
    210e:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
    2110:	a5 e5       	ldi	r26, 0x55	; 85
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	e5 e5       	ldi	r30, 0x55	; 85
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	8d 7f       	andi	r24, 0xFD	; 253
    211c:	8c 93       	st	X, r24
    211e:	a0 c0       	rjmp	.+320    	; 0x2260 <EXI_TriggerEdge+0x1fe>
			break;
		case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC00);
    2120:	a5 e5       	ldi	r26, 0x55	; 85
    2122:	b0 e0       	ldi	r27, 0x00	; 0
    2124:	e5 e5       	ldi	r30, 0x55	; 85
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	8e 7f       	andi	r24, 0xFE	; 254
    212c:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    212e:	a5 e5       	ldi	r26, 0x55	; 85
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	e5 e5       	ldi	r30, 0x55	; 85
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	82 60       	ori	r24, 0x02	; 2
    213a:	8c 93       	st	X, r24
    213c:	91 c0       	rjmp	.+290    	; 0x2260 <EXI_TriggerEdge+0x1fe>
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
    213e:	a5 e5       	ldi	r26, 0x55	; 85
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	e5 e5       	ldi	r30, 0x55	; 85
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	81 60       	ori	r24, 0x01	; 1
    214a:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    214c:	a5 e5       	ldi	r26, 0x55	; 85
    214e:	b0 e0       	ldi	r27, 0x00	; 0
    2150:	e5 e5       	ldi	r30, 0x55	; 85
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	80 81       	ld	r24, Z
    2156:	82 60       	ori	r24, 0x02	; 2
    2158:	8c 93       	st	X, r24
    215a:	82 c0       	rjmp	.+260    	; 0x2260 <EXI_TriggerEdge+0x1fe>
			break;
		}
		break;
		case EX_INT1:
			switch(edge){
    215c:	8a 81       	ldd	r24, Y+2	; 0x02
    215e:	28 2f       	mov	r18, r24
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	3e 83       	std	Y+6, r19	; 0x06
    2164:	2d 83       	std	Y+5, r18	; 0x05
    2166:	8d 81       	ldd	r24, Y+5	; 0x05
    2168:	9e 81       	ldd	r25, Y+6	; 0x06
    216a:	81 30       	cpi	r24, 0x01	; 1
    216c:	91 05       	cpc	r25, r1
    216e:	21 f1       	breq	.+72     	; 0x21b8 <EXI_TriggerEdge+0x156>
    2170:	2d 81       	ldd	r18, Y+5	; 0x05
    2172:	3e 81       	ldd	r19, Y+6	; 0x06
    2174:	22 30       	cpi	r18, 0x02	; 2
    2176:	31 05       	cpc	r19, r1
    2178:	2c f4       	brge	.+10     	; 0x2184 <EXI_TriggerEdge+0x122>
    217a:	8d 81       	ldd	r24, Y+5	; 0x05
    217c:	9e 81       	ldd	r25, Y+6	; 0x06
    217e:	00 97       	sbiw	r24, 0x00	; 0
    2180:	61 f0       	breq	.+24     	; 0x219a <EXI_TriggerEdge+0x138>
    2182:	6e c0       	rjmp	.+220    	; 0x2260 <EXI_TriggerEdge+0x1fe>
    2184:	2d 81       	ldd	r18, Y+5	; 0x05
    2186:	3e 81       	ldd	r19, Y+6	; 0x06
    2188:	22 30       	cpi	r18, 0x02	; 2
    218a:	31 05       	cpc	r19, r1
    218c:	21 f1       	breq	.+72     	; 0x21d6 <EXI_TriggerEdge+0x174>
    218e:	8d 81       	ldd	r24, Y+5	; 0x05
    2190:	9e 81       	ldd	r25, Y+6	; 0x06
    2192:	83 30       	cpi	r24, 0x03	; 3
    2194:	91 05       	cpc	r25, r1
    2196:	71 f1       	breq	.+92     	; 0x21f4 <EXI_TriggerEdge+0x192>
    2198:	63 c0       	rjmp	.+198    	; 0x2260 <EXI_TriggerEdge+0x1fe>
			case LOW_LEVEL:
				CLR_BIT(MCUCR,ISC10);
    219a:	a5 e5       	ldi	r26, 0x55	; 85
    219c:	b0 e0       	ldi	r27, 0x00	; 0
    219e:	e5 e5       	ldi	r30, 0x55	; 85
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	80 81       	ld	r24, Z
    21a4:	8b 7f       	andi	r24, 0xFB	; 251
    21a6:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC11);
    21a8:	a5 e5       	ldi	r26, 0x55	; 85
    21aa:	b0 e0       	ldi	r27, 0x00	; 0
    21ac:	e5 e5       	ldi	r30, 0x55	; 85
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	80 81       	ld	r24, Z
    21b2:	87 7f       	andi	r24, 0xF7	; 247
    21b4:	8c 93       	st	X, r24
    21b6:	54 c0       	rjmp	.+168    	; 0x2260 <EXI_TriggerEdge+0x1fe>
				break;
			case ANY_LOGIC_CHANGE:
				SET_BIT(MCUCR,ISC10);
    21b8:	a5 e5       	ldi	r26, 0x55	; 85
    21ba:	b0 e0       	ldi	r27, 0x00	; 0
    21bc:	e5 e5       	ldi	r30, 0x55	; 85
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	80 81       	ld	r24, Z
    21c2:	84 60       	ori	r24, 0x04	; 4
    21c4:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC11);
    21c6:	a5 e5       	ldi	r26, 0x55	; 85
    21c8:	b0 e0       	ldi	r27, 0x00	; 0
    21ca:	e5 e5       	ldi	r30, 0x55	; 85
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	80 81       	ld	r24, Z
    21d0:	87 7f       	andi	r24, 0xF7	; 247
    21d2:	8c 93       	st	X, r24
    21d4:	45 c0       	rjmp	.+138    	; 0x2260 <EXI_TriggerEdge+0x1fe>
				break;
			case FALLING_EDGE:
				CLR_BIT(MCUCR,ISC10);
    21d6:	a5 e5       	ldi	r26, 0x55	; 85
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	e5 e5       	ldi	r30, 0x55	; 85
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	8b 7f       	andi	r24, 0xFB	; 251
    21e2:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
    21e4:	a5 e5       	ldi	r26, 0x55	; 85
    21e6:	b0 e0       	ldi	r27, 0x00	; 0
    21e8:	e5 e5       	ldi	r30, 0x55	; 85
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	80 81       	ld	r24, Z
    21ee:	88 60       	ori	r24, 0x08	; 8
    21f0:	8c 93       	st	X, r24
    21f2:	36 c0       	rjmp	.+108    	; 0x2260 <EXI_TriggerEdge+0x1fe>
				break;
			case RISING_EDGE:
				SET_BIT(MCUCR,ISC10);
    21f4:	a5 e5       	ldi	r26, 0x55	; 85
    21f6:	b0 e0       	ldi	r27, 0x00	; 0
    21f8:	e5 e5       	ldi	r30, 0x55	; 85
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	84 60       	ori	r24, 0x04	; 4
    2200:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
    2202:	a5 e5       	ldi	r26, 0x55	; 85
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	e5 e5       	ldi	r30, 0x55	; 85
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	88 60       	ori	r24, 0x08	; 8
    220e:	8c 93       	st	X, r24
    2210:	27 c0       	rjmp	.+78     	; 0x2260 <EXI_TriggerEdge+0x1fe>
				break;
			}
			break;
			case EX_INT2:
				switch(edge){
    2212:	8a 81       	ldd	r24, Y+2	; 0x02
    2214:	28 2f       	mov	r18, r24
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	3c 83       	std	Y+4, r19	; 0x04
    221a:	2b 83       	std	Y+3, r18	; 0x03
    221c:	8b 81       	ldd	r24, Y+3	; 0x03
    221e:	9c 81       	ldd	r25, Y+4	; 0x04
    2220:	82 30       	cpi	r24, 0x02	; 2
    2222:	91 05       	cpc	r25, r1
    2224:	31 f0       	breq	.+12     	; 0x2232 <EXI_TriggerEdge+0x1d0>
    2226:	2b 81       	ldd	r18, Y+3	; 0x03
    2228:	3c 81       	ldd	r19, Y+4	; 0x04
    222a:	23 30       	cpi	r18, 0x03	; 3
    222c:	31 05       	cpc	r19, r1
    222e:	49 f0       	breq	.+18     	; 0x2242 <EXI_TriggerEdge+0x1e0>
    2230:	10 c0       	rjmp	.+32     	; 0x2252 <EXI_TriggerEdge+0x1f0>
				case FALLING_EDGE:
					CLR_BIT(MCUCSR,ISC2);
    2232:	a4 e5       	ldi	r26, 0x54	; 84
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	e4 e5       	ldi	r30, 0x54	; 84
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 81       	ld	r24, Z
    223c:	8f 7b       	andi	r24, 0xBF	; 191
    223e:	8c 93       	st	X, r24
    2240:	0f c0       	rjmp	.+30     	; 0x2260 <EXI_TriggerEdge+0x1fe>
					break;
				case RISING_EDGE:
					SET_BIT(MCUCSR,ISC2);
    2242:	a4 e5       	ldi	r26, 0x54	; 84
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	e4 e5       	ldi	r30, 0x54	; 84
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	80 64       	ori	r24, 0x40	; 64
    224e:	8c 93       	st	X, r24
    2250:	07 c0       	rjmp	.+14     	; 0x2260 <EXI_TriggerEdge+0x1fe>
					break;
				default:   // Because we haven't handled all cases just cuz of data sheet
					CLR_BIT(MCUCSR,ISC2);
    2252:	a4 e5       	ldi	r26, 0x54	; 84
    2254:	b0 e0       	ldi	r27, 0x00	; 0
    2256:	e4 e5       	ldi	r30, 0x54	; 84
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	80 81       	ld	r24, Z
    225c:	8f 7b       	andi	r24, 0xBF	; 191
    225e:	8c 93       	st	X, r24
				}
				break;
	}
}
    2260:	2a 96       	adiw	r28, 0x0a	; 10
    2262:	0f b6       	in	r0, 0x3f	; 63
    2264:	f8 94       	cli
    2266:	de bf       	out	0x3e, r29	; 62
    2268:	0f be       	out	0x3f, r0	; 63
    226a:	cd bf       	out	0x3d, r28	; 61
    226c:	cf 91       	pop	r28
    226e:	df 91       	pop	r29
    2270:	08 95       	ret

00002272 <__vector_1>:
/*                     ISR                                              */
/************************************************************************/

/* What if the user forgot to send a function to SetCallBack, We made an initialization with NULLPTR, So we can't call a NULLPTR, it will give undefined behavior  */

ISR(INT0_vect){
    2272:	1f 92       	push	r1
    2274:	0f 92       	push	r0
    2276:	0f b6       	in	r0, 0x3f	; 63
    2278:	0f 92       	push	r0
    227a:	11 24       	eor	r1, r1
    227c:	2f 93       	push	r18
    227e:	3f 93       	push	r19
    2280:	4f 93       	push	r20
    2282:	5f 93       	push	r21
    2284:	6f 93       	push	r22
    2286:	7f 93       	push	r23
    2288:	8f 93       	push	r24
    228a:	9f 93       	push	r25
    228c:	af 93       	push	r26
    228e:	bf 93       	push	r27
    2290:	ef 93       	push	r30
    2292:	ff 93       	push	r31
    2294:	df 93       	push	r29
    2296:	cf 93       	push	r28
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
	if(INT0_Fptr != NULLPTR){
    229c:	80 91 3d 02 	lds	r24, 0x023D
    22a0:	90 91 3e 02 	lds	r25, 0x023E
    22a4:	00 97       	sbiw	r24, 0x00	; 0
    22a6:	29 f0       	breq	.+10     	; 0x22b2 <__vector_1+0x40>
		INT0_Fptr();
    22a8:	e0 91 3d 02 	lds	r30, 0x023D
    22ac:	f0 91 3e 02 	lds	r31, 0x023E
    22b0:	09 95       	icall
	}
}
    22b2:	cf 91       	pop	r28
    22b4:	df 91       	pop	r29
    22b6:	ff 91       	pop	r31
    22b8:	ef 91       	pop	r30
    22ba:	bf 91       	pop	r27
    22bc:	af 91       	pop	r26
    22be:	9f 91       	pop	r25
    22c0:	8f 91       	pop	r24
    22c2:	7f 91       	pop	r23
    22c4:	6f 91       	pop	r22
    22c6:	5f 91       	pop	r21
    22c8:	4f 91       	pop	r20
    22ca:	3f 91       	pop	r19
    22cc:	2f 91       	pop	r18
    22ce:	0f 90       	pop	r0
    22d0:	0f be       	out	0x3f, r0	; 63
    22d2:	0f 90       	pop	r0
    22d4:	1f 90       	pop	r1
    22d6:	18 95       	reti

000022d8 <__vector_2>:

ISR(INT1_vect){
    22d8:	1f 92       	push	r1
    22da:	0f 92       	push	r0
    22dc:	0f b6       	in	r0, 0x3f	; 63
    22de:	0f 92       	push	r0
    22e0:	11 24       	eor	r1, r1
    22e2:	2f 93       	push	r18
    22e4:	3f 93       	push	r19
    22e6:	4f 93       	push	r20
    22e8:	5f 93       	push	r21
    22ea:	6f 93       	push	r22
    22ec:	7f 93       	push	r23
    22ee:	8f 93       	push	r24
    22f0:	9f 93       	push	r25
    22f2:	af 93       	push	r26
    22f4:	bf 93       	push	r27
    22f6:	ef 93       	push	r30
    22f8:	ff 93       	push	r31
    22fa:	df 93       	push	r29
    22fc:	cf 93       	push	r28
    22fe:	cd b7       	in	r28, 0x3d	; 61
    2300:	de b7       	in	r29, 0x3e	; 62
	if(INT1_Fptr != NULLPTR){
    2302:	80 91 3f 02 	lds	r24, 0x023F
    2306:	90 91 40 02 	lds	r25, 0x0240
    230a:	00 97       	sbiw	r24, 0x00	; 0
    230c:	29 f0       	breq	.+10     	; 0x2318 <__vector_2+0x40>
		INT1_Fptr();
    230e:	e0 91 3f 02 	lds	r30, 0x023F
    2312:	f0 91 40 02 	lds	r31, 0x0240
    2316:	09 95       	icall
	}
}
    2318:	cf 91       	pop	r28
    231a:	df 91       	pop	r29
    231c:	ff 91       	pop	r31
    231e:	ef 91       	pop	r30
    2320:	bf 91       	pop	r27
    2322:	af 91       	pop	r26
    2324:	9f 91       	pop	r25
    2326:	8f 91       	pop	r24
    2328:	7f 91       	pop	r23
    232a:	6f 91       	pop	r22
    232c:	5f 91       	pop	r21
    232e:	4f 91       	pop	r20
    2330:	3f 91       	pop	r19
    2332:	2f 91       	pop	r18
    2334:	0f 90       	pop	r0
    2336:	0f be       	out	0x3f, r0	; 63
    2338:	0f 90       	pop	r0
    233a:	1f 90       	pop	r1
    233c:	18 95       	reti

0000233e <__vector_3>:

ISR(INT2_vect){
    233e:	1f 92       	push	r1
    2340:	0f 92       	push	r0
    2342:	0f b6       	in	r0, 0x3f	; 63
    2344:	0f 92       	push	r0
    2346:	11 24       	eor	r1, r1
    2348:	2f 93       	push	r18
    234a:	3f 93       	push	r19
    234c:	4f 93       	push	r20
    234e:	5f 93       	push	r21
    2350:	6f 93       	push	r22
    2352:	7f 93       	push	r23
    2354:	8f 93       	push	r24
    2356:	9f 93       	push	r25
    2358:	af 93       	push	r26
    235a:	bf 93       	push	r27
    235c:	ef 93       	push	r30
    235e:	ff 93       	push	r31
    2360:	df 93       	push	r29
    2362:	cf 93       	push	r28
    2364:	cd b7       	in	r28, 0x3d	; 61
    2366:	de b7       	in	r29, 0x3e	; 62
	if(INT2_Fptr != NULLPTR){
    2368:	80 91 41 02 	lds	r24, 0x0241
    236c:	90 91 42 02 	lds	r25, 0x0242
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	29 f0       	breq	.+10     	; 0x237e <__vector_3+0x40>
		INT2_Fptr();
    2374:	e0 91 41 02 	lds	r30, 0x0241
    2378:	f0 91 42 02 	lds	r31, 0x0242
    237c:	09 95       	icall
	}
}
    237e:	cf 91       	pop	r28
    2380:	df 91       	pop	r29
    2382:	ff 91       	pop	r31
    2384:	ef 91       	pop	r30
    2386:	bf 91       	pop	r27
    2388:	af 91       	pop	r26
    238a:	9f 91       	pop	r25
    238c:	8f 91       	pop	r24
    238e:	7f 91       	pop	r23
    2390:	6f 91       	pop	r22
    2392:	5f 91       	pop	r21
    2394:	4f 91       	pop	r20
    2396:	3f 91       	pop	r19
    2398:	2f 91       	pop	r18
    239a:	0f 90       	pop	r0
    239c:	0f be       	out	0x3f, r0	; 63
    239e:	0f 90       	pop	r0
    23a0:	1f 90       	pop	r1
    23a2:	18 95       	reti

000023a4 <DIO_ES_tSetPinDirection>:
 * DIO_ES_tSetPinDirection is used to set pin direction
 * ( INPUT or OUTPUT )
 */

ES_t DIO_ES_tSetPinDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Dir_Type copy_u8_PinDirection)
{
    23a4:	df 93       	push	r29
    23a6:	cf 93       	push	r28
    23a8:	00 d0       	rcall	.+0      	; 0x23aa <DIO_ES_tSetPinDirection+0x6>
    23aa:	00 d0       	rcall	.+0      	; 0x23ac <DIO_ES_tSetPinDirection+0x8>
    23ac:	cd b7       	in	r28, 0x3d	; 61
    23ae:	de b7       	in	r29, 0x3e	; 62
    23b0:	89 83       	std	Y+1, r24	; 0x01
    23b2:	6a 83       	std	Y+2, r22	; 0x02
    23b4:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    23b6:	8a 81       	ldd	r24, Y+2	; 0x02
    23b8:	88 30       	cpi	r24, 0x08	; 8
    23ba:	18 f0       	brcs	.+6      	; 0x23c2 <DIO_ES_tSetPinDirection+0x1e>
		return ES_NOT_OK;
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	8c 83       	std	Y+4, r24	; 0x04
    23c0:	d8 c0       	rjmp	.+432    	; 0x2572 <DIO_ES_tSetPinDirection+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
    23c4:	88 23       	and	r24, r24
    23c6:	91 f5       	brne	.+100    	; 0x242c <DIO_ES_tSetPinDirection+0x88>
		if(copy_u8_PinDirection == OUTPUT){
    23c8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ca:	81 30       	cpi	r24, 0x01	; 1
    23cc:	a1 f4       	brne	.+40     	; 0x23f6 <DIO_ES_tSetPinDirection+0x52>
			SET_BIT(DDRA,copy_u8_PinId);
    23ce:	aa e3       	ldi	r26, 0x3A	; 58
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	ea e3       	ldi	r30, 0x3A	; 58
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	80 81       	ld	r24, Z
    23d8:	48 2f       	mov	r20, r24
    23da:	8a 81       	ldd	r24, Y+2	; 0x02
    23dc:	28 2f       	mov	r18, r24
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	02 2e       	mov	r0, r18
    23e6:	02 c0       	rjmp	.+4      	; 0x23ec <DIO_ES_tSetPinDirection+0x48>
    23e8:	88 0f       	add	r24, r24
    23ea:	99 1f       	adc	r25, r25
    23ec:	0a 94       	dec	r0
    23ee:	e2 f7       	brpl	.-8      	; 0x23e8 <DIO_ES_tSetPinDirection+0x44>
    23f0:	84 2b       	or	r24, r20
    23f2:	8c 93       	st	X, r24
    23f4:	bd c0       	rjmp	.+378    	; 0x2570 <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    23f6:	8b 81       	ldd	r24, Y+3	; 0x03
    23f8:	88 23       	and	r24, r24
    23fa:	a9 f4       	brne	.+42     	; 0x2426 <DIO_ES_tSetPinDirection+0x82>
			CLR_BIT(DDRA,copy_u8_PinId);
    23fc:	aa e3       	ldi	r26, 0x3A	; 58
    23fe:	b0 e0       	ldi	r27, 0x00	; 0
    2400:	ea e3       	ldi	r30, 0x3A	; 58
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	80 81       	ld	r24, Z
    2406:	48 2f       	mov	r20, r24
    2408:	8a 81       	ldd	r24, Y+2	; 0x02
    240a:	28 2f       	mov	r18, r24
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	02 2e       	mov	r0, r18
    2414:	02 c0       	rjmp	.+4      	; 0x241a <DIO_ES_tSetPinDirection+0x76>
    2416:	88 0f       	add	r24, r24
    2418:	99 1f       	adc	r25, r25
    241a:	0a 94       	dec	r0
    241c:	e2 f7       	brpl	.-8      	; 0x2416 <DIO_ES_tSetPinDirection+0x72>
    241e:	80 95       	com	r24
    2420:	84 23       	and	r24, r20
    2422:	8c 93       	st	X, r24
    2424:	a5 c0       	rjmp	.+330    	; 0x2570 <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	8c 83       	std	Y+4, r24	; 0x04
    242a:	a3 c0       	rjmp	.+326    	; 0x2572 <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    242c:	89 81       	ldd	r24, Y+1	; 0x01
    242e:	81 30       	cpi	r24, 0x01	; 1
    2430:	91 f5       	brne	.+100    	; 0x2496 <DIO_ES_tSetPinDirection+0xf2>
		if(copy_u8_PinDirection == OUTPUT){
    2432:	8b 81       	ldd	r24, Y+3	; 0x03
    2434:	81 30       	cpi	r24, 0x01	; 1
    2436:	a1 f4       	brne	.+40     	; 0x2460 <DIO_ES_tSetPinDirection+0xbc>
			SET_BIT(DDRB,copy_u8_PinId);
    2438:	a7 e3       	ldi	r26, 0x37	; 55
    243a:	b0 e0       	ldi	r27, 0x00	; 0
    243c:	e7 e3       	ldi	r30, 0x37	; 55
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	80 81       	ld	r24, Z
    2442:	48 2f       	mov	r20, r24
    2444:	8a 81       	ldd	r24, Y+2	; 0x02
    2446:	28 2f       	mov	r18, r24
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	02 2e       	mov	r0, r18
    2450:	02 c0       	rjmp	.+4      	; 0x2456 <DIO_ES_tSetPinDirection+0xb2>
    2452:	88 0f       	add	r24, r24
    2454:	99 1f       	adc	r25, r25
    2456:	0a 94       	dec	r0
    2458:	e2 f7       	brpl	.-8      	; 0x2452 <DIO_ES_tSetPinDirection+0xae>
    245a:	84 2b       	or	r24, r20
    245c:	8c 93       	st	X, r24
    245e:	88 c0       	rjmp	.+272    	; 0x2570 <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    2460:	8b 81       	ldd	r24, Y+3	; 0x03
    2462:	88 23       	and	r24, r24
    2464:	a9 f4       	brne	.+42     	; 0x2490 <DIO_ES_tSetPinDirection+0xec>
			CLR_BIT(DDRB,copy_u8_PinId);
    2466:	a7 e3       	ldi	r26, 0x37	; 55
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	e7 e3       	ldi	r30, 0x37	; 55
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	80 81       	ld	r24, Z
    2470:	48 2f       	mov	r20, r24
    2472:	8a 81       	ldd	r24, Y+2	; 0x02
    2474:	28 2f       	mov	r18, r24
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	02 2e       	mov	r0, r18
    247e:	02 c0       	rjmp	.+4      	; 0x2484 <DIO_ES_tSetPinDirection+0xe0>
    2480:	88 0f       	add	r24, r24
    2482:	99 1f       	adc	r25, r25
    2484:	0a 94       	dec	r0
    2486:	e2 f7       	brpl	.-8      	; 0x2480 <DIO_ES_tSetPinDirection+0xdc>
    2488:	80 95       	com	r24
    248a:	84 23       	and	r24, r20
    248c:	8c 93       	st	X, r24
    248e:	70 c0       	rjmp	.+224    	; 0x2570 <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	8c 83       	std	Y+4, r24	; 0x04
    2494:	6e c0       	rjmp	.+220    	; 0x2572 <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    2496:	89 81       	ldd	r24, Y+1	; 0x01
    2498:	82 30       	cpi	r24, 0x02	; 2
    249a:	91 f5       	brne	.+100    	; 0x2500 <DIO_ES_tSetPinDirection+0x15c>
		if(copy_u8_PinDirection == OUTPUT){
    249c:	8b 81       	ldd	r24, Y+3	; 0x03
    249e:	81 30       	cpi	r24, 0x01	; 1
    24a0:	a1 f4       	brne	.+40     	; 0x24ca <DIO_ES_tSetPinDirection+0x126>
			SET_BIT(DDRC,copy_u8_PinId);
    24a2:	a4 e3       	ldi	r26, 0x34	; 52
    24a4:	b0 e0       	ldi	r27, 0x00	; 0
    24a6:	e4 e3       	ldi	r30, 0x34	; 52
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	80 81       	ld	r24, Z
    24ac:	48 2f       	mov	r20, r24
    24ae:	8a 81       	ldd	r24, Y+2	; 0x02
    24b0:	28 2f       	mov	r18, r24
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	02 2e       	mov	r0, r18
    24ba:	02 c0       	rjmp	.+4      	; 0x24c0 <DIO_ES_tSetPinDirection+0x11c>
    24bc:	88 0f       	add	r24, r24
    24be:	99 1f       	adc	r25, r25
    24c0:	0a 94       	dec	r0
    24c2:	e2 f7       	brpl	.-8      	; 0x24bc <DIO_ES_tSetPinDirection+0x118>
    24c4:	84 2b       	or	r24, r20
    24c6:	8c 93       	st	X, r24
    24c8:	53 c0       	rjmp	.+166    	; 0x2570 <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    24ca:	8b 81       	ldd	r24, Y+3	; 0x03
    24cc:	88 23       	and	r24, r24
    24ce:	a9 f4       	brne	.+42     	; 0x24fa <DIO_ES_tSetPinDirection+0x156>
			CLR_BIT(DDRC,copy_u8_PinId);
    24d0:	a4 e3       	ldi	r26, 0x34	; 52
    24d2:	b0 e0       	ldi	r27, 0x00	; 0
    24d4:	e4 e3       	ldi	r30, 0x34	; 52
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	80 81       	ld	r24, Z
    24da:	48 2f       	mov	r20, r24
    24dc:	8a 81       	ldd	r24, Y+2	; 0x02
    24de:	28 2f       	mov	r18, r24
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	02 2e       	mov	r0, r18
    24e8:	02 c0       	rjmp	.+4      	; 0x24ee <DIO_ES_tSetPinDirection+0x14a>
    24ea:	88 0f       	add	r24, r24
    24ec:	99 1f       	adc	r25, r25
    24ee:	0a 94       	dec	r0
    24f0:	e2 f7       	brpl	.-8      	; 0x24ea <DIO_ES_tSetPinDirection+0x146>
    24f2:	80 95       	com	r24
    24f4:	84 23       	and	r24, r20
    24f6:	8c 93       	st	X, r24
    24f8:	3b c0       	rjmp	.+118    	; 0x2570 <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	8c 83       	std	Y+4, r24	; 0x04
    24fe:	39 c0       	rjmp	.+114    	; 0x2572 <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    2500:	89 81       	ldd	r24, Y+1	; 0x01
    2502:	83 30       	cpi	r24, 0x03	; 3
    2504:	91 f5       	brne	.+100    	; 0x256a <DIO_ES_tSetPinDirection+0x1c6>
		if(copy_u8_PinDirection == OUTPUT){
    2506:	8b 81       	ldd	r24, Y+3	; 0x03
    2508:	81 30       	cpi	r24, 0x01	; 1
    250a:	a1 f4       	brne	.+40     	; 0x2534 <DIO_ES_tSetPinDirection+0x190>
			SET_BIT(DDRD,copy_u8_PinId);
    250c:	a1 e3       	ldi	r26, 0x31	; 49
    250e:	b0 e0       	ldi	r27, 0x00	; 0
    2510:	e1 e3       	ldi	r30, 0x31	; 49
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	80 81       	ld	r24, Z
    2516:	48 2f       	mov	r20, r24
    2518:	8a 81       	ldd	r24, Y+2	; 0x02
    251a:	28 2f       	mov	r18, r24
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	02 2e       	mov	r0, r18
    2524:	02 c0       	rjmp	.+4      	; 0x252a <DIO_ES_tSetPinDirection+0x186>
    2526:	88 0f       	add	r24, r24
    2528:	99 1f       	adc	r25, r25
    252a:	0a 94       	dec	r0
    252c:	e2 f7       	brpl	.-8      	; 0x2526 <DIO_ES_tSetPinDirection+0x182>
    252e:	84 2b       	or	r24, r20
    2530:	8c 93       	st	X, r24
    2532:	1e c0       	rjmp	.+60     	; 0x2570 <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    2534:	8b 81       	ldd	r24, Y+3	; 0x03
    2536:	88 23       	and	r24, r24
    2538:	a9 f4       	brne	.+42     	; 0x2564 <DIO_ES_tSetPinDirection+0x1c0>
			CLR_BIT(DDRD,copy_u8_PinId);
    253a:	a1 e3       	ldi	r26, 0x31	; 49
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	e1 e3       	ldi	r30, 0x31	; 49
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	80 81       	ld	r24, Z
    2544:	48 2f       	mov	r20, r24
    2546:	8a 81       	ldd	r24, Y+2	; 0x02
    2548:	28 2f       	mov	r18, r24
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	81 e0       	ldi	r24, 0x01	; 1
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	02 2e       	mov	r0, r18
    2552:	02 c0       	rjmp	.+4      	; 0x2558 <DIO_ES_tSetPinDirection+0x1b4>
    2554:	88 0f       	add	r24, r24
    2556:	99 1f       	adc	r25, r25
    2558:	0a 94       	dec	r0
    255a:	e2 f7       	brpl	.-8      	; 0x2554 <DIO_ES_tSetPinDirection+0x1b0>
    255c:	80 95       	com	r24
    255e:	84 23       	and	r24, r20
    2560:	8c 93       	st	X, r24
    2562:	06 c0       	rjmp	.+12     	; 0x2570 <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	8c 83       	std	Y+4, r24	; 0x04
    2568:	04 c0       	rjmp	.+8      	; 0x2572 <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else{
		return ES_NOT_OK;
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	8c 83       	std	Y+4, r24	; 0x04
    256e:	01 c0       	rjmp	.+2      	; 0x2572 <DIO_ES_tSetPinDirection+0x1ce>
	}
	return ES_OK;
    2570:	1c 82       	std	Y+4, r1	; 0x04
    2572:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2574:	0f 90       	pop	r0
    2576:	0f 90       	pop	r0
    2578:	0f 90       	pop	r0
    257a:	0f 90       	pop	r0
    257c:	cf 91       	pop	r28
    257e:	df 91       	pop	r29
    2580:	08 95       	ret

00002582 <DIO_ES_tSetPinValue>:
 * DIO_ES_tSetPinValue is used to set pin value
 * ( LOW or HIGH )
 */

ES_t DIO_ES_tSetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type copy_u8_PinValue)
{
    2582:	df 93       	push	r29
    2584:	cf 93       	push	r28
    2586:	00 d0       	rcall	.+0      	; 0x2588 <DIO_ES_tSetPinValue+0x6>
    2588:	00 d0       	rcall	.+0      	; 0x258a <DIO_ES_tSetPinValue+0x8>
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
    258e:	89 83       	std	Y+1, r24	; 0x01
    2590:	6a 83       	std	Y+2, r22	; 0x02
    2592:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    2594:	8a 81       	ldd	r24, Y+2	; 0x02
    2596:	88 30       	cpi	r24, 0x08	; 8
    2598:	18 f0       	brcs	.+6      	; 0x25a0 <DIO_ES_tSetPinValue+0x1e>
		return ES_NOT_OK;
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	8c 83       	std	Y+4, r24	; 0x04
    259e:	d8 c0       	rjmp	.+432    	; 0x2750 <DIO_ES_tSetPinValue+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    25a0:	89 81       	ldd	r24, Y+1	; 0x01
    25a2:	88 23       	and	r24, r24
    25a4:	91 f5       	brne	.+100    	; 0x260a <DIO_ES_tSetPinValue+0x88>
		if(copy_u8_PinValue == HIGH){
    25a6:	8b 81       	ldd	r24, Y+3	; 0x03
    25a8:	81 30       	cpi	r24, 0x01	; 1
    25aa:	a1 f4       	brne	.+40     	; 0x25d4 <DIO_ES_tSetPinValue+0x52>
			SET_BIT(PORTA,copy_u8_PinId);
    25ac:	ab e3       	ldi	r26, 0x3B	; 59
    25ae:	b0 e0       	ldi	r27, 0x00	; 0
    25b0:	eb e3       	ldi	r30, 0x3B	; 59
    25b2:	f0 e0       	ldi	r31, 0x00	; 0
    25b4:	80 81       	ld	r24, Z
    25b6:	48 2f       	mov	r20, r24
    25b8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ba:	28 2f       	mov	r18, r24
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	02 2e       	mov	r0, r18
    25c4:	02 c0       	rjmp	.+4      	; 0x25ca <DIO_ES_tSetPinValue+0x48>
    25c6:	88 0f       	add	r24, r24
    25c8:	99 1f       	adc	r25, r25
    25ca:	0a 94       	dec	r0
    25cc:	e2 f7       	brpl	.-8      	; 0x25c6 <DIO_ES_tSetPinValue+0x44>
    25ce:	84 2b       	or	r24, r20
    25d0:	8c 93       	st	X, r24
    25d2:	bd c0       	rjmp	.+378    	; 0x274e <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    25d4:	8b 81       	ldd	r24, Y+3	; 0x03
    25d6:	88 23       	and	r24, r24
    25d8:	a9 f4       	brne	.+42     	; 0x2604 <DIO_ES_tSetPinValue+0x82>
			CLR_BIT(PORTA,copy_u8_PinId);
    25da:	ab e3       	ldi	r26, 0x3B	; 59
    25dc:	b0 e0       	ldi	r27, 0x00	; 0
    25de:	eb e3       	ldi	r30, 0x3B	; 59
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	80 81       	ld	r24, Z
    25e4:	48 2f       	mov	r20, r24
    25e6:	8a 81       	ldd	r24, Y+2	; 0x02
    25e8:	28 2f       	mov	r18, r24
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	02 2e       	mov	r0, r18
    25f2:	02 c0       	rjmp	.+4      	; 0x25f8 <DIO_ES_tSetPinValue+0x76>
    25f4:	88 0f       	add	r24, r24
    25f6:	99 1f       	adc	r25, r25
    25f8:	0a 94       	dec	r0
    25fa:	e2 f7       	brpl	.-8      	; 0x25f4 <DIO_ES_tSetPinValue+0x72>
    25fc:	80 95       	com	r24
    25fe:	84 23       	and	r24, r20
    2600:	8c 93       	st	X, r24
    2602:	a5 c0       	rjmp	.+330    	; 0x274e <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	8c 83       	std	Y+4, r24	; 0x04
    2608:	a3 c0       	rjmp	.+326    	; 0x2750 <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    260a:	89 81       	ldd	r24, Y+1	; 0x01
    260c:	81 30       	cpi	r24, 0x01	; 1
    260e:	91 f5       	brne	.+100    	; 0x2674 <DIO_ES_tSetPinValue+0xf2>
		if(copy_u8_PinValue == HIGH){
    2610:	8b 81       	ldd	r24, Y+3	; 0x03
    2612:	81 30       	cpi	r24, 0x01	; 1
    2614:	a1 f4       	brne	.+40     	; 0x263e <DIO_ES_tSetPinValue+0xbc>
			SET_BIT(PORTB,copy_u8_PinId);
    2616:	a8 e3       	ldi	r26, 0x38	; 56
    2618:	b0 e0       	ldi	r27, 0x00	; 0
    261a:	e8 e3       	ldi	r30, 0x38	; 56
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	80 81       	ld	r24, Z
    2620:	48 2f       	mov	r20, r24
    2622:	8a 81       	ldd	r24, Y+2	; 0x02
    2624:	28 2f       	mov	r18, r24
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	02 2e       	mov	r0, r18
    262e:	02 c0       	rjmp	.+4      	; 0x2634 <DIO_ES_tSetPinValue+0xb2>
    2630:	88 0f       	add	r24, r24
    2632:	99 1f       	adc	r25, r25
    2634:	0a 94       	dec	r0
    2636:	e2 f7       	brpl	.-8      	; 0x2630 <DIO_ES_tSetPinValue+0xae>
    2638:	84 2b       	or	r24, r20
    263a:	8c 93       	st	X, r24
    263c:	88 c0       	rjmp	.+272    	; 0x274e <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    263e:	8b 81       	ldd	r24, Y+3	; 0x03
    2640:	88 23       	and	r24, r24
    2642:	a9 f4       	brne	.+42     	; 0x266e <DIO_ES_tSetPinValue+0xec>
			CLR_BIT(PORTB,copy_u8_PinId);
    2644:	a8 e3       	ldi	r26, 0x38	; 56
    2646:	b0 e0       	ldi	r27, 0x00	; 0
    2648:	e8 e3       	ldi	r30, 0x38	; 56
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	80 81       	ld	r24, Z
    264e:	48 2f       	mov	r20, r24
    2650:	8a 81       	ldd	r24, Y+2	; 0x02
    2652:	28 2f       	mov	r18, r24
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	02 2e       	mov	r0, r18
    265c:	02 c0       	rjmp	.+4      	; 0x2662 <DIO_ES_tSetPinValue+0xe0>
    265e:	88 0f       	add	r24, r24
    2660:	99 1f       	adc	r25, r25
    2662:	0a 94       	dec	r0
    2664:	e2 f7       	brpl	.-8      	; 0x265e <DIO_ES_tSetPinValue+0xdc>
    2666:	80 95       	com	r24
    2668:	84 23       	and	r24, r20
    266a:	8c 93       	st	X, r24
    266c:	70 c0       	rjmp	.+224    	; 0x274e <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	8c 83       	std	Y+4, r24	; 0x04
    2672:	6e c0       	rjmp	.+220    	; 0x2750 <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    2674:	89 81       	ldd	r24, Y+1	; 0x01
    2676:	82 30       	cpi	r24, 0x02	; 2
    2678:	91 f5       	brne	.+100    	; 0x26de <DIO_ES_tSetPinValue+0x15c>
		if(copy_u8_PinValue == HIGH){
    267a:	8b 81       	ldd	r24, Y+3	; 0x03
    267c:	81 30       	cpi	r24, 0x01	; 1
    267e:	a1 f4       	brne	.+40     	; 0x26a8 <DIO_ES_tSetPinValue+0x126>
			SET_BIT(PORTC,copy_u8_PinId);
    2680:	a5 e3       	ldi	r26, 0x35	; 53
    2682:	b0 e0       	ldi	r27, 0x00	; 0
    2684:	e5 e3       	ldi	r30, 0x35	; 53
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	80 81       	ld	r24, Z
    268a:	48 2f       	mov	r20, r24
    268c:	8a 81       	ldd	r24, Y+2	; 0x02
    268e:	28 2f       	mov	r18, r24
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	81 e0       	ldi	r24, 0x01	; 1
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	02 2e       	mov	r0, r18
    2698:	02 c0       	rjmp	.+4      	; 0x269e <DIO_ES_tSetPinValue+0x11c>
    269a:	88 0f       	add	r24, r24
    269c:	99 1f       	adc	r25, r25
    269e:	0a 94       	dec	r0
    26a0:	e2 f7       	brpl	.-8      	; 0x269a <DIO_ES_tSetPinValue+0x118>
    26a2:	84 2b       	or	r24, r20
    26a4:	8c 93       	st	X, r24
    26a6:	53 c0       	rjmp	.+166    	; 0x274e <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    26a8:	8b 81       	ldd	r24, Y+3	; 0x03
    26aa:	88 23       	and	r24, r24
    26ac:	a9 f4       	brne	.+42     	; 0x26d8 <DIO_ES_tSetPinValue+0x156>
			CLR_BIT(PORTC,copy_u8_PinId);
    26ae:	a5 e3       	ldi	r26, 0x35	; 53
    26b0:	b0 e0       	ldi	r27, 0x00	; 0
    26b2:	e5 e3       	ldi	r30, 0x35	; 53
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	80 81       	ld	r24, Z
    26b8:	48 2f       	mov	r20, r24
    26ba:	8a 81       	ldd	r24, Y+2	; 0x02
    26bc:	28 2f       	mov	r18, r24
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	02 2e       	mov	r0, r18
    26c6:	02 c0       	rjmp	.+4      	; 0x26cc <DIO_ES_tSetPinValue+0x14a>
    26c8:	88 0f       	add	r24, r24
    26ca:	99 1f       	adc	r25, r25
    26cc:	0a 94       	dec	r0
    26ce:	e2 f7       	brpl	.-8      	; 0x26c8 <DIO_ES_tSetPinValue+0x146>
    26d0:	80 95       	com	r24
    26d2:	84 23       	and	r24, r20
    26d4:	8c 93       	st	X, r24
    26d6:	3b c0       	rjmp	.+118    	; 0x274e <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	8c 83       	std	Y+4, r24	; 0x04
    26dc:	39 c0       	rjmp	.+114    	; 0x2750 <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    26de:	89 81       	ldd	r24, Y+1	; 0x01
    26e0:	83 30       	cpi	r24, 0x03	; 3
    26e2:	91 f5       	brne	.+100    	; 0x2748 <DIO_ES_tSetPinValue+0x1c6>
		if(copy_u8_PinValue == HIGH){
    26e4:	8b 81       	ldd	r24, Y+3	; 0x03
    26e6:	81 30       	cpi	r24, 0x01	; 1
    26e8:	a1 f4       	brne	.+40     	; 0x2712 <DIO_ES_tSetPinValue+0x190>
			SET_BIT(PORTD,copy_u8_PinId);
    26ea:	a2 e3       	ldi	r26, 0x32	; 50
    26ec:	b0 e0       	ldi	r27, 0x00	; 0
    26ee:	e2 e3       	ldi	r30, 0x32	; 50
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	80 81       	ld	r24, Z
    26f4:	48 2f       	mov	r20, r24
    26f6:	8a 81       	ldd	r24, Y+2	; 0x02
    26f8:	28 2f       	mov	r18, r24
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	02 2e       	mov	r0, r18
    2702:	02 c0       	rjmp	.+4      	; 0x2708 <DIO_ES_tSetPinValue+0x186>
    2704:	88 0f       	add	r24, r24
    2706:	99 1f       	adc	r25, r25
    2708:	0a 94       	dec	r0
    270a:	e2 f7       	brpl	.-8      	; 0x2704 <DIO_ES_tSetPinValue+0x182>
    270c:	84 2b       	or	r24, r20
    270e:	8c 93       	st	X, r24
    2710:	1e c0       	rjmp	.+60     	; 0x274e <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    2712:	8b 81       	ldd	r24, Y+3	; 0x03
    2714:	88 23       	and	r24, r24
    2716:	a9 f4       	brne	.+42     	; 0x2742 <DIO_ES_tSetPinValue+0x1c0>
			CLR_BIT(PORTD,copy_u8_PinId);
    2718:	a2 e3       	ldi	r26, 0x32	; 50
    271a:	b0 e0       	ldi	r27, 0x00	; 0
    271c:	e2 e3       	ldi	r30, 0x32	; 50
    271e:	f0 e0       	ldi	r31, 0x00	; 0
    2720:	80 81       	ld	r24, Z
    2722:	48 2f       	mov	r20, r24
    2724:	8a 81       	ldd	r24, Y+2	; 0x02
    2726:	28 2f       	mov	r18, r24
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	02 2e       	mov	r0, r18
    2730:	02 c0       	rjmp	.+4      	; 0x2736 <DIO_ES_tSetPinValue+0x1b4>
    2732:	88 0f       	add	r24, r24
    2734:	99 1f       	adc	r25, r25
    2736:	0a 94       	dec	r0
    2738:	e2 f7       	brpl	.-8      	; 0x2732 <DIO_ES_tSetPinValue+0x1b0>
    273a:	80 95       	com	r24
    273c:	84 23       	and	r24, r20
    273e:	8c 93       	st	X, r24
    2740:	06 c0       	rjmp	.+12     	; 0x274e <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	8c 83       	std	Y+4, r24	; 0x04
    2746:	04 c0       	rjmp	.+8      	; 0x2750 <DIO_ES_tSetPinValue+0x1ce>
		}
	}else{
		return ES_NOT_OK;
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	8c 83       	std	Y+4, r24	; 0x04
    274c:	01 c0       	rjmp	.+2      	; 0x2750 <DIO_ES_tSetPinValue+0x1ce>
	}
	return ES_OK;
    274e:	1c 82       	std	Y+4, r1	; 0x04
    2750:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2752:	0f 90       	pop	r0
    2754:	0f 90       	pop	r0
    2756:	0f 90       	pop	r0
    2758:	0f 90       	pop	r0
    275a:	cf 91       	pop	r28
    275c:	df 91       	pop	r29
    275e:	08 95       	ret

00002760 <DIO_ES_tGetPinValue>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tGetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type* copy_pu8_PinValue)
{
    2760:	df 93       	push	r29
    2762:	cf 93       	push	r28
    2764:	00 d0       	rcall	.+0      	; 0x2766 <DIO_ES_tGetPinValue+0x6>
    2766:	00 d0       	rcall	.+0      	; 0x2768 <DIO_ES_tGetPinValue+0x8>
    2768:	0f 92       	push	r0
    276a:	cd b7       	in	r28, 0x3d	; 61
    276c:	de b7       	in	r29, 0x3e	; 62
    276e:	89 83       	std	Y+1, r24	; 0x01
    2770:	6a 83       	std	Y+2, r22	; 0x02
    2772:	5c 83       	std	Y+4, r21	; 0x04
    2774:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    2776:	8a 81       	ldd	r24, Y+2	; 0x02
    2778:	88 30       	cpi	r24, 0x08	; 8
    277a:	18 f0       	brcs	.+6      	; 0x2782 <DIO_ES_tGetPinValue+0x22>
		return ES_NOT_OK;
    277c:	41 e0       	ldi	r20, 0x01	; 1
    277e:	4d 83       	std	Y+5, r20	; 0x05
    2780:	60 c0       	rjmp	.+192    	; 0x2842 <DIO_ES_tGetPinValue+0xe2>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    2782:	89 81       	ldd	r24, Y+1	; 0x01
    2784:	88 23       	and	r24, r24
    2786:	a1 f4       	brne	.+40     	; 0x27b0 <DIO_ES_tGetPinValue+0x50>
		*copy_pu8_PinValue = GET_BIT(PINA,copy_u8_PinId);
    2788:	e9 e3       	ldi	r30, 0x39	; 57
    278a:	f0 e0       	ldi	r31, 0x00	; 0
    278c:	80 81       	ld	r24, Z
    278e:	28 2f       	mov	r18, r24
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	8a 81       	ldd	r24, Y+2	; 0x02
    2794:	88 2f       	mov	r24, r24
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	a9 01       	movw	r20, r18
    279a:	02 c0       	rjmp	.+4      	; 0x27a0 <DIO_ES_tGetPinValue+0x40>
    279c:	55 95       	asr	r21
    279e:	47 95       	ror	r20
    27a0:	8a 95       	dec	r24
    27a2:	e2 f7       	brpl	.-8      	; 0x279c <DIO_ES_tGetPinValue+0x3c>
    27a4:	ca 01       	movw	r24, r20
    27a6:	81 70       	andi	r24, 0x01	; 1
    27a8:	eb 81       	ldd	r30, Y+3	; 0x03
    27aa:	fc 81       	ldd	r31, Y+4	; 0x04
    27ac:	80 83       	st	Z, r24
    27ae:	48 c0       	rjmp	.+144    	; 0x2840 <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    27b0:	89 81       	ldd	r24, Y+1	; 0x01
    27b2:	81 30       	cpi	r24, 0x01	; 1
    27b4:	a1 f4       	brne	.+40     	; 0x27de <DIO_ES_tGetPinValue+0x7e>
		*copy_pu8_PinValue = GET_BIT(PINB,copy_u8_PinId);
    27b6:	e6 e3       	ldi	r30, 0x36	; 54
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	80 81       	ld	r24, Z
    27bc:	28 2f       	mov	r18, r24
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	8a 81       	ldd	r24, Y+2	; 0x02
    27c2:	88 2f       	mov	r24, r24
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	a9 01       	movw	r20, r18
    27c8:	02 c0       	rjmp	.+4      	; 0x27ce <DIO_ES_tGetPinValue+0x6e>
    27ca:	55 95       	asr	r21
    27cc:	47 95       	ror	r20
    27ce:	8a 95       	dec	r24
    27d0:	e2 f7       	brpl	.-8      	; 0x27ca <DIO_ES_tGetPinValue+0x6a>
    27d2:	ca 01       	movw	r24, r20
    27d4:	81 70       	andi	r24, 0x01	; 1
    27d6:	eb 81       	ldd	r30, Y+3	; 0x03
    27d8:	fc 81       	ldd	r31, Y+4	; 0x04
    27da:	80 83       	st	Z, r24
    27dc:	31 c0       	rjmp	.+98     	; 0x2840 <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    27de:	89 81       	ldd	r24, Y+1	; 0x01
    27e0:	82 30       	cpi	r24, 0x02	; 2
    27e2:	a1 f4       	brne	.+40     	; 0x280c <DIO_ES_tGetPinValue+0xac>
		*copy_pu8_PinValue = GET_BIT(PINC,copy_u8_PinId);
    27e4:	e3 e3       	ldi	r30, 0x33	; 51
    27e6:	f0 e0       	ldi	r31, 0x00	; 0
    27e8:	80 81       	ld	r24, Z
    27ea:	28 2f       	mov	r18, r24
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	8a 81       	ldd	r24, Y+2	; 0x02
    27f0:	88 2f       	mov	r24, r24
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	a9 01       	movw	r20, r18
    27f6:	02 c0       	rjmp	.+4      	; 0x27fc <DIO_ES_tGetPinValue+0x9c>
    27f8:	55 95       	asr	r21
    27fa:	47 95       	ror	r20
    27fc:	8a 95       	dec	r24
    27fe:	e2 f7       	brpl	.-8      	; 0x27f8 <DIO_ES_tGetPinValue+0x98>
    2800:	ca 01       	movw	r24, r20
    2802:	81 70       	andi	r24, 0x01	; 1
    2804:	eb 81       	ldd	r30, Y+3	; 0x03
    2806:	fc 81       	ldd	r31, Y+4	; 0x04
    2808:	80 83       	st	Z, r24
    280a:	1a c0       	rjmp	.+52     	; 0x2840 <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    280c:	89 81       	ldd	r24, Y+1	; 0x01
    280e:	83 30       	cpi	r24, 0x03	; 3
    2810:	a1 f4       	brne	.+40     	; 0x283a <DIO_ES_tGetPinValue+0xda>
		*copy_pu8_PinValue = GET_BIT(PIND,copy_u8_PinId);
    2812:	e0 e3       	ldi	r30, 0x30	; 48
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	80 81       	ld	r24, Z
    2818:	28 2f       	mov	r18, r24
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	8a 81       	ldd	r24, Y+2	; 0x02
    281e:	88 2f       	mov	r24, r24
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	a9 01       	movw	r20, r18
    2824:	02 c0       	rjmp	.+4      	; 0x282a <DIO_ES_tGetPinValue+0xca>
    2826:	55 95       	asr	r21
    2828:	47 95       	ror	r20
    282a:	8a 95       	dec	r24
    282c:	e2 f7       	brpl	.-8      	; 0x2826 <DIO_ES_tGetPinValue+0xc6>
    282e:	ca 01       	movw	r24, r20
    2830:	81 70       	andi	r24, 0x01	; 1
    2832:	eb 81       	ldd	r30, Y+3	; 0x03
    2834:	fc 81       	ldd	r31, Y+4	; 0x04
    2836:	80 83       	st	Z, r24
    2838:	03 c0       	rjmp	.+6      	; 0x2840 <DIO_ES_tGetPinValue+0xe0>
	}else{
		return ES_NOT_OK;
    283a:	51 e0       	ldi	r21, 0x01	; 1
    283c:	5d 83       	std	Y+5, r21	; 0x05
    283e:	01 c0       	rjmp	.+2      	; 0x2842 <DIO_ES_tGetPinValue+0xe2>
	}
	return ES_OK;
    2840:	1d 82       	std	Y+5, r1	; 0x05
    2842:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2844:	0f 90       	pop	r0
    2846:	0f 90       	pop	r0
    2848:	0f 90       	pop	r0
    284a:	0f 90       	pop	r0
    284c:	0f 90       	pop	r0
    284e:	cf 91       	pop	r28
    2850:	df 91       	pop	r29
    2852:	08 95       	ret

00002854 <DIO_ES_tSetPortDirection>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tSetPortDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Dir_Type copy_u8_PortDirection)
{
    2854:	df 93       	push	r29
    2856:	cf 93       	push	r28
    2858:	00 d0       	rcall	.+0      	; 0x285a <DIO_ES_tSetPortDirection+0x6>
    285a:	00 d0       	rcall	.+0      	; 0x285c <DIO_ES_tSetPortDirection+0x8>
    285c:	0f 92       	push	r0
    285e:	cd b7       	in	r28, 0x3d	; 61
    2860:	de b7       	in	r29, 0x3e	; 62
    2862:	89 83       	std	Y+1, r24	; 0x01
    2864:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortDirection != OUTPUT) && (copy_u8_PortDirection != OUTPUT)){
    2866:	8a 81       	ldd	r24, Y+2	; 0x02
    2868:	81 30       	cpi	r24, 0x01	; 1
    286a:	31 f0       	breq	.+12     	; 0x2878 <DIO_ES_tSetPortDirection+0x24>
    286c:	8a 81       	ldd	r24, Y+2	; 0x02
    286e:	81 30       	cpi	r24, 0x01	; 1
    2870:	19 f0       	breq	.+6      	; 0x2878 <DIO_ES_tSetPortDirection+0x24>
		return ES_NOT_OK;
    2872:	21 e0       	ldi	r18, 0x01	; 1
    2874:	2d 83       	std	Y+5, r18	; 0x05
    2876:	53 c0       	rjmp	.+166    	; 0x291e <DIO_ES_tSetPortDirection+0xca>
	}
	switch(copy_u8_PortId){
    2878:	89 81       	ldd	r24, Y+1	; 0x01
    287a:	28 2f       	mov	r18, r24
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	3c 83       	std	Y+4, r19	; 0x04
    2880:	2b 83       	std	Y+3, r18	; 0x03
    2882:	8b 81       	ldd	r24, Y+3	; 0x03
    2884:	9c 81       	ldd	r25, Y+4	; 0x04
    2886:	81 30       	cpi	r24, 0x01	; 1
    2888:	91 05       	cpc	r25, r1
    288a:	09 f1       	breq	.+66     	; 0x28ce <DIO_ES_tSetPortDirection+0x7a>
    288c:	2b 81       	ldd	r18, Y+3	; 0x03
    288e:	3c 81       	ldd	r19, Y+4	; 0x04
    2890:	22 30       	cpi	r18, 0x02	; 2
    2892:	31 05       	cpc	r19, r1
    2894:	2c f4       	brge	.+10     	; 0x28a0 <DIO_ES_tSetPortDirection+0x4c>
    2896:	8b 81       	ldd	r24, Y+3	; 0x03
    2898:	9c 81       	ldd	r25, Y+4	; 0x04
    289a:	00 97       	sbiw	r24, 0x00	; 0
    289c:	61 f0       	breq	.+24     	; 0x28b6 <DIO_ES_tSetPortDirection+0x62>
    289e:	3b c0       	rjmp	.+118    	; 0x2916 <DIO_ES_tSetPortDirection+0xc2>
    28a0:	2b 81       	ldd	r18, Y+3	; 0x03
    28a2:	3c 81       	ldd	r19, Y+4	; 0x04
    28a4:	22 30       	cpi	r18, 0x02	; 2
    28a6:	31 05       	cpc	r19, r1
    28a8:	f1 f0       	breq	.+60     	; 0x28e6 <DIO_ES_tSetPortDirection+0x92>
    28aa:	8b 81       	ldd	r24, Y+3	; 0x03
    28ac:	9c 81       	ldd	r25, Y+4	; 0x04
    28ae:	83 30       	cpi	r24, 0x03	; 3
    28b0:	91 05       	cpc	r25, r1
    28b2:	29 f1       	breq	.+74     	; 0x28fe <DIO_ES_tSetPortDirection+0xaa>
    28b4:	30 c0       	rjmp	.+96     	; 0x2916 <DIO_ES_tSetPortDirection+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortDirection == OUTPUT)
    28b6:	8a 81       	ldd	r24, Y+2	; 0x02
    28b8:	81 30       	cpi	r24, 0x01	; 1
    28ba:	29 f4       	brne	.+10     	; 0x28c6 <DIO_ES_tSetPortDirection+0x72>
			DDRA = 0xff;
    28bc:	ea e3       	ldi	r30, 0x3A	; 58
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	8f ef       	ldi	r24, 0xFF	; 255
    28c2:	80 83       	st	Z, r24
    28c4:	2b c0       	rjmp	.+86     	; 0x291c <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRA = 0x00;
    28c6:	ea e3       	ldi	r30, 0x3A	; 58
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	10 82       	st	Z, r1
    28cc:	27 c0       	rjmp	.+78     	; 0x291c <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortDirection == OUTPUT)
    28ce:	8a 81       	ldd	r24, Y+2	; 0x02
    28d0:	81 30       	cpi	r24, 0x01	; 1
    28d2:	29 f4       	brne	.+10     	; 0x28de <DIO_ES_tSetPortDirection+0x8a>
			DDRB = 0xff;
    28d4:	e7 e3       	ldi	r30, 0x37	; 55
    28d6:	f0 e0       	ldi	r31, 0x00	; 0
    28d8:	8f ef       	ldi	r24, 0xFF	; 255
    28da:	80 83       	st	Z, r24
    28dc:	1f c0       	rjmp	.+62     	; 0x291c <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRB = 0x00;
    28de:	e7 e3       	ldi	r30, 0x37	; 55
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	10 82       	st	Z, r1
    28e4:	1b c0       	rjmp	.+54     	; 0x291c <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortDirection == OUTPUT)
    28e6:	8a 81       	ldd	r24, Y+2	; 0x02
    28e8:	81 30       	cpi	r24, 0x01	; 1
    28ea:	29 f4       	brne	.+10     	; 0x28f6 <DIO_ES_tSetPortDirection+0xa2>
			DDRC = 0xff;
    28ec:	e4 e3       	ldi	r30, 0x34	; 52
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	8f ef       	ldi	r24, 0xFF	; 255
    28f2:	80 83       	st	Z, r24
    28f4:	13 c0       	rjmp	.+38     	; 0x291c <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRC = 0x00;
    28f6:	e4 e3       	ldi	r30, 0x34	; 52
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	10 82       	st	Z, r1
    28fc:	0f c0       	rjmp	.+30     	; 0x291c <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortDirection == OUTPUT)
    28fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2900:	81 30       	cpi	r24, 0x01	; 1
    2902:	29 f4       	brne	.+10     	; 0x290e <DIO_ES_tSetPortDirection+0xba>
			DDRD = 0xff;
    2904:	e1 e3       	ldi	r30, 0x31	; 49
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	8f ef       	ldi	r24, 0xFF	; 255
    290a:	80 83       	st	Z, r24
    290c:	07 c0       	rjmp	.+14     	; 0x291c <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRD = 0x00;
    290e:	e1 e3       	ldi	r30, 0x31	; 49
    2910:	f0 e0       	ldi	r31, 0x00	; 0
    2912:	10 82       	st	Z, r1
    2914:	03 c0       	rjmp	.+6      	; 0x291c <DIO_ES_tSetPortDirection+0xc8>
		break;
	default:
		return ES_NOT_OK;
    2916:	91 e0       	ldi	r25, 0x01	; 1
    2918:	9d 83       	std	Y+5, r25	; 0x05
    291a:	01 c0       	rjmp	.+2      	; 0x291e <DIO_ES_tSetPortDirection+0xca>
		break;
	}
	return ES_OK;
    291c:	1d 82       	std	Y+5, r1	; 0x05
    291e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2920:	0f 90       	pop	r0
    2922:	0f 90       	pop	r0
    2924:	0f 90       	pop	r0
    2926:	0f 90       	pop	r0
    2928:	0f 90       	pop	r0
    292a:	cf 91       	pop	r28
    292c:	df 91       	pop	r29
    292e:	08 95       	ret

00002930 <DIO_ES_tSetPortValue>:



ES_t DIO_ES_tSetPortValue(DIO_U8_Port_Type copy_u8_PortId, u8 copy_u8_PortValue)
{
    2930:	df 93       	push	r29
    2932:	cf 93       	push	r28
    2934:	00 d0       	rcall	.+0      	; 0x2936 <DIO_ES_tSetPortValue+0x6>
    2936:	00 d0       	rcall	.+0      	; 0x2938 <DIO_ES_tSetPortValue+0x8>
    2938:	0f 92       	push	r0
    293a:	cd b7       	in	r28, 0x3d	; 61
    293c:	de b7       	in	r29, 0x3e	; 62
    293e:	89 83       	std	Y+1, r24	; 0x01
    2940:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortValue != HIGH) && (copy_u8_PortValue != LOW)){
    2942:	8a 81       	ldd	r24, Y+2	; 0x02
    2944:	81 30       	cpi	r24, 0x01	; 1
    2946:	31 f0       	breq	.+12     	; 0x2954 <DIO_ES_tSetPortValue+0x24>
    2948:	8a 81       	ldd	r24, Y+2	; 0x02
    294a:	88 23       	and	r24, r24
    294c:	19 f0       	breq	.+6      	; 0x2954 <DIO_ES_tSetPortValue+0x24>
		return ES_NOT_OK;
    294e:	21 e0       	ldi	r18, 0x01	; 1
    2950:	2d 83       	std	Y+5, r18	; 0x05
    2952:	53 c0       	rjmp	.+166    	; 0x29fa <DIO_ES_tSetPortValue+0xca>
	}
	switch(copy_u8_PortId){
    2954:	89 81       	ldd	r24, Y+1	; 0x01
    2956:	28 2f       	mov	r18, r24
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	3c 83       	std	Y+4, r19	; 0x04
    295c:	2b 83       	std	Y+3, r18	; 0x03
    295e:	8b 81       	ldd	r24, Y+3	; 0x03
    2960:	9c 81       	ldd	r25, Y+4	; 0x04
    2962:	81 30       	cpi	r24, 0x01	; 1
    2964:	91 05       	cpc	r25, r1
    2966:	09 f1       	breq	.+66     	; 0x29aa <DIO_ES_tSetPortValue+0x7a>
    2968:	2b 81       	ldd	r18, Y+3	; 0x03
    296a:	3c 81       	ldd	r19, Y+4	; 0x04
    296c:	22 30       	cpi	r18, 0x02	; 2
    296e:	31 05       	cpc	r19, r1
    2970:	2c f4       	brge	.+10     	; 0x297c <DIO_ES_tSetPortValue+0x4c>
    2972:	8b 81       	ldd	r24, Y+3	; 0x03
    2974:	9c 81       	ldd	r25, Y+4	; 0x04
    2976:	00 97       	sbiw	r24, 0x00	; 0
    2978:	61 f0       	breq	.+24     	; 0x2992 <DIO_ES_tSetPortValue+0x62>
    297a:	3b c0       	rjmp	.+118    	; 0x29f2 <DIO_ES_tSetPortValue+0xc2>
    297c:	2b 81       	ldd	r18, Y+3	; 0x03
    297e:	3c 81       	ldd	r19, Y+4	; 0x04
    2980:	22 30       	cpi	r18, 0x02	; 2
    2982:	31 05       	cpc	r19, r1
    2984:	f1 f0       	breq	.+60     	; 0x29c2 <DIO_ES_tSetPortValue+0x92>
    2986:	8b 81       	ldd	r24, Y+3	; 0x03
    2988:	9c 81       	ldd	r25, Y+4	; 0x04
    298a:	83 30       	cpi	r24, 0x03	; 3
    298c:	91 05       	cpc	r25, r1
    298e:	29 f1       	breq	.+74     	; 0x29da <DIO_ES_tSetPortValue+0xaa>
    2990:	30 c0       	rjmp	.+96     	; 0x29f2 <DIO_ES_tSetPortValue+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortValue == HIGH)
    2992:	8a 81       	ldd	r24, Y+2	; 0x02
    2994:	81 30       	cpi	r24, 0x01	; 1
    2996:	29 f4       	brne	.+10     	; 0x29a2 <DIO_ES_tSetPortValue+0x72>
			PORTA = 0xff;
    2998:	eb e3       	ldi	r30, 0x3B	; 59
    299a:	f0 e0       	ldi	r31, 0x00	; 0
    299c:	8f ef       	ldi	r24, 0xFF	; 255
    299e:	80 83       	st	Z, r24
    29a0:	2b c0       	rjmp	.+86     	; 0x29f8 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTA = 0x00;
    29a2:	eb e3       	ldi	r30, 0x3B	; 59
    29a4:	f0 e0       	ldi	r31, 0x00	; 0
    29a6:	10 82       	st	Z, r1
    29a8:	27 c0       	rjmp	.+78     	; 0x29f8 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortValue == HIGH)
    29aa:	8a 81       	ldd	r24, Y+2	; 0x02
    29ac:	81 30       	cpi	r24, 0x01	; 1
    29ae:	29 f4       	brne	.+10     	; 0x29ba <DIO_ES_tSetPortValue+0x8a>
			PORTB = 0xff;
    29b0:	e8 e3       	ldi	r30, 0x38	; 56
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	8f ef       	ldi	r24, 0xFF	; 255
    29b6:	80 83       	st	Z, r24
    29b8:	1f c0       	rjmp	.+62     	; 0x29f8 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTB = 0x00;
    29ba:	e8 e3       	ldi	r30, 0x38	; 56
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	10 82       	st	Z, r1
    29c0:	1b c0       	rjmp	.+54     	; 0x29f8 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortValue == HIGH)
    29c2:	8a 81       	ldd	r24, Y+2	; 0x02
    29c4:	81 30       	cpi	r24, 0x01	; 1
    29c6:	29 f4       	brne	.+10     	; 0x29d2 <DIO_ES_tSetPortValue+0xa2>
			PORTC = 0xff;
    29c8:	e5 e3       	ldi	r30, 0x35	; 53
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	8f ef       	ldi	r24, 0xFF	; 255
    29ce:	80 83       	st	Z, r24
    29d0:	13 c0       	rjmp	.+38     	; 0x29f8 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTC = 0x00;
    29d2:	e5 e3       	ldi	r30, 0x35	; 53
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	10 82       	st	Z, r1
    29d8:	0f c0       	rjmp	.+30     	; 0x29f8 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortValue == HIGH)
    29da:	8a 81       	ldd	r24, Y+2	; 0x02
    29dc:	81 30       	cpi	r24, 0x01	; 1
    29de:	29 f4       	brne	.+10     	; 0x29ea <DIO_ES_tSetPortValue+0xba>
			PORTD = 0xff;
    29e0:	e2 e3       	ldi	r30, 0x32	; 50
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	8f ef       	ldi	r24, 0xFF	; 255
    29e6:	80 83       	st	Z, r24
    29e8:	07 c0       	rjmp	.+14     	; 0x29f8 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTD = 0x00;
    29ea:	e2 e3       	ldi	r30, 0x32	; 50
    29ec:	f0 e0       	ldi	r31, 0x00	; 0
    29ee:	10 82       	st	Z, r1
    29f0:	03 c0       	rjmp	.+6      	; 0x29f8 <DIO_ES_tSetPortValue+0xc8>
		break;
	default:
		return ES_NOT_OK;
    29f2:	91 e0       	ldi	r25, 0x01	; 1
    29f4:	9d 83       	std	Y+5, r25	; 0x05
    29f6:	01 c0       	rjmp	.+2      	; 0x29fa <DIO_ES_tSetPortValue+0xca>
		break;
	}
	return ES_OK;
    29f8:	1d 82       	std	Y+5, r1	; 0x05
    29fa:	8d 81       	ldd	r24, Y+5	; 0x05
}
    29fc:	0f 90       	pop	r0
    29fe:	0f 90       	pop	r0
    2a00:	0f 90       	pop	r0
    2a02:	0f 90       	pop	r0
    2a04:	0f 90       	pop	r0
    2a06:	cf 91       	pop	r28
    2a08:	df 91       	pop	r29
    2a0a:	08 95       	ret

00002a0c <DIO_ES_tTOGPin>:
/*
 * DIO_ES_tTOGPin is used to Toggle a specific pin
 */

ES_t DIO_ES_tTOGPin(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId)
{
    2a0c:	df 93       	push	r29
    2a0e:	cf 93       	push	r28
    2a10:	00 d0       	rcall	.+0      	; 0x2a12 <DIO_ES_tTOGPin+0x6>
    2a12:	0f 92       	push	r0
    2a14:	cd b7       	in	r28, 0x3d	; 61
    2a16:	de b7       	in	r29, 0x3e	; 62
    2a18:	89 83       	std	Y+1, r24	; 0x01
    2a1a:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8_PinId > PIN_LIMIT){
    2a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1e:	88 30       	cpi	r24, 0x08	; 8
    2a20:	18 f0       	brcs	.+6      	; 0x2a28 <DIO_ES_tTOGPin+0x1c>
		return ES_NOT_OK;
    2a22:	81 e0       	ldi	r24, 0x01	; 1
    2a24:	8b 83       	std	Y+3, r24	; 0x03
    2a26:	60 c0       	rjmp	.+192    	; 0x2ae8 <DIO_ES_tTOGPin+0xdc>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    2a28:	89 81       	ldd	r24, Y+1	; 0x01
    2a2a:	88 23       	and	r24, r24
    2a2c:	a1 f4       	brne	.+40     	; 0x2a56 <DIO_ES_tTOGPin+0x4a>
		TOG_BIT(PORTA,copy_u8_PinId);
    2a2e:	ab e3       	ldi	r26, 0x3B	; 59
    2a30:	b0 e0       	ldi	r27, 0x00	; 0
    2a32:	eb e3       	ldi	r30, 0x3B	; 59
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	80 81       	ld	r24, Z
    2a38:	48 2f       	mov	r20, r24
    2a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3c:	28 2f       	mov	r18, r24
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	81 e0       	ldi	r24, 0x01	; 1
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	02 2e       	mov	r0, r18
    2a46:	02 c0       	rjmp	.+4      	; 0x2a4c <DIO_ES_tTOGPin+0x40>
    2a48:	88 0f       	add	r24, r24
    2a4a:	99 1f       	adc	r25, r25
    2a4c:	0a 94       	dec	r0
    2a4e:	e2 f7       	brpl	.-8      	; 0x2a48 <DIO_ES_tTOGPin+0x3c>
    2a50:	84 27       	eor	r24, r20
    2a52:	8c 93       	st	X, r24
    2a54:	48 c0       	rjmp	.+144    	; 0x2ae6 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    2a56:	89 81       	ldd	r24, Y+1	; 0x01
    2a58:	81 30       	cpi	r24, 0x01	; 1
    2a5a:	a1 f4       	brne	.+40     	; 0x2a84 <DIO_ES_tTOGPin+0x78>
		TOG_BIT(PORTB,copy_u8_PinId);
    2a5c:	a8 e3       	ldi	r26, 0x38	; 56
    2a5e:	b0 e0       	ldi	r27, 0x00	; 0
    2a60:	e8 e3       	ldi	r30, 0x38	; 56
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	80 81       	ld	r24, Z
    2a66:	48 2f       	mov	r20, r24
    2a68:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6a:	28 2f       	mov	r18, r24
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	02 2e       	mov	r0, r18
    2a74:	02 c0       	rjmp	.+4      	; 0x2a7a <DIO_ES_tTOGPin+0x6e>
    2a76:	88 0f       	add	r24, r24
    2a78:	99 1f       	adc	r25, r25
    2a7a:	0a 94       	dec	r0
    2a7c:	e2 f7       	brpl	.-8      	; 0x2a76 <DIO_ES_tTOGPin+0x6a>
    2a7e:	84 27       	eor	r24, r20
    2a80:	8c 93       	st	X, r24
    2a82:	31 c0       	rjmp	.+98     	; 0x2ae6 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    2a84:	89 81       	ldd	r24, Y+1	; 0x01
    2a86:	82 30       	cpi	r24, 0x02	; 2
    2a88:	a1 f4       	brne	.+40     	; 0x2ab2 <DIO_ES_tTOGPin+0xa6>
		TOG_BIT(PORTC,copy_u8_PinId);
    2a8a:	a5 e3       	ldi	r26, 0x35	; 53
    2a8c:	b0 e0       	ldi	r27, 0x00	; 0
    2a8e:	e5 e3       	ldi	r30, 0x35	; 53
    2a90:	f0 e0       	ldi	r31, 0x00	; 0
    2a92:	80 81       	ld	r24, Z
    2a94:	48 2f       	mov	r20, r24
    2a96:	8a 81       	ldd	r24, Y+2	; 0x02
    2a98:	28 2f       	mov	r18, r24
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	02 2e       	mov	r0, r18
    2aa2:	02 c0       	rjmp	.+4      	; 0x2aa8 <DIO_ES_tTOGPin+0x9c>
    2aa4:	88 0f       	add	r24, r24
    2aa6:	99 1f       	adc	r25, r25
    2aa8:	0a 94       	dec	r0
    2aaa:	e2 f7       	brpl	.-8      	; 0x2aa4 <DIO_ES_tTOGPin+0x98>
    2aac:	84 27       	eor	r24, r20
    2aae:	8c 93       	st	X, r24
    2ab0:	1a c0       	rjmp	.+52     	; 0x2ae6 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    2ab2:	89 81       	ldd	r24, Y+1	; 0x01
    2ab4:	83 30       	cpi	r24, 0x03	; 3
    2ab6:	a1 f4       	brne	.+40     	; 0x2ae0 <DIO_ES_tTOGPin+0xd4>
		TOG_BIT(PORTD,copy_u8_PinId);
    2ab8:	a2 e3       	ldi	r26, 0x32	; 50
    2aba:	b0 e0       	ldi	r27, 0x00	; 0
    2abc:	e2 e3       	ldi	r30, 0x32	; 50
    2abe:	f0 e0       	ldi	r31, 0x00	; 0
    2ac0:	80 81       	ld	r24, Z
    2ac2:	48 2f       	mov	r20, r24
    2ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac6:	28 2f       	mov	r18, r24
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	02 2e       	mov	r0, r18
    2ad0:	02 c0       	rjmp	.+4      	; 0x2ad6 <DIO_ES_tTOGPin+0xca>
    2ad2:	88 0f       	add	r24, r24
    2ad4:	99 1f       	adc	r25, r25
    2ad6:	0a 94       	dec	r0
    2ad8:	e2 f7       	brpl	.-8      	; 0x2ad2 <DIO_ES_tTOGPin+0xc6>
    2ada:	84 27       	eor	r24, r20
    2adc:	8c 93       	st	X, r24
    2ade:	03 c0       	rjmp	.+6      	; 0x2ae6 <DIO_ES_tTOGPin+0xda>
	}else{
		return ES_NOT_OK;
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	8b 83       	std	Y+3, r24	; 0x03
    2ae4:	01 c0       	rjmp	.+2      	; 0x2ae8 <DIO_ES_tTOGPin+0xdc>
	}
	return ES_OK;
    2ae6:	1b 82       	std	Y+3, r1	; 0x03
    2ae8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2aea:	0f 90       	pop	r0
    2aec:	0f 90       	pop	r0
    2aee:	0f 90       	pop	r0
    2af0:	cf 91       	pop	r28
    2af2:	df 91       	pop	r29
    2af4:	08 95       	ret

00002af6 <DIO_ES_tInit>:




ES_t DIO_ES_tInit(void)
{
    2af6:	df 93       	push	r29
    2af8:	cf 93       	push	r28
    2afa:	00 d0       	rcall	.+0      	; 0x2afc <DIO_ES_tInit+0x6>
    2afc:	cd b7       	in	r28, 0x3d	; 61
    2afe:	de b7       	in	r29, 0x3e	; 62
	int i = 0;
    2b00:	1a 82       	std	Y+2, r1	; 0x02
    2b02:	19 82       	std	Y+1, r1	; 0x01
	for(i=0 ; i<PIN_COUNT ; i++){
    2b04:	1a 82       	std	Y+2, r1	; 0x02
    2b06:	19 82       	std	Y+1, r1	; 0x01
    2b08:	a3 c2       	rjmp	.+1350   	; 0x3050 <DIO_ES_tInit+0x55a>
		if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_A){
    2b0a:	89 81       	ldd	r24, Y+1	; 0x01
    2b0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b0e:	88 0f       	add	r24, r24
    2b10:	99 1f       	adc	r25, r25
    2b12:	88 0f       	add	r24, r24
    2b14:	99 1f       	adc	r25, r25
    2b16:	fc 01       	movw	r30, r24
    2b18:	e7 59       	subi	r30, 0x97	; 151
    2b1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b1c:	80 81       	ld	r24, Z
    2b1e:	88 23       	and	r24, r24
    2b20:	09 f0       	breq	.+2      	; 0x2b24 <DIO_ES_tInit+0x2e>
    2b22:	9b c0       	rjmp	.+310    	; 0x2c5a <DIO_ES_tInit+0x164>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    2b24:	89 81       	ldd	r24, Y+1	; 0x01
    2b26:	9a 81       	ldd	r25, Y+2	; 0x02
    2b28:	88 0f       	add	r24, r24
    2b2a:	99 1f       	adc	r25, r25
    2b2c:	01 96       	adiw	r24, 0x01	; 1
    2b2e:	88 0f       	add	r24, r24
    2b30:	99 1f       	adc	r25, r25
    2b32:	fc 01       	movw	r30, r24
    2b34:	e7 59       	subi	r30, 0x97	; 151
    2b36:	fe 4f       	sbci	r31, 0xFE	; 254
    2b38:	80 81       	ld	r24, Z
    2b3a:	81 30       	cpi	r24, 0x01	; 1
    2b3c:	e9 f4       	brne	.+58     	; 0x2b78 <DIO_ES_tInit+0x82>
				SET_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    2b3e:	aa e3       	ldi	r26, 0x3A	; 58
    2b40:	b0 e0       	ldi	r27, 0x00	; 0
    2b42:	ea e3       	ldi	r30, 0x3A	; 58
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	80 81       	ld	r24, Z
    2b48:	48 2f       	mov	r20, r24
    2b4a:	89 81       	ldd	r24, Y+1	; 0x01
    2b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b4e:	88 0f       	add	r24, r24
    2b50:	99 1f       	adc	r25, r25
    2b52:	88 0f       	add	r24, r24
    2b54:	99 1f       	adc	r25, r25
    2b56:	fc 01       	movw	r30, r24
    2b58:	e6 59       	subi	r30, 0x96	; 150
    2b5a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b5c:	80 81       	ld	r24, Z
    2b5e:	28 2f       	mov	r18, r24
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	81 e0       	ldi	r24, 0x01	; 1
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	02 2e       	mov	r0, r18
    2b68:	02 c0       	rjmp	.+4      	; 0x2b6e <DIO_ES_tInit+0x78>
    2b6a:	88 0f       	add	r24, r24
    2b6c:	99 1f       	adc	r25, r25
    2b6e:	0a 94       	dec	r0
    2b70:	e2 f7       	brpl	.-8      	; 0x2b6a <DIO_ES_tInit+0x74>
    2b72:	84 2b       	or	r24, r20
    2b74:	8c 93       	st	X, r24
    2b76:	67 c2       	rjmp	.+1230   	; 0x3046 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    2b78:	aa e3       	ldi	r26, 0x3A	; 58
    2b7a:	b0 e0       	ldi	r27, 0x00	; 0
    2b7c:	ea e3       	ldi	r30, 0x3A	; 58
    2b7e:	f0 e0       	ldi	r31, 0x00	; 0
    2b80:	80 81       	ld	r24, Z
    2b82:	48 2f       	mov	r20, r24
    2b84:	89 81       	ldd	r24, Y+1	; 0x01
    2b86:	9a 81       	ldd	r25, Y+2	; 0x02
    2b88:	88 0f       	add	r24, r24
    2b8a:	99 1f       	adc	r25, r25
    2b8c:	88 0f       	add	r24, r24
    2b8e:	99 1f       	adc	r25, r25
    2b90:	fc 01       	movw	r30, r24
    2b92:	e6 59       	subi	r30, 0x96	; 150
    2b94:	fe 4f       	sbci	r31, 0xFE	; 254
    2b96:	80 81       	ld	r24, Z
    2b98:	28 2f       	mov	r18, r24
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	02 2e       	mov	r0, r18
    2ba2:	02 c0       	rjmp	.+4      	; 0x2ba8 <DIO_ES_tInit+0xb2>
    2ba4:	88 0f       	add	r24, r24
    2ba6:	99 1f       	adc	r25, r25
    2ba8:	0a 94       	dec	r0
    2baa:	e2 f7       	brpl	.-8      	; 0x2ba4 <DIO_ES_tInit+0xae>
    2bac:	80 95       	com	r24
    2bae:	84 23       	and	r24, r20
    2bb0:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    2bb2:	89 81       	ldd	r24, Y+1	; 0x01
    2bb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb6:	88 0f       	add	r24, r24
    2bb8:	99 1f       	adc	r25, r25
    2bba:	88 0f       	add	r24, r24
    2bbc:	99 1f       	adc	r25, r25
    2bbe:	fc 01       	movw	r30, r24
    2bc0:	e4 59       	subi	r30, 0x94	; 148
    2bc2:	fe 4f       	sbci	r31, 0xFE	; 254
    2bc4:	80 81       	ld	r24, Z
    2bc6:	81 30       	cpi	r24, 0x01	; 1
    2bc8:	e9 f4       	brne	.+58     	; 0x2c04 <DIO_ES_tInit+0x10e>
					SET_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    2bca:	ab e3       	ldi	r26, 0x3B	; 59
    2bcc:	b0 e0       	ldi	r27, 0x00	; 0
    2bce:	eb e3       	ldi	r30, 0x3B	; 59
    2bd0:	f0 e0       	ldi	r31, 0x00	; 0
    2bd2:	80 81       	ld	r24, Z
    2bd4:	48 2f       	mov	r20, r24
    2bd6:	89 81       	ldd	r24, Y+1	; 0x01
    2bd8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bda:	88 0f       	add	r24, r24
    2bdc:	99 1f       	adc	r25, r25
    2bde:	88 0f       	add	r24, r24
    2be0:	99 1f       	adc	r25, r25
    2be2:	fc 01       	movw	r30, r24
    2be4:	e6 59       	subi	r30, 0x96	; 150
    2be6:	fe 4f       	sbci	r31, 0xFE	; 254
    2be8:	80 81       	ld	r24, Z
    2bea:	28 2f       	mov	r18, r24
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	02 2e       	mov	r0, r18
    2bf4:	02 c0       	rjmp	.+4      	; 0x2bfa <DIO_ES_tInit+0x104>
    2bf6:	88 0f       	add	r24, r24
    2bf8:	99 1f       	adc	r25, r25
    2bfa:	0a 94       	dec	r0
    2bfc:	e2 f7       	brpl	.-8      	; 0x2bf6 <DIO_ES_tInit+0x100>
    2bfe:	84 2b       	or	r24, r20
    2c00:	8c 93       	st	X, r24
    2c02:	21 c2       	rjmp	.+1090   	; 0x3046 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    2c04:	89 81       	ldd	r24, Y+1	; 0x01
    2c06:	9a 81       	ldd	r25, Y+2	; 0x02
    2c08:	88 0f       	add	r24, r24
    2c0a:	99 1f       	adc	r25, r25
    2c0c:	88 0f       	add	r24, r24
    2c0e:	99 1f       	adc	r25, r25
    2c10:	fc 01       	movw	r30, r24
    2c12:	e4 59       	subi	r30, 0x94	; 148
    2c14:	fe 4f       	sbci	r31, 0xFE	; 254
    2c16:	80 81       	ld	r24, Z
    2c18:	88 23       	and	r24, r24
    2c1a:	09 f0       	breq	.+2      	; 0x2c1e <DIO_ES_tInit+0x128>
    2c1c:	14 c2       	rjmp	.+1064   	; 0x3046 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    2c1e:	ab e3       	ldi	r26, 0x3B	; 59
    2c20:	b0 e0       	ldi	r27, 0x00	; 0
    2c22:	eb e3       	ldi	r30, 0x3B	; 59
    2c24:	f0 e0       	ldi	r31, 0x00	; 0
    2c26:	80 81       	ld	r24, Z
    2c28:	48 2f       	mov	r20, r24
    2c2a:	89 81       	ldd	r24, Y+1	; 0x01
    2c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c2e:	88 0f       	add	r24, r24
    2c30:	99 1f       	adc	r25, r25
    2c32:	88 0f       	add	r24, r24
    2c34:	99 1f       	adc	r25, r25
    2c36:	fc 01       	movw	r30, r24
    2c38:	e6 59       	subi	r30, 0x96	; 150
    2c3a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c3c:	80 81       	ld	r24, Z
    2c3e:	28 2f       	mov	r18, r24
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	81 e0       	ldi	r24, 0x01	; 1
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	02 2e       	mov	r0, r18
    2c48:	02 c0       	rjmp	.+4      	; 0x2c4e <DIO_ES_tInit+0x158>
    2c4a:	88 0f       	add	r24, r24
    2c4c:	99 1f       	adc	r25, r25
    2c4e:	0a 94       	dec	r0
    2c50:	e2 f7       	brpl	.-8      	; 0x2c4a <DIO_ES_tInit+0x154>
    2c52:	80 95       	com	r24
    2c54:	84 23       	and	r24, r20
    2c56:	8c 93       	st	X, r24
    2c58:	f6 c1       	rjmp	.+1004   	; 0x3046 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_B){
    2c5a:	89 81       	ldd	r24, Y+1	; 0x01
    2c5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c5e:	88 0f       	add	r24, r24
    2c60:	99 1f       	adc	r25, r25
    2c62:	88 0f       	add	r24, r24
    2c64:	99 1f       	adc	r25, r25
    2c66:	fc 01       	movw	r30, r24
    2c68:	e7 59       	subi	r30, 0x97	; 151
    2c6a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c6c:	80 81       	ld	r24, Z
    2c6e:	81 30       	cpi	r24, 0x01	; 1
    2c70:	09 f0       	breq	.+2      	; 0x2c74 <DIO_ES_tInit+0x17e>
    2c72:	9b c0       	rjmp	.+310    	; 0x2daa <DIO_ES_tInit+0x2b4>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    2c74:	89 81       	ldd	r24, Y+1	; 0x01
    2c76:	9a 81       	ldd	r25, Y+2	; 0x02
    2c78:	88 0f       	add	r24, r24
    2c7a:	99 1f       	adc	r25, r25
    2c7c:	01 96       	adiw	r24, 0x01	; 1
    2c7e:	88 0f       	add	r24, r24
    2c80:	99 1f       	adc	r25, r25
    2c82:	fc 01       	movw	r30, r24
    2c84:	e7 59       	subi	r30, 0x97	; 151
    2c86:	fe 4f       	sbci	r31, 0xFE	; 254
    2c88:	80 81       	ld	r24, Z
    2c8a:	81 30       	cpi	r24, 0x01	; 1
    2c8c:	e9 f4       	brne	.+58     	; 0x2cc8 <DIO_ES_tInit+0x1d2>
				SET_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    2c8e:	a7 e3       	ldi	r26, 0x37	; 55
    2c90:	b0 e0       	ldi	r27, 0x00	; 0
    2c92:	e7 e3       	ldi	r30, 0x37	; 55
    2c94:	f0 e0       	ldi	r31, 0x00	; 0
    2c96:	80 81       	ld	r24, Z
    2c98:	48 2f       	mov	r20, r24
    2c9a:	89 81       	ldd	r24, Y+1	; 0x01
    2c9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c9e:	88 0f       	add	r24, r24
    2ca0:	99 1f       	adc	r25, r25
    2ca2:	88 0f       	add	r24, r24
    2ca4:	99 1f       	adc	r25, r25
    2ca6:	fc 01       	movw	r30, r24
    2ca8:	e6 59       	subi	r30, 0x96	; 150
    2caa:	fe 4f       	sbci	r31, 0xFE	; 254
    2cac:	80 81       	ld	r24, Z
    2cae:	28 2f       	mov	r18, r24
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	81 e0       	ldi	r24, 0x01	; 1
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	02 2e       	mov	r0, r18
    2cb8:	02 c0       	rjmp	.+4      	; 0x2cbe <DIO_ES_tInit+0x1c8>
    2cba:	88 0f       	add	r24, r24
    2cbc:	99 1f       	adc	r25, r25
    2cbe:	0a 94       	dec	r0
    2cc0:	e2 f7       	brpl	.-8      	; 0x2cba <DIO_ES_tInit+0x1c4>
    2cc2:	84 2b       	or	r24, r20
    2cc4:	8c 93       	st	X, r24
    2cc6:	bf c1       	rjmp	.+894    	; 0x3046 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    2cc8:	a7 e3       	ldi	r26, 0x37	; 55
    2cca:	b0 e0       	ldi	r27, 0x00	; 0
    2ccc:	e7 e3       	ldi	r30, 0x37	; 55
    2cce:	f0 e0       	ldi	r31, 0x00	; 0
    2cd0:	80 81       	ld	r24, Z
    2cd2:	48 2f       	mov	r20, r24
    2cd4:	89 81       	ldd	r24, Y+1	; 0x01
    2cd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd8:	88 0f       	add	r24, r24
    2cda:	99 1f       	adc	r25, r25
    2cdc:	88 0f       	add	r24, r24
    2cde:	99 1f       	adc	r25, r25
    2ce0:	fc 01       	movw	r30, r24
    2ce2:	e6 59       	subi	r30, 0x96	; 150
    2ce4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ce6:	80 81       	ld	r24, Z
    2ce8:	28 2f       	mov	r18, r24
    2cea:	30 e0       	ldi	r19, 0x00	; 0
    2cec:	81 e0       	ldi	r24, 0x01	; 1
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	02 2e       	mov	r0, r18
    2cf2:	02 c0       	rjmp	.+4      	; 0x2cf8 <DIO_ES_tInit+0x202>
    2cf4:	88 0f       	add	r24, r24
    2cf6:	99 1f       	adc	r25, r25
    2cf8:	0a 94       	dec	r0
    2cfa:	e2 f7       	brpl	.-8      	; 0x2cf4 <DIO_ES_tInit+0x1fe>
    2cfc:	80 95       	com	r24
    2cfe:	84 23       	and	r24, r20
    2d00:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    2d02:	89 81       	ldd	r24, Y+1	; 0x01
    2d04:	9a 81       	ldd	r25, Y+2	; 0x02
    2d06:	88 0f       	add	r24, r24
    2d08:	99 1f       	adc	r25, r25
    2d0a:	88 0f       	add	r24, r24
    2d0c:	99 1f       	adc	r25, r25
    2d0e:	fc 01       	movw	r30, r24
    2d10:	e4 59       	subi	r30, 0x94	; 148
    2d12:	fe 4f       	sbci	r31, 0xFE	; 254
    2d14:	80 81       	ld	r24, Z
    2d16:	81 30       	cpi	r24, 0x01	; 1
    2d18:	e9 f4       	brne	.+58     	; 0x2d54 <DIO_ES_tInit+0x25e>
					SET_BIT(PORTB,Dio_CfgPinsArray[i].Pin);
    2d1a:	a8 e3       	ldi	r26, 0x38	; 56
    2d1c:	b0 e0       	ldi	r27, 0x00	; 0
    2d1e:	e8 e3       	ldi	r30, 0x38	; 56
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	80 81       	ld	r24, Z
    2d24:	48 2f       	mov	r20, r24
    2d26:	89 81       	ldd	r24, Y+1	; 0x01
    2d28:	9a 81       	ldd	r25, Y+2	; 0x02
    2d2a:	88 0f       	add	r24, r24
    2d2c:	99 1f       	adc	r25, r25
    2d2e:	88 0f       	add	r24, r24
    2d30:	99 1f       	adc	r25, r25
    2d32:	fc 01       	movw	r30, r24
    2d34:	e6 59       	subi	r30, 0x96	; 150
    2d36:	fe 4f       	sbci	r31, 0xFE	; 254
    2d38:	80 81       	ld	r24, Z
    2d3a:	28 2f       	mov	r18, r24
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	02 2e       	mov	r0, r18
    2d44:	02 c0       	rjmp	.+4      	; 0x2d4a <DIO_ES_tInit+0x254>
    2d46:	88 0f       	add	r24, r24
    2d48:	99 1f       	adc	r25, r25
    2d4a:	0a 94       	dec	r0
    2d4c:	e2 f7       	brpl	.-8      	; 0x2d46 <DIO_ES_tInit+0x250>
    2d4e:	84 2b       	or	r24, r20
    2d50:	8c 93       	st	X, r24
    2d52:	79 c1       	rjmp	.+754    	; 0x3046 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    2d54:	89 81       	ldd	r24, Y+1	; 0x01
    2d56:	9a 81       	ldd	r25, Y+2	; 0x02
    2d58:	88 0f       	add	r24, r24
    2d5a:	99 1f       	adc	r25, r25
    2d5c:	88 0f       	add	r24, r24
    2d5e:	99 1f       	adc	r25, r25
    2d60:	fc 01       	movw	r30, r24
    2d62:	e4 59       	subi	r30, 0x94	; 148
    2d64:	fe 4f       	sbci	r31, 0xFE	; 254
    2d66:	80 81       	ld	r24, Z
    2d68:	88 23       	and	r24, r24
    2d6a:	09 f0       	breq	.+2      	; 0x2d6e <DIO_ES_tInit+0x278>
    2d6c:	6c c1       	rjmp	.+728    	; 0x3046 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    2d6e:	ab e3       	ldi	r26, 0x3B	; 59
    2d70:	b0 e0       	ldi	r27, 0x00	; 0
    2d72:	eb e3       	ldi	r30, 0x3B	; 59
    2d74:	f0 e0       	ldi	r31, 0x00	; 0
    2d76:	80 81       	ld	r24, Z
    2d78:	48 2f       	mov	r20, r24
    2d7a:	89 81       	ldd	r24, Y+1	; 0x01
    2d7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d7e:	88 0f       	add	r24, r24
    2d80:	99 1f       	adc	r25, r25
    2d82:	88 0f       	add	r24, r24
    2d84:	99 1f       	adc	r25, r25
    2d86:	fc 01       	movw	r30, r24
    2d88:	e6 59       	subi	r30, 0x96	; 150
    2d8a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d8c:	80 81       	ld	r24, Z
    2d8e:	28 2f       	mov	r18, r24
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	81 e0       	ldi	r24, 0x01	; 1
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	02 2e       	mov	r0, r18
    2d98:	02 c0       	rjmp	.+4      	; 0x2d9e <DIO_ES_tInit+0x2a8>
    2d9a:	88 0f       	add	r24, r24
    2d9c:	99 1f       	adc	r25, r25
    2d9e:	0a 94       	dec	r0
    2da0:	e2 f7       	brpl	.-8      	; 0x2d9a <DIO_ES_tInit+0x2a4>
    2da2:	80 95       	com	r24
    2da4:	84 23       	and	r24, r20
    2da6:	8c 93       	st	X, r24
    2da8:	4e c1       	rjmp	.+668    	; 0x3046 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_C){
    2daa:	89 81       	ldd	r24, Y+1	; 0x01
    2dac:	9a 81       	ldd	r25, Y+2	; 0x02
    2dae:	88 0f       	add	r24, r24
    2db0:	99 1f       	adc	r25, r25
    2db2:	88 0f       	add	r24, r24
    2db4:	99 1f       	adc	r25, r25
    2db6:	fc 01       	movw	r30, r24
    2db8:	e7 59       	subi	r30, 0x97	; 151
    2dba:	fe 4f       	sbci	r31, 0xFE	; 254
    2dbc:	80 81       	ld	r24, Z
    2dbe:	82 30       	cpi	r24, 0x02	; 2
    2dc0:	09 f0       	breq	.+2      	; 0x2dc4 <DIO_ES_tInit+0x2ce>
    2dc2:	9b c0       	rjmp	.+310    	; 0x2efa <DIO_ES_tInit+0x404>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    2dc4:	89 81       	ldd	r24, Y+1	; 0x01
    2dc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc8:	88 0f       	add	r24, r24
    2dca:	99 1f       	adc	r25, r25
    2dcc:	01 96       	adiw	r24, 0x01	; 1
    2dce:	88 0f       	add	r24, r24
    2dd0:	99 1f       	adc	r25, r25
    2dd2:	fc 01       	movw	r30, r24
    2dd4:	e7 59       	subi	r30, 0x97	; 151
    2dd6:	fe 4f       	sbci	r31, 0xFE	; 254
    2dd8:	80 81       	ld	r24, Z
    2dda:	81 30       	cpi	r24, 0x01	; 1
    2ddc:	e9 f4       	brne	.+58     	; 0x2e18 <DIO_ES_tInit+0x322>
				SET_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    2dde:	a4 e3       	ldi	r26, 0x34	; 52
    2de0:	b0 e0       	ldi	r27, 0x00	; 0
    2de2:	e4 e3       	ldi	r30, 0x34	; 52
    2de4:	f0 e0       	ldi	r31, 0x00	; 0
    2de6:	80 81       	ld	r24, Z
    2de8:	48 2f       	mov	r20, r24
    2dea:	89 81       	ldd	r24, Y+1	; 0x01
    2dec:	9a 81       	ldd	r25, Y+2	; 0x02
    2dee:	88 0f       	add	r24, r24
    2df0:	99 1f       	adc	r25, r25
    2df2:	88 0f       	add	r24, r24
    2df4:	99 1f       	adc	r25, r25
    2df6:	fc 01       	movw	r30, r24
    2df8:	e6 59       	subi	r30, 0x96	; 150
    2dfa:	fe 4f       	sbci	r31, 0xFE	; 254
    2dfc:	80 81       	ld	r24, Z
    2dfe:	28 2f       	mov	r18, r24
    2e00:	30 e0       	ldi	r19, 0x00	; 0
    2e02:	81 e0       	ldi	r24, 0x01	; 1
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	02 2e       	mov	r0, r18
    2e08:	02 c0       	rjmp	.+4      	; 0x2e0e <DIO_ES_tInit+0x318>
    2e0a:	88 0f       	add	r24, r24
    2e0c:	99 1f       	adc	r25, r25
    2e0e:	0a 94       	dec	r0
    2e10:	e2 f7       	brpl	.-8      	; 0x2e0a <DIO_ES_tInit+0x314>
    2e12:	84 2b       	or	r24, r20
    2e14:	8c 93       	st	X, r24
    2e16:	17 c1       	rjmp	.+558    	; 0x3046 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    2e18:	a4 e3       	ldi	r26, 0x34	; 52
    2e1a:	b0 e0       	ldi	r27, 0x00	; 0
    2e1c:	e4 e3       	ldi	r30, 0x34	; 52
    2e1e:	f0 e0       	ldi	r31, 0x00	; 0
    2e20:	80 81       	ld	r24, Z
    2e22:	48 2f       	mov	r20, r24
    2e24:	89 81       	ldd	r24, Y+1	; 0x01
    2e26:	9a 81       	ldd	r25, Y+2	; 0x02
    2e28:	88 0f       	add	r24, r24
    2e2a:	99 1f       	adc	r25, r25
    2e2c:	88 0f       	add	r24, r24
    2e2e:	99 1f       	adc	r25, r25
    2e30:	fc 01       	movw	r30, r24
    2e32:	e6 59       	subi	r30, 0x96	; 150
    2e34:	fe 4f       	sbci	r31, 0xFE	; 254
    2e36:	80 81       	ld	r24, Z
    2e38:	28 2f       	mov	r18, r24
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	81 e0       	ldi	r24, 0x01	; 1
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	02 2e       	mov	r0, r18
    2e42:	02 c0       	rjmp	.+4      	; 0x2e48 <DIO_ES_tInit+0x352>
    2e44:	88 0f       	add	r24, r24
    2e46:	99 1f       	adc	r25, r25
    2e48:	0a 94       	dec	r0
    2e4a:	e2 f7       	brpl	.-8      	; 0x2e44 <DIO_ES_tInit+0x34e>
    2e4c:	80 95       	com	r24
    2e4e:	84 23       	and	r24, r20
    2e50:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    2e52:	89 81       	ldd	r24, Y+1	; 0x01
    2e54:	9a 81       	ldd	r25, Y+2	; 0x02
    2e56:	88 0f       	add	r24, r24
    2e58:	99 1f       	adc	r25, r25
    2e5a:	88 0f       	add	r24, r24
    2e5c:	99 1f       	adc	r25, r25
    2e5e:	fc 01       	movw	r30, r24
    2e60:	e4 59       	subi	r30, 0x94	; 148
    2e62:	fe 4f       	sbci	r31, 0xFE	; 254
    2e64:	80 81       	ld	r24, Z
    2e66:	81 30       	cpi	r24, 0x01	; 1
    2e68:	e9 f4       	brne	.+58     	; 0x2ea4 <DIO_ES_tInit+0x3ae>
					SET_BIT(PORTC,Dio_CfgPinsArray[i].Pin);
    2e6a:	a5 e3       	ldi	r26, 0x35	; 53
    2e6c:	b0 e0       	ldi	r27, 0x00	; 0
    2e6e:	e5 e3       	ldi	r30, 0x35	; 53
    2e70:	f0 e0       	ldi	r31, 0x00	; 0
    2e72:	80 81       	ld	r24, Z
    2e74:	48 2f       	mov	r20, r24
    2e76:	89 81       	ldd	r24, Y+1	; 0x01
    2e78:	9a 81       	ldd	r25, Y+2	; 0x02
    2e7a:	88 0f       	add	r24, r24
    2e7c:	99 1f       	adc	r25, r25
    2e7e:	88 0f       	add	r24, r24
    2e80:	99 1f       	adc	r25, r25
    2e82:	fc 01       	movw	r30, r24
    2e84:	e6 59       	subi	r30, 0x96	; 150
    2e86:	fe 4f       	sbci	r31, 0xFE	; 254
    2e88:	80 81       	ld	r24, Z
    2e8a:	28 2f       	mov	r18, r24
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	81 e0       	ldi	r24, 0x01	; 1
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	02 2e       	mov	r0, r18
    2e94:	02 c0       	rjmp	.+4      	; 0x2e9a <DIO_ES_tInit+0x3a4>
    2e96:	88 0f       	add	r24, r24
    2e98:	99 1f       	adc	r25, r25
    2e9a:	0a 94       	dec	r0
    2e9c:	e2 f7       	brpl	.-8      	; 0x2e96 <DIO_ES_tInit+0x3a0>
    2e9e:	84 2b       	or	r24, r20
    2ea0:	8c 93       	st	X, r24
    2ea2:	d1 c0       	rjmp	.+418    	; 0x3046 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    2ea4:	89 81       	ldd	r24, Y+1	; 0x01
    2ea6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ea8:	88 0f       	add	r24, r24
    2eaa:	99 1f       	adc	r25, r25
    2eac:	88 0f       	add	r24, r24
    2eae:	99 1f       	adc	r25, r25
    2eb0:	fc 01       	movw	r30, r24
    2eb2:	e4 59       	subi	r30, 0x94	; 148
    2eb4:	fe 4f       	sbci	r31, 0xFE	; 254
    2eb6:	80 81       	ld	r24, Z
    2eb8:	88 23       	and	r24, r24
    2eba:	09 f0       	breq	.+2      	; 0x2ebe <DIO_ES_tInit+0x3c8>
    2ebc:	c4 c0       	rjmp	.+392    	; 0x3046 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    2ebe:	ab e3       	ldi	r26, 0x3B	; 59
    2ec0:	b0 e0       	ldi	r27, 0x00	; 0
    2ec2:	eb e3       	ldi	r30, 0x3B	; 59
    2ec4:	f0 e0       	ldi	r31, 0x00	; 0
    2ec6:	80 81       	ld	r24, Z
    2ec8:	48 2f       	mov	r20, r24
    2eca:	89 81       	ldd	r24, Y+1	; 0x01
    2ecc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ece:	88 0f       	add	r24, r24
    2ed0:	99 1f       	adc	r25, r25
    2ed2:	88 0f       	add	r24, r24
    2ed4:	99 1f       	adc	r25, r25
    2ed6:	fc 01       	movw	r30, r24
    2ed8:	e6 59       	subi	r30, 0x96	; 150
    2eda:	fe 4f       	sbci	r31, 0xFE	; 254
    2edc:	80 81       	ld	r24, Z
    2ede:	28 2f       	mov	r18, r24
    2ee0:	30 e0       	ldi	r19, 0x00	; 0
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	02 2e       	mov	r0, r18
    2ee8:	02 c0       	rjmp	.+4      	; 0x2eee <DIO_ES_tInit+0x3f8>
    2eea:	88 0f       	add	r24, r24
    2eec:	99 1f       	adc	r25, r25
    2eee:	0a 94       	dec	r0
    2ef0:	e2 f7       	brpl	.-8      	; 0x2eea <DIO_ES_tInit+0x3f4>
    2ef2:	80 95       	com	r24
    2ef4:	84 23       	and	r24, r20
    2ef6:	8c 93       	st	X, r24
    2ef8:	a6 c0       	rjmp	.+332    	; 0x3046 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_D){
    2efa:	89 81       	ldd	r24, Y+1	; 0x01
    2efc:	9a 81       	ldd	r25, Y+2	; 0x02
    2efe:	88 0f       	add	r24, r24
    2f00:	99 1f       	adc	r25, r25
    2f02:	88 0f       	add	r24, r24
    2f04:	99 1f       	adc	r25, r25
    2f06:	fc 01       	movw	r30, r24
    2f08:	e7 59       	subi	r30, 0x97	; 151
    2f0a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f0c:	80 81       	ld	r24, Z
    2f0e:	83 30       	cpi	r24, 0x03	; 3
    2f10:	09 f0       	breq	.+2      	; 0x2f14 <DIO_ES_tInit+0x41e>
    2f12:	99 c0       	rjmp	.+306    	; 0x3046 <DIO_ES_tInit+0x550>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    2f14:	89 81       	ldd	r24, Y+1	; 0x01
    2f16:	9a 81       	ldd	r25, Y+2	; 0x02
    2f18:	88 0f       	add	r24, r24
    2f1a:	99 1f       	adc	r25, r25
    2f1c:	01 96       	adiw	r24, 0x01	; 1
    2f1e:	88 0f       	add	r24, r24
    2f20:	99 1f       	adc	r25, r25
    2f22:	fc 01       	movw	r30, r24
    2f24:	e7 59       	subi	r30, 0x97	; 151
    2f26:	fe 4f       	sbci	r31, 0xFE	; 254
    2f28:	80 81       	ld	r24, Z
    2f2a:	81 30       	cpi	r24, 0x01	; 1
    2f2c:	e9 f4       	brne	.+58     	; 0x2f68 <DIO_ES_tInit+0x472>
				SET_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    2f2e:	a1 e3       	ldi	r26, 0x31	; 49
    2f30:	b0 e0       	ldi	r27, 0x00	; 0
    2f32:	e1 e3       	ldi	r30, 0x31	; 49
    2f34:	f0 e0       	ldi	r31, 0x00	; 0
    2f36:	80 81       	ld	r24, Z
    2f38:	48 2f       	mov	r20, r24
    2f3a:	89 81       	ldd	r24, Y+1	; 0x01
    2f3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f3e:	88 0f       	add	r24, r24
    2f40:	99 1f       	adc	r25, r25
    2f42:	88 0f       	add	r24, r24
    2f44:	99 1f       	adc	r25, r25
    2f46:	fc 01       	movw	r30, r24
    2f48:	e6 59       	subi	r30, 0x96	; 150
    2f4a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f4c:	80 81       	ld	r24, Z
    2f4e:	28 2f       	mov	r18, r24
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	02 2e       	mov	r0, r18
    2f58:	02 c0       	rjmp	.+4      	; 0x2f5e <DIO_ES_tInit+0x468>
    2f5a:	88 0f       	add	r24, r24
    2f5c:	99 1f       	adc	r25, r25
    2f5e:	0a 94       	dec	r0
    2f60:	e2 f7       	brpl	.-8      	; 0x2f5a <DIO_ES_tInit+0x464>
    2f62:	84 2b       	or	r24, r20
    2f64:	8c 93       	st	X, r24
    2f66:	6f c0       	rjmp	.+222    	; 0x3046 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    2f68:	a1 e3       	ldi	r26, 0x31	; 49
    2f6a:	b0 e0       	ldi	r27, 0x00	; 0
    2f6c:	e1 e3       	ldi	r30, 0x31	; 49
    2f6e:	f0 e0       	ldi	r31, 0x00	; 0
    2f70:	80 81       	ld	r24, Z
    2f72:	48 2f       	mov	r20, r24
    2f74:	89 81       	ldd	r24, Y+1	; 0x01
    2f76:	9a 81       	ldd	r25, Y+2	; 0x02
    2f78:	88 0f       	add	r24, r24
    2f7a:	99 1f       	adc	r25, r25
    2f7c:	88 0f       	add	r24, r24
    2f7e:	99 1f       	adc	r25, r25
    2f80:	fc 01       	movw	r30, r24
    2f82:	e6 59       	subi	r30, 0x96	; 150
    2f84:	fe 4f       	sbci	r31, 0xFE	; 254
    2f86:	80 81       	ld	r24, Z
    2f88:	28 2f       	mov	r18, r24
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	02 2e       	mov	r0, r18
    2f92:	02 c0       	rjmp	.+4      	; 0x2f98 <DIO_ES_tInit+0x4a2>
    2f94:	88 0f       	add	r24, r24
    2f96:	99 1f       	adc	r25, r25
    2f98:	0a 94       	dec	r0
    2f9a:	e2 f7       	brpl	.-8      	; 0x2f94 <DIO_ES_tInit+0x49e>
    2f9c:	80 95       	com	r24
    2f9e:	84 23       	and	r24, r20
    2fa0:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    2fa2:	89 81       	ldd	r24, Y+1	; 0x01
    2fa4:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa6:	88 0f       	add	r24, r24
    2fa8:	99 1f       	adc	r25, r25
    2faa:	88 0f       	add	r24, r24
    2fac:	99 1f       	adc	r25, r25
    2fae:	fc 01       	movw	r30, r24
    2fb0:	e4 59       	subi	r30, 0x94	; 148
    2fb2:	fe 4f       	sbci	r31, 0xFE	; 254
    2fb4:	80 81       	ld	r24, Z
    2fb6:	81 30       	cpi	r24, 0x01	; 1
    2fb8:	e9 f4       	brne	.+58     	; 0x2ff4 <DIO_ES_tInit+0x4fe>
					SET_BIT(PORTD,Dio_CfgPinsArray[i].Pin);
    2fba:	a2 e3       	ldi	r26, 0x32	; 50
    2fbc:	b0 e0       	ldi	r27, 0x00	; 0
    2fbe:	e2 e3       	ldi	r30, 0x32	; 50
    2fc0:	f0 e0       	ldi	r31, 0x00	; 0
    2fc2:	80 81       	ld	r24, Z
    2fc4:	48 2f       	mov	r20, r24
    2fc6:	89 81       	ldd	r24, Y+1	; 0x01
    2fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    2fca:	88 0f       	add	r24, r24
    2fcc:	99 1f       	adc	r25, r25
    2fce:	88 0f       	add	r24, r24
    2fd0:	99 1f       	adc	r25, r25
    2fd2:	fc 01       	movw	r30, r24
    2fd4:	e6 59       	subi	r30, 0x96	; 150
    2fd6:	fe 4f       	sbci	r31, 0xFE	; 254
    2fd8:	80 81       	ld	r24, Z
    2fda:	28 2f       	mov	r18, r24
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	81 e0       	ldi	r24, 0x01	; 1
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	02 2e       	mov	r0, r18
    2fe4:	02 c0       	rjmp	.+4      	; 0x2fea <DIO_ES_tInit+0x4f4>
    2fe6:	88 0f       	add	r24, r24
    2fe8:	99 1f       	adc	r25, r25
    2fea:	0a 94       	dec	r0
    2fec:	e2 f7       	brpl	.-8      	; 0x2fe6 <DIO_ES_tInit+0x4f0>
    2fee:	84 2b       	or	r24, r20
    2ff0:	8c 93       	st	X, r24
    2ff2:	29 c0       	rjmp	.+82     	; 0x3046 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    2ff4:	89 81       	ldd	r24, Y+1	; 0x01
    2ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ff8:	88 0f       	add	r24, r24
    2ffa:	99 1f       	adc	r25, r25
    2ffc:	88 0f       	add	r24, r24
    2ffe:	99 1f       	adc	r25, r25
    3000:	fc 01       	movw	r30, r24
    3002:	e4 59       	subi	r30, 0x94	; 148
    3004:	fe 4f       	sbci	r31, 0xFE	; 254
    3006:	80 81       	ld	r24, Z
    3008:	88 23       	and	r24, r24
    300a:	e9 f4       	brne	.+58     	; 0x3046 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    300c:	ab e3       	ldi	r26, 0x3B	; 59
    300e:	b0 e0       	ldi	r27, 0x00	; 0
    3010:	eb e3       	ldi	r30, 0x3B	; 59
    3012:	f0 e0       	ldi	r31, 0x00	; 0
    3014:	80 81       	ld	r24, Z
    3016:	48 2f       	mov	r20, r24
    3018:	89 81       	ldd	r24, Y+1	; 0x01
    301a:	9a 81       	ldd	r25, Y+2	; 0x02
    301c:	88 0f       	add	r24, r24
    301e:	99 1f       	adc	r25, r25
    3020:	88 0f       	add	r24, r24
    3022:	99 1f       	adc	r25, r25
    3024:	fc 01       	movw	r30, r24
    3026:	e6 59       	subi	r30, 0x96	; 150
    3028:	fe 4f       	sbci	r31, 0xFE	; 254
    302a:	80 81       	ld	r24, Z
    302c:	28 2f       	mov	r18, r24
    302e:	30 e0       	ldi	r19, 0x00	; 0
    3030:	81 e0       	ldi	r24, 0x01	; 1
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	02 2e       	mov	r0, r18
    3036:	02 c0       	rjmp	.+4      	; 0x303c <DIO_ES_tInit+0x546>
    3038:	88 0f       	add	r24, r24
    303a:	99 1f       	adc	r25, r25
    303c:	0a 94       	dec	r0
    303e:	e2 f7       	brpl	.-8      	; 0x3038 <DIO_ES_tInit+0x542>
    3040:	80 95       	com	r24
    3042:	84 23       	and	r24, r20
    3044:	8c 93       	st	X, r24


ES_t DIO_ES_tInit(void)
{
	int i = 0;
	for(i=0 ; i<PIN_COUNT ; i++){
    3046:	89 81       	ldd	r24, Y+1	; 0x01
    3048:	9a 81       	ldd	r25, Y+2	; 0x02
    304a:	01 96       	adiw	r24, 0x01	; 1
    304c:	9a 83       	std	Y+2, r25	; 0x02
    304e:	89 83       	std	Y+1, r24	; 0x01
    3050:	89 81       	ldd	r24, Y+1	; 0x01
    3052:	9a 81       	ldd	r25, Y+2	; 0x02
    3054:	88 31       	cpi	r24, 0x18	; 24
    3056:	91 05       	cpc	r25, r1
    3058:	0c f4       	brge	.+2      	; 0x305c <DIO_ES_tInit+0x566>
    305a:	57 cd       	rjmp	.-1362   	; 0x2b0a <DIO_ES_tInit+0x14>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
				}
			}
		}
	}
	return ES_OK;
    305c:	80 e0       	ldi	r24, 0x00	; 0
}
    305e:	0f 90       	pop	r0
    3060:	0f 90       	pop	r0
    3062:	cf 91       	pop	r28
    3064:	df 91       	pop	r29
    3066:	08 95       	ret

00003068 <Servo_Init>:
//the left.
//-90" (~1


void Servo_Init(void)
{
    3068:	df 93       	push	r29
    306a:	cf 93       	push	r28
    306c:	cd b7       	in	r28, 0x3d	; 61
    306e:	de b7       	in	r29, 0x3e	; 62
    3070:	28 97       	sbiw	r28, 0x08	; 8
    3072:	0f b6       	in	r0, 0x3f	; 63
    3074:	f8 94       	cli
    3076:	de bf       	out	0x3e, r29	; 62
    3078:	0f be       	out	0x3f, r0	; 63
    307a:	cd bf       	out	0x3d, r28	; 61

	DIO_ES_tSetPinDirection(DIO_U8_PORT_D, DIO_U8_PIN_4, OUTPUT);
    307c:	83 e0       	ldi	r24, 0x03	; 3
    307e:	64 e0       	ldi	r22, 0x04	; 4
    3080:	41 e0       	ldi	r20, 0x01	; 1
    3082:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(DIO_U8_PORT_D, DIO_U8_PIN_5, OUTPUT);
    3086:	83 e0       	ldi	r24, 0x03	; 3
    3088:	65 e0       	ldi	r22, 0x05	; 5
    308a:	41 e0       	ldi	r20, 0x01	; 1
    308c:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_ES_tSetPinDirection>



	TIMER1_Config_t Timer1Cfg;
	Timer1Cfg.mode = TIMER1_FAST_PWM_ICR1_TOP;
    3090:	81 e0       	ldi	r24, 0x01	; 1
    3092:	89 83       	std	Y+1, r24	; 0x01
	Timer1Cfg.prescalar = TIMER1_PRESCALAR_64;
    3094:	83 e0       	ldi	r24, 0x03	; 3
    3096:	8a 83       	std	Y+2, r24	; 0x02
	Timer1Cfg.OC1A_mode = OCRA_NON_INVERTING;
    3098:	82 e0       	ldi	r24, 0x02	; 2
    309a:	8b 83       	std	Y+3, r24	; 0x03
	Timer1Cfg.OC1B_mode = OCRB_NON_INVERTING;
    309c:	82 e0       	ldi	r24, 0x02	; 2
    309e:	8c 83       	std	Y+4, r24	; 0x04
	TIMER1_Init(&Timer1Cfg);
    30a0:	ce 01       	movw	r24, r28
    30a2:	01 96       	adiw	r24, 0x01	; 1
    30a4:	0e 94 ef 0b 	call	0x17de	; 0x17de <TIMER1_Init>


}
    30a8:	28 96       	adiw	r28, 0x08	; 8
    30aa:	0f b6       	in	r0, 0x3f	; 63
    30ac:	f8 94       	cli
    30ae:	de bf       	out	0x3e, r29	; 62
    30b0:	0f be       	out	0x3f, r0	; 63
    30b2:	cd bf       	out	0x3d, r28	; 61
    30b4:	cf 91       	pop	r28
    30b6:	df 91       	pop	r29
    30b8:	08 95       	ret

000030ba <Servo_Turn>:



// From 0 to 180
void Servo_Turn(int angle)
{
    30ba:	df 93       	push	r29
    30bc:	cf 93       	push	r28
    30be:	00 d0       	rcall	.+0      	; 0x30c0 <Servo_Turn+0x6>
    30c0:	00 d0       	rcall	.+0      	; 0x30c2 <Servo_Turn+0x8>
    30c2:	00 d0       	rcall	.+0      	; 0x30c4 <Servo_Turn+0xa>
    30c4:	cd b7       	in	r28, 0x3d	; 61
    30c6:	de b7       	in	r29, 0x3e	; 62
    30c8:	9e 83       	std	Y+6, r25	; 0x06
    30ca:	8d 83       	std	Y+5, r24	; 0x05
	// Limit the angle to the range -90 to +90 degrees
	if (angle < -90)
    30cc:	8d 81       	ldd	r24, Y+5	; 0x05
    30ce:	9e 81       	ldd	r25, Y+6	; 0x06
    30d0:	2f ef       	ldi	r18, 0xFF	; 255
    30d2:	86 3a       	cpi	r24, 0xA6	; 166
    30d4:	92 07       	cpc	r25, r18
    30d6:	2c f4       	brge	.+10     	; 0x30e2 <Servo_Turn+0x28>
		angle = -90;
    30d8:	86 ea       	ldi	r24, 0xA6	; 166
    30da:	9f ef       	ldi	r25, 0xFF	; 255
    30dc:	9e 83       	std	Y+6, r25	; 0x06
    30de:	8d 83       	std	Y+5, r24	; 0x05
    30e0:	09 c0       	rjmp	.+18     	; 0x30f4 <Servo_Turn+0x3a>
	else if (angle > 90)
    30e2:	8d 81       	ldd	r24, Y+5	; 0x05
    30e4:	9e 81       	ldd	r25, Y+6	; 0x06
    30e6:	8b 35       	cpi	r24, 0x5B	; 91
    30e8:	91 05       	cpc	r25, r1
    30ea:	24 f0       	brlt	.+8      	; 0x30f4 <Servo_Turn+0x3a>
		angle = 90;
    30ec:	8a e5       	ldi	r24, 0x5A	; 90
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	9e 83       	std	Y+6, r25	; 0x06
    30f2:	8d 83       	std	Y+5, r24	; 0x05

	// Calculate the pulse width based on the desired angle
	u16 pulse_width_microseconds = 1500 + ((angle / 90) * 500);
    30f4:	8d 81       	ldd	r24, Y+5	; 0x05
    30f6:	9e 81       	ldd	r25, Y+6	; 0x06
    30f8:	2a e5       	ldi	r18, 0x5A	; 90
    30fa:	30 e0       	ldi	r19, 0x00	; 0
    30fc:	b9 01       	movw	r22, r18
    30fe:	0e 94 0c 23 	call	0x4618	; 0x4618 <__divmodhi4>
    3102:	cb 01       	movw	r24, r22
    3104:	9c 01       	movw	r18, r24
    3106:	84 ef       	ldi	r24, 0xF4	; 244
    3108:	91 e0       	ldi	r25, 0x01	; 1
    310a:	ac 01       	movw	r20, r24
    310c:	24 9f       	mul	r18, r20
    310e:	c0 01       	movw	r24, r0
    3110:	25 9f       	mul	r18, r21
    3112:	90 0d       	add	r25, r0
    3114:	34 9f       	mul	r19, r20
    3116:	90 0d       	add	r25, r0
    3118:	11 24       	eor	r1, r1
    311a:	84 52       	subi	r24, 0x24	; 36
    311c:	9a 4f       	sbci	r25, 0xFA	; 250
    311e:	9c 83       	std	Y+4, r25	; 0x04
    3120:	8b 83       	std	Y+3, r24	; 0x03
	u16 pulse_width_counts = pulse_width_microseconds / 4; // Timer 1 resolution prescaler is 64
    3122:	8b 81       	ldd	r24, Y+3	; 0x03
    3124:	9c 81       	ldd	r25, Y+4	; 0x04
    3126:	96 95       	lsr	r25
    3128:	87 95       	ror	r24
    312a:	96 95       	lsr	r25
    312c:	87 95       	ror	r24
    312e:	9a 83       	std	Y+2, r25	; 0x02
    3130:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = pulse_width_counts - 1;
    3132:	ea e4       	ldi	r30, 0x4A	; 74
    3134:	f0 e0       	ldi	r31, 0x00	; 0
    3136:	89 81       	ldd	r24, Y+1	; 0x01
    3138:	9a 81       	ldd	r25, Y+2	; 0x02
    313a:	01 97       	sbiw	r24, 0x01	; 1
    313c:	91 83       	std	Z+1, r25	; 0x01
    313e:	80 83       	st	Z, r24


	ICR1 = 4999;			// 20 ms in data sheet of servo
    3140:	e6 e4       	ldi	r30, 0x46	; 70
    3142:	f0 e0       	ldi	r31, 0x00	; 0
    3144:	87 e8       	ldi	r24, 0x87	; 135
    3146:	93 e1       	ldi	r25, 0x13	; 19
    3148:	91 83       	std	Z+1, r25	; 0x01
    314a:	80 83       	st	Z, r24
}
    314c:	26 96       	adiw	r28, 0x06	; 6
    314e:	0f b6       	in	r0, 0x3f	; 63
    3150:	f8 94       	cli
    3152:	de bf       	out	0x3e, r29	; 62
    3154:	0f be       	out	0x3f, r0	; 63
    3156:	cd bf       	out	0x3d, r28	; 61
    3158:	cf 91       	pop	r28
    315a:	df 91       	pop	r29
    315c:	08 95       	ret

0000315e <Servo_Stop>:

void Servo_Stop()
{
    315e:	df 93       	push	r29
    3160:	cf 93       	push	r28
    3162:	cd b7       	in	r28, 0x3d	; 61
    3164:	de b7       	in	r29, 0x3e	; 62

	TIMER1_Stop();
    3166:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <TIMER1_Stop>
}
    316a:	cf 91       	pop	r28
    316c:	df 91       	pop	r29
    316e:	08 95       	ret

00003170 <LCD_ES_tTrigger_Enable>:
//ProtoType of static is defined in source file itself(Private declaration)
static ES_t LCD_ES_tTrigger_Enable(void);
static ES_t LCD_ES_tSet_Cursor_Pos(u8 row,u8 column);

//We make it static cuz we won't use it anywhere but here
static ES_t LCD_ES_tTrigger_Enable(void){
    3170:	df 93       	push	r29
    3172:	cf 93       	push	r28
    3174:	cd b7       	in	r28, 0x3d	; 61
    3176:	de b7       	in	r29, 0x3e	; 62
    3178:	e0 97       	sbiw	r28, 0x30	; 48
    317a:	0f b6       	in	r0, 0x3f	; 63
    317c:	f8 94       	cli
    317e:	de bf       	out	0x3e, r29	; 62
    3180:	0f be       	out	0x3f, r0	; 63
    3182:	cd bf       	out	0x3d, r28	; 61
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, HIGH);
    3184:	81 e0       	ldi	r24, 0x01	; 1
    3186:	62 e0       	ldi	r22, 0x02	; 2
    3188:	41 e0       	ldi	r20, 0x01	; 1
    318a:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
    318e:	80 e0       	ldi	r24, 0x00	; 0
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	a0 e2       	ldi	r26, 0x20	; 32
    3194:	b1 e4       	ldi	r27, 0x41	; 65
    3196:	8d a7       	std	Y+45, r24	; 0x2d
    3198:	9e a7       	std	Y+46, r25	; 0x2e
    319a:	af a7       	std	Y+47, r26	; 0x2f
    319c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    319e:	6d a5       	ldd	r22, Y+45	; 0x2d
    31a0:	7e a5       	ldd	r23, Y+46	; 0x2e
    31a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    31a4:	98 a9       	ldd	r25, Y+48	; 0x30
    31a6:	2b ea       	ldi	r18, 0xAB	; 171
    31a8:	3a ea       	ldi	r19, 0xAA	; 170
    31aa:	4a ea       	ldi	r20, 0xAA	; 170
    31ac:	50 e4       	ldi	r21, 0x40	; 64
    31ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b2:	dc 01       	movw	r26, r24
    31b4:	cb 01       	movw	r24, r22
    31b6:	89 a7       	std	Y+41, r24	; 0x29
    31b8:	9a a7       	std	Y+42, r25	; 0x2a
    31ba:	ab a7       	std	Y+43, r26	; 0x2b
    31bc:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    31be:	69 a5       	ldd	r22, Y+41	; 0x29
    31c0:	7a a5       	ldd	r23, Y+42	; 0x2a
    31c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    31c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    31c6:	20 e0       	ldi	r18, 0x00	; 0
    31c8:	30 e0       	ldi	r19, 0x00	; 0
    31ca:	40 e8       	ldi	r20, 0x80	; 128
    31cc:	5f e3       	ldi	r21, 0x3F	; 63
    31ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31d2:	88 23       	and	r24, r24
    31d4:	1c f4       	brge	.+6      	; 0x31dc <LCD_ES_tTrigger_Enable+0x6c>
		__ticks = 1;
    31d6:	81 e0       	ldi	r24, 0x01	; 1
    31d8:	88 a7       	std	Y+40, r24	; 0x28
    31da:	91 c0       	rjmp	.+290    	; 0x32fe <LCD_ES_tTrigger_Enable+0x18e>
	else if (__tmp > 255)
    31dc:	69 a5       	ldd	r22, Y+41	; 0x29
    31de:	7a a5       	ldd	r23, Y+42	; 0x2a
    31e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    31e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    31e4:	20 e0       	ldi	r18, 0x00	; 0
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	4f e7       	ldi	r20, 0x7F	; 127
    31ea:	53 e4       	ldi	r21, 0x43	; 67
    31ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31f0:	18 16       	cp	r1, r24
    31f2:	0c f0       	brlt	.+2      	; 0x31f6 <LCD_ES_tTrigger_Enable+0x86>
    31f4:	7b c0       	rjmp	.+246    	; 0x32ec <LCD_ES_tTrigger_Enable+0x17c>
	{
		_delay_ms(__us / 1000.0);
    31f6:	6d a5       	ldd	r22, Y+45	; 0x2d
    31f8:	7e a5       	ldd	r23, Y+46	; 0x2e
    31fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    31fc:	98 a9       	ldd	r25, Y+48	; 0x30
    31fe:	20 e0       	ldi	r18, 0x00	; 0
    3200:	30 e0       	ldi	r19, 0x00	; 0
    3202:	4a e7       	ldi	r20, 0x7A	; 122
    3204:	54 e4       	ldi	r21, 0x44	; 68
    3206:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    320a:	dc 01       	movw	r26, r24
    320c:	cb 01       	movw	r24, r22
    320e:	8c a3       	std	Y+36, r24	; 0x24
    3210:	9d a3       	std	Y+37, r25	; 0x25
    3212:	ae a3       	std	Y+38, r26	; 0x26
    3214:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3216:	6c a1       	ldd	r22, Y+36	; 0x24
    3218:	7d a1       	ldd	r23, Y+37	; 0x25
    321a:	8e a1       	ldd	r24, Y+38	; 0x26
    321c:	9f a1       	ldd	r25, Y+39	; 0x27
    321e:	20 e0       	ldi	r18, 0x00	; 0
    3220:	30 e0       	ldi	r19, 0x00	; 0
    3222:	4a e7       	ldi	r20, 0x7A	; 122
    3224:	55 e4       	ldi	r21, 0x45	; 69
    3226:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    322a:	dc 01       	movw	r26, r24
    322c:	cb 01       	movw	r24, r22
    322e:	88 a3       	std	Y+32, r24	; 0x20
    3230:	99 a3       	std	Y+33, r25	; 0x21
    3232:	aa a3       	std	Y+34, r26	; 0x22
    3234:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3236:	68 a1       	ldd	r22, Y+32	; 0x20
    3238:	79 a1       	ldd	r23, Y+33	; 0x21
    323a:	8a a1       	ldd	r24, Y+34	; 0x22
    323c:	9b a1       	ldd	r25, Y+35	; 0x23
    323e:	20 e0       	ldi	r18, 0x00	; 0
    3240:	30 e0       	ldi	r19, 0x00	; 0
    3242:	40 e8       	ldi	r20, 0x80	; 128
    3244:	5f e3       	ldi	r21, 0x3F	; 63
    3246:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    324a:	88 23       	and	r24, r24
    324c:	2c f4       	brge	.+10     	; 0x3258 <LCD_ES_tTrigger_Enable+0xe8>
		__ticks = 1;
    324e:	81 e0       	ldi	r24, 0x01	; 1
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	9f 8f       	std	Y+31, r25	; 0x1f
    3254:	8e 8f       	std	Y+30, r24	; 0x1e
    3256:	3f c0       	rjmp	.+126    	; 0x32d6 <LCD_ES_tTrigger_Enable+0x166>
	else if (__tmp > 65535)
    3258:	68 a1       	ldd	r22, Y+32	; 0x20
    325a:	79 a1       	ldd	r23, Y+33	; 0x21
    325c:	8a a1       	ldd	r24, Y+34	; 0x22
    325e:	9b a1       	ldd	r25, Y+35	; 0x23
    3260:	20 e0       	ldi	r18, 0x00	; 0
    3262:	3f ef       	ldi	r19, 0xFF	; 255
    3264:	4f e7       	ldi	r20, 0x7F	; 127
    3266:	57 e4       	ldi	r21, 0x47	; 71
    3268:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    326c:	18 16       	cp	r1, r24
    326e:	4c f5       	brge	.+82     	; 0x32c2 <LCD_ES_tTrigger_Enable+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3270:	6c a1       	ldd	r22, Y+36	; 0x24
    3272:	7d a1       	ldd	r23, Y+37	; 0x25
    3274:	8e a1       	ldd	r24, Y+38	; 0x26
    3276:	9f a1       	ldd	r25, Y+39	; 0x27
    3278:	20 e0       	ldi	r18, 0x00	; 0
    327a:	30 e0       	ldi	r19, 0x00	; 0
    327c:	40 e2       	ldi	r20, 0x20	; 32
    327e:	51 e4       	ldi	r21, 0x41	; 65
    3280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3284:	dc 01       	movw	r26, r24
    3286:	cb 01       	movw	r24, r22
    3288:	bc 01       	movw	r22, r24
    328a:	cd 01       	movw	r24, r26
    328c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3290:	dc 01       	movw	r26, r24
    3292:	cb 01       	movw	r24, r22
    3294:	9f 8f       	std	Y+31, r25	; 0x1f
    3296:	8e 8f       	std	Y+30, r24	; 0x1e
    3298:	0f c0       	rjmp	.+30     	; 0x32b8 <LCD_ES_tTrigger_Enable+0x148>
    329a:	80 e9       	ldi	r24, 0x90	; 144
    329c:	91 e0       	ldi	r25, 0x01	; 1
    329e:	9d 8f       	std	Y+29, r25	; 0x1d
    32a0:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    32a2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    32a4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    32a6:	01 97       	sbiw	r24, 0x01	; 1
    32a8:	f1 f7       	brne	.-4      	; 0x32a6 <LCD_ES_tTrigger_Enable+0x136>
    32aa:	9d 8f       	std	Y+29, r25	; 0x1d
    32ac:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    32b0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    32b2:	01 97       	sbiw	r24, 0x01	; 1
    32b4:	9f 8f       	std	Y+31, r25	; 0x1f
    32b6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32b8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    32ba:	9f 8d       	ldd	r25, Y+31	; 0x1f
    32bc:	00 97       	sbiw	r24, 0x00	; 0
    32be:	69 f7       	brne	.-38     	; 0x329a <LCD_ES_tTrigger_Enable+0x12a>
    32c0:	24 c0       	rjmp	.+72     	; 0x330a <LCD_ES_tTrigger_Enable+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32c2:	68 a1       	ldd	r22, Y+32	; 0x20
    32c4:	79 a1       	ldd	r23, Y+33	; 0x21
    32c6:	8a a1       	ldd	r24, Y+34	; 0x22
    32c8:	9b a1       	ldd	r25, Y+35	; 0x23
    32ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ce:	dc 01       	movw	r26, r24
    32d0:	cb 01       	movw	r24, r22
    32d2:	9f 8f       	std	Y+31, r25	; 0x1f
    32d4:	8e 8f       	std	Y+30, r24	; 0x1e
    32d6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    32d8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    32da:	9b 8f       	std	Y+27, r25	; 0x1b
    32dc:	8a 8f       	std	Y+26, r24	; 0x1a
    32de:	8a 8d       	ldd	r24, Y+26	; 0x1a
    32e0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    32e2:	01 97       	sbiw	r24, 0x01	; 1
    32e4:	f1 f7       	brne	.-4      	; 0x32e2 <LCD_ES_tTrigger_Enable+0x172>
    32e6:	9b 8f       	std	Y+27, r25	; 0x1b
    32e8:	8a 8f       	std	Y+26, r24	; 0x1a
    32ea:	0f c0       	rjmp	.+30     	; 0x330a <LCD_ES_tTrigger_Enable+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    32ec:	69 a5       	ldd	r22, Y+41	; 0x29
    32ee:	7a a5       	ldd	r23, Y+42	; 0x2a
    32f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    32f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    32f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f8:	dc 01       	movw	r26, r24
    32fa:	cb 01       	movw	r24, r22
    32fc:	88 a7       	std	Y+40, r24	; 0x28
    32fe:	88 a5       	ldd	r24, Y+40	; 0x28
    3300:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3302:	89 8d       	ldd	r24, Y+25	; 0x19
    3304:	8a 95       	dec	r24
    3306:	f1 f7       	brne	.-4      	; 0x3304 <LCD_ES_tTrigger_Enable+0x194>
    3308:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, LOW);
    330a:	81 e0       	ldi	r24, 0x01	; 1
    330c:	62 e0       	ldi	r22, 0x02	; 2
    330e:	40 e0       	ldi	r20, 0x00	; 0
    3310:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
    3314:	80 e0       	ldi	r24, 0x00	; 0
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	aa ef       	ldi	r26, 0xFA	; 250
    331a:	b4 e4       	ldi	r27, 0x44	; 68
    331c:	8d 8b       	std	Y+21, r24	; 0x15
    331e:	9e 8b       	std	Y+22, r25	; 0x16
    3320:	af 8b       	std	Y+23, r26	; 0x17
    3322:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3324:	6d 89       	ldd	r22, Y+21	; 0x15
    3326:	7e 89       	ldd	r23, Y+22	; 0x16
    3328:	8f 89       	ldd	r24, Y+23	; 0x17
    332a:	98 8d       	ldd	r25, Y+24	; 0x18
    332c:	2b ea       	ldi	r18, 0xAB	; 171
    332e:	3a ea       	ldi	r19, 0xAA	; 170
    3330:	4a ea       	ldi	r20, 0xAA	; 170
    3332:	50 e4       	ldi	r21, 0x40	; 64
    3334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3338:	dc 01       	movw	r26, r24
    333a:	cb 01       	movw	r24, r22
    333c:	89 8b       	std	Y+17, r24	; 0x11
    333e:	9a 8b       	std	Y+18, r25	; 0x12
    3340:	ab 8b       	std	Y+19, r26	; 0x13
    3342:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3344:	69 89       	ldd	r22, Y+17	; 0x11
    3346:	7a 89       	ldd	r23, Y+18	; 0x12
    3348:	8b 89       	ldd	r24, Y+19	; 0x13
    334a:	9c 89       	ldd	r25, Y+20	; 0x14
    334c:	20 e0       	ldi	r18, 0x00	; 0
    334e:	30 e0       	ldi	r19, 0x00	; 0
    3350:	40 e8       	ldi	r20, 0x80	; 128
    3352:	5f e3       	ldi	r21, 0x3F	; 63
    3354:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3358:	88 23       	and	r24, r24
    335a:	1c f4       	brge	.+6      	; 0x3362 <LCD_ES_tTrigger_Enable+0x1f2>
		__ticks = 1;
    335c:	81 e0       	ldi	r24, 0x01	; 1
    335e:	88 8b       	std	Y+16, r24	; 0x10
    3360:	91 c0       	rjmp	.+290    	; 0x3484 <LCD_ES_tTrigger_Enable+0x314>
	else if (__tmp > 255)
    3362:	69 89       	ldd	r22, Y+17	; 0x11
    3364:	7a 89       	ldd	r23, Y+18	; 0x12
    3366:	8b 89       	ldd	r24, Y+19	; 0x13
    3368:	9c 89       	ldd	r25, Y+20	; 0x14
    336a:	20 e0       	ldi	r18, 0x00	; 0
    336c:	30 e0       	ldi	r19, 0x00	; 0
    336e:	4f e7       	ldi	r20, 0x7F	; 127
    3370:	53 e4       	ldi	r21, 0x43	; 67
    3372:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3376:	18 16       	cp	r1, r24
    3378:	0c f0       	brlt	.+2      	; 0x337c <LCD_ES_tTrigger_Enable+0x20c>
    337a:	7b c0       	rjmp	.+246    	; 0x3472 <LCD_ES_tTrigger_Enable+0x302>
	{
		_delay_ms(__us / 1000.0);
    337c:	6d 89       	ldd	r22, Y+21	; 0x15
    337e:	7e 89       	ldd	r23, Y+22	; 0x16
    3380:	8f 89       	ldd	r24, Y+23	; 0x17
    3382:	98 8d       	ldd	r25, Y+24	; 0x18
    3384:	20 e0       	ldi	r18, 0x00	; 0
    3386:	30 e0       	ldi	r19, 0x00	; 0
    3388:	4a e7       	ldi	r20, 0x7A	; 122
    338a:	54 e4       	ldi	r21, 0x44	; 68
    338c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3390:	dc 01       	movw	r26, r24
    3392:	cb 01       	movw	r24, r22
    3394:	8c 87       	std	Y+12, r24	; 0x0c
    3396:	9d 87       	std	Y+13, r25	; 0x0d
    3398:	ae 87       	std	Y+14, r26	; 0x0e
    339a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    339c:	6c 85       	ldd	r22, Y+12	; 0x0c
    339e:	7d 85       	ldd	r23, Y+13	; 0x0d
    33a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    33a2:	9f 85       	ldd	r25, Y+15	; 0x0f
    33a4:	20 e0       	ldi	r18, 0x00	; 0
    33a6:	30 e0       	ldi	r19, 0x00	; 0
    33a8:	4a e7       	ldi	r20, 0x7A	; 122
    33aa:	55 e4       	ldi	r21, 0x45	; 69
    33ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b0:	dc 01       	movw	r26, r24
    33b2:	cb 01       	movw	r24, r22
    33b4:	88 87       	std	Y+8, r24	; 0x08
    33b6:	99 87       	std	Y+9, r25	; 0x09
    33b8:	aa 87       	std	Y+10, r26	; 0x0a
    33ba:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    33bc:	68 85       	ldd	r22, Y+8	; 0x08
    33be:	79 85       	ldd	r23, Y+9	; 0x09
    33c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    33c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    33c4:	20 e0       	ldi	r18, 0x00	; 0
    33c6:	30 e0       	ldi	r19, 0x00	; 0
    33c8:	40 e8       	ldi	r20, 0x80	; 128
    33ca:	5f e3       	ldi	r21, 0x3F	; 63
    33cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33d0:	88 23       	and	r24, r24
    33d2:	2c f4       	brge	.+10     	; 0x33de <LCD_ES_tTrigger_Enable+0x26e>
		__ticks = 1;
    33d4:	81 e0       	ldi	r24, 0x01	; 1
    33d6:	90 e0       	ldi	r25, 0x00	; 0
    33d8:	9f 83       	std	Y+7, r25	; 0x07
    33da:	8e 83       	std	Y+6, r24	; 0x06
    33dc:	3f c0       	rjmp	.+126    	; 0x345c <LCD_ES_tTrigger_Enable+0x2ec>
	else if (__tmp > 65535)
    33de:	68 85       	ldd	r22, Y+8	; 0x08
    33e0:	79 85       	ldd	r23, Y+9	; 0x09
    33e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    33e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    33e6:	20 e0       	ldi	r18, 0x00	; 0
    33e8:	3f ef       	ldi	r19, 0xFF	; 255
    33ea:	4f e7       	ldi	r20, 0x7F	; 127
    33ec:	57 e4       	ldi	r21, 0x47	; 71
    33ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33f2:	18 16       	cp	r1, r24
    33f4:	4c f5       	brge	.+82     	; 0x3448 <LCD_ES_tTrigger_Enable+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33f6:	6c 85       	ldd	r22, Y+12	; 0x0c
    33f8:	7d 85       	ldd	r23, Y+13	; 0x0d
    33fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    33fc:	9f 85       	ldd	r25, Y+15	; 0x0f
    33fe:	20 e0       	ldi	r18, 0x00	; 0
    3400:	30 e0       	ldi	r19, 0x00	; 0
    3402:	40 e2       	ldi	r20, 0x20	; 32
    3404:	51 e4       	ldi	r21, 0x41	; 65
    3406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    340a:	dc 01       	movw	r26, r24
    340c:	cb 01       	movw	r24, r22
    340e:	bc 01       	movw	r22, r24
    3410:	cd 01       	movw	r24, r26
    3412:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3416:	dc 01       	movw	r26, r24
    3418:	cb 01       	movw	r24, r22
    341a:	9f 83       	std	Y+7, r25	; 0x07
    341c:	8e 83       	std	Y+6, r24	; 0x06
    341e:	0f c0       	rjmp	.+30     	; 0x343e <LCD_ES_tTrigger_Enable+0x2ce>
    3420:	80 e9       	ldi	r24, 0x90	; 144
    3422:	91 e0       	ldi	r25, 0x01	; 1
    3424:	9d 83       	std	Y+5, r25	; 0x05
    3426:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3428:	8c 81       	ldd	r24, Y+4	; 0x04
    342a:	9d 81       	ldd	r25, Y+5	; 0x05
    342c:	01 97       	sbiw	r24, 0x01	; 1
    342e:	f1 f7       	brne	.-4      	; 0x342c <LCD_ES_tTrigger_Enable+0x2bc>
    3430:	9d 83       	std	Y+5, r25	; 0x05
    3432:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3434:	8e 81       	ldd	r24, Y+6	; 0x06
    3436:	9f 81       	ldd	r25, Y+7	; 0x07
    3438:	01 97       	sbiw	r24, 0x01	; 1
    343a:	9f 83       	std	Y+7, r25	; 0x07
    343c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    343e:	8e 81       	ldd	r24, Y+6	; 0x06
    3440:	9f 81       	ldd	r25, Y+7	; 0x07
    3442:	00 97       	sbiw	r24, 0x00	; 0
    3444:	69 f7       	brne	.-38     	; 0x3420 <LCD_ES_tTrigger_Enable+0x2b0>
    3446:	24 c0       	rjmp	.+72     	; 0x3490 <LCD_ES_tTrigger_Enable+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3448:	68 85       	ldd	r22, Y+8	; 0x08
    344a:	79 85       	ldd	r23, Y+9	; 0x09
    344c:	8a 85       	ldd	r24, Y+10	; 0x0a
    344e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3454:	dc 01       	movw	r26, r24
    3456:	cb 01       	movw	r24, r22
    3458:	9f 83       	std	Y+7, r25	; 0x07
    345a:	8e 83       	std	Y+6, r24	; 0x06
    345c:	8e 81       	ldd	r24, Y+6	; 0x06
    345e:	9f 81       	ldd	r25, Y+7	; 0x07
    3460:	9b 83       	std	Y+3, r25	; 0x03
    3462:	8a 83       	std	Y+2, r24	; 0x02
    3464:	8a 81       	ldd	r24, Y+2	; 0x02
    3466:	9b 81       	ldd	r25, Y+3	; 0x03
    3468:	01 97       	sbiw	r24, 0x01	; 1
    346a:	f1 f7       	brne	.-4      	; 0x3468 <LCD_ES_tTrigger_Enable+0x2f8>
    346c:	9b 83       	std	Y+3, r25	; 0x03
    346e:	8a 83       	std	Y+2, r24	; 0x02
    3470:	0f c0       	rjmp	.+30     	; 0x3490 <LCD_ES_tTrigger_Enable+0x320>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3472:	69 89       	ldd	r22, Y+17	; 0x11
    3474:	7a 89       	ldd	r23, Y+18	; 0x12
    3476:	8b 89       	ldd	r24, Y+19	; 0x13
    3478:	9c 89       	ldd	r25, Y+20	; 0x14
    347a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    347e:	dc 01       	movw	r26, r24
    3480:	cb 01       	movw	r24, r22
    3482:	88 8b       	std	Y+16, r24	; 0x10
    3484:	88 89       	ldd	r24, Y+16	; 0x10
    3486:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3488:	89 81       	ldd	r24, Y+1	; 0x01
    348a:	8a 95       	dec	r24
    348c:	f1 f7       	brne	.-4      	; 0x348a <LCD_ES_tTrigger_Enable+0x31a>
    348e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2000);
	return ES_OK;
    3490:	80 e0       	ldi	r24, 0x00	; 0
}
    3492:	e0 96       	adiw	r28, 0x30	; 48
    3494:	0f b6       	in	r0, 0x3f	; 63
    3496:	f8 94       	cli
    3498:	de bf       	out	0x3e, r29	; 62
    349a:	0f be       	out	0x3f, r0	; 63
    349c:	cd bf       	out	0x3d, r28	; 61
    349e:	cf 91       	pop	r28
    34a0:	df 91       	pop	r29
    34a2:	08 95       	ret

000034a4 <Lcd_ES_tInit>:


ES_t Lcd_ES_tInit(){
    34a4:	df 93       	push	r29
    34a6:	cf 93       	push	r28
    34a8:	cd b7       	in	r28, 0x3d	; 61
    34aa:	de b7       	in	r29, 0x3e	; 62
#if LCD_MODE == FOUR_BIT_MODE
	Lcd_ES_tsendCmd(Four_BitMode);   /* Go into 4-bit operating mode*/
    34ac:	82 e0       	ldi	r24, 0x02	; 2
    34ae:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(D4_D7);  /* 2 Line, 5*7 matrix in 4-bit mode */
    34b2:	88 e2       	ldi	r24, 0x28	; 40
    34b4:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
    34b8:	8e e0       	ldi	r24, 0x0E	; 14
    34ba:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
    34be:	86 e0       	ldi	r24, 0x06	; 6
    34c0:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
    34c4:	81 e0       	ldi	r24, 0x01	; 1
    34c6:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <Lcd_ES_tsendCmd>
	return ES_OK;
    34ca:	80 e0       	ldi	r24, 0x00	; 0
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
	return ES_OK;
#endif
}
    34cc:	cf 91       	pop	r28
    34ce:	df 91       	pop	r29
    34d0:	08 95       	ret

000034d2 <lcd_ES_tclear>:
 *
 *	Ex. 0x28 0b 0010 1000  //Read bit by bit and see if it is low or high
 */

ES_t lcd_ES_tclear()
{
    34d2:	df 93       	push	r29
    34d4:	cf 93       	push	r28
    34d6:	cd b7       	in	r28, 0x3d	; 61
    34d8:	de b7       	in	r29, 0x3e	; 62
    34da:	2e 97       	sbiw	r28, 0x0e	; 14
    34dc:	0f b6       	in	r0, 0x3f	; 63
    34de:	f8 94       	cli
    34e0:	de bf       	out	0x3e, r29	; 62
    34e2:	0f be       	out	0x3f, r0	; 63
    34e4:	cd bf       	out	0x3d, r28	; 61
	Lcd_ES_tsendCmd(CLR_Display);
    34e6:	81 e0       	ldi	r24, 0x01	; 1
    34e8:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <Lcd_ES_tsendCmd>
    34ec:	80 e0       	ldi	r24, 0x00	; 0
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	a0 e0       	ldi	r26, 0x00	; 0
    34f2:	b0 e4       	ldi	r27, 0x40	; 64
    34f4:	8b 87       	std	Y+11, r24	; 0x0b
    34f6:	9c 87       	std	Y+12, r25	; 0x0c
    34f8:	ad 87       	std	Y+13, r26	; 0x0d
    34fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    34fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3500:	8d 85       	ldd	r24, Y+13	; 0x0d
    3502:	9e 85       	ldd	r25, Y+14	; 0x0e
    3504:	20 e0       	ldi	r18, 0x00	; 0
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	4a e7       	ldi	r20, 0x7A	; 122
    350a:	55 e4       	ldi	r21, 0x45	; 69
    350c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3510:	dc 01       	movw	r26, r24
    3512:	cb 01       	movw	r24, r22
    3514:	8f 83       	std	Y+7, r24	; 0x07
    3516:	98 87       	std	Y+8, r25	; 0x08
    3518:	a9 87       	std	Y+9, r26	; 0x09
    351a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    351c:	6f 81       	ldd	r22, Y+7	; 0x07
    351e:	78 85       	ldd	r23, Y+8	; 0x08
    3520:	89 85       	ldd	r24, Y+9	; 0x09
    3522:	9a 85       	ldd	r25, Y+10	; 0x0a
    3524:	20 e0       	ldi	r18, 0x00	; 0
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	40 e8       	ldi	r20, 0x80	; 128
    352a:	5f e3       	ldi	r21, 0x3F	; 63
    352c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3530:	88 23       	and	r24, r24
    3532:	2c f4       	brge	.+10     	; 0x353e <lcd_ES_tclear+0x6c>
		__ticks = 1;
    3534:	81 e0       	ldi	r24, 0x01	; 1
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	9e 83       	std	Y+6, r25	; 0x06
    353a:	8d 83       	std	Y+5, r24	; 0x05
    353c:	3f c0       	rjmp	.+126    	; 0x35bc <lcd_ES_tclear+0xea>
	else if (__tmp > 65535)
    353e:	6f 81       	ldd	r22, Y+7	; 0x07
    3540:	78 85       	ldd	r23, Y+8	; 0x08
    3542:	89 85       	ldd	r24, Y+9	; 0x09
    3544:	9a 85       	ldd	r25, Y+10	; 0x0a
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	3f ef       	ldi	r19, 0xFF	; 255
    354a:	4f e7       	ldi	r20, 0x7F	; 127
    354c:	57 e4       	ldi	r21, 0x47	; 71
    354e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3552:	18 16       	cp	r1, r24
    3554:	4c f5       	brge	.+82     	; 0x35a8 <lcd_ES_tclear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3556:	6b 85       	ldd	r22, Y+11	; 0x0b
    3558:	7c 85       	ldd	r23, Y+12	; 0x0c
    355a:	8d 85       	ldd	r24, Y+13	; 0x0d
    355c:	9e 85       	ldd	r25, Y+14	; 0x0e
    355e:	20 e0       	ldi	r18, 0x00	; 0
    3560:	30 e0       	ldi	r19, 0x00	; 0
    3562:	40 e2       	ldi	r20, 0x20	; 32
    3564:	51 e4       	ldi	r21, 0x41	; 65
    3566:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    356a:	dc 01       	movw	r26, r24
    356c:	cb 01       	movw	r24, r22
    356e:	bc 01       	movw	r22, r24
    3570:	cd 01       	movw	r24, r26
    3572:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3576:	dc 01       	movw	r26, r24
    3578:	cb 01       	movw	r24, r22
    357a:	9e 83       	std	Y+6, r25	; 0x06
    357c:	8d 83       	std	Y+5, r24	; 0x05
    357e:	0f c0       	rjmp	.+30     	; 0x359e <lcd_ES_tclear+0xcc>
    3580:	80 e9       	ldi	r24, 0x90	; 144
    3582:	91 e0       	ldi	r25, 0x01	; 1
    3584:	9c 83       	std	Y+4, r25	; 0x04
    3586:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3588:	8b 81       	ldd	r24, Y+3	; 0x03
    358a:	9c 81       	ldd	r25, Y+4	; 0x04
    358c:	01 97       	sbiw	r24, 0x01	; 1
    358e:	f1 f7       	brne	.-4      	; 0x358c <lcd_ES_tclear+0xba>
    3590:	9c 83       	std	Y+4, r25	; 0x04
    3592:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3594:	8d 81       	ldd	r24, Y+5	; 0x05
    3596:	9e 81       	ldd	r25, Y+6	; 0x06
    3598:	01 97       	sbiw	r24, 0x01	; 1
    359a:	9e 83       	std	Y+6, r25	; 0x06
    359c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    359e:	8d 81       	ldd	r24, Y+5	; 0x05
    35a0:	9e 81       	ldd	r25, Y+6	; 0x06
    35a2:	00 97       	sbiw	r24, 0x00	; 0
    35a4:	69 f7       	brne	.-38     	; 0x3580 <lcd_ES_tclear+0xae>
    35a6:	14 c0       	rjmp	.+40     	; 0x35d0 <lcd_ES_tclear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35a8:	6f 81       	ldd	r22, Y+7	; 0x07
    35aa:	78 85       	ldd	r23, Y+8	; 0x08
    35ac:	89 85       	ldd	r24, Y+9	; 0x09
    35ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    35b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b4:	dc 01       	movw	r26, r24
    35b6:	cb 01       	movw	r24, r22
    35b8:	9e 83       	std	Y+6, r25	; 0x06
    35ba:	8d 83       	std	Y+5, r24	; 0x05
    35bc:	8d 81       	ldd	r24, Y+5	; 0x05
    35be:	9e 81       	ldd	r25, Y+6	; 0x06
    35c0:	9a 83       	std	Y+2, r25	; 0x02
    35c2:	89 83       	std	Y+1, r24	; 0x01
    35c4:	89 81       	ldd	r24, Y+1	; 0x01
    35c6:	9a 81       	ldd	r25, Y+2	; 0x02
    35c8:	01 97       	sbiw	r24, 0x01	; 1
    35ca:	f1 f7       	brne	.-4      	; 0x35c8 <lcd_ES_tclear+0xf6>
    35cc:	9a 83       	std	Y+2, r25	; 0x02
    35ce:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	return ES_OK;
    35d0:	80 e0       	ldi	r24, 0x00	; 0
}
    35d2:	2e 96       	adiw	r28, 0x0e	; 14
    35d4:	0f b6       	in	r0, 0x3f	; 63
    35d6:	f8 94       	cli
    35d8:	de bf       	out	0x3e, r29	; 62
    35da:	0f be       	out	0x3f, r0	; 63
    35dc:	cd bf       	out	0x3d, r28	; 61
    35de:	cf 91       	pop	r28
    35e0:	df 91       	pop	r29
    35e2:	08 95       	ret

000035e4 <Lcd_ES_tsendCmd>:

ES_t Lcd_ES_tsendCmd(u8 cmd){
    35e4:	df 93       	push	r29
    35e6:	cf 93       	push	r28
    35e8:	0f 92       	push	r0
    35ea:	cd b7       	in	r28, 0x3d	; 61
    35ec:	de b7       	in	r29, 0x3e	; 62
    35ee:	89 83       	std	Y+1, r24	; 0x01
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, LOW);
    35f0:	81 e0       	ldi	r24, 0x01	; 1
    35f2:	61 e0       	ldi	r22, 0x01	; 1
    35f4:	40 e0       	ldi	r20, 0x00	; 0
    35f6:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    35fa:	81 e0       	ldi	r24, 0x01	; 1
    35fc:	60 e0       	ldi	r22, 0x00	; 0
    35fe:	40 e0       	ldi	r20, 0x00	; 0
    3600:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
	// DIO_ES_tGetPinValue, DIO_ES_tSetPinValue
	// if(GET_BIT(cmd,7)){Dio_Write(D7,HIGH);}else{Dio_write(D7,LOW);}
	// We use ternary operator instead
#if LCD_MODE == FOUR_BIT_MODE
	(GET_BIT(cmd,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    3604:	89 81       	ldd	r24, Y+1	; 0x01
    3606:	88 23       	and	r24, r24
    3608:	34 f4       	brge	.+12     	; 0x3616 <Lcd_ES_tsendCmd+0x32>
    360a:	80 e0       	ldi	r24, 0x00	; 0
    360c:	66 e0       	ldi	r22, 0x06	; 6
    360e:	41 e0       	ldi	r20, 0x01	; 1
    3610:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
    3614:	05 c0       	rjmp	.+10     	; 0x3620 <Lcd_ES_tsendCmd+0x3c>
    3616:	80 e0       	ldi	r24, 0x00	; 0
    3618:	66 e0       	ldi	r22, 0x06	; 6
    361a:	40 e0       	ldi	r20, 0x00	; 0
    361c:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    3620:	89 81       	ldd	r24, Y+1	; 0x01
    3622:	82 95       	swap	r24
    3624:	86 95       	lsr	r24
    3626:	86 95       	lsr	r24
    3628:	83 70       	andi	r24, 0x03	; 3
    362a:	88 2f       	mov	r24, r24
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	81 70       	andi	r24, 0x01	; 1
    3630:	90 70       	andi	r25, 0x00	; 0
    3632:	88 23       	and	r24, r24
    3634:	31 f0       	breq	.+12     	; 0x3642 <Lcd_ES_tsendCmd+0x5e>
    3636:	80 e0       	ldi	r24, 0x00	; 0
    3638:	65 e0       	ldi	r22, 0x05	; 5
    363a:	41 e0       	ldi	r20, 0x01	; 1
    363c:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
    3640:	05 c0       	rjmp	.+10     	; 0x364c <Lcd_ES_tsendCmd+0x68>
    3642:	80 e0       	ldi	r24, 0x00	; 0
    3644:	65 e0       	ldi	r22, 0x05	; 5
    3646:	40 e0       	ldi	r20, 0x00	; 0
    3648:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    364c:	89 81       	ldd	r24, Y+1	; 0x01
    364e:	82 95       	swap	r24
    3650:	86 95       	lsr	r24
    3652:	87 70       	andi	r24, 0x07	; 7
    3654:	88 2f       	mov	r24, r24
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	81 70       	andi	r24, 0x01	; 1
    365a:	90 70       	andi	r25, 0x00	; 0
    365c:	88 23       	and	r24, r24
    365e:	31 f0       	breq	.+12     	; 0x366c <Lcd_ES_tsendCmd+0x88>
    3660:	80 e0       	ldi	r24, 0x00	; 0
    3662:	64 e0       	ldi	r22, 0x04	; 4
    3664:	41 e0       	ldi	r20, 0x01	; 1
    3666:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
    366a:	05 c0       	rjmp	.+10     	; 0x3676 <Lcd_ES_tsendCmd+0x92>
    366c:	80 e0       	ldi	r24, 0x00	; 0
    366e:	64 e0       	ldi	r22, 0x04	; 4
    3670:	40 e0       	ldi	r20, 0x00	; 0
    3672:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    3676:	89 81       	ldd	r24, Y+1	; 0x01
    3678:	82 95       	swap	r24
    367a:	8f 70       	andi	r24, 0x0F	; 15
    367c:	88 2f       	mov	r24, r24
    367e:	90 e0       	ldi	r25, 0x00	; 0
    3680:	81 70       	andi	r24, 0x01	; 1
    3682:	90 70       	andi	r25, 0x00	; 0
    3684:	88 23       	and	r24, r24
    3686:	31 f0       	breq	.+12     	; 0x3694 <Lcd_ES_tsendCmd+0xb0>
    3688:	80 e0       	ldi	r24, 0x00	; 0
    368a:	63 e0       	ldi	r22, 0x03	; 3
    368c:	41 e0       	ldi	r20, 0x01	; 1
    368e:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
    3692:	05 c0       	rjmp	.+10     	; 0x369e <Lcd_ES_tsendCmd+0xba>
    3694:	80 e0       	ldi	r24, 0x00	; 0
    3696:	63 e0       	ldi	r22, 0x03	; 3
    3698:	40 e0       	ldi	r20, 0x00	; 0
    369a:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    369e:	0e 94 b8 18 	call	0x3170	; 0x3170 <LCD_ES_tTrigger_Enable>
	(GET_BIT(cmd,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    36a2:	89 81       	ldd	r24, Y+1	; 0x01
    36a4:	86 95       	lsr	r24
    36a6:	86 95       	lsr	r24
    36a8:	86 95       	lsr	r24
    36aa:	88 2f       	mov	r24, r24
    36ac:	90 e0       	ldi	r25, 0x00	; 0
    36ae:	81 70       	andi	r24, 0x01	; 1
    36b0:	90 70       	andi	r25, 0x00	; 0
    36b2:	88 23       	and	r24, r24
    36b4:	31 f0       	breq	.+12     	; 0x36c2 <Lcd_ES_tsendCmd+0xde>
    36b6:	80 e0       	ldi	r24, 0x00	; 0
    36b8:	66 e0       	ldi	r22, 0x06	; 6
    36ba:	41 e0       	ldi	r20, 0x01	; 1
    36bc:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
    36c0:	05 c0       	rjmp	.+10     	; 0x36cc <Lcd_ES_tsendCmd+0xe8>
    36c2:	80 e0       	ldi	r24, 0x00	; 0
    36c4:	66 e0       	ldi	r22, 0x06	; 6
    36c6:	40 e0       	ldi	r20, 0x00	; 0
    36c8:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    36cc:	89 81       	ldd	r24, Y+1	; 0x01
    36ce:	86 95       	lsr	r24
    36d0:	86 95       	lsr	r24
    36d2:	88 2f       	mov	r24, r24
    36d4:	90 e0       	ldi	r25, 0x00	; 0
    36d6:	81 70       	andi	r24, 0x01	; 1
    36d8:	90 70       	andi	r25, 0x00	; 0
    36da:	88 23       	and	r24, r24
    36dc:	31 f0       	breq	.+12     	; 0x36ea <Lcd_ES_tsendCmd+0x106>
    36de:	80 e0       	ldi	r24, 0x00	; 0
    36e0:	65 e0       	ldi	r22, 0x05	; 5
    36e2:	41 e0       	ldi	r20, 0x01	; 1
    36e4:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
    36e8:	05 c0       	rjmp	.+10     	; 0x36f4 <Lcd_ES_tsendCmd+0x110>
    36ea:	80 e0       	ldi	r24, 0x00	; 0
    36ec:	65 e0       	ldi	r22, 0x05	; 5
    36ee:	40 e0       	ldi	r20, 0x00	; 0
    36f0:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    36f4:	89 81       	ldd	r24, Y+1	; 0x01
    36f6:	86 95       	lsr	r24
    36f8:	88 2f       	mov	r24, r24
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	81 70       	andi	r24, 0x01	; 1
    36fe:	90 70       	andi	r25, 0x00	; 0
    3700:	88 23       	and	r24, r24
    3702:	31 f0       	breq	.+12     	; 0x3710 <Lcd_ES_tsendCmd+0x12c>
    3704:	80 e0       	ldi	r24, 0x00	; 0
    3706:	64 e0       	ldi	r22, 0x04	; 4
    3708:	41 e0       	ldi	r20, 0x01	; 1
    370a:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
    370e:	05 c0       	rjmp	.+10     	; 0x371a <Lcd_ES_tsendCmd+0x136>
    3710:	80 e0       	ldi	r24, 0x00	; 0
    3712:	64 e0       	ldi	r22, 0x04	; 4
    3714:	40 e0       	ldi	r20, 0x00	; 0
    3716:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    371a:	89 81       	ldd	r24, Y+1	; 0x01
    371c:	88 2f       	mov	r24, r24
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	81 70       	andi	r24, 0x01	; 1
    3722:	90 70       	andi	r25, 0x00	; 0
    3724:	88 23       	and	r24, r24
    3726:	31 f0       	breq	.+12     	; 0x3734 <Lcd_ES_tsendCmd+0x150>
    3728:	80 e0       	ldi	r24, 0x00	; 0
    372a:	63 e0       	ldi	r22, 0x03	; 3
    372c:	41 e0       	ldi	r20, 0x01	; 1
    372e:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
    3732:	05 c0       	rjmp	.+10     	; 0x373e <Lcd_ES_tsendCmd+0x15a>
    3734:	80 e0       	ldi	r24, 0x00	; 0
    3736:	63 e0       	ldi	r22, 0x03	; 3
    3738:	40 e0       	ldi	r20, 0x00	; 0
    373a:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    373e:	0e 94 b8 18 	call	0x3170	; 0x3170 <LCD_ES_tTrigger_Enable>
	return ES_OK;
    3742:	80 e0       	ldi	r24, 0x00	; 0
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D0,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D0,LOW);
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif
}
    3744:	0f 90       	pop	r0
    3746:	cf 91       	pop	r28
    3748:	df 91       	pop	r29
    374a:	08 95       	ret

0000374c <Lcd_ES_tsendChar>:
ES_t Lcd_ES_tsendChar(u8 data){
    374c:	df 93       	push	r29
    374e:	cf 93       	push	r28
    3750:	0f 92       	push	r0
    3752:	cd b7       	in	r28, 0x3d	; 61
    3754:	de b7       	in	r29, 0x3e	; 62
    3756:	89 83       	std	Y+1, r24	; 0x01
#if LCD_MODE == FOUR_BIT_MODE
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    3758:	81 e0       	ldi	r24, 0x01	; 1
    375a:	61 e0       	ldi	r22, 0x01	; 1
    375c:	41 e0       	ldi	r20, 0x01	; 1
    375e:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    3762:	81 e0       	ldi	r24, 0x01	; 1
    3764:	60 e0       	ldi	r22, 0x00	; 0
    3766:	40 e0       	ldi	r20, 0x00	; 0
    3768:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
	(GET_BIT(data,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    376c:	89 81       	ldd	r24, Y+1	; 0x01
    376e:	88 23       	and	r24, r24
    3770:	34 f4       	brge	.+12     	; 0x377e <Lcd_ES_tsendChar+0x32>
    3772:	80 e0       	ldi	r24, 0x00	; 0
    3774:	66 e0       	ldi	r22, 0x06	; 6
    3776:	41 e0       	ldi	r20, 0x01	; 1
    3778:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
    377c:	05 c0       	rjmp	.+10     	; 0x3788 <Lcd_ES_tsendChar+0x3c>
    377e:	80 e0       	ldi	r24, 0x00	; 0
    3780:	66 e0       	ldi	r22, 0x06	; 6
    3782:	40 e0       	ldi	r20, 0x00	; 0
    3784:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
	(GET_BIT(data,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    3788:	89 81       	ldd	r24, Y+1	; 0x01
    378a:	82 95       	swap	r24
    378c:	86 95       	lsr	r24
    378e:	86 95       	lsr	r24
    3790:	83 70       	andi	r24, 0x03	; 3
    3792:	88 2f       	mov	r24, r24
    3794:	90 e0       	ldi	r25, 0x00	; 0
    3796:	81 70       	andi	r24, 0x01	; 1
    3798:	90 70       	andi	r25, 0x00	; 0
    379a:	88 23       	and	r24, r24
    379c:	31 f0       	breq	.+12     	; 0x37aa <Lcd_ES_tsendChar+0x5e>
    379e:	80 e0       	ldi	r24, 0x00	; 0
    37a0:	65 e0       	ldi	r22, 0x05	; 5
    37a2:	41 e0       	ldi	r20, 0x01	; 1
    37a4:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
    37a8:	05 c0       	rjmp	.+10     	; 0x37b4 <Lcd_ES_tsendChar+0x68>
    37aa:	80 e0       	ldi	r24, 0x00	; 0
    37ac:	65 e0       	ldi	r22, 0x05	; 5
    37ae:	40 e0       	ldi	r20, 0x00	; 0
    37b0:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
	(GET_BIT(data,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    37b4:	89 81       	ldd	r24, Y+1	; 0x01
    37b6:	82 95       	swap	r24
    37b8:	86 95       	lsr	r24
    37ba:	87 70       	andi	r24, 0x07	; 7
    37bc:	88 2f       	mov	r24, r24
    37be:	90 e0       	ldi	r25, 0x00	; 0
    37c0:	81 70       	andi	r24, 0x01	; 1
    37c2:	90 70       	andi	r25, 0x00	; 0
    37c4:	88 23       	and	r24, r24
    37c6:	31 f0       	breq	.+12     	; 0x37d4 <Lcd_ES_tsendChar+0x88>
    37c8:	80 e0       	ldi	r24, 0x00	; 0
    37ca:	64 e0       	ldi	r22, 0x04	; 4
    37cc:	41 e0       	ldi	r20, 0x01	; 1
    37ce:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
    37d2:	05 c0       	rjmp	.+10     	; 0x37de <Lcd_ES_tsendChar+0x92>
    37d4:	80 e0       	ldi	r24, 0x00	; 0
    37d6:	64 e0       	ldi	r22, 0x04	; 4
    37d8:	40 e0       	ldi	r20, 0x00	; 0
    37da:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
	(GET_BIT(data,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    37de:	89 81       	ldd	r24, Y+1	; 0x01
    37e0:	82 95       	swap	r24
    37e2:	8f 70       	andi	r24, 0x0F	; 15
    37e4:	88 2f       	mov	r24, r24
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	81 70       	andi	r24, 0x01	; 1
    37ea:	90 70       	andi	r25, 0x00	; 0
    37ec:	88 23       	and	r24, r24
    37ee:	31 f0       	breq	.+12     	; 0x37fc <Lcd_ES_tsendChar+0xb0>
    37f0:	80 e0       	ldi	r24, 0x00	; 0
    37f2:	63 e0       	ldi	r22, 0x03	; 3
    37f4:	41 e0       	ldi	r20, 0x01	; 1
    37f6:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
    37fa:	05 c0       	rjmp	.+10     	; 0x3806 <Lcd_ES_tsendChar+0xba>
    37fc:	80 e0       	ldi	r24, 0x00	; 0
    37fe:	63 e0       	ldi	r22, 0x03	; 3
    3800:	40 e0       	ldi	r20, 0x00	; 0
    3802:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    3806:	0e 94 b8 18 	call	0x3170	; 0x3170 <LCD_ES_tTrigger_Enable>
	(GET_BIT(data,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    380a:	89 81       	ldd	r24, Y+1	; 0x01
    380c:	86 95       	lsr	r24
    380e:	86 95       	lsr	r24
    3810:	86 95       	lsr	r24
    3812:	88 2f       	mov	r24, r24
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	81 70       	andi	r24, 0x01	; 1
    3818:	90 70       	andi	r25, 0x00	; 0
    381a:	88 23       	and	r24, r24
    381c:	31 f0       	breq	.+12     	; 0x382a <Lcd_ES_tsendChar+0xde>
    381e:	80 e0       	ldi	r24, 0x00	; 0
    3820:	66 e0       	ldi	r22, 0x06	; 6
    3822:	41 e0       	ldi	r20, 0x01	; 1
    3824:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
    3828:	05 c0       	rjmp	.+10     	; 0x3834 <Lcd_ES_tsendChar+0xe8>
    382a:	80 e0       	ldi	r24, 0x00	; 0
    382c:	66 e0       	ldi	r22, 0x06	; 6
    382e:	40 e0       	ldi	r20, 0x00	; 0
    3830:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
	(GET_BIT(data,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    3834:	89 81       	ldd	r24, Y+1	; 0x01
    3836:	86 95       	lsr	r24
    3838:	86 95       	lsr	r24
    383a:	88 2f       	mov	r24, r24
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	81 70       	andi	r24, 0x01	; 1
    3840:	90 70       	andi	r25, 0x00	; 0
    3842:	88 23       	and	r24, r24
    3844:	31 f0       	breq	.+12     	; 0x3852 <Lcd_ES_tsendChar+0x106>
    3846:	80 e0       	ldi	r24, 0x00	; 0
    3848:	65 e0       	ldi	r22, 0x05	; 5
    384a:	41 e0       	ldi	r20, 0x01	; 1
    384c:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
    3850:	05 c0       	rjmp	.+10     	; 0x385c <Lcd_ES_tsendChar+0x110>
    3852:	80 e0       	ldi	r24, 0x00	; 0
    3854:	65 e0       	ldi	r22, 0x05	; 5
    3856:	40 e0       	ldi	r20, 0x00	; 0
    3858:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
	(GET_BIT(data,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    385c:	89 81       	ldd	r24, Y+1	; 0x01
    385e:	86 95       	lsr	r24
    3860:	88 2f       	mov	r24, r24
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	81 70       	andi	r24, 0x01	; 1
    3866:	90 70       	andi	r25, 0x00	; 0
    3868:	88 23       	and	r24, r24
    386a:	31 f0       	breq	.+12     	; 0x3878 <Lcd_ES_tsendChar+0x12c>
    386c:	80 e0       	ldi	r24, 0x00	; 0
    386e:	64 e0       	ldi	r22, 0x04	; 4
    3870:	41 e0       	ldi	r20, 0x01	; 1
    3872:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
    3876:	05 c0       	rjmp	.+10     	; 0x3882 <Lcd_ES_tsendChar+0x136>
    3878:	80 e0       	ldi	r24, 0x00	; 0
    387a:	64 e0       	ldi	r22, 0x04	; 4
    387c:	40 e0       	ldi	r20, 0x00	; 0
    387e:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
	(GET_BIT(data,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    3882:	89 81       	ldd	r24, Y+1	; 0x01
    3884:	88 2f       	mov	r24, r24
    3886:	90 e0       	ldi	r25, 0x00	; 0
    3888:	81 70       	andi	r24, 0x01	; 1
    388a:	90 70       	andi	r25, 0x00	; 0
    388c:	88 23       	and	r24, r24
    388e:	31 f0       	breq	.+12     	; 0x389c <Lcd_ES_tsendChar+0x150>
    3890:	80 e0       	ldi	r24, 0x00	; 0
    3892:	63 e0       	ldi	r22, 0x03	; 3
    3894:	41 e0       	ldi	r20, 0x01	; 1
    3896:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
    389a:	05 c0       	rjmp	.+10     	; 0x38a6 <Lcd_ES_tsendChar+0x15a>
    389c:	80 e0       	ldi	r24, 0x00	; 0
    389e:	63 e0       	ldi	r22, 0x03	; 3
    38a0:	40 e0       	ldi	r20, 0x00	; 0
    38a2:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    38a6:	0e 94 b8 18 	call	0x3170	; 0x3170 <LCD_ES_tTrigger_Enable>
	return ES_OK;
    38aa:	80 e0       	ldi	r24, 0x00	; 0
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif

}
    38ac:	0f 90       	pop	r0
    38ae:	cf 91       	pop	r28
    38b0:	df 91       	pop	r29
    38b2:	08 95       	ret

000038b4 <Lcd_ES_tsendString>:

ES_t Lcd_ES_tsendString(char *data)
{
    38b4:	df 93       	push	r29
    38b6:	cf 93       	push	r28
    38b8:	00 d0       	rcall	.+0      	; 0x38ba <Lcd_ES_tsendString+0x6>
    38ba:	0f 92       	push	r0
    38bc:	cd b7       	in	r28, 0x3d	; 61
    38be:	de b7       	in	r29, 0x3e	; 62
    38c0:	9b 83       	std	Y+3, r25	; 0x03
    38c2:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	61 e0       	ldi	r22, 0x01	; 1
    38c8:	41 e0       	ldi	r20, 0x01	; 1
    38ca:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    38ce:	81 e0       	ldi	r24, 0x01	; 1
    38d0:	60 e0       	ldi	r22, 0x00	; 0
    38d2:	40 e0       	ldi	r20, 0x00	; 0
    38d4:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>

	unsigned char i=0;
    38d8:	19 82       	std	Y+1, r1	; 0x01
    38da:	0e c0       	rjmp	.+28     	; 0x38f8 <Lcd_ES_tsendString+0x44>
	while(data[i]!=0)
	{
		Lcd_ES_tsendChar(data[i]);
    38dc:	89 81       	ldd	r24, Y+1	; 0x01
    38de:	28 2f       	mov	r18, r24
    38e0:	30 e0       	ldi	r19, 0x00	; 0
    38e2:	8a 81       	ldd	r24, Y+2	; 0x02
    38e4:	9b 81       	ldd	r25, Y+3	; 0x03
    38e6:	fc 01       	movw	r30, r24
    38e8:	e2 0f       	add	r30, r18
    38ea:	f3 1f       	adc	r31, r19
    38ec:	80 81       	ld	r24, Z
    38ee:	0e 94 a6 1b 	call	0x374c	; 0x374c <Lcd_ES_tsendChar>
		i++;
    38f2:	89 81       	ldd	r24, Y+1	; 0x01
    38f4:	8f 5f       	subi	r24, 0xFF	; 255
    38f6:	89 83       	std	Y+1, r24	; 0x01
{
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);

	unsigned char i=0;
	while(data[i]!=0)
    38f8:	89 81       	ldd	r24, Y+1	; 0x01
    38fa:	28 2f       	mov	r18, r24
    38fc:	30 e0       	ldi	r19, 0x00	; 0
    38fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3900:	9b 81       	ldd	r25, Y+3	; 0x03
    3902:	fc 01       	movw	r30, r24
    3904:	e2 0f       	add	r30, r18
    3906:	f3 1f       	adc	r31, r19
    3908:	80 81       	ld	r24, Z
    390a:	88 23       	and	r24, r24
    390c:	39 f7       	brne	.-50     	; 0x38dc <Lcd_ES_tsendString+0x28>
	{
		Lcd_ES_tsendChar(data[i]);
		i++;
	}
	return ES_OK;
    390e:	80 e0       	ldi	r24, 0x00	; 0
}
    3910:	0f 90       	pop	r0
    3912:	0f 90       	pop	r0
    3914:	0f 90       	pop	r0
    3916:	cf 91       	pop	r28
    3918:	df 91       	pop	r29
    391a:	08 95       	ret

0000391c <Lcd_ES_tsendString_xy>:

ES_t Lcd_ES_tsendString_xy(char *data,u8 row,u8 col){
    391c:	df 93       	push	r29
    391e:	cf 93       	push	r28
    3920:	00 d0       	rcall	.+0      	; 0x3922 <Lcd_ES_tsendString_xy+0x6>
    3922:	00 d0       	rcall	.+0      	; 0x3924 <Lcd_ES_tsendString_xy+0x8>
    3924:	cd b7       	in	r28, 0x3d	; 61
    3926:	de b7       	in	r29, 0x3e	; 62
    3928:	9a 83       	std	Y+2, r25	; 0x02
    392a:	89 83       	std	Y+1, r24	; 0x01
    392c:	6b 83       	std	Y+3, r22	; 0x03
    392e:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    3930:	81 e0       	ldi	r24, 0x01	; 1
    3932:	61 e0       	ldi	r22, 0x01	; 1
    3934:	41 e0       	ldi	r20, 0x01	; 1
    3936:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    393a:	81 e0       	ldi	r24, 0x01	; 1
    393c:	60 e0       	ldi	r22, 0x00	; 0
    393e:	40 e0       	ldi	r20, 0x00	; 0
    3940:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>

	LCD_ES_tSet_Cursor_Pos(row,col);
    3944:	8b 81       	ldd	r24, Y+3	; 0x03
    3946:	6c 81       	ldd	r22, Y+4	; 0x04
    3948:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <LCD_ES_tSet_Cursor_Pos>
	Lcd_ES_tsendString(data);
    394c:	89 81       	ldd	r24, Y+1	; 0x01
    394e:	9a 81       	ldd	r25, Y+2	; 0x02
    3950:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <Lcd_ES_tsendString>
	return ES_OK;
    3954:	80 e0       	ldi	r24, 0x00	; 0

}
    3956:	0f 90       	pop	r0
    3958:	0f 90       	pop	r0
    395a:	0f 90       	pop	r0
    395c:	0f 90       	pop	r0
    395e:	cf 91       	pop	r28
    3960:	df 91       	pop	r29
    3962:	08 95       	ret

00003964 <Lcd_ES_tdisplayNum>:


//A function to display Numbers instead of characters
ES_t Lcd_ES_tdisplayNum(u16 num)
{
    3964:	df 93       	push	r29
    3966:	cf 93       	push	r28
    3968:	cd b7       	in	r28, 0x3d	; 61
    396a:	de b7       	in	r29, 0x3e	; 62
    396c:	2e 97       	sbiw	r28, 0x0e	; 14
    396e:	0f b6       	in	r0, 0x3f	; 63
    3970:	f8 94       	cli
    3972:	de bf       	out	0x3e, r29	; 62
    3974:	0f be       	out	0x3f, r0	; 63
    3976:	cd bf       	out	0x3d, r28	; 61
    3978:	9e 87       	std	Y+14, r25	; 0x0e
    397a:	8d 87       	std	Y+13, r24	; 0x0d
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    397c:	81 e0       	ldi	r24, 0x01	; 1
    397e:	61 e0       	ldi	r22, 0x01	; 1
    3980:	41 e0       	ldi	r20, 0x01	; 1
    3982:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    3986:	81 e0       	ldi	r24, 0x01	; 1
    3988:	60 e0       	ldi	r22, 0x00	; 0
    398a:	40 e0       	ldi	r20, 0x00	; 0
    398c:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>

	uint8_t ch[10],i=0,j=0;
    3990:	1a 82       	std	Y+2, r1	; 0x02
    3992:	19 82       	std	Y+1, r1	; 0x01
	if(num == 0)
    3994:	8d 85       	ldd	r24, Y+13	; 0x0d
    3996:	9e 85       	ldd	r25, Y+14	; 0x0e
    3998:	00 97       	sbiw	r24, 0x00	; 0
    399a:	11 f5       	brne	.+68     	; 0x39e0 <Lcd_ES_tdisplayNum+0x7c>
	{
		Lcd_ES_tsendChar('0');
    399c:	80 e3       	ldi	r24, 0x30	; 48
    399e:	0e 94 a6 1b 	call	0x374c	; 0x374c <Lcd_ES_tsendChar>
    39a2:	39 c0       	rjmp	.+114    	; 0x3a16 <Lcd_ES_tdisplayNum+0xb2>
	}
	else
	{
		while(num)
		{
			ch[i] = num % 10 + '0';  //To convert int to char
    39a4:	8a 81       	ldd	r24, Y+2	; 0x02
    39a6:	e8 2f       	mov	r30, r24
    39a8:	f0 e0       	ldi	r31, 0x00	; 0
    39aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    39ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    39ae:	2a e0       	ldi	r18, 0x0A	; 10
    39b0:	30 e0       	ldi	r19, 0x00	; 0
    39b2:	b9 01       	movw	r22, r18
    39b4:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <__udivmodhi4>
    39b8:	28 2f       	mov	r18, r24
    39ba:	20 5d       	subi	r18, 0xD0	; 208
    39bc:	ce 01       	movw	r24, r28
    39be:	03 96       	adiw	r24, 0x03	; 3
    39c0:	e8 0f       	add	r30, r24
    39c2:	f9 1f       	adc	r31, r25
    39c4:	20 83       	st	Z, r18
			num /= 10;
    39c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    39c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    39ca:	2a e0       	ldi	r18, 0x0A	; 10
    39cc:	30 e0       	ldi	r19, 0x00	; 0
    39ce:	b9 01       	movw	r22, r18
    39d0:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <__udivmodhi4>
    39d4:	cb 01       	movw	r24, r22
    39d6:	9e 87       	std	Y+14, r25	; 0x0e
    39d8:	8d 87       	std	Y+13, r24	; 0x0d
			i++;
    39da:	8a 81       	ldd	r24, Y+2	; 0x02
    39dc:	8f 5f       	subi	r24, 0xFF	; 255
    39de:	8a 83       	std	Y+2, r24	; 0x02
	{
		Lcd_ES_tsendChar('0');
	}
	else
	{
		while(num)
    39e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    39e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    39e4:	00 97       	sbiw	r24, 0x00	; 0
    39e6:	f1 f6       	brne	.-68     	; 0x39a4 <Lcd_ES_tdisplayNum+0x40>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    39e8:	8a 81       	ldd	r24, Y+2	; 0x02
    39ea:	89 83       	std	Y+1, r24	; 0x01
    39ec:	11 c0       	rjmp	.+34     	; 0x3a10 <Lcd_ES_tdisplayNum+0xac>
		{
			Lcd_ES_tsendChar(ch[j-1]);
    39ee:	89 81       	ldd	r24, Y+1	; 0x01
    39f0:	88 2f       	mov	r24, r24
    39f2:	90 e0       	ldi	r25, 0x00	; 0
    39f4:	9c 01       	movw	r18, r24
    39f6:	21 50       	subi	r18, 0x01	; 1
    39f8:	30 40       	sbci	r19, 0x00	; 0
    39fa:	ce 01       	movw	r24, r28
    39fc:	03 96       	adiw	r24, 0x03	; 3
    39fe:	fc 01       	movw	r30, r24
    3a00:	e2 0f       	add	r30, r18
    3a02:	f3 1f       	adc	r31, r19
    3a04:	80 81       	ld	r24, Z
    3a06:	0e 94 a6 1b 	call	0x374c	; 0x374c <Lcd_ES_tsendChar>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    3a0a:	89 81       	ldd	r24, Y+1	; 0x01
    3a0c:	81 50       	subi	r24, 0x01	; 1
    3a0e:	89 83       	std	Y+1, r24	; 0x01
    3a10:	89 81       	ldd	r24, Y+1	; 0x01
    3a12:	88 23       	and	r24, r24
    3a14:	61 f7       	brne	.-40     	; 0x39ee <Lcd_ES_tdisplayNum+0x8a>
		{
			Lcd_ES_tsendChar(ch[j-1]);
		}
	}
	return ES_OK;
    3a16:	80 e0       	ldi	r24, 0x00	; 0
}
    3a18:	2e 96       	adiw	r28, 0x0e	; 14
    3a1a:	0f b6       	in	r0, 0x3f	; 63
    3a1c:	f8 94       	cli
    3a1e:	de bf       	out	0x3e, r29	; 62
    3a20:	0f be       	out	0x3f, r0	; 63
    3a22:	cd bf       	out	0x3d, r28	; 61
    3a24:	cf 91       	pop	r28
    3a26:	df 91       	pop	r29
    3a28:	08 95       	ret

00003a2a <Lcd_ES_tdisplayNum_xy>:

ES_t Lcd_ES_tdisplayNum_xy(u16 num,u8 row,u8 col){
    3a2a:	df 93       	push	r29
    3a2c:	cf 93       	push	r28
    3a2e:	cd b7       	in	r28, 0x3d	; 61
    3a30:	de b7       	in	r29, 0x3e	; 62
    3a32:	a3 97       	sbiw	r28, 0x23	; 35
    3a34:	0f b6       	in	r0, 0x3f	; 63
    3a36:	f8 94       	cli
    3a38:	de bf       	out	0x3e, r29	; 62
    3a3a:	0f be       	out	0x3f, r0	; 63
    3a3c:	cd bf       	out	0x3d, r28	; 61
    3a3e:	98 a3       	std	Y+32, r25	; 0x20
    3a40:	8f 8f       	std	Y+31, r24	; 0x1f
    3a42:	69 a3       	std	Y+33, r22	; 0x21
    3a44:	4a a3       	std	Y+34, r20	; 0x22

	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    3a46:	81 e0       	ldi	r24, 0x01	; 1
    3a48:	61 e0       	ldi	r22, 0x01	; 1
    3a4a:	41 e0       	ldi	r20, 0x01	; 1
    3a4c:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    3a50:	81 e0       	ldi	r24, 0x01	; 1
    3a52:	60 e0       	ldi	r22, 0x00	; 0
    3a54:	40 e0       	ldi	r20, 0x00	; 0
    3a56:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>


	if(row == 1){
    3a5a:	89 a1       	ldd	r24, Y+33	; 0x21
    3a5c:	81 30       	cpi	r24, 0x01	; 1
    3a5e:	09 f0       	breq	.+2      	; 0x3a62 <Lcd_ES_tdisplayNum_xy+0x38>
    3a60:	76 c0       	rjmp	.+236    	; 0x3b4e <Lcd_ES_tdisplayNum_xy+0x124>
		Lcd_ES_tsendCmd(Force1stline);
    3a62:	80 e8       	ldi	r24, 0x80	; 128
    3a64:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <Lcd_ES_tsendCmd>
    3a68:	80 e0       	ldi	r24, 0x00	; 0
    3a6a:	90 e0       	ldi	r25, 0x00	; 0
    3a6c:	a0 e8       	ldi	r26, 0x80	; 128
    3a6e:	bf e3       	ldi	r27, 0x3F	; 63
    3a70:	89 8f       	std	Y+25, r24	; 0x19
    3a72:	9a 8f       	std	Y+26, r25	; 0x1a
    3a74:	ab 8f       	std	Y+27, r26	; 0x1b
    3a76:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a78:	69 8d       	ldd	r22, Y+25	; 0x19
    3a7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a80:	20 e0       	ldi	r18, 0x00	; 0
    3a82:	30 e0       	ldi	r19, 0x00	; 0
    3a84:	4a e7       	ldi	r20, 0x7A	; 122
    3a86:	55 e4       	ldi	r21, 0x45	; 69
    3a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a8c:	dc 01       	movw	r26, r24
    3a8e:	cb 01       	movw	r24, r22
    3a90:	8d 8b       	std	Y+21, r24	; 0x15
    3a92:	9e 8b       	std	Y+22, r25	; 0x16
    3a94:	af 8b       	std	Y+23, r26	; 0x17
    3a96:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a98:	6d 89       	ldd	r22, Y+21	; 0x15
    3a9a:	7e 89       	ldd	r23, Y+22	; 0x16
    3a9c:	8f 89       	ldd	r24, Y+23	; 0x17
    3a9e:	98 8d       	ldd	r25, Y+24	; 0x18
    3aa0:	20 e0       	ldi	r18, 0x00	; 0
    3aa2:	30 e0       	ldi	r19, 0x00	; 0
    3aa4:	40 e8       	ldi	r20, 0x80	; 128
    3aa6:	5f e3       	ldi	r21, 0x3F	; 63
    3aa8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3aac:	88 23       	and	r24, r24
    3aae:	2c f4       	brge	.+10     	; 0x3aba <Lcd_ES_tdisplayNum_xy+0x90>
		__ticks = 1;
    3ab0:	81 e0       	ldi	r24, 0x01	; 1
    3ab2:	90 e0       	ldi	r25, 0x00	; 0
    3ab4:	9c 8b       	std	Y+20, r25	; 0x14
    3ab6:	8b 8b       	std	Y+19, r24	; 0x13
    3ab8:	3f c0       	rjmp	.+126    	; 0x3b38 <Lcd_ES_tdisplayNum_xy+0x10e>
	else if (__tmp > 65535)
    3aba:	6d 89       	ldd	r22, Y+21	; 0x15
    3abc:	7e 89       	ldd	r23, Y+22	; 0x16
    3abe:	8f 89       	ldd	r24, Y+23	; 0x17
    3ac0:	98 8d       	ldd	r25, Y+24	; 0x18
    3ac2:	20 e0       	ldi	r18, 0x00	; 0
    3ac4:	3f ef       	ldi	r19, 0xFF	; 255
    3ac6:	4f e7       	ldi	r20, 0x7F	; 127
    3ac8:	57 e4       	ldi	r21, 0x47	; 71
    3aca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ace:	18 16       	cp	r1, r24
    3ad0:	4c f5       	brge	.+82     	; 0x3b24 <Lcd_ES_tdisplayNum_xy+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ad2:	69 8d       	ldd	r22, Y+25	; 0x19
    3ad4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ad6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ad8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ada:	20 e0       	ldi	r18, 0x00	; 0
    3adc:	30 e0       	ldi	r19, 0x00	; 0
    3ade:	40 e2       	ldi	r20, 0x20	; 32
    3ae0:	51 e4       	ldi	r21, 0x41	; 65
    3ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ae6:	dc 01       	movw	r26, r24
    3ae8:	cb 01       	movw	r24, r22
    3aea:	bc 01       	movw	r22, r24
    3aec:	cd 01       	movw	r24, r26
    3aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3af2:	dc 01       	movw	r26, r24
    3af4:	cb 01       	movw	r24, r22
    3af6:	9c 8b       	std	Y+20, r25	; 0x14
    3af8:	8b 8b       	std	Y+19, r24	; 0x13
    3afa:	0f c0       	rjmp	.+30     	; 0x3b1a <Lcd_ES_tdisplayNum_xy+0xf0>
    3afc:	80 e9       	ldi	r24, 0x90	; 144
    3afe:	91 e0       	ldi	r25, 0x01	; 1
    3b00:	9a 8b       	std	Y+18, r25	; 0x12
    3b02:	89 8b       	std	Y+17, r24	; 0x11
    3b04:	89 89       	ldd	r24, Y+17	; 0x11
    3b06:	9a 89       	ldd	r25, Y+18	; 0x12
    3b08:	01 97       	sbiw	r24, 0x01	; 1
    3b0a:	f1 f7       	brne	.-4      	; 0x3b08 <Lcd_ES_tdisplayNum_xy+0xde>
    3b0c:	9a 8b       	std	Y+18, r25	; 0x12
    3b0e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b10:	8b 89       	ldd	r24, Y+19	; 0x13
    3b12:	9c 89       	ldd	r25, Y+20	; 0x14
    3b14:	01 97       	sbiw	r24, 0x01	; 1
    3b16:	9c 8b       	std	Y+20, r25	; 0x14
    3b18:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b1a:	8b 89       	ldd	r24, Y+19	; 0x13
    3b1c:	9c 89       	ldd	r25, Y+20	; 0x14
    3b1e:	00 97       	sbiw	r24, 0x00	; 0
    3b20:	69 f7       	brne	.-38     	; 0x3afc <Lcd_ES_tdisplayNum_xy+0xd2>
    3b22:	92 c0       	rjmp	.+292    	; 0x3c48 <Lcd_ES_tdisplayNum_xy+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b24:	6d 89       	ldd	r22, Y+21	; 0x15
    3b26:	7e 89       	ldd	r23, Y+22	; 0x16
    3b28:	8f 89       	ldd	r24, Y+23	; 0x17
    3b2a:	98 8d       	ldd	r25, Y+24	; 0x18
    3b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b30:	dc 01       	movw	r26, r24
    3b32:	cb 01       	movw	r24, r22
    3b34:	9c 8b       	std	Y+20, r25	; 0x14
    3b36:	8b 8b       	std	Y+19, r24	; 0x13
    3b38:	8b 89       	ldd	r24, Y+19	; 0x13
    3b3a:	9c 89       	ldd	r25, Y+20	; 0x14
    3b3c:	98 8b       	std	Y+16, r25	; 0x10
    3b3e:	8f 87       	std	Y+15, r24	; 0x0f
    3b40:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b42:	98 89       	ldd	r25, Y+16	; 0x10
    3b44:	01 97       	sbiw	r24, 0x01	; 1
    3b46:	f1 f7       	brne	.-4      	; 0x3b44 <Lcd_ES_tdisplayNum_xy+0x11a>
    3b48:	98 8b       	std	Y+16, r25	; 0x10
    3b4a:	8f 87       	std	Y+15, r24	; 0x0f
    3b4c:	7d c0       	rjmp	.+250    	; 0x3c48 <Lcd_ES_tdisplayNum_xy+0x21e>
		_delay_ms(1);
	}else if(row == 2){
    3b4e:	89 a1       	ldd	r24, Y+33	; 0x21
    3b50:	82 30       	cpi	r24, 0x02	; 2
    3b52:	09 f0       	breq	.+2      	; 0x3b56 <Lcd_ES_tdisplayNum_xy+0x12c>
    3b54:	76 c0       	rjmp	.+236    	; 0x3c42 <Lcd_ES_tdisplayNum_xy+0x218>
		Lcd_ES_tsendCmd(Force2ndline);
    3b56:	80 ec       	ldi	r24, 0xC0	; 192
    3b58:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <Lcd_ES_tsendCmd>
    3b5c:	80 e0       	ldi	r24, 0x00	; 0
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	a0 e2       	ldi	r26, 0x20	; 32
    3b62:	b1 e4       	ldi	r27, 0x41	; 65
    3b64:	8b 87       	std	Y+11, r24	; 0x0b
    3b66:	9c 87       	std	Y+12, r25	; 0x0c
    3b68:	ad 87       	std	Y+13, r26	; 0x0d
    3b6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b70:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b72:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b74:	20 e0       	ldi	r18, 0x00	; 0
    3b76:	30 e0       	ldi	r19, 0x00	; 0
    3b78:	4a e7       	ldi	r20, 0x7A	; 122
    3b7a:	55 e4       	ldi	r21, 0x45	; 69
    3b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b80:	dc 01       	movw	r26, r24
    3b82:	cb 01       	movw	r24, r22
    3b84:	8f 83       	std	Y+7, r24	; 0x07
    3b86:	98 87       	std	Y+8, r25	; 0x08
    3b88:	a9 87       	std	Y+9, r26	; 0x09
    3b8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b8c:	6f 81       	ldd	r22, Y+7	; 0x07
    3b8e:	78 85       	ldd	r23, Y+8	; 0x08
    3b90:	89 85       	ldd	r24, Y+9	; 0x09
    3b92:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b94:	20 e0       	ldi	r18, 0x00	; 0
    3b96:	30 e0       	ldi	r19, 0x00	; 0
    3b98:	40 e8       	ldi	r20, 0x80	; 128
    3b9a:	5f e3       	ldi	r21, 0x3F	; 63
    3b9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ba0:	88 23       	and	r24, r24
    3ba2:	2c f4       	brge	.+10     	; 0x3bae <Lcd_ES_tdisplayNum_xy+0x184>
		__ticks = 1;
    3ba4:	81 e0       	ldi	r24, 0x01	; 1
    3ba6:	90 e0       	ldi	r25, 0x00	; 0
    3ba8:	9e 83       	std	Y+6, r25	; 0x06
    3baa:	8d 83       	std	Y+5, r24	; 0x05
    3bac:	3f c0       	rjmp	.+126    	; 0x3c2c <Lcd_ES_tdisplayNum_xy+0x202>
	else if (__tmp > 65535)
    3bae:	6f 81       	ldd	r22, Y+7	; 0x07
    3bb0:	78 85       	ldd	r23, Y+8	; 0x08
    3bb2:	89 85       	ldd	r24, Y+9	; 0x09
    3bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bb6:	20 e0       	ldi	r18, 0x00	; 0
    3bb8:	3f ef       	ldi	r19, 0xFF	; 255
    3bba:	4f e7       	ldi	r20, 0x7F	; 127
    3bbc:	57 e4       	ldi	r21, 0x47	; 71
    3bbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bc2:	18 16       	cp	r1, r24
    3bc4:	4c f5       	brge	.+82     	; 0x3c18 <Lcd_ES_tdisplayNum_xy+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bca:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bce:	20 e0       	ldi	r18, 0x00	; 0
    3bd0:	30 e0       	ldi	r19, 0x00	; 0
    3bd2:	40 e2       	ldi	r20, 0x20	; 32
    3bd4:	51 e4       	ldi	r21, 0x41	; 65
    3bd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bda:	dc 01       	movw	r26, r24
    3bdc:	cb 01       	movw	r24, r22
    3bde:	bc 01       	movw	r22, r24
    3be0:	cd 01       	movw	r24, r26
    3be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3be6:	dc 01       	movw	r26, r24
    3be8:	cb 01       	movw	r24, r22
    3bea:	9e 83       	std	Y+6, r25	; 0x06
    3bec:	8d 83       	std	Y+5, r24	; 0x05
    3bee:	0f c0       	rjmp	.+30     	; 0x3c0e <Lcd_ES_tdisplayNum_xy+0x1e4>
    3bf0:	80 e9       	ldi	r24, 0x90	; 144
    3bf2:	91 e0       	ldi	r25, 0x01	; 1
    3bf4:	9c 83       	std	Y+4, r25	; 0x04
    3bf6:	8b 83       	std	Y+3, r24	; 0x03
    3bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    3bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    3bfc:	01 97       	sbiw	r24, 0x01	; 1
    3bfe:	f1 f7       	brne	.-4      	; 0x3bfc <Lcd_ES_tdisplayNum_xy+0x1d2>
    3c00:	9c 83       	std	Y+4, r25	; 0x04
    3c02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c04:	8d 81       	ldd	r24, Y+5	; 0x05
    3c06:	9e 81       	ldd	r25, Y+6	; 0x06
    3c08:	01 97       	sbiw	r24, 0x01	; 1
    3c0a:	9e 83       	std	Y+6, r25	; 0x06
    3c0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c0e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c10:	9e 81       	ldd	r25, Y+6	; 0x06
    3c12:	00 97       	sbiw	r24, 0x00	; 0
    3c14:	69 f7       	brne	.-38     	; 0x3bf0 <Lcd_ES_tdisplayNum_xy+0x1c6>
    3c16:	18 c0       	rjmp	.+48     	; 0x3c48 <Lcd_ES_tdisplayNum_xy+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c18:	6f 81       	ldd	r22, Y+7	; 0x07
    3c1a:	78 85       	ldd	r23, Y+8	; 0x08
    3c1c:	89 85       	ldd	r24, Y+9	; 0x09
    3c1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c24:	dc 01       	movw	r26, r24
    3c26:	cb 01       	movw	r24, r22
    3c28:	9e 83       	std	Y+6, r25	; 0x06
    3c2a:	8d 83       	std	Y+5, r24	; 0x05
    3c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c30:	9a 83       	std	Y+2, r25	; 0x02
    3c32:	89 83       	std	Y+1, r24	; 0x01
    3c34:	89 81       	ldd	r24, Y+1	; 0x01
    3c36:	9a 81       	ldd	r25, Y+2	; 0x02
    3c38:	01 97       	sbiw	r24, 0x01	; 1
    3c3a:	f1 f7       	brne	.-4      	; 0x3c38 <Lcd_ES_tdisplayNum_xy+0x20e>
    3c3c:	9a 83       	std	Y+2, r25	; 0x02
    3c3e:	89 83       	std	Y+1, r24	; 0x01
    3c40:	03 c0       	rjmp	.+6      	; 0x3c48 <Lcd_ES_tdisplayNum_xy+0x21e>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    3c42:	81 e0       	ldi	r24, 0x01	; 1
    3c44:	8b a3       	std	Y+35, r24	; 0x23
    3c46:	1a c0       	rjmp	.+52     	; 0x3c7c <Lcd_ES_tdisplayNum_xy+0x252>
	}


	for(int j=1;j<=col;j++){
    3c48:	81 e0       	ldi	r24, 0x01	; 1
    3c4a:	90 e0       	ldi	r25, 0x00	; 0
    3c4c:	9e 8f       	std	Y+30, r25	; 0x1e
    3c4e:	8d 8f       	std	Y+29, r24	; 0x1d
    3c50:	08 c0       	rjmp	.+16     	; 0x3c62 <Lcd_ES_tdisplayNum_xy+0x238>
		Lcd_ES_tsendCmd(ShiftRight);
    3c52:	8c e1       	ldi	r24, 0x1C	; 28
    3c54:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <Lcd_ES_tsendCmd>
	}else{
		return ES_NOT_OK;
	}


	for(int j=1;j<=col;j++){
    3c58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c5c:	01 96       	adiw	r24, 0x01	; 1
    3c5e:	9e 8f       	std	Y+30, r25	; 0x1e
    3c60:	8d 8f       	std	Y+29, r24	; 0x1d
    3c62:	8a a1       	ldd	r24, Y+34	; 0x22
    3c64:	28 2f       	mov	r18, r24
    3c66:	30 e0       	ldi	r19, 0x00	; 0
    3c68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c6a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c6c:	28 17       	cp	r18, r24
    3c6e:	39 07       	cpc	r19, r25
    3c70:	84 f7       	brge	.-32     	; 0x3c52 <Lcd_ES_tdisplayNum_xy+0x228>
		Lcd_ES_tsendCmd(ShiftRight);
	}

	Lcd_ES_tdisplayNum(num);
    3c72:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3c74:	98 a1       	ldd	r25, Y+32	; 0x20
    3c76:	0e 94 b2 1c 	call	0x3964	; 0x3964 <Lcd_ES_tdisplayNum>
	return ES_OK;
    3c7a:	1b a2       	std	Y+35, r1	; 0x23
    3c7c:	8b a1       	ldd	r24, Y+35	; 0x23

}
    3c7e:	a3 96       	adiw	r28, 0x23	; 35
    3c80:	0f b6       	in	r0, 0x3f	; 63
    3c82:	f8 94       	cli
    3c84:	de bf       	out	0x3e, r29	; 62
    3c86:	0f be       	out	0x3f, r0	; 63
    3c88:	cd bf       	out	0x3d, r28	; 61
    3c8a:	cf 91       	pop	r28
    3c8c:	df 91       	pop	r29
    3c8e:	08 95       	ret

00003c90 <Lcd_ES_tsendChar_xy>:

ES_t Lcd_ES_tsendChar_xy(u8 data,u8 row,u8 col){
    3c90:	df 93       	push	r29
    3c92:	cf 93       	push	r28
    3c94:	cd b7       	in	r28, 0x3d	; 61
    3c96:	de b7       	in	r29, 0x3e	; 62
    3c98:	a2 97       	sbiw	r28, 0x22	; 34
    3c9a:	0f b6       	in	r0, 0x3f	; 63
    3c9c:	f8 94       	cli
    3c9e:	de bf       	out	0x3e, r29	; 62
    3ca0:	0f be       	out	0x3f, r0	; 63
    3ca2:	cd bf       	out	0x3d, r28	; 61
    3ca4:	8f 8f       	std	Y+31, r24	; 0x1f
    3ca6:	68 a3       	std	Y+32, r22	; 0x20
    3ca8:	49 a3       	std	Y+33, r20	; 0x21
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    3caa:	81 e0       	ldi	r24, 0x01	; 1
    3cac:	61 e0       	ldi	r22, 0x01	; 1
    3cae:	41 e0       	ldi	r20, 0x01	; 1
    3cb0:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    3cb4:	81 e0       	ldi	r24, 0x01	; 1
    3cb6:	60 e0       	ldi	r22, 0x00	; 0
    3cb8:	40 e0       	ldi	r20, 0x00	; 0
    3cba:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>


	if(row == 1){
    3cbe:	88 a1       	ldd	r24, Y+32	; 0x20
    3cc0:	81 30       	cpi	r24, 0x01	; 1
    3cc2:	09 f0       	breq	.+2      	; 0x3cc6 <Lcd_ES_tsendChar_xy+0x36>
    3cc4:	76 c0       	rjmp	.+236    	; 0x3db2 <Lcd_ES_tsendChar_xy+0x122>
		Lcd_ES_tsendCmd(Force1stline);
    3cc6:	80 e8       	ldi	r24, 0x80	; 128
    3cc8:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <Lcd_ES_tsendCmd>
    3ccc:	80 e0       	ldi	r24, 0x00	; 0
    3cce:	90 e0       	ldi	r25, 0x00	; 0
    3cd0:	a0 e8       	ldi	r26, 0x80	; 128
    3cd2:	bf e3       	ldi	r27, 0x3F	; 63
    3cd4:	89 8f       	std	Y+25, r24	; 0x19
    3cd6:	9a 8f       	std	Y+26, r25	; 0x1a
    3cd8:	ab 8f       	std	Y+27, r26	; 0x1b
    3cda:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cdc:	69 8d       	ldd	r22, Y+25	; 0x19
    3cde:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ce0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ce2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ce4:	20 e0       	ldi	r18, 0x00	; 0
    3ce6:	30 e0       	ldi	r19, 0x00	; 0
    3ce8:	4a e7       	ldi	r20, 0x7A	; 122
    3cea:	55 e4       	ldi	r21, 0x45	; 69
    3cec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cf0:	dc 01       	movw	r26, r24
    3cf2:	cb 01       	movw	r24, r22
    3cf4:	8d 8b       	std	Y+21, r24	; 0x15
    3cf6:	9e 8b       	std	Y+22, r25	; 0x16
    3cf8:	af 8b       	std	Y+23, r26	; 0x17
    3cfa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3cfc:	6d 89       	ldd	r22, Y+21	; 0x15
    3cfe:	7e 89       	ldd	r23, Y+22	; 0x16
    3d00:	8f 89       	ldd	r24, Y+23	; 0x17
    3d02:	98 8d       	ldd	r25, Y+24	; 0x18
    3d04:	20 e0       	ldi	r18, 0x00	; 0
    3d06:	30 e0       	ldi	r19, 0x00	; 0
    3d08:	40 e8       	ldi	r20, 0x80	; 128
    3d0a:	5f e3       	ldi	r21, 0x3F	; 63
    3d0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d10:	88 23       	and	r24, r24
    3d12:	2c f4       	brge	.+10     	; 0x3d1e <Lcd_ES_tsendChar_xy+0x8e>
		__ticks = 1;
    3d14:	81 e0       	ldi	r24, 0x01	; 1
    3d16:	90 e0       	ldi	r25, 0x00	; 0
    3d18:	9c 8b       	std	Y+20, r25	; 0x14
    3d1a:	8b 8b       	std	Y+19, r24	; 0x13
    3d1c:	3f c0       	rjmp	.+126    	; 0x3d9c <Lcd_ES_tsendChar_xy+0x10c>
	else if (__tmp > 65535)
    3d1e:	6d 89       	ldd	r22, Y+21	; 0x15
    3d20:	7e 89       	ldd	r23, Y+22	; 0x16
    3d22:	8f 89       	ldd	r24, Y+23	; 0x17
    3d24:	98 8d       	ldd	r25, Y+24	; 0x18
    3d26:	20 e0       	ldi	r18, 0x00	; 0
    3d28:	3f ef       	ldi	r19, 0xFF	; 255
    3d2a:	4f e7       	ldi	r20, 0x7F	; 127
    3d2c:	57 e4       	ldi	r21, 0x47	; 71
    3d2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d32:	18 16       	cp	r1, r24
    3d34:	4c f5       	brge	.+82     	; 0x3d88 <Lcd_ES_tsendChar_xy+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d36:	69 8d       	ldd	r22, Y+25	; 0x19
    3d38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d3e:	20 e0       	ldi	r18, 0x00	; 0
    3d40:	30 e0       	ldi	r19, 0x00	; 0
    3d42:	40 e2       	ldi	r20, 0x20	; 32
    3d44:	51 e4       	ldi	r21, 0x41	; 65
    3d46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d4a:	dc 01       	movw	r26, r24
    3d4c:	cb 01       	movw	r24, r22
    3d4e:	bc 01       	movw	r22, r24
    3d50:	cd 01       	movw	r24, r26
    3d52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d56:	dc 01       	movw	r26, r24
    3d58:	cb 01       	movw	r24, r22
    3d5a:	9c 8b       	std	Y+20, r25	; 0x14
    3d5c:	8b 8b       	std	Y+19, r24	; 0x13
    3d5e:	0f c0       	rjmp	.+30     	; 0x3d7e <Lcd_ES_tsendChar_xy+0xee>
    3d60:	80 e9       	ldi	r24, 0x90	; 144
    3d62:	91 e0       	ldi	r25, 0x01	; 1
    3d64:	9a 8b       	std	Y+18, r25	; 0x12
    3d66:	89 8b       	std	Y+17, r24	; 0x11
    3d68:	89 89       	ldd	r24, Y+17	; 0x11
    3d6a:	9a 89       	ldd	r25, Y+18	; 0x12
    3d6c:	01 97       	sbiw	r24, 0x01	; 1
    3d6e:	f1 f7       	brne	.-4      	; 0x3d6c <Lcd_ES_tsendChar_xy+0xdc>
    3d70:	9a 8b       	std	Y+18, r25	; 0x12
    3d72:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d74:	8b 89       	ldd	r24, Y+19	; 0x13
    3d76:	9c 89       	ldd	r25, Y+20	; 0x14
    3d78:	01 97       	sbiw	r24, 0x01	; 1
    3d7a:	9c 8b       	std	Y+20, r25	; 0x14
    3d7c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d7e:	8b 89       	ldd	r24, Y+19	; 0x13
    3d80:	9c 89       	ldd	r25, Y+20	; 0x14
    3d82:	00 97       	sbiw	r24, 0x00	; 0
    3d84:	69 f7       	brne	.-38     	; 0x3d60 <Lcd_ES_tsendChar_xy+0xd0>
    3d86:	92 c0       	rjmp	.+292    	; 0x3eac <Lcd_ES_tsendChar_xy+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d88:	6d 89       	ldd	r22, Y+21	; 0x15
    3d8a:	7e 89       	ldd	r23, Y+22	; 0x16
    3d8c:	8f 89       	ldd	r24, Y+23	; 0x17
    3d8e:	98 8d       	ldd	r25, Y+24	; 0x18
    3d90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d94:	dc 01       	movw	r26, r24
    3d96:	cb 01       	movw	r24, r22
    3d98:	9c 8b       	std	Y+20, r25	; 0x14
    3d9a:	8b 8b       	std	Y+19, r24	; 0x13
    3d9c:	8b 89       	ldd	r24, Y+19	; 0x13
    3d9e:	9c 89       	ldd	r25, Y+20	; 0x14
    3da0:	98 8b       	std	Y+16, r25	; 0x10
    3da2:	8f 87       	std	Y+15, r24	; 0x0f
    3da4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3da6:	98 89       	ldd	r25, Y+16	; 0x10
    3da8:	01 97       	sbiw	r24, 0x01	; 1
    3daa:	f1 f7       	brne	.-4      	; 0x3da8 <Lcd_ES_tsendChar_xy+0x118>
    3dac:	98 8b       	std	Y+16, r25	; 0x10
    3dae:	8f 87       	std	Y+15, r24	; 0x0f
    3db0:	7d c0       	rjmp	.+250    	; 0x3eac <Lcd_ES_tsendChar_xy+0x21c>
		_delay_ms(1);
	}else if(row == 2){
    3db2:	88 a1       	ldd	r24, Y+32	; 0x20
    3db4:	82 30       	cpi	r24, 0x02	; 2
    3db6:	09 f0       	breq	.+2      	; 0x3dba <Lcd_ES_tsendChar_xy+0x12a>
    3db8:	76 c0       	rjmp	.+236    	; 0x3ea6 <Lcd_ES_tsendChar_xy+0x216>
		Lcd_ES_tsendCmd(Force2ndline);
    3dba:	80 ec       	ldi	r24, 0xC0	; 192
    3dbc:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <Lcd_ES_tsendCmd>
    3dc0:	80 e0       	ldi	r24, 0x00	; 0
    3dc2:	90 e0       	ldi	r25, 0x00	; 0
    3dc4:	a0 e2       	ldi	r26, 0x20	; 32
    3dc6:	b1 e4       	ldi	r27, 0x41	; 65
    3dc8:	8b 87       	std	Y+11, r24	; 0x0b
    3dca:	9c 87       	std	Y+12, r25	; 0x0c
    3dcc:	ad 87       	std	Y+13, r26	; 0x0d
    3dce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dd8:	20 e0       	ldi	r18, 0x00	; 0
    3dda:	30 e0       	ldi	r19, 0x00	; 0
    3ddc:	4a e7       	ldi	r20, 0x7A	; 122
    3dde:	55 e4       	ldi	r21, 0x45	; 69
    3de0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3de4:	dc 01       	movw	r26, r24
    3de6:	cb 01       	movw	r24, r22
    3de8:	8f 83       	std	Y+7, r24	; 0x07
    3dea:	98 87       	std	Y+8, r25	; 0x08
    3dec:	a9 87       	std	Y+9, r26	; 0x09
    3dee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3df0:	6f 81       	ldd	r22, Y+7	; 0x07
    3df2:	78 85       	ldd	r23, Y+8	; 0x08
    3df4:	89 85       	ldd	r24, Y+9	; 0x09
    3df6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3df8:	20 e0       	ldi	r18, 0x00	; 0
    3dfa:	30 e0       	ldi	r19, 0x00	; 0
    3dfc:	40 e8       	ldi	r20, 0x80	; 128
    3dfe:	5f e3       	ldi	r21, 0x3F	; 63
    3e00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e04:	88 23       	and	r24, r24
    3e06:	2c f4       	brge	.+10     	; 0x3e12 <Lcd_ES_tsendChar_xy+0x182>
		__ticks = 1;
    3e08:	81 e0       	ldi	r24, 0x01	; 1
    3e0a:	90 e0       	ldi	r25, 0x00	; 0
    3e0c:	9e 83       	std	Y+6, r25	; 0x06
    3e0e:	8d 83       	std	Y+5, r24	; 0x05
    3e10:	3f c0       	rjmp	.+126    	; 0x3e90 <Lcd_ES_tsendChar_xy+0x200>
	else if (__tmp > 65535)
    3e12:	6f 81       	ldd	r22, Y+7	; 0x07
    3e14:	78 85       	ldd	r23, Y+8	; 0x08
    3e16:	89 85       	ldd	r24, Y+9	; 0x09
    3e18:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e1a:	20 e0       	ldi	r18, 0x00	; 0
    3e1c:	3f ef       	ldi	r19, 0xFF	; 255
    3e1e:	4f e7       	ldi	r20, 0x7F	; 127
    3e20:	57 e4       	ldi	r21, 0x47	; 71
    3e22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e26:	18 16       	cp	r1, r24
    3e28:	4c f5       	brge	.+82     	; 0x3e7c <Lcd_ES_tsendChar_xy+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e30:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e32:	20 e0       	ldi	r18, 0x00	; 0
    3e34:	30 e0       	ldi	r19, 0x00	; 0
    3e36:	40 e2       	ldi	r20, 0x20	; 32
    3e38:	51 e4       	ldi	r21, 0x41	; 65
    3e3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e3e:	dc 01       	movw	r26, r24
    3e40:	cb 01       	movw	r24, r22
    3e42:	bc 01       	movw	r22, r24
    3e44:	cd 01       	movw	r24, r26
    3e46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e4a:	dc 01       	movw	r26, r24
    3e4c:	cb 01       	movw	r24, r22
    3e4e:	9e 83       	std	Y+6, r25	; 0x06
    3e50:	8d 83       	std	Y+5, r24	; 0x05
    3e52:	0f c0       	rjmp	.+30     	; 0x3e72 <Lcd_ES_tsendChar_xy+0x1e2>
    3e54:	80 e9       	ldi	r24, 0x90	; 144
    3e56:	91 e0       	ldi	r25, 0x01	; 1
    3e58:	9c 83       	std	Y+4, r25	; 0x04
    3e5a:	8b 83       	std	Y+3, r24	; 0x03
    3e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e5e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e60:	01 97       	sbiw	r24, 0x01	; 1
    3e62:	f1 f7       	brne	.-4      	; 0x3e60 <Lcd_ES_tsendChar_xy+0x1d0>
    3e64:	9c 83       	std	Y+4, r25	; 0x04
    3e66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e68:	8d 81       	ldd	r24, Y+5	; 0x05
    3e6a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e6c:	01 97       	sbiw	r24, 0x01	; 1
    3e6e:	9e 83       	std	Y+6, r25	; 0x06
    3e70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e72:	8d 81       	ldd	r24, Y+5	; 0x05
    3e74:	9e 81       	ldd	r25, Y+6	; 0x06
    3e76:	00 97       	sbiw	r24, 0x00	; 0
    3e78:	69 f7       	brne	.-38     	; 0x3e54 <Lcd_ES_tsendChar_xy+0x1c4>
    3e7a:	18 c0       	rjmp	.+48     	; 0x3eac <Lcd_ES_tsendChar_xy+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e7c:	6f 81       	ldd	r22, Y+7	; 0x07
    3e7e:	78 85       	ldd	r23, Y+8	; 0x08
    3e80:	89 85       	ldd	r24, Y+9	; 0x09
    3e82:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e88:	dc 01       	movw	r26, r24
    3e8a:	cb 01       	movw	r24, r22
    3e8c:	9e 83       	std	Y+6, r25	; 0x06
    3e8e:	8d 83       	std	Y+5, r24	; 0x05
    3e90:	8d 81       	ldd	r24, Y+5	; 0x05
    3e92:	9e 81       	ldd	r25, Y+6	; 0x06
    3e94:	9a 83       	std	Y+2, r25	; 0x02
    3e96:	89 83       	std	Y+1, r24	; 0x01
    3e98:	89 81       	ldd	r24, Y+1	; 0x01
    3e9a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e9c:	01 97       	sbiw	r24, 0x01	; 1
    3e9e:	f1 f7       	brne	.-4      	; 0x3e9c <Lcd_ES_tsendChar_xy+0x20c>
    3ea0:	9a 83       	std	Y+2, r25	; 0x02
    3ea2:	89 83       	std	Y+1, r24	; 0x01
    3ea4:	03 c0       	rjmp	.+6      	; 0x3eac <Lcd_ES_tsendChar_xy+0x21c>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    3ea6:	81 e0       	ldi	r24, 0x01	; 1
    3ea8:	8a a3       	std	Y+34, r24	; 0x22
    3eaa:	19 c0       	rjmp	.+50     	; 0x3ede <Lcd_ES_tsendChar_xy+0x24e>
	}

	for(int j=1;j<=col;j++){
    3eac:	81 e0       	ldi	r24, 0x01	; 1
    3eae:	90 e0       	ldi	r25, 0x00	; 0
    3eb0:	9e 8f       	std	Y+30, r25	; 0x1e
    3eb2:	8d 8f       	std	Y+29, r24	; 0x1d
    3eb4:	08 c0       	rjmp	.+16     	; 0x3ec6 <Lcd_ES_tsendChar_xy+0x236>
		Lcd_ES_tsendCmd(ShiftRight);
    3eb6:	8c e1       	ldi	r24, 0x1C	; 28
    3eb8:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <Lcd_ES_tsendCmd>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
	}

	for(int j=1;j<=col;j++){
    3ebc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ebe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3ec0:	01 96       	adiw	r24, 0x01	; 1
    3ec2:	9e 8f       	std	Y+30, r25	; 0x1e
    3ec4:	8d 8f       	std	Y+29, r24	; 0x1d
    3ec6:	89 a1       	ldd	r24, Y+33	; 0x21
    3ec8:	28 2f       	mov	r18, r24
    3eca:	30 e0       	ldi	r19, 0x00	; 0
    3ecc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ece:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3ed0:	28 17       	cp	r18, r24
    3ed2:	39 07       	cpc	r19, r25
    3ed4:	84 f7       	brge	.-32     	; 0x3eb6 <Lcd_ES_tsendChar_xy+0x226>
		Lcd_ES_tsendCmd(ShiftRight);
	}
	Lcd_ES_tsendChar(data);
    3ed6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ed8:	0e 94 a6 1b 	call	0x374c	; 0x374c <Lcd_ES_tsendChar>
	return ES_OK;
    3edc:	1a a2       	std	Y+34, r1	; 0x22
    3ede:	8a a1       	ldd	r24, Y+34	; 0x22
}
    3ee0:	a2 96       	adiw	r28, 0x22	; 34
    3ee2:	0f b6       	in	r0, 0x3f	; 63
    3ee4:	f8 94       	cli
    3ee6:	de bf       	out	0x3e, r29	; 62
    3ee8:	0f be       	out	0x3f, r0	; 63
    3eea:	cd bf       	out	0x3d, r28	; 61
    3eec:	cf 91       	pop	r28
    3eee:	df 91       	pop	r29
    3ef0:	08 95       	ret

00003ef2 <LCD_ES_tSet_Cursor_Pos>:

static ES_t LCD_ES_tSet_Cursor_Pos(u8 row,u8 column){
    3ef2:	df 93       	push	r29
    3ef4:	cf 93       	push	r28
    3ef6:	00 d0       	rcall	.+0      	; 0x3ef8 <LCD_ES_tSet_Cursor_Pos+0x6>
    3ef8:	00 d0       	rcall	.+0      	; 0x3efa <LCD_ES_tSet_Cursor_Pos+0x8>
    3efa:	0f 92       	push	r0
    3efc:	cd b7       	in	r28, 0x3d	; 61
    3efe:	de b7       	in	r29, 0x3e	; 62
    3f00:	89 83       	std	Y+1, r24	; 0x01
    3f02:	6a 83       	std	Y+2, r22	; 0x02
	column--;
    3f04:	8a 81       	ldd	r24, Y+2	; 0x02
    3f06:	81 50       	subi	r24, 0x01	; 1
    3f08:	8a 83       	std	Y+2, r24	; 0x02
	switch(row){
    3f0a:	89 81       	ldd	r24, Y+1	; 0x01
    3f0c:	28 2f       	mov	r18, r24
    3f0e:	30 e0       	ldi	r19, 0x00	; 0
    3f10:	3d 83       	std	Y+5, r19	; 0x05
    3f12:	2c 83       	std	Y+4, r18	; 0x04
    3f14:	8c 81       	ldd	r24, Y+4	; 0x04
    3f16:	9d 81       	ldd	r25, Y+5	; 0x05
    3f18:	81 30       	cpi	r24, 0x01	; 1
    3f1a:	91 05       	cpc	r25, r1
    3f1c:	31 f0       	breq	.+12     	; 0x3f2a <LCD_ES_tSet_Cursor_Pos+0x38>
    3f1e:	2c 81       	ldd	r18, Y+4	; 0x04
    3f20:	3d 81       	ldd	r19, Y+5	; 0x05
    3f22:	22 30       	cpi	r18, 0x02	; 2
    3f24:	31 05       	cpc	r19, r1
    3f26:	31 f0       	breq	.+12     	; 0x3f34 <LCD_ES_tSet_Cursor_Pos+0x42>
    3f28:	0a c0       	rjmp	.+20     	; 0x3f3e <LCD_ES_tSet_Cursor_Pos+0x4c>
	         case 1:
	        	 Lcd_ES_tsendCmd((0x80 + column));
    3f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f2c:	80 58       	subi	r24, 0x80	; 128
    3f2e:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <Lcd_ES_tsendCmd>
    3f32:	08 c0       	rjmp	.+16     	; 0x3f44 <LCD_ES_tSet_Cursor_Pos+0x52>
	        	 break;
	         case 2:
	        	 Lcd_ES_tsendCmd((0xc0 + column));
    3f34:	8a 81       	ldd	r24, Y+2	; 0x02
    3f36:	80 54       	subi	r24, 0x40	; 64
    3f38:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <Lcd_ES_tsendCmd>
    3f3c:	03 c0       	rjmp	.+6      	; 0x3f44 <LCD_ES_tSet_Cursor_Pos+0x52>
	        	 break;
	         default:
	        	 return ES_NOT_OK;
    3f3e:	31 e0       	ldi	r19, 0x01	; 1
    3f40:	3b 83       	std	Y+3, r19	; 0x03
    3f42:	01 c0       	rjmp	.+2      	; 0x3f46 <LCD_ES_tSet_Cursor_Pos+0x54>
	}
	return ES_OK;
    3f44:	1b 82       	std	Y+3, r1	; 0x03
    3f46:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3f48:	0f 90       	pop	r0
    3f4a:	0f 90       	pop	r0
    3f4c:	0f 90       	pop	r0
    3f4e:	0f 90       	pop	r0
    3f50:	0f 90       	pop	r0
    3f52:	cf 91       	pop	r28
    3f54:	df 91       	pop	r29
    3f56:	08 95       	ret

00003f58 <LCD_ES_tGoTo>:

/************************************************************************/
ES_t LCD_ES_tGoTo(u8 Line, u8 x){
    3f58:	df 93       	push	r29
    3f5a:	cf 93       	push	r28
    3f5c:	00 d0       	rcall	.+0      	; 0x3f5e <LCD_ES_tGoTo+0x6>
    3f5e:	0f 92       	push	r0
    3f60:	cd b7       	in	r28, 0x3d	; 61
    3f62:	de b7       	in	r29, 0x3e	; 62
    3f64:	89 83       	std	Y+1, r24	; 0x01
    3f66:	6a 83       	std	Y+2, r22	; 0x02
	if(0 == Line)
    3f68:	89 81       	ldd	r24, Y+1	; 0x01
    3f6a:	88 23       	and	r24, r24
    3f6c:	41 f4       	brne	.+16     	; 0x3f7e <LCD_ES_tGoTo+0x26>
	{
		if ( x <=15)
    3f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f70:	80 31       	cpi	r24, 0x10	; 16
    3f72:	98 f4       	brcc	.+38     	; 0x3f9a <LCD_ES_tGoTo+0x42>
		{
			Lcd_ES_tsendCmd(0x80 + x);
    3f74:	8a 81       	ldd	r24, Y+2	; 0x02
    3f76:	80 58       	subi	r24, 0x80	; 128
    3f78:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <Lcd_ES_tsendCmd>
    3f7c:	0e c0       	rjmp	.+28     	; 0x3f9a <LCD_ES_tGoTo+0x42>
		}
	}
	else if (1 == Line)
    3f7e:	89 81       	ldd	r24, Y+1	; 0x01
    3f80:	81 30       	cpi	r24, 0x01	; 1
    3f82:	41 f4       	brne	.+16     	; 0x3f94 <LCD_ES_tGoTo+0x3c>
	{
		if ( x <=15)
    3f84:	8a 81       	ldd	r24, Y+2	; 0x02
    3f86:	80 31       	cpi	r24, 0x10	; 16
    3f88:	40 f4       	brcc	.+16     	; 0x3f9a <LCD_ES_tGoTo+0x42>
		{
			Lcd_ES_tsendCmd(0xC0 + x);
    3f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f8c:	80 54       	subi	r24, 0x40	; 64
    3f8e:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <Lcd_ES_tsendCmd>
    3f92:	03 c0       	rjmp	.+6      	; 0x3f9a <LCD_ES_tGoTo+0x42>
		}
	}else{
		return ES_NOT_OK;
    3f94:	81 e0       	ldi	r24, 0x01	; 1
    3f96:	8b 83       	std	Y+3, r24	; 0x03
    3f98:	01 c0       	rjmp	.+2      	; 0x3f9c <LCD_ES_tGoTo+0x44>
	}
	return ES_OK;
    3f9a:	1b 82       	std	Y+3, r1	; 0x03
    3f9c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3f9e:	0f 90       	pop	r0
    3fa0:	0f 90       	pop	r0
    3fa2:	0f 90       	pop	r0
    3fa4:	cf 91       	pop	r28
    3fa6:	df 91       	pop	r29
    3fa8:	08 95       	ret

00003faa <KPD_ES_tGetKeyPressed>:
// To avoid the unarrangement and uncontiguous
const u8 KPD_Au8RowsPins[4] = {KPD_U8_R1,KPD_U8_R2,KPD_U8_R3,KPD_U8_R4};
const u8 KPD_Au8ColsPins[4] = {KPD_U8_C1,KPD_U8_C2,KPD_U8_C3,KPD_U8_C4};

ES_t KPD_ES_tGetKeyPressed(u8 *copy_pu8ReturnedKey)
{
    3faa:	df 93       	push	r29
    3fac:	cf 93       	push	r28
    3fae:	cd b7       	in	r28, 0x3d	; 61
    3fb0:	de b7       	in	r29, 0x3e	; 62
    3fb2:	65 97       	sbiw	r28, 0x15	; 21
    3fb4:	0f b6       	in	r0, 0x3f	; 63
    3fb6:	f8 94       	cli
    3fb8:	de bf       	out	0x3e, r29	; 62
    3fba:	0f be       	out	0x3f, r0	; 63
    3fbc:	cd bf       	out	0x3d, r28	; 61
    3fbe:	9c 8b       	std	Y+20, r25	; 0x14
    3fc0:	8b 8b       	std	Y+19, r24	; 0x13
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
    3fc2:	eb 89       	ldd	r30, Y+19	; 0x13
    3fc4:	fc 89       	ldd	r31, Y+20	; 0x14
    3fc6:	8f ef       	ldi	r24, 0xFF	; 255
    3fc8:	80 83       	st	Z, r24
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
    3fca:	1f 86       	std	Y+15, r1	; 0x0f
	if(copy_pu8ReturnedKey != NULL)
    3fcc:	8b 89       	ldd	r24, Y+19	; 0x13
    3fce:	9c 89       	ldd	r25, Y+20	; 0x14
    3fd0:	00 97       	sbiw	r24, 0x00	; 0
    3fd2:	09 f4       	brne	.+2      	; 0x3fd6 <KPD_ES_tGetKeyPressed+0x2c>
    3fd4:	ed c0       	rjmp	.+474    	; 0x41b0 <KPD_ES_tGetKeyPressed+0x206>
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
    3fd6:	19 8a       	std	Y+17, r1	; 0x11
    3fd8:	e5 c0       	rjmp	.+458    	; 0x41a4 <KPD_ES_tGetKeyPressed+0x1fa>
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
    3fda:	89 89       	ldd	r24, Y+17	; 0x11
    3fdc:	88 2f       	mov	r24, r24
    3fde:	90 e0       	ldi	r25, 0x00	; 0
    3fe0:	fc 01       	movw	r30, r24
    3fe2:	ef 5d       	subi	r30, 0xDF	; 223
    3fe4:	fd 4f       	sbci	r31, 0xFD	; 253
    3fe6:	90 81       	ld	r25, Z
    3fe8:	81 e0       	ldi	r24, 0x01	; 1
    3fea:	69 2f       	mov	r22, r25
    3fec:	40 e0       	ldi	r20, 0x00	; 0
    3fee:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
    3ff2:	18 8a       	std	Y+16, r1	; 0x10
    3ff4:	c1 c0       	rjmp	.+386    	; 0x4178 <KPD_ES_tGetKeyPressed+0x1ce>
			{
				DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);
    3ff6:	88 89       	ldd	r24, Y+16	; 0x10
    3ff8:	88 2f       	mov	r24, r24
    3ffa:	90 e0       	ldi	r25, 0x00	; 0
    3ffc:	fc 01       	movw	r30, r24
    3ffe:	eb 5d       	subi	r30, 0xDB	; 219
    4000:	fd 4f       	sbci	r31, 0xFD	; 253
    4002:	90 81       	ld	r25, Z
    4004:	9e 01       	movw	r18, r28
    4006:	2e 5e       	subi	r18, 0xEE	; 238
    4008:	3f 4f       	sbci	r19, 0xFF	; 255
    400a:	83 e0       	ldi	r24, 0x03	; 3
    400c:	69 2f       	mov	r22, r25
    400e:	a9 01       	movw	r20, r18
    4010:	0e 94 b0 13 	call	0x2760	; 0x2760 <DIO_ES_tGetPinValue>
				if(Local_u8PinVal == LOW){ /* Switch is pressed */
    4014:	8a 89       	ldd	r24, Y+18	; 0x12
    4016:	88 23       	and	r24, r24
    4018:	09 f0       	breq	.+2      	; 0x401c <KPD_ES_tGetKeyPressed+0x72>
    401a:	ab c0       	rjmp	.+342    	; 0x4172 <KPD_ES_tGetKeyPressed+0x1c8>
    401c:	80 e0       	ldi	r24, 0x00	; 0
    401e:	90 e0       	ldi	r25, 0x00	; 0
    4020:	a0 ea       	ldi	r26, 0xA0	; 160
    4022:	b1 e4       	ldi	r27, 0x41	; 65
    4024:	8b 87       	std	Y+11, r24	; 0x0b
    4026:	9c 87       	std	Y+12, r25	; 0x0c
    4028:	ad 87       	std	Y+13, r26	; 0x0d
    402a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    402c:	6b 85       	ldd	r22, Y+11	; 0x0b
    402e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4030:	8d 85       	ldd	r24, Y+13	; 0x0d
    4032:	9e 85       	ldd	r25, Y+14	; 0x0e
    4034:	20 e0       	ldi	r18, 0x00	; 0
    4036:	30 e0       	ldi	r19, 0x00	; 0
    4038:	4a e7       	ldi	r20, 0x7A	; 122
    403a:	55 e4       	ldi	r21, 0x45	; 69
    403c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4040:	dc 01       	movw	r26, r24
    4042:	cb 01       	movw	r24, r22
    4044:	8f 83       	std	Y+7, r24	; 0x07
    4046:	98 87       	std	Y+8, r25	; 0x08
    4048:	a9 87       	std	Y+9, r26	; 0x09
    404a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    404c:	6f 81       	ldd	r22, Y+7	; 0x07
    404e:	78 85       	ldd	r23, Y+8	; 0x08
    4050:	89 85       	ldd	r24, Y+9	; 0x09
    4052:	9a 85       	ldd	r25, Y+10	; 0x0a
    4054:	20 e0       	ldi	r18, 0x00	; 0
    4056:	30 e0       	ldi	r19, 0x00	; 0
    4058:	40 e8       	ldi	r20, 0x80	; 128
    405a:	5f e3       	ldi	r21, 0x3F	; 63
    405c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4060:	88 23       	and	r24, r24
    4062:	2c f4       	brge	.+10     	; 0x406e <KPD_ES_tGetKeyPressed+0xc4>
		__ticks = 1;
    4064:	81 e0       	ldi	r24, 0x01	; 1
    4066:	90 e0       	ldi	r25, 0x00	; 0
    4068:	9e 83       	std	Y+6, r25	; 0x06
    406a:	8d 83       	std	Y+5, r24	; 0x05
    406c:	3f c0       	rjmp	.+126    	; 0x40ec <KPD_ES_tGetKeyPressed+0x142>
	else if (__tmp > 65535)
    406e:	6f 81       	ldd	r22, Y+7	; 0x07
    4070:	78 85       	ldd	r23, Y+8	; 0x08
    4072:	89 85       	ldd	r24, Y+9	; 0x09
    4074:	9a 85       	ldd	r25, Y+10	; 0x0a
    4076:	20 e0       	ldi	r18, 0x00	; 0
    4078:	3f ef       	ldi	r19, 0xFF	; 255
    407a:	4f e7       	ldi	r20, 0x7F	; 127
    407c:	57 e4       	ldi	r21, 0x47	; 71
    407e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4082:	18 16       	cp	r1, r24
    4084:	4c f5       	brge	.+82     	; 0x40d8 <KPD_ES_tGetKeyPressed+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4086:	6b 85       	ldd	r22, Y+11	; 0x0b
    4088:	7c 85       	ldd	r23, Y+12	; 0x0c
    408a:	8d 85       	ldd	r24, Y+13	; 0x0d
    408c:	9e 85       	ldd	r25, Y+14	; 0x0e
    408e:	20 e0       	ldi	r18, 0x00	; 0
    4090:	30 e0       	ldi	r19, 0x00	; 0
    4092:	40 e2       	ldi	r20, 0x20	; 32
    4094:	51 e4       	ldi	r21, 0x41	; 65
    4096:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    409a:	dc 01       	movw	r26, r24
    409c:	cb 01       	movw	r24, r22
    409e:	bc 01       	movw	r22, r24
    40a0:	cd 01       	movw	r24, r26
    40a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40a6:	dc 01       	movw	r26, r24
    40a8:	cb 01       	movw	r24, r22
    40aa:	9e 83       	std	Y+6, r25	; 0x06
    40ac:	8d 83       	std	Y+5, r24	; 0x05
    40ae:	0f c0       	rjmp	.+30     	; 0x40ce <KPD_ES_tGetKeyPressed+0x124>
    40b0:	80 e9       	ldi	r24, 0x90	; 144
    40b2:	91 e0       	ldi	r25, 0x01	; 1
    40b4:	9c 83       	std	Y+4, r25	; 0x04
    40b6:	8b 83       	std	Y+3, r24	; 0x03
    40b8:	8b 81       	ldd	r24, Y+3	; 0x03
    40ba:	9c 81       	ldd	r25, Y+4	; 0x04
    40bc:	01 97       	sbiw	r24, 0x01	; 1
    40be:	f1 f7       	brne	.-4      	; 0x40bc <KPD_ES_tGetKeyPressed+0x112>
    40c0:	9c 83       	std	Y+4, r25	; 0x04
    40c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40c4:	8d 81       	ldd	r24, Y+5	; 0x05
    40c6:	9e 81       	ldd	r25, Y+6	; 0x06
    40c8:	01 97       	sbiw	r24, 0x01	; 1
    40ca:	9e 83       	std	Y+6, r25	; 0x06
    40cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40ce:	8d 81       	ldd	r24, Y+5	; 0x05
    40d0:	9e 81       	ldd	r25, Y+6	; 0x06
    40d2:	00 97       	sbiw	r24, 0x00	; 0
    40d4:	69 f7       	brne	.-38     	; 0x40b0 <KPD_ES_tGetKeyPressed+0x106>
    40d6:	14 c0       	rjmp	.+40     	; 0x4100 <KPD_ES_tGetKeyPressed+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40d8:	6f 81       	ldd	r22, Y+7	; 0x07
    40da:	78 85       	ldd	r23, Y+8	; 0x08
    40dc:	89 85       	ldd	r24, Y+9	; 0x09
    40de:	9a 85       	ldd	r25, Y+10	; 0x0a
    40e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40e4:	dc 01       	movw	r26, r24
    40e6:	cb 01       	movw	r24, r22
    40e8:	9e 83       	std	Y+6, r25	; 0x06
    40ea:	8d 83       	std	Y+5, r24	; 0x05
    40ec:	8d 81       	ldd	r24, Y+5	; 0x05
    40ee:	9e 81       	ldd	r25, Y+6	; 0x06
    40f0:	9a 83       	std	Y+2, r25	; 0x02
    40f2:	89 83       	std	Y+1, r24	; 0x01
    40f4:	89 81       	ldd	r24, Y+1	; 0x01
    40f6:	9a 81       	ldd	r25, Y+2	; 0x02
    40f8:	01 97       	sbiw	r24, 0x01	; 1
    40fa:	f1 f7       	brne	.-4      	; 0x40f8 <KPD_ES_tGetKeyPressed+0x14e>
    40fc:	9a 83       	std	Y+2, r25	; 0x02
    40fe:	89 83       	std	Y+1, r24	; 0x01
					/* The switch which reaches between the activated
					 * Column and the pressed key */
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    4100:	88 89       	ldd	r24, Y+16	; 0x10
    4102:	88 2f       	mov	r24, r24
    4104:	90 e0       	ldi	r25, 0x00	; 0
    4106:	fc 01       	movw	r30, r24
    4108:	eb 5d       	subi	r30, 0xDB	; 219
    410a:	fd 4f       	sbci	r31, 0xFD	; 253
    410c:	90 81       	ld	r25, Z
    410e:	9e 01       	movw	r18, r28
    4110:	2e 5e       	subi	r18, 0xEE	; 238
    4112:	3f 4f       	sbci	r19, 0xFF	; 255
    4114:	83 e0       	ldi	r24, 0x03	; 3
    4116:	69 2f       	mov	r22, r25
    4118:	a9 01       	movw	r20, r18
    411a:	0e 94 b0 13 	call	0x2760	; 0x2760 <DIO_ES_tGetPinValue>
    411e:	0f c0       	rjmp	.+30     	; 0x413e <KPD_ES_tGetKeyPressed+0x194>
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    4120:	88 89       	ldd	r24, Y+16	; 0x10
    4122:	88 2f       	mov	r24, r24
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	fc 01       	movw	r30, r24
    4128:	eb 5d       	subi	r30, 0xDB	; 219
    412a:	fd 4f       	sbci	r31, 0xFD	; 253
    412c:	90 81       	ld	r25, Z
    412e:	9e 01       	movw	r18, r28
    4130:	2e 5e       	subi	r18, 0xEE	; 238
    4132:	3f 4f       	sbci	r19, 0xFF	; 255
    4134:	83 e0       	ldi	r24, 0x03	; 3
    4136:	69 2f       	mov	r22, r25
    4138:	a9 01       	movw	r20, r18
    413a:	0e 94 b0 13 	call	0x2760	; 0x2760 <DIO_ES_tGetPinValue>
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
    413e:	8a 89       	ldd	r24, Y+18	; 0x12
    4140:	88 23       	and	r24, r24
    4142:	71 f3       	breq	.-36     	; 0x4120 <KPD_ES_tGetKeyPressed+0x176>
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					}
					*copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    4144:	89 89       	ldd	r24, Y+17	; 0x11
    4146:	48 2f       	mov	r20, r24
    4148:	50 e0       	ldi	r21, 0x00	; 0
    414a:	88 89       	ldd	r24, Y+16	; 0x10
    414c:	28 2f       	mov	r18, r24
    414e:	30 e0       	ldi	r19, 0x00	; 0
    4150:	ca 01       	movw	r24, r20
    4152:	88 0f       	add	r24, r24
    4154:	99 1f       	adc	r25, r25
    4156:	88 0f       	add	r24, r24
    4158:	99 1f       	adc	r25, r25
    415a:	82 0f       	add	r24, r18
    415c:	93 1f       	adc	r25, r19
    415e:	fc 01       	movw	r30, r24
    4160:	ef 5e       	subi	r30, 0xEF	; 239
    4162:	fd 4f       	sbci	r31, 0xFD	; 253
    4164:	80 81       	ld	r24, Z
    4166:	eb 89       	ldd	r30, Y+19	; 0x13
    4168:	fc 89       	ldd	r31, Y+20	; 0x14
    416a:	80 83       	st	Z, r24
					Local_u8Flag = HIGH;
    416c:	81 e0       	ldi	r24, 0x01	; 1
    416e:	8f 87       	std	Y+15, r24	; 0x0f
    4170:	07 c0       	rjmp	.+14     	; 0x4180 <KPD_ES_tGetKeyPressed+0x1d6>
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
    4172:	88 89       	ldd	r24, Y+16	; 0x10
    4174:	8f 5f       	subi	r24, 0xFF	; 255
    4176:	88 8b       	std	Y+16, r24	; 0x10
    4178:	88 89       	ldd	r24, Y+16	; 0x10
    417a:	84 30       	cpi	r24, 0x04	; 4
    417c:	08 f4       	brcc	.+2      	; 0x4180 <KPD_ES_tGetKeyPressed+0x1d6>
    417e:	3b cf       	rjmp	.-394    	; 0x3ff6 <KPD_ES_tGetKeyPressed+0x4c>
					Local_u8Flag = HIGH;
					break;
				}
			}
			// Deactivate ROW
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],HIGH);
    4180:	89 89       	ldd	r24, Y+17	; 0x11
    4182:	88 2f       	mov	r24, r24
    4184:	90 e0       	ldi	r25, 0x00	; 0
    4186:	fc 01       	movw	r30, r24
    4188:	ef 5d       	subi	r30, 0xDF	; 223
    418a:	fd 4f       	sbci	r31, 0xFD	; 253
    418c:	90 81       	ld	r25, Z
    418e:	81 e0       	ldi	r24, 0x01	; 1
    4190:	69 2f       	mov	r22, r25
    4192:	41 e0       	ldi	r20, 0x01	; 1
    4194:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
			if(Local_u8Flag == HIGH)
    4198:	8f 85       	ldd	r24, Y+15	; 0x0f
    419a:	81 30       	cpi	r24, 0x01	; 1
    419c:	39 f0       	breq	.+14     	; 0x41ac <KPD_ES_tGetKeyPressed+0x202>
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
	if(copy_pu8ReturnedKey != NULL)
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
    419e:	89 89       	ldd	r24, Y+17	; 0x11
    41a0:	8f 5f       	subi	r24, 0xFF	; 255
    41a2:	89 8b       	std	Y+17, r24	; 0x11
    41a4:	89 89       	ldd	r24, Y+17	; 0x11
    41a6:	84 30       	cpi	r24, 0x04	; 4
    41a8:	08 f4       	brcc	.+2      	; 0x41ac <KPD_ES_tGetKeyPressed+0x202>
    41aa:	17 cf       	rjmp	.-466    	; 0x3fda <KPD_ES_tGetKeyPressed+0x30>


	}else{
		return ES_NOT_OK;
	}
	return ES_OK;
    41ac:	1d 8a       	std	Y+21, r1	; 0x15
    41ae:	02 c0       	rjmp	.+4      	; 0x41b4 <KPD_ES_tGetKeyPressed+0x20a>
				break;
		}


	}else{
		return ES_NOT_OK;
    41b0:	81 e0       	ldi	r24, 0x01	; 1
    41b2:	8d 8b       	std	Y+21, r24	; 0x15
    41b4:	8d 89       	ldd	r24, Y+21	; 0x15
	}
	return ES_OK;
}
    41b6:	65 96       	adiw	r28, 0x15	; 21
    41b8:	0f b6       	in	r0, 0x3f	; 63
    41ba:	f8 94       	cli
    41bc:	de bf       	out	0x3e, r29	; 62
    41be:	0f be       	out	0x3f, r0	; 63
    41c0:	cd bf       	out	0x3d, r28	; 61
    41c2:	cf 91       	pop	r28
    41c4:	df 91       	pop	r29
    41c6:	08 95       	ret

000041c8 <DC_Motor_Init>:
#include "DC_MotorCfg.h"



ES_t DC_Motor_Init(DC_MOTOR_Index Motor)
{
    41c8:	df 93       	push	r29
    41ca:	cf 93       	push	r28
    41cc:	cd b7       	in	r28, 0x3d	; 61
    41ce:	de b7       	in	r29, 0x3e	; 62
    41d0:	2c 97       	sbiw	r28, 0x0c	; 12
    41d2:	0f b6       	in	r0, 0x3f	; 63
    41d4:	f8 94       	cli
    41d6:	de bf       	out	0x3e, r29	; 62
    41d8:	0f be       	out	0x3f, r0	; 63
    41da:	cd bf       	out	0x3d, r28	; 61
    41dc:	8e 83       	std	Y+6, r24	; 0x06
	if(Motor == DC_MOTOR_0){
    41de:	8e 81       	ldd	r24, Y+6	; 0x06
    41e0:	88 23       	and	r24, r24
    41e2:	59 f4       	brne	.+22     	; 0x41fa <DC_Motor_Init+0x32>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN1, OUTPUT);
    41e4:	82 e0       	ldi	r24, 0x02	; 2
    41e6:	61 e0       	ldi	r22, 0x01	; 1
    41e8:	41 e0       	ldi	r20, 0x01	; 1
    41ea:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN2, OUTPUT);
    41ee:	82 e0       	ldi	r24, 0x02	; 2
    41f0:	62 e0       	ldi	r22, 0x02	; 2
    41f2:	41 e0       	ldi	r20, 0x01	; 1
    41f4:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_ES_tSetPinDirection>
    41f8:	11 c0       	rjmp	.+34     	; 0x421c <DC_Motor_Init+0x54>
	}else if(Motor == DC_MOTOR_1){
    41fa:	8e 81       	ldd	r24, Y+6	; 0x06
    41fc:	81 30       	cpi	r24, 0x01	; 1
    41fe:	59 f4       	brne	.+22     	; 0x4216 <DC_Motor_Init+0x4e>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN3, OUTPUT);
    4200:	82 e0       	ldi	r24, 0x02	; 2
    4202:	63 e0       	ldi	r22, 0x03	; 3
    4204:	41 e0       	ldi	r20, 0x01	; 1
    4206:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN4, OUTPUT);
    420a:	82 e0       	ldi	r24, 0x02	; 2
    420c:	64 e0       	ldi	r22, 0x04	; 4
    420e:	41 e0       	ldi	r20, 0x01	; 1
    4210:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_ES_tSetPinDirection>
    4214:	03 c0       	rjmp	.+6      	; 0x421c <DC_Motor_Init+0x54>
	}else{
		return ES_NOT_OK;
    4216:	81 e0       	ldi	r24, 0x01	; 1
    4218:	8f 83       	std	Y+7, r24	; 0x07
    421a:	2a c0       	rjmp	.+84     	; 0x4270 <DC_Motor_Init+0xa8>
	}


	DIO_ES_tSetPinDirection(DIO_U8_PORT_B, DIO_U8_PIN_3, OUTPUT);
    421c:	81 e0       	ldi	r24, 0x01	; 1
    421e:	63 e0       	ldi	r22, 0x03	; 3
    4220:	41 e0       	ldi	r20, 0x01	; 1
    4222:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_ES_tSetPinDirection>
	TIMER0_Config_t Timer0Cfg = {TIMER0_PHASE_CORRECT_MODE, TIMER0_PRESCALAR_8, OC0_NON_INVERTING, TOIE0_DISABLE, OCIE0_DISABLE};
    4226:	fe 01       	movw	r30, r28
    4228:	31 96       	adiw	r30, 0x01	; 1
    422a:	f9 87       	std	Y+9, r31	; 0x09
    422c:	e8 87       	std	Y+8, r30	; 0x08
    422e:	89 e2       	ldi	r24, 0x29	; 41
    4230:	92 e0       	ldi	r25, 0x02	; 2
    4232:	9b 87       	std	Y+11, r25	; 0x0b
    4234:	8a 87       	std	Y+10, r24	; 0x0a
    4236:	95 e0       	ldi	r25, 0x05	; 5
    4238:	9c 87       	std	Y+12, r25	; 0x0c
    423a:	ea 85       	ldd	r30, Y+10	; 0x0a
    423c:	fb 85       	ldd	r31, Y+11	; 0x0b
    423e:	00 80       	ld	r0, Z
    4240:	8a 85       	ldd	r24, Y+10	; 0x0a
    4242:	9b 85       	ldd	r25, Y+11	; 0x0b
    4244:	01 96       	adiw	r24, 0x01	; 1
    4246:	9b 87       	std	Y+11, r25	; 0x0b
    4248:	8a 87       	std	Y+10, r24	; 0x0a
    424a:	e8 85       	ldd	r30, Y+8	; 0x08
    424c:	f9 85       	ldd	r31, Y+9	; 0x09
    424e:	00 82       	st	Z, r0
    4250:	88 85       	ldd	r24, Y+8	; 0x08
    4252:	99 85       	ldd	r25, Y+9	; 0x09
    4254:	01 96       	adiw	r24, 0x01	; 1
    4256:	99 87       	std	Y+9, r25	; 0x09
    4258:	88 87       	std	Y+8, r24	; 0x08
    425a:	9c 85       	ldd	r25, Y+12	; 0x0c
    425c:	91 50       	subi	r25, 0x01	; 1
    425e:	9c 87       	std	Y+12, r25	; 0x0c
    4260:	ec 85       	ldd	r30, Y+12	; 0x0c
    4262:	ee 23       	and	r30, r30
    4264:	51 f7       	brne	.-44     	; 0x423a <DC_Motor_Init+0x72>
	TIMER0_Init(&Timer0Cfg);
    4266:	ce 01       	movw	r24, r28
    4268:	01 96       	adiw	r24, 0x01	; 1
    426a:	0e 94 a5 09 	call	0x134a	; 0x134a <TIMER0_Init>




	return ES_OK;
    426e:	1f 82       	std	Y+7, r1	; 0x07
    4270:	8f 81       	ldd	r24, Y+7	; 0x07
}
    4272:	2c 96       	adiw	r28, 0x0c	; 12
    4274:	0f b6       	in	r0, 0x3f	; 63
    4276:	f8 94       	cli
    4278:	de bf       	out	0x3e, r29	; 62
    427a:	0f be       	out	0x3f, r0	; 63
    427c:	cd bf       	out	0x3d, r28	; 61
    427e:	cf 91       	pop	r28
    4280:	df 91       	pop	r29
    4282:	08 95       	ret

00004284 <DC_Motor_Stop>:


ES_t DC_Motor_Stop(DC_MOTOR_Index Motor)
{
    4284:	df 93       	push	r29
    4286:	cf 93       	push	r28
    4288:	00 d0       	rcall	.+0      	; 0x428a <DC_Motor_Stop+0x6>
    428a:	cd b7       	in	r28, 0x3d	; 61
    428c:	de b7       	in	r29, 0x3e	; 62
    428e:	89 83       	std	Y+1, r24	; 0x01
	if(Motor == DC_MOTOR_0){
    4290:	89 81       	ldd	r24, Y+1	; 0x01
    4292:	88 23       	and	r24, r24
    4294:	59 f4       	brne	.+22     	; 0x42ac <DC_Motor_Stop+0x28>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN1, LOW);
    4296:	82 e0       	ldi	r24, 0x02	; 2
    4298:	61 e0       	ldi	r22, 0x01	; 1
    429a:	40 e0       	ldi	r20, 0x00	; 0
    429c:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN2, LOW);
    42a0:	82 e0       	ldi	r24, 0x02	; 2
    42a2:	62 e0       	ldi	r22, 0x02	; 2
    42a4:	40 e0       	ldi	r20, 0x00	; 0
    42a6:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
    42aa:	11 c0       	rjmp	.+34     	; 0x42ce <DC_Motor_Stop+0x4a>
	}else if(Motor == DC_MOTOR_1){
    42ac:	89 81       	ldd	r24, Y+1	; 0x01
    42ae:	81 30       	cpi	r24, 0x01	; 1
    42b0:	59 f4       	brne	.+22     	; 0x42c8 <DC_Motor_Stop+0x44>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN3, LOW);
    42b2:	82 e0       	ldi	r24, 0x02	; 2
    42b4:	63 e0       	ldi	r22, 0x03	; 3
    42b6:	40 e0       	ldi	r20, 0x00	; 0
    42b8:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN4, LOW);
    42bc:	82 e0       	ldi	r24, 0x02	; 2
    42be:	64 e0       	ldi	r22, 0x04	; 4
    42c0:	40 e0       	ldi	r20, 0x00	; 0
    42c2:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
    42c6:	03 c0       	rjmp	.+6      	; 0x42ce <DC_Motor_Stop+0x4a>
	}else{
		return ES_NOT_OK;
    42c8:	81 e0       	ldi	r24, 0x01	; 1
    42ca:	8a 83       	std	Y+2, r24	; 0x02
    42cc:	01 c0       	rjmp	.+2      	; 0x42d0 <DC_Motor_Stop+0x4c>
	}
	return ES_OK;
    42ce:	1a 82       	std	Y+2, r1	; 0x02
    42d0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    42d2:	0f 90       	pop	r0
    42d4:	0f 90       	pop	r0
    42d6:	cf 91       	pop	r28
    42d8:	df 91       	pop	r29
    42da:	08 95       	ret

000042dc <DC_Motor_Move>:


ES_t DC_Motor_Move(DC_MOTOR_Index Motor,DC_MOTOR_Dir MotorDir,u8 SpeedOF100)
{
    42dc:	df 93       	push	r29
    42de:	cf 93       	push	r28
    42e0:	00 d0       	rcall	.+0      	; 0x42e2 <DC_Motor_Move+0x6>
    42e2:	00 d0       	rcall	.+0      	; 0x42e4 <DC_Motor_Move+0x8>
    42e4:	00 d0       	rcall	.+0      	; 0x42e6 <DC_Motor_Move+0xa>
    42e6:	cd b7       	in	r28, 0x3d	; 61
    42e8:	de b7       	in	r29, 0x3e	; 62
    42ea:	89 83       	std	Y+1, r24	; 0x01
    42ec:	6a 83       	std	Y+2, r22	; 0x02
    42ee:	4b 83       	std	Y+3, r20	; 0x03

	switch(MotorDir){
    42f0:	8a 81       	ldd	r24, Y+2	; 0x02
    42f2:	28 2f       	mov	r18, r24
    42f4:	30 e0       	ldi	r19, 0x00	; 0
    42f6:	3e 83       	std	Y+6, r19	; 0x06
    42f8:	2d 83       	std	Y+5, r18	; 0x05
    42fa:	8d 81       	ldd	r24, Y+5	; 0x05
    42fc:	9e 81       	ldd	r25, Y+6	; 0x06
    42fe:	00 97       	sbiw	r24, 0x00	; 0
    4300:	31 f0       	breq	.+12     	; 0x430e <DC_Motor_Move+0x32>
    4302:	2d 81       	ldd	r18, Y+5	; 0x05
    4304:	3e 81       	ldd	r19, Y+6	; 0x06
    4306:	21 30       	cpi	r18, 0x01	; 1
    4308:	31 05       	cpc	r19, r1
    430a:	e9 f0       	breq	.+58     	; 0x4346 <DC_Motor_Move+0x6a>
    430c:	38 c0       	rjmp	.+112    	; 0x437e <DC_Motor_Move+0xa2>
	case DC_MOTOR_CW:
		if(Motor == DC_MOTOR_0){
    430e:	89 81       	ldd	r24, Y+1	; 0x01
    4310:	88 23       	and	r24, r24
    4312:	59 f4       	brne	.+22     	; 0x432a <DC_Motor_Move+0x4e>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN1, HIGH);
    4314:	82 e0       	ldi	r24, 0x02	; 2
    4316:	61 e0       	ldi	r22, 0x01	; 1
    4318:	41 e0       	ldi	r20, 0x01	; 1
    431a:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN2, LOW);
    431e:	82 e0       	ldi	r24, 0x02	; 2
    4320:	62 e0       	ldi	r22, 0x02	; 2
    4322:	40 e0       	ldi	r20, 0x00	; 0
    4324:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
    4328:	2d c0       	rjmp	.+90     	; 0x4384 <DC_Motor_Move+0xa8>
		}else if(Motor == DC_MOTOR_1){
    432a:	89 81       	ldd	r24, Y+1	; 0x01
    432c:	81 30       	cpi	r24, 0x01	; 1
    432e:	51 f5       	brne	.+84     	; 0x4384 <DC_Motor_Move+0xa8>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN3, HIGH);
    4330:	82 e0       	ldi	r24, 0x02	; 2
    4332:	63 e0       	ldi	r22, 0x03	; 3
    4334:	41 e0       	ldi	r20, 0x01	; 1
    4336:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN4, LOW);
    433a:	82 e0       	ldi	r24, 0x02	; 2
    433c:	64 e0       	ldi	r22, 0x04	; 4
    433e:	40 e0       	ldi	r20, 0x00	; 0
    4340:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
    4344:	1f c0       	rjmp	.+62     	; 0x4384 <DC_Motor_Move+0xa8>
		}
		break;
	case DC_MOTOR_CCW:
		if(Motor == DC_MOTOR_0){
    4346:	89 81       	ldd	r24, Y+1	; 0x01
    4348:	88 23       	and	r24, r24
    434a:	59 f4       	brne	.+22     	; 0x4362 <DC_Motor_Move+0x86>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN1, LOW);
    434c:	82 e0       	ldi	r24, 0x02	; 2
    434e:	61 e0       	ldi	r22, 0x01	; 1
    4350:	40 e0       	ldi	r20, 0x00	; 0
    4352:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN2, HIGH);
    4356:	82 e0       	ldi	r24, 0x02	; 2
    4358:	62 e0       	ldi	r22, 0x02	; 2
    435a:	41 e0       	ldi	r20, 0x01	; 1
    435c:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
    4360:	11 c0       	rjmp	.+34     	; 0x4384 <DC_Motor_Move+0xa8>
		}else if(Motor == DC_MOTOR_1){
    4362:	89 81       	ldd	r24, Y+1	; 0x01
    4364:	81 30       	cpi	r24, 0x01	; 1
    4366:	71 f4       	brne	.+28     	; 0x4384 <DC_Motor_Move+0xa8>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN3, LOW);
    4368:	82 e0       	ldi	r24, 0x02	; 2
    436a:	63 e0       	ldi	r22, 0x03	; 3
    436c:	40 e0       	ldi	r20, 0x00	; 0
    436e:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN4, HIGH);
    4372:	82 e0       	ldi	r24, 0x02	; 2
    4374:	64 e0       	ldi	r22, 0x04	; 4
    4376:	41 e0       	ldi	r20, 0x01	; 1
    4378:	0e 94 c1 12 	call	0x2582	; 0x2582 <DIO_ES_tSetPinValue>
    437c:	03 c0       	rjmp	.+6      	; 0x4384 <DC_Motor_Move+0xa8>
		}
		break;
	default:
		return ES_NOT_OK;
    437e:	31 e0       	ldi	r19, 0x01	; 1
    4380:	3c 83       	std	Y+4, r19	; 0x04
    4382:	10 c0       	rjmp	.+32     	; 0x43a4 <DC_Motor_Move+0xc8>
	}


	PWM_Set_DutyCycle(SpeedOF100);
    4384:	8b 81       	ldd	r24, Y+3	; 0x03
    4386:	88 2f       	mov	r24, r24
    4388:	90 e0       	ldi	r25, 0x00	; 0
    438a:	a0 e0       	ldi	r26, 0x00	; 0
    438c:	b0 e0       	ldi	r27, 0x00	; 0
    438e:	bc 01       	movw	r22, r24
    4390:	cd 01       	movw	r24, r26
    4392:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    4396:	dc 01       	movw	r26, r24
    4398:	cb 01       	movw	r24, r22
    439a:	bc 01       	movw	r22, r24
    439c:	cd 01       	movw	r24, r26
    439e:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <PWM_Set_DutyCycle>




	return ES_OK;
    43a2:	1c 82       	std	Y+4, r1	; 0x04
    43a4:	8c 81       	ldd	r24, Y+4	; 0x04
}
    43a6:	26 96       	adiw	r28, 0x06	; 6
    43a8:	0f b6       	in	r0, 0x3f	; 63
    43aa:	f8 94       	cli
    43ac:	de bf       	out	0x3e, r29	; 62
    43ae:	0f be       	out	0x3f, r0	; 63
    43b0:	cd bf       	out	0x3d, r28	; 61
    43b2:	cf 91       	pop	r28
    43b4:	df 91       	pop	r29
    43b6:	08 95       	ret

000043b8 <main>:




int main()
{
    43b8:	df 93       	push	r29
    43ba:	cf 93       	push	r28
    43bc:	cd b7       	in	r28, 0x3d	; 61
    43be:	de b7       	in	r29, 0x3e	; 62
    43c0:	6c 97       	sbiw	r28, 0x1c	; 28
    43c2:	0f b6       	in	r0, 0x3f	; 63
    43c4:	f8 94       	cli
    43c6:	de bf       	out	0x3e, r29	; 62
    43c8:	0f be       	out	0x3f, r0	; 63
    43ca:	cd bf       	out	0x3d, r28	; 61
////	OCR1A = 249;
//	OCR1B = 499;
//	_delay_ms(2000);
////	OCR1A = 374;

	Servo_Init();
    43cc:	0e 94 34 18 	call	0x3068	; 0x3068 <Servo_Init>



	Servo_Turn(90);
    43d0:	8a e5       	ldi	r24, 0x5A	; 90
    43d2:	90 e0       	ldi	r25, 0x00	; 0
    43d4:	0e 94 5d 18 	call	0x30ba	; 0x30ba <Servo_Turn>
    43d8:	80 e0       	ldi	r24, 0x00	; 0
    43da:	90 e0       	ldi	r25, 0x00	; 0
    43dc:	aa ef       	ldi	r26, 0xFA	; 250
    43de:	b4 e4       	ldi	r27, 0x44	; 68
    43e0:	89 8f       	std	Y+25, r24	; 0x19
    43e2:	9a 8f       	std	Y+26, r25	; 0x1a
    43e4:	ab 8f       	std	Y+27, r26	; 0x1b
    43e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43e8:	69 8d       	ldd	r22, Y+25	; 0x19
    43ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    43ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    43ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    43f0:	20 e0       	ldi	r18, 0x00	; 0
    43f2:	30 e0       	ldi	r19, 0x00	; 0
    43f4:	4a e7       	ldi	r20, 0x7A	; 122
    43f6:	55 e4       	ldi	r21, 0x45	; 69
    43f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43fc:	dc 01       	movw	r26, r24
    43fe:	cb 01       	movw	r24, r22
    4400:	8d 8b       	std	Y+21, r24	; 0x15
    4402:	9e 8b       	std	Y+22, r25	; 0x16
    4404:	af 8b       	std	Y+23, r26	; 0x17
    4406:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4408:	6d 89       	ldd	r22, Y+21	; 0x15
    440a:	7e 89       	ldd	r23, Y+22	; 0x16
    440c:	8f 89       	ldd	r24, Y+23	; 0x17
    440e:	98 8d       	ldd	r25, Y+24	; 0x18
    4410:	20 e0       	ldi	r18, 0x00	; 0
    4412:	30 e0       	ldi	r19, 0x00	; 0
    4414:	40 e8       	ldi	r20, 0x80	; 128
    4416:	5f e3       	ldi	r21, 0x3F	; 63
    4418:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    441c:	88 23       	and	r24, r24
    441e:	2c f4       	brge	.+10     	; 0x442a <main+0x72>
		__ticks = 1;
    4420:	81 e0       	ldi	r24, 0x01	; 1
    4422:	90 e0       	ldi	r25, 0x00	; 0
    4424:	9c 8b       	std	Y+20, r25	; 0x14
    4426:	8b 8b       	std	Y+19, r24	; 0x13
    4428:	3f c0       	rjmp	.+126    	; 0x44a8 <main+0xf0>
	else if (__tmp > 65535)
    442a:	6d 89       	ldd	r22, Y+21	; 0x15
    442c:	7e 89       	ldd	r23, Y+22	; 0x16
    442e:	8f 89       	ldd	r24, Y+23	; 0x17
    4430:	98 8d       	ldd	r25, Y+24	; 0x18
    4432:	20 e0       	ldi	r18, 0x00	; 0
    4434:	3f ef       	ldi	r19, 0xFF	; 255
    4436:	4f e7       	ldi	r20, 0x7F	; 127
    4438:	57 e4       	ldi	r21, 0x47	; 71
    443a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    443e:	18 16       	cp	r1, r24
    4440:	4c f5       	brge	.+82     	; 0x4494 <main+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4442:	69 8d       	ldd	r22, Y+25	; 0x19
    4444:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4446:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4448:	9c 8d       	ldd	r25, Y+28	; 0x1c
    444a:	20 e0       	ldi	r18, 0x00	; 0
    444c:	30 e0       	ldi	r19, 0x00	; 0
    444e:	40 e2       	ldi	r20, 0x20	; 32
    4450:	51 e4       	ldi	r21, 0x41	; 65
    4452:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4456:	dc 01       	movw	r26, r24
    4458:	cb 01       	movw	r24, r22
    445a:	bc 01       	movw	r22, r24
    445c:	cd 01       	movw	r24, r26
    445e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4462:	dc 01       	movw	r26, r24
    4464:	cb 01       	movw	r24, r22
    4466:	9c 8b       	std	Y+20, r25	; 0x14
    4468:	8b 8b       	std	Y+19, r24	; 0x13
    446a:	0f c0       	rjmp	.+30     	; 0x448a <main+0xd2>
    446c:	80 e9       	ldi	r24, 0x90	; 144
    446e:	91 e0       	ldi	r25, 0x01	; 1
    4470:	9a 8b       	std	Y+18, r25	; 0x12
    4472:	89 8b       	std	Y+17, r24	; 0x11
    4474:	89 89       	ldd	r24, Y+17	; 0x11
    4476:	9a 89       	ldd	r25, Y+18	; 0x12
    4478:	01 97       	sbiw	r24, 0x01	; 1
    447a:	f1 f7       	brne	.-4      	; 0x4478 <main+0xc0>
    447c:	9a 8b       	std	Y+18, r25	; 0x12
    447e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4480:	8b 89       	ldd	r24, Y+19	; 0x13
    4482:	9c 89       	ldd	r25, Y+20	; 0x14
    4484:	01 97       	sbiw	r24, 0x01	; 1
    4486:	9c 8b       	std	Y+20, r25	; 0x14
    4488:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    448a:	8b 89       	ldd	r24, Y+19	; 0x13
    448c:	9c 89       	ldd	r25, Y+20	; 0x14
    448e:	00 97       	sbiw	r24, 0x00	; 0
    4490:	69 f7       	brne	.-38     	; 0x446c <main+0xb4>
    4492:	14 c0       	rjmp	.+40     	; 0x44bc <main+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4494:	6d 89       	ldd	r22, Y+21	; 0x15
    4496:	7e 89       	ldd	r23, Y+22	; 0x16
    4498:	8f 89       	ldd	r24, Y+23	; 0x17
    449a:	98 8d       	ldd	r25, Y+24	; 0x18
    449c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44a0:	dc 01       	movw	r26, r24
    44a2:	cb 01       	movw	r24, r22
    44a4:	9c 8b       	std	Y+20, r25	; 0x14
    44a6:	8b 8b       	std	Y+19, r24	; 0x13
    44a8:	8b 89       	ldd	r24, Y+19	; 0x13
    44aa:	9c 89       	ldd	r25, Y+20	; 0x14
    44ac:	98 8b       	std	Y+16, r25	; 0x10
    44ae:	8f 87       	std	Y+15, r24	; 0x0f
    44b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    44b2:	98 89       	ldd	r25, Y+16	; 0x10
    44b4:	01 97       	sbiw	r24, 0x01	; 1
    44b6:	f1 f7       	brne	.-4      	; 0x44b4 <main+0xfc>
    44b8:	98 8b       	std	Y+16, r25	; 0x10
    44ba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2000);
	Servo_Turn(0);
    44bc:	80 e0       	ldi	r24, 0x00	; 0
    44be:	90 e0       	ldi	r25, 0x00	; 0
    44c0:	0e 94 5d 18 	call	0x30ba	; 0x30ba <Servo_Turn>
    44c4:	80 e0       	ldi	r24, 0x00	; 0
    44c6:	90 e0       	ldi	r25, 0x00	; 0
    44c8:	aa ef       	ldi	r26, 0xFA	; 250
    44ca:	b4 e4       	ldi	r27, 0x44	; 68
    44cc:	8b 87       	std	Y+11, r24	; 0x0b
    44ce:	9c 87       	std	Y+12, r25	; 0x0c
    44d0:	ad 87       	std	Y+13, r26	; 0x0d
    44d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    44d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    44d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    44da:	9e 85       	ldd	r25, Y+14	; 0x0e
    44dc:	20 e0       	ldi	r18, 0x00	; 0
    44de:	30 e0       	ldi	r19, 0x00	; 0
    44e0:	4a e7       	ldi	r20, 0x7A	; 122
    44e2:	55 e4       	ldi	r21, 0x45	; 69
    44e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44e8:	dc 01       	movw	r26, r24
    44ea:	cb 01       	movw	r24, r22
    44ec:	8f 83       	std	Y+7, r24	; 0x07
    44ee:	98 87       	std	Y+8, r25	; 0x08
    44f0:	a9 87       	std	Y+9, r26	; 0x09
    44f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    44f4:	6f 81       	ldd	r22, Y+7	; 0x07
    44f6:	78 85       	ldd	r23, Y+8	; 0x08
    44f8:	89 85       	ldd	r24, Y+9	; 0x09
    44fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    44fc:	20 e0       	ldi	r18, 0x00	; 0
    44fe:	30 e0       	ldi	r19, 0x00	; 0
    4500:	40 e8       	ldi	r20, 0x80	; 128
    4502:	5f e3       	ldi	r21, 0x3F	; 63
    4504:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4508:	88 23       	and	r24, r24
    450a:	2c f4       	brge	.+10     	; 0x4516 <main+0x15e>
		__ticks = 1;
    450c:	81 e0       	ldi	r24, 0x01	; 1
    450e:	90 e0       	ldi	r25, 0x00	; 0
    4510:	9e 83       	std	Y+6, r25	; 0x06
    4512:	8d 83       	std	Y+5, r24	; 0x05
    4514:	3f c0       	rjmp	.+126    	; 0x4594 <main+0x1dc>
	else if (__tmp > 65535)
    4516:	6f 81       	ldd	r22, Y+7	; 0x07
    4518:	78 85       	ldd	r23, Y+8	; 0x08
    451a:	89 85       	ldd	r24, Y+9	; 0x09
    451c:	9a 85       	ldd	r25, Y+10	; 0x0a
    451e:	20 e0       	ldi	r18, 0x00	; 0
    4520:	3f ef       	ldi	r19, 0xFF	; 255
    4522:	4f e7       	ldi	r20, 0x7F	; 127
    4524:	57 e4       	ldi	r21, 0x47	; 71
    4526:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    452a:	18 16       	cp	r1, r24
    452c:	4c f5       	brge	.+82     	; 0x4580 <main+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    452e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4530:	7c 85       	ldd	r23, Y+12	; 0x0c
    4532:	8d 85       	ldd	r24, Y+13	; 0x0d
    4534:	9e 85       	ldd	r25, Y+14	; 0x0e
    4536:	20 e0       	ldi	r18, 0x00	; 0
    4538:	30 e0       	ldi	r19, 0x00	; 0
    453a:	40 e2       	ldi	r20, 0x20	; 32
    453c:	51 e4       	ldi	r21, 0x41	; 65
    453e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4542:	dc 01       	movw	r26, r24
    4544:	cb 01       	movw	r24, r22
    4546:	bc 01       	movw	r22, r24
    4548:	cd 01       	movw	r24, r26
    454a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    454e:	dc 01       	movw	r26, r24
    4550:	cb 01       	movw	r24, r22
    4552:	9e 83       	std	Y+6, r25	; 0x06
    4554:	8d 83       	std	Y+5, r24	; 0x05
    4556:	0f c0       	rjmp	.+30     	; 0x4576 <main+0x1be>
    4558:	80 e9       	ldi	r24, 0x90	; 144
    455a:	91 e0       	ldi	r25, 0x01	; 1
    455c:	9c 83       	std	Y+4, r25	; 0x04
    455e:	8b 83       	std	Y+3, r24	; 0x03
    4560:	8b 81       	ldd	r24, Y+3	; 0x03
    4562:	9c 81       	ldd	r25, Y+4	; 0x04
    4564:	01 97       	sbiw	r24, 0x01	; 1
    4566:	f1 f7       	brne	.-4      	; 0x4564 <main+0x1ac>
    4568:	9c 83       	std	Y+4, r25	; 0x04
    456a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    456c:	8d 81       	ldd	r24, Y+5	; 0x05
    456e:	9e 81       	ldd	r25, Y+6	; 0x06
    4570:	01 97       	sbiw	r24, 0x01	; 1
    4572:	9e 83       	std	Y+6, r25	; 0x06
    4574:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4576:	8d 81       	ldd	r24, Y+5	; 0x05
    4578:	9e 81       	ldd	r25, Y+6	; 0x06
    457a:	00 97       	sbiw	r24, 0x00	; 0
    457c:	69 f7       	brne	.-38     	; 0x4558 <main+0x1a0>
    457e:	14 c0       	rjmp	.+40     	; 0x45a8 <main+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4580:	6f 81       	ldd	r22, Y+7	; 0x07
    4582:	78 85       	ldd	r23, Y+8	; 0x08
    4584:	89 85       	ldd	r24, Y+9	; 0x09
    4586:	9a 85       	ldd	r25, Y+10	; 0x0a
    4588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    458c:	dc 01       	movw	r26, r24
    458e:	cb 01       	movw	r24, r22
    4590:	9e 83       	std	Y+6, r25	; 0x06
    4592:	8d 83       	std	Y+5, r24	; 0x05
    4594:	8d 81       	ldd	r24, Y+5	; 0x05
    4596:	9e 81       	ldd	r25, Y+6	; 0x06
    4598:	9a 83       	std	Y+2, r25	; 0x02
    459a:	89 83       	std	Y+1, r24	; 0x01
    459c:	89 81       	ldd	r24, Y+1	; 0x01
    459e:	9a 81       	ldd	r25, Y+2	; 0x02
    45a0:	01 97       	sbiw	r24, 0x01	; 1
    45a2:	f1 f7       	brne	.-4      	; 0x45a0 <main+0x1e8>
    45a4:	9a 83       	std	Y+2, r25	; 0x02
    45a6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	Servo_Turn(-90);
    45a8:	86 ea       	ldi	r24, 0xA6	; 166
    45aa:	9f ef       	ldi	r25, 0xFF	; 255
    45ac:	0e 94 5d 18 	call	0x30ba	; 0x30ba <Servo_Turn>
    45b0:	ff cf       	rjmp	.-2      	; 0x45b0 <main+0x1f8>

000045b2 <__mulsi3>:
    45b2:	62 9f       	mul	r22, r18
    45b4:	d0 01       	movw	r26, r0
    45b6:	73 9f       	mul	r23, r19
    45b8:	f0 01       	movw	r30, r0
    45ba:	82 9f       	mul	r24, r18
    45bc:	e0 0d       	add	r30, r0
    45be:	f1 1d       	adc	r31, r1
    45c0:	64 9f       	mul	r22, r20
    45c2:	e0 0d       	add	r30, r0
    45c4:	f1 1d       	adc	r31, r1
    45c6:	92 9f       	mul	r25, r18
    45c8:	f0 0d       	add	r31, r0
    45ca:	83 9f       	mul	r24, r19
    45cc:	f0 0d       	add	r31, r0
    45ce:	74 9f       	mul	r23, r20
    45d0:	f0 0d       	add	r31, r0
    45d2:	65 9f       	mul	r22, r21
    45d4:	f0 0d       	add	r31, r0
    45d6:	99 27       	eor	r25, r25
    45d8:	72 9f       	mul	r23, r18
    45da:	b0 0d       	add	r27, r0
    45dc:	e1 1d       	adc	r30, r1
    45de:	f9 1f       	adc	r31, r25
    45e0:	63 9f       	mul	r22, r19
    45e2:	b0 0d       	add	r27, r0
    45e4:	e1 1d       	adc	r30, r1
    45e6:	f9 1f       	adc	r31, r25
    45e8:	bd 01       	movw	r22, r26
    45ea:	cf 01       	movw	r24, r30
    45ec:	11 24       	eor	r1, r1
    45ee:	08 95       	ret

000045f0 <__udivmodhi4>:
    45f0:	aa 1b       	sub	r26, r26
    45f2:	bb 1b       	sub	r27, r27
    45f4:	51 e1       	ldi	r21, 0x11	; 17
    45f6:	07 c0       	rjmp	.+14     	; 0x4606 <__udivmodhi4_ep>

000045f8 <__udivmodhi4_loop>:
    45f8:	aa 1f       	adc	r26, r26
    45fa:	bb 1f       	adc	r27, r27
    45fc:	a6 17       	cp	r26, r22
    45fe:	b7 07       	cpc	r27, r23
    4600:	10 f0       	brcs	.+4      	; 0x4606 <__udivmodhi4_ep>
    4602:	a6 1b       	sub	r26, r22
    4604:	b7 0b       	sbc	r27, r23

00004606 <__udivmodhi4_ep>:
    4606:	88 1f       	adc	r24, r24
    4608:	99 1f       	adc	r25, r25
    460a:	5a 95       	dec	r21
    460c:	a9 f7       	brne	.-22     	; 0x45f8 <__udivmodhi4_loop>
    460e:	80 95       	com	r24
    4610:	90 95       	com	r25
    4612:	bc 01       	movw	r22, r24
    4614:	cd 01       	movw	r24, r26
    4616:	08 95       	ret

00004618 <__divmodhi4>:
    4618:	97 fb       	bst	r25, 7
    461a:	09 2e       	mov	r0, r25
    461c:	07 26       	eor	r0, r23
    461e:	0a d0       	rcall	.+20     	; 0x4634 <__divmodhi4_neg1>
    4620:	77 fd       	sbrc	r23, 7
    4622:	04 d0       	rcall	.+8      	; 0x462c <__divmodhi4_neg2>
    4624:	e5 df       	rcall	.-54     	; 0x45f0 <__udivmodhi4>
    4626:	06 d0       	rcall	.+12     	; 0x4634 <__divmodhi4_neg1>
    4628:	00 20       	and	r0, r0
    462a:	1a f4       	brpl	.+6      	; 0x4632 <__divmodhi4_exit>

0000462c <__divmodhi4_neg2>:
    462c:	70 95       	com	r23
    462e:	61 95       	neg	r22
    4630:	7f 4f       	sbci	r23, 0xFF	; 255

00004632 <__divmodhi4_exit>:
    4632:	08 95       	ret

00004634 <__divmodhi4_neg1>:
    4634:	f6 f7       	brtc	.-4      	; 0x4632 <__divmodhi4_exit>
    4636:	90 95       	com	r25
    4638:	81 95       	neg	r24
    463a:	9f 4f       	sbci	r25, 0xFF	; 255
    463c:	08 95       	ret

0000463e <__udivmodsi4>:
    463e:	a1 e2       	ldi	r26, 0x21	; 33
    4640:	1a 2e       	mov	r1, r26
    4642:	aa 1b       	sub	r26, r26
    4644:	bb 1b       	sub	r27, r27
    4646:	fd 01       	movw	r30, r26
    4648:	0d c0       	rjmp	.+26     	; 0x4664 <__udivmodsi4_ep>

0000464a <__udivmodsi4_loop>:
    464a:	aa 1f       	adc	r26, r26
    464c:	bb 1f       	adc	r27, r27
    464e:	ee 1f       	adc	r30, r30
    4650:	ff 1f       	adc	r31, r31
    4652:	a2 17       	cp	r26, r18
    4654:	b3 07       	cpc	r27, r19
    4656:	e4 07       	cpc	r30, r20
    4658:	f5 07       	cpc	r31, r21
    465a:	20 f0       	brcs	.+8      	; 0x4664 <__udivmodsi4_ep>
    465c:	a2 1b       	sub	r26, r18
    465e:	b3 0b       	sbc	r27, r19
    4660:	e4 0b       	sbc	r30, r20
    4662:	f5 0b       	sbc	r31, r21

00004664 <__udivmodsi4_ep>:
    4664:	66 1f       	adc	r22, r22
    4666:	77 1f       	adc	r23, r23
    4668:	88 1f       	adc	r24, r24
    466a:	99 1f       	adc	r25, r25
    466c:	1a 94       	dec	r1
    466e:	69 f7       	brne	.-38     	; 0x464a <__udivmodsi4_loop>
    4670:	60 95       	com	r22
    4672:	70 95       	com	r23
    4674:	80 95       	com	r24
    4676:	90 95       	com	r25
    4678:	9b 01       	movw	r18, r22
    467a:	ac 01       	movw	r20, r24
    467c:	bd 01       	movw	r22, r26
    467e:	cf 01       	movw	r24, r30
    4680:	08 95       	ret

00004682 <__prologue_saves__>:
    4682:	2f 92       	push	r2
    4684:	3f 92       	push	r3
    4686:	4f 92       	push	r4
    4688:	5f 92       	push	r5
    468a:	6f 92       	push	r6
    468c:	7f 92       	push	r7
    468e:	8f 92       	push	r8
    4690:	9f 92       	push	r9
    4692:	af 92       	push	r10
    4694:	bf 92       	push	r11
    4696:	cf 92       	push	r12
    4698:	df 92       	push	r13
    469a:	ef 92       	push	r14
    469c:	ff 92       	push	r15
    469e:	0f 93       	push	r16
    46a0:	1f 93       	push	r17
    46a2:	cf 93       	push	r28
    46a4:	df 93       	push	r29
    46a6:	cd b7       	in	r28, 0x3d	; 61
    46a8:	de b7       	in	r29, 0x3e	; 62
    46aa:	ca 1b       	sub	r28, r26
    46ac:	db 0b       	sbc	r29, r27
    46ae:	0f b6       	in	r0, 0x3f	; 63
    46b0:	f8 94       	cli
    46b2:	de bf       	out	0x3e, r29	; 62
    46b4:	0f be       	out	0x3f, r0	; 63
    46b6:	cd bf       	out	0x3d, r28	; 61
    46b8:	09 94       	ijmp

000046ba <__epilogue_restores__>:
    46ba:	2a 88       	ldd	r2, Y+18	; 0x12
    46bc:	39 88       	ldd	r3, Y+17	; 0x11
    46be:	48 88       	ldd	r4, Y+16	; 0x10
    46c0:	5f 84       	ldd	r5, Y+15	; 0x0f
    46c2:	6e 84       	ldd	r6, Y+14	; 0x0e
    46c4:	7d 84       	ldd	r7, Y+13	; 0x0d
    46c6:	8c 84       	ldd	r8, Y+12	; 0x0c
    46c8:	9b 84       	ldd	r9, Y+11	; 0x0b
    46ca:	aa 84       	ldd	r10, Y+10	; 0x0a
    46cc:	b9 84       	ldd	r11, Y+9	; 0x09
    46ce:	c8 84       	ldd	r12, Y+8	; 0x08
    46d0:	df 80       	ldd	r13, Y+7	; 0x07
    46d2:	ee 80       	ldd	r14, Y+6	; 0x06
    46d4:	fd 80       	ldd	r15, Y+5	; 0x05
    46d6:	0c 81       	ldd	r16, Y+4	; 0x04
    46d8:	1b 81       	ldd	r17, Y+3	; 0x03
    46da:	aa 81       	ldd	r26, Y+2	; 0x02
    46dc:	b9 81       	ldd	r27, Y+1	; 0x01
    46de:	ce 0f       	add	r28, r30
    46e0:	d1 1d       	adc	r29, r1
    46e2:	0f b6       	in	r0, 0x3f	; 63
    46e4:	f8 94       	cli
    46e6:	de bf       	out	0x3e, r29	; 62
    46e8:	0f be       	out	0x3f, r0	; 63
    46ea:	cd bf       	out	0x3d, r28	; 61
    46ec:	ed 01       	movw	r28, r26
    46ee:	08 95       	ret

000046f0 <_exit>:
    46f0:	f8 94       	cli

000046f2 <__stop_program>:
    46f2:	ff cf       	rjmp	.-2      	; 0x46f2 <__stop_program>
