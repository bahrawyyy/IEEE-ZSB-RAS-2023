
Timer_RAS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000018a  00800060  00003d76  00003e0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  008001ea  008001ea  00003f94  2**0
                  ALLOC
  3 .stab         00000bf4  00000000  00000000  00003f94  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fc1  00000000  00000000  00004b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000358  00000000  00000000  00005b49  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000543  00000000  00000000  00005ea1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003a20  00000000  00000000  000063e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001a1b  00000000  00000000  00009e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002bb8  00000000  00000000  0000b81f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000450  00000000  00000000  0000e3d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000e83  00000000  00000000  0000e828  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000f6ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001d0  00000000  00000000  00010019  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2e 0d 	jmp	0x1a5c	; 0x1a5c <__vector_1>
       8:	0c 94 61 0d 	jmp	0x1ac2	; 0x1ac2 <__vector_2>
       c:	0c 94 94 0d 	jmp	0x1b28	; 0x1b28 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 4c 0b 	jmp	0x1698	; 0x1698 <__vector_10>
      2c:	0c 94 09 0b 	jmp	0x1612	; 0x1612 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e7       	ldi	r30, 0x76	; 118
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa ee       	ldi	r26, 0xEA	; 234
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 30       	cpi	r26, 0x0F	; 15
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <main>
      8a:	0c 94 b9 1e 	jmp	0x3d72	; 0x3d72 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 82 1e 	jmp	0x3d04	; 0x3d04 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9e 1e 	jmp	0x3d3c	; 0x3d3c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 aa 1e 	jmp	0x3d54	; 0x3d54 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 aa 1e 	jmp	0x3d54	; 0x3d54 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 82 1e 	jmp	0x3d04	; 0x3d04 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9e 1e 	jmp	0x3d3c	; 0x3d3c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8a 1e 	jmp	0x3d14	; 0x3d14 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a6 1e 	jmp	0x3d4c	; 0x3d4c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 aa 1e 	jmp	0x3d54	; 0x3d54 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 aa 1e 	jmp	0x3d54	; 0x3d54 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 aa 1e 	jmp	0x3d54	; 0x3d54 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 92 1e 	jmp	0x3d24	; 0x3d24 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 ae 1e 	jmp	0x3d5c	; 0x3d5c <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 8a 1e 	jmp	0x3d14	; 0x3d14 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 a6 1e 	jmp	0x3d4c	; 0x3d4c <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <TIMER0_Init>:
volatile u8 Global_Delay_Status=0;



ES_t TIMER0_Init(TIMER0_Config_t *TIME0_Cfg)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	2a 97       	sbiw	r28, 0x0a	; 10
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	9b 83       	std	Y+3, r25	; 0x03
     e44:	8a 83       	std	Y+2, r24	; 0x02
	ES_t RetValue = ES_NOT_OK;
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	89 83       	std	Y+1, r24	; 0x01
	if(TIME0_Cfg == NULLPTR){
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	9b 81       	ldd	r25, Y+3	; 0x03
     e4e:	00 97       	sbiw	r24, 0x00	; 0
     e50:	19 f4       	brne	.+6      	; 0xe58 <TIMER0_Init+0x2a>
		RetValue = ES_NOT_OK;
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	89 83       	std	Y+1, r24	; 0x01
     e56:	bb c0       	rjmp	.+374    	; 0xfce <TIMER0_Init+0x1a0>
	}else
	{
		// Copy the configuration in a global structure in case of
		// usage inside othe functions
		Global_Timer0_Cfg = *TIME0_Cfg;
     e58:	8a 81       	ldd	r24, Y+2	; 0x02
     e5a:	9b 81       	ldd	r25, Y+3	; 0x03
     e5c:	2a ef       	ldi	r18, 0xFA	; 250
     e5e:	31 e0       	ldi	r19, 0x01	; 1
     e60:	3f 83       	std	Y+7, r19	; 0x07
     e62:	2e 83       	std	Y+6, r18	; 0x06
     e64:	99 87       	std	Y+9, r25	; 0x09
     e66:	88 87       	std	Y+8, r24	; 0x08
     e68:	35 e0       	ldi	r19, 0x05	; 5
     e6a:	3a 87       	std	Y+10, r19	; 0x0a
     e6c:	e8 85       	ldd	r30, Y+8	; 0x08
     e6e:	f9 85       	ldd	r31, Y+9	; 0x09
     e70:	00 80       	ld	r0, Z
     e72:	28 85       	ldd	r18, Y+8	; 0x08
     e74:	39 85       	ldd	r19, Y+9	; 0x09
     e76:	2f 5f       	subi	r18, 0xFF	; 255
     e78:	3f 4f       	sbci	r19, 0xFF	; 255
     e7a:	39 87       	std	Y+9, r19	; 0x09
     e7c:	28 87       	std	Y+8, r18	; 0x08
     e7e:	ee 81       	ldd	r30, Y+6	; 0x06
     e80:	ff 81       	ldd	r31, Y+7	; 0x07
     e82:	00 82       	st	Z, r0
     e84:	2e 81       	ldd	r18, Y+6	; 0x06
     e86:	3f 81       	ldd	r19, Y+7	; 0x07
     e88:	2f 5f       	subi	r18, 0xFF	; 255
     e8a:	3f 4f       	sbci	r19, 0xFF	; 255
     e8c:	3f 83       	std	Y+7, r19	; 0x07
     e8e:	2e 83       	std	Y+6, r18	; 0x06
     e90:	3a 85       	ldd	r19, Y+10	; 0x0a
     e92:	31 50       	subi	r19, 0x01	; 1
     e94:	3a 87       	std	Y+10, r19	; 0x0a
     e96:	8a 85       	ldd	r24, Y+10	; 0x0a
     e98:	88 23       	and	r24, r24
     e9a:	41 f7       	brne	.-48     	; 0xe6c <TIMER0_Init+0x3e>


		// Timer0 mode Configurations
		if((TIME0_Cfg->mode >= TIMER0_NORMAL_MODE) && (TIME0_Cfg->mode <= TIMER0_FAST_PWM_MODE))
     e9c:	ea 81       	ldd	r30, Y+2	; 0x02
     e9e:	fb 81       	ldd	r31, Y+3	; 0x03
     ea0:	80 81       	ld	r24, Z
     ea2:	84 30       	cpi	r24, 0x04	; 4
     ea4:	08 f0       	brcs	.+2      	; 0xea8 <TIMER0_Init+0x7a>
     ea6:	5e c0       	rjmp	.+188    	; 0xf64 <TIMER0_Init+0x136>
		{
			RetValue = ES_OK;
     ea8:	19 82       	std	Y+1, r1	; 0x01
			switch(TIME0_Cfg->mode)
     eaa:	ea 81       	ldd	r30, Y+2	; 0x02
     eac:	fb 81       	ldd	r31, Y+3	; 0x03
     eae:	80 81       	ld	r24, Z
     eb0:	e8 2f       	mov	r30, r24
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	fd 83       	std	Y+5, r31	; 0x05
     eb6:	ec 83       	std	Y+4, r30	; 0x04
     eb8:	2c 81       	ldd	r18, Y+4	; 0x04
     eba:	3d 81       	ldd	r19, Y+5	; 0x05
     ebc:	21 30       	cpi	r18, 0x01	; 1
     ebe:	31 05       	cpc	r19, r1
     ec0:	21 f1       	breq	.+72     	; 0xf0a <TIMER0_Init+0xdc>
     ec2:	8c 81       	ldd	r24, Y+4	; 0x04
     ec4:	9d 81       	ldd	r25, Y+5	; 0x05
     ec6:	82 30       	cpi	r24, 0x02	; 2
     ec8:	91 05       	cpc	r25, r1
     eca:	2c f4       	brge	.+10     	; 0xed6 <TIMER0_Init+0xa8>
     ecc:	ec 81       	ldd	r30, Y+4	; 0x04
     ece:	fd 81       	ldd	r31, Y+5	; 0x05
     ed0:	30 97       	sbiw	r30, 0x00	; 0
     ed2:	61 f0       	breq	.+24     	; 0xeec <TIMER0_Init+0xbe>
     ed4:	49 c0       	rjmp	.+146    	; 0xf68 <TIMER0_Init+0x13a>
     ed6:	2c 81       	ldd	r18, Y+4	; 0x04
     ed8:	3d 81       	ldd	r19, Y+5	; 0x05
     eda:	22 30       	cpi	r18, 0x02	; 2
     edc:	31 05       	cpc	r19, r1
     ede:	21 f1       	breq	.+72     	; 0xf28 <TIMER0_Init+0xfa>
     ee0:	8c 81       	ldd	r24, Y+4	; 0x04
     ee2:	9d 81       	ldd	r25, Y+5	; 0x05
     ee4:	83 30       	cpi	r24, 0x03	; 3
     ee6:	91 05       	cpc	r25, r1
     ee8:	71 f1       	breq	.+92     	; 0xf46 <TIMER0_Init+0x118>
     eea:	3e c0       	rjmp	.+124    	; 0xf68 <TIMER0_Init+0x13a>
			{
			case TIMER0_NORMAL_MODE:
				CLR_BIT(TCCR0,WGM00);
     eec:	a3 e5       	ldi	r26, 0x53	; 83
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e3 e5       	ldi	r30, 0x53	; 83
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	8f 7b       	andi	r24, 0xBF	; 191
     ef8:	8c 93       	st	X, r24
				CLR_BIT(TCCR0,WGM01);
     efa:	a3 e5       	ldi	r26, 0x53	; 83
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e3 e5       	ldi	r30, 0x53	; 83
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	87 7f       	andi	r24, 0xF7	; 247
     f06:	8c 93       	st	X, r24
     f08:	2f c0       	rjmp	.+94     	; 0xf68 <TIMER0_Init+0x13a>
				break;
			case TIMER0_PHASE_CORRECT_MODE:
				SET_BIT(TCCR0,WGM00);
     f0a:	a3 e5       	ldi	r26, 0x53	; 83
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e3 e5       	ldi	r30, 0x53	; 83
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	80 64       	ori	r24, 0x40	; 64
     f16:	8c 93       	st	X, r24
				CLR_BIT(TCCR0,WGM01);
     f18:	a3 e5       	ldi	r26, 0x53	; 83
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e3 e5       	ldi	r30, 0x53	; 83
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	87 7f       	andi	r24, 0xF7	; 247
     f24:	8c 93       	st	X, r24
     f26:	20 c0       	rjmp	.+64     	; 0xf68 <TIMER0_Init+0x13a>
				break;
			case TIMER0_CTC_MODE:
				CLR_BIT(TCCR0,WGM00);
     f28:	a3 e5       	ldi	r26, 0x53	; 83
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e3 e5       	ldi	r30, 0x53	; 83
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	8f 7b       	andi	r24, 0xBF	; 191
     f34:	8c 93       	st	X, r24
				SET_BIT(TCCR0,WGM01);
     f36:	a3 e5       	ldi	r26, 0x53	; 83
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e3 e5       	ldi	r30, 0x53	; 83
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	88 60       	ori	r24, 0x08	; 8
     f42:	8c 93       	st	X, r24
     f44:	11 c0       	rjmp	.+34     	; 0xf68 <TIMER0_Init+0x13a>
				break;
			case TIMER0_FAST_PWM_MODE:
				SET_BIT(TCCR0,WGM00);
     f46:	a3 e5       	ldi	r26, 0x53	; 83
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e3 e5       	ldi	r30, 0x53	; 83
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	80 64       	ori	r24, 0x40	; 64
     f52:	8c 93       	st	X, r24
				SET_BIT(TCCR0,WGM01);
     f54:	a3 e5       	ldi	r26, 0x53	; 83
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e3 e5       	ldi	r30, 0x53	; 83
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	88 60       	ori	r24, 0x08	; 8
     f60:	8c 93       	st	X, r24
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <TIMER0_Init+0x13a>
				break;
			}
		}else{
			RetValue = ES_NOT_OK;
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	89 83       	std	Y+1, r24	; 0x01
		}

		// Timer_0 Prescalar Configuration
		if((TIME0_Cfg->prescalar >= TIMER0_STOP) && (TIME0_Cfg->prescalar <= EXTERNAL_RISING))
     f68:	ea 81       	ldd	r30, Y+2	; 0x02
     f6a:	fb 81       	ldd	r31, Y+3	; 0x03
     f6c:	81 81       	ldd	r24, Z+1	; 0x01
     f6e:	88 30       	cpi	r24, 0x08	; 8
     f70:	58 f4       	brcc	.+22     	; 0xf88 <TIMER0_Init+0x15a>
		{
			TCCR0 |= TIME0_Cfg->prescalar;
     f72:	a3 e5       	ldi	r26, 0x53	; 83
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e3 e5       	ldi	r30, 0x53	; 83
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	90 81       	ld	r25, Z
     f7c:	ea 81       	ldd	r30, Y+2	; 0x02
     f7e:	fb 81       	ldd	r31, Y+3	; 0x03
     f80:	81 81       	ldd	r24, Z+1	; 0x01
     f82:	89 2b       	or	r24, r25
     f84:	8c 93       	st	X, r24
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <TIMER0_Init+0x15e>
		}else{
			RetValue = ES_NOT_OK;
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	89 83       	std	Y+1, r24	; 0x01
		}


		// Timer_0 OC0 Pin
		TCCR0 |= (TIME0_Cfg->oc0_mode << COM00);
     f8c:	a3 e5       	ldi	r26, 0x53	; 83
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e3 e5       	ldi	r30, 0x53	; 83
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	28 2f       	mov	r18, r24
     f98:	ea 81       	ldd	r30, Y+2	; 0x02
     f9a:	fb 81       	ldd	r31, Y+3	; 0x03
     f9c:	82 81       	ldd	r24, Z+2	; 0x02
     f9e:	88 2f       	mov	r24, r24
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	82 95       	swap	r24
     fa4:	92 95       	swap	r25
     fa6:	90 7f       	andi	r25, 0xF0	; 240
     fa8:	98 27       	eor	r25, r24
     faa:	80 7f       	andi	r24, 0xF0	; 240
     fac:	98 27       	eor	r25, r24
     fae:	82 2b       	or	r24, r18
     fb0:	8c 93       	st	X, r24


		// Timer_0 Interrupts
		TIMSK |= (TIME0_Cfg->OVF_Interrupt) | (TIME0_Cfg->OCM_Interrupt);
     fb2:	a9 e5       	ldi	r26, 0x59	; 89
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e9 e5       	ldi	r30, 0x59	; 89
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	20 81       	ld	r18, Z
     fbc:	ea 81       	ldd	r30, Y+2	; 0x02
     fbe:	fb 81       	ldd	r31, Y+3	; 0x03
     fc0:	93 81       	ldd	r25, Z+3	; 0x03
     fc2:	ea 81       	ldd	r30, Y+2	; 0x02
     fc4:	fb 81       	ldd	r31, Y+3	; 0x03
     fc6:	84 81       	ldd	r24, Z+4	; 0x04
     fc8:	89 2b       	or	r24, r25
     fca:	82 2b       	or	r24, r18
     fcc:	8c 93       	st	X, r24



	}

	return RetValue;
     fce:	89 81       	ldd	r24, Y+1	; 0x01

}
     fd0:	2a 96       	adiw	r28, 0x0a	; 10
     fd2:	0f b6       	in	r0, 0x3f	; 63
     fd4:	f8 94       	cli
     fd6:	de bf       	out	0x3e, r29	; 62
     fd8:	0f be       	out	0x3f, r0	; 63
     fda:	cd bf       	out	0x3d, r28	; 61
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	08 95       	ret

00000fe2 <TIMER0_Stop>:
ES_t TIMER0_Stop(void)
{
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
	// No clock source
	CLR_BIT(TCCR0,CS00);
     fea:	a3 e5       	ldi	r26, 0x53	; 83
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e3 e5       	ldi	r30, 0x53	; 83
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	8e 7f       	andi	r24, 0xFE	; 254
     ff6:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS01);
     ff8:	a3 e5       	ldi	r26, 0x53	; 83
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e3 e5       	ldi	r30, 0x53	; 83
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	8d 7f       	andi	r24, 0xFD	; 253
    1004:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS02);
    1006:	a3 e5       	ldi	r26, 0x53	; 83
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e3 e5       	ldi	r30, 0x53	; 83
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	8b 7f       	andi	r24, 0xFB	; 251
    1012:	8c 93       	st	X, r24
	return ES_OK;
    1014:	80 e0       	ldi	r24, 0x00	; 0
}
    1016:	cf 91       	pop	r28
    1018:	df 91       	pop	r29
    101a:	08 95       	ret

0000101c <TIMER0_GetCompareValue>:

ES_t TIMER0_GetCompareValue(u8 *CM_Value)
{
    101c:	df 93       	push	r29
    101e:	cf 93       	push	r28
    1020:	00 d0       	rcall	.+0      	; 0x1022 <TIMER0_GetCompareValue+0x6>
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	9a 83       	std	Y+2, r25	; 0x02
    1028:	89 83       	std	Y+1, r24	; 0x01
	*CM_Value = OCR0;
    102a:	ec e5       	ldi	r30, 0x5C	; 92
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	e9 81       	ldd	r30, Y+1	; 0x01
    1032:	fa 81       	ldd	r31, Y+2	; 0x02
    1034:	80 83       	st	Z, r24

	return ES_OK;
    1036:	80 e0       	ldi	r24, 0x00	; 0

}
    1038:	0f 90       	pop	r0
    103a:	0f 90       	pop	r0
    103c:	cf 91       	pop	r28
    103e:	df 91       	pop	r29
    1040:	08 95       	ret

00001042 <TIMER0_SetCompareValue>:
ES_t TIMER0_SetCompareValue(u8 CM_Value)
{
    1042:	df 93       	push	r29
    1044:	cf 93       	push	r28
    1046:	0f 92       	push	r0
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
    104c:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = CM_Value;
    104e:	ec e5       	ldi	r30, 0x5C	; 92
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	80 83       	st	Z, r24

	return ES_OK;
    1056:	80 e0       	ldi	r24, 0x00	; 0

}
    1058:	0f 90       	pop	r0
    105a:	cf 91       	pop	r28
    105c:	df 91       	pop	r29
    105e:	08 95       	ret

00001060 <TIMER0_GetCounterValue>:

ES_t TIMER0_GetCounterValue(u8 *TCNT_Value)
{
    1060:	df 93       	push	r29
    1062:	cf 93       	push	r28
    1064:	00 d0       	rcall	.+0      	; 0x1066 <TIMER0_GetCounterValue+0x6>
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
    106a:	9a 83       	std	Y+2, r25	; 0x02
    106c:	89 83       	std	Y+1, r24	; 0x01

	*TCNT_Value = TCNT0;
    106e:	e2 e5       	ldi	r30, 0x52	; 82
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	e9 81       	ldd	r30, Y+1	; 0x01
    1076:	fa 81       	ldd	r31, Y+2	; 0x02
    1078:	80 83       	st	Z, r24


	return ES_OK;
    107a:	80 e0       	ldi	r24, 0x00	; 0
}
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	cf 91       	pop	r28
    1082:	df 91       	pop	r29
    1084:	08 95       	ret

00001086 <TIMER0_SetCounterValue>:


ES_t TIMER0_SetCounterValue(u8 TCNT_Value)
{
    1086:	df 93       	push	r29
    1088:	cf 93       	push	r28
    108a:	0f 92       	push	r0
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
    1090:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = TCNT_Value;
    1092:	e2 e5       	ldi	r30, 0x52	; 82
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	80 83       	st	Z, r24

	return ES_OK;
    109a:	80 e0       	ldi	r24, 0x00	; 0

}
    109c:	0f 90       	pop	r0
    109e:	cf 91       	pop	r28
    10a0:	df 91       	pop	r29
    10a2:	08 95       	ret

000010a4 <TIMER0_GetOVF_Flag>:

// In case of larger than 255
ES_t TIMER0_GetOVF_Flag(u8 *OVF_Value)
{
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <TIMER0_GetOVF_Flag+0x6>
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
    10ae:	9a 83       	std	Y+2, r25	; 0x02
    10b0:	89 83       	std	Y+1, r24	; 0x01

	*OVF_Value = OVF_Number;
    10b2:	80 91 ef 01 	lds	r24, 0x01EF
    10b6:	90 91 f0 01 	lds	r25, 0x01F0
    10ba:	a0 91 f1 01 	lds	r26, 0x01F1
    10be:	b0 91 f2 01 	lds	r27, 0x01F2
    10c2:	e9 81       	ldd	r30, Y+1	; 0x01
    10c4:	fa 81       	ldd	r31, Y+2	; 0x02
    10c6:	80 83       	st	Z, r24
	return ES_OK;
    10c8:	80 e0       	ldi	r24, 0x00	; 0

}
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	cf 91       	pop	r28
    10d0:	df 91       	pop	r29
    10d2:	08 95       	ret

000010d4 <PWM_Set_DutyCycle>:



ES_t PWM_Set_DutyCycle(float dutyCycle)
{
    10d4:	0f 93       	push	r16
    10d6:	1f 93       	push	r17
    10d8:	df 93       	push	r29
    10da:	cf 93       	push	r28
    10dc:	00 d0       	rcall	.+0      	; 0x10de <PWM_Set_DutyCycle+0xa>
    10de:	00 d0       	rcall	.+0      	; 0x10e0 <PWM_Set_DutyCycle+0xc>
    10e0:	0f 92       	push	r0
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
    10e6:	6a 83       	std	Y+2, r22	; 0x02
    10e8:	7b 83       	std	Y+3, r23	; 0x03
    10ea:	8c 83       	std	Y+4, r24	; 0x04
    10ec:	9d 83       	std	Y+5, r25	; 0x05
	ES_t RetValue;

	if((Global_Timer0_Cfg.mode == TIMER0_FAST_PWM_MODE) || (Global_Timer0_Cfg.mode == TIMER0_PHASE_CORRECT_MODE))
    10ee:	80 91 fa 01 	lds	r24, 0x01FA
    10f2:	83 30       	cpi	r24, 0x03	; 3
    10f4:	29 f0       	breq	.+10     	; 0x1100 <PWM_Set_DutyCycle+0x2c>
    10f6:	80 91 fa 01 	lds	r24, 0x01FA
    10fa:	81 30       	cpi	r24, 0x01	; 1
    10fc:	09 f0       	breq	.+2      	; 0x1100 <PWM_Set_DutyCycle+0x2c>
    10fe:	57 c0       	rjmp	.+174    	; 0x11ae <PWM_Set_DutyCycle+0xda>
	{
		if(Global_Timer0_Cfg.oc0_mode == OC0_NON_INVERTING)
    1100:	80 91 fc 01 	lds	r24, 0x01FC
    1104:	82 30       	cpi	r24, 0x02	; 2
    1106:	11 f5       	brne	.+68     	; 0x114c <PWM_Set_DutyCycle+0x78>
		{
			OCR0 = (u8)((dutyCycle/100.0)*256) - 1;
    1108:	0c e5       	ldi	r16, 0x5C	; 92
    110a:	10 e0       	ldi	r17, 0x00	; 0
    110c:	6a 81       	ldd	r22, Y+2	; 0x02
    110e:	7b 81       	ldd	r23, Y+3	; 0x03
    1110:	8c 81       	ldd	r24, Y+4	; 0x04
    1112:	9d 81       	ldd	r25, Y+5	; 0x05
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	48 ec       	ldi	r20, 0xC8	; 200
    111a:	52 e4       	ldi	r21, 0x42	; 66
    111c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	bc 01       	movw	r22, r24
    1126:	cd 01       	movw	r24, r26
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	40 e8       	ldi	r20, 0x80	; 128
    112e:	53 e4       	ldi	r21, 0x43	; 67
    1130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1134:	dc 01       	movw	r26, r24
    1136:	cb 01       	movw	r24, r22
    1138:	bc 01       	movw	r22, r24
    113a:	cd 01       	movw	r24, r26
    113c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	81 50       	subi	r24, 0x01	; 1
    1146:	f8 01       	movw	r30, r16
    1148:	80 83       	st	Z, r24
    114a:	2f c0       	rjmp	.+94     	; 0x11aa <PWM_Set_DutyCycle+0xd6>

		}else if(Global_Timer0_Cfg.oc0_mode == OC0_INVERTING)
    114c:	80 91 fc 01 	lds	r24, 0x01FC
    1150:	83 30       	cpi	r24, 0x03	; 3
    1152:	59 f5       	brne	.+86     	; 0x11aa <PWM_Set_DutyCycle+0xd6>
		{
			OCR0 = (u8)(256-((256*dutyCycle)/100.0)) - 1;
    1154:	0c e5       	ldi	r16, 0x5C	; 92
    1156:	10 e0       	ldi	r17, 0x00	; 0
    1158:	6a 81       	ldd	r22, Y+2	; 0x02
    115a:	7b 81       	ldd	r23, Y+3	; 0x03
    115c:	8c 81       	ldd	r24, Y+4	; 0x04
    115e:	9d 81       	ldd	r25, Y+5	; 0x05
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	40 e8       	ldi	r20, 0x80	; 128
    1166:	53 e4       	ldi	r21, 0x43	; 67
    1168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    116c:	dc 01       	movw	r26, r24
    116e:	cb 01       	movw	r24, r22
    1170:	bc 01       	movw	r22, r24
    1172:	cd 01       	movw	r24, r26
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	48 ec       	ldi	r20, 0xC8	; 200
    117a:	52 ec       	ldi	r21, 0xC2	; 194
    117c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1180:	dc 01       	movw	r26, r24
    1182:	cb 01       	movw	r24, r22
    1184:	bc 01       	movw	r22, r24
    1186:	cd 01       	movw	r24, r26
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	40 e8       	ldi	r20, 0x80	; 128
    118e:	53 e4       	ldi	r21, 0x43	; 67
    1190:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1194:	dc 01       	movw	r26, r24
    1196:	cb 01       	movw	r24, r22
    1198:	bc 01       	movw	r22, r24
    119a:	cd 01       	movw	r24, r26
    119c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a0:	dc 01       	movw	r26, r24
    11a2:	cb 01       	movw	r24, r22
    11a4:	81 50       	subi	r24, 0x01	; 1
    11a6:	f8 01       	movw	r30, r16
    11a8:	80 83       	st	Z, r24
		}
		RetValue = ES_OK;
    11aa:	19 82       	std	Y+1, r1	; 0x01
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <PWM_Set_DutyCycle+0xde>
	}else{
		RetValue = ES_NOT_OK;
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	89 83       	std	Y+1, r24	; 0x01
	}
	return RetValue;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	cf 91       	pop	r28
    11c0:	df 91       	pop	r29
    11c2:	1f 91       	pop	r17
    11c4:	0f 91       	pop	r16
    11c6:	08 95       	ret

000011c8 <Timer0_Set_Delay_ms>:



void Timer0_Set_Delay_ms(u32 delay_ms)
{
    11c8:	df 93       	push	r29
    11ca:	cf 93       	push	r28
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	67 97       	sbiw	r28, 0x17	; 23
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	f8 94       	cli
    11d6:	de bf       	out	0x3e, r29	; 62
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	cd bf       	out	0x3d, r28	; 61
    11dc:	6d 87       	std	Y+13, r22	; 0x0d
    11de:	7e 87       	std	Y+14, r23	; 0x0e
    11e0:	8f 87       	std	Y+15, r24	; 0x0f
    11e2:	98 8b       	std	Y+16, r25	; 0x10
	TIMER0_Config_t Timer0Cfg = {TIMER0_NORMAL_MODE, TIMER0_PRESCALAR_1024, OC0_DISCONNECTED, TOIE0_ENABLE, OCIE0_DISABLE};
    11e4:	9e 01       	movw	r18, r28
    11e6:	28 5f       	subi	r18, 0xF8	; 248
    11e8:	3f 4f       	sbci	r19, 0xFF	; 255
    11ea:	3c 8b       	std	Y+20, r19	; 0x14
    11ec:	2b 8b       	std	Y+19, r18	; 0x13
    11ee:	88 ec       	ldi	r24, 0xC8	; 200
    11f0:	91 e0       	ldi	r25, 0x01	; 1
    11f2:	9e 8b       	std	Y+22, r25	; 0x16
    11f4:	8d 8b       	std	Y+21, r24	; 0x15
    11f6:	95 e0       	ldi	r25, 0x05	; 5
    11f8:	9f 8b       	std	Y+23, r25	; 0x17
    11fa:	ed 89       	ldd	r30, Y+21	; 0x15
    11fc:	fe 89       	ldd	r31, Y+22	; 0x16
    11fe:	00 80       	ld	r0, Z
    1200:	2d 89       	ldd	r18, Y+21	; 0x15
    1202:	3e 89       	ldd	r19, Y+22	; 0x16
    1204:	2f 5f       	subi	r18, 0xFF	; 255
    1206:	3f 4f       	sbci	r19, 0xFF	; 255
    1208:	3e 8b       	std	Y+22, r19	; 0x16
    120a:	2d 8b       	std	Y+21, r18	; 0x15
    120c:	eb 89       	ldd	r30, Y+19	; 0x13
    120e:	fc 89       	ldd	r31, Y+20	; 0x14
    1210:	00 82       	st	Z, r0
    1212:	2b 89       	ldd	r18, Y+19	; 0x13
    1214:	3c 89       	ldd	r19, Y+20	; 0x14
    1216:	2f 5f       	subi	r18, 0xFF	; 255
    1218:	3f 4f       	sbci	r19, 0xFF	; 255
    121a:	3c 8b       	std	Y+20, r19	; 0x14
    121c:	2b 8b       	std	Y+19, r18	; 0x13
    121e:	3f 89       	ldd	r19, Y+23	; 0x17
    1220:	31 50       	subi	r19, 0x01	; 1
    1222:	3f 8b       	std	Y+23, r19	; 0x17
    1224:	8f 89       	ldd	r24, Y+23	; 0x17
    1226:	88 23       	and	r24, r24
    1228:	41 f7       	brne	.-48     	; 0x11fa <Timer0_Set_Delay_ms+0x32>
	TIMER0_Init(&Timer0Cfg);
    122a:	ce 01       	movw	r24, r28
    122c:	08 96       	adiw	r24, 0x08	; 8
    122e:	0e 94 17 07 	call	0xe2e	; 0xe2e <TIMER0_Init>

	u16 prescalar = 0;
    1232:	1f 82       	std	Y+7, r1	; 0x07
    1234:	1e 82       	std	Y+6, r1	; 0x06
	switch(Timer0Cfg.prescalar){
    1236:	89 85       	ldd	r24, Y+9	; 0x09
    1238:	e8 2f       	mov	r30, r24
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	fa 8b       	std	Y+18, r31	; 0x12
    123e:	e9 8b       	std	Y+17, r30	; 0x11
    1240:	29 89       	ldd	r18, Y+17	; 0x11
    1242:	3a 89       	ldd	r19, Y+18	; 0x12
    1244:	23 30       	cpi	r18, 0x03	; 3
    1246:	31 05       	cpc	r19, r1
    1248:	49 f1       	breq	.+82     	; 0x129c <Timer0_Set_Delay_ms+0xd4>
    124a:	89 89       	ldd	r24, Y+17	; 0x11
    124c:	9a 89       	ldd	r25, Y+18	; 0x12
    124e:	84 30       	cpi	r24, 0x04	; 4
    1250:	91 05       	cpc	r25, r1
    1252:	7c f4       	brge	.+30     	; 0x1272 <Timer0_Set_Delay_ms+0xaa>
    1254:	e9 89       	ldd	r30, Y+17	; 0x11
    1256:	fa 89       	ldd	r31, Y+18	; 0x12
    1258:	e1 30       	cpi	r30, 0x01	; 1
    125a:	f1 05       	cpc	r31, r1
    125c:	49 f1       	breq	.+82     	; 0x12b0 <Timer0_Set_Delay_ms+0xe8>
    125e:	29 89       	ldd	r18, Y+17	; 0x11
    1260:	3a 89       	ldd	r19, Y+18	; 0x12
    1262:	22 30       	cpi	r18, 0x02	; 2
    1264:	31 05       	cpc	r19, r1
    1266:	fc f4       	brge	.+62     	; 0x12a6 <Timer0_Set_Delay_ms+0xde>
    1268:	89 89       	ldd	r24, Y+17	; 0x11
    126a:	9a 89       	ldd	r25, Y+18	; 0x12
    126c:	00 97       	sbiw	r24, 0x00	; 0
    126e:	29 f1       	breq	.+74     	; 0x12ba <Timer0_Set_Delay_ms+0xf2>
    1270:	26 c0       	rjmp	.+76     	; 0x12be <Timer0_Set_Delay_ms+0xf6>
    1272:	e9 89       	ldd	r30, Y+17	; 0x11
    1274:	fa 89       	ldd	r31, Y+18	; 0x12
    1276:	e5 30       	cpi	r30, 0x05	; 5
    1278:	f1 05       	cpc	r31, r1
    127a:	31 f0       	breq	.+12     	; 0x1288 <Timer0_Set_Delay_ms+0xc0>
    127c:	29 89       	ldd	r18, Y+17	; 0x11
    127e:	3a 89       	ldd	r19, Y+18	; 0x12
    1280:	25 30       	cpi	r18, 0x05	; 5
    1282:	31 05       	cpc	r19, r1
    1284:	34 f0       	brlt	.+12     	; 0x1292 <Timer0_Set_Delay_ms+0xca>
    1286:	1b c0       	rjmp	.+54     	; 0x12be <Timer0_Set_Delay_ms+0xf6>
	case TIMER0_PRESCALAR_1024:
		prescalar = 1024;
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	94 e0       	ldi	r25, 0x04	; 4
    128c:	9f 83       	std	Y+7, r25	; 0x07
    128e:	8e 83       	std	Y+6, r24	; 0x06
    1290:	16 c0       	rjmp	.+44     	; 0x12be <Timer0_Set_Delay_ms+0xf6>
		break;
	case TIMER0_PRESCALAR_256:
		prescalar = 256;
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	91 e0       	ldi	r25, 0x01	; 1
    1296:	9f 83       	std	Y+7, r25	; 0x07
    1298:	8e 83       	std	Y+6, r24	; 0x06
    129a:	11 c0       	rjmp	.+34     	; 0x12be <Timer0_Set_Delay_ms+0xf6>
		break;
	case TIMER0_PRESCALAR_64:
		prescalar = 64;
    129c:	80 e4       	ldi	r24, 0x40	; 64
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	9f 83       	std	Y+7, r25	; 0x07
    12a2:	8e 83       	std	Y+6, r24	; 0x06
    12a4:	0c c0       	rjmp	.+24     	; 0x12be <Timer0_Set_Delay_ms+0xf6>
		break;
	case TIMER0_PRESCALAR_8:
		prescalar = 8;
    12a6:	88 e0       	ldi	r24, 0x08	; 8
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	9f 83       	std	Y+7, r25	; 0x07
    12ac:	8e 83       	std	Y+6, r24	; 0x06
    12ae:	07 c0       	rjmp	.+14     	; 0x12be <Timer0_Set_Delay_ms+0xf6>
		break;
	case TIMER0_PRESCALAR_1:
		prescalar = 1;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	9f 83       	std	Y+7, r25	; 0x07
    12b6:	8e 83       	std	Y+6, r24	; 0x06
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <Timer0_Set_Delay_ms+0xf6>
		break;
	case EXTERNAL_FALLING:
	case EXTERNAL_RISING:
		break;
	case TIMER0_STOP:
		prescalar = 0;
    12ba:	1f 82       	std	Y+7, r1	; 0x07
    12bc:	1e 82       	std	Y+6, r1	; 0x06
		break;
	}

	u32 CountsNum = (u32)((F_CPU / (prescalar * 1000UL)) * (delay_ms));
    12be:	8e 81       	ldd	r24, Y+6	; 0x06
    12c0:	9f 81       	ldd	r25, Y+7	; 0x07
    12c2:	cc 01       	movw	r24, r24
    12c4:	a0 e0       	ldi	r26, 0x00	; 0
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	28 ee       	ldi	r18, 0xE8	; 232
    12ca:	33 e0       	ldi	r19, 0x03	; 3
    12cc:	40 e0       	ldi	r20, 0x00	; 0
    12ce:	50 e0       	ldi	r21, 0x00	; 0
    12d0:	bc 01       	movw	r22, r24
    12d2:	cd 01       	movw	r24, r26
    12d4:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__mulsi3>
    12d8:	9b 01       	movw	r18, r22
    12da:	ac 01       	movw	r20, r24
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	94 e2       	ldi	r25, 0x24	; 36
    12e0:	a4 ef       	ldi	r26, 0xF4	; 244
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	bc 01       	movw	r22, r24
    12e6:	cd 01       	movw	r24, r26
    12e8:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <__udivmodsi4>
    12ec:	da 01       	movw	r26, r20
    12ee:	c9 01       	movw	r24, r18
    12f0:	2d 85       	ldd	r18, Y+13	; 0x0d
    12f2:	3e 85       	ldd	r19, Y+14	; 0x0e
    12f4:	4f 85       	ldd	r20, Y+15	; 0x0f
    12f6:	58 89       	ldd	r21, Y+16	; 0x10
    12f8:	bc 01       	movw	r22, r24
    12fa:	cd 01       	movw	r24, r26
    12fc:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__mulsi3>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	8a 83       	std	Y+2, r24	; 0x02
    1306:	9b 83       	std	Y+3, r25	; 0x03
    1308:	ac 83       	std	Y+4, r26	; 0x04
    130a:	bd 83       	std	Y+5, r27	; 0x05
	OVF_Number = (u32)(CountsNum / 256);
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	9b 81       	ldd	r25, Y+3	; 0x03
    1310:	ac 81       	ldd	r26, Y+4	; 0x04
    1312:	bd 81       	ldd	r27, Y+5	; 0x05
    1314:	89 2f       	mov	r24, r25
    1316:	9a 2f       	mov	r25, r26
    1318:	ab 2f       	mov	r26, r27
    131a:	bb 27       	eor	r27, r27
    131c:	80 93 ef 01 	sts	0x01EF, r24
    1320:	90 93 f0 01 	sts	0x01F0, r25
    1324:	a0 93 f1 01 	sts	0x01F1, r26
    1328:	b0 93 f2 01 	sts	0x01F2, r27
	u8 RestCounts = CountsNum % 256;
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	89 83       	std	Y+1, r24	; 0x01



	TIMER0_SetCounterValue(0);
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	0e 94 43 08 	call	0x1086	; 0x1086 <TIMER0_SetCounterValue>

	while(OVF_Number > 0);
    1336:	80 91 ef 01 	lds	r24, 0x01EF
    133a:	90 91 f0 01 	lds	r25, 0x01F0
    133e:	a0 91 f1 01 	lds	r26, 0x01F1
    1342:	b0 91 f2 01 	lds	r27, 0x01F2
    1346:	00 97       	sbiw	r24, 0x00	; 0
    1348:	a1 05       	cpc	r26, r1
    134a:	b1 05       	cpc	r27, r1
    134c:	a1 f7       	brne	.-24     	; 0x1336 <Timer0_Set_Delay_ms+0x16e>

	while(TCNT0 < RestCounts);
    134e:	e2 e5       	ldi	r30, 0x52	; 82
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	90 81       	ld	r25, Z
    1354:	89 81       	ldd	r24, Y+1	; 0x01
    1356:	98 17       	cp	r25, r24
    1358:	d0 f3       	brcs	.-12     	; 0x134e <Timer0_Set_Delay_ms+0x186>

	TIMER0_Stop();
    135a:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <TIMER0_Stop>

	// Disable Timer0 overflow interrupt
	TIMSK &= ~(1 << TOIE0);
    135e:	a9 e5       	ldi	r26, 0x59	; 89
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e9 e5       	ldi	r30, 0x59	; 89
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	8e 7f       	andi	r24, 0xFE	; 254
    136a:	8c 93       	st	X, r24
}
    136c:	67 96       	adiw	r28, 0x17	; 23
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	f8 94       	cli
    1372:	de bf       	out	0x3e, r29	; 62
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	cd bf       	out	0x3d, r28	; 61
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret

0000137e <Timer0_OVF_SetCallBack>:


void Timer0_OVF_SetCallBack(void (*Local_ptr_toFunc))
{
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	00 d0       	rcall	.+0      	; 0x1384 <Timer0_OVF_SetCallBack+0x6>
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
    1388:	9a 83       	std	Y+2, r25	; 0x02
    138a:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OVF_Fptr = Local_ptr_toFunc;
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	9a 81       	ldd	r25, Y+2	; 0x02
    1390:	90 93 eb 01 	sts	0x01EB, r25
    1394:	80 93 ea 01 	sts	0x01EA, r24


}
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	cf 91       	pop	r28
    139e:	df 91       	pop	r29
    13a0:	08 95       	ret

000013a2 <Timer0_OCM_SetCallBack>:
void Timer0_OCM_SetCallBack(void (*Local_ptr_toFunc))
{
    13a2:	df 93       	push	r29
    13a4:	cf 93       	push	r28
    13a6:	00 d0       	rcall	.+0      	; 0x13a8 <Timer0_OCM_SetCallBack+0x6>
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
    13ac:	9a 83       	std	Y+2, r25	; 0x02
    13ae:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OCM_Fptr = Local_ptr_toFunc;
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	9a 81       	ldd	r25, Y+2	; 0x02
    13b4:	90 93 ed 01 	sts	0x01ED, r25
    13b8:	80 93 ec 01 	sts	0x01EC, r24
}
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <TIMER1_Init>:

// ===========================================================


ES_t TIMER1_Init(TIMER1_Config_t *TIME1_Cfg)
{
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	2a 97       	sbiw	r28, 0x0a	; 10
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	de bf       	out	0x3e, r29	; 62
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	cd bf       	out	0x3d, r28	; 61
    13da:	9b 83       	std	Y+3, r25	; 0x03
    13dc:	8a 83       	std	Y+2, r24	; 0x02
	ES_t RetValue = ES_NOT_OK;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	89 83       	std	Y+1, r24	; 0x01
	if(TIME1_Cfg == NULLPTR){
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	9b 81       	ldd	r25, Y+3	; 0x03
    13e6:	00 97       	sbiw	r24, 0x00	; 0
    13e8:	19 f4       	brne	.+6      	; 0x13f0 <TIMER1_Init+0x2a>
		RetValue = ES_NOT_OK;
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	89 83       	std	Y+1, r24	; 0x01
    13ee:	ea c0       	rjmp	.+468    	; 0x15c4 <TIMER1_Init+0x1fe>
	}else
	{
		// Copy the configuration in a global structure in case of
		// usage inside othe functions
		Global_Timer1_Cfg = *TIME1_Cfg;
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	9b 81       	ldd	r25, Y+3	; 0x03
    13f4:	2f ef       	ldi	r18, 0xFF	; 255
    13f6:	31 e0       	ldi	r19, 0x01	; 1
    13f8:	3f 83       	std	Y+7, r19	; 0x07
    13fa:	2e 83       	std	Y+6, r18	; 0x06
    13fc:	99 87       	std	Y+9, r25	; 0x09
    13fe:	88 87       	std	Y+8, r24	; 0x08
    1400:	38 e0       	ldi	r19, 0x08	; 8
    1402:	3a 87       	std	Y+10, r19	; 0x0a
    1404:	e8 85       	ldd	r30, Y+8	; 0x08
    1406:	f9 85       	ldd	r31, Y+9	; 0x09
    1408:	00 80       	ld	r0, Z
    140a:	28 85       	ldd	r18, Y+8	; 0x08
    140c:	39 85       	ldd	r19, Y+9	; 0x09
    140e:	2f 5f       	subi	r18, 0xFF	; 255
    1410:	3f 4f       	sbci	r19, 0xFF	; 255
    1412:	39 87       	std	Y+9, r19	; 0x09
    1414:	28 87       	std	Y+8, r18	; 0x08
    1416:	ee 81       	ldd	r30, Y+6	; 0x06
    1418:	ff 81       	ldd	r31, Y+7	; 0x07
    141a:	00 82       	st	Z, r0
    141c:	2e 81       	ldd	r18, Y+6	; 0x06
    141e:	3f 81       	ldd	r19, Y+7	; 0x07
    1420:	2f 5f       	subi	r18, 0xFF	; 255
    1422:	3f 4f       	sbci	r19, 0xFF	; 255
    1424:	3f 83       	std	Y+7, r19	; 0x07
    1426:	2e 83       	std	Y+6, r18	; 0x06
    1428:	3a 85       	ldd	r19, Y+10	; 0x0a
    142a:	31 50       	subi	r19, 0x01	; 1
    142c:	3a 87       	std	Y+10, r19	; 0x0a
    142e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1430:	88 23       	and	r24, r24
    1432:	41 f7       	brne	.-48     	; 0x1404 <TIMER1_Init+0x3e>


		// Timer0 mode Configurations
		if((TIME1_Cfg->mode >= TIMER1_NORMAL_MODE) && (TIME1_Cfg->mode <= TIMER1_FAST_PWM_OCR1A_TOP))
    1434:	ea 81       	ldd	r30, Y+2	; 0x02
    1436:	fb 81       	ldd	r31, Y+3	; 0x03
    1438:	80 81       	ld	r24, Z
    143a:	83 30       	cpi	r24, 0x03	; 3
    143c:	08 f0       	brcs	.+2      	; 0x1440 <TIMER1_Init+0x7a>
    143e:	6f c0       	rjmp	.+222    	; 0x151e <TIMER1_Init+0x158>
		{
			RetValue = ES_OK;
    1440:	19 82       	std	Y+1, r1	; 0x01
			switch(TIME1_Cfg->mode)
    1442:	ea 81       	ldd	r30, Y+2	; 0x02
    1444:	fb 81       	ldd	r31, Y+3	; 0x03
    1446:	80 81       	ld	r24, Z
    1448:	e8 2f       	mov	r30, r24
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	fd 83       	std	Y+5, r31	; 0x05
    144e:	ec 83       	std	Y+4, r30	; 0x04
    1450:	2c 81       	ldd	r18, Y+4	; 0x04
    1452:	3d 81       	ldd	r19, Y+5	; 0x05
    1454:	21 30       	cpi	r18, 0x01	; 1
    1456:	31 05       	cpc	r19, r1
    1458:	41 f1       	breq	.+80     	; 0x14aa <TIMER1_Init+0xe4>
    145a:	8c 81       	ldd	r24, Y+4	; 0x04
    145c:	9d 81       	ldd	r25, Y+5	; 0x05
    145e:	82 30       	cpi	r24, 0x02	; 2
    1460:	91 05       	cpc	r25, r1
    1462:	09 f4       	brne	.+2      	; 0x1466 <TIMER1_Init+0xa0>
    1464:	3f c0       	rjmp	.+126    	; 0x14e4 <TIMER1_Init+0x11e>
    1466:	ec 81       	ldd	r30, Y+4	; 0x04
    1468:	fd 81       	ldd	r31, Y+5	; 0x05
    146a:	30 97       	sbiw	r30, 0x00	; 0
    146c:	09 f0       	breq	.+2      	; 0x1470 <TIMER1_Init+0xaa>
    146e:	59 c0       	rjmp	.+178    	; 0x1522 <TIMER1_Init+0x15c>
			{
			case TIMER1_NORMAL_MODE:
				CLR_BIT(TCCR1A,WGM10);
    1470:	af e4       	ldi	r26, 0x4F	; 79
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	ef e4       	ldi	r30, 0x4F	; 79
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	8e 7f       	andi	r24, 0xFE	; 254
    147c:	8c 93       	st	X, r24
				CLR_BIT(TCCR1A,WGM11);
    147e:	af e4       	ldi	r26, 0x4F	; 79
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	ef e4       	ldi	r30, 0x4F	; 79
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	8d 7f       	andi	r24, 0xFD	; 253
    148a:	8c 93       	st	X, r24
				CLR_BIT(TCCR1B,WGM12);
    148c:	ae e4       	ldi	r26, 0x4E	; 78
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	ee e4       	ldi	r30, 0x4E	; 78
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	87 7f       	andi	r24, 0xF7	; 247
    1498:	8c 93       	st	X, r24
				CLR_BIT(TCCR1B,WGM13);
    149a:	ae e4       	ldi	r26, 0x4E	; 78
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	ee e4       	ldi	r30, 0x4E	; 78
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	8f 7e       	andi	r24, 0xEF	; 239
    14a6:	8c 93       	st	X, r24
    14a8:	3c c0       	rjmp	.+120    	; 0x1522 <TIMER1_Init+0x15c>
				break;
			case TIMER1_FAST_PWM_ICR1_TOP:
				CLR_BIT(TCCR1A,WGM10);
    14aa:	af e4       	ldi	r26, 0x4F	; 79
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	ef e4       	ldi	r30, 0x4F	; 79
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	8e 7f       	andi	r24, 0xFE	; 254
    14b6:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,WGM11);
    14b8:	af e4       	ldi	r26, 0x4F	; 79
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	ef e4       	ldi	r30, 0x4F	; 79
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	82 60       	ori	r24, 0x02	; 2
    14c4:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,WGM12);
    14c6:	ae e4       	ldi	r26, 0x4E	; 78
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	ee e4       	ldi	r30, 0x4E	; 78
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	88 60       	ori	r24, 0x08	; 8
    14d2:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,WGM13);
    14d4:	ae e4       	ldi	r26, 0x4E	; 78
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	ee e4       	ldi	r30, 0x4E	; 78
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	80 61       	ori	r24, 0x10	; 16
    14e0:	8c 93       	st	X, r24
    14e2:	1f c0       	rjmp	.+62     	; 0x1522 <TIMER1_Init+0x15c>
				break;
			case TIMER1_FAST_PWM_OCR1A_TOP:
				SET_BIT(TCCR1A,WGM10);
    14e4:	af e4       	ldi	r26, 0x4F	; 79
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	ef e4       	ldi	r30, 0x4F	; 79
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	81 60       	ori	r24, 0x01	; 1
    14f0:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,WGM11);
    14f2:	af e4       	ldi	r26, 0x4F	; 79
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	ef e4       	ldi	r30, 0x4F	; 79
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	82 60       	ori	r24, 0x02	; 2
    14fe:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,WGM12);
    1500:	ae e4       	ldi	r26, 0x4E	; 78
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	ee e4       	ldi	r30, 0x4E	; 78
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	88 60       	ori	r24, 0x08	; 8
    150c:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,WGM13);
    150e:	ae e4       	ldi	r26, 0x4E	; 78
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	ee e4       	ldi	r30, 0x4E	; 78
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	80 61       	ori	r24, 0x10	; 16
    151a:	8c 93       	st	X, r24
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <TIMER1_Init+0x15c>
				break;
			}
		}else{
			RetValue = ES_NOT_OK;
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	89 83       	std	Y+1, r24	; 0x01
		}

		// Timer_0 Prescalar Configuration
		if((TIME1_Cfg->prescalar >= TIMER1_STOP) && (TIME1_Cfg->prescalar <= EXTERNAL1_RISING))
    1522:	ea 81       	ldd	r30, Y+2	; 0x02
    1524:	fb 81       	ldd	r31, Y+3	; 0x03
    1526:	81 81       	ldd	r24, Z+1	; 0x01
    1528:	88 30       	cpi	r24, 0x08	; 8
    152a:	58 f4       	brcc	.+22     	; 0x1542 <TIMER1_Init+0x17c>
		{
			TCCR1B |= TIME1_Cfg->prescalar;
    152c:	ae e4       	ldi	r26, 0x4E	; 78
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	ee e4       	ldi	r30, 0x4E	; 78
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	90 81       	ld	r25, Z
    1536:	ea 81       	ldd	r30, Y+2	; 0x02
    1538:	fb 81       	ldd	r31, Y+3	; 0x03
    153a:	81 81       	ldd	r24, Z+1	; 0x01
    153c:	89 2b       	or	r24, r25
    153e:	8c 93       	st	X, r24
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <TIMER1_Init+0x180>
		}else{
			RetValue = ES_NOT_OK;
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	89 83       	std	Y+1, r24	; 0x01
		}


		// Timer_1 OCA Pin
		TCCR1A |= (TIME1_Cfg->OC1A_mode << COM1A0);
    1546:	af e4       	ldi	r26, 0x4F	; 79
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	ef e4       	ldi	r30, 0x4F	; 79
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	28 2f       	mov	r18, r24
    1552:	ea 81       	ldd	r30, Y+2	; 0x02
    1554:	fb 81       	ldd	r31, Y+3	; 0x03
    1556:	82 81       	ldd	r24, Z+2	; 0x02
    1558:	88 2f       	mov	r24, r24
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	00 24       	eor	r0, r0
    155e:	96 95       	lsr	r25
    1560:	87 95       	ror	r24
    1562:	07 94       	ror	r0
    1564:	96 95       	lsr	r25
    1566:	87 95       	ror	r24
    1568:	07 94       	ror	r0
    156a:	98 2f       	mov	r25, r24
    156c:	80 2d       	mov	r24, r0
    156e:	82 2b       	or	r24, r18
    1570:	8c 93       	st	X, r24

		// Timer_1 OCA Pin
		TCCR1A |= (TIME1_Cfg->OC1B_mode << COM1B0);
    1572:	af e4       	ldi	r26, 0x4F	; 79
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	ef e4       	ldi	r30, 0x4F	; 79
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	28 2f       	mov	r18, r24
    157e:	ea 81       	ldd	r30, Y+2	; 0x02
    1580:	fb 81       	ldd	r31, Y+3	; 0x03
    1582:	83 81       	ldd	r24, Z+3	; 0x03
    1584:	88 2f       	mov	r24, r24
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	82 95       	swap	r24
    158a:	92 95       	swap	r25
    158c:	90 7f       	andi	r25, 0xF0	; 240
    158e:	98 27       	eor	r25, r24
    1590:	80 7f       	andi	r24, 0xF0	; 240
    1592:	98 27       	eor	r25, r24
    1594:	82 2b       	or	r24, r18
    1596:	8c 93       	st	X, r24


		// Timer_1 Interrupts
		TIMSK |= (TIME1_Cfg->OVF_Interrupt) | (TIME1_Cfg->ICU_Interrupt) | (TIME1_Cfg->OCA_Interrupt) | (TIME1_Cfg->OCB_Interrupt);
    1598:	a9 e5       	ldi	r26, 0x59	; 89
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	e9 e5       	ldi	r30, 0x59	; 89
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	20 81       	ld	r18, Z
    15a2:	ea 81       	ldd	r30, Y+2	; 0x02
    15a4:	fb 81       	ldd	r31, Y+3	; 0x03
    15a6:	94 81       	ldd	r25, Z+4	; 0x04
    15a8:	ea 81       	ldd	r30, Y+2	; 0x02
    15aa:	fb 81       	ldd	r31, Y+3	; 0x03
    15ac:	85 81       	ldd	r24, Z+5	; 0x05
    15ae:	98 2b       	or	r25, r24
    15b0:	ea 81       	ldd	r30, Y+2	; 0x02
    15b2:	fb 81       	ldd	r31, Y+3	; 0x03
    15b4:	86 81       	ldd	r24, Z+6	; 0x06
    15b6:	98 2b       	or	r25, r24
    15b8:	ea 81       	ldd	r30, Y+2	; 0x02
    15ba:	fb 81       	ldd	r31, Y+3	; 0x03
    15bc:	87 81       	ldd	r24, Z+7	; 0x07
    15be:	89 2b       	or	r24, r25
    15c0:	82 2b       	or	r24, r18
    15c2:	8c 93       	st	X, r24



	}

	return RetValue;
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    15c6:	2a 96       	adiw	r28, 0x0a	; 10
    15c8:	0f b6       	in	r0, 0x3f	; 63
    15ca:	f8 94       	cli
    15cc:	de bf       	out	0x3e, r29	; 62
    15ce:	0f be       	out	0x3f, r0	; 63
    15d0:	cd bf       	out	0x3d, r28	; 61
    15d2:	cf 91       	pop	r28
    15d4:	df 91       	pop	r29
    15d6:	08 95       	ret

000015d8 <TIMER1_Stop>:


ES_t TIMER1_Stop(void)
{
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
	// No clock source
	CLR_BIT(TCCR1B,CS10);
    15e0:	ae e4       	ldi	r26, 0x4E	; 78
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	ee e4       	ldi	r30, 0x4E	; 78
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	8e 7f       	andi	r24, 0xFE	; 254
    15ec:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS11);
    15ee:	ae e4       	ldi	r26, 0x4E	; 78
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	ee e4       	ldi	r30, 0x4E	; 78
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	8d 7f       	andi	r24, 0xFD	; 253
    15fa:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS12);
    15fc:	ae e4       	ldi	r26, 0x4E	; 78
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	ee e4       	ldi	r30, 0x4E	; 78
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	8b 7f       	andi	r24, 0xFB	; 251
    1608:	8c 93       	st	X, r24
	return ES_OK;
    160a:	80 e0       	ldi	r24, 0x00	; 0
}
    160c:	cf 91       	pop	r28
    160e:	df 91       	pop	r29
    1610:	08 95       	ret

00001612 <__vector_11>:




ISR(TIMER0_OVF_vect)
{
    1612:	1f 92       	push	r1
    1614:	0f 92       	push	r0
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	0f 92       	push	r0
    161a:	11 24       	eor	r1, r1
    161c:	8f 93       	push	r24
    161e:	9f 93       	push	r25
    1620:	af 93       	push	r26
    1622:	bf 93       	push	r27
    1624:	ef 93       	push	r30
    1626:	ff 93       	push	r31
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
	if(OVF_Number > 0){
    1630:	80 91 ef 01 	lds	r24, 0x01EF
    1634:	90 91 f0 01 	lds	r25, 0x01F0
    1638:	a0 91 f1 01 	lds	r26, 0x01F1
    163c:	b0 91 f2 01 	lds	r27, 0x01F2
    1640:	00 97       	sbiw	r24, 0x00	; 0
    1642:	a1 05       	cpc	r26, r1
    1644:	b1 05       	cpc	r27, r1
    1646:	a1 f0       	breq	.+40     	; 0x1670 <__vector_11+0x5e>
//		Lcd_ES_tdisplayNum(OVF_Number);
//		Lcd_ES_tsendString("  ");
		OVF_Number--;
    1648:	80 91 ef 01 	lds	r24, 0x01EF
    164c:	90 91 f0 01 	lds	r25, 0x01F0
    1650:	a0 91 f1 01 	lds	r26, 0x01F1
    1654:	b0 91 f2 01 	lds	r27, 0x01F2
    1658:	01 97       	sbiw	r24, 0x01	; 1
    165a:	a1 09       	sbc	r26, r1
    165c:	b1 09       	sbc	r27, r1
    165e:	80 93 ef 01 	sts	0x01EF, r24
    1662:	90 93 f0 01 	sts	0x01F0, r25
    1666:	a0 93 f1 01 	sts	0x01F1, r26
    166a:	b0 93 f2 01 	sts	0x01F2, r27
    166e:	07 c0       	rjmp	.+14     	; 0x167e <__vector_11+0x6c>
	}else {
		// If all overflows are done, disable the interrupt
		TIMSK &= ~(1 << TOIE0);
    1670:	a9 e5       	ldi	r26, 0x59	; 89
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	e9 e5       	ldi	r30, 0x59	; 89
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	8e 7f       	andi	r24, 0xFE	; 254
    167c:	8c 93       	st	X, r24
	}

}
    167e:	cf 91       	pop	r28
    1680:	df 91       	pop	r29
    1682:	ff 91       	pop	r31
    1684:	ef 91       	pop	r30
    1686:	bf 91       	pop	r27
    1688:	af 91       	pop	r26
    168a:	9f 91       	pop	r25
    168c:	8f 91       	pop	r24
    168e:	0f 90       	pop	r0
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	0f 90       	pop	r0
    1694:	1f 90       	pop	r1
    1696:	18 95       	reti

00001698 <__vector_10>:


ISR(TIMER0_COMP_vect)
{
    1698:	1f 92       	push	r1
    169a:	0f 92       	push	r0
    169c:	0f b6       	in	r0, 0x3f	; 63
    169e:	0f 92       	push	r0
    16a0:	11 24       	eor	r1, r1
    16a2:	2f 93       	push	r18
    16a4:	3f 93       	push	r19
    16a6:	4f 93       	push	r20
    16a8:	5f 93       	push	r21
    16aa:	6f 93       	push	r22
    16ac:	7f 93       	push	r23
    16ae:	8f 93       	push	r24
    16b0:	9f 93       	push	r25
    16b2:	af 93       	push	r26
    16b4:	bf 93       	push	r27
    16b6:	ef 93       	push	r30
    16b8:	ff 93       	push	r31
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_OCM_Fptr != NULLPTR)
    16c2:	80 91 ec 01 	lds	r24, 0x01EC
    16c6:	90 91 ed 01 	lds	r25, 0x01ED
    16ca:	00 97       	sbiw	r24, 0x00	; 0
    16cc:	29 f0       	breq	.+10     	; 0x16d8 <__vector_10+0x40>
	{
		Timer0_OCM_Fptr();
    16ce:	e0 91 ec 01 	lds	r30, 0x01EC
    16d2:	f0 91 ed 01 	lds	r31, 0x01ED
    16d6:	09 95       	icall
	}
}
    16d8:	cf 91       	pop	r28
    16da:	df 91       	pop	r29
    16dc:	ff 91       	pop	r31
    16de:	ef 91       	pop	r30
    16e0:	bf 91       	pop	r27
    16e2:	af 91       	pop	r26
    16e4:	9f 91       	pop	r25
    16e6:	8f 91       	pop	r24
    16e8:	7f 91       	pop	r23
    16ea:	6f 91       	pop	r22
    16ec:	5f 91       	pop	r21
    16ee:	4f 91       	pop	r20
    16f0:	3f 91       	pop	r19
    16f2:	2f 91       	pop	r18
    16f4:	0f 90       	pop	r0
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	0f 90       	pop	r0
    16fa:	1f 90       	pop	r1
    16fc:	18 95       	reti

000016fe <EXI_Set_CallBack>:
/* void (*LocalPtr)(void) is a local pointer to function */
/* The name of function without () is an address to that function */
/* The function he passes must take void and return void also */
/************************************************************************/

void EXI_Set_CallBack(EX_Interrupt_Source_type interrupt, void (*LocalPtr)(void)){
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	00 d0       	rcall	.+0      	; 0x1704 <EXI_Set_CallBack+0x6>
    1704:	00 d0       	rcall	.+0      	; 0x1706 <EXI_Set_CallBack+0x8>
    1706:	0f 92       	push	r0
    1708:	cd b7       	in	r28, 0x3d	; 61
    170a:	de b7       	in	r29, 0x3e	; 62
    170c:	89 83       	std	Y+1, r24	; 0x01
    170e:	7b 83       	std	Y+3, r23	; 0x03
    1710:	6a 83       	std	Y+2, r22	; 0x02
	switch(interrupt){
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	28 2f       	mov	r18, r24
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	3d 83       	std	Y+5, r19	; 0x05
    171a:	2c 83       	std	Y+4, r18	; 0x04
    171c:	8c 81       	ldd	r24, Y+4	; 0x04
    171e:	9d 81       	ldd	r25, Y+5	; 0x05
    1720:	81 30       	cpi	r24, 0x01	; 1
    1722:	91 05       	cpc	r25, r1
    1724:	81 f0       	breq	.+32     	; 0x1746 <EXI_Set_CallBack+0x48>
    1726:	2c 81       	ldd	r18, Y+4	; 0x04
    1728:	3d 81       	ldd	r19, Y+5	; 0x05
    172a:	22 30       	cpi	r18, 0x02	; 2
    172c:	31 05       	cpc	r19, r1
    172e:	91 f0       	breq	.+36     	; 0x1754 <EXI_Set_CallBack+0x56>
    1730:	8c 81       	ldd	r24, Y+4	; 0x04
    1732:	9d 81       	ldd	r25, Y+5	; 0x05
    1734:	00 97       	sbiw	r24, 0x00	; 0
    1736:	a1 f4       	brne	.+40     	; 0x1760 <EXI_Set_CallBack+0x62>
	case EX_INT0:
		INT0_Fptr = LocalPtr;
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	9b 81       	ldd	r25, Y+3	; 0x03
    173c:	90 93 f5 01 	sts	0x01F5, r25
    1740:	80 93 f4 01 	sts	0x01F4, r24
    1744:	0d c0       	rjmp	.+26     	; 0x1760 <EXI_Set_CallBack+0x62>
		break;
	case EX_INT1:
		INT1_Fptr = LocalPtr;
    1746:	8a 81       	ldd	r24, Y+2	; 0x02
    1748:	9b 81       	ldd	r25, Y+3	; 0x03
    174a:	90 93 f7 01 	sts	0x01F7, r25
    174e:	80 93 f6 01 	sts	0x01F6, r24
    1752:	06 c0       	rjmp	.+12     	; 0x1760 <EXI_Set_CallBack+0x62>
		break;
	case EX_INT2:
		INT2_Fptr = LocalPtr;
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	9b 81       	ldd	r25, Y+3	; 0x03
    1758:	90 93 f9 01 	sts	0x01F9, r25
    175c:	80 93 f8 01 	sts	0x01F8, r24
		break;
	}
}
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	cf 91       	pop	r28
    176c:	df 91       	pop	r29
    176e:	08 95       	ret

00001770 <EXI_ENABLE>:
/************************************************************************/
/*  Enabling and disabling the interrupt                                */
/************************************************************************/


void EXI_ENABLE(EX_Interrupt_Source_type interrupt){
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	00 d0       	rcall	.+0      	; 0x1776 <EXI_ENABLE+0x6>
    1776:	0f 92       	push	r0
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
    177c:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt){
    177e:	89 81       	ldd	r24, Y+1	; 0x01
    1780:	28 2f       	mov	r18, r24
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	3b 83       	std	Y+3, r19	; 0x03
    1786:	2a 83       	std	Y+2, r18	; 0x02
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	9b 81       	ldd	r25, Y+3	; 0x03
    178c:	81 30       	cpi	r24, 0x01	; 1
    178e:	91 05       	cpc	r25, r1
    1790:	89 f0       	breq	.+34     	; 0x17b4 <EXI_ENABLE+0x44>
    1792:	2a 81       	ldd	r18, Y+2	; 0x02
    1794:	3b 81       	ldd	r19, Y+3	; 0x03
    1796:	22 30       	cpi	r18, 0x02	; 2
    1798:	31 05       	cpc	r19, r1
    179a:	a1 f0       	breq	.+40     	; 0x17c4 <EXI_ENABLE+0x54>
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	9b 81       	ldd	r25, Y+3	; 0x03
    17a0:	00 97       	sbiw	r24, 0x00	; 0
    17a2:	b9 f4       	brne	.+46     	; 0x17d2 <EXI_ENABLE+0x62>
	case EX_INT0:
		SET_BIT(GICR,INT0);
    17a4:	ab e5       	ldi	r26, 0x5B	; 91
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	eb e5       	ldi	r30, 0x5B	; 91
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	80 64       	ori	r24, 0x40	; 64
    17b0:	8c 93       	st	X, r24
    17b2:	0f c0       	rjmp	.+30     	; 0x17d2 <EXI_ENABLE+0x62>
		break;
	case EX_INT1:
		SET_BIT(GICR,INT1);
    17b4:	ab e5       	ldi	r26, 0x5B	; 91
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	eb e5       	ldi	r30, 0x5B	; 91
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	80 68       	ori	r24, 0x80	; 128
    17c0:	8c 93       	st	X, r24
    17c2:	07 c0       	rjmp	.+14     	; 0x17d2 <EXI_ENABLE+0x62>
		break;
	case EX_INT2:
		SET_BIT(GICR,INT2);
    17c4:	ab e5       	ldi	r26, 0x5B	; 91
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	eb e5       	ldi	r30, 0x5B	; 91
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	80 62       	ori	r24, 0x20	; 32
    17d0:	8c 93       	st	X, r24
		break;
	}
}
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	08 95       	ret

000017de <EXI_DISABLE>:


void EXI_DISABLE(EX_Interrupt_Source_type interrupt){
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	00 d0       	rcall	.+0      	; 0x17e4 <EXI_DISABLE+0x6>
    17e4:	0f 92       	push	r0
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt){
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	3b 83       	std	Y+3, r19	; 0x03
    17f4:	2a 83       	std	Y+2, r18	; 0x02
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	9b 81       	ldd	r25, Y+3	; 0x03
    17fa:	81 30       	cpi	r24, 0x01	; 1
    17fc:	91 05       	cpc	r25, r1
    17fe:	89 f0       	breq	.+34     	; 0x1822 <EXI_DISABLE+0x44>
    1800:	2a 81       	ldd	r18, Y+2	; 0x02
    1802:	3b 81       	ldd	r19, Y+3	; 0x03
    1804:	22 30       	cpi	r18, 0x02	; 2
    1806:	31 05       	cpc	r19, r1
    1808:	a1 f0       	breq	.+40     	; 0x1832 <EXI_DISABLE+0x54>
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	9b 81       	ldd	r25, Y+3	; 0x03
    180e:	00 97       	sbiw	r24, 0x00	; 0
    1810:	b9 f4       	brne	.+46     	; 0x1840 <EXI_DISABLE+0x62>
	case EX_INT0:
		CLR_BIT(GICR,INT0);
    1812:	ab e5       	ldi	r26, 0x5B	; 91
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	eb e5       	ldi	r30, 0x5B	; 91
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	8f 7b       	andi	r24, 0xBF	; 191
    181e:	8c 93       	st	X, r24
    1820:	0f c0       	rjmp	.+30     	; 0x1840 <EXI_DISABLE+0x62>
		break;
	case EX_INT1:
		CLR_BIT(GICR,INT1);
    1822:	ab e5       	ldi	r26, 0x5B	; 91
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	eb e5       	ldi	r30, 0x5B	; 91
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	8f 77       	andi	r24, 0x7F	; 127
    182e:	8c 93       	st	X, r24
    1830:	07 c0       	rjmp	.+14     	; 0x1840 <EXI_DISABLE+0x62>
		break;
	case EX_INT2:
		CLR_BIT(GICR,INT2);
    1832:	ab e5       	ldi	r26, 0x5B	; 91
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	eb e5       	ldi	r30, 0x5B	; 91
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	8f 7d       	andi	r24, 0xDF	; 223
    183e:	8c 93       	st	X, r24
		break;
	}
}
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	08 95       	ret

0000184c <EXI_TriggerEdge>:

void EXI_TriggerEdge(EX_Interrupt_Source_type interrupt,Trigger_Edge_type edge){
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
    1854:	2a 97       	sbiw	r28, 0x0a	; 10
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	f8 94       	cli
    185a:	de bf       	out	0x3e, r29	; 62
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	cd bf       	out	0x3d, r28	; 61
    1860:	89 83       	std	Y+1, r24	; 0x01
    1862:	6a 83       	std	Y+2, r22	; 0x02
	switch(interrupt){
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	28 2f       	mov	r18, r24
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	3a 87       	std	Y+10, r19	; 0x0a
    186c:	29 87       	std	Y+9, r18	; 0x09
    186e:	89 85       	ldd	r24, Y+9	; 0x09
    1870:	9a 85       	ldd	r25, Y+10	; 0x0a
    1872:	81 30       	cpi	r24, 0x01	; 1
    1874:	91 05       	cpc	r25, r1
    1876:	09 f4       	brne	.+2      	; 0x187a <EXI_TriggerEdge+0x2e>
    1878:	66 c0       	rjmp	.+204    	; 0x1946 <EXI_TriggerEdge+0xfa>
    187a:	29 85       	ldd	r18, Y+9	; 0x09
    187c:	3a 85       	ldd	r19, Y+10	; 0x0a
    187e:	22 30       	cpi	r18, 0x02	; 2
    1880:	31 05       	cpc	r19, r1
    1882:	09 f4       	brne	.+2      	; 0x1886 <EXI_TriggerEdge+0x3a>
    1884:	bb c0       	rjmp	.+374    	; 0x19fc <EXI_TriggerEdge+0x1b0>
    1886:	89 85       	ldd	r24, Y+9	; 0x09
    1888:	9a 85       	ldd	r25, Y+10	; 0x0a
    188a:	00 97       	sbiw	r24, 0x00	; 0
    188c:	09 f0       	breq	.+2      	; 0x1890 <EXI_TriggerEdge+0x44>
    188e:	dd c0       	rjmp	.+442    	; 0x1a4a <EXI_TriggerEdge+0x1fe>
	case EX_INT0:
		switch(edge){
    1890:	8a 81       	ldd	r24, Y+2	; 0x02
    1892:	28 2f       	mov	r18, r24
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	38 87       	std	Y+8, r19	; 0x08
    1898:	2f 83       	std	Y+7, r18	; 0x07
    189a:	8f 81       	ldd	r24, Y+7	; 0x07
    189c:	98 85       	ldd	r25, Y+8	; 0x08
    189e:	81 30       	cpi	r24, 0x01	; 1
    18a0:	91 05       	cpc	r25, r1
    18a2:	21 f1       	breq	.+72     	; 0x18ec <EXI_TriggerEdge+0xa0>
    18a4:	2f 81       	ldd	r18, Y+7	; 0x07
    18a6:	38 85       	ldd	r19, Y+8	; 0x08
    18a8:	22 30       	cpi	r18, 0x02	; 2
    18aa:	31 05       	cpc	r19, r1
    18ac:	2c f4       	brge	.+10     	; 0x18b8 <EXI_TriggerEdge+0x6c>
    18ae:	8f 81       	ldd	r24, Y+7	; 0x07
    18b0:	98 85       	ldd	r25, Y+8	; 0x08
    18b2:	00 97       	sbiw	r24, 0x00	; 0
    18b4:	61 f0       	breq	.+24     	; 0x18ce <EXI_TriggerEdge+0x82>
    18b6:	c9 c0       	rjmp	.+402    	; 0x1a4a <EXI_TriggerEdge+0x1fe>
    18b8:	2f 81       	ldd	r18, Y+7	; 0x07
    18ba:	38 85       	ldd	r19, Y+8	; 0x08
    18bc:	22 30       	cpi	r18, 0x02	; 2
    18be:	31 05       	cpc	r19, r1
    18c0:	21 f1       	breq	.+72     	; 0x190a <EXI_TriggerEdge+0xbe>
    18c2:	8f 81       	ldd	r24, Y+7	; 0x07
    18c4:	98 85       	ldd	r25, Y+8	; 0x08
    18c6:	83 30       	cpi	r24, 0x03	; 3
    18c8:	91 05       	cpc	r25, r1
    18ca:	71 f1       	breq	.+92     	; 0x1928 <EXI_TriggerEdge+0xdc>
    18cc:	be c0       	rjmp	.+380    	; 0x1a4a <EXI_TriggerEdge+0x1fe>
		case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC00);
    18ce:	a5 e5       	ldi	r26, 0x55	; 85
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	e5 e5       	ldi	r30, 0x55	; 85
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	8e 7f       	andi	r24, 0xFE	; 254
    18da:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
    18dc:	a5 e5       	ldi	r26, 0x55	; 85
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	e5 e5       	ldi	r30, 0x55	; 85
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	8d 7f       	andi	r24, 0xFD	; 253
    18e8:	8c 93       	st	X, r24
    18ea:	af c0       	rjmp	.+350    	; 0x1a4a <EXI_TriggerEdge+0x1fe>
			break;
		case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC00);
    18ec:	a5 e5       	ldi	r26, 0x55	; 85
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e5 e5       	ldi	r30, 0x55	; 85
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	81 60       	ori	r24, 0x01	; 1
    18f8:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
    18fa:	a5 e5       	ldi	r26, 0x55	; 85
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	e5 e5       	ldi	r30, 0x55	; 85
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	8d 7f       	andi	r24, 0xFD	; 253
    1906:	8c 93       	st	X, r24
    1908:	a0 c0       	rjmp	.+320    	; 0x1a4a <EXI_TriggerEdge+0x1fe>
			break;
		case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC00);
    190a:	a5 e5       	ldi	r26, 0x55	; 85
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	e5 e5       	ldi	r30, 0x55	; 85
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	8e 7f       	andi	r24, 0xFE	; 254
    1916:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    1918:	a5 e5       	ldi	r26, 0x55	; 85
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e5 e5       	ldi	r30, 0x55	; 85
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	82 60       	ori	r24, 0x02	; 2
    1924:	8c 93       	st	X, r24
    1926:	91 c0       	rjmp	.+290    	; 0x1a4a <EXI_TriggerEdge+0x1fe>
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
    1928:	a5 e5       	ldi	r26, 0x55	; 85
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	e5 e5       	ldi	r30, 0x55	; 85
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	81 60       	ori	r24, 0x01	; 1
    1934:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    1936:	a5 e5       	ldi	r26, 0x55	; 85
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	e5 e5       	ldi	r30, 0x55	; 85
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	82 60       	ori	r24, 0x02	; 2
    1942:	8c 93       	st	X, r24
    1944:	82 c0       	rjmp	.+260    	; 0x1a4a <EXI_TriggerEdge+0x1fe>
			break;
		}
		break;
		case EX_INT1:
			switch(edge){
    1946:	8a 81       	ldd	r24, Y+2	; 0x02
    1948:	28 2f       	mov	r18, r24
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	3e 83       	std	Y+6, r19	; 0x06
    194e:	2d 83       	std	Y+5, r18	; 0x05
    1950:	8d 81       	ldd	r24, Y+5	; 0x05
    1952:	9e 81       	ldd	r25, Y+6	; 0x06
    1954:	81 30       	cpi	r24, 0x01	; 1
    1956:	91 05       	cpc	r25, r1
    1958:	21 f1       	breq	.+72     	; 0x19a2 <EXI_TriggerEdge+0x156>
    195a:	2d 81       	ldd	r18, Y+5	; 0x05
    195c:	3e 81       	ldd	r19, Y+6	; 0x06
    195e:	22 30       	cpi	r18, 0x02	; 2
    1960:	31 05       	cpc	r19, r1
    1962:	2c f4       	brge	.+10     	; 0x196e <EXI_TriggerEdge+0x122>
    1964:	8d 81       	ldd	r24, Y+5	; 0x05
    1966:	9e 81       	ldd	r25, Y+6	; 0x06
    1968:	00 97       	sbiw	r24, 0x00	; 0
    196a:	61 f0       	breq	.+24     	; 0x1984 <EXI_TriggerEdge+0x138>
    196c:	6e c0       	rjmp	.+220    	; 0x1a4a <EXI_TriggerEdge+0x1fe>
    196e:	2d 81       	ldd	r18, Y+5	; 0x05
    1970:	3e 81       	ldd	r19, Y+6	; 0x06
    1972:	22 30       	cpi	r18, 0x02	; 2
    1974:	31 05       	cpc	r19, r1
    1976:	21 f1       	breq	.+72     	; 0x19c0 <EXI_TriggerEdge+0x174>
    1978:	8d 81       	ldd	r24, Y+5	; 0x05
    197a:	9e 81       	ldd	r25, Y+6	; 0x06
    197c:	83 30       	cpi	r24, 0x03	; 3
    197e:	91 05       	cpc	r25, r1
    1980:	71 f1       	breq	.+92     	; 0x19de <EXI_TriggerEdge+0x192>
    1982:	63 c0       	rjmp	.+198    	; 0x1a4a <EXI_TriggerEdge+0x1fe>
			case LOW_LEVEL:
				CLR_BIT(MCUCR,ISC10);
    1984:	a5 e5       	ldi	r26, 0x55	; 85
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	e5 e5       	ldi	r30, 0x55	; 85
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	8b 7f       	andi	r24, 0xFB	; 251
    1990:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC11);
    1992:	a5 e5       	ldi	r26, 0x55	; 85
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	e5 e5       	ldi	r30, 0x55	; 85
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	87 7f       	andi	r24, 0xF7	; 247
    199e:	8c 93       	st	X, r24
    19a0:	54 c0       	rjmp	.+168    	; 0x1a4a <EXI_TriggerEdge+0x1fe>
				break;
			case ANY_LOGIC_CHANGE:
				SET_BIT(MCUCR,ISC10);
    19a2:	a5 e5       	ldi	r26, 0x55	; 85
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	e5 e5       	ldi	r30, 0x55	; 85
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	84 60       	ori	r24, 0x04	; 4
    19ae:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC11);
    19b0:	a5 e5       	ldi	r26, 0x55	; 85
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	e5 e5       	ldi	r30, 0x55	; 85
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	87 7f       	andi	r24, 0xF7	; 247
    19bc:	8c 93       	st	X, r24
    19be:	45 c0       	rjmp	.+138    	; 0x1a4a <EXI_TriggerEdge+0x1fe>
				break;
			case FALLING_EDGE:
				CLR_BIT(MCUCR,ISC10);
    19c0:	a5 e5       	ldi	r26, 0x55	; 85
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	e5 e5       	ldi	r30, 0x55	; 85
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	8b 7f       	andi	r24, 0xFB	; 251
    19cc:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
    19ce:	a5 e5       	ldi	r26, 0x55	; 85
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	e5 e5       	ldi	r30, 0x55	; 85
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	88 60       	ori	r24, 0x08	; 8
    19da:	8c 93       	st	X, r24
    19dc:	36 c0       	rjmp	.+108    	; 0x1a4a <EXI_TriggerEdge+0x1fe>
				break;
			case RISING_EDGE:
				SET_BIT(MCUCR,ISC10);
    19de:	a5 e5       	ldi	r26, 0x55	; 85
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	e5 e5       	ldi	r30, 0x55	; 85
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	84 60       	ori	r24, 0x04	; 4
    19ea:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
    19ec:	a5 e5       	ldi	r26, 0x55	; 85
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	e5 e5       	ldi	r30, 0x55	; 85
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	88 60       	ori	r24, 0x08	; 8
    19f8:	8c 93       	st	X, r24
    19fa:	27 c0       	rjmp	.+78     	; 0x1a4a <EXI_TriggerEdge+0x1fe>
				break;
			}
			break;
			case EX_INT2:
				switch(edge){
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	28 2f       	mov	r18, r24
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	3c 83       	std	Y+4, r19	; 0x04
    1a04:	2b 83       	std	Y+3, r18	; 0x03
    1a06:	8b 81       	ldd	r24, Y+3	; 0x03
    1a08:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0a:	82 30       	cpi	r24, 0x02	; 2
    1a0c:	91 05       	cpc	r25, r1
    1a0e:	31 f0       	breq	.+12     	; 0x1a1c <EXI_TriggerEdge+0x1d0>
    1a10:	2b 81       	ldd	r18, Y+3	; 0x03
    1a12:	3c 81       	ldd	r19, Y+4	; 0x04
    1a14:	23 30       	cpi	r18, 0x03	; 3
    1a16:	31 05       	cpc	r19, r1
    1a18:	49 f0       	breq	.+18     	; 0x1a2c <EXI_TriggerEdge+0x1e0>
    1a1a:	10 c0       	rjmp	.+32     	; 0x1a3c <EXI_TriggerEdge+0x1f0>
				case FALLING_EDGE:
					CLR_BIT(MCUCSR,ISC2);
    1a1c:	a4 e5       	ldi	r26, 0x54	; 84
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	e4 e5       	ldi	r30, 0x54	; 84
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	8f 7b       	andi	r24, 0xBF	; 191
    1a28:	8c 93       	st	X, r24
    1a2a:	0f c0       	rjmp	.+30     	; 0x1a4a <EXI_TriggerEdge+0x1fe>
					break;
				case RISING_EDGE:
					SET_BIT(MCUCSR,ISC2);
    1a2c:	a4 e5       	ldi	r26, 0x54	; 84
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	e4 e5       	ldi	r30, 0x54	; 84
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	80 64       	ori	r24, 0x40	; 64
    1a38:	8c 93       	st	X, r24
    1a3a:	07 c0       	rjmp	.+14     	; 0x1a4a <EXI_TriggerEdge+0x1fe>
					break;
				default:   // Because we haven't handled all cases just cuz of data sheet
					CLR_BIT(MCUCSR,ISC2);
    1a3c:	a4 e5       	ldi	r26, 0x54	; 84
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	e4 e5       	ldi	r30, 0x54	; 84
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	8f 7b       	andi	r24, 0xBF	; 191
    1a48:	8c 93       	st	X, r24
				}
				break;
	}
}
    1a4a:	2a 96       	adiw	r28, 0x0a	; 10
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	f8 94       	cli
    1a50:	de bf       	out	0x3e, r29	; 62
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	cd bf       	out	0x3d, r28	; 61
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	08 95       	ret

00001a5c <__vector_1>:
/*                     ISR                                              */
/************************************************************************/

/* What if the user forgot to send a function to SetCallBack, We made an initialization with NULLPTR, So we can't call a NULLPTR, it will give undefined behavior  */

ISR(INT0_vect){
    1a5c:	1f 92       	push	r1
    1a5e:	0f 92       	push	r0
    1a60:	0f b6       	in	r0, 0x3f	; 63
    1a62:	0f 92       	push	r0
    1a64:	11 24       	eor	r1, r1
    1a66:	2f 93       	push	r18
    1a68:	3f 93       	push	r19
    1a6a:	4f 93       	push	r20
    1a6c:	5f 93       	push	r21
    1a6e:	6f 93       	push	r22
    1a70:	7f 93       	push	r23
    1a72:	8f 93       	push	r24
    1a74:	9f 93       	push	r25
    1a76:	af 93       	push	r26
    1a78:	bf 93       	push	r27
    1a7a:	ef 93       	push	r30
    1a7c:	ff 93       	push	r31
    1a7e:	df 93       	push	r29
    1a80:	cf 93       	push	r28
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62
	if(INT0_Fptr != NULLPTR){
    1a86:	80 91 f4 01 	lds	r24, 0x01F4
    1a8a:	90 91 f5 01 	lds	r25, 0x01F5
    1a8e:	00 97       	sbiw	r24, 0x00	; 0
    1a90:	29 f0       	breq	.+10     	; 0x1a9c <__vector_1+0x40>
		INT0_Fptr();
    1a92:	e0 91 f4 01 	lds	r30, 0x01F4
    1a96:	f0 91 f5 01 	lds	r31, 0x01F5
    1a9a:	09 95       	icall
	}
}
    1a9c:	cf 91       	pop	r28
    1a9e:	df 91       	pop	r29
    1aa0:	ff 91       	pop	r31
    1aa2:	ef 91       	pop	r30
    1aa4:	bf 91       	pop	r27
    1aa6:	af 91       	pop	r26
    1aa8:	9f 91       	pop	r25
    1aaa:	8f 91       	pop	r24
    1aac:	7f 91       	pop	r23
    1aae:	6f 91       	pop	r22
    1ab0:	5f 91       	pop	r21
    1ab2:	4f 91       	pop	r20
    1ab4:	3f 91       	pop	r19
    1ab6:	2f 91       	pop	r18
    1ab8:	0f 90       	pop	r0
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	0f 90       	pop	r0
    1abe:	1f 90       	pop	r1
    1ac0:	18 95       	reti

00001ac2 <__vector_2>:

ISR(INT1_vect){
    1ac2:	1f 92       	push	r1
    1ac4:	0f 92       	push	r0
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	0f 92       	push	r0
    1aca:	11 24       	eor	r1, r1
    1acc:	2f 93       	push	r18
    1ace:	3f 93       	push	r19
    1ad0:	4f 93       	push	r20
    1ad2:	5f 93       	push	r21
    1ad4:	6f 93       	push	r22
    1ad6:	7f 93       	push	r23
    1ad8:	8f 93       	push	r24
    1ada:	9f 93       	push	r25
    1adc:	af 93       	push	r26
    1ade:	bf 93       	push	r27
    1ae0:	ef 93       	push	r30
    1ae2:	ff 93       	push	r31
    1ae4:	df 93       	push	r29
    1ae6:	cf 93       	push	r28
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
	if(INT1_Fptr != NULLPTR){
    1aec:	80 91 f6 01 	lds	r24, 0x01F6
    1af0:	90 91 f7 01 	lds	r25, 0x01F7
    1af4:	00 97       	sbiw	r24, 0x00	; 0
    1af6:	29 f0       	breq	.+10     	; 0x1b02 <__vector_2+0x40>
		INT1_Fptr();
    1af8:	e0 91 f6 01 	lds	r30, 0x01F6
    1afc:	f0 91 f7 01 	lds	r31, 0x01F7
    1b00:	09 95       	icall
	}
}
    1b02:	cf 91       	pop	r28
    1b04:	df 91       	pop	r29
    1b06:	ff 91       	pop	r31
    1b08:	ef 91       	pop	r30
    1b0a:	bf 91       	pop	r27
    1b0c:	af 91       	pop	r26
    1b0e:	9f 91       	pop	r25
    1b10:	8f 91       	pop	r24
    1b12:	7f 91       	pop	r23
    1b14:	6f 91       	pop	r22
    1b16:	5f 91       	pop	r21
    1b18:	4f 91       	pop	r20
    1b1a:	3f 91       	pop	r19
    1b1c:	2f 91       	pop	r18
    1b1e:	0f 90       	pop	r0
    1b20:	0f be       	out	0x3f, r0	; 63
    1b22:	0f 90       	pop	r0
    1b24:	1f 90       	pop	r1
    1b26:	18 95       	reti

00001b28 <__vector_3>:

ISR(INT2_vect){
    1b28:	1f 92       	push	r1
    1b2a:	0f 92       	push	r0
    1b2c:	0f b6       	in	r0, 0x3f	; 63
    1b2e:	0f 92       	push	r0
    1b30:	11 24       	eor	r1, r1
    1b32:	2f 93       	push	r18
    1b34:	3f 93       	push	r19
    1b36:	4f 93       	push	r20
    1b38:	5f 93       	push	r21
    1b3a:	6f 93       	push	r22
    1b3c:	7f 93       	push	r23
    1b3e:	8f 93       	push	r24
    1b40:	9f 93       	push	r25
    1b42:	af 93       	push	r26
    1b44:	bf 93       	push	r27
    1b46:	ef 93       	push	r30
    1b48:	ff 93       	push	r31
    1b4a:	df 93       	push	r29
    1b4c:	cf 93       	push	r28
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
	if(INT2_Fptr != NULLPTR){
    1b52:	80 91 f8 01 	lds	r24, 0x01F8
    1b56:	90 91 f9 01 	lds	r25, 0x01F9
    1b5a:	00 97       	sbiw	r24, 0x00	; 0
    1b5c:	29 f0       	breq	.+10     	; 0x1b68 <__vector_3+0x40>
		INT2_Fptr();
    1b5e:	e0 91 f8 01 	lds	r30, 0x01F8
    1b62:	f0 91 f9 01 	lds	r31, 0x01F9
    1b66:	09 95       	icall
	}
}
    1b68:	cf 91       	pop	r28
    1b6a:	df 91       	pop	r29
    1b6c:	ff 91       	pop	r31
    1b6e:	ef 91       	pop	r30
    1b70:	bf 91       	pop	r27
    1b72:	af 91       	pop	r26
    1b74:	9f 91       	pop	r25
    1b76:	8f 91       	pop	r24
    1b78:	7f 91       	pop	r23
    1b7a:	6f 91       	pop	r22
    1b7c:	5f 91       	pop	r21
    1b7e:	4f 91       	pop	r20
    1b80:	3f 91       	pop	r19
    1b82:	2f 91       	pop	r18
    1b84:	0f 90       	pop	r0
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	0f 90       	pop	r0
    1b8a:	1f 90       	pop	r1
    1b8c:	18 95       	reti

00001b8e <DIO_ES_tSetPinDirection>:
 * DIO_ES_tSetPinDirection is used to set pin direction
 * ( INPUT or OUTPUT )
 */

ES_t DIO_ES_tSetPinDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Dir_Type copy_u8_PinDirection)
{
    1b8e:	df 93       	push	r29
    1b90:	cf 93       	push	r28
    1b92:	00 d0       	rcall	.+0      	; 0x1b94 <DIO_ES_tSetPinDirection+0x6>
    1b94:	00 d0       	rcall	.+0      	; 0x1b96 <DIO_ES_tSetPinDirection+0x8>
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
    1b9a:	89 83       	std	Y+1, r24	; 0x01
    1b9c:	6a 83       	std	Y+2, r22	; 0x02
    1b9e:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    1ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba2:	88 30       	cpi	r24, 0x08	; 8
    1ba4:	18 f0       	brcs	.+6      	; 0x1bac <DIO_ES_tSetPinDirection+0x1e>
		return ES_NOT_OK;
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	8c 83       	std	Y+4, r24	; 0x04
    1baa:	d8 c0       	rjmp	.+432    	; 0x1d5c <DIO_ES_tSetPinDirection+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    1bac:	89 81       	ldd	r24, Y+1	; 0x01
    1bae:	88 23       	and	r24, r24
    1bb0:	91 f5       	brne	.+100    	; 0x1c16 <DIO_ES_tSetPinDirection+0x88>
		if(copy_u8_PinDirection == OUTPUT){
    1bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb4:	81 30       	cpi	r24, 0x01	; 1
    1bb6:	a1 f4       	brne	.+40     	; 0x1be0 <DIO_ES_tSetPinDirection+0x52>
			SET_BIT(DDRA,copy_u8_PinId);
    1bb8:	aa e3       	ldi	r26, 0x3A	; 58
    1bba:	b0 e0       	ldi	r27, 0x00	; 0
    1bbc:	ea e3       	ldi	r30, 0x3A	; 58
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	48 2f       	mov	r20, r24
    1bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc6:	28 2f       	mov	r18, r24
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	02 2e       	mov	r0, r18
    1bd0:	02 c0       	rjmp	.+4      	; 0x1bd6 <DIO_ES_tSetPinDirection+0x48>
    1bd2:	88 0f       	add	r24, r24
    1bd4:	99 1f       	adc	r25, r25
    1bd6:	0a 94       	dec	r0
    1bd8:	e2 f7       	brpl	.-8      	; 0x1bd2 <DIO_ES_tSetPinDirection+0x44>
    1bda:	84 2b       	or	r24, r20
    1bdc:	8c 93       	st	X, r24
    1bde:	bd c0       	rjmp	.+378    	; 0x1d5a <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    1be0:	8b 81       	ldd	r24, Y+3	; 0x03
    1be2:	88 23       	and	r24, r24
    1be4:	a9 f4       	brne	.+42     	; 0x1c10 <DIO_ES_tSetPinDirection+0x82>
			CLR_BIT(DDRA,copy_u8_PinId);
    1be6:	aa e3       	ldi	r26, 0x3A	; 58
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	ea e3       	ldi	r30, 0x3A	; 58
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	48 2f       	mov	r20, r24
    1bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf4:	28 2f       	mov	r18, r24
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	02 2e       	mov	r0, r18
    1bfe:	02 c0       	rjmp	.+4      	; 0x1c04 <DIO_ES_tSetPinDirection+0x76>
    1c00:	88 0f       	add	r24, r24
    1c02:	99 1f       	adc	r25, r25
    1c04:	0a 94       	dec	r0
    1c06:	e2 f7       	brpl	.-8      	; 0x1c00 <DIO_ES_tSetPinDirection+0x72>
    1c08:	80 95       	com	r24
    1c0a:	84 23       	and	r24, r20
    1c0c:	8c 93       	st	X, r24
    1c0e:	a5 c0       	rjmp	.+330    	; 0x1d5a <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	8c 83       	std	Y+4, r24	; 0x04
    1c14:	a3 c0       	rjmp	.+326    	; 0x1d5c <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	81 30       	cpi	r24, 0x01	; 1
    1c1a:	91 f5       	brne	.+100    	; 0x1c80 <DIO_ES_tSetPinDirection+0xf2>
		if(copy_u8_PinDirection == OUTPUT){
    1c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1e:	81 30       	cpi	r24, 0x01	; 1
    1c20:	a1 f4       	brne	.+40     	; 0x1c4a <DIO_ES_tSetPinDirection+0xbc>
			SET_BIT(DDRB,copy_u8_PinId);
    1c22:	a7 e3       	ldi	r26, 0x37	; 55
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	e7 e3       	ldi	r30, 0x37	; 55
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	48 2f       	mov	r20, r24
    1c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c30:	28 2f       	mov	r18, r24
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	02 2e       	mov	r0, r18
    1c3a:	02 c0       	rjmp	.+4      	; 0x1c40 <DIO_ES_tSetPinDirection+0xb2>
    1c3c:	88 0f       	add	r24, r24
    1c3e:	99 1f       	adc	r25, r25
    1c40:	0a 94       	dec	r0
    1c42:	e2 f7       	brpl	.-8      	; 0x1c3c <DIO_ES_tSetPinDirection+0xae>
    1c44:	84 2b       	or	r24, r20
    1c46:	8c 93       	st	X, r24
    1c48:	88 c0       	rjmp	.+272    	; 0x1d5a <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    1c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4c:	88 23       	and	r24, r24
    1c4e:	a9 f4       	brne	.+42     	; 0x1c7a <DIO_ES_tSetPinDirection+0xec>
			CLR_BIT(DDRB,copy_u8_PinId);
    1c50:	a7 e3       	ldi	r26, 0x37	; 55
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	e7 e3       	ldi	r30, 0x37	; 55
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	48 2f       	mov	r20, r24
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	28 2f       	mov	r18, r24
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	02 2e       	mov	r0, r18
    1c68:	02 c0       	rjmp	.+4      	; 0x1c6e <DIO_ES_tSetPinDirection+0xe0>
    1c6a:	88 0f       	add	r24, r24
    1c6c:	99 1f       	adc	r25, r25
    1c6e:	0a 94       	dec	r0
    1c70:	e2 f7       	brpl	.-8      	; 0x1c6a <DIO_ES_tSetPinDirection+0xdc>
    1c72:	80 95       	com	r24
    1c74:	84 23       	and	r24, r20
    1c76:	8c 93       	st	X, r24
    1c78:	70 c0       	rjmp	.+224    	; 0x1d5a <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	8c 83       	std	Y+4, r24	; 0x04
    1c7e:	6e c0       	rjmp	.+220    	; 0x1d5c <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	82 30       	cpi	r24, 0x02	; 2
    1c84:	91 f5       	brne	.+100    	; 0x1cea <DIO_ES_tSetPinDirection+0x15c>
		if(copy_u8_PinDirection == OUTPUT){
    1c86:	8b 81       	ldd	r24, Y+3	; 0x03
    1c88:	81 30       	cpi	r24, 0x01	; 1
    1c8a:	a1 f4       	brne	.+40     	; 0x1cb4 <DIO_ES_tSetPinDirection+0x126>
			SET_BIT(DDRC,copy_u8_PinId);
    1c8c:	a4 e3       	ldi	r26, 0x34	; 52
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	e4 e3       	ldi	r30, 0x34	; 52
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	48 2f       	mov	r20, r24
    1c98:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9a:	28 2f       	mov	r18, r24
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	02 2e       	mov	r0, r18
    1ca4:	02 c0       	rjmp	.+4      	; 0x1caa <DIO_ES_tSetPinDirection+0x11c>
    1ca6:	88 0f       	add	r24, r24
    1ca8:	99 1f       	adc	r25, r25
    1caa:	0a 94       	dec	r0
    1cac:	e2 f7       	brpl	.-8      	; 0x1ca6 <DIO_ES_tSetPinDirection+0x118>
    1cae:	84 2b       	or	r24, r20
    1cb0:	8c 93       	st	X, r24
    1cb2:	53 c0       	rjmp	.+166    	; 0x1d5a <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    1cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb6:	88 23       	and	r24, r24
    1cb8:	a9 f4       	brne	.+42     	; 0x1ce4 <DIO_ES_tSetPinDirection+0x156>
			CLR_BIT(DDRC,copy_u8_PinId);
    1cba:	a4 e3       	ldi	r26, 0x34	; 52
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	e4 e3       	ldi	r30, 0x34	; 52
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	48 2f       	mov	r20, r24
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc8:	28 2f       	mov	r18, r24
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	02 2e       	mov	r0, r18
    1cd2:	02 c0       	rjmp	.+4      	; 0x1cd8 <DIO_ES_tSetPinDirection+0x14a>
    1cd4:	88 0f       	add	r24, r24
    1cd6:	99 1f       	adc	r25, r25
    1cd8:	0a 94       	dec	r0
    1cda:	e2 f7       	brpl	.-8      	; 0x1cd4 <DIO_ES_tSetPinDirection+0x146>
    1cdc:	80 95       	com	r24
    1cde:	84 23       	and	r24, r20
    1ce0:	8c 93       	st	X, r24
    1ce2:	3b c0       	rjmp	.+118    	; 0x1d5a <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	8c 83       	std	Y+4, r24	; 0x04
    1ce8:	39 c0       	rjmp	.+114    	; 0x1d5c <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	83 30       	cpi	r24, 0x03	; 3
    1cee:	91 f5       	brne	.+100    	; 0x1d54 <DIO_ES_tSetPinDirection+0x1c6>
		if(copy_u8_PinDirection == OUTPUT){
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	81 30       	cpi	r24, 0x01	; 1
    1cf4:	a1 f4       	brne	.+40     	; 0x1d1e <DIO_ES_tSetPinDirection+0x190>
			SET_BIT(DDRD,copy_u8_PinId);
    1cf6:	a1 e3       	ldi	r26, 0x31	; 49
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e1 e3       	ldi	r30, 0x31	; 49
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	48 2f       	mov	r20, r24
    1d02:	8a 81       	ldd	r24, Y+2	; 0x02
    1d04:	28 2f       	mov	r18, r24
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	02 2e       	mov	r0, r18
    1d0e:	02 c0       	rjmp	.+4      	; 0x1d14 <DIO_ES_tSetPinDirection+0x186>
    1d10:	88 0f       	add	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	0a 94       	dec	r0
    1d16:	e2 f7       	brpl	.-8      	; 0x1d10 <DIO_ES_tSetPinDirection+0x182>
    1d18:	84 2b       	or	r24, r20
    1d1a:	8c 93       	st	X, r24
    1d1c:	1e c0       	rjmp	.+60     	; 0x1d5a <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	88 23       	and	r24, r24
    1d22:	a9 f4       	brne	.+42     	; 0x1d4e <DIO_ES_tSetPinDirection+0x1c0>
			CLR_BIT(DDRD,copy_u8_PinId);
    1d24:	a1 e3       	ldi	r26, 0x31	; 49
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	e1 e3       	ldi	r30, 0x31	; 49
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	48 2f       	mov	r20, r24
    1d30:	8a 81       	ldd	r24, Y+2	; 0x02
    1d32:	28 2f       	mov	r18, r24
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	02 2e       	mov	r0, r18
    1d3c:	02 c0       	rjmp	.+4      	; 0x1d42 <DIO_ES_tSetPinDirection+0x1b4>
    1d3e:	88 0f       	add	r24, r24
    1d40:	99 1f       	adc	r25, r25
    1d42:	0a 94       	dec	r0
    1d44:	e2 f7       	brpl	.-8      	; 0x1d3e <DIO_ES_tSetPinDirection+0x1b0>
    1d46:	80 95       	com	r24
    1d48:	84 23       	and	r24, r20
    1d4a:	8c 93       	st	X, r24
    1d4c:	06 c0       	rjmp	.+12     	; 0x1d5a <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	8c 83       	std	Y+4, r24	; 0x04
    1d52:	04 c0       	rjmp	.+8      	; 0x1d5c <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else{
		return ES_NOT_OK;
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	8c 83       	std	Y+4, r24	; 0x04
    1d58:	01 c0       	rjmp	.+2      	; 0x1d5c <DIO_ES_tSetPinDirection+0x1ce>
	}
	return ES_OK;
    1d5a:	1c 82       	std	Y+4, r1	; 0x04
    1d5c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1d5e:	0f 90       	pop	r0
    1d60:	0f 90       	pop	r0
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	cf 91       	pop	r28
    1d68:	df 91       	pop	r29
    1d6a:	08 95       	ret

00001d6c <DIO_ES_tSetPinValue>:
 * DIO_ES_tSetPinValue is used to set pin value
 * ( LOW or HIGH )
 */

ES_t DIO_ES_tSetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type copy_u8_PinValue)
{
    1d6c:	df 93       	push	r29
    1d6e:	cf 93       	push	r28
    1d70:	00 d0       	rcall	.+0      	; 0x1d72 <DIO_ES_tSetPinValue+0x6>
    1d72:	00 d0       	rcall	.+0      	; 0x1d74 <DIO_ES_tSetPinValue+0x8>
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    1d78:	89 83       	std	Y+1, r24	; 0x01
    1d7a:	6a 83       	std	Y+2, r22	; 0x02
    1d7c:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	88 30       	cpi	r24, 0x08	; 8
    1d82:	18 f0       	brcs	.+6      	; 0x1d8a <DIO_ES_tSetPinValue+0x1e>
		return ES_NOT_OK;
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	8c 83       	std	Y+4, r24	; 0x04
    1d88:	d8 c0       	rjmp	.+432    	; 0x1f3a <DIO_ES_tSetPinValue+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    1d8a:	89 81       	ldd	r24, Y+1	; 0x01
    1d8c:	88 23       	and	r24, r24
    1d8e:	91 f5       	brne	.+100    	; 0x1df4 <DIO_ES_tSetPinValue+0x88>
		if(copy_u8_PinValue == HIGH){
    1d90:	8b 81       	ldd	r24, Y+3	; 0x03
    1d92:	81 30       	cpi	r24, 0x01	; 1
    1d94:	a1 f4       	brne	.+40     	; 0x1dbe <DIO_ES_tSetPinValue+0x52>
			SET_BIT(PORTA,copy_u8_PinId);
    1d96:	ab e3       	ldi	r26, 0x3B	; 59
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	eb e3       	ldi	r30, 0x3B	; 59
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	48 2f       	mov	r20, r24
    1da2:	8a 81       	ldd	r24, Y+2	; 0x02
    1da4:	28 2f       	mov	r18, r24
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	02 2e       	mov	r0, r18
    1dae:	02 c0       	rjmp	.+4      	; 0x1db4 <DIO_ES_tSetPinValue+0x48>
    1db0:	88 0f       	add	r24, r24
    1db2:	99 1f       	adc	r25, r25
    1db4:	0a 94       	dec	r0
    1db6:	e2 f7       	brpl	.-8      	; 0x1db0 <DIO_ES_tSetPinValue+0x44>
    1db8:	84 2b       	or	r24, r20
    1dba:	8c 93       	st	X, r24
    1dbc:	bd c0       	rjmp	.+378    	; 0x1f38 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	88 23       	and	r24, r24
    1dc2:	a9 f4       	brne	.+42     	; 0x1dee <DIO_ES_tSetPinValue+0x82>
			CLR_BIT(PORTA,copy_u8_PinId);
    1dc4:	ab e3       	ldi	r26, 0x3B	; 59
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	eb e3       	ldi	r30, 0x3B	; 59
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	48 2f       	mov	r20, r24
    1dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	02 2e       	mov	r0, r18
    1ddc:	02 c0       	rjmp	.+4      	; 0x1de2 <DIO_ES_tSetPinValue+0x76>
    1dde:	88 0f       	add	r24, r24
    1de0:	99 1f       	adc	r25, r25
    1de2:	0a 94       	dec	r0
    1de4:	e2 f7       	brpl	.-8      	; 0x1dde <DIO_ES_tSetPinValue+0x72>
    1de6:	80 95       	com	r24
    1de8:	84 23       	and	r24, r20
    1dea:	8c 93       	st	X, r24
    1dec:	a5 c0       	rjmp	.+330    	; 0x1f38 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	8c 83       	std	Y+4, r24	; 0x04
    1df2:	a3 c0       	rjmp	.+326    	; 0x1f3a <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	81 30       	cpi	r24, 0x01	; 1
    1df8:	91 f5       	brne	.+100    	; 0x1e5e <DIO_ES_tSetPinValue+0xf2>
		if(copy_u8_PinValue == HIGH){
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	81 30       	cpi	r24, 0x01	; 1
    1dfe:	a1 f4       	brne	.+40     	; 0x1e28 <DIO_ES_tSetPinValue+0xbc>
			SET_BIT(PORTB,copy_u8_PinId);
    1e00:	a8 e3       	ldi	r26, 0x38	; 56
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e8 e3       	ldi	r30, 0x38	; 56
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	48 2f       	mov	r20, r24
    1e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0e:	28 2f       	mov	r18, r24
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	02 2e       	mov	r0, r18
    1e18:	02 c0       	rjmp	.+4      	; 0x1e1e <DIO_ES_tSetPinValue+0xb2>
    1e1a:	88 0f       	add	r24, r24
    1e1c:	99 1f       	adc	r25, r25
    1e1e:	0a 94       	dec	r0
    1e20:	e2 f7       	brpl	.-8      	; 0x1e1a <DIO_ES_tSetPinValue+0xae>
    1e22:	84 2b       	or	r24, r20
    1e24:	8c 93       	st	X, r24
    1e26:	88 c0       	rjmp	.+272    	; 0x1f38 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2a:	88 23       	and	r24, r24
    1e2c:	a9 f4       	brne	.+42     	; 0x1e58 <DIO_ES_tSetPinValue+0xec>
			CLR_BIT(PORTB,copy_u8_PinId);
    1e2e:	a8 e3       	ldi	r26, 0x38	; 56
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	e8 e3       	ldi	r30, 0x38	; 56
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	48 2f       	mov	r20, r24
    1e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3c:	28 2f       	mov	r18, r24
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	02 2e       	mov	r0, r18
    1e46:	02 c0       	rjmp	.+4      	; 0x1e4c <DIO_ES_tSetPinValue+0xe0>
    1e48:	88 0f       	add	r24, r24
    1e4a:	99 1f       	adc	r25, r25
    1e4c:	0a 94       	dec	r0
    1e4e:	e2 f7       	brpl	.-8      	; 0x1e48 <DIO_ES_tSetPinValue+0xdc>
    1e50:	80 95       	com	r24
    1e52:	84 23       	and	r24, r20
    1e54:	8c 93       	st	X, r24
    1e56:	70 c0       	rjmp	.+224    	; 0x1f38 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	8c 83       	std	Y+4, r24	; 0x04
    1e5c:	6e c0       	rjmp	.+220    	; 0x1f3a <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	82 30       	cpi	r24, 0x02	; 2
    1e62:	91 f5       	brne	.+100    	; 0x1ec8 <DIO_ES_tSetPinValue+0x15c>
		if(copy_u8_PinValue == HIGH){
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	81 30       	cpi	r24, 0x01	; 1
    1e68:	a1 f4       	brne	.+40     	; 0x1e92 <DIO_ES_tSetPinValue+0x126>
			SET_BIT(PORTC,copy_u8_PinId);
    1e6a:	a5 e3       	ldi	r26, 0x35	; 53
    1e6c:	b0 e0       	ldi	r27, 0x00	; 0
    1e6e:	e5 e3       	ldi	r30, 0x35	; 53
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z
    1e74:	48 2f       	mov	r20, r24
    1e76:	8a 81       	ldd	r24, Y+2	; 0x02
    1e78:	28 2f       	mov	r18, r24
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	02 2e       	mov	r0, r18
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <DIO_ES_tSetPinValue+0x11c>
    1e84:	88 0f       	add	r24, r24
    1e86:	99 1f       	adc	r25, r25
    1e88:	0a 94       	dec	r0
    1e8a:	e2 f7       	brpl	.-8      	; 0x1e84 <DIO_ES_tSetPinValue+0x118>
    1e8c:	84 2b       	or	r24, r20
    1e8e:	8c 93       	st	X, r24
    1e90:	53 c0       	rjmp	.+166    	; 0x1f38 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    1e92:	8b 81       	ldd	r24, Y+3	; 0x03
    1e94:	88 23       	and	r24, r24
    1e96:	a9 f4       	brne	.+42     	; 0x1ec2 <DIO_ES_tSetPinValue+0x156>
			CLR_BIT(PORTC,copy_u8_PinId);
    1e98:	a5 e3       	ldi	r26, 0x35	; 53
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	e5 e3       	ldi	r30, 0x35	; 53
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	48 2f       	mov	r20, r24
    1ea4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea6:	28 2f       	mov	r18, r24
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	02 2e       	mov	r0, r18
    1eb0:	02 c0       	rjmp	.+4      	; 0x1eb6 <DIO_ES_tSetPinValue+0x14a>
    1eb2:	88 0f       	add	r24, r24
    1eb4:	99 1f       	adc	r25, r25
    1eb6:	0a 94       	dec	r0
    1eb8:	e2 f7       	brpl	.-8      	; 0x1eb2 <DIO_ES_tSetPinValue+0x146>
    1eba:	80 95       	com	r24
    1ebc:	84 23       	and	r24, r20
    1ebe:	8c 93       	st	X, r24
    1ec0:	3b c0       	rjmp	.+118    	; 0x1f38 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	8c 83       	std	Y+4, r24	; 0x04
    1ec6:	39 c0       	rjmp	.+114    	; 0x1f3a <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	83 30       	cpi	r24, 0x03	; 3
    1ecc:	91 f5       	brne	.+100    	; 0x1f32 <DIO_ES_tSetPinValue+0x1c6>
		if(copy_u8_PinValue == HIGH){
    1ece:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed0:	81 30       	cpi	r24, 0x01	; 1
    1ed2:	a1 f4       	brne	.+40     	; 0x1efc <DIO_ES_tSetPinValue+0x190>
			SET_BIT(PORTD,copy_u8_PinId);
    1ed4:	a2 e3       	ldi	r26, 0x32	; 50
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	e2 e3       	ldi	r30, 0x32	; 50
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	48 2f       	mov	r20, r24
    1ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee2:	28 2f       	mov	r18, r24
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	02 2e       	mov	r0, r18
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <DIO_ES_tSetPinValue+0x186>
    1eee:	88 0f       	add	r24, r24
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	0a 94       	dec	r0
    1ef4:	e2 f7       	brpl	.-8      	; 0x1eee <DIO_ES_tSetPinValue+0x182>
    1ef6:	84 2b       	or	r24, r20
    1ef8:	8c 93       	st	X, r24
    1efa:	1e c0       	rjmp	.+60     	; 0x1f38 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    1efc:	8b 81       	ldd	r24, Y+3	; 0x03
    1efe:	88 23       	and	r24, r24
    1f00:	a9 f4       	brne	.+42     	; 0x1f2c <DIO_ES_tSetPinValue+0x1c0>
			CLR_BIT(PORTD,copy_u8_PinId);
    1f02:	a2 e3       	ldi	r26, 0x32	; 50
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	e2 e3       	ldi	r30, 0x32	; 50
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	48 2f       	mov	r20, r24
    1f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f10:	28 2f       	mov	r18, r24
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	02 2e       	mov	r0, r18
    1f1a:	02 c0       	rjmp	.+4      	; 0x1f20 <DIO_ES_tSetPinValue+0x1b4>
    1f1c:	88 0f       	add	r24, r24
    1f1e:	99 1f       	adc	r25, r25
    1f20:	0a 94       	dec	r0
    1f22:	e2 f7       	brpl	.-8      	; 0x1f1c <DIO_ES_tSetPinValue+0x1b0>
    1f24:	80 95       	com	r24
    1f26:	84 23       	and	r24, r20
    1f28:	8c 93       	st	X, r24
    1f2a:	06 c0       	rjmp	.+12     	; 0x1f38 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	8c 83       	std	Y+4, r24	; 0x04
    1f30:	04 c0       	rjmp	.+8      	; 0x1f3a <DIO_ES_tSetPinValue+0x1ce>
		}
	}else{
		return ES_NOT_OK;
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	8c 83       	std	Y+4, r24	; 0x04
    1f36:	01 c0       	rjmp	.+2      	; 0x1f3a <DIO_ES_tSetPinValue+0x1ce>
	}
	return ES_OK;
    1f38:	1c 82       	std	Y+4, r1	; 0x04
    1f3a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	0f 90       	pop	r0
    1f44:	cf 91       	pop	r28
    1f46:	df 91       	pop	r29
    1f48:	08 95       	ret

00001f4a <DIO_ES_tGetPinValue>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tGetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type* copy_pu8_PinValue)
{
    1f4a:	df 93       	push	r29
    1f4c:	cf 93       	push	r28
    1f4e:	00 d0       	rcall	.+0      	; 0x1f50 <DIO_ES_tGetPinValue+0x6>
    1f50:	00 d0       	rcall	.+0      	; 0x1f52 <DIO_ES_tGetPinValue+0x8>
    1f52:	0f 92       	push	r0
    1f54:	cd b7       	in	r28, 0x3d	; 61
    1f56:	de b7       	in	r29, 0x3e	; 62
    1f58:	89 83       	std	Y+1, r24	; 0x01
    1f5a:	6a 83       	std	Y+2, r22	; 0x02
    1f5c:	5c 83       	std	Y+4, r21	; 0x04
    1f5e:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    1f60:	8a 81       	ldd	r24, Y+2	; 0x02
    1f62:	88 30       	cpi	r24, 0x08	; 8
    1f64:	18 f0       	brcs	.+6      	; 0x1f6c <DIO_ES_tGetPinValue+0x22>
		return ES_NOT_OK;
    1f66:	41 e0       	ldi	r20, 0x01	; 1
    1f68:	4d 83       	std	Y+5, r20	; 0x05
    1f6a:	60 c0       	rjmp	.+192    	; 0x202c <DIO_ES_tGetPinValue+0xe2>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	88 23       	and	r24, r24
    1f70:	a1 f4       	brne	.+40     	; 0x1f9a <DIO_ES_tGetPinValue+0x50>
		*copy_pu8_PinValue = GET_BIT(PINA,copy_u8_PinId);
    1f72:	e9 e3       	ldi	r30, 0x39	; 57
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 81       	ld	r24, Z
    1f78:	28 2f       	mov	r18, r24
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7e:	88 2f       	mov	r24, r24
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	a9 01       	movw	r20, r18
    1f84:	02 c0       	rjmp	.+4      	; 0x1f8a <DIO_ES_tGetPinValue+0x40>
    1f86:	55 95       	asr	r21
    1f88:	47 95       	ror	r20
    1f8a:	8a 95       	dec	r24
    1f8c:	e2 f7       	brpl	.-8      	; 0x1f86 <DIO_ES_tGetPinValue+0x3c>
    1f8e:	ca 01       	movw	r24, r20
    1f90:	81 70       	andi	r24, 0x01	; 1
    1f92:	eb 81       	ldd	r30, Y+3	; 0x03
    1f94:	fc 81       	ldd	r31, Y+4	; 0x04
    1f96:	80 83       	st	Z, r24
    1f98:	48 c0       	rjmp	.+144    	; 0x202a <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    1f9a:	89 81       	ldd	r24, Y+1	; 0x01
    1f9c:	81 30       	cpi	r24, 0x01	; 1
    1f9e:	a1 f4       	brne	.+40     	; 0x1fc8 <DIO_ES_tGetPinValue+0x7e>
		*copy_pu8_PinValue = GET_BIT(PINB,copy_u8_PinId);
    1fa0:	e6 e3       	ldi	r30, 0x36	; 54
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	28 2f       	mov	r18, r24
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	8a 81       	ldd	r24, Y+2	; 0x02
    1fac:	88 2f       	mov	r24, r24
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	a9 01       	movw	r20, r18
    1fb2:	02 c0       	rjmp	.+4      	; 0x1fb8 <DIO_ES_tGetPinValue+0x6e>
    1fb4:	55 95       	asr	r21
    1fb6:	47 95       	ror	r20
    1fb8:	8a 95       	dec	r24
    1fba:	e2 f7       	brpl	.-8      	; 0x1fb4 <DIO_ES_tGetPinValue+0x6a>
    1fbc:	ca 01       	movw	r24, r20
    1fbe:	81 70       	andi	r24, 0x01	; 1
    1fc0:	eb 81       	ldd	r30, Y+3	; 0x03
    1fc2:	fc 81       	ldd	r31, Y+4	; 0x04
    1fc4:	80 83       	st	Z, r24
    1fc6:	31 c0       	rjmp	.+98     	; 0x202a <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	82 30       	cpi	r24, 0x02	; 2
    1fcc:	a1 f4       	brne	.+40     	; 0x1ff6 <DIO_ES_tGetPinValue+0xac>
		*copy_pu8_PinValue = GET_BIT(PINC,copy_u8_PinId);
    1fce:	e3 e3       	ldi	r30, 0x33	; 51
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	28 2f       	mov	r18, r24
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fda:	88 2f       	mov	r24, r24
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	a9 01       	movw	r20, r18
    1fe0:	02 c0       	rjmp	.+4      	; 0x1fe6 <DIO_ES_tGetPinValue+0x9c>
    1fe2:	55 95       	asr	r21
    1fe4:	47 95       	ror	r20
    1fe6:	8a 95       	dec	r24
    1fe8:	e2 f7       	brpl	.-8      	; 0x1fe2 <DIO_ES_tGetPinValue+0x98>
    1fea:	ca 01       	movw	r24, r20
    1fec:	81 70       	andi	r24, 0x01	; 1
    1fee:	eb 81       	ldd	r30, Y+3	; 0x03
    1ff0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ff2:	80 83       	st	Z, r24
    1ff4:	1a c0       	rjmp	.+52     	; 0x202a <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
    1ff8:	83 30       	cpi	r24, 0x03	; 3
    1ffa:	a1 f4       	brne	.+40     	; 0x2024 <DIO_ES_tGetPinValue+0xda>
		*copy_pu8_PinValue = GET_BIT(PIND,copy_u8_PinId);
    1ffc:	e0 e3       	ldi	r30, 0x30	; 48
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	28 2f       	mov	r18, r24
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	8a 81       	ldd	r24, Y+2	; 0x02
    2008:	88 2f       	mov	r24, r24
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	a9 01       	movw	r20, r18
    200e:	02 c0       	rjmp	.+4      	; 0x2014 <DIO_ES_tGetPinValue+0xca>
    2010:	55 95       	asr	r21
    2012:	47 95       	ror	r20
    2014:	8a 95       	dec	r24
    2016:	e2 f7       	brpl	.-8      	; 0x2010 <DIO_ES_tGetPinValue+0xc6>
    2018:	ca 01       	movw	r24, r20
    201a:	81 70       	andi	r24, 0x01	; 1
    201c:	eb 81       	ldd	r30, Y+3	; 0x03
    201e:	fc 81       	ldd	r31, Y+4	; 0x04
    2020:	80 83       	st	Z, r24
    2022:	03 c0       	rjmp	.+6      	; 0x202a <DIO_ES_tGetPinValue+0xe0>
	}else{
		return ES_NOT_OK;
    2024:	51 e0       	ldi	r21, 0x01	; 1
    2026:	5d 83       	std	Y+5, r21	; 0x05
    2028:	01 c0       	rjmp	.+2      	; 0x202c <DIO_ES_tGetPinValue+0xe2>
	}
	return ES_OK;
    202a:	1d 82       	std	Y+5, r1	; 0x05
    202c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    202e:	0f 90       	pop	r0
    2030:	0f 90       	pop	r0
    2032:	0f 90       	pop	r0
    2034:	0f 90       	pop	r0
    2036:	0f 90       	pop	r0
    2038:	cf 91       	pop	r28
    203a:	df 91       	pop	r29
    203c:	08 95       	ret

0000203e <DIO_ES_tSetPortDirection>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tSetPortDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Dir_Type copy_u8_PortDirection)
{
    203e:	df 93       	push	r29
    2040:	cf 93       	push	r28
    2042:	00 d0       	rcall	.+0      	; 0x2044 <DIO_ES_tSetPortDirection+0x6>
    2044:	00 d0       	rcall	.+0      	; 0x2046 <DIO_ES_tSetPortDirection+0x8>
    2046:	0f 92       	push	r0
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
    204c:	89 83       	std	Y+1, r24	; 0x01
    204e:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortDirection != OUTPUT) && (copy_u8_PortDirection != OUTPUT)){
    2050:	8a 81       	ldd	r24, Y+2	; 0x02
    2052:	81 30       	cpi	r24, 0x01	; 1
    2054:	31 f0       	breq	.+12     	; 0x2062 <DIO_ES_tSetPortDirection+0x24>
    2056:	8a 81       	ldd	r24, Y+2	; 0x02
    2058:	81 30       	cpi	r24, 0x01	; 1
    205a:	19 f0       	breq	.+6      	; 0x2062 <DIO_ES_tSetPortDirection+0x24>
		return ES_NOT_OK;
    205c:	21 e0       	ldi	r18, 0x01	; 1
    205e:	2d 83       	std	Y+5, r18	; 0x05
    2060:	53 c0       	rjmp	.+166    	; 0x2108 <DIO_ES_tSetPortDirection+0xca>
	}
	switch(copy_u8_PortId){
    2062:	89 81       	ldd	r24, Y+1	; 0x01
    2064:	28 2f       	mov	r18, r24
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	3c 83       	std	Y+4, r19	; 0x04
    206a:	2b 83       	std	Y+3, r18	; 0x03
    206c:	8b 81       	ldd	r24, Y+3	; 0x03
    206e:	9c 81       	ldd	r25, Y+4	; 0x04
    2070:	81 30       	cpi	r24, 0x01	; 1
    2072:	91 05       	cpc	r25, r1
    2074:	09 f1       	breq	.+66     	; 0x20b8 <DIO_ES_tSetPortDirection+0x7a>
    2076:	2b 81       	ldd	r18, Y+3	; 0x03
    2078:	3c 81       	ldd	r19, Y+4	; 0x04
    207a:	22 30       	cpi	r18, 0x02	; 2
    207c:	31 05       	cpc	r19, r1
    207e:	2c f4       	brge	.+10     	; 0x208a <DIO_ES_tSetPortDirection+0x4c>
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	9c 81       	ldd	r25, Y+4	; 0x04
    2084:	00 97       	sbiw	r24, 0x00	; 0
    2086:	61 f0       	breq	.+24     	; 0x20a0 <DIO_ES_tSetPortDirection+0x62>
    2088:	3b c0       	rjmp	.+118    	; 0x2100 <DIO_ES_tSetPortDirection+0xc2>
    208a:	2b 81       	ldd	r18, Y+3	; 0x03
    208c:	3c 81       	ldd	r19, Y+4	; 0x04
    208e:	22 30       	cpi	r18, 0x02	; 2
    2090:	31 05       	cpc	r19, r1
    2092:	f1 f0       	breq	.+60     	; 0x20d0 <DIO_ES_tSetPortDirection+0x92>
    2094:	8b 81       	ldd	r24, Y+3	; 0x03
    2096:	9c 81       	ldd	r25, Y+4	; 0x04
    2098:	83 30       	cpi	r24, 0x03	; 3
    209a:	91 05       	cpc	r25, r1
    209c:	29 f1       	breq	.+74     	; 0x20e8 <DIO_ES_tSetPortDirection+0xaa>
    209e:	30 c0       	rjmp	.+96     	; 0x2100 <DIO_ES_tSetPortDirection+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortDirection == OUTPUT)
    20a0:	8a 81       	ldd	r24, Y+2	; 0x02
    20a2:	81 30       	cpi	r24, 0x01	; 1
    20a4:	29 f4       	brne	.+10     	; 0x20b0 <DIO_ES_tSetPortDirection+0x72>
			DDRA = 0xff;
    20a6:	ea e3       	ldi	r30, 0x3A	; 58
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	8f ef       	ldi	r24, 0xFF	; 255
    20ac:	80 83       	st	Z, r24
    20ae:	2b c0       	rjmp	.+86     	; 0x2106 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRA = 0x00;
    20b0:	ea e3       	ldi	r30, 0x3A	; 58
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	10 82       	st	Z, r1
    20b6:	27 c0       	rjmp	.+78     	; 0x2106 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortDirection == OUTPUT)
    20b8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ba:	81 30       	cpi	r24, 0x01	; 1
    20bc:	29 f4       	brne	.+10     	; 0x20c8 <DIO_ES_tSetPortDirection+0x8a>
			DDRB = 0xff;
    20be:	e7 e3       	ldi	r30, 0x37	; 55
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	8f ef       	ldi	r24, 0xFF	; 255
    20c4:	80 83       	st	Z, r24
    20c6:	1f c0       	rjmp	.+62     	; 0x2106 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRB = 0x00;
    20c8:	e7 e3       	ldi	r30, 0x37	; 55
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	10 82       	st	Z, r1
    20ce:	1b c0       	rjmp	.+54     	; 0x2106 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortDirection == OUTPUT)
    20d0:	8a 81       	ldd	r24, Y+2	; 0x02
    20d2:	81 30       	cpi	r24, 0x01	; 1
    20d4:	29 f4       	brne	.+10     	; 0x20e0 <DIO_ES_tSetPortDirection+0xa2>
			DDRC = 0xff;
    20d6:	e4 e3       	ldi	r30, 0x34	; 52
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	8f ef       	ldi	r24, 0xFF	; 255
    20dc:	80 83       	st	Z, r24
    20de:	13 c0       	rjmp	.+38     	; 0x2106 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRC = 0x00;
    20e0:	e4 e3       	ldi	r30, 0x34	; 52
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	10 82       	st	Z, r1
    20e6:	0f c0       	rjmp	.+30     	; 0x2106 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortDirection == OUTPUT)
    20e8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ea:	81 30       	cpi	r24, 0x01	; 1
    20ec:	29 f4       	brne	.+10     	; 0x20f8 <DIO_ES_tSetPortDirection+0xba>
			DDRD = 0xff;
    20ee:	e1 e3       	ldi	r30, 0x31	; 49
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	8f ef       	ldi	r24, 0xFF	; 255
    20f4:	80 83       	st	Z, r24
    20f6:	07 c0       	rjmp	.+14     	; 0x2106 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRD = 0x00;
    20f8:	e1 e3       	ldi	r30, 0x31	; 49
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	10 82       	st	Z, r1
    20fe:	03 c0       	rjmp	.+6      	; 0x2106 <DIO_ES_tSetPortDirection+0xc8>
		break;
	default:
		return ES_NOT_OK;
    2100:	91 e0       	ldi	r25, 0x01	; 1
    2102:	9d 83       	std	Y+5, r25	; 0x05
    2104:	01 c0       	rjmp	.+2      	; 0x2108 <DIO_ES_tSetPortDirection+0xca>
		break;
	}
	return ES_OK;
    2106:	1d 82       	std	Y+5, r1	; 0x05
    2108:	8d 81       	ldd	r24, Y+5	; 0x05
}
    210a:	0f 90       	pop	r0
    210c:	0f 90       	pop	r0
    210e:	0f 90       	pop	r0
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	08 95       	ret

0000211a <DIO_ES_tSetPortValue>:



ES_t DIO_ES_tSetPortValue(DIO_U8_Port_Type copy_u8_PortId, u8 copy_u8_PortValue)
{
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	00 d0       	rcall	.+0      	; 0x2120 <DIO_ES_tSetPortValue+0x6>
    2120:	00 d0       	rcall	.+0      	; 0x2122 <DIO_ES_tSetPortValue+0x8>
    2122:	0f 92       	push	r0
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
    2128:	89 83       	std	Y+1, r24	; 0x01
    212a:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortValue != HIGH) && (copy_u8_PortValue != LOW)){
    212c:	8a 81       	ldd	r24, Y+2	; 0x02
    212e:	81 30       	cpi	r24, 0x01	; 1
    2130:	31 f0       	breq	.+12     	; 0x213e <DIO_ES_tSetPortValue+0x24>
    2132:	8a 81       	ldd	r24, Y+2	; 0x02
    2134:	88 23       	and	r24, r24
    2136:	19 f0       	breq	.+6      	; 0x213e <DIO_ES_tSetPortValue+0x24>
		return ES_NOT_OK;
    2138:	21 e0       	ldi	r18, 0x01	; 1
    213a:	2d 83       	std	Y+5, r18	; 0x05
    213c:	53 c0       	rjmp	.+166    	; 0x21e4 <DIO_ES_tSetPortValue+0xca>
	}
	switch(copy_u8_PortId){
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	28 2f       	mov	r18, r24
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	3c 83       	std	Y+4, r19	; 0x04
    2146:	2b 83       	std	Y+3, r18	; 0x03
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	9c 81       	ldd	r25, Y+4	; 0x04
    214c:	81 30       	cpi	r24, 0x01	; 1
    214e:	91 05       	cpc	r25, r1
    2150:	09 f1       	breq	.+66     	; 0x2194 <DIO_ES_tSetPortValue+0x7a>
    2152:	2b 81       	ldd	r18, Y+3	; 0x03
    2154:	3c 81       	ldd	r19, Y+4	; 0x04
    2156:	22 30       	cpi	r18, 0x02	; 2
    2158:	31 05       	cpc	r19, r1
    215a:	2c f4       	brge	.+10     	; 0x2166 <DIO_ES_tSetPortValue+0x4c>
    215c:	8b 81       	ldd	r24, Y+3	; 0x03
    215e:	9c 81       	ldd	r25, Y+4	; 0x04
    2160:	00 97       	sbiw	r24, 0x00	; 0
    2162:	61 f0       	breq	.+24     	; 0x217c <DIO_ES_tSetPortValue+0x62>
    2164:	3b c0       	rjmp	.+118    	; 0x21dc <DIO_ES_tSetPortValue+0xc2>
    2166:	2b 81       	ldd	r18, Y+3	; 0x03
    2168:	3c 81       	ldd	r19, Y+4	; 0x04
    216a:	22 30       	cpi	r18, 0x02	; 2
    216c:	31 05       	cpc	r19, r1
    216e:	f1 f0       	breq	.+60     	; 0x21ac <DIO_ES_tSetPortValue+0x92>
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	9c 81       	ldd	r25, Y+4	; 0x04
    2174:	83 30       	cpi	r24, 0x03	; 3
    2176:	91 05       	cpc	r25, r1
    2178:	29 f1       	breq	.+74     	; 0x21c4 <DIO_ES_tSetPortValue+0xaa>
    217a:	30 c0       	rjmp	.+96     	; 0x21dc <DIO_ES_tSetPortValue+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortValue == HIGH)
    217c:	8a 81       	ldd	r24, Y+2	; 0x02
    217e:	81 30       	cpi	r24, 0x01	; 1
    2180:	29 f4       	brne	.+10     	; 0x218c <DIO_ES_tSetPortValue+0x72>
			PORTA = 0xff;
    2182:	eb e3       	ldi	r30, 0x3B	; 59
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	8f ef       	ldi	r24, 0xFF	; 255
    2188:	80 83       	st	Z, r24
    218a:	2b c0       	rjmp	.+86     	; 0x21e2 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTA = 0x00;
    218c:	eb e3       	ldi	r30, 0x3B	; 59
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	10 82       	st	Z, r1
    2192:	27 c0       	rjmp	.+78     	; 0x21e2 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortValue == HIGH)
    2194:	8a 81       	ldd	r24, Y+2	; 0x02
    2196:	81 30       	cpi	r24, 0x01	; 1
    2198:	29 f4       	brne	.+10     	; 0x21a4 <DIO_ES_tSetPortValue+0x8a>
			PORTB = 0xff;
    219a:	e8 e3       	ldi	r30, 0x38	; 56
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	8f ef       	ldi	r24, 0xFF	; 255
    21a0:	80 83       	st	Z, r24
    21a2:	1f c0       	rjmp	.+62     	; 0x21e2 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTB = 0x00;
    21a4:	e8 e3       	ldi	r30, 0x38	; 56
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	10 82       	st	Z, r1
    21aa:	1b c0       	rjmp	.+54     	; 0x21e2 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortValue == HIGH)
    21ac:	8a 81       	ldd	r24, Y+2	; 0x02
    21ae:	81 30       	cpi	r24, 0x01	; 1
    21b0:	29 f4       	brne	.+10     	; 0x21bc <DIO_ES_tSetPortValue+0xa2>
			PORTC = 0xff;
    21b2:	e5 e3       	ldi	r30, 0x35	; 53
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	8f ef       	ldi	r24, 0xFF	; 255
    21b8:	80 83       	st	Z, r24
    21ba:	13 c0       	rjmp	.+38     	; 0x21e2 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTC = 0x00;
    21bc:	e5 e3       	ldi	r30, 0x35	; 53
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	10 82       	st	Z, r1
    21c2:	0f c0       	rjmp	.+30     	; 0x21e2 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortValue == HIGH)
    21c4:	8a 81       	ldd	r24, Y+2	; 0x02
    21c6:	81 30       	cpi	r24, 0x01	; 1
    21c8:	29 f4       	brne	.+10     	; 0x21d4 <DIO_ES_tSetPortValue+0xba>
			PORTD = 0xff;
    21ca:	e2 e3       	ldi	r30, 0x32	; 50
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	8f ef       	ldi	r24, 0xFF	; 255
    21d0:	80 83       	st	Z, r24
    21d2:	07 c0       	rjmp	.+14     	; 0x21e2 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTD = 0x00;
    21d4:	e2 e3       	ldi	r30, 0x32	; 50
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	10 82       	st	Z, r1
    21da:	03 c0       	rjmp	.+6      	; 0x21e2 <DIO_ES_tSetPortValue+0xc8>
		break;
	default:
		return ES_NOT_OK;
    21dc:	91 e0       	ldi	r25, 0x01	; 1
    21de:	9d 83       	std	Y+5, r25	; 0x05
    21e0:	01 c0       	rjmp	.+2      	; 0x21e4 <DIO_ES_tSetPortValue+0xca>
		break;
	}
	return ES_OK;
    21e2:	1d 82       	std	Y+5, r1	; 0x05
    21e4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    21e6:	0f 90       	pop	r0
    21e8:	0f 90       	pop	r0
    21ea:	0f 90       	pop	r0
    21ec:	0f 90       	pop	r0
    21ee:	0f 90       	pop	r0
    21f0:	cf 91       	pop	r28
    21f2:	df 91       	pop	r29
    21f4:	08 95       	ret

000021f6 <DIO_ES_tTOGPin>:
/*
 * DIO_ES_tTOGPin is used to Toggle a specific pin
 */

ES_t DIO_ES_tTOGPin(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId)
{
    21f6:	df 93       	push	r29
    21f8:	cf 93       	push	r28
    21fa:	00 d0       	rcall	.+0      	; 0x21fc <DIO_ES_tTOGPin+0x6>
    21fc:	0f 92       	push	r0
    21fe:	cd b7       	in	r28, 0x3d	; 61
    2200:	de b7       	in	r29, 0x3e	; 62
    2202:	89 83       	std	Y+1, r24	; 0x01
    2204:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8_PinId > PIN_LIMIT){
    2206:	8a 81       	ldd	r24, Y+2	; 0x02
    2208:	88 30       	cpi	r24, 0x08	; 8
    220a:	18 f0       	brcs	.+6      	; 0x2212 <DIO_ES_tTOGPin+0x1c>
		return ES_NOT_OK;
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	8b 83       	std	Y+3, r24	; 0x03
    2210:	60 c0       	rjmp	.+192    	; 0x22d2 <DIO_ES_tTOGPin+0xdc>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    2212:	89 81       	ldd	r24, Y+1	; 0x01
    2214:	88 23       	and	r24, r24
    2216:	a1 f4       	brne	.+40     	; 0x2240 <DIO_ES_tTOGPin+0x4a>
		TOG_BIT(PORTA,copy_u8_PinId);
    2218:	ab e3       	ldi	r26, 0x3B	; 59
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	eb e3       	ldi	r30, 0x3B	; 59
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	48 2f       	mov	r20, r24
    2224:	8a 81       	ldd	r24, Y+2	; 0x02
    2226:	28 2f       	mov	r18, r24
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	02 2e       	mov	r0, r18
    2230:	02 c0       	rjmp	.+4      	; 0x2236 <DIO_ES_tTOGPin+0x40>
    2232:	88 0f       	add	r24, r24
    2234:	99 1f       	adc	r25, r25
    2236:	0a 94       	dec	r0
    2238:	e2 f7       	brpl	.-8      	; 0x2232 <DIO_ES_tTOGPin+0x3c>
    223a:	84 27       	eor	r24, r20
    223c:	8c 93       	st	X, r24
    223e:	48 c0       	rjmp	.+144    	; 0x22d0 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	81 30       	cpi	r24, 0x01	; 1
    2244:	a1 f4       	brne	.+40     	; 0x226e <DIO_ES_tTOGPin+0x78>
		TOG_BIT(PORTB,copy_u8_PinId);
    2246:	a8 e3       	ldi	r26, 0x38	; 56
    2248:	b0 e0       	ldi	r27, 0x00	; 0
    224a:	e8 e3       	ldi	r30, 0x38	; 56
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	48 2f       	mov	r20, r24
    2252:	8a 81       	ldd	r24, Y+2	; 0x02
    2254:	28 2f       	mov	r18, r24
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	02 2e       	mov	r0, r18
    225e:	02 c0       	rjmp	.+4      	; 0x2264 <DIO_ES_tTOGPin+0x6e>
    2260:	88 0f       	add	r24, r24
    2262:	99 1f       	adc	r25, r25
    2264:	0a 94       	dec	r0
    2266:	e2 f7       	brpl	.-8      	; 0x2260 <DIO_ES_tTOGPin+0x6a>
    2268:	84 27       	eor	r24, r20
    226a:	8c 93       	st	X, r24
    226c:	31 c0       	rjmp	.+98     	; 0x22d0 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    226e:	89 81       	ldd	r24, Y+1	; 0x01
    2270:	82 30       	cpi	r24, 0x02	; 2
    2272:	a1 f4       	brne	.+40     	; 0x229c <DIO_ES_tTOGPin+0xa6>
		TOG_BIT(PORTC,copy_u8_PinId);
    2274:	a5 e3       	ldi	r26, 0x35	; 53
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	e5 e3       	ldi	r30, 0x35	; 53
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	48 2f       	mov	r20, r24
    2280:	8a 81       	ldd	r24, Y+2	; 0x02
    2282:	28 2f       	mov	r18, r24
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	02 2e       	mov	r0, r18
    228c:	02 c0       	rjmp	.+4      	; 0x2292 <DIO_ES_tTOGPin+0x9c>
    228e:	88 0f       	add	r24, r24
    2290:	99 1f       	adc	r25, r25
    2292:	0a 94       	dec	r0
    2294:	e2 f7       	brpl	.-8      	; 0x228e <DIO_ES_tTOGPin+0x98>
    2296:	84 27       	eor	r24, r20
    2298:	8c 93       	st	X, r24
    229a:	1a c0       	rjmp	.+52     	; 0x22d0 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    229c:	89 81       	ldd	r24, Y+1	; 0x01
    229e:	83 30       	cpi	r24, 0x03	; 3
    22a0:	a1 f4       	brne	.+40     	; 0x22ca <DIO_ES_tTOGPin+0xd4>
		TOG_BIT(PORTD,copy_u8_PinId);
    22a2:	a2 e3       	ldi	r26, 0x32	; 50
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	e2 e3       	ldi	r30, 0x32	; 50
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	48 2f       	mov	r20, r24
    22ae:	8a 81       	ldd	r24, Y+2	; 0x02
    22b0:	28 2f       	mov	r18, r24
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	02 2e       	mov	r0, r18
    22ba:	02 c0       	rjmp	.+4      	; 0x22c0 <DIO_ES_tTOGPin+0xca>
    22bc:	88 0f       	add	r24, r24
    22be:	99 1f       	adc	r25, r25
    22c0:	0a 94       	dec	r0
    22c2:	e2 f7       	brpl	.-8      	; 0x22bc <DIO_ES_tTOGPin+0xc6>
    22c4:	84 27       	eor	r24, r20
    22c6:	8c 93       	st	X, r24
    22c8:	03 c0       	rjmp	.+6      	; 0x22d0 <DIO_ES_tTOGPin+0xda>
	}else{
		return ES_NOT_OK;
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	8b 83       	std	Y+3, r24	; 0x03
    22ce:	01 c0       	rjmp	.+2      	; 0x22d2 <DIO_ES_tTOGPin+0xdc>
	}
	return ES_OK;
    22d0:	1b 82       	std	Y+3, r1	; 0x03
    22d2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	cf 91       	pop	r28
    22dc:	df 91       	pop	r29
    22de:	08 95       	ret

000022e0 <DIO_ES_tInit>:




ES_t DIO_ES_tInit(void)
{
    22e0:	df 93       	push	r29
    22e2:	cf 93       	push	r28
    22e4:	00 d0       	rcall	.+0      	; 0x22e6 <DIO_ES_tInit+0x6>
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
	int i = 0;
    22ea:	1a 82       	std	Y+2, r1	; 0x02
    22ec:	19 82       	std	Y+1, r1	; 0x01
	for(i=0 ; i<PIN_COUNT ; i++){
    22ee:	1a 82       	std	Y+2, r1	; 0x02
    22f0:	19 82       	std	Y+1, r1	; 0x01
    22f2:	a3 c2       	rjmp	.+1350   	; 0x283a <DIO_ES_tInit+0x55a>
		if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_A){
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	9a 81       	ldd	r25, Y+2	; 0x02
    22f8:	88 0f       	add	r24, r24
    22fa:	99 1f       	adc	r25, r25
    22fc:	88 0f       	add	r24, r24
    22fe:	99 1f       	adc	r25, r25
    2300:	fc 01       	movw	r30, r24
    2302:	e8 59       	subi	r30, 0x98	; 152
    2304:	fe 4f       	sbci	r31, 0xFE	; 254
    2306:	80 81       	ld	r24, Z
    2308:	88 23       	and	r24, r24
    230a:	09 f0       	breq	.+2      	; 0x230e <DIO_ES_tInit+0x2e>
    230c:	9b c0       	rjmp	.+310    	; 0x2444 <DIO_ES_tInit+0x164>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	9a 81       	ldd	r25, Y+2	; 0x02
    2312:	88 0f       	add	r24, r24
    2314:	99 1f       	adc	r25, r25
    2316:	01 96       	adiw	r24, 0x01	; 1
    2318:	88 0f       	add	r24, r24
    231a:	99 1f       	adc	r25, r25
    231c:	fc 01       	movw	r30, r24
    231e:	e8 59       	subi	r30, 0x98	; 152
    2320:	fe 4f       	sbci	r31, 0xFE	; 254
    2322:	80 81       	ld	r24, Z
    2324:	81 30       	cpi	r24, 0x01	; 1
    2326:	e9 f4       	brne	.+58     	; 0x2362 <DIO_ES_tInit+0x82>
				SET_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    2328:	aa e3       	ldi	r26, 0x3A	; 58
    232a:	b0 e0       	ldi	r27, 0x00	; 0
    232c:	ea e3       	ldi	r30, 0x3A	; 58
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	80 81       	ld	r24, Z
    2332:	48 2f       	mov	r20, r24
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	9a 81       	ldd	r25, Y+2	; 0x02
    2338:	88 0f       	add	r24, r24
    233a:	99 1f       	adc	r25, r25
    233c:	88 0f       	add	r24, r24
    233e:	99 1f       	adc	r25, r25
    2340:	fc 01       	movw	r30, r24
    2342:	e7 59       	subi	r30, 0x97	; 151
    2344:	fe 4f       	sbci	r31, 0xFE	; 254
    2346:	80 81       	ld	r24, Z
    2348:	28 2f       	mov	r18, r24
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	02 2e       	mov	r0, r18
    2352:	02 c0       	rjmp	.+4      	; 0x2358 <DIO_ES_tInit+0x78>
    2354:	88 0f       	add	r24, r24
    2356:	99 1f       	adc	r25, r25
    2358:	0a 94       	dec	r0
    235a:	e2 f7       	brpl	.-8      	; 0x2354 <DIO_ES_tInit+0x74>
    235c:	84 2b       	or	r24, r20
    235e:	8c 93       	st	X, r24
    2360:	67 c2       	rjmp	.+1230   	; 0x2830 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    2362:	aa e3       	ldi	r26, 0x3A	; 58
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	ea e3       	ldi	r30, 0x3A	; 58
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	48 2f       	mov	r20, r24
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	9a 81       	ldd	r25, Y+2	; 0x02
    2372:	88 0f       	add	r24, r24
    2374:	99 1f       	adc	r25, r25
    2376:	88 0f       	add	r24, r24
    2378:	99 1f       	adc	r25, r25
    237a:	fc 01       	movw	r30, r24
    237c:	e7 59       	subi	r30, 0x97	; 151
    237e:	fe 4f       	sbci	r31, 0xFE	; 254
    2380:	80 81       	ld	r24, Z
    2382:	28 2f       	mov	r18, r24
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	02 2e       	mov	r0, r18
    238c:	02 c0       	rjmp	.+4      	; 0x2392 <DIO_ES_tInit+0xb2>
    238e:	88 0f       	add	r24, r24
    2390:	99 1f       	adc	r25, r25
    2392:	0a 94       	dec	r0
    2394:	e2 f7       	brpl	.-8      	; 0x238e <DIO_ES_tInit+0xae>
    2396:	80 95       	com	r24
    2398:	84 23       	and	r24, r20
    239a:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    239c:	89 81       	ldd	r24, Y+1	; 0x01
    239e:	9a 81       	ldd	r25, Y+2	; 0x02
    23a0:	88 0f       	add	r24, r24
    23a2:	99 1f       	adc	r25, r25
    23a4:	88 0f       	add	r24, r24
    23a6:	99 1f       	adc	r25, r25
    23a8:	fc 01       	movw	r30, r24
    23aa:	e5 59       	subi	r30, 0x95	; 149
    23ac:	fe 4f       	sbci	r31, 0xFE	; 254
    23ae:	80 81       	ld	r24, Z
    23b0:	81 30       	cpi	r24, 0x01	; 1
    23b2:	e9 f4       	brne	.+58     	; 0x23ee <DIO_ES_tInit+0x10e>
					SET_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    23b4:	ab e3       	ldi	r26, 0x3B	; 59
    23b6:	b0 e0       	ldi	r27, 0x00	; 0
    23b8:	eb e3       	ldi	r30, 0x3B	; 59
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	80 81       	ld	r24, Z
    23be:	48 2f       	mov	r20, r24
    23c0:	89 81       	ldd	r24, Y+1	; 0x01
    23c2:	9a 81       	ldd	r25, Y+2	; 0x02
    23c4:	88 0f       	add	r24, r24
    23c6:	99 1f       	adc	r25, r25
    23c8:	88 0f       	add	r24, r24
    23ca:	99 1f       	adc	r25, r25
    23cc:	fc 01       	movw	r30, r24
    23ce:	e7 59       	subi	r30, 0x97	; 151
    23d0:	fe 4f       	sbci	r31, 0xFE	; 254
    23d2:	80 81       	ld	r24, Z
    23d4:	28 2f       	mov	r18, r24
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	02 2e       	mov	r0, r18
    23de:	02 c0       	rjmp	.+4      	; 0x23e4 <DIO_ES_tInit+0x104>
    23e0:	88 0f       	add	r24, r24
    23e2:	99 1f       	adc	r25, r25
    23e4:	0a 94       	dec	r0
    23e6:	e2 f7       	brpl	.-8      	; 0x23e0 <DIO_ES_tInit+0x100>
    23e8:	84 2b       	or	r24, r20
    23ea:	8c 93       	st	X, r24
    23ec:	21 c2       	rjmp	.+1090   	; 0x2830 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    23ee:	89 81       	ldd	r24, Y+1	; 0x01
    23f0:	9a 81       	ldd	r25, Y+2	; 0x02
    23f2:	88 0f       	add	r24, r24
    23f4:	99 1f       	adc	r25, r25
    23f6:	88 0f       	add	r24, r24
    23f8:	99 1f       	adc	r25, r25
    23fa:	fc 01       	movw	r30, r24
    23fc:	e5 59       	subi	r30, 0x95	; 149
    23fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2400:	80 81       	ld	r24, Z
    2402:	88 23       	and	r24, r24
    2404:	09 f0       	breq	.+2      	; 0x2408 <DIO_ES_tInit+0x128>
    2406:	14 c2       	rjmp	.+1064   	; 0x2830 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    2408:	ab e3       	ldi	r26, 0x3B	; 59
    240a:	b0 e0       	ldi	r27, 0x00	; 0
    240c:	eb e3       	ldi	r30, 0x3B	; 59
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	80 81       	ld	r24, Z
    2412:	48 2f       	mov	r20, r24
    2414:	89 81       	ldd	r24, Y+1	; 0x01
    2416:	9a 81       	ldd	r25, Y+2	; 0x02
    2418:	88 0f       	add	r24, r24
    241a:	99 1f       	adc	r25, r25
    241c:	88 0f       	add	r24, r24
    241e:	99 1f       	adc	r25, r25
    2420:	fc 01       	movw	r30, r24
    2422:	e7 59       	subi	r30, 0x97	; 151
    2424:	fe 4f       	sbci	r31, 0xFE	; 254
    2426:	80 81       	ld	r24, Z
    2428:	28 2f       	mov	r18, r24
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	02 2e       	mov	r0, r18
    2432:	02 c0       	rjmp	.+4      	; 0x2438 <DIO_ES_tInit+0x158>
    2434:	88 0f       	add	r24, r24
    2436:	99 1f       	adc	r25, r25
    2438:	0a 94       	dec	r0
    243a:	e2 f7       	brpl	.-8      	; 0x2434 <DIO_ES_tInit+0x154>
    243c:	80 95       	com	r24
    243e:	84 23       	and	r24, r20
    2440:	8c 93       	st	X, r24
    2442:	f6 c1       	rjmp	.+1004   	; 0x2830 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_B){
    2444:	89 81       	ldd	r24, Y+1	; 0x01
    2446:	9a 81       	ldd	r25, Y+2	; 0x02
    2448:	88 0f       	add	r24, r24
    244a:	99 1f       	adc	r25, r25
    244c:	88 0f       	add	r24, r24
    244e:	99 1f       	adc	r25, r25
    2450:	fc 01       	movw	r30, r24
    2452:	e8 59       	subi	r30, 0x98	; 152
    2454:	fe 4f       	sbci	r31, 0xFE	; 254
    2456:	80 81       	ld	r24, Z
    2458:	81 30       	cpi	r24, 0x01	; 1
    245a:	09 f0       	breq	.+2      	; 0x245e <DIO_ES_tInit+0x17e>
    245c:	9b c0       	rjmp	.+310    	; 0x2594 <DIO_ES_tInit+0x2b4>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    245e:	89 81       	ldd	r24, Y+1	; 0x01
    2460:	9a 81       	ldd	r25, Y+2	; 0x02
    2462:	88 0f       	add	r24, r24
    2464:	99 1f       	adc	r25, r25
    2466:	01 96       	adiw	r24, 0x01	; 1
    2468:	88 0f       	add	r24, r24
    246a:	99 1f       	adc	r25, r25
    246c:	fc 01       	movw	r30, r24
    246e:	e8 59       	subi	r30, 0x98	; 152
    2470:	fe 4f       	sbci	r31, 0xFE	; 254
    2472:	80 81       	ld	r24, Z
    2474:	81 30       	cpi	r24, 0x01	; 1
    2476:	e9 f4       	brne	.+58     	; 0x24b2 <DIO_ES_tInit+0x1d2>
				SET_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    2478:	a7 e3       	ldi	r26, 0x37	; 55
    247a:	b0 e0       	ldi	r27, 0x00	; 0
    247c:	e7 e3       	ldi	r30, 0x37	; 55
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	80 81       	ld	r24, Z
    2482:	48 2f       	mov	r20, r24
    2484:	89 81       	ldd	r24, Y+1	; 0x01
    2486:	9a 81       	ldd	r25, Y+2	; 0x02
    2488:	88 0f       	add	r24, r24
    248a:	99 1f       	adc	r25, r25
    248c:	88 0f       	add	r24, r24
    248e:	99 1f       	adc	r25, r25
    2490:	fc 01       	movw	r30, r24
    2492:	e7 59       	subi	r30, 0x97	; 151
    2494:	fe 4f       	sbci	r31, 0xFE	; 254
    2496:	80 81       	ld	r24, Z
    2498:	28 2f       	mov	r18, r24
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	02 2e       	mov	r0, r18
    24a2:	02 c0       	rjmp	.+4      	; 0x24a8 <DIO_ES_tInit+0x1c8>
    24a4:	88 0f       	add	r24, r24
    24a6:	99 1f       	adc	r25, r25
    24a8:	0a 94       	dec	r0
    24aa:	e2 f7       	brpl	.-8      	; 0x24a4 <DIO_ES_tInit+0x1c4>
    24ac:	84 2b       	or	r24, r20
    24ae:	8c 93       	st	X, r24
    24b0:	bf c1       	rjmp	.+894    	; 0x2830 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    24b2:	a7 e3       	ldi	r26, 0x37	; 55
    24b4:	b0 e0       	ldi	r27, 0x00	; 0
    24b6:	e7 e3       	ldi	r30, 0x37	; 55
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	80 81       	ld	r24, Z
    24bc:	48 2f       	mov	r20, r24
    24be:	89 81       	ldd	r24, Y+1	; 0x01
    24c0:	9a 81       	ldd	r25, Y+2	; 0x02
    24c2:	88 0f       	add	r24, r24
    24c4:	99 1f       	adc	r25, r25
    24c6:	88 0f       	add	r24, r24
    24c8:	99 1f       	adc	r25, r25
    24ca:	fc 01       	movw	r30, r24
    24cc:	e7 59       	subi	r30, 0x97	; 151
    24ce:	fe 4f       	sbci	r31, 0xFE	; 254
    24d0:	80 81       	ld	r24, Z
    24d2:	28 2f       	mov	r18, r24
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	02 2e       	mov	r0, r18
    24dc:	02 c0       	rjmp	.+4      	; 0x24e2 <DIO_ES_tInit+0x202>
    24de:	88 0f       	add	r24, r24
    24e0:	99 1f       	adc	r25, r25
    24e2:	0a 94       	dec	r0
    24e4:	e2 f7       	brpl	.-8      	; 0x24de <DIO_ES_tInit+0x1fe>
    24e6:	80 95       	com	r24
    24e8:	84 23       	and	r24, r20
    24ea:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	9a 81       	ldd	r25, Y+2	; 0x02
    24f0:	88 0f       	add	r24, r24
    24f2:	99 1f       	adc	r25, r25
    24f4:	88 0f       	add	r24, r24
    24f6:	99 1f       	adc	r25, r25
    24f8:	fc 01       	movw	r30, r24
    24fa:	e5 59       	subi	r30, 0x95	; 149
    24fc:	fe 4f       	sbci	r31, 0xFE	; 254
    24fe:	80 81       	ld	r24, Z
    2500:	81 30       	cpi	r24, 0x01	; 1
    2502:	e9 f4       	brne	.+58     	; 0x253e <DIO_ES_tInit+0x25e>
					SET_BIT(PORTB,Dio_CfgPinsArray[i].Pin);
    2504:	a8 e3       	ldi	r26, 0x38	; 56
    2506:	b0 e0       	ldi	r27, 0x00	; 0
    2508:	e8 e3       	ldi	r30, 0x38	; 56
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	80 81       	ld	r24, Z
    250e:	48 2f       	mov	r20, r24
    2510:	89 81       	ldd	r24, Y+1	; 0x01
    2512:	9a 81       	ldd	r25, Y+2	; 0x02
    2514:	88 0f       	add	r24, r24
    2516:	99 1f       	adc	r25, r25
    2518:	88 0f       	add	r24, r24
    251a:	99 1f       	adc	r25, r25
    251c:	fc 01       	movw	r30, r24
    251e:	e7 59       	subi	r30, 0x97	; 151
    2520:	fe 4f       	sbci	r31, 0xFE	; 254
    2522:	80 81       	ld	r24, Z
    2524:	28 2f       	mov	r18, r24
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	02 2e       	mov	r0, r18
    252e:	02 c0       	rjmp	.+4      	; 0x2534 <DIO_ES_tInit+0x254>
    2530:	88 0f       	add	r24, r24
    2532:	99 1f       	adc	r25, r25
    2534:	0a 94       	dec	r0
    2536:	e2 f7       	brpl	.-8      	; 0x2530 <DIO_ES_tInit+0x250>
    2538:	84 2b       	or	r24, r20
    253a:	8c 93       	st	X, r24
    253c:	79 c1       	rjmp	.+754    	; 0x2830 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    253e:	89 81       	ldd	r24, Y+1	; 0x01
    2540:	9a 81       	ldd	r25, Y+2	; 0x02
    2542:	88 0f       	add	r24, r24
    2544:	99 1f       	adc	r25, r25
    2546:	88 0f       	add	r24, r24
    2548:	99 1f       	adc	r25, r25
    254a:	fc 01       	movw	r30, r24
    254c:	e5 59       	subi	r30, 0x95	; 149
    254e:	fe 4f       	sbci	r31, 0xFE	; 254
    2550:	80 81       	ld	r24, Z
    2552:	88 23       	and	r24, r24
    2554:	09 f0       	breq	.+2      	; 0x2558 <DIO_ES_tInit+0x278>
    2556:	6c c1       	rjmp	.+728    	; 0x2830 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    2558:	ab e3       	ldi	r26, 0x3B	; 59
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	eb e3       	ldi	r30, 0x3B	; 59
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	80 81       	ld	r24, Z
    2562:	48 2f       	mov	r20, r24
    2564:	89 81       	ldd	r24, Y+1	; 0x01
    2566:	9a 81       	ldd	r25, Y+2	; 0x02
    2568:	88 0f       	add	r24, r24
    256a:	99 1f       	adc	r25, r25
    256c:	88 0f       	add	r24, r24
    256e:	99 1f       	adc	r25, r25
    2570:	fc 01       	movw	r30, r24
    2572:	e7 59       	subi	r30, 0x97	; 151
    2574:	fe 4f       	sbci	r31, 0xFE	; 254
    2576:	80 81       	ld	r24, Z
    2578:	28 2f       	mov	r18, r24
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	02 2e       	mov	r0, r18
    2582:	02 c0       	rjmp	.+4      	; 0x2588 <DIO_ES_tInit+0x2a8>
    2584:	88 0f       	add	r24, r24
    2586:	99 1f       	adc	r25, r25
    2588:	0a 94       	dec	r0
    258a:	e2 f7       	brpl	.-8      	; 0x2584 <DIO_ES_tInit+0x2a4>
    258c:	80 95       	com	r24
    258e:	84 23       	and	r24, r20
    2590:	8c 93       	st	X, r24
    2592:	4e c1       	rjmp	.+668    	; 0x2830 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_C){
    2594:	89 81       	ldd	r24, Y+1	; 0x01
    2596:	9a 81       	ldd	r25, Y+2	; 0x02
    2598:	88 0f       	add	r24, r24
    259a:	99 1f       	adc	r25, r25
    259c:	88 0f       	add	r24, r24
    259e:	99 1f       	adc	r25, r25
    25a0:	fc 01       	movw	r30, r24
    25a2:	e8 59       	subi	r30, 0x98	; 152
    25a4:	fe 4f       	sbci	r31, 0xFE	; 254
    25a6:	80 81       	ld	r24, Z
    25a8:	82 30       	cpi	r24, 0x02	; 2
    25aa:	09 f0       	breq	.+2      	; 0x25ae <DIO_ES_tInit+0x2ce>
    25ac:	9b c0       	rjmp	.+310    	; 0x26e4 <DIO_ES_tInit+0x404>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	9a 81       	ldd	r25, Y+2	; 0x02
    25b2:	88 0f       	add	r24, r24
    25b4:	99 1f       	adc	r25, r25
    25b6:	01 96       	adiw	r24, 0x01	; 1
    25b8:	88 0f       	add	r24, r24
    25ba:	99 1f       	adc	r25, r25
    25bc:	fc 01       	movw	r30, r24
    25be:	e8 59       	subi	r30, 0x98	; 152
    25c0:	fe 4f       	sbci	r31, 0xFE	; 254
    25c2:	80 81       	ld	r24, Z
    25c4:	81 30       	cpi	r24, 0x01	; 1
    25c6:	e9 f4       	brne	.+58     	; 0x2602 <DIO_ES_tInit+0x322>
				SET_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    25c8:	a4 e3       	ldi	r26, 0x34	; 52
    25ca:	b0 e0       	ldi	r27, 0x00	; 0
    25cc:	e4 e3       	ldi	r30, 0x34	; 52
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	80 81       	ld	r24, Z
    25d2:	48 2f       	mov	r20, r24
    25d4:	89 81       	ldd	r24, Y+1	; 0x01
    25d6:	9a 81       	ldd	r25, Y+2	; 0x02
    25d8:	88 0f       	add	r24, r24
    25da:	99 1f       	adc	r25, r25
    25dc:	88 0f       	add	r24, r24
    25de:	99 1f       	adc	r25, r25
    25e0:	fc 01       	movw	r30, r24
    25e2:	e7 59       	subi	r30, 0x97	; 151
    25e4:	fe 4f       	sbci	r31, 0xFE	; 254
    25e6:	80 81       	ld	r24, Z
    25e8:	28 2f       	mov	r18, r24
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	02 2e       	mov	r0, r18
    25f2:	02 c0       	rjmp	.+4      	; 0x25f8 <DIO_ES_tInit+0x318>
    25f4:	88 0f       	add	r24, r24
    25f6:	99 1f       	adc	r25, r25
    25f8:	0a 94       	dec	r0
    25fa:	e2 f7       	brpl	.-8      	; 0x25f4 <DIO_ES_tInit+0x314>
    25fc:	84 2b       	or	r24, r20
    25fe:	8c 93       	st	X, r24
    2600:	17 c1       	rjmp	.+558    	; 0x2830 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    2602:	a4 e3       	ldi	r26, 0x34	; 52
    2604:	b0 e0       	ldi	r27, 0x00	; 0
    2606:	e4 e3       	ldi	r30, 0x34	; 52
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	80 81       	ld	r24, Z
    260c:	48 2f       	mov	r20, r24
    260e:	89 81       	ldd	r24, Y+1	; 0x01
    2610:	9a 81       	ldd	r25, Y+2	; 0x02
    2612:	88 0f       	add	r24, r24
    2614:	99 1f       	adc	r25, r25
    2616:	88 0f       	add	r24, r24
    2618:	99 1f       	adc	r25, r25
    261a:	fc 01       	movw	r30, r24
    261c:	e7 59       	subi	r30, 0x97	; 151
    261e:	fe 4f       	sbci	r31, 0xFE	; 254
    2620:	80 81       	ld	r24, Z
    2622:	28 2f       	mov	r18, r24
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	02 2e       	mov	r0, r18
    262c:	02 c0       	rjmp	.+4      	; 0x2632 <DIO_ES_tInit+0x352>
    262e:	88 0f       	add	r24, r24
    2630:	99 1f       	adc	r25, r25
    2632:	0a 94       	dec	r0
    2634:	e2 f7       	brpl	.-8      	; 0x262e <DIO_ES_tInit+0x34e>
    2636:	80 95       	com	r24
    2638:	84 23       	and	r24, r20
    263a:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    263c:	89 81       	ldd	r24, Y+1	; 0x01
    263e:	9a 81       	ldd	r25, Y+2	; 0x02
    2640:	88 0f       	add	r24, r24
    2642:	99 1f       	adc	r25, r25
    2644:	88 0f       	add	r24, r24
    2646:	99 1f       	adc	r25, r25
    2648:	fc 01       	movw	r30, r24
    264a:	e5 59       	subi	r30, 0x95	; 149
    264c:	fe 4f       	sbci	r31, 0xFE	; 254
    264e:	80 81       	ld	r24, Z
    2650:	81 30       	cpi	r24, 0x01	; 1
    2652:	e9 f4       	brne	.+58     	; 0x268e <DIO_ES_tInit+0x3ae>
					SET_BIT(PORTC,Dio_CfgPinsArray[i].Pin);
    2654:	a5 e3       	ldi	r26, 0x35	; 53
    2656:	b0 e0       	ldi	r27, 0x00	; 0
    2658:	e5 e3       	ldi	r30, 0x35	; 53
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	80 81       	ld	r24, Z
    265e:	48 2f       	mov	r20, r24
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	9a 81       	ldd	r25, Y+2	; 0x02
    2664:	88 0f       	add	r24, r24
    2666:	99 1f       	adc	r25, r25
    2668:	88 0f       	add	r24, r24
    266a:	99 1f       	adc	r25, r25
    266c:	fc 01       	movw	r30, r24
    266e:	e7 59       	subi	r30, 0x97	; 151
    2670:	fe 4f       	sbci	r31, 0xFE	; 254
    2672:	80 81       	ld	r24, Z
    2674:	28 2f       	mov	r18, r24
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	02 2e       	mov	r0, r18
    267e:	02 c0       	rjmp	.+4      	; 0x2684 <DIO_ES_tInit+0x3a4>
    2680:	88 0f       	add	r24, r24
    2682:	99 1f       	adc	r25, r25
    2684:	0a 94       	dec	r0
    2686:	e2 f7       	brpl	.-8      	; 0x2680 <DIO_ES_tInit+0x3a0>
    2688:	84 2b       	or	r24, r20
    268a:	8c 93       	st	X, r24
    268c:	d1 c0       	rjmp	.+418    	; 0x2830 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    268e:	89 81       	ldd	r24, Y+1	; 0x01
    2690:	9a 81       	ldd	r25, Y+2	; 0x02
    2692:	88 0f       	add	r24, r24
    2694:	99 1f       	adc	r25, r25
    2696:	88 0f       	add	r24, r24
    2698:	99 1f       	adc	r25, r25
    269a:	fc 01       	movw	r30, r24
    269c:	e5 59       	subi	r30, 0x95	; 149
    269e:	fe 4f       	sbci	r31, 0xFE	; 254
    26a0:	80 81       	ld	r24, Z
    26a2:	88 23       	and	r24, r24
    26a4:	09 f0       	breq	.+2      	; 0x26a8 <DIO_ES_tInit+0x3c8>
    26a6:	c4 c0       	rjmp	.+392    	; 0x2830 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    26a8:	ab e3       	ldi	r26, 0x3B	; 59
    26aa:	b0 e0       	ldi	r27, 0x00	; 0
    26ac:	eb e3       	ldi	r30, 0x3B	; 59
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	80 81       	ld	r24, Z
    26b2:	48 2f       	mov	r20, r24
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
    26b6:	9a 81       	ldd	r25, Y+2	; 0x02
    26b8:	88 0f       	add	r24, r24
    26ba:	99 1f       	adc	r25, r25
    26bc:	88 0f       	add	r24, r24
    26be:	99 1f       	adc	r25, r25
    26c0:	fc 01       	movw	r30, r24
    26c2:	e7 59       	subi	r30, 0x97	; 151
    26c4:	fe 4f       	sbci	r31, 0xFE	; 254
    26c6:	80 81       	ld	r24, Z
    26c8:	28 2f       	mov	r18, r24
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	02 2e       	mov	r0, r18
    26d2:	02 c0       	rjmp	.+4      	; 0x26d8 <DIO_ES_tInit+0x3f8>
    26d4:	88 0f       	add	r24, r24
    26d6:	99 1f       	adc	r25, r25
    26d8:	0a 94       	dec	r0
    26da:	e2 f7       	brpl	.-8      	; 0x26d4 <DIO_ES_tInit+0x3f4>
    26dc:	80 95       	com	r24
    26de:	84 23       	and	r24, r20
    26e0:	8c 93       	st	X, r24
    26e2:	a6 c0       	rjmp	.+332    	; 0x2830 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_D){
    26e4:	89 81       	ldd	r24, Y+1	; 0x01
    26e6:	9a 81       	ldd	r25, Y+2	; 0x02
    26e8:	88 0f       	add	r24, r24
    26ea:	99 1f       	adc	r25, r25
    26ec:	88 0f       	add	r24, r24
    26ee:	99 1f       	adc	r25, r25
    26f0:	fc 01       	movw	r30, r24
    26f2:	e8 59       	subi	r30, 0x98	; 152
    26f4:	fe 4f       	sbci	r31, 0xFE	; 254
    26f6:	80 81       	ld	r24, Z
    26f8:	83 30       	cpi	r24, 0x03	; 3
    26fa:	09 f0       	breq	.+2      	; 0x26fe <DIO_ES_tInit+0x41e>
    26fc:	99 c0       	rjmp	.+306    	; 0x2830 <DIO_ES_tInit+0x550>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    26fe:	89 81       	ldd	r24, Y+1	; 0x01
    2700:	9a 81       	ldd	r25, Y+2	; 0x02
    2702:	88 0f       	add	r24, r24
    2704:	99 1f       	adc	r25, r25
    2706:	01 96       	adiw	r24, 0x01	; 1
    2708:	88 0f       	add	r24, r24
    270a:	99 1f       	adc	r25, r25
    270c:	fc 01       	movw	r30, r24
    270e:	e8 59       	subi	r30, 0x98	; 152
    2710:	fe 4f       	sbci	r31, 0xFE	; 254
    2712:	80 81       	ld	r24, Z
    2714:	81 30       	cpi	r24, 0x01	; 1
    2716:	e9 f4       	brne	.+58     	; 0x2752 <DIO_ES_tInit+0x472>
				SET_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    2718:	a1 e3       	ldi	r26, 0x31	; 49
    271a:	b0 e0       	ldi	r27, 0x00	; 0
    271c:	e1 e3       	ldi	r30, 0x31	; 49
    271e:	f0 e0       	ldi	r31, 0x00	; 0
    2720:	80 81       	ld	r24, Z
    2722:	48 2f       	mov	r20, r24
    2724:	89 81       	ldd	r24, Y+1	; 0x01
    2726:	9a 81       	ldd	r25, Y+2	; 0x02
    2728:	88 0f       	add	r24, r24
    272a:	99 1f       	adc	r25, r25
    272c:	88 0f       	add	r24, r24
    272e:	99 1f       	adc	r25, r25
    2730:	fc 01       	movw	r30, r24
    2732:	e7 59       	subi	r30, 0x97	; 151
    2734:	fe 4f       	sbci	r31, 0xFE	; 254
    2736:	80 81       	ld	r24, Z
    2738:	28 2f       	mov	r18, r24
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	02 2e       	mov	r0, r18
    2742:	02 c0       	rjmp	.+4      	; 0x2748 <DIO_ES_tInit+0x468>
    2744:	88 0f       	add	r24, r24
    2746:	99 1f       	adc	r25, r25
    2748:	0a 94       	dec	r0
    274a:	e2 f7       	brpl	.-8      	; 0x2744 <DIO_ES_tInit+0x464>
    274c:	84 2b       	or	r24, r20
    274e:	8c 93       	st	X, r24
    2750:	6f c0       	rjmp	.+222    	; 0x2830 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    2752:	a1 e3       	ldi	r26, 0x31	; 49
    2754:	b0 e0       	ldi	r27, 0x00	; 0
    2756:	e1 e3       	ldi	r30, 0x31	; 49
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 81       	ld	r24, Z
    275c:	48 2f       	mov	r20, r24
    275e:	89 81       	ldd	r24, Y+1	; 0x01
    2760:	9a 81       	ldd	r25, Y+2	; 0x02
    2762:	88 0f       	add	r24, r24
    2764:	99 1f       	adc	r25, r25
    2766:	88 0f       	add	r24, r24
    2768:	99 1f       	adc	r25, r25
    276a:	fc 01       	movw	r30, r24
    276c:	e7 59       	subi	r30, 0x97	; 151
    276e:	fe 4f       	sbci	r31, 0xFE	; 254
    2770:	80 81       	ld	r24, Z
    2772:	28 2f       	mov	r18, r24
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	02 2e       	mov	r0, r18
    277c:	02 c0       	rjmp	.+4      	; 0x2782 <DIO_ES_tInit+0x4a2>
    277e:	88 0f       	add	r24, r24
    2780:	99 1f       	adc	r25, r25
    2782:	0a 94       	dec	r0
    2784:	e2 f7       	brpl	.-8      	; 0x277e <DIO_ES_tInit+0x49e>
    2786:	80 95       	com	r24
    2788:	84 23       	and	r24, r20
    278a:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    278c:	89 81       	ldd	r24, Y+1	; 0x01
    278e:	9a 81       	ldd	r25, Y+2	; 0x02
    2790:	88 0f       	add	r24, r24
    2792:	99 1f       	adc	r25, r25
    2794:	88 0f       	add	r24, r24
    2796:	99 1f       	adc	r25, r25
    2798:	fc 01       	movw	r30, r24
    279a:	e5 59       	subi	r30, 0x95	; 149
    279c:	fe 4f       	sbci	r31, 0xFE	; 254
    279e:	80 81       	ld	r24, Z
    27a0:	81 30       	cpi	r24, 0x01	; 1
    27a2:	e9 f4       	brne	.+58     	; 0x27de <DIO_ES_tInit+0x4fe>
					SET_BIT(PORTD,Dio_CfgPinsArray[i].Pin);
    27a4:	a2 e3       	ldi	r26, 0x32	; 50
    27a6:	b0 e0       	ldi	r27, 0x00	; 0
    27a8:	e2 e3       	ldi	r30, 0x32	; 50
    27aa:	f0 e0       	ldi	r31, 0x00	; 0
    27ac:	80 81       	ld	r24, Z
    27ae:	48 2f       	mov	r20, r24
    27b0:	89 81       	ldd	r24, Y+1	; 0x01
    27b2:	9a 81       	ldd	r25, Y+2	; 0x02
    27b4:	88 0f       	add	r24, r24
    27b6:	99 1f       	adc	r25, r25
    27b8:	88 0f       	add	r24, r24
    27ba:	99 1f       	adc	r25, r25
    27bc:	fc 01       	movw	r30, r24
    27be:	e7 59       	subi	r30, 0x97	; 151
    27c0:	fe 4f       	sbci	r31, 0xFE	; 254
    27c2:	80 81       	ld	r24, Z
    27c4:	28 2f       	mov	r18, r24
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	02 2e       	mov	r0, r18
    27ce:	02 c0       	rjmp	.+4      	; 0x27d4 <DIO_ES_tInit+0x4f4>
    27d0:	88 0f       	add	r24, r24
    27d2:	99 1f       	adc	r25, r25
    27d4:	0a 94       	dec	r0
    27d6:	e2 f7       	brpl	.-8      	; 0x27d0 <DIO_ES_tInit+0x4f0>
    27d8:	84 2b       	or	r24, r20
    27da:	8c 93       	st	X, r24
    27dc:	29 c0       	rjmp	.+82     	; 0x2830 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    27de:	89 81       	ldd	r24, Y+1	; 0x01
    27e0:	9a 81       	ldd	r25, Y+2	; 0x02
    27e2:	88 0f       	add	r24, r24
    27e4:	99 1f       	adc	r25, r25
    27e6:	88 0f       	add	r24, r24
    27e8:	99 1f       	adc	r25, r25
    27ea:	fc 01       	movw	r30, r24
    27ec:	e5 59       	subi	r30, 0x95	; 149
    27ee:	fe 4f       	sbci	r31, 0xFE	; 254
    27f0:	80 81       	ld	r24, Z
    27f2:	88 23       	and	r24, r24
    27f4:	e9 f4       	brne	.+58     	; 0x2830 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    27f6:	ab e3       	ldi	r26, 0x3B	; 59
    27f8:	b0 e0       	ldi	r27, 0x00	; 0
    27fa:	eb e3       	ldi	r30, 0x3B	; 59
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	80 81       	ld	r24, Z
    2800:	48 2f       	mov	r20, r24
    2802:	89 81       	ldd	r24, Y+1	; 0x01
    2804:	9a 81       	ldd	r25, Y+2	; 0x02
    2806:	88 0f       	add	r24, r24
    2808:	99 1f       	adc	r25, r25
    280a:	88 0f       	add	r24, r24
    280c:	99 1f       	adc	r25, r25
    280e:	fc 01       	movw	r30, r24
    2810:	e7 59       	subi	r30, 0x97	; 151
    2812:	fe 4f       	sbci	r31, 0xFE	; 254
    2814:	80 81       	ld	r24, Z
    2816:	28 2f       	mov	r18, r24
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	02 2e       	mov	r0, r18
    2820:	02 c0       	rjmp	.+4      	; 0x2826 <DIO_ES_tInit+0x546>
    2822:	88 0f       	add	r24, r24
    2824:	99 1f       	adc	r25, r25
    2826:	0a 94       	dec	r0
    2828:	e2 f7       	brpl	.-8      	; 0x2822 <DIO_ES_tInit+0x542>
    282a:	80 95       	com	r24
    282c:	84 23       	and	r24, r20
    282e:	8c 93       	st	X, r24


ES_t DIO_ES_tInit(void)
{
	int i = 0;
	for(i=0 ; i<PIN_COUNT ; i++){
    2830:	89 81       	ldd	r24, Y+1	; 0x01
    2832:	9a 81       	ldd	r25, Y+2	; 0x02
    2834:	01 96       	adiw	r24, 0x01	; 1
    2836:	9a 83       	std	Y+2, r25	; 0x02
    2838:	89 83       	std	Y+1, r24	; 0x01
    283a:	89 81       	ldd	r24, Y+1	; 0x01
    283c:	9a 81       	ldd	r25, Y+2	; 0x02
    283e:	88 31       	cpi	r24, 0x18	; 24
    2840:	91 05       	cpc	r25, r1
    2842:	0c f4       	brge	.+2      	; 0x2846 <DIO_ES_tInit+0x566>
    2844:	57 cd       	rjmp	.-1362   	; 0x22f4 <DIO_ES_tInit+0x14>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
				}
			}
		}
	}
	return ES_OK;
    2846:	80 e0       	ldi	r24, 0x00	; 0
}
    2848:	0f 90       	pop	r0
    284a:	0f 90       	pop	r0
    284c:	cf 91       	pop	r28
    284e:	df 91       	pop	r29
    2850:	08 95       	ret

00002852 <Servo_Init>:
//the left.
//-90" (~1


void Servo_Init(void)
{
    2852:	df 93       	push	r29
    2854:	cf 93       	push	r28
    2856:	cd b7       	in	r28, 0x3d	; 61
    2858:	de b7       	in	r29, 0x3e	; 62
    285a:	28 97       	sbiw	r28, 0x08	; 8
    285c:	0f b6       	in	r0, 0x3f	; 63
    285e:	f8 94       	cli
    2860:	de bf       	out	0x3e, r29	; 62
    2862:	0f be       	out	0x3f, r0	; 63
    2864:	cd bf       	out	0x3d, r28	; 61

	DIO_ES_tSetPinDirection(DIO_U8_PORT_D, DIO_U8_PIN_4, OUTPUT);
    2866:	83 e0       	ldi	r24, 0x03	; 3
    2868:	64 e0       	ldi	r22, 0x04	; 4
    286a:	41 e0       	ldi	r20, 0x01	; 1
    286c:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(DIO_U8_PORT_D, DIO_U8_PIN_5, OUTPUT);
    2870:	83 e0       	ldi	r24, 0x03	; 3
    2872:	65 e0       	ldi	r22, 0x05	; 5
    2874:	41 e0       	ldi	r20, 0x01	; 1
    2876:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <DIO_ES_tSetPinDirection>



	TIMER1_Config_t Timer1Cfg;
	Timer1Cfg.mode = TIMER1_FAST_PWM_ICR1_TOP;
    287a:	81 e0       	ldi	r24, 0x01	; 1
    287c:	89 83       	std	Y+1, r24	; 0x01
	Timer1Cfg.prescalar = TIMER1_PRESCALAR_64;
    287e:	83 e0       	ldi	r24, 0x03	; 3
    2880:	8a 83       	std	Y+2, r24	; 0x02
	Timer1Cfg.OC1A_mode = OCRA_NON_INVERTING;
    2882:	82 e0       	ldi	r24, 0x02	; 2
    2884:	8b 83       	std	Y+3, r24	; 0x03
	Timer1Cfg.OC1B_mode = OCRB_NON_INVERTING;
    2886:	82 e0       	ldi	r24, 0x02	; 2
    2888:	8c 83       	std	Y+4, r24	; 0x04
	TIMER1_Init(&Timer1Cfg);
    288a:	ce 01       	movw	r24, r28
    288c:	01 96       	adiw	r24, 0x01	; 1
    288e:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <TIMER1_Init>


}
    2892:	28 96       	adiw	r28, 0x08	; 8
    2894:	0f b6       	in	r0, 0x3f	; 63
    2896:	f8 94       	cli
    2898:	de bf       	out	0x3e, r29	; 62
    289a:	0f be       	out	0x3f, r0	; 63
    289c:	cd bf       	out	0x3d, r28	; 61
    289e:	cf 91       	pop	r28
    28a0:	df 91       	pop	r29
    28a2:	08 95       	ret

000028a4 <Servo_Turn>:



// From 0 to 180
void Servo_Turn(int angle)
{
    28a4:	df 93       	push	r29
    28a6:	cf 93       	push	r28
    28a8:	00 d0       	rcall	.+0      	; 0x28aa <Servo_Turn+0x6>
    28aa:	00 d0       	rcall	.+0      	; 0x28ac <Servo_Turn+0x8>
    28ac:	00 d0       	rcall	.+0      	; 0x28ae <Servo_Turn+0xa>
    28ae:	cd b7       	in	r28, 0x3d	; 61
    28b0:	de b7       	in	r29, 0x3e	; 62
    28b2:	9e 83       	std	Y+6, r25	; 0x06
    28b4:	8d 83       	std	Y+5, r24	; 0x05
	// Limit the angle to the range -90 to +90 degrees
	if (angle < -90)
    28b6:	8d 81       	ldd	r24, Y+5	; 0x05
    28b8:	9e 81       	ldd	r25, Y+6	; 0x06
    28ba:	2f ef       	ldi	r18, 0xFF	; 255
    28bc:	86 3a       	cpi	r24, 0xA6	; 166
    28be:	92 07       	cpc	r25, r18
    28c0:	2c f4       	brge	.+10     	; 0x28cc <Servo_Turn+0x28>
		angle = -90;
    28c2:	86 ea       	ldi	r24, 0xA6	; 166
    28c4:	9f ef       	ldi	r25, 0xFF	; 255
    28c6:	9e 83       	std	Y+6, r25	; 0x06
    28c8:	8d 83       	std	Y+5, r24	; 0x05
    28ca:	09 c0       	rjmp	.+18     	; 0x28de <Servo_Turn+0x3a>
	else if (angle > 90)
    28cc:	8d 81       	ldd	r24, Y+5	; 0x05
    28ce:	9e 81       	ldd	r25, Y+6	; 0x06
    28d0:	8b 35       	cpi	r24, 0x5B	; 91
    28d2:	91 05       	cpc	r25, r1
    28d4:	24 f0       	brlt	.+8      	; 0x28de <Servo_Turn+0x3a>
		angle = 90;
    28d6:	8a e5       	ldi	r24, 0x5A	; 90
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	9e 83       	std	Y+6, r25	; 0x06
    28dc:	8d 83       	std	Y+5, r24	; 0x05

	// Calculate the pulse width based on the desired angle
	u16 pulse_width_microseconds = 1500 + ((angle / 90) * 500);
    28de:	8d 81       	ldd	r24, Y+5	; 0x05
    28e0:	9e 81       	ldd	r25, Y+6	; 0x06
    28e2:	2a e5       	ldi	r18, 0x5A	; 90
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	b9 01       	movw	r22, r18
    28e8:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <__divmodhi4>
    28ec:	cb 01       	movw	r24, r22
    28ee:	9c 01       	movw	r18, r24
    28f0:	84 ef       	ldi	r24, 0xF4	; 244
    28f2:	91 e0       	ldi	r25, 0x01	; 1
    28f4:	ac 01       	movw	r20, r24
    28f6:	24 9f       	mul	r18, r20
    28f8:	c0 01       	movw	r24, r0
    28fa:	25 9f       	mul	r18, r21
    28fc:	90 0d       	add	r25, r0
    28fe:	34 9f       	mul	r19, r20
    2900:	90 0d       	add	r25, r0
    2902:	11 24       	eor	r1, r1
    2904:	84 52       	subi	r24, 0x24	; 36
    2906:	9a 4f       	sbci	r25, 0xFA	; 250
    2908:	9c 83       	std	Y+4, r25	; 0x04
    290a:	8b 83       	std	Y+3, r24	; 0x03
	u16 pulse_width_counts = pulse_width_microseconds / 4; // Timer 1 resolution prescaler is 64
    290c:	8b 81       	ldd	r24, Y+3	; 0x03
    290e:	9c 81       	ldd	r25, Y+4	; 0x04
    2910:	96 95       	lsr	r25
    2912:	87 95       	ror	r24
    2914:	96 95       	lsr	r25
    2916:	87 95       	ror	r24
    2918:	9a 83       	std	Y+2, r25	; 0x02
    291a:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = pulse_width_counts - 1;
    291c:	ea e4       	ldi	r30, 0x4A	; 74
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	89 81       	ldd	r24, Y+1	; 0x01
    2922:	9a 81       	ldd	r25, Y+2	; 0x02
    2924:	01 97       	sbiw	r24, 0x01	; 1
    2926:	91 83       	std	Z+1, r25	; 0x01
    2928:	80 83       	st	Z, r24


	ICR1 = 4999;			// 20 ms in data sheet of servo
    292a:	e6 e4       	ldi	r30, 0x46	; 70
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	87 e8       	ldi	r24, 0x87	; 135
    2930:	93 e1       	ldi	r25, 0x13	; 19
    2932:	91 83       	std	Z+1, r25	; 0x01
    2934:	80 83       	st	Z, r24
}
    2936:	26 96       	adiw	r28, 0x06	; 6
    2938:	0f b6       	in	r0, 0x3f	; 63
    293a:	f8 94       	cli
    293c:	de bf       	out	0x3e, r29	; 62
    293e:	0f be       	out	0x3f, r0	; 63
    2940:	cd bf       	out	0x3d, r28	; 61
    2942:	cf 91       	pop	r28
    2944:	df 91       	pop	r29
    2946:	08 95       	ret

00002948 <Servo_Stop>:

void Servo_Stop()
{
    2948:	df 93       	push	r29
    294a:	cf 93       	push	r28
    294c:	cd b7       	in	r28, 0x3d	; 61
    294e:	de b7       	in	r29, 0x3e	; 62

	TIMER1_Stop();
    2950:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <TIMER1_Stop>
}
    2954:	cf 91       	pop	r28
    2956:	df 91       	pop	r29
    2958:	08 95       	ret

0000295a <LCD_ES_tTrigger_Enable>:
//ProtoType of static is defined in source file itself(Private declaration)
static ES_t LCD_ES_tTrigger_Enable(void);
static ES_t LCD_ES_tSet_Cursor_Pos(u8 row,u8 column);

//We make it static cuz we won't use it anywhere but here
static ES_t LCD_ES_tTrigger_Enable(void){
    295a:	df 93       	push	r29
    295c:	cf 93       	push	r28
    295e:	cd b7       	in	r28, 0x3d	; 61
    2960:	de b7       	in	r29, 0x3e	; 62
    2962:	e0 97       	sbiw	r28, 0x30	; 48
    2964:	0f b6       	in	r0, 0x3f	; 63
    2966:	f8 94       	cli
    2968:	de bf       	out	0x3e, r29	; 62
    296a:	0f be       	out	0x3f, r0	; 63
    296c:	cd bf       	out	0x3d, r28	; 61
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, HIGH);
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	62 e0       	ldi	r22, 0x02	; 2
    2972:	41 e0       	ldi	r20, 0x01	; 1
    2974:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	a0 e2       	ldi	r26, 0x20	; 32
    297e:	b1 e4       	ldi	r27, 0x41	; 65
    2980:	8d a7       	std	Y+45, r24	; 0x2d
    2982:	9e a7       	std	Y+46, r25	; 0x2e
    2984:	af a7       	std	Y+47, r26	; 0x2f
    2986:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2988:	6d a5       	ldd	r22, Y+45	; 0x2d
    298a:	7e a5       	ldd	r23, Y+46	; 0x2e
    298c:	8f a5       	ldd	r24, Y+47	; 0x2f
    298e:	98 a9       	ldd	r25, Y+48	; 0x30
    2990:	2b ea       	ldi	r18, 0xAB	; 171
    2992:	3a ea       	ldi	r19, 0xAA	; 170
    2994:	4a ea       	ldi	r20, 0xAA	; 170
    2996:	50 e4       	ldi	r21, 0x40	; 64
    2998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	89 a7       	std	Y+41, r24	; 0x29
    29a2:	9a a7       	std	Y+42, r25	; 0x2a
    29a4:	ab a7       	std	Y+43, r26	; 0x2b
    29a6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    29a8:	69 a5       	ldd	r22, Y+41	; 0x29
    29aa:	7a a5       	ldd	r23, Y+42	; 0x2a
    29ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    29ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	40 e8       	ldi	r20, 0x80	; 128
    29b6:	5f e3       	ldi	r21, 0x3F	; 63
    29b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29bc:	88 23       	and	r24, r24
    29be:	1c f4       	brge	.+6      	; 0x29c6 <LCD_ES_tTrigger_Enable+0x6c>
		__ticks = 1;
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	88 a7       	std	Y+40, r24	; 0x28
    29c4:	91 c0       	rjmp	.+290    	; 0x2ae8 <LCD_ES_tTrigger_Enable+0x18e>
	else if (__tmp > 255)
    29c6:	69 a5       	ldd	r22, Y+41	; 0x29
    29c8:	7a a5       	ldd	r23, Y+42	; 0x2a
    29ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    29cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	4f e7       	ldi	r20, 0x7F	; 127
    29d4:	53 e4       	ldi	r21, 0x43	; 67
    29d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29da:	18 16       	cp	r1, r24
    29dc:	0c f0       	brlt	.+2      	; 0x29e0 <LCD_ES_tTrigger_Enable+0x86>
    29de:	7b c0       	rjmp	.+246    	; 0x2ad6 <LCD_ES_tTrigger_Enable+0x17c>
	{
		_delay_ms(__us / 1000.0);
    29e0:	6d a5       	ldd	r22, Y+45	; 0x2d
    29e2:	7e a5       	ldd	r23, Y+46	; 0x2e
    29e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    29e6:	98 a9       	ldd	r25, Y+48	; 0x30
    29e8:	20 e0       	ldi	r18, 0x00	; 0
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	4a e7       	ldi	r20, 0x7A	; 122
    29ee:	54 e4       	ldi	r21, 0x44	; 68
    29f0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    29f4:	dc 01       	movw	r26, r24
    29f6:	cb 01       	movw	r24, r22
    29f8:	8c a3       	std	Y+36, r24	; 0x24
    29fa:	9d a3       	std	Y+37, r25	; 0x25
    29fc:	ae a3       	std	Y+38, r26	; 0x26
    29fe:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a00:	6c a1       	ldd	r22, Y+36	; 0x24
    2a02:	7d a1       	ldd	r23, Y+37	; 0x25
    2a04:	8e a1       	ldd	r24, Y+38	; 0x26
    2a06:	9f a1       	ldd	r25, Y+39	; 0x27
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	4a e7       	ldi	r20, 0x7A	; 122
    2a0e:	55 e4       	ldi	r21, 0x45	; 69
    2a10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	88 a3       	std	Y+32, r24	; 0x20
    2a1a:	99 a3       	std	Y+33, r25	; 0x21
    2a1c:	aa a3       	std	Y+34, r26	; 0x22
    2a1e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2a20:	68 a1       	ldd	r22, Y+32	; 0x20
    2a22:	79 a1       	ldd	r23, Y+33	; 0x21
    2a24:	8a a1       	ldd	r24, Y+34	; 0x22
    2a26:	9b a1       	ldd	r25, Y+35	; 0x23
    2a28:	20 e0       	ldi	r18, 0x00	; 0
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	40 e8       	ldi	r20, 0x80	; 128
    2a2e:	5f e3       	ldi	r21, 0x3F	; 63
    2a30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a34:	88 23       	and	r24, r24
    2a36:	2c f4       	brge	.+10     	; 0x2a42 <LCD_ES_tTrigger_Enable+0xe8>
		__ticks = 1;
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	9f 8f       	std	Y+31, r25	; 0x1f
    2a3e:	8e 8f       	std	Y+30, r24	; 0x1e
    2a40:	3f c0       	rjmp	.+126    	; 0x2ac0 <LCD_ES_tTrigger_Enable+0x166>
	else if (__tmp > 65535)
    2a42:	68 a1       	ldd	r22, Y+32	; 0x20
    2a44:	79 a1       	ldd	r23, Y+33	; 0x21
    2a46:	8a a1       	ldd	r24, Y+34	; 0x22
    2a48:	9b a1       	ldd	r25, Y+35	; 0x23
    2a4a:	20 e0       	ldi	r18, 0x00	; 0
    2a4c:	3f ef       	ldi	r19, 0xFF	; 255
    2a4e:	4f e7       	ldi	r20, 0x7F	; 127
    2a50:	57 e4       	ldi	r21, 0x47	; 71
    2a52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a56:	18 16       	cp	r1, r24
    2a58:	4c f5       	brge	.+82     	; 0x2aac <LCD_ES_tTrigger_Enable+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a5a:	6c a1       	ldd	r22, Y+36	; 0x24
    2a5c:	7d a1       	ldd	r23, Y+37	; 0x25
    2a5e:	8e a1       	ldd	r24, Y+38	; 0x26
    2a60:	9f a1       	ldd	r25, Y+39	; 0x27
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	40 e2       	ldi	r20, 0x20	; 32
    2a68:	51 e4       	ldi	r21, 0x41	; 65
    2a6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	bc 01       	movw	r22, r24
    2a74:	cd 01       	movw	r24, r26
    2a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	9f 8f       	std	Y+31, r25	; 0x1f
    2a80:	8e 8f       	std	Y+30, r24	; 0x1e
    2a82:	0f c0       	rjmp	.+30     	; 0x2aa2 <LCD_ES_tTrigger_Enable+0x148>
    2a84:	80 e9       	ldi	r24, 0x90	; 144
    2a86:	91 e0       	ldi	r25, 0x01	; 1
    2a88:	9d 8f       	std	Y+29, r25	; 0x1d
    2a8a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a8c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a8e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2a90:	01 97       	sbiw	r24, 0x01	; 1
    2a92:	f1 f7       	brne	.-4      	; 0x2a90 <LCD_ES_tTrigger_Enable+0x136>
    2a94:	9d 8f       	std	Y+29, r25	; 0x1d
    2a96:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a98:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a9a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a9c:	01 97       	sbiw	r24, 0x01	; 1
    2a9e:	9f 8f       	std	Y+31, r25	; 0x1f
    2aa0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aa2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2aa4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2aa6:	00 97       	sbiw	r24, 0x00	; 0
    2aa8:	69 f7       	brne	.-38     	; 0x2a84 <LCD_ES_tTrigger_Enable+0x12a>
    2aaa:	24 c0       	rjmp	.+72     	; 0x2af4 <LCD_ES_tTrigger_Enable+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aac:	68 a1       	ldd	r22, Y+32	; 0x20
    2aae:	79 a1       	ldd	r23, Y+33	; 0x21
    2ab0:	8a a1       	ldd	r24, Y+34	; 0x22
    2ab2:	9b a1       	ldd	r25, Y+35	; 0x23
    2ab4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	9f 8f       	std	Y+31, r25	; 0x1f
    2abe:	8e 8f       	std	Y+30, r24	; 0x1e
    2ac0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ac2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ac4:	9b 8f       	std	Y+27, r25	; 0x1b
    2ac6:	8a 8f       	std	Y+26, r24	; 0x1a
    2ac8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2aca:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2acc:	01 97       	sbiw	r24, 0x01	; 1
    2ace:	f1 f7       	brne	.-4      	; 0x2acc <LCD_ES_tTrigger_Enable+0x172>
    2ad0:	9b 8f       	std	Y+27, r25	; 0x1b
    2ad2:	8a 8f       	std	Y+26, r24	; 0x1a
    2ad4:	0f c0       	rjmp	.+30     	; 0x2af4 <LCD_ES_tTrigger_Enable+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ad6:	69 a5       	ldd	r22, Y+41	; 0x29
    2ad8:	7a a5       	ldd	r23, Y+42	; 0x2a
    2ada:	8b a5       	ldd	r24, Y+43	; 0x2b
    2adc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	88 a7       	std	Y+40, r24	; 0x28
    2ae8:	88 a5       	ldd	r24, Y+40	; 0x28
    2aea:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2aec:	89 8d       	ldd	r24, Y+25	; 0x19
    2aee:	8a 95       	dec	r24
    2af0:	f1 f7       	brne	.-4      	; 0x2aee <LCD_ES_tTrigger_Enable+0x194>
    2af2:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, LOW);
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	62 e0       	ldi	r22, 0x02	; 2
    2af8:	40 e0       	ldi	r20, 0x00	; 0
    2afa:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
    2afe:	80 e0       	ldi	r24, 0x00	; 0
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	aa ef       	ldi	r26, 0xFA	; 250
    2b04:	b4 e4       	ldi	r27, 0x44	; 68
    2b06:	8d 8b       	std	Y+21, r24	; 0x15
    2b08:	9e 8b       	std	Y+22, r25	; 0x16
    2b0a:	af 8b       	std	Y+23, r26	; 0x17
    2b0c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b0e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b10:	7e 89       	ldd	r23, Y+22	; 0x16
    2b12:	8f 89       	ldd	r24, Y+23	; 0x17
    2b14:	98 8d       	ldd	r25, Y+24	; 0x18
    2b16:	2b ea       	ldi	r18, 0xAB	; 171
    2b18:	3a ea       	ldi	r19, 0xAA	; 170
    2b1a:	4a ea       	ldi	r20, 0xAA	; 170
    2b1c:	50 e4       	ldi	r21, 0x40	; 64
    2b1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b22:	dc 01       	movw	r26, r24
    2b24:	cb 01       	movw	r24, r22
    2b26:	89 8b       	std	Y+17, r24	; 0x11
    2b28:	9a 8b       	std	Y+18, r25	; 0x12
    2b2a:	ab 8b       	std	Y+19, r26	; 0x13
    2b2c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2b2e:	69 89       	ldd	r22, Y+17	; 0x11
    2b30:	7a 89       	ldd	r23, Y+18	; 0x12
    2b32:	8b 89       	ldd	r24, Y+19	; 0x13
    2b34:	9c 89       	ldd	r25, Y+20	; 0x14
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	40 e8       	ldi	r20, 0x80	; 128
    2b3c:	5f e3       	ldi	r21, 0x3F	; 63
    2b3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b42:	88 23       	and	r24, r24
    2b44:	1c f4       	brge	.+6      	; 0x2b4c <LCD_ES_tTrigger_Enable+0x1f2>
		__ticks = 1;
    2b46:	81 e0       	ldi	r24, 0x01	; 1
    2b48:	88 8b       	std	Y+16, r24	; 0x10
    2b4a:	91 c0       	rjmp	.+290    	; 0x2c6e <LCD_ES_tTrigger_Enable+0x314>
	else if (__tmp > 255)
    2b4c:	69 89       	ldd	r22, Y+17	; 0x11
    2b4e:	7a 89       	ldd	r23, Y+18	; 0x12
    2b50:	8b 89       	ldd	r24, Y+19	; 0x13
    2b52:	9c 89       	ldd	r25, Y+20	; 0x14
    2b54:	20 e0       	ldi	r18, 0x00	; 0
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	4f e7       	ldi	r20, 0x7F	; 127
    2b5a:	53 e4       	ldi	r21, 0x43	; 67
    2b5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b60:	18 16       	cp	r1, r24
    2b62:	0c f0       	brlt	.+2      	; 0x2b66 <LCD_ES_tTrigger_Enable+0x20c>
    2b64:	7b c0       	rjmp	.+246    	; 0x2c5c <LCD_ES_tTrigger_Enable+0x302>
	{
		_delay_ms(__us / 1000.0);
    2b66:	6d 89       	ldd	r22, Y+21	; 0x15
    2b68:	7e 89       	ldd	r23, Y+22	; 0x16
    2b6a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b6c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	4a e7       	ldi	r20, 0x7A	; 122
    2b74:	54 e4       	ldi	r21, 0x44	; 68
    2b76:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	8c 87       	std	Y+12, r24	; 0x0c
    2b80:	9d 87       	std	Y+13, r25	; 0x0d
    2b82:	ae 87       	std	Y+14, r26	; 0x0e
    2b84:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b86:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b88:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b8a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b8c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b8e:	20 e0       	ldi	r18, 0x00	; 0
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	4a e7       	ldi	r20, 0x7A	; 122
    2b94:	55 e4       	ldi	r21, 0x45	; 69
    2b96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	88 87       	std	Y+8, r24	; 0x08
    2ba0:	99 87       	std	Y+9, r25	; 0x09
    2ba2:	aa 87       	std	Y+10, r26	; 0x0a
    2ba4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2ba6:	68 85       	ldd	r22, Y+8	; 0x08
    2ba8:	79 85       	ldd	r23, Y+9	; 0x09
    2baa:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bac:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	40 e8       	ldi	r20, 0x80	; 128
    2bb4:	5f e3       	ldi	r21, 0x3F	; 63
    2bb6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bba:	88 23       	and	r24, r24
    2bbc:	2c f4       	brge	.+10     	; 0x2bc8 <LCD_ES_tTrigger_Enable+0x26e>
		__ticks = 1;
    2bbe:	81 e0       	ldi	r24, 0x01	; 1
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	9f 83       	std	Y+7, r25	; 0x07
    2bc4:	8e 83       	std	Y+6, r24	; 0x06
    2bc6:	3f c0       	rjmp	.+126    	; 0x2c46 <LCD_ES_tTrigger_Enable+0x2ec>
	else if (__tmp > 65535)
    2bc8:	68 85       	ldd	r22, Y+8	; 0x08
    2bca:	79 85       	ldd	r23, Y+9	; 0x09
    2bcc:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bce:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	3f ef       	ldi	r19, 0xFF	; 255
    2bd4:	4f e7       	ldi	r20, 0x7F	; 127
    2bd6:	57 e4       	ldi	r21, 0x47	; 71
    2bd8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bdc:	18 16       	cp	r1, r24
    2bde:	4c f5       	brge	.+82     	; 0x2c32 <LCD_ES_tTrigger_Enable+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be0:	6c 85       	ldd	r22, Y+12	; 0x0c
    2be2:	7d 85       	ldd	r23, Y+13	; 0x0d
    2be4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2be6:	9f 85       	ldd	r25, Y+15	; 0x0f
    2be8:	20 e0       	ldi	r18, 0x00	; 0
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	40 e2       	ldi	r20, 0x20	; 32
    2bee:	51 e4       	ldi	r21, 0x41	; 65
    2bf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	cb 01       	movw	r24, r22
    2bf8:	bc 01       	movw	r22, r24
    2bfa:	cd 01       	movw	r24, r26
    2bfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c00:	dc 01       	movw	r26, r24
    2c02:	cb 01       	movw	r24, r22
    2c04:	9f 83       	std	Y+7, r25	; 0x07
    2c06:	8e 83       	std	Y+6, r24	; 0x06
    2c08:	0f c0       	rjmp	.+30     	; 0x2c28 <LCD_ES_tTrigger_Enable+0x2ce>
    2c0a:	80 e9       	ldi	r24, 0x90	; 144
    2c0c:	91 e0       	ldi	r25, 0x01	; 1
    2c0e:	9d 83       	std	Y+5, r25	; 0x05
    2c10:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c12:	8c 81       	ldd	r24, Y+4	; 0x04
    2c14:	9d 81       	ldd	r25, Y+5	; 0x05
    2c16:	01 97       	sbiw	r24, 0x01	; 1
    2c18:	f1 f7       	brne	.-4      	; 0x2c16 <LCD_ES_tTrigger_Enable+0x2bc>
    2c1a:	9d 83       	std	Y+5, r25	; 0x05
    2c1c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c1e:	8e 81       	ldd	r24, Y+6	; 0x06
    2c20:	9f 81       	ldd	r25, Y+7	; 0x07
    2c22:	01 97       	sbiw	r24, 0x01	; 1
    2c24:	9f 83       	std	Y+7, r25	; 0x07
    2c26:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c28:	8e 81       	ldd	r24, Y+6	; 0x06
    2c2a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c2c:	00 97       	sbiw	r24, 0x00	; 0
    2c2e:	69 f7       	brne	.-38     	; 0x2c0a <LCD_ES_tTrigger_Enable+0x2b0>
    2c30:	24 c0       	rjmp	.+72     	; 0x2c7a <LCD_ES_tTrigger_Enable+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c32:	68 85       	ldd	r22, Y+8	; 0x08
    2c34:	79 85       	ldd	r23, Y+9	; 0x09
    2c36:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c38:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	9f 83       	std	Y+7, r25	; 0x07
    2c44:	8e 83       	std	Y+6, r24	; 0x06
    2c46:	8e 81       	ldd	r24, Y+6	; 0x06
    2c48:	9f 81       	ldd	r25, Y+7	; 0x07
    2c4a:	9b 83       	std	Y+3, r25	; 0x03
    2c4c:	8a 83       	std	Y+2, r24	; 0x02
    2c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c50:	9b 81       	ldd	r25, Y+3	; 0x03
    2c52:	01 97       	sbiw	r24, 0x01	; 1
    2c54:	f1 f7       	brne	.-4      	; 0x2c52 <LCD_ES_tTrigger_Enable+0x2f8>
    2c56:	9b 83       	std	Y+3, r25	; 0x03
    2c58:	8a 83       	std	Y+2, r24	; 0x02
    2c5a:	0f c0       	rjmp	.+30     	; 0x2c7a <LCD_ES_tTrigger_Enable+0x320>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c5c:	69 89       	ldd	r22, Y+17	; 0x11
    2c5e:	7a 89       	ldd	r23, Y+18	; 0x12
    2c60:	8b 89       	ldd	r24, Y+19	; 0x13
    2c62:	9c 89       	ldd	r25, Y+20	; 0x14
    2c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c68:	dc 01       	movw	r26, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	88 8b       	std	Y+16, r24	; 0x10
    2c6e:	88 89       	ldd	r24, Y+16	; 0x10
    2c70:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c72:	89 81       	ldd	r24, Y+1	; 0x01
    2c74:	8a 95       	dec	r24
    2c76:	f1 f7       	brne	.-4      	; 0x2c74 <LCD_ES_tTrigger_Enable+0x31a>
    2c78:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2000);
	return ES_OK;
    2c7a:	80 e0       	ldi	r24, 0x00	; 0
}
    2c7c:	e0 96       	adiw	r28, 0x30	; 48
    2c7e:	0f b6       	in	r0, 0x3f	; 63
    2c80:	f8 94       	cli
    2c82:	de bf       	out	0x3e, r29	; 62
    2c84:	0f be       	out	0x3f, r0	; 63
    2c86:	cd bf       	out	0x3d, r28	; 61
    2c88:	cf 91       	pop	r28
    2c8a:	df 91       	pop	r29
    2c8c:	08 95       	ret

00002c8e <Lcd_ES_tInit>:


ES_t Lcd_ES_tInit(){
    2c8e:	df 93       	push	r29
    2c90:	cf 93       	push	r28
    2c92:	cd b7       	in	r28, 0x3d	; 61
    2c94:	de b7       	in	r29, 0x3e	; 62
#if LCD_MODE == FOUR_BIT_MODE
	Lcd_ES_tsendCmd(Four_BitMode);   /* Go into 4-bit operating mode*/
    2c96:	82 e0       	ldi	r24, 0x02	; 2
    2c98:	0e 94 e7 16 	call	0x2dce	; 0x2dce <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(D4_D7);  /* 2 Line, 5*7 matrix in 4-bit mode */
    2c9c:	88 e2       	ldi	r24, 0x28	; 40
    2c9e:	0e 94 e7 16 	call	0x2dce	; 0x2dce <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
    2ca2:	8e e0       	ldi	r24, 0x0E	; 14
    2ca4:	0e 94 e7 16 	call	0x2dce	; 0x2dce <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
    2ca8:	86 e0       	ldi	r24, 0x06	; 6
    2caa:	0e 94 e7 16 	call	0x2dce	; 0x2dce <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	0e 94 e7 16 	call	0x2dce	; 0x2dce <Lcd_ES_tsendCmd>
	return ES_OK;
    2cb4:	80 e0       	ldi	r24, 0x00	; 0
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
	return ES_OK;
#endif
}
    2cb6:	cf 91       	pop	r28
    2cb8:	df 91       	pop	r29
    2cba:	08 95       	ret

00002cbc <lcd_ES_tclear>:
 *
 *	Ex. 0x28 0b 0010 1000  //Read bit by bit and see if it is low or high
 */

ES_t lcd_ES_tclear()
{
    2cbc:	df 93       	push	r29
    2cbe:	cf 93       	push	r28
    2cc0:	cd b7       	in	r28, 0x3d	; 61
    2cc2:	de b7       	in	r29, 0x3e	; 62
    2cc4:	2e 97       	sbiw	r28, 0x0e	; 14
    2cc6:	0f b6       	in	r0, 0x3f	; 63
    2cc8:	f8 94       	cli
    2cca:	de bf       	out	0x3e, r29	; 62
    2ccc:	0f be       	out	0x3f, r0	; 63
    2cce:	cd bf       	out	0x3d, r28	; 61
	Lcd_ES_tsendCmd(CLR_Display);
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	0e 94 e7 16 	call	0x2dce	; 0x2dce <Lcd_ES_tsendCmd>
    2cd6:	80 e0       	ldi	r24, 0x00	; 0
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	a0 e0       	ldi	r26, 0x00	; 0
    2cdc:	b0 e4       	ldi	r27, 0x40	; 64
    2cde:	8b 87       	std	Y+11, r24	; 0x0b
    2ce0:	9c 87       	std	Y+12, r25	; 0x0c
    2ce2:	ad 87       	std	Y+13, r26	; 0x0d
    2ce4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ce6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ce8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cea:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cec:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	4a e7       	ldi	r20, 0x7A	; 122
    2cf4:	55 e4       	ldi	r21, 0x45	; 69
    2cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	cb 01       	movw	r24, r22
    2cfe:	8f 83       	std	Y+7, r24	; 0x07
    2d00:	98 87       	std	Y+8, r25	; 0x08
    2d02:	a9 87       	std	Y+9, r26	; 0x09
    2d04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d06:	6f 81       	ldd	r22, Y+7	; 0x07
    2d08:	78 85       	ldd	r23, Y+8	; 0x08
    2d0a:	89 85       	ldd	r24, Y+9	; 0x09
    2d0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	40 e8       	ldi	r20, 0x80	; 128
    2d14:	5f e3       	ldi	r21, 0x3F	; 63
    2d16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d1a:	88 23       	and	r24, r24
    2d1c:	2c f4       	brge	.+10     	; 0x2d28 <lcd_ES_tclear+0x6c>
		__ticks = 1;
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	9e 83       	std	Y+6, r25	; 0x06
    2d24:	8d 83       	std	Y+5, r24	; 0x05
    2d26:	3f c0       	rjmp	.+126    	; 0x2da6 <lcd_ES_tclear+0xea>
	else if (__tmp > 65535)
    2d28:	6f 81       	ldd	r22, Y+7	; 0x07
    2d2a:	78 85       	ldd	r23, Y+8	; 0x08
    2d2c:	89 85       	ldd	r24, Y+9	; 0x09
    2d2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d30:	20 e0       	ldi	r18, 0x00	; 0
    2d32:	3f ef       	ldi	r19, 0xFF	; 255
    2d34:	4f e7       	ldi	r20, 0x7F	; 127
    2d36:	57 e4       	ldi	r21, 0x47	; 71
    2d38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d3c:	18 16       	cp	r1, r24
    2d3e:	4c f5       	brge	.+82     	; 0x2d92 <lcd_ES_tclear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d40:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d42:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d44:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d46:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d48:	20 e0       	ldi	r18, 0x00	; 0
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	40 e2       	ldi	r20, 0x20	; 32
    2d4e:	51 e4       	ldi	r21, 0x41	; 65
    2d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	bc 01       	movw	r22, r24
    2d5a:	cd 01       	movw	r24, r26
    2d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d60:	dc 01       	movw	r26, r24
    2d62:	cb 01       	movw	r24, r22
    2d64:	9e 83       	std	Y+6, r25	; 0x06
    2d66:	8d 83       	std	Y+5, r24	; 0x05
    2d68:	0f c0       	rjmp	.+30     	; 0x2d88 <lcd_ES_tclear+0xcc>
    2d6a:	80 e9       	ldi	r24, 0x90	; 144
    2d6c:	91 e0       	ldi	r25, 0x01	; 1
    2d6e:	9c 83       	std	Y+4, r25	; 0x04
    2d70:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d72:	8b 81       	ldd	r24, Y+3	; 0x03
    2d74:	9c 81       	ldd	r25, Y+4	; 0x04
    2d76:	01 97       	sbiw	r24, 0x01	; 1
    2d78:	f1 f7       	brne	.-4      	; 0x2d76 <lcd_ES_tclear+0xba>
    2d7a:	9c 83       	std	Y+4, r25	; 0x04
    2d7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d80:	9e 81       	ldd	r25, Y+6	; 0x06
    2d82:	01 97       	sbiw	r24, 0x01	; 1
    2d84:	9e 83       	std	Y+6, r25	; 0x06
    2d86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d88:	8d 81       	ldd	r24, Y+5	; 0x05
    2d8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d8c:	00 97       	sbiw	r24, 0x00	; 0
    2d8e:	69 f7       	brne	.-38     	; 0x2d6a <lcd_ES_tclear+0xae>
    2d90:	14 c0       	rjmp	.+40     	; 0x2dba <lcd_ES_tclear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d92:	6f 81       	ldd	r22, Y+7	; 0x07
    2d94:	78 85       	ldd	r23, Y+8	; 0x08
    2d96:	89 85       	ldd	r24, Y+9	; 0x09
    2d98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d9e:	dc 01       	movw	r26, r24
    2da0:	cb 01       	movw	r24, r22
    2da2:	9e 83       	std	Y+6, r25	; 0x06
    2da4:	8d 83       	std	Y+5, r24	; 0x05
    2da6:	8d 81       	ldd	r24, Y+5	; 0x05
    2da8:	9e 81       	ldd	r25, Y+6	; 0x06
    2daa:	9a 83       	std	Y+2, r25	; 0x02
    2dac:	89 83       	std	Y+1, r24	; 0x01
    2dae:	89 81       	ldd	r24, Y+1	; 0x01
    2db0:	9a 81       	ldd	r25, Y+2	; 0x02
    2db2:	01 97       	sbiw	r24, 0x01	; 1
    2db4:	f1 f7       	brne	.-4      	; 0x2db2 <lcd_ES_tclear+0xf6>
    2db6:	9a 83       	std	Y+2, r25	; 0x02
    2db8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	return ES_OK;
    2dba:	80 e0       	ldi	r24, 0x00	; 0
}
    2dbc:	2e 96       	adiw	r28, 0x0e	; 14
    2dbe:	0f b6       	in	r0, 0x3f	; 63
    2dc0:	f8 94       	cli
    2dc2:	de bf       	out	0x3e, r29	; 62
    2dc4:	0f be       	out	0x3f, r0	; 63
    2dc6:	cd bf       	out	0x3d, r28	; 61
    2dc8:	cf 91       	pop	r28
    2dca:	df 91       	pop	r29
    2dcc:	08 95       	ret

00002dce <Lcd_ES_tsendCmd>:

ES_t Lcd_ES_tsendCmd(u8 cmd){
    2dce:	df 93       	push	r29
    2dd0:	cf 93       	push	r28
    2dd2:	0f 92       	push	r0
    2dd4:	cd b7       	in	r28, 0x3d	; 61
    2dd6:	de b7       	in	r29, 0x3e	; 62
    2dd8:	89 83       	std	Y+1, r24	; 0x01
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, LOW);
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	61 e0       	ldi	r22, 0x01	; 1
    2dde:	40 e0       	ldi	r20, 0x00	; 0
    2de0:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	60 e0       	ldi	r22, 0x00	; 0
    2de8:	40 e0       	ldi	r20, 0x00	; 0
    2dea:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
	// DIO_ES_tGetPinValue, DIO_ES_tSetPinValue
	// if(GET_BIT(cmd,7)){Dio_Write(D7,HIGH);}else{Dio_write(D7,LOW);}
	// We use ternary operator instead
#if LCD_MODE == FOUR_BIT_MODE
	(GET_BIT(cmd,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    2dee:	89 81       	ldd	r24, Y+1	; 0x01
    2df0:	88 23       	and	r24, r24
    2df2:	34 f4       	brge	.+12     	; 0x2e00 <Lcd_ES_tsendCmd+0x32>
    2df4:	80 e0       	ldi	r24, 0x00	; 0
    2df6:	66 e0       	ldi	r22, 0x06	; 6
    2df8:	41 e0       	ldi	r20, 0x01	; 1
    2dfa:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
    2dfe:	05 c0       	rjmp	.+10     	; 0x2e0a <Lcd_ES_tsendCmd+0x3c>
    2e00:	80 e0       	ldi	r24, 0x00	; 0
    2e02:	66 e0       	ldi	r22, 0x06	; 6
    2e04:	40 e0       	ldi	r20, 0x00	; 0
    2e06:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    2e0a:	89 81       	ldd	r24, Y+1	; 0x01
    2e0c:	82 95       	swap	r24
    2e0e:	86 95       	lsr	r24
    2e10:	86 95       	lsr	r24
    2e12:	83 70       	andi	r24, 0x03	; 3
    2e14:	88 2f       	mov	r24, r24
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	81 70       	andi	r24, 0x01	; 1
    2e1a:	90 70       	andi	r25, 0x00	; 0
    2e1c:	88 23       	and	r24, r24
    2e1e:	31 f0       	breq	.+12     	; 0x2e2c <Lcd_ES_tsendCmd+0x5e>
    2e20:	80 e0       	ldi	r24, 0x00	; 0
    2e22:	65 e0       	ldi	r22, 0x05	; 5
    2e24:	41 e0       	ldi	r20, 0x01	; 1
    2e26:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
    2e2a:	05 c0       	rjmp	.+10     	; 0x2e36 <Lcd_ES_tsendCmd+0x68>
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    2e2e:	65 e0       	ldi	r22, 0x05	; 5
    2e30:	40 e0       	ldi	r20, 0x00	; 0
    2e32:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    2e36:	89 81       	ldd	r24, Y+1	; 0x01
    2e38:	82 95       	swap	r24
    2e3a:	86 95       	lsr	r24
    2e3c:	87 70       	andi	r24, 0x07	; 7
    2e3e:	88 2f       	mov	r24, r24
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	81 70       	andi	r24, 0x01	; 1
    2e44:	90 70       	andi	r25, 0x00	; 0
    2e46:	88 23       	and	r24, r24
    2e48:	31 f0       	breq	.+12     	; 0x2e56 <Lcd_ES_tsendCmd+0x88>
    2e4a:	80 e0       	ldi	r24, 0x00	; 0
    2e4c:	64 e0       	ldi	r22, 0x04	; 4
    2e4e:	41 e0       	ldi	r20, 0x01	; 1
    2e50:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
    2e54:	05 c0       	rjmp	.+10     	; 0x2e60 <Lcd_ES_tsendCmd+0x92>
    2e56:	80 e0       	ldi	r24, 0x00	; 0
    2e58:	64 e0       	ldi	r22, 0x04	; 4
    2e5a:	40 e0       	ldi	r20, 0x00	; 0
    2e5c:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    2e60:	89 81       	ldd	r24, Y+1	; 0x01
    2e62:	82 95       	swap	r24
    2e64:	8f 70       	andi	r24, 0x0F	; 15
    2e66:	88 2f       	mov	r24, r24
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	81 70       	andi	r24, 0x01	; 1
    2e6c:	90 70       	andi	r25, 0x00	; 0
    2e6e:	88 23       	and	r24, r24
    2e70:	31 f0       	breq	.+12     	; 0x2e7e <Lcd_ES_tsendCmd+0xb0>
    2e72:	80 e0       	ldi	r24, 0x00	; 0
    2e74:	63 e0       	ldi	r22, 0x03	; 3
    2e76:	41 e0       	ldi	r20, 0x01	; 1
    2e78:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
    2e7c:	05 c0       	rjmp	.+10     	; 0x2e88 <Lcd_ES_tsendCmd+0xba>
    2e7e:	80 e0       	ldi	r24, 0x00	; 0
    2e80:	63 e0       	ldi	r22, 0x03	; 3
    2e82:	40 e0       	ldi	r20, 0x00	; 0
    2e84:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    2e88:	0e 94 ad 14 	call	0x295a	; 0x295a <LCD_ES_tTrigger_Enable>
	(GET_BIT(cmd,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    2e8c:	89 81       	ldd	r24, Y+1	; 0x01
    2e8e:	86 95       	lsr	r24
    2e90:	86 95       	lsr	r24
    2e92:	86 95       	lsr	r24
    2e94:	88 2f       	mov	r24, r24
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	81 70       	andi	r24, 0x01	; 1
    2e9a:	90 70       	andi	r25, 0x00	; 0
    2e9c:	88 23       	and	r24, r24
    2e9e:	31 f0       	breq	.+12     	; 0x2eac <Lcd_ES_tsendCmd+0xde>
    2ea0:	80 e0       	ldi	r24, 0x00	; 0
    2ea2:	66 e0       	ldi	r22, 0x06	; 6
    2ea4:	41 e0       	ldi	r20, 0x01	; 1
    2ea6:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
    2eaa:	05 c0       	rjmp	.+10     	; 0x2eb6 <Lcd_ES_tsendCmd+0xe8>
    2eac:	80 e0       	ldi	r24, 0x00	; 0
    2eae:	66 e0       	ldi	r22, 0x06	; 6
    2eb0:	40 e0       	ldi	r20, 0x00	; 0
    2eb2:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    2eb6:	89 81       	ldd	r24, Y+1	; 0x01
    2eb8:	86 95       	lsr	r24
    2eba:	86 95       	lsr	r24
    2ebc:	88 2f       	mov	r24, r24
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	81 70       	andi	r24, 0x01	; 1
    2ec2:	90 70       	andi	r25, 0x00	; 0
    2ec4:	88 23       	and	r24, r24
    2ec6:	31 f0       	breq	.+12     	; 0x2ed4 <Lcd_ES_tsendCmd+0x106>
    2ec8:	80 e0       	ldi	r24, 0x00	; 0
    2eca:	65 e0       	ldi	r22, 0x05	; 5
    2ecc:	41 e0       	ldi	r20, 0x01	; 1
    2ece:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
    2ed2:	05 c0       	rjmp	.+10     	; 0x2ede <Lcd_ES_tsendCmd+0x110>
    2ed4:	80 e0       	ldi	r24, 0x00	; 0
    2ed6:	65 e0       	ldi	r22, 0x05	; 5
    2ed8:	40 e0       	ldi	r20, 0x00	; 0
    2eda:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    2ede:	89 81       	ldd	r24, Y+1	; 0x01
    2ee0:	86 95       	lsr	r24
    2ee2:	88 2f       	mov	r24, r24
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	81 70       	andi	r24, 0x01	; 1
    2ee8:	90 70       	andi	r25, 0x00	; 0
    2eea:	88 23       	and	r24, r24
    2eec:	31 f0       	breq	.+12     	; 0x2efa <Lcd_ES_tsendCmd+0x12c>
    2eee:	80 e0       	ldi	r24, 0x00	; 0
    2ef0:	64 e0       	ldi	r22, 0x04	; 4
    2ef2:	41 e0       	ldi	r20, 0x01	; 1
    2ef4:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
    2ef8:	05 c0       	rjmp	.+10     	; 0x2f04 <Lcd_ES_tsendCmd+0x136>
    2efa:	80 e0       	ldi	r24, 0x00	; 0
    2efc:	64 e0       	ldi	r22, 0x04	; 4
    2efe:	40 e0       	ldi	r20, 0x00	; 0
    2f00:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    2f04:	89 81       	ldd	r24, Y+1	; 0x01
    2f06:	88 2f       	mov	r24, r24
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	81 70       	andi	r24, 0x01	; 1
    2f0c:	90 70       	andi	r25, 0x00	; 0
    2f0e:	88 23       	and	r24, r24
    2f10:	31 f0       	breq	.+12     	; 0x2f1e <Lcd_ES_tsendCmd+0x150>
    2f12:	80 e0       	ldi	r24, 0x00	; 0
    2f14:	63 e0       	ldi	r22, 0x03	; 3
    2f16:	41 e0       	ldi	r20, 0x01	; 1
    2f18:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
    2f1c:	05 c0       	rjmp	.+10     	; 0x2f28 <Lcd_ES_tsendCmd+0x15a>
    2f1e:	80 e0       	ldi	r24, 0x00	; 0
    2f20:	63 e0       	ldi	r22, 0x03	; 3
    2f22:	40 e0       	ldi	r20, 0x00	; 0
    2f24:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    2f28:	0e 94 ad 14 	call	0x295a	; 0x295a <LCD_ES_tTrigger_Enable>
	return ES_OK;
    2f2c:	80 e0       	ldi	r24, 0x00	; 0
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D0,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D0,LOW);
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif
}
    2f2e:	0f 90       	pop	r0
    2f30:	cf 91       	pop	r28
    2f32:	df 91       	pop	r29
    2f34:	08 95       	ret

00002f36 <Lcd_ES_tsendChar>:
ES_t Lcd_ES_tsendChar(u8 data){
    2f36:	df 93       	push	r29
    2f38:	cf 93       	push	r28
    2f3a:	0f 92       	push	r0
    2f3c:	cd b7       	in	r28, 0x3d	; 61
    2f3e:	de b7       	in	r29, 0x3e	; 62
    2f40:	89 83       	std	Y+1, r24	; 0x01
#if LCD_MODE == FOUR_BIT_MODE
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2f42:	81 e0       	ldi	r24, 0x01	; 1
    2f44:	61 e0       	ldi	r22, 0x01	; 1
    2f46:	41 e0       	ldi	r20, 0x01	; 1
    2f48:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2f4c:	81 e0       	ldi	r24, 0x01	; 1
    2f4e:	60 e0       	ldi	r22, 0x00	; 0
    2f50:	40 e0       	ldi	r20, 0x00	; 0
    2f52:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
	(GET_BIT(data,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    2f56:	89 81       	ldd	r24, Y+1	; 0x01
    2f58:	88 23       	and	r24, r24
    2f5a:	34 f4       	brge	.+12     	; 0x2f68 <Lcd_ES_tsendChar+0x32>
    2f5c:	80 e0       	ldi	r24, 0x00	; 0
    2f5e:	66 e0       	ldi	r22, 0x06	; 6
    2f60:	41 e0       	ldi	r20, 0x01	; 1
    2f62:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
    2f66:	05 c0       	rjmp	.+10     	; 0x2f72 <Lcd_ES_tsendChar+0x3c>
    2f68:	80 e0       	ldi	r24, 0x00	; 0
    2f6a:	66 e0       	ldi	r22, 0x06	; 6
    2f6c:	40 e0       	ldi	r20, 0x00	; 0
    2f6e:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
	(GET_BIT(data,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    2f72:	89 81       	ldd	r24, Y+1	; 0x01
    2f74:	82 95       	swap	r24
    2f76:	86 95       	lsr	r24
    2f78:	86 95       	lsr	r24
    2f7a:	83 70       	andi	r24, 0x03	; 3
    2f7c:	88 2f       	mov	r24, r24
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	81 70       	andi	r24, 0x01	; 1
    2f82:	90 70       	andi	r25, 0x00	; 0
    2f84:	88 23       	and	r24, r24
    2f86:	31 f0       	breq	.+12     	; 0x2f94 <Lcd_ES_tsendChar+0x5e>
    2f88:	80 e0       	ldi	r24, 0x00	; 0
    2f8a:	65 e0       	ldi	r22, 0x05	; 5
    2f8c:	41 e0       	ldi	r20, 0x01	; 1
    2f8e:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
    2f92:	05 c0       	rjmp	.+10     	; 0x2f9e <Lcd_ES_tsendChar+0x68>
    2f94:	80 e0       	ldi	r24, 0x00	; 0
    2f96:	65 e0       	ldi	r22, 0x05	; 5
    2f98:	40 e0       	ldi	r20, 0x00	; 0
    2f9a:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
	(GET_BIT(data,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    2f9e:	89 81       	ldd	r24, Y+1	; 0x01
    2fa0:	82 95       	swap	r24
    2fa2:	86 95       	lsr	r24
    2fa4:	87 70       	andi	r24, 0x07	; 7
    2fa6:	88 2f       	mov	r24, r24
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	81 70       	andi	r24, 0x01	; 1
    2fac:	90 70       	andi	r25, 0x00	; 0
    2fae:	88 23       	and	r24, r24
    2fb0:	31 f0       	breq	.+12     	; 0x2fbe <Lcd_ES_tsendChar+0x88>
    2fb2:	80 e0       	ldi	r24, 0x00	; 0
    2fb4:	64 e0       	ldi	r22, 0x04	; 4
    2fb6:	41 e0       	ldi	r20, 0x01	; 1
    2fb8:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
    2fbc:	05 c0       	rjmp	.+10     	; 0x2fc8 <Lcd_ES_tsendChar+0x92>
    2fbe:	80 e0       	ldi	r24, 0x00	; 0
    2fc0:	64 e0       	ldi	r22, 0x04	; 4
    2fc2:	40 e0       	ldi	r20, 0x00	; 0
    2fc4:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
	(GET_BIT(data,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    2fc8:	89 81       	ldd	r24, Y+1	; 0x01
    2fca:	82 95       	swap	r24
    2fcc:	8f 70       	andi	r24, 0x0F	; 15
    2fce:	88 2f       	mov	r24, r24
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	81 70       	andi	r24, 0x01	; 1
    2fd4:	90 70       	andi	r25, 0x00	; 0
    2fd6:	88 23       	and	r24, r24
    2fd8:	31 f0       	breq	.+12     	; 0x2fe6 <Lcd_ES_tsendChar+0xb0>
    2fda:	80 e0       	ldi	r24, 0x00	; 0
    2fdc:	63 e0       	ldi	r22, 0x03	; 3
    2fde:	41 e0       	ldi	r20, 0x01	; 1
    2fe0:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
    2fe4:	05 c0       	rjmp	.+10     	; 0x2ff0 <Lcd_ES_tsendChar+0xba>
    2fe6:	80 e0       	ldi	r24, 0x00	; 0
    2fe8:	63 e0       	ldi	r22, 0x03	; 3
    2fea:	40 e0       	ldi	r20, 0x00	; 0
    2fec:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    2ff0:	0e 94 ad 14 	call	0x295a	; 0x295a <LCD_ES_tTrigger_Enable>
	(GET_BIT(data,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    2ff4:	89 81       	ldd	r24, Y+1	; 0x01
    2ff6:	86 95       	lsr	r24
    2ff8:	86 95       	lsr	r24
    2ffa:	86 95       	lsr	r24
    2ffc:	88 2f       	mov	r24, r24
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	81 70       	andi	r24, 0x01	; 1
    3002:	90 70       	andi	r25, 0x00	; 0
    3004:	88 23       	and	r24, r24
    3006:	31 f0       	breq	.+12     	; 0x3014 <Lcd_ES_tsendChar+0xde>
    3008:	80 e0       	ldi	r24, 0x00	; 0
    300a:	66 e0       	ldi	r22, 0x06	; 6
    300c:	41 e0       	ldi	r20, 0x01	; 1
    300e:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
    3012:	05 c0       	rjmp	.+10     	; 0x301e <Lcd_ES_tsendChar+0xe8>
    3014:	80 e0       	ldi	r24, 0x00	; 0
    3016:	66 e0       	ldi	r22, 0x06	; 6
    3018:	40 e0       	ldi	r20, 0x00	; 0
    301a:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
	(GET_BIT(data,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    301e:	89 81       	ldd	r24, Y+1	; 0x01
    3020:	86 95       	lsr	r24
    3022:	86 95       	lsr	r24
    3024:	88 2f       	mov	r24, r24
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	81 70       	andi	r24, 0x01	; 1
    302a:	90 70       	andi	r25, 0x00	; 0
    302c:	88 23       	and	r24, r24
    302e:	31 f0       	breq	.+12     	; 0x303c <Lcd_ES_tsendChar+0x106>
    3030:	80 e0       	ldi	r24, 0x00	; 0
    3032:	65 e0       	ldi	r22, 0x05	; 5
    3034:	41 e0       	ldi	r20, 0x01	; 1
    3036:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
    303a:	05 c0       	rjmp	.+10     	; 0x3046 <Lcd_ES_tsendChar+0x110>
    303c:	80 e0       	ldi	r24, 0x00	; 0
    303e:	65 e0       	ldi	r22, 0x05	; 5
    3040:	40 e0       	ldi	r20, 0x00	; 0
    3042:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
	(GET_BIT(data,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    3046:	89 81       	ldd	r24, Y+1	; 0x01
    3048:	86 95       	lsr	r24
    304a:	88 2f       	mov	r24, r24
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	81 70       	andi	r24, 0x01	; 1
    3050:	90 70       	andi	r25, 0x00	; 0
    3052:	88 23       	and	r24, r24
    3054:	31 f0       	breq	.+12     	; 0x3062 <Lcd_ES_tsendChar+0x12c>
    3056:	80 e0       	ldi	r24, 0x00	; 0
    3058:	64 e0       	ldi	r22, 0x04	; 4
    305a:	41 e0       	ldi	r20, 0x01	; 1
    305c:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
    3060:	05 c0       	rjmp	.+10     	; 0x306c <Lcd_ES_tsendChar+0x136>
    3062:	80 e0       	ldi	r24, 0x00	; 0
    3064:	64 e0       	ldi	r22, 0x04	; 4
    3066:	40 e0       	ldi	r20, 0x00	; 0
    3068:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
	(GET_BIT(data,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    306c:	89 81       	ldd	r24, Y+1	; 0x01
    306e:	88 2f       	mov	r24, r24
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	81 70       	andi	r24, 0x01	; 1
    3074:	90 70       	andi	r25, 0x00	; 0
    3076:	88 23       	and	r24, r24
    3078:	31 f0       	breq	.+12     	; 0x3086 <Lcd_ES_tsendChar+0x150>
    307a:	80 e0       	ldi	r24, 0x00	; 0
    307c:	63 e0       	ldi	r22, 0x03	; 3
    307e:	41 e0       	ldi	r20, 0x01	; 1
    3080:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
    3084:	05 c0       	rjmp	.+10     	; 0x3090 <Lcd_ES_tsendChar+0x15a>
    3086:	80 e0       	ldi	r24, 0x00	; 0
    3088:	63 e0       	ldi	r22, 0x03	; 3
    308a:	40 e0       	ldi	r20, 0x00	; 0
    308c:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    3090:	0e 94 ad 14 	call	0x295a	; 0x295a <LCD_ES_tTrigger_Enable>
	return ES_OK;
    3094:	80 e0       	ldi	r24, 0x00	; 0
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif

}
    3096:	0f 90       	pop	r0
    3098:	cf 91       	pop	r28
    309a:	df 91       	pop	r29
    309c:	08 95       	ret

0000309e <Lcd_ES_tsendString>:

ES_t Lcd_ES_tsendString(char *data)
{
    309e:	df 93       	push	r29
    30a0:	cf 93       	push	r28
    30a2:	00 d0       	rcall	.+0      	; 0x30a4 <Lcd_ES_tsendString+0x6>
    30a4:	0f 92       	push	r0
    30a6:	cd b7       	in	r28, 0x3d	; 61
    30a8:	de b7       	in	r29, 0x3e	; 62
    30aa:	9b 83       	std	Y+3, r25	; 0x03
    30ac:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    30ae:	81 e0       	ldi	r24, 0x01	; 1
    30b0:	61 e0       	ldi	r22, 0x01	; 1
    30b2:	41 e0       	ldi	r20, 0x01	; 1
    30b4:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    30b8:	81 e0       	ldi	r24, 0x01	; 1
    30ba:	60 e0       	ldi	r22, 0x00	; 0
    30bc:	40 e0       	ldi	r20, 0x00	; 0
    30be:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>

	unsigned char i=0;
    30c2:	19 82       	std	Y+1, r1	; 0x01
    30c4:	0e c0       	rjmp	.+28     	; 0x30e2 <Lcd_ES_tsendString+0x44>
	while(data[i]!=0)
	{
		Lcd_ES_tsendChar(data[i]);
    30c6:	89 81       	ldd	r24, Y+1	; 0x01
    30c8:	28 2f       	mov	r18, r24
    30ca:	30 e0       	ldi	r19, 0x00	; 0
    30cc:	8a 81       	ldd	r24, Y+2	; 0x02
    30ce:	9b 81       	ldd	r25, Y+3	; 0x03
    30d0:	fc 01       	movw	r30, r24
    30d2:	e2 0f       	add	r30, r18
    30d4:	f3 1f       	adc	r31, r19
    30d6:	80 81       	ld	r24, Z
    30d8:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <Lcd_ES_tsendChar>
		i++;
    30dc:	89 81       	ldd	r24, Y+1	; 0x01
    30de:	8f 5f       	subi	r24, 0xFF	; 255
    30e0:	89 83       	std	Y+1, r24	; 0x01
{
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);

	unsigned char i=0;
	while(data[i]!=0)
    30e2:	89 81       	ldd	r24, Y+1	; 0x01
    30e4:	28 2f       	mov	r18, r24
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ea:	9b 81       	ldd	r25, Y+3	; 0x03
    30ec:	fc 01       	movw	r30, r24
    30ee:	e2 0f       	add	r30, r18
    30f0:	f3 1f       	adc	r31, r19
    30f2:	80 81       	ld	r24, Z
    30f4:	88 23       	and	r24, r24
    30f6:	39 f7       	brne	.-50     	; 0x30c6 <Lcd_ES_tsendString+0x28>
	{
		Lcd_ES_tsendChar(data[i]);
		i++;
	}
	return ES_OK;
    30f8:	80 e0       	ldi	r24, 0x00	; 0
}
    30fa:	0f 90       	pop	r0
    30fc:	0f 90       	pop	r0
    30fe:	0f 90       	pop	r0
    3100:	cf 91       	pop	r28
    3102:	df 91       	pop	r29
    3104:	08 95       	ret

00003106 <Lcd_ES_tsendString_xy>:

ES_t Lcd_ES_tsendString_xy(char *data,u8 row,u8 col){
    3106:	df 93       	push	r29
    3108:	cf 93       	push	r28
    310a:	00 d0       	rcall	.+0      	; 0x310c <Lcd_ES_tsendString_xy+0x6>
    310c:	00 d0       	rcall	.+0      	; 0x310e <Lcd_ES_tsendString_xy+0x8>
    310e:	cd b7       	in	r28, 0x3d	; 61
    3110:	de b7       	in	r29, 0x3e	; 62
    3112:	9a 83       	std	Y+2, r25	; 0x02
    3114:	89 83       	std	Y+1, r24	; 0x01
    3116:	6b 83       	std	Y+3, r22	; 0x03
    3118:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    311a:	81 e0       	ldi	r24, 0x01	; 1
    311c:	61 e0       	ldi	r22, 0x01	; 1
    311e:	41 e0       	ldi	r20, 0x01	; 1
    3120:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    3124:	81 e0       	ldi	r24, 0x01	; 1
    3126:	60 e0       	ldi	r22, 0x00	; 0
    3128:	40 e0       	ldi	r20, 0x00	; 0
    312a:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>

	LCD_ES_tSet_Cursor_Pos(row,col);
    312e:	8b 81       	ldd	r24, Y+3	; 0x03
    3130:	6c 81       	ldd	r22, Y+4	; 0x04
    3132:	0e 94 92 1b 	call	0x3724	; 0x3724 <LCD_ES_tSet_Cursor_Pos>
	Lcd_ES_tsendString(data);
    3136:	89 81       	ldd	r24, Y+1	; 0x01
    3138:	9a 81       	ldd	r25, Y+2	; 0x02
    313a:	0e 94 4f 18 	call	0x309e	; 0x309e <Lcd_ES_tsendString>
	return ES_OK;
    313e:	80 e0       	ldi	r24, 0x00	; 0

}
    3140:	0f 90       	pop	r0
    3142:	0f 90       	pop	r0
    3144:	0f 90       	pop	r0
    3146:	0f 90       	pop	r0
    3148:	cf 91       	pop	r28
    314a:	df 91       	pop	r29
    314c:	08 95       	ret

0000314e <Lcd_ES_tdisplayNum>:


//A function to display Numbers instead of characters
ES_t Lcd_ES_tdisplayNum(u32 num)
{
    314e:	0f 93       	push	r16
    3150:	1f 93       	push	r17
    3152:	df 93       	push	r29
    3154:	cf 93       	push	r28
    3156:	cd b7       	in	r28, 0x3d	; 61
    3158:	de b7       	in	r29, 0x3e	; 62
    315a:	60 97       	sbiw	r28, 0x10	; 16
    315c:	0f b6       	in	r0, 0x3f	; 63
    315e:	f8 94       	cli
    3160:	de bf       	out	0x3e, r29	; 62
    3162:	0f be       	out	0x3f, r0	; 63
    3164:	cd bf       	out	0x3d, r28	; 61
    3166:	6d 87       	std	Y+13, r22	; 0x0d
    3168:	7e 87       	std	Y+14, r23	; 0x0e
    316a:	8f 87       	std	Y+15, r24	; 0x0f
    316c:	98 8b       	std	Y+16, r25	; 0x10
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    316e:	81 e0       	ldi	r24, 0x01	; 1
    3170:	61 e0       	ldi	r22, 0x01	; 1
    3172:	41 e0       	ldi	r20, 0x01	; 1
    3174:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    3178:	81 e0       	ldi	r24, 0x01	; 1
    317a:	60 e0       	ldi	r22, 0x00	; 0
    317c:	40 e0       	ldi	r20, 0x00	; 0
    317e:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>

	uint8_t ch[10],i=0,j=0;
    3182:	1a 82       	std	Y+2, r1	; 0x02
    3184:	19 82       	std	Y+1, r1	; 0x01
	if(num == 0)
    3186:	8d 85       	ldd	r24, Y+13	; 0x0d
    3188:	9e 85       	ldd	r25, Y+14	; 0x0e
    318a:	af 85       	ldd	r26, Y+15	; 0x0f
    318c:	b8 89       	ldd	r27, Y+16	; 0x10
    318e:	00 97       	sbiw	r24, 0x00	; 0
    3190:	a1 05       	cpc	r26, r1
    3192:	b1 05       	cpc	r27, r1
    3194:	91 f5       	brne	.+100    	; 0x31fa <Lcd_ES_tdisplayNum+0xac>
	{
		Lcd_ES_tsendChar('0');
    3196:	80 e3       	ldi	r24, 0x30	; 48
    3198:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <Lcd_ES_tsendChar>
    319c:	4d c0       	rjmp	.+154    	; 0x3238 <Lcd_ES_tdisplayNum+0xea>
	}
	else
	{
		while(num)
		{
			ch[i] = num % 10 + '0';  //To convert int to char
    319e:	8a 81       	ldd	r24, Y+2	; 0x02
    31a0:	08 2f       	mov	r16, r24
    31a2:	10 e0       	ldi	r17, 0x00	; 0
    31a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    31a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    31a8:	af 85       	ldd	r26, Y+15	; 0x0f
    31aa:	b8 89       	ldd	r27, Y+16	; 0x10
    31ac:	2a e0       	ldi	r18, 0x0A	; 10
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	40 e0       	ldi	r20, 0x00	; 0
    31b2:	50 e0       	ldi	r21, 0x00	; 0
    31b4:	bc 01       	movw	r22, r24
    31b6:	cd 01       	movw	r24, r26
    31b8:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <__udivmodsi4>
    31bc:	dc 01       	movw	r26, r24
    31be:	cb 01       	movw	r24, r22
    31c0:	28 2f       	mov	r18, r24
    31c2:	20 5d       	subi	r18, 0xD0	; 208
    31c4:	ce 01       	movw	r24, r28
    31c6:	03 96       	adiw	r24, 0x03	; 3
    31c8:	fc 01       	movw	r30, r24
    31ca:	e0 0f       	add	r30, r16
    31cc:	f1 1f       	adc	r31, r17
    31ce:	20 83       	st	Z, r18
			num /= 10;
    31d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    31d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    31d4:	af 85       	ldd	r26, Y+15	; 0x0f
    31d6:	b8 89       	ldd	r27, Y+16	; 0x10
    31d8:	2a e0       	ldi	r18, 0x0A	; 10
    31da:	30 e0       	ldi	r19, 0x00	; 0
    31dc:	40 e0       	ldi	r20, 0x00	; 0
    31de:	50 e0       	ldi	r21, 0x00	; 0
    31e0:	bc 01       	movw	r22, r24
    31e2:	cd 01       	movw	r24, r26
    31e4:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <__udivmodsi4>
    31e8:	da 01       	movw	r26, r20
    31ea:	c9 01       	movw	r24, r18
    31ec:	8d 87       	std	Y+13, r24	; 0x0d
    31ee:	9e 87       	std	Y+14, r25	; 0x0e
    31f0:	af 87       	std	Y+15, r26	; 0x0f
    31f2:	b8 8b       	std	Y+16, r27	; 0x10
			i++;
    31f4:	8a 81       	ldd	r24, Y+2	; 0x02
    31f6:	8f 5f       	subi	r24, 0xFF	; 255
    31f8:	8a 83       	std	Y+2, r24	; 0x02
	{
		Lcd_ES_tsendChar('0');
	}
	else
	{
		while(num)
    31fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    31fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    31fe:	af 85       	ldd	r26, Y+15	; 0x0f
    3200:	b8 89       	ldd	r27, Y+16	; 0x10
    3202:	00 97       	sbiw	r24, 0x00	; 0
    3204:	a1 05       	cpc	r26, r1
    3206:	b1 05       	cpc	r27, r1
    3208:	51 f6       	brne	.-108    	; 0x319e <Lcd_ES_tdisplayNum+0x50>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    320a:	8a 81       	ldd	r24, Y+2	; 0x02
    320c:	89 83       	std	Y+1, r24	; 0x01
    320e:	11 c0       	rjmp	.+34     	; 0x3232 <Lcd_ES_tdisplayNum+0xe4>
		{
			Lcd_ES_tsendChar(ch[j-1]);
    3210:	89 81       	ldd	r24, Y+1	; 0x01
    3212:	88 2f       	mov	r24, r24
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	9c 01       	movw	r18, r24
    3218:	21 50       	subi	r18, 0x01	; 1
    321a:	30 40       	sbci	r19, 0x00	; 0
    321c:	ce 01       	movw	r24, r28
    321e:	03 96       	adiw	r24, 0x03	; 3
    3220:	fc 01       	movw	r30, r24
    3222:	e2 0f       	add	r30, r18
    3224:	f3 1f       	adc	r31, r19
    3226:	80 81       	ld	r24, Z
    3228:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <Lcd_ES_tsendChar>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    322c:	89 81       	ldd	r24, Y+1	; 0x01
    322e:	81 50       	subi	r24, 0x01	; 1
    3230:	89 83       	std	Y+1, r24	; 0x01
    3232:	89 81       	ldd	r24, Y+1	; 0x01
    3234:	88 23       	and	r24, r24
    3236:	61 f7       	brne	.-40     	; 0x3210 <Lcd_ES_tdisplayNum+0xc2>
		{
			Lcd_ES_tsendChar(ch[j-1]);
		}
	}
	return ES_OK;
    3238:	80 e0       	ldi	r24, 0x00	; 0
}
    323a:	60 96       	adiw	r28, 0x10	; 16
    323c:	0f b6       	in	r0, 0x3f	; 63
    323e:	f8 94       	cli
    3240:	de bf       	out	0x3e, r29	; 62
    3242:	0f be       	out	0x3f, r0	; 63
    3244:	cd bf       	out	0x3d, r28	; 61
    3246:	cf 91       	pop	r28
    3248:	df 91       	pop	r29
    324a:	1f 91       	pop	r17
    324c:	0f 91       	pop	r16
    324e:	08 95       	ret

00003250 <Lcd_ES_tdisplayNum_xy>:

ES_t Lcd_ES_tdisplayNum_xy(u32 num,u8 row,u8 col){
    3250:	df 93       	push	r29
    3252:	cf 93       	push	r28
    3254:	cd b7       	in	r28, 0x3d	; 61
    3256:	de b7       	in	r29, 0x3e	; 62
    3258:	a5 97       	sbiw	r28, 0x25	; 37
    325a:	0f b6       	in	r0, 0x3f	; 63
    325c:	f8 94       	cli
    325e:	de bf       	out	0x3e, r29	; 62
    3260:	0f be       	out	0x3f, r0	; 63
    3262:	cd bf       	out	0x3d, r28	; 61
    3264:	6f 8f       	std	Y+31, r22	; 0x1f
    3266:	78 a3       	std	Y+32, r23	; 0x20
    3268:	89 a3       	std	Y+33, r24	; 0x21
    326a:	9a a3       	std	Y+34, r25	; 0x22
    326c:	4b a3       	std	Y+35, r20	; 0x23
    326e:	2c a3       	std	Y+36, r18	; 0x24

	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    3270:	81 e0       	ldi	r24, 0x01	; 1
    3272:	61 e0       	ldi	r22, 0x01	; 1
    3274:	41 e0       	ldi	r20, 0x01	; 1
    3276:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    327a:	81 e0       	ldi	r24, 0x01	; 1
    327c:	60 e0       	ldi	r22, 0x00	; 0
    327e:	40 e0       	ldi	r20, 0x00	; 0
    3280:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>


	if(row == 1){
    3284:	8b a1       	ldd	r24, Y+35	; 0x23
    3286:	81 30       	cpi	r24, 0x01	; 1
    3288:	09 f0       	breq	.+2      	; 0x328c <Lcd_ES_tdisplayNum_xy+0x3c>
    328a:	76 c0       	rjmp	.+236    	; 0x3378 <Lcd_ES_tdisplayNum_xy+0x128>
		Lcd_ES_tsendCmd(Force1stline);
    328c:	80 e8       	ldi	r24, 0x80	; 128
    328e:	0e 94 e7 16 	call	0x2dce	; 0x2dce <Lcd_ES_tsendCmd>
    3292:	80 e0       	ldi	r24, 0x00	; 0
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	a0 e8       	ldi	r26, 0x80	; 128
    3298:	bf e3       	ldi	r27, 0x3F	; 63
    329a:	89 8f       	std	Y+25, r24	; 0x19
    329c:	9a 8f       	std	Y+26, r25	; 0x1a
    329e:	ab 8f       	std	Y+27, r26	; 0x1b
    32a0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32a2:	69 8d       	ldd	r22, Y+25	; 0x19
    32a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32aa:	20 e0       	ldi	r18, 0x00	; 0
    32ac:	30 e0       	ldi	r19, 0x00	; 0
    32ae:	4a e7       	ldi	r20, 0x7A	; 122
    32b0:	55 e4       	ldi	r21, 0x45	; 69
    32b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b6:	dc 01       	movw	r26, r24
    32b8:	cb 01       	movw	r24, r22
    32ba:	8d 8b       	std	Y+21, r24	; 0x15
    32bc:	9e 8b       	std	Y+22, r25	; 0x16
    32be:	af 8b       	std	Y+23, r26	; 0x17
    32c0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32c2:	6d 89       	ldd	r22, Y+21	; 0x15
    32c4:	7e 89       	ldd	r23, Y+22	; 0x16
    32c6:	8f 89       	ldd	r24, Y+23	; 0x17
    32c8:	98 8d       	ldd	r25, Y+24	; 0x18
    32ca:	20 e0       	ldi	r18, 0x00	; 0
    32cc:	30 e0       	ldi	r19, 0x00	; 0
    32ce:	40 e8       	ldi	r20, 0x80	; 128
    32d0:	5f e3       	ldi	r21, 0x3F	; 63
    32d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32d6:	88 23       	and	r24, r24
    32d8:	2c f4       	brge	.+10     	; 0x32e4 <Lcd_ES_tdisplayNum_xy+0x94>
		__ticks = 1;
    32da:	81 e0       	ldi	r24, 0x01	; 1
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	9c 8b       	std	Y+20, r25	; 0x14
    32e0:	8b 8b       	std	Y+19, r24	; 0x13
    32e2:	3f c0       	rjmp	.+126    	; 0x3362 <Lcd_ES_tdisplayNum_xy+0x112>
	else if (__tmp > 65535)
    32e4:	6d 89       	ldd	r22, Y+21	; 0x15
    32e6:	7e 89       	ldd	r23, Y+22	; 0x16
    32e8:	8f 89       	ldd	r24, Y+23	; 0x17
    32ea:	98 8d       	ldd	r25, Y+24	; 0x18
    32ec:	20 e0       	ldi	r18, 0x00	; 0
    32ee:	3f ef       	ldi	r19, 0xFF	; 255
    32f0:	4f e7       	ldi	r20, 0x7F	; 127
    32f2:	57 e4       	ldi	r21, 0x47	; 71
    32f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32f8:	18 16       	cp	r1, r24
    32fa:	4c f5       	brge	.+82     	; 0x334e <Lcd_ES_tdisplayNum_xy+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32fc:	69 8d       	ldd	r22, Y+25	; 0x19
    32fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3300:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3302:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3304:	20 e0       	ldi	r18, 0x00	; 0
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	40 e2       	ldi	r20, 0x20	; 32
    330a:	51 e4       	ldi	r21, 0x41	; 65
    330c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3310:	dc 01       	movw	r26, r24
    3312:	cb 01       	movw	r24, r22
    3314:	bc 01       	movw	r22, r24
    3316:	cd 01       	movw	r24, r26
    3318:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    331c:	dc 01       	movw	r26, r24
    331e:	cb 01       	movw	r24, r22
    3320:	9c 8b       	std	Y+20, r25	; 0x14
    3322:	8b 8b       	std	Y+19, r24	; 0x13
    3324:	0f c0       	rjmp	.+30     	; 0x3344 <Lcd_ES_tdisplayNum_xy+0xf4>
    3326:	80 e9       	ldi	r24, 0x90	; 144
    3328:	91 e0       	ldi	r25, 0x01	; 1
    332a:	9a 8b       	std	Y+18, r25	; 0x12
    332c:	89 8b       	std	Y+17, r24	; 0x11
    332e:	89 89       	ldd	r24, Y+17	; 0x11
    3330:	9a 89       	ldd	r25, Y+18	; 0x12
    3332:	01 97       	sbiw	r24, 0x01	; 1
    3334:	f1 f7       	brne	.-4      	; 0x3332 <Lcd_ES_tdisplayNum_xy+0xe2>
    3336:	9a 8b       	std	Y+18, r25	; 0x12
    3338:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    333a:	8b 89       	ldd	r24, Y+19	; 0x13
    333c:	9c 89       	ldd	r25, Y+20	; 0x14
    333e:	01 97       	sbiw	r24, 0x01	; 1
    3340:	9c 8b       	std	Y+20, r25	; 0x14
    3342:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3344:	8b 89       	ldd	r24, Y+19	; 0x13
    3346:	9c 89       	ldd	r25, Y+20	; 0x14
    3348:	00 97       	sbiw	r24, 0x00	; 0
    334a:	69 f7       	brne	.-38     	; 0x3326 <Lcd_ES_tdisplayNum_xy+0xd6>
    334c:	92 c0       	rjmp	.+292    	; 0x3472 <Lcd_ES_tdisplayNum_xy+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    334e:	6d 89       	ldd	r22, Y+21	; 0x15
    3350:	7e 89       	ldd	r23, Y+22	; 0x16
    3352:	8f 89       	ldd	r24, Y+23	; 0x17
    3354:	98 8d       	ldd	r25, Y+24	; 0x18
    3356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    335a:	dc 01       	movw	r26, r24
    335c:	cb 01       	movw	r24, r22
    335e:	9c 8b       	std	Y+20, r25	; 0x14
    3360:	8b 8b       	std	Y+19, r24	; 0x13
    3362:	8b 89       	ldd	r24, Y+19	; 0x13
    3364:	9c 89       	ldd	r25, Y+20	; 0x14
    3366:	98 8b       	std	Y+16, r25	; 0x10
    3368:	8f 87       	std	Y+15, r24	; 0x0f
    336a:	8f 85       	ldd	r24, Y+15	; 0x0f
    336c:	98 89       	ldd	r25, Y+16	; 0x10
    336e:	01 97       	sbiw	r24, 0x01	; 1
    3370:	f1 f7       	brne	.-4      	; 0x336e <Lcd_ES_tdisplayNum_xy+0x11e>
    3372:	98 8b       	std	Y+16, r25	; 0x10
    3374:	8f 87       	std	Y+15, r24	; 0x0f
    3376:	7d c0       	rjmp	.+250    	; 0x3472 <Lcd_ES_tdisplayNum_xy+0x222>
		_delay_ms(1);
	}else if(row == 2){
    3378:	8b a1       	ldd	r24, Y+35	; 0x23
    337a:	82 30       	cpi	r24, 0x02	; 2
    337c:	09 f0       	breq	.+2      	; 0x3380 <Lcd_ES_tdisplayNum_xy+0x130>
    337e:	76 c0       	rjmp	.+236    	; 0x346c <Lcd_ES_tdisplayNum_xy+0x21c>
		Lcd_ES_tsendCmd(Force2ndline);
    3380:	80 ec       	ldi	r24, 0xC0	; 192
    3382:	0e 94 e7 16 	call	0x2dce	; 0x2dce <Lcd_ES_tsendCmd>
    3386:	80 e0       	ldi	r24, 0x00	; 0
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	a0 e2       	ldi	r26, 0x20	; 32
    338c:	b1 e4       	ldi	r27, 0x41	; 65
    338e:	8b 87       	std	Y+11, r24	; 0x0b
    3390:	9c 87       	std	Y+12, r25	; 0x0c
    3392:	ad 87       	std	Y+13, r26	; 0x0d
    3394:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3396:	6b 85       	ldd	r22, Y+11	; 0x0b
    3398:	7c 85       	ldd	r23, Y+12	; 0x0c
    339a:	8d 85       	ldd	r24, Y+13	; 0x0d
    339c:	9e 85       	ldd	r25, Y+14	; 0x0e
    339e:	20 e0       	ldi	r18, 0x00	; 0
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	4a e7       	ldi	r20, 0x7A	; 122
    33a4:	55 e4       	ldi	r21, 0x45	; 69
    33a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33aa:	dc 01       	movw	r26, r24
    33ac:	cb 01       	movw	r24, r22
    33ae:	8f 83       	std	Y+7, r24	; 0x07
    33b0:	98 87       	std	Y+8, r25	; 0x08
    33b2:	a9 87       	std	Y+9, r26	; 0x09
    33b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33b6:	6f 81       	ldd	r22, Y+7	; 0x07
    33b8:	78 85       	ldd	r23, Y+8	; 0x08
    33ba:	89 85       	ldd	r24, Y+9	; 0x09
    33bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    33be:	20 e0       	ldi	r18, 0x00	; 0
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	40 e8       	ldi	r20, 0x80	; 128
    33c4:	5f e3       	ldi	r21, 0x3F	; 63
    33c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33ca:	88 23       	and	r24, r24
    33cc:	2c f4       	brge	.+10     	; 0x33d8 <Lcd_ES_tdisplayNum_xy+0x188>
		__ticks = 1;
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	9e 83       	std	Y+6, r25	; 0x06
    33d4:	8d 83       	std	Y+5, r24	; 0x05
    33d6:	3f c0       	rjmp	.+126    	; 0x3456 <Lcd_ES_tdisplayNum_xy+0x206>
	else if (__tmp > 65535)
    33d8:	6f 81       	ldd	r22, Y+7	; 0x07
    33da:	78 85       	ldd	r23, Y+8	; 0x08
    33dc:	89 85       	ldd	r24, Y+9	; 0x09
    33de:	9a 85       	ldd	r25, Y+10	; 0x0a
    33e0:	20 e0       	ldi	r18, 0x00	; 0
    33e2:	3f ef       	ldi	r19, 0xFF	; 255
    33e4:	4f e7       	ldi	r20, 0x7F	; 127
    33e6:	57 e4       	ldi	r21, 0x47	; 71
    33e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33ec:	18 16       	cp	r1, r24
    33ee:	4c f5       	brge	.+82     	; 0x3442 <Lcd_ES_tdisplayNum_xy+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    33f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    33f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    33f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	40 e2       	ldi	r20, 0x20	; 32
    33fe:	51 e4       	ldi	r21, 0x41	; 65
    3400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	bc 01       	movw	r22, r24
    340a:	cd 01       	movw	r24, r26
    340c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3410:	dc 01       	movw	r26, r24
    3412:	cb 01       	movw	r24, r22
    3414:	9e 83       	std	Y+6, r25	; 0x06
    3416:	8d 83       	std	Y+5, r24	; 0x05
    3418:	0f c0       	rjmp	.+30     	; 0x3438 <Lcd_ES_tdisplayNum_xy+0x1e8>
    341a:	80 e9       	ldi	r24, 0x90	; 144
    341c:	91 e0       	ldi	r25, 0x01	; 1
    341e:	9c 83       	std	Y+4, r25	; 0x04
    3420:	8b 83       	std	Y+3, r24	; 0x03
    3422:	8b 81       	ldd	r24, Y+3	; 0x03
    3424:	9c 81       	ldd	r25, Y+4	; 0x04
    3426:	01 97       	sbiw	r24, 0x01	; 1
    3428:	f1 f7       	brne	.-4      	; 0x3426 <Lcd_ES_tdisplayNum_xy+0x1d6>
    342a:	9c 83       	std	Y+4, r25	; 0x04
    342c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    342e:	8d 81       	ldd	r24, Y+5	; 0x05
    3430:	9e 81       	ldd	r25, Y+6	; 0x06
    3432:	01 97       	sbiw	r24, 0x01	; 1
    3434:	9e 83       	std	Y+6, r25	; 0x06
    3436:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3438:	8d 81       	ldd	r24, Y+5	; 0x05
    343a:	9e 81       	ldd	r25, Y+6	; 0x06
    343c:	00 97       	sbiw	r24, 0x00	; 0
    343e:	69 f7       	brne	.-38     	; 0x341a <Lcd_ES_tdisplayNum_xy+0x1ca>
    3440:	18 c0       	rjmp	.+48     	; 0x3472 <Lcd_ES_tdisplayNum_xy+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3442:	6f 81       	ldd	r22, Y+7	; 0x07
    3444:	78 85       	ldd	r23, Y+8	; 0x08
    3446:	89 85       	ldd	r24, Y+9	; 0x09
    3448:	9a 85       	ldd	r25, Y+10	; 0x0a
    344a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344e:	dc 01       	movw	r26, r24
    3450:	cb 01       	movw	r24, r22
    3452:	9e 83       	std	Y+6, r25	; 0x06
    3454:	8d 83       	std	Y+5, r24	; 0x05
    3456:	8d 81       	ldd	r24, Y+5	; 0x05
    3458:	9e 81       	ldd	r25, Y+6	; 0x06
    345a:	9a 83       	std	Y+2, r25	; 0x02
    345c:	89 83       	std	Y+1, r24	; 0x01
    345e:	89 81       	ldd	r24, Y+1	; 0x01
    3460:	9a 81       	ldd	r25, Y+2	; 0x02
    3462:	01 97       	sbiw	r24, 0x01	; 1
    3464:	f1 f7       	brne	.-4      	; 0x3462 <Lcd_ES_tdisplayNum_xy+0x212>
    3466:	9a 83       	std	Y+2, r25	; 0x02
    3468:	89 83       	std	Y+1, r24	; 0x01
    346a:	03 c0       	rjmp	.+6      	; 0x3472 <Lcd_ES_tdisplayNum_xy+0x222>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    346c:	81 e0       	ldi	r24, 0x01	; 1
    346e:	8d a3       	std	Y+37, r24	; 0x25
    3470:	1e c0       	rjmp	.+60     	; 0x34ae <Lcd_ES_tdisplayNum_xy+0x25e>
	}


	for(int j=1;j<=col;j++){
    3472:	81 e0       	ldi	r24, 0x01	; 1
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	9e 8f       	std	Y+30, r25	; 0x1e
    3478:	8d 8f       	std	Y+29, r24	; 0x1d
    347a:	08 c0       	rjmp	.+16     	; 0x348c <Lcd_ES_tdisplayNum_xy+0x23c>
		Lcd_ES_tsendCmd(ShiftRight);
    347c:	8c e1       	ldi	r24, 0x1C	; 28
    347e:	0e 94 e7 16 	call	0x2dce	; 0x2dce <Lcd_ES_tsendCmd>
	}else{
		return ES_NOT_OK;
	}


	for(int j=1;j<=col;j++){
    3482:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3484:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3486:	01 96       	adiw	r24, 0x01	; 1
    3488:	9e 8f       	std	Y+30, r25	; 0x1e
    348a:	8d 8f       	std	Y+29, r24	; 0x1d
    348c:	8c a1       	ldd	r24, Y+36	; 0x24
    348e:	28 2f       	mov	r18, r24
    3490:	30 e0       	ldi	r19, 0x00	; 0
    3492:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3494:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3496:	28 17       	cp	r18, r24
    3498:	39 07       	cpc	r19, r25
    349a:	84 f7       	brge	.-32     	; 0x347c <Lcd_ES_tdisplayNum_xy+0x22c>
		Lcd_ES_tsendCmd(ShiftRight);
	}

	Lcd_ES_tdisplayNum(num);
    349c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    349e:	98 a1       	ldd	r25, Y+32	; 0x20
    34a0:	a9 a1       	ldd	r26, Y+33	; 0x21
    34a2:	ba a1       	ldd	r27, Y+34	; 0x22
    34a4:	bc 01       	movw	r22, r24
    34a6:	cd 01       	movw	r24, r26
    34a8:	0e 94 a7 18 	call	0x314e	; 0x314e <Lcd_ES_tdisplayNum>
	return ES_OK;
    34ac:	1d a2       	std	Y+37, r1	; 0x25
    34ae:	8d a1       	ldd	r24, Y+37	; 0x25

}
    34b0:	a5 96       	adiw	r28, 0x25	; 37
    34b2:	0f b6       	in	r0, 0x3f	; 63
    34b4:	f8 94       	cli
    34b6:	de bf       	out	0x3e, r29	; 62
    34b8:	0f be       	out	0x3f, r0	; 63
    34ba:	cd bf       	out	0x3d, r28	; 61
    34bc:	cf 91       	pop	r28
    34be:	df 91       	pop	r29
    34c0:	08 95       	ret

000034c2 <Lcd_ES_tsendChar_xy>:

ES_t Lcd_ES_tsendChar_xy(u8 data,u8 row,u8 col){
    34c2:	df 93       	push	r29
    34c4:	cf 93       	push	r28
    34c6:	cd b7       	in	r28, 0x3d	; 61
    34c8:	de b7       	in	r29, 0x3e	; 62
    34ca:	a2 97       	sbiw	r28, 0x22	; 34
    34cc:	0f b6       	in	r0, 0x3f	; 63
    34ce:	f8 94       	cli
    34d0:	de bf       	out	0x3e, r29	; 62
    34d2:	0f be       	out	0x3f, r0	; 63
    34d4:	cd bf       	out	0x3d, r28	; 61
    34d6:	8f 8f       	std	Y+31, r24	; 0x1f
    34d8:	68 a3       	std	Y+32, r22	; 0x20
    34da:	49 a3       	std	Y+33, r20	; 0x21
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    34dc:	81 e0       	ldi	r24, 0x01	; 1
    34de:	61 e0       	ldi	r22, 0x01	; 1
    34e0:	41 e0       	ldi	r20, 0x01	; 1
    34e2:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    34e6:	81 e0       	ldi	r24, 0x01	; 1
    34e8:	60 e0       	ldi	r22, 0x00	; 0
    34ea:	40 e0       	ldi	r20, 0x00	; 0
    34ec:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>


	if(row == 1){
    34f0:	88 a1       	ldd	r24, Y+32	; 0x20
    34f2:	81 30       	cpi	r24, 0x01	; 1
    34f4:	09 f0       	breq	.+2      	; 0x34f8 <Lcd_ES_tsendChar_xy+0x36>
    34f6:	76 c0       	rjmp	.+236    	; 0x35e4 <Lcd_ES_tsendChar_xy+0x122>
		Lcd_ES_tsendCmd(Force1stline);
    34f8:	80 e8       	ldi	r24, 0x80	; 128
    34fa:	0e 94 e7 16 	call	0x2dce	; 0x2dce <Lcd_ES_tsendCmd>
    34fe:	80 e0       	ldi	r24, 0x00	; 0
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	a0 e8       	ldi	r26, 0x80	; 128
    3504:	bf e3       	ldi	r27, 0x3F	; 63
    3506:	89 8f       	std	Y+25, r24	; 0x19
    3508:	9a 8f       	std	Y+26, r25	; 0x1a
    350a:	ab 8f       	std	Y+27, r26	; 0x1b
    350c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    350e:	69 8d       	ldd	r22, Y+25	; 0x19
    3510:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3512:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3514:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3516:	20 e0       	ldi	r18, 0x00	; 0
    3518:	30 e0       	ldi	r19, 0x00	; 0
    351a:	4a e7       	ldi	r20, 0x7A	; 122
    351c:	55 e4       	ldi	r21, 0x45	; 69
    351e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3522:	dc 01       	movw	r26, r24
    3524:	cb 01       	movw	r24, r22
    3526:	8d 8b       	std	Y+21, r24	; 0x15
    3528:	9e 8b       	std	Y+22, r25	; 0x16
    352a:	af 8b       	std	Y+23, r26	; 0x17
    352c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    352e:	6d 89       	ldd	r22, Y+21	; 0x15
    3530:	7e 89       	ldd	r23, Y+22	; 0x16
    3532:	8f 89       	ldd	r24, Y+23	; 0x17
    3534:	98 8d       	ldd	r25, Y+24	; 0x18
    3536:	20 e0       	ldi	r18, 0x00	; 0
    3538:	30 e0       	ldi	r19, 0x00	; 0
    353a:	40 e8       	ldi	r20, 0x80	; 128
    353c:	5f e3       	ldi	r21, 0x3F	; 63
    353e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3542:	88 23       	and	r24, r24
    3544:	2c f4       	brge	.+10     	; 0x3550 <Lcd_ES_tsendChar_xy+0x8e>
		__ticks = 1;
    3546:	81 e0       	ldi	r24, 0x01	; 1
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	9c 8b       	std	Y+20, r25	; 0x14
    354c:	8b 8b       	std	Y+19, r24	; 0x13
    354e:	3f c0       	rjmp	.+126    	; 0x35ce <Lcd_ES_tsendChar_xy+0x10c>
	else if (__tmp > 65535)
    3550:	6d 89       	ldd	r22, Y+21	; 0x15
    3552:	7e 89       	ldd	r23, Y+22	; 0x16
    3554:	8f 89       	ldd	r24, Y+23	; 0x17
    3556:	98 8d       	ldd	r25, Y+24	; 0x18
    3558:	20 e0       	ldi	r18, 0x00	; 0
    355a:	3f ef       	ldi	r19, 0xFF	; 255
    355c:	4f e7       	ldi	r20, 0x7F	; 127
    355e:	57 e4       	ldi	r21, 0x47	; 71
    3560:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3564:	18 16       	cp	r1, r24
    3566:	4c f5       	brge	.+82     	; 0x35ba <Lcd_ES_tsendChar_xy+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3568:	69 8d       	ldd	r22, Y+25	; 0x19
    356a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    356c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    356e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3570:	20 e0       	ldi	r18, 0x00	; 0
    3572:	30 e0       	ldi	r19, 0x00	; 0
    3574:	40 e2       	ldi	r20, 0x20	; 32
    3576:	51 e4       	ldi	r21, 0x41	; 65
    3578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    357c:	dc 01       	movw	r26, r24
    357e:	cb 01       	movw	r24, r22
    3580:	bc 01       	movw	r22, r24
    3582:	cd 01       	movw	r24, r26
    3584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3588:	dc 01       	movw	r26, r24
    358a:	cb 01       	movw	r24, r22
    358c:	9c 8b       	std	Y+20, r25	; 0x14
    358e:	8b 8b       	std	Y+19, r24	; 0x13
    3590:	0f c0       	rjmp	.+30     	; 0x35b0 <Lcd_ES_tsendChar_xy+0xee>
    3592:	80 e9       	ldi	r24, 0x90	; 144
    3594:	91 e0       	ldi	r25, 0x01	; 1
    3596:	9a 8b       	std	Y+18, r25	; 0x12
    3598:	89 8b       	std	Y+17, r24	; 0x11
    359a:	89 89       	ldd	r24, Y+17	; 0x11
    359c:	9a 89       	ldd	r25, Y+18	; 0x12
    359e:	01 97       	sbiw	r24, 0x01	; 1
    35a0:	f1 f7       	brne	.-4      	; 0x359e <Lcd_ES_tsendChar_xy+0xdc>
    35a2:	9a 8b       	std	Y+18, r25	; 0x12
    35a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35a6:	8b 89       	ldd	r24, Y+19	; 0x13
    35a8:	9c 89       	ldd	r25, Y+20	; 0x14
    35aa:	01 97       	sbiw	r24, 0x01	; 1
    35ac:	9c 8b       	std	Y+20, r25	; 0x14
    35ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35b0:	8b 89       	ldd	r24, Y+19	; 0x13
    35b2:	9c 89       	ldd	r25, Y+20	; 0x14
    35b4:	00 97       	sbiw	r24, 0x00	; 0
    35b6:	69 f7       	brne	.-38     	; 0x3592 <Lcd_ES_tsendChar_xy+0xd0>
    35b8:	92 c0       	rjmp	.+292    	; 0x36de <Lcd_ES_tsendChar_xy+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ba:	6d 89       	ldd	r22, Y+21	; 0x15
    35bc:	7e 89       	ldd	r23, Y+22	; 0x16
    35be:	8f 89       	ldd	r24, Y+23	; 0x17
    35c0:	98 8d       	ldd	r25, Y+24	; 0x18
    35c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35c6:	dc 01       	movw	r26, r24
    35c8:	cb 01       	movw	r24, r22
    35ca:	9c 8b       	std	Y+20, r25	; 0x14
    35cc:	8b 8b       	std	Y+19, r24	; 0x13
    35ce:	8b 89       	ldd	r24, Y+19	; 0x13
    35d0:	9c 89       	ldd	r25, Y+20	; 0x14
    35d2:	98 8b       	std	Y+16, r25	; 0x10
    35d4:	8f 87       	std	Y+15, r24	; 0x0f
    35d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    35d8:	98 89       	ldd	r25, Y+16	; 0x10
    35da:	01 97       	sbiw	r24, 0x01	; 1
    35dc:	f1 f7       	brne	.-4      	; 0x35da <Lcd_ES_tsendChar_xy+0x118>
    35de:	98 8b       	std	Y+16, r25	; 0x10
    35e0:	8f 87       	std	Y+15, r24	; 0x0f
    35e2:	7d c0       	rjmp	.+250    	; 0x36de <Lcd_ES_tsendChar_xy+0x21c>
		_delay_ms(1);
	}else if(row == 2){
    35e4:	88 a1       	ldd	r24, Y+32	; 0x20
    35e6:	82 30       	cpi	r24, 0x02	; 2
    35e8:	09 f0       	breq	.+2      	; 0x35ec <Lcd_ES_tsendChar_xy+0x12a>
    35ea:	76 c0       	rjmp	.+236    	; 0x36d8 <Lcd_ES_tsendChar_xy+0x216>
		Lcd_ES_tsendCmd(Force2ndline);
    35ec:	80 ec       	ldi	r24, 0xC0	; 192
    35ee:	0e 94 e7 16 	call	0x2dce	; 0x2dce <Lcd_ES_tsendCmd>
    35f2:	80 e0       	ldi	r24, 0x00	; 0
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	a0 e2       	ldi	r26, 0x20	; 32
    35f8:	b1 e4       	ldi	r27, 0x41	; 65
    35fa:	8b 87       	std	Y+11, r24	; 0x0b
    35fc:	9c 87       	std	Y+12, r25	; 0x0c
    35fe:	ad 87       	std	Y+13, r26	; 0x0d
    3600:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3602:	6b 85       	ldd	r22, Y+11	; 0x0b
    3604:	7c 85       	ldd	r23, Y+12	; 0x0c
    3606:	8d 85       	ldd	r24, Y+13	; 0x0d
    3608:	9e 85       	ldd	r25, Y+14	; 0x0e
    360a:	20 e0       	ldi	r18, 0x00	; 0
    360c:	30 e0       	ldi	r19, 0x00	; 0
    360e:	4a e7       	ldi	r20, 0x7A	; 122
    3610:	55 e4       	ldi	r21, 0x45	; 69
    3612:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3616:	dc 01       	movw	r26, r24
    3618:	cb 01       	movw	r24, r22
    361a:	8f 83       	std	Y+7, r24	; 0x07
    361c:	98 87       	std	Y+8, r25	; 0x08
    361e:	a9 87       	std	Y+9, r26	; 0x09
    3620:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3622:	6f 81       	ldd	r22, Y+7	; 0x07
    3624:	78 85       	ldd	r23, Y+8	; 0x08
    3626:	89 85       	ldd	r24, Y+9	; 0x09
    3628:	9a 85       	ldd	r25, Y+10	; 0x0a
    362a:	20 e0       	ldi	r18, 0x00	; 0
    362c:	30 e0       	ldi	r19, 0x00	; 0
    362e:	40 e8       	ldi	r20, 0x80	; 128
    3630:	5f e3       	ldi	r21, 0x3F	; 63
    3632:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3636:	88 23       	and	r24, r24
    3638:	2c f4       	brge	.+10     	; 0x3644 <Lcd_ES_tsendChar_xy+0x182>
		__ticks = 1;
    363a:	81 e0       	ldi	r24, 0x01	; 1
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	9e 83       	std	Y+6, r25	; 0x06
    3640:	8d 83       	std	Y+5, r24	; 0x05
    3642:	3f c0       	rjmp	.+126    	; 0x36c2 <Lcd_ES_tsendChar_xy+0x200>
	else if (__tmp > 65535)
    3644:	6f 81       	ldd	r22, Y+7	; 0x07
    3646:	78 85       	ldd	r23, Y+8	; 0x08
    3648:	89 85       	ldd	r24, Y+9	; 0x09
    364a:	9a 85       	ldd	r25, Y+10	; 0x0a
    364c:	20 e0       	ldi	r18, 0x00	; 0
    364e:	3f ef       	ldi	r19, 0xFF	; 255
    3650:	4f e7       	ldi	r20, 0x7F	; 127
    3652:	57 e4       	ldi	r21, 0x47	; 71
    3654:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3658:	18 16       	cp	r1, r24
    365a:	4c f5       	brge	.+82     	; 0x36ae <Lcd_ES_tsendChar_xy+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    365c:	6b 85       	ldd	r22, Y+11	; 0x0b
    365e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3660:	8d 85       	ldd	r24, Y+13	; 0x0d
    3662:	9e 85       	ldd	r25, Y+14	; 0x0e
    3664:	20 e0       	ldi	r18, 0x00	; 0
    3666:	30 e0       	ldi	r19, 0x00	; 0
    3668:	40 e2       	ldi	r20, 0x20	; 32
    366a:	51 e4       	ldi	r21, 0x41	; 65
    366c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3670:	dc 01       	movw	r26, r24
    3672:	cb 01       	movw	r24, r22
    3674:	bc 01       	movw	r22, r24
    3676:	cd 01       	movw	r24, r26
    3678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    367c:	dc 01       	movw	r26, r24
    367e:	cb 01       	movw	r24, r22
    3680:	9e 83       	std	Y+6, r25	; 0x06
    3682:	8d 83       	std	Y+5, r24	; 0x05
    3684:	0f c0       	rjmp	.+30     	; 0x36a4 <Lcd_ES_tsendChar_xy+0x1e2>
    3686:	80 e9       	ldi	r24, 0x90	; 144
    3688:	91 e0       	ldi	r25, 0x01	; 1
    368a:	9c 83       	std	Y+4, r25	; 0x04
    368c:	8b 83       	std	Y+3, r24	; 0x03
    368e:	8b 81       	ldd	r24, Y+3	; 0x03
    3690:	9c 81       	ldd	r25, Y+4	; 0x04
    3692:	01 97       	sbiw	r24, 0x01	; 1
    3694:	f1 f7       	brne	.-4      	; 0x3692 <Lcd_ES_tsendChar_xy+0x1d0>
    3696:	9c 83       	std	Y+4, r25	; 0x04
    3698:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    369a:	8d 81       	ldd	r24, Y+5	; 0x05
    369c:	9e 81       	ldd	r25, Y+6	; 0x06
    369e:	01 97       	sbiw	r24, 0x01	; 1
    36a0:	9e 83       	std	Y+6, r25	; 0x06
    36a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36a4:	8d 81       	ldd	r24, Y+5	; 0x05
    36a6:	9e 81       	ldd	r25, Y+6	; 0x06
    36a8:	00 97       	sbiw	r24, 0x00	; 0
    36aa:	69 f7       	brne	.-38     	; 0x3686 <Lcd_ES_tsendChar_xy+0x1c4>
    36ac:	18 c0       	rjmp	.+48     	; 0x36de <Lcd_ES_tsendChar_xy+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36ae:	6f 81       	ldd	r22, Y+7	; 0x07
    36b0:	78 85       	ldd	r23, Y+8	; 0x08
    36b2:	89 85       	ldd	r24, Y+9	; 0x09
    36b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    36b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ba:	dc 01       	movw	r26, r24
    36bc:	cb 01       	movw	r24, r22
    36be:	9e 83       	std	Y+6, r25	; 0x06
    36c0:	8d 83       	std	Y+5, r24	; 0x05
    36c2:	8d 81       	ldd	r24, Y+5	; 0x05
    36c4:	9e 81       	ldd	r25, Y+6	; 0x06
    36c6:	9a 83       	std	Y+2, r25	; 0x02
    36c8:	89 83       	std	Y+1, r24	; 0x01
    36ca:	89 81       	ldd	r24, Y+1	; 0x01
    36cc:	9a 81       	ldd	r25, Y+2	; 0x02
    36ce:	01 97       	sbiw	r24, 0x01	; 1
    36d0:	f1 f7       	brne	.-4      	; 0x36ce <Lcd_ES_tsendChar_xy+0x20c>
    36d2:	9a 83       	std	Y+2, r25	; 0x02
    36d4:	89 83       	std	Y+1, r24	; 0x01
    36d6:	03 c0       	rjmp	.+6      	; 0x36de <Lcd_ES_tsendChar_xy+0x21c>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    36d8:	81 e0       	ldi	r24, 0x01	; 1
    36da:	8a a3       	std	Y+34, r24	; 0x22
    36dc:	19 c0       	rjmp	.+50     	; 0x3710 <Lcd_ES_tsendChar_xy+0x24e>
	}

	for(int j=1;j<=col;j++){
    36de:	81 e0       	ldi	r24, 0x01	; 1
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	9e 8f       	std	Y+30, r25	; 0x1e
    36e4:	8d 8f       	std	Y+29, r24	; 0x1d
    36e6:	08 c0       	rjmp	.+16     	; 0x36f8 <Lcd_ES_tsendChar_xy+0x236>
		Lcd_ES_tsendCmd(ShiftRight);
    36e8:	8c e1       	ldi	r24, 0x1C	; 28
    36ea:	0e 94 e7 16 	call	0x2dce	; 0x2dce <Lcd_ES_tsendCmd>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
	}

	for(int j=1;j<=col;j++){
    36ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    36f2:	01 96       	adiw	r24, 0x01	; 1
    36f4:	9e 8f       	std	Y+30, r25	; 0x1e
    36f6:	8d 8f       	std	Y+29, r24	; 0x1d
    36f8:	89 a1       	ldd	r24, Y+33	; 0x21
    36fa:	28 2f       	mov	r18, r24
    36fc:	30 e0       	ldi	r19, 0x00	; 0
    36fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3700:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3702:	28 17       	cp	r18, r24
    3704:	39 07       	cpc	r19, r25
    3706:	84 f7       	brge	.-32     	; 0x36e8 <Lcd_ES_tsendChar_xy+0x226>
		Lcd_ES_tsendCmd(ShiftRight);
	}
	Lcd_ES_tsendChar(data);
    3708:	8f 8d       	ldd	r24, Y+31	; 0x1f
    370a:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <Lcd_ES_tsendChar>
	return ES_OK;
    370e:	1a a2       	std	Y+34, r1	; 0x22
    3710:	8a a1       	ldd	r24, Y+34	; 0x22
}
    3712:	a2 96       	adiw	r28, 0x22	; 34
    3714:	0f b6       	in	r0, 0x3f	; 63
    3716:	f8 94       	cli
    3718:	de bf       	out	0x3e, r29	; 62
    371a:	0f be       	out	0x3f, r0	; 63
    371c:	cd bf       	out	0x3d, r28	; 61
    371e:	cf 91       	pop	r28
    3720:	df 91       	pop	r29
    3722:	08 95       	ret

00003724 <LCD_ES_tSet_Cursor_Pos>:

static ES_t LCD_ES_tSet_Cursor_Pos(u8 row,u8 column){
    3724:	df 93       	push	r29
    3726:	cf 93       	push	r28
    3728:	00 d0       	rcall	.+0      	; 0x372a <LCD_ES_tSet_Cursor_Pos+0x6>
    372a:	00 d0       	rcall	.+0      	; 0x372c <LCD_ES_tSet_Cursor_Pos+0x8>
    372c:	0f 92       	push	r0
    372e:	cd b7       	in	r28, 0x3d	; 61
    3730:	de b7       	in	r29, 0x3e	; 62
    3732:	89 83       	std	Y+1, r24	; 0x01
    3734:	6a 83       	std	Y+2, r22	; 0x02
	column--;
    3736:	8a 81       	ldd	r24, Y+2	; 0x02
    3738:	81 50       	subi	r24, 0x01	; 1
    373a:	8a 83       	std	Y+2, r24	; 0x02
	switch(row){
    373c:	89 81       	ldd	r24, Y+1	; 0x01
    373e:	28 2f       	mov	r18, r24
    3740:	30 e0       	ldi	r19, 0x00	; 0
    3742:	3d 83       	std	Y+5, r19	; 0x05
    3744:	2c 83       	std	Y+4, r18	; 0x04
    3746:	8c 81       	ldd	r24, Y+4	; 0x04
    3748:	9d 81       	ldd	r25, Y+5	; 0x05
    374a:	81 30       	cpi	r24, 0x01	; 1
    374c:	91 05       	cpc	r25, r1
    374e:	31 f0       	breq	.+12     	; 0x375c <LCD_ES_tSet_Cursor_Pos+0x38>
    3750:	2c 81       	ldd	r18, Y+4	; 0x04
    3752:	3d 81       	ldd	r19, Y+5	; 0x05
    3754:	22 30       	cpi	r18, 0x02	; 2
    3756:	31 05       	cpc	r19, r1
    3758:	31 f0       	breq	.+12     	; 0x3766 <LCD_ES_tSet_Cursor_Pos+0x42>
    375a:	0a c0       	rjmp	.+20     	; 0x3770 <LCD_ES_tSet_Cursor_Pos+0x4c>
	         case 1:
	        	 Lcd_ES_tsendCmd((0x80 + column));
    375c:	8a 81       	ldd	r24, Y+2	; 0x02
    375e:	80 58       	subi	r24, 0x80	; 128
    3760:	0e 94 e7 16 	call	0x2dce	; 0x2dce <Lcd_ES_tsendCmd>
    3764:	08 c0       	rjmp	.+16     	; 0x3776 <LCD_ES_tSet_Cursor_Pos+0x52>
	        	 break;
	         case 2:
	        	 Lcd_ES_tsendCmd((0xc0 + column));
    3766:	8a 81       	ldd	r24, Y+2	; 0x02
    3768:	80 54       	subi	r24, 0x40	; 64
    376a:	0e 94 e7 16 	call	0x2dce	; 0x2dce <Lcd_ES_tsendCmd>
    376e:	03 c0       	rjmp	.+6      	; 0x3776 <LCD_ES_tSet_Cursor_Pos+0x52>
	        	 break;
	         default:
	        	 return ES_NOT_OK;
    3770:	31 e0       	ldi	r19, 0x01	; 1
    3772:	3b 83       	std	Y+3, r19	; 0x03
    3774:	01 c0       	rjmp	.+2      	; 0x3778 <LCD_ES_tSet_Cursor_Pos+0x54>
	}
	return ES_OK;
    3776:	1b 82       	std	Y+3, r1	; 0x03
    3778:	8b 81       	ldd	r24, Y+3	; 0x03
}
    377a:	0f 90       	pop	r0
    377c:	0f 90       	pop	r0
    377e:	0f 90       	pop	r0
    3780:	0f 90       	pop	r0
    3782:	0f 90       	pop	r0
    3784:	cf 91       	pop	r28
    3786:	df 91       	pop	r29
    3788:	08 95       	ret

0000378a <LCD_ES_tGoTo>:

/************************************************************************/
ES_t LCD_ES_tGoTo(u8 Line, u8 x){
    378a:	df 93       	push	r29
    378c:	cf 93       	push	r28
    378e:	00 d0       	rcall	.+0      	; 0x3790 <LCD_ES_tGoTo+0x6>
    3790:	0f 92       	push	r0
    3792:	cd b7       	in	r28, 0x3d	; 61
    3794:	de b7       	in	r29, 0x3e	; 62
    3796:	89 83       	std	Y+1, r24	; 0x01
    3798:	6a 83       	std	Y+2, r22	; 0x02
	if(0 == Line)
    379a:	89 81       	ldd	r24, Y+1	; 0x01
    379c:	88 23       	and	r24, r24
    379e:	41 f4       	brne	.+16     	; 0x37b0 <LCD_ES_tGoTo+0x26>
	{
		if ( x <=15)
    37a0:	8a 81       	ldd	r24, Y+2	; 0x02
    37a2:	80 31       	cpi	r24, 0x10	; 16
    37a4:	98 f4       	brcc	.+38     	; 0x37cc <LCD_ES_tGoTo+0x42>
		{
			Lcd_ES_tsendCmd(0x80 + x);
    37a6:	8a 81       	ldd	r24, Y+2	; 0x02
    37a8:	80 58       	subi	r24, 0x80	; 128
    37aa:	0e 94 e7 16 	call	0x2dce	; 0x2dce <Lcd_ES_tsendCmd>
    37ae:	0e c0       	rjmp	.+28     	; 0x37cc <LCD_ES_tGoTo+0x42>
		}
	}
	else if (1 == Line)
    37b0:	89 81       	ldd	r24, Y+1	; 0x01
    37b2:	81 30       	cpi	r24, 0x01	; 1
    37b4:	41 f4       	brne	.+16     	; 0x37c6 <LCD_ES_tGoTo+0x3c>
	{
		if ( x <=15)
    37b6:	8a 81       	ldd	r24, Y+2	; 0x02
    37b8:	80 31       	cpi	r24, 0x10	; 16
    37ba:	40 f4       	brcc	.+16     	; 0x37cc <LCD_ES_tGoTo+0x42>
		{
			Lcd_ES_tsendCmd(0xC0 + x);
    37bc:	8a 81       	ldd	r24, Y+2	; 0x02
    37be:	80 54       	subi	r24, 0x40	; 64
    37c0:	0e 94 e7 16 	call	0x2dce	; 0x2dce <Lcd_ES_tsendCmd>
    37c4:	03 c0       	rjmp	.+6      	; 0x37cc <LCD_ES_tGoTo+0x42>
		}
	}else{
		return ES_NOT_OK;
    37c6:	81 e0       	ldi	r24, 0x01	; 1
    37c8:	8b 83       	std	Y+3, r24	; 0x03
    37ca:	01 c0       	rjmp	.+2      	; 0x37ce <LCD_ES_tGoTo+0x44>
	}
	return ES_OK;
    37cc:	1b 82       	std	Y+3, r1	; 0x03
    37ce:	8b 81       	ldd	r24, Y+3	; 0x03
}
    37d0:	0f 90       	pop	r0
    37d2:	0f 90       	pop	r0
    37d4:	0f 90       	pop	r0
    37d6:	cf 91       	pop	r28
    37d8:	df 91       	pop	r29
    37da:	08 95       	ret

000037dc <KPD_ES_tGetKeyPressed>:
// To avoid the unarrangement and uncontiguous
const u8 KPD_Au8RowsPins[4] = {KPD_U8_R1,KPD_U8_R2,KPD_U8_R3,KPD_U8_R4};
const u8 KPD_Au8ColsPins[4] = {KPD_U8_C1,KPD_U8_C2,KPD_U8_C3,KPD_U8_C4};

ES_t KPD_ES_tGetKeyPressed(u8 *copy_pu8ReturnedKey)
{
    37dc:	df 93       	push	r29
    37de:	cf 93       	push	r28
    37e0:	cd b7       	in	r28, 0x3d	; 61
    37e2:	de b7       	in	r29, 0x3e	; 62
    37e4:	65 97       	sbiw	r28, 0x15	; 21
    37e6:	0f b6       	in	r0, 0x3f	; 63
    37e8:	f8 94       	cli
    37ea:	de bf       	out	0x3e, r29	; 62
    37ec:	0f be       	out	0x3f, r0	; 63
    37ee:	cd bf       	out	0x3d, r28	; 61
    37f0:	9c 8b       	std	Y+20, r25	; 0x14
    37f2:	8b 8b       	std	Y+19, r24	; 0x13
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
    37f4:	eb 89       	ldd	r30, Y+19	; 0x13
    37f6:	fc 89       	ldd	r31, Y+20	; 0x14
    37f8:	8f ef       	ldi	r24, 0xFF	; 255
    37fa:	80 83       	st	Z, r24
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
    37fc:	1f 86       	std	Y+15, r1	; 0x0f
	if(copy_pu8ReturnedKey != NULL)
    37fe:	8b 89       	ldd	r24, Y+19	; 0x13
    3800:	9c 89       	ldd	r25, Y+20	; 0x14
    3802:	00 97       	sbiw	r24, 0x00	; 0
    3804:	09 f4       	brne	.+2      	; 0x3808 <KPD_ES_tGetKeyPressed+0x2c>
    3806:	ed c0       	rjmp	.+474    	; 0x39e2 <KPD_ES_tGetKeyPressed+0x206>
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
    3808:	19 8a       	std	Y+17, r1	; 0x11
    380a:	e5 c0       	rjmp	.+458    	; 0x39d6 <KPD_ES_tGetKeyPressed+0x1fa>
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
    380c:	89 89       	ldd	r24, Y+17	; 0x11
    380e:	88 2f       	mov	r24, r24
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	fc 01       	movw	r30, r24
    3814:	e3 52       	subi	r30, 0x23	; 35
    3816:	fe 4f       	sbci	r31, 0xFE	; 254
    3818:	90 81       	ld	r25, Z
    381a:	81 e0       	ldi	r24, 0x01	; 1
    381c:	69 2f       	mov	r22, r25
    381e:	40 e0       	ldi	r20, 0x00	; 0
    3820:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
    3824:	18 8a       	std	Y+16, r1	; 0x10
    3826:	c1 c0       	rjmp	.+386    	; 0x39aa <KPD_ES_tGetKeyPressed+0x1ce>
			{
				DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);
    3828:	88 89       	ldd	r24, Y+16	; 0x10
    382a:	88 2f       	mov	r24, r24
    382c:	90 e0       	ldi	r25, 0x00	; 0
    382e:	fc 01       	movw	r30, r24
    3830:	ef 51       	subi	r30, 0x1F	; 31
    3832:	fe 4f       	sbci	r31, 0xFE	; 254
    3834:	90 81       	ld	r25, Z
    3836:	9e 01       	movw	r18, r28
    3838:	2e 5e       	subi	r18, 0xEE	; 238
    383a:	3f 4f       	sbci	r19, 0xFF	; 255
    383c:	83 e0       	ldi	r24, 0x03	; 3
    383e:	69 2f       	mov	r22, r25
    3840:	a9 01       	movw	r20, r18
    3842:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <DIO_ES_tGetPinValue>
				if(Local_u8PinVal == LOW){ /* Switch is pressed */
    3846:	8a 89       	ldd	r24, Y+18	; 0x12
    3848:	88 23       	and	r24, r24
    384a:	09 f0       	breq	.+2      	; 0x384e <KPD_ES_tGetKeyPressed+0x72>
    384c:	ab c0       	rjmp	.+342    	; 0x39a4 <KPD_ES_tGetKeyPressed+0x1c8>
    384e:	80 e0       	ldi	r24, 0x00	; 0
    3850:	90 e0       	ldi	r25, 0x00	; 0
    3852:	a0 ea       	ldi	r26, 0xA0	; 160
    3854:	b1 e4       	ldi	r27, 0x41	; 65
    3856:	8b 87       	std	Y+11, r24	; 0x0b
    3858:	9c 87       	std	Y+12, r25	; 0x0c
    385a:	ad 87       	std	Y+13, r26	; 0x0d
    385c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    385e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3860:	7c 85       	ldd	r23, Y+12	; 0x0c
    3862:	8d 85       	ldd	r24, Y+13	; 0x0d
    3864:	9e 85       	ldd	r25, Y+14	; 0x0e
    3866:	20 e0       	ldi	r18, 0x00	; 0
    3868:	30 e0       	ldi	r19, 0x00	; 0
    386a:	4a e7       	ldi	r20, 0x7A	; 122
    386c:	55 e4       	ldi	r21, 0x45	; 69
    386e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3872:	dc 01       	movw	r26, r24
    3874:	cb 01       	movw	r24, r22
    3876:	8f 83       	std	Y+7, r24	; 0x07
    3878:	98 87       	std	Y+8, r25	; 0x08
    387a:	a9 87       	std	Y+9, r26	; 0x09
    387c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    387e:	6f 81       	ldd	r22, Y+7	; 0x07
    3880:	78 85       	ldd	r23, Y+8	; 0x08
    3882:	89 85       	ldd	r24, Y+9	; 0x09
    3884:	9a 85       	ldd	r25, Y+10	; 0x0a
    3886:	20 e0       	ldi	r18, 0x00	; 0
    3888:	30 e0       	ldi	r19, 0x00	; 0
    388a:	40 e8       	ldi	r20, 0x80	; 128
    388c:	5f e3       	ldi	r21, 0x3F	; 63
    388e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3892:	88 23       	and	r24, r24
    3894:	2c f4       	brge	.+10     	; 0x38a0 <KPD_ES_tGetKeyPressed+0xc4>
		__ticks = 1;
    3896:	81 e0       	ldi	r24, 0x01	; 1
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	9e 83       	std	Y+6, r25	; 0x06
    389c:	8d 83       	std	Y+5, r24	; 0x05
    389e:	3f c0       	rjmp	.+126    	; 0x391e <KPD_ES_tGetKeyPressed+0x142>
	else if (__tmp > 65535)
    38a0:	6f 81       	ldd	r22, Y+7	; 0x07
    38a2:	78 85       	ldd	r23, Y+8	; 0x08
    38a4:	89 85       	ldd	r24, Y+9	; 0x09
    38a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    38a8:	20 e0       	ldi	r18, 0x00	; 0
    38aa:	3f ef       	ldi	r19, 0xFF	; 255
    38ac:	4f e7       	ldi	r20, 0x7F	; 127
    38ae:	57 e4       	ldi	r21, 0x47	; 71
    38b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38b4:	18 16       	cp	r1, r24
    38b6:	4c f5       	brge	.+82     	; 0x390a <KPD_ES_tGetKeyPressed+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    38ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    38bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    38be:	9e 85       	ldd	r25, Y+14	; 0x0e
    38c0:	20 e0       	ldi	r18, 0x00	; 0
    38c2:	30 e0       	ldi	r19, 0x00	; 0
    38c4:	40 e2       	ldi	r20, 0x20	; 32
    38c6:	51 e4       	ldi	r21, 0x41	; 65
    38c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38cc:	dc 01       	movw	r26, r24
    38ce:	cb 01       	movw	r24, r22
    38d0:	bc 01       	movw	r22, r24
    38d2:	cd 01       	movw	r24, r26
    38d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38d8:	dc 01       	movw	r26, r24
    38da:	cb 01       	movw	r24, r22
    38dc:	9e 83       	std	Y+6, r25	; 0x06
    38de:	8d 83       	std	Y+5, r24	; 0x05
    38e0:	0f c0       	rjmp	.+30     	; 0x3900 <KPD_ES_tGetKeyPressed+0x124>
    38e2:	80 e9       	ldi	r24, 0x90	; 144
    38e4:	91 e0       	ldi	r25, 0x01	; 1
    38e6:	9c 83       	std	Y+4, r25	; 0x04
    38e8:	8b 83       	std	Y+3, r24	; 0x03
    38ea:	8b 81       	ldd	r24, Y+3	; 0x03
    38ec:	9c 81       	ldd	r25, Y+4	; 0x04
    38ee:	01 97       	sbiw	r24, 0x01	; 1
    38f0:	f1 f7       	brne	.-4      	; 0x38ee <KPD_ES_tGetKeyPressed+0x112>
    38f2:	9c 83       	std	Y+4, r25	; 0x04
    38f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38f6:	8d 81       	ldd	r24, Y+5	; 0x05
    38f8:	9e 81       	ldd	r25, Y+6	; 0x06
    38fa:	01 97       	sbiw	r24, 0x01	; 1
    38fc:	9e 83       	std	Y+6, r25	; 0x06
    38fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3900:	8d 81       	ldd	r24, Y+5	; 0x05
    3902:	9e 81       	ldd	r25, Y+6	; 0x06
    3904:	00 97       	sbiw	r24, 0x00	; 0
    3906:	69 f7       	brne	.-38     	; 0x38e2 <KPD_ES_tGetKeyPressed+0x106>
    3908:	14 c0       	rjmp	.+40     	; 0x3932 <KPD_ES_tGetKeyPressed+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    390a:	6f 81       	ldd	r22, Y+7	; 0x07
    390c:	78 85       	ldd	r23, Y+8	; 0x08
    390e:	89 85       	ldd	r24, Y+9	; 0x09
    3910:	9a 85       	ldd	r25, Y+10	; 0x0a
    3912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3916:	dc 01       	movw	r26, r24
    3918:	cb 01       	movw	r24, r22
    391a:	9e 83       	std	Y+6, r25	; 0x06
    391c:	8d 83       	std	Y+5, r24	; 0x05
    391e:	8d 81       	ldd	r24, Y+5	; 0x05
    3920:	9e 81       	ldd	r25, Y+6	; 0x06
    3922:	9a 83       	std	Y+2, r25	; 0x02
    3924:	89 83       	std	Y+1, r24	; 0x01
    3926:	89 81       	ldd	r24, Y+1	; 0x01
    3928:	9a 81       	ldd	r25, Y+2	; 0x02
    392a:	01 97       	sbiw	r24, 0x01	; 1
    392c:	f1 f7       	brne	.-4      	; 0x392a <KPD_ES_tGetKeyPressed+0x14e>
    392e:	9a 83       	std	Y+2, r25	; 0x02
    3930:	89 83       	std	Y+1, r24	; 0x01
					/* The switch which reaches between the activated
					 * Column and the pressed key */
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    3932:	88 89       	ldd	r24, Y+16	; 0x10
    3934:	88 2f       	mov	r24, r24
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	fc 01       	movw	r30, r24
    393a:	ef 51       	subi	r30, 0x1F	; 31
    393c:	fe 4f       	sbci	r31, 0xFE	; 254
    393e:	90 81       	ld	r25, Z
    3940:	9e 01       	movw	r18, r28
    3942:	2e 5e       	subi	r18, 0xEE	; 238
    3944:	3f 4f       	sbci	r19, 0xFF	; 255
    3946:	83 e0       	ldi	r24, 0x03	; 3
    3948:	69 2f       	mov	r22, r25
    394a:	a9 01       	movw	r20, r18
    394c:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <DIO_ES_tGetPinValue>
    3950:	0f c0       	rjmp	.+30     	; 0x3970 <KPD_ES_tGetKeyPressed+0x194>
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    3952:	88 89       	ldd	r24, Y+16	; 0x10
    3954:	88 2f       	mov	r24, r24
    3956:	90 e0       	ldi	r25, 0x00	; 0
    3958:	fc 01       	movw	r30, r24
    395a:	ef 51       	subi	r30, 0x1F	; 31
    395c:	fe 4f       	sbci	r31, 0xFE	; 254
    395e:	90 81       	ld	r25, Z
    3960:	9e 01       	movw	r18, r28
    3962:	2e 5e       	subi	r18, 0xEE	; 238
    3964:	3f 4f       	sbci	r19, 0xFF	; 255
    3966:	83 e0       	ldi	r24, 0x03	; 3
    3968:	69 2f       	mov	r22, r25
    396a:	a9 01       	movw	r20, r18
    396c:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <DIO_ES_tGetPinValue>
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
    3970:	8a 89       	ldd	r24, Y+18	; 0x12
    3972:	88 23       	and	r24, r24
    3974:	71 f3       	breq	.-36     	; 0x3952 <KPD_ES_tGetKeyPressed+0x176>
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					}
					*copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    3976:	89 89       	ldd	r24, Y+17	; 0x11
    3978:	48 2f       	mov	r20, r24
    397a:	50 e0       	ldi	r21, 0x00	; 0
    397c:	88 89       	ldd	r24, Y+16	; 0x10
    397e:	28 2f       	mov	r18, r24
    3980:	30 e0       	ldi	r19, 0x00	; 0
    3982:	ca 01       	movw	r24, r20
    3984:	88 0f       	add	r24, r24
    3986:	99 1f       	adc	r25, r25
    3988:	88 0f       	add	r24, r24
    398a:	99 1f       	adc	r25, r25
    398c:	82 0f       	add	r24, r18
    398e:	93 1f       	adc	r25, r19
    3990:	fc 01       	movw	r30, r24
    3992:	e3 53       	subi	r30, 0x33	; 51
    3994:	fe 4f       	sbci	r31, 0xFE	; 254
    3996:	80 81       	ld	r24, Z
    3998:	eb 89       	ldd	r30, Y+19	; 0x13
    399a:	fc 89       	ldd	r31, Y+20	; 0x14
    399c:	80 83       	st	Z, r24
					Local_u8Flag = HIGH;
    399e:	81 e0       	ldi	r24, 0x01	; 1
    39a0:	8f 87       	std	Y+15, r24	; 0x0f
    39a2:	07 c0       	rjmp	.+14     	; 0x39b2 <KPD_ES_tGetKeyPressed+0x1d6>
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
    39a4:	88 89       	ldd	r24, Y+16	; 0x10
    39a6:	8f 5f       	subi	r24, 0xFF	; 255
    39a8:	88 8b       	std	Y+16, r24	; 0x10
    39aa:	88 89       	ldd	r24, Y+16	; 0x10
    39ac:	84 30       	cpi	r24, 0x04	; 4
    39ae:	08 f4       	brcc	.+2      	; 0x39b2 <KPD_ES_tGetKeyPressed+0x1d6>
    39b0:	3b cf       	rjmp	.-394    	; 0x3828 <KPD_ES_tGetKeyPressed+0x4c>
					Local_u8Flag = HIGH;
					break;
				}
			}
			// Deactivate ROW
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],HIGH);
    39b2:	89 89       	ldd	r24, Y+17	; 0x11
    39b4:	88 2f       	mov	r24, r24
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	fc 01       	movw	r30, r24
    39ba:	e3 52       	subi	r30, 0x23	; 35
    39bc:	fe 4f       	sbci	r31, 0xFE	; 254
    39be:	90 81       	ld	r25, Z
    39c0:	81 e0       	ldi	r24, 0x01	; 1
    39c2:	69 2f       	mov	r22, r25
    39c4:	41 e0       	ldi	r20, 0x01	; 1
    39c6:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
			if(Local_u8Flag == HIGH)
    39ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    39cc:	81 30       	cpi	r24, 0x01	; 1
    39ce:	39 f0       	breq	.+14     	; 0x39de <KPD_ES_tGetKeyPressed+0x202>
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
	if(copy_pu8ReturnedKey != NULL)
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
    39d0:	89 89       	ldd	r24, Y+17	; 0x11
    39d2:	8f 5f       	subi	r24, 0xFF	; 255
    39d4:	89 8b       	std	Y+17, r24	; 0x11
    39d6:	89 89       	ldd	r24, Y+17	; 0x11
    39d8:	84 30       	cpi	r24, 0x04	; 4
    39da:	08 f4       	brcc	.+2      	; 0x39de <KPD_ES_tGetKeyPressed+0x202>
    39dc:	17 cf       	rjmp	.-466    	; 0x380c <KPD_ES_tGetKeyPressed+0x30>


	}else{
		return ES_NOT_OK;
	}
	return ES_OK;
    39de:	1d 8a       	std	Y+21, r1	; 0x15
    39e0:	02 c0       	rjmp	.+4      	; 0x39e6 <KPD_ES_tGetKeyPressed+0x20a>
				break;
		}


	}else{
		return ES_NOT_OK;
    39e2:	81 e0       	ldi	r24, 0x01	; 1
    39e4:	8d 8b       	std	Y+21, r24	; 0x15
    39e6:	8d 89       	ldd	r24, Y+21	; 0x15
	}
	return ES_OK;
}
    39e8:	65 96       	adiw	r28, 0x15	; 21
    39ea:	0f b6       	in	r0, 0x3f	; 63
    39ec:	f8 94       	cli
    39ee:	de bf       	out	0x3e, r29	; 62
    39f0:	0f be       	out	0x3f, r0	; 63
    39f2:	cd bf       	out	0x3d, r28	; 61
    39f4:	cf 91       	pop	r28
    39f6:	df 91       	pop	r29
    39f8:	08 95       	ret

000039fa <DC_Motor_Init>:
#include "DC_MotorCfg.h"



ES_t DC_Motor_Init(DC_MOTOR_Index Motor)
{
    39fa:	df 93       	push	r29
    39fc:	cf 93       	push	r28
    39fe:	cd b7       	in	r28, 0x3d	; 61
    3a00:	de b7       	in	r29, 0x3e	; 62
    3a02:	2c 97       	sbiw	r28, 0x0c	; 12
    3a04:	0f b6       	in	r0, 0x3f	; 63
    3a06:	f8 94       	cli
    3a08:	de bf       	out	0x3e, r29	; 62
    3a0a:	0f be       	out	0x3f, r0	; 63
    3a0c:	cd bf       	out	0x3d, r28	; 61
    3a0e:	8e 83       	std	Y+6, r24	; 0x06
	if(Motor == DC_MOTOR_0){
    3a10:	8e 81       	ldd	r24, Y+6	; 0x06
    3a12:	88 23       	and	r24, r24
    3a14:	59 f4       	brne	.+22     	; 0x3a2c <DC_Motor_Init+0x32>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN1, OUTPUT);
    3a16:	82 e0       	ldi	r24, 0x02	; 2
    3a18:	61 e0       	ldi	r22, 0x01	; 1
    3a1a:	41 e0       	ldi	r20, 0x01	; 1
    3a1c:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN2, OUTPUT);
    3a20:	82 e0       	ldi	r24, 0x02	; 2
    3a22:	62 e0       	ldi	r22, 0x02	; 2
    3a24:	41 e0       	ldi	r20, 0x01	; 1
    3a26:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <DIO_ES_tSetPinDirection>
    3a2a:	11 c0       	rjmp	.+34     	; 0x3a4e <DC_Motor_Init+0x54>
	}else if(Motor == DC_MOTOR_1){
    3a2c:	8e 81       	ldd	r24, Y+6	; 0x06
    3a2e:	81 30       	cpi	r24, 0x01	; 1
    3a30:	59 f4       	brne	.+22     	; 0x3a48 <DC_Motor_Init+0x4e>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN3, OUTPUT);
    3a32:	82 e0       	ldi	r24, 0x02	; 2
    3a34:	63 e0       	ldi	r22, 0x03	; 3
    3a36:	41 e0       	ldi	r20, 0x01	; 1
    3a38:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN4, OUTPUT);
    3a3c:	82 e0       	ldi	r24, 0x02	; 2
    3a3e:	64 e0       	ldi	r22, 0x04	; 4
    3a40:	41 e0       	ldi	r20, 0x01	; 1
    3a42:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <DIO_ES_tSetPinDirection>
    3a46:	03 c0       	rjmp	.+6      	; 0x3a4e <DC_Motor_Init+0x54>
	}else{
		return ES_NOT_OK;
    3a48:	81 e0       	ldi	r24, 0x01	; 1
    3a4a:	8f 83       	std	Y+7, r24	; 0x07
    3a4c:	2a c0       	rjmp	.+84     	; 0x3aa2 <DC_Motor_Init+0xa8>
	}


	DIO_ES_tSetPinDirection(DIO_U8_PORT_B, DIO_U8_PIN_3, OUTPUT);
    3a4e:	81 e0       	ldi	r24, 0x01	; 1
    3a50:	63 e0       	ldi	r22, 0x03	; 3
    3a52:	41 e0       	ldi	r20, 0x01	; 1
    3a54:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <DIO_ES_tSetPinDirection>
	TIMER0_Config_t Timer0Cfg = {TIMER0_PHASE_CORRECT_MODE, TIMER0_PRESCALAR_8, OC0_NON_INVERTING, TOIE0_DISABLE, OCIE0_DISABLE};
    3a58:	fe 01       	movw	r30, r28
    3a5a:	31 96       	adiw	r30, 0x01	; 1
    3a5c:	f9 87       	std	Y+9, r31	; 0x09
    3a5e:	e8 87       	std	Y+8, r30	; 0x08
    3a60:	85 ee       	ldi	r24, 0xE5	; 229
    3a62:	91 e0       	ldi	r25, 0x01	; 1
    3a64:	9b 87       	std	Y+11, r25	; 0x0b
    3a66:	8a 87       	std	Y+10, r24	; 0x0a
    3a68:	95 e0       	ldi	r25, 0x05	; 5
    3a6a:	9c 87       	std	Y+12, r25	; 0x0c
    3a6c:	ea 85       	ldd	r30, Y+10	; 0x0a
    3a6e:	fb 85       	ldd	r31, Y+11	; 0x0b
    3a70:	00 80       	ld	r0, Z
    3a72:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a74:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a76:	01 96       	adiw	r24, 0x01	; 1
    3a78:	9b 87       	std	Y+11, r25	; 0x0b
    3a7a:	8a 87       	std	Y+10, r24	; 0x0a
    3a7c:	e8 85       	ldd	r30, Y+8	; 0x08
    3a7e:	f9 85       	ldd	r31, Y+9	; 0x09
    3a80:	00 82       	st	Z, r0
    3a82:	88 85       	ldd	r24, Y+8	; 0x08
    3a84:	99 85       	ldd	r25, Y+9	; 0x09
    3a86:	01 96       	adiw	r24, 0x01	; 1
    3a88:	99 87       	std	Y+9, r25	; 0x09
    3a8a:	88 87       	std	Y+8, r24	; 0x08
    3a8c:	9c 85       	ldd	r25, Y+12	; 0x0c
    3a8e:	91 50       	subi	r25, 0x01	; 1
    3a90:	9c 87       	std	Y+12, r25	; 0x0c
    3a92:	ec 85       	ldd	r30, Y+12	; 0x0c
    3a94:	ee 23       	and	r30, r30
    3a96:	51 f7       	brne	.-44     	; 0x3a6c <DC_Motor_Init+0x72>
	TIMER0_Init(&Timer0Cfg);
    3a98:	ce 01       	movw	r24, r28
    3a9a:	01 96       	adiw	r24, 0x01	; 1
    3a9c:	0e 94 17 07 	call	0xe2e	; 0xe2e <TIMER0_Init>




	return ES_OK;
    3aa0:	1f 82       	std	Y+7, r1	; 0x07
    3aa2:	8f 81       	ldd	r24, Y+7	; 0x07
}
    3aa4:	2c 96       	adiw	r28, 0x0c	; 12
    3aa6:	0f b6       	in	r0, 0x3f	; 63
    3aa8:	f8 94       	cli
    3aaa:	de bf       	out	0x3e, r29	; 62
    3aac:	0f be       	out	0x3f, r0	; 63
    3aae:	cd bf       	out	0x3d, r28	; 61
    3ab0:	cf 91       	pop	r28
    3ab2:	df 91       	pop	r29
    3ab4:	08 95       	ret

00003ab6 <DC_Motor_Stop>:


ES_t DC_Motor_Stop(DC_MOTOR_Index Motor)
{
    3ab6:	df 93       	push	r29
    3ab8:	cf 93       	push	r28
    3aba:	00 d0       	rcall	.+0      	; 0x3abc <DC_Motor_Stop+0x6>
    3abc:	cd b7       	in	r28, 0x3d	; 61
    3abe:	de b7       	in	r29, 0x3e	; 62
    3ac0:	89 83       	std	Y+1, r24	; 0x01
	if(Motor == DC_MOTOR_0){
    3ac2:	89 81       	ldd	r24, Y+1	; 0x01
    3ac4:	88 23       	and	r24, r24
    3ac6:	59 f4       	brne	.+22     	; 0x3ade <DC_Motor_Stop+0x28>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN1, LOW);
    3ac8:	82 e0       	ldi	r24, 0x02	; 2
    3aca:	61 e0       	ldi	r22, 0x01	; 1
    3acc:	40 e0       	ldi	r20, 0x00	; 0
    3ace:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN2, LOW);
    3ad2:	82 e0       	ldi	r24, 0x02	; 2
    3ad4:	62 e0       	ldi	r22, 0x02	; 2
    3ad6:	40 e0       	ldi	r20, 0x00	; 0
    3ad8:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
    3adc:	11 c0       	rjmp	.+34     	; 0x3b00 <DC_Motor_Stop+0x4a>
	}else if(Motor == DC_MOTOR_1){
    3ade:	89 81       	ldd	r24, Y+1	; 0x01
    3ae0:	81 30       	cpi	r24, 0x01	; 1
    3ae2:	59 f4       	brne	.+22     	; 0x3afa <DC_Motor_Stop+0x44>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN3, LOW);
    3ae4:	82 e0       	ldi	r24, 0x02	; 2
    3ae6:	63 e0       	ldi	r22, 0x03	; 3
    3ae8:	40 e0       	ldi	r20, 0x00	; 0
    3aea:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN4, LOW);
    3aee:	82 e0       	ldi	r24, 0x02	; 2
    3af0:	64 e0       	ldi	r22, 0x04	; 4
    3af2:	40 e0       	ldi	r20, 0x00	; 0
    3af4:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
    3af8:	03 c0       	rjmp	.+6      	; 0x3b00 <DC_Motor_Stop+0x4a>
	}else{
		return ES_NOT_OK;
    3afa:	81 e0       	ldi	r24, 0x01	; 1
    3afc:	8a 83       	std	Y+2, r24	; 0x02
    3afe:	01 c0       	rjmp	.+2      	; 0x3b02 <DC_Motor_Stop+0x4c>
	}
	return ES_OK;
    3b00:	1a 82       	std	Y+2, r1	; 0x02
    3b02:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3b04:	0f 90       	pop	r0
    3b06:	0f 90       	pop	r0
    3b08:	cf 91       	pop	r28
    3b0a:	df 91       	pop	r29
    3b0c:	08 95       	ret

00003b0e <DC_Motor_Move>:


ES_t DC_Motor_Move(DC_MOTOR_Index Motor,DC_MOTOR_Dir MotorDir,u8 SpeedOF100)
{
    3b0e:	df 93       	push	r29
    3b10:	cf 93       	push	r28
    3b12:	00 d0       	rcall	.+0      	; 0x3b14 <DC_Motor_Move+0x6>
    3b14:	00 d0       	rcall	.+0      	; 0x3b16 <DC_Motor_Move+0x8>
    3b16:	00 d0       	rcall	.+0      	; 0x3b18 <DC_Motor_Move+0xa>
    3b18:	cd b7       	in	r28, 0x3d	; 61
    3b1a:	de b7       	in	r29, 0x3e	; 62
    3b1c:	89 83       	std	Y+1, r24	; 0x01
    3b1e:	6a 83       	std	Y+2, r22	; 0x02
    3b20:	4b 83       	std	Y+3, r20	; 0x03

	switch(MotorDir){
    3b22:	8a 81       	ldd	r24, Y+2	; 0x02
    3b24:	28 2f       	mov	r18, r24
    3b26:	30 e0       	ldi	r19, 0x00	; 0
    3b28:	3e 83       	std	Y+6, r19	; 0x06
    3b2a:	2d 83       	std	Y+5, r18	; 0x05
    3b2c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b2e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b30:	00 97       	sbiw	r24, 0x00	; 0
    3b32:	31 f0       	breq	.+12     	; 0x3b40 <DC_Motor_Move+0x32>
    3b34:	2d 81       	ldd	r18, Y+5	; 0x05
    3b36:	3e 81       	ldd	r19, Y+6	; 0x06
    3b38:	21 30       	cpi	r18, 0x01	; 1
    3b3a:	31 05       	cpc	r19, r1
    3b3c:	e9 f0       	breq	.+58     	; 0x3b78 <DC_Motor_Move+0x6a>
    3b3e:	38 c0       	rjmp	.+112    	; 0x3bb0 <DC_Motor_Move+0xa2>
	case DC_MOTOR_CW:
		if(Motor == DC_MOTOR_0){
    3b40:	89 81       	ldd	r24, Y+1	; 0x01
    3b42:	88 23       	and	r24, r24
    3b44:	59 f4       	brne	.+22     	; 0x3b5c <DC_Motor_Move+0x4e>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN1, HIGH);
    3b46:	82 e0       	ldi	r24, 0x02	; 2
    3b48:	61 e0       	ldi	r22, 0x01	; 1
    3b4a:	41 e0       	ldi	r20, 0x01	; 1
    3b4c:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN2, LOW);
    3b50:	82 e0       	ldi	r24, 0x02	; 2
    3b52:	62 e0       	ldi	r22, 0x02	; 2
    3b54:	40 e0       	ldi	r20, 0x00	; 0
    3b56:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
    3b5a:	2d c0       	rjmp	.+90     	; 0x3bb6 <DC_Motor_Move+0xa8>
		}else if(Motor == DC_MOTOR_1){
    3b5c:	89 81       	ldd	r24, Y+1	; 0x01
    3b5e:	81 30       	cpi	r24, 0x01	; 1
    3b60:	51 f5       	brne	.+84     	; 0x3bb6 <DC_Motor_Move+0xa8>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN3, HIGH);
    3b62:	82 e0       	ldi	r24, 0x02	; 2
    3b64:	63 e0       	ldi	r22, 0x03	; 3
    3b66:	41 e0       	ldi	r20, 0x01	; 1
    3b68:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN4, LOW);
    3b6c:	82 e0       	ldi	r24, 0x02	; 2
    3b6e:	64 e0       	ldi	r22, 0x04	; 4
    3b70:	40 e0       	ldi	r20, 0x00	; 0
    3b72:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
    3b76:	1f c0       	rjmp	.+62     	; 0x3bb6 <DC_Motor_Move+0xa8>
		}
		break;
	case DC_MOTOR_CCW:
		if(Motor == DC_MOTOR_0){
    3b78:	89 81       	ldd	r24, Y+1	; 0x01
    3b7a:	88 23       	and	r24, r24
    3b7c:	59 f4       	brne	.+22     	; 0x3b94 <DC_Motor_Move+0x86>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN1, LOW);
    3b7e:	82 e0       	ldi	r24, 0x02	; 2
    3b80:	61 e0       	ldi	r22, 0x01	; 1
    3b82:	40 e0       	ldi	r20, 0x00	; 0
    3b84:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN2, HIGH);
    3b88:	82 e0       	ldi	r24, 0x02	; 2
    3b8a:	62 e0       	ldi	r22, 0x02	; 2
    3b8c:	41 e0       	ldi	r20, 0x01	; 1
    3b8e:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
    3b92:	11 c0       	rjmp	.+34     	; 0x3bb6 <DC_Motor_Move+0xa8>
		}else if(Motor == DC_MOTOR_1){
    3b94:	89 81       	ldd	r24, Y+1	; 0x01
    3b96:	81 30       	cpi	r24, 0x01	; 1
    3b98:	71 f4       	brne	.+28     	; 0x3bb6 <DC_Motor_Move+0xa8>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN3, LOW);
    3b9a:	82 e0       	ldi	r24, 0x02	; 2
    3b9c:	63 e0       	ldi	r22, 0x03	; 3
    3b9e:	40 e0       	ldi	r20, 0x00	; 0
    3ba0:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN4, HIGH);
    3ba4:	82 e0       	ldi	r24, 0x02	; 2
    3ba6:	64 e0       	ldi	r22, 0x04	; 4
    3ba8:	41 e0       	ldi	r20, 0x01	; 1
    3baa:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
    3bae:	03 c0       	rjmp	.+6      	; 0x3bb6 <DC_Motor_Move+0xa8>
		}
		break;
	default:
		return ES_NOT_OK;
    3bb0:	31 e0       	ldi	r19, 0x01	; 1
    3bb2:	3c 83       	std	Y+4, r19	; 0x04
    3bb4:	10 c0       	rjmp	.+32     	; 0x3bd6 <DC_Motor_Move+0xc8>
	}


	PWM_Set_DutyCycle(SpeedOF100);
    3bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    3bb8:	88 2f       	mov	r24, r24
    3bba:	90 e0       	ldi	r25, 0x00	; 0
    3bbc:	a0 e0       	ldi	r26, 0x00	; 0
    3bbe:	b0 e0       	ldi	r27, 0x00	; 0
    3bc0:	bc 01       	movw	r22, r24
    3bc2:	cd 01       	movw	r24, r26
    3bc4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3bc8:	dc 01       	movw	r26, r24
    3bca:	cb 01       	movw	r24, r22
    3bcc:	bc 01       	movw	r22, r24
    3bce:	cd 01       	movw	r24, r26
    3bd0:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <PWM_Set_DutyCycle>




	return ES_OK;
    3bd4:	1c 82       	std	Y+4, r1	; 0x04
    3bd6:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3bd8:	26 96       	adiw	r28, 0x06	; 6
    3bda:	0f b6       	in	r0, 0x3f	; 63
    3bdc:	f8 94       	cli
    3bde:	de bf       	out	0x3e, r29	; 62
    3be0:	0f be       	out	0x3f, r0	; 63
    3be2:	cd bf       	out	0x3d, r28	; 61
    3be4:	cf 91       	pop	r28
    3be6:	df 91       	pop	r29
    3be8:	08 95       	ret

00003bea <main>:




int main()
{
    3bea:	df 93       	push	r29
    3bec:	cf 93       	push	r28
    3bee:	cd b7       	in	r28, 0x3d	; 61
    3bf0:	de b7       	in	r29, 0x3e	; 62
	DIO_ES_tInit();
    3bf2:	0e 94 70 11 	call	0x22e0	; 0x22e0 <DIO_ES_tInit>
	Lcd_ES_tInit();
    3bf6:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <Lcd_ES_tInit>

	sei();
    3bfa:	78 94       	sei

	// An led
	DIO_ES_tSetPinDirection(DIO_U8_PORT_A, DIO_U8_PIN_0, OUTPUT);
    3bfc:	80 e0       	ldi	r24, 0x00	; 0
    3bfe:	60 e0       	ldi	r22, 0x00	; 0
    3c00:	41 e0       	ldi	r20, 0x01	; 1
    3c02:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <DIO_ES_tSetPinDirection>

    while (1)
    {
		DIO_ES_tSetPinValue(DIO_U8_PORT_A, DIO_U8_PIN_0, HIGH);
    3c06:	80 e0       	ldi	r24, 0x00	; 0
    3c08:	60 e0       	ldi	r22, 0x00	; 0
    3c0a:	41 e0       	ldi	r20, 0x01	; 1
    3c0c:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
		Timer0_Set_Delay_ms(2000);
    3c10:	60 ed       	ldi	r22, 0xD0	; 208
    3c12:	77 e0       	ldi	r23, 0x07	; 7
    3c14:	80 e0       	ldi	r24, 0x00	; 0
    3c16:	90 e0       	ldi	r25, 0x00	; 0
    3c18:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <Timer0_Set_Delay_ms>
		DIO_ES_tSetPinValue(DIO_U8_PORT_A, DIO_U8_PIN_0, LOW);
    3c1c:	80 e0       	ldi	r24, 0x00	; 0
    3c1e:	60 e0       	ldi	r22, 0x00	; 0
    3c20:	40 e0       	ldi	r20, 0x00	; 0
    3c22:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_ES_tSetPinValue>
		Timer0_Set_Delay_ms(2000);
    3c26:	60 ed       	ldi	r22, 0xD0	; 208
    3c28:	77 e0       	ldi	r23, 0x07	; 7
    3c2a:	80 e0       	ldi	r24, 0x00	; 0
    3c2c:	90 e0       	ldi	r25, 0x00	; 0
    3c2e:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <Timer0_Set_Delay_ms>
    3c32:	e9 cf       	rjmp	.-46     	; 0x3c06 <main+0x1c>

00003c34 <__mulsi3>:
    3c34:	62 9f       	mul	r22, r18
    3c36:	d0 01       	movw	r26, r0
    3c38:	73 9f       	mul	r23, r19
    3c3a:	f0 01       	movw	r30, r0
    3c3c:	82 9f       	mul	r24, r18
    3c3e:	e0 0d       	add	r30, r0
    3c40:	f1 1d       	adc	r31, r1
    3c42:	64 9f       	mul	r22, r20
    3c44:	e0 0d       	add	r30, r0
    3c46:	f1 1d       	adc	r31, r1
    3c48:	92 9f       	mul	r25, r18
    3c4a:	f0 0d       	add	r31, r0
    3c4c:	83 9f       	mul	r24, r19
    3c4e:	f0 0d       	add	r31, r0
    3c50:	74 9f       	mul	r23, r20
    3c52:	f0 0d       	add	r31, r0
    3c54:	65 9f       	mul	r22, r21
    3c56:	f0 0d       	add	r31, r0
    3c58:	99 27       	eor	r25, r25
    3c5a:	72 9f       	mul	r23, r18
    3c5c:	b0 0d       	add	r27, r0
    3c5e:	e1 1d       	adc	r30, r1
    3c60:	f9 1f       	adc	r31, r25
    3c62:	63 9f       	mul	r22, r19
    3c64:	b0 0d       	add	r27, r0
    3c66:	e1 1d       	adc	r30, r1
    3c68:	f9 1f       	adc	r31, r25
    3c6a:	bd 01       	movw	r22, r26
    3c6c:	cf 01       	movw	r24, r30
    3c6e:	11 24       	eor	r1, r1
    3c70:	08 95       	ret

00003c72 <__divmodhi4>:
    3c72:	97 fb       	bst	r25, 7
    3c74:	09 2e       	mov	r0, r25
    3c76:	07 26       	eor	r0, r23
    3c78:	0a d0       	rcall	.+20     	; 0x3c8e <__divmodhi4_neg1>
    3c7a:	77 fd       	sbrc	r23, 7
    3c7c:	04 d0       	rcall	.+8      	; 0x3c86 <__divmodhi4_neg2>
    3c7e:	2e d0       	rcall	.+92     	; 0x3cdc <__udivmodhi4>
    3c80:	06 d0       	rcall	.+12     	; 0x3c8e <__divmodhi4_neg1>
    3c82:	00 20       	and	r0, r0
    3c84:	1a f4       	brpl	.+6      	; 0x3c8c <__divmodhi4_exit>

00003c86 <__divmodhi4_neg2>:
    3c86:	70 95       	com	r23
    3c88:	61 95       	neg	r22
    3c8a:	7f 4f       	sbci	r23, 0xFF	; 255

00003c8c <__divmodhi4_exit>:
    3c8c:	08 95       	ret

00003c8e <__divmodhi4_neg1>:
    3c8e:	f6 f7       	brtc	.-4      	; 0x3c8c <__divmodhi4_exit>
    3c90:	90 95       	com	r25
    3c92:	81 95       	neg	r24
    3c94:	9f 4f       	sbci	r25, 0xFF	; 255
    3c96:	08 95       	ret

00003c98 <__udivmodsi4>:
    3c98:	a1 e2       	ldi	r26, 0x21	; 33
    3c9a:	1a 2e       	mov	r1, r26
    3c9c:	aa 1b       	sub	r26, r26
    3c9e:	bb 1b       	sub	r27, r27
    3ca0:	fd 01       	movw	r30, r26
    3ca2:	0d c0       	rjmp	.+26     	; 0x3cbe <__udivmodsi4_ep>

00003ca4 <__udivmodsi4_loop>:
    3ca4:	aa 1f       	adc	r26, r26
    3ca6:	bb 1f       	adc	r27, r27
    3ca8:	ee 1f       	adc	r30, r30
    3caa:	ff 1f       	adc	r31, r31
    3cac:	a2 17       	cp	r26, r18
    3cae:	b3 07       	cpc	r27, r19
    3cb0:	e4 07       	cpc	r30, r20
    3cb2:	f5 07       	cpc	r31, r21
    3cb4:	20 f0       	brcs	.+8      	; 0x3cbe <__udivmodsi4_ep>
    3cb6:	a2 1b       	sub	r26, r18
    3cb8:	b3 0b       	sbc	r27, r19
    3cba:	e4 0b       	sbc	r30, r20
    3cbc:	f5 0b       	sbc	r31, r21

00003cbe <__udivmodsi4_ep>:
    3cbe:	66 1f       	adc	r22, r22
    3cc0:	77 1f       	adc	r23, r23
    3cc2:	88 1f       	adc	r24, r24
    3cc4:	99 1f       	adc	r25, r25
    3cc6:	1a 94       	dec	r1
    3cc8:	69 f7       	brne	.-38     	; 0x3ca4 <__udivmodsi4_loop>
    3cca:	60 95       	com	r22
    3ccc:	70 95       	com	r23
    3cce:	80 95       	com	r24
    3cd0:	90 95       	com	r25
    3cd2:	9b 01       	movw	r18, r22
    3cd4:	ac 01       	movw	r20, r24
    3cd6:	bd 01       	movw	r22, r26
    3cd8:	cf 01       	movw	r24, r30
    3cda:	08 95       	ret

00003cdc <__udivmodhi4>:
    3cdc:	aa 1b       	sub	r26, r26
    3cde:	bb 1b       	sub	r27, r27
    3ce0:	51 e1       	ldi	r21, 0x11	; 17
    3ce2:	07 c0       	rjmp	.+14     	; 0x3cf2 <__udivmodhi4_ep>

00003ce4 <__udivmodhi4_loop>:
    3ce4:	aa 1f       	adc	r26, r26
    3ce6:	bb 1f       	adc	r27, r27
    3ce8:	a6 17       	cp	r26, r22
    3cea:	b7 07       	cpc	r27, r23
    3cec:	10 f0       	brcs	.+4      	; 0x3cf2 <__udivmodhi4_ep>
    3cee:	a6 1b       	sub	r26, r22
    3cf0:	b7 0b       	sbc	r27, r23

00003cf2 <__udivmodhi4_ep>:
    3cf2:	88 1f       	adc	r24, r24
    3cf4:	99 1f       	adc	r25, r25
    3cf6:	5a 95       	dec	r21
    3cf8:	a9 f7       	brne	.-22     	; 0x3ce4 <__udivmodhi4_loop>
    3cfa:	80 95       	com	r24
    3cfc:	90 95       	com	r25
    3cfe:	bc 01       	movw	r22, r24
    3d00:	cd 01       	movw	r24, r26
    3d02:	08 95       	ret

00003d04 <__prologue_saves__>:
    3d04:	2f 92       	push	r2
    3d06:	3f 92       	push	r3
    3d08:	4f 92       	push	r4
    3d0a:	5f 92       	push	r5
    3d0c:	6f 92       	push	r6
    3d0e:	7f 92       	push	r7
    3d10:	8f 92       	push	r8
    3d12:	9f 92       	push	r9
    3d14:	af 92       	push	r10
    3d16:	bf 92       	push	r11
    3d18:	cf 92       	push	r12
    3d1a:	df 92       	push	r13
    3d1c:	ef 92       	push	r14
    3d1e:	ff 92       	push	r15
    3d20:	0f 93       	push	r16
    3d22:	1f 93       	push	r17
    3d24:	cf 93       	push	r28
    3d26:	df 93       	push	r29
    3d28:	cd b7       	in	r28, 0x3d	; 61
    3d2a:	de b7       	in	r29, 0x3e	; 62
    3d2c:	ca 1b       	sub	r28, r26
    3d2e:	db 0b       	sbc	r29, r27
    3d30:	0f b6       	in	r0, 0x3f	; 63
    3d32:	f8 94       	cli
    3d34:	de bf       	out	0x3e, r29	; 62
    3d36:	0f be       	out	0x3f, r0	; 63
    3d38:	cd bf       	out	0x3d, r28	; 61
    3d3a:	09 94       	ijmp

00003d3c <__epilogue_restores__>:
    3d3c:	2a 88       	ldd	r2, Y+18	; 0x12
    3d3e:	39 88       	ldd	r3, Y+17	; 0x11
    3d40:	48 88       	ldd	r4, Y+16	; 0x10
    3d42:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d44:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d46:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d48:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d4a:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d4c:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d4e:	b9 84       	ldd	r11, Y+9	; 0x09
    3d50:	c8 84       	ldd	r12, Y+8	; 0x08
    3d52:	df 80       	ldd	r13, Y+7	; 0x07
    3d54:	ee 80       	ldd	r14, Y+6	; 0x06
    3d56:	fd 80       	ldd	r15, Y+5	; 0x05
    3d58:	0c 81       	ldd	r16, Y+4	; 0x04
    3d5a:	1b 81       	ldd	r17, Y+3	; 0x03
    3d5c:	aa 81       	ldd	r26, Y+2	; 0x02
    3d5e:	b9 81       	ldd	r27, Y+1	; 0x01
    3d60:	ce 0f       	add	r28, r30
    3d62:	d1 1d       	adc	r29, r1
    3d64:	0f b6       	in	r0, 0x3f	; 63
    3d66:	f8 94       	cli
    3d68:	de bf       	out	0x3e, r29	; 62
    3d6a:	0f be       	out	0x3f, r0	; 63
    3d6c:	cd bf       	out	0x3d, r28	; 61
    3d6e:	ed 01       	movw	r28, r26
    3d70:	08 95       	ret

00003d72 <_exit>:
    3d72:	f8 94       	cli

00003d74 <__stop_program>:
    3d74:	ff cf       	rjmp	.-2      	; 0x3d74 <__stop_program>
