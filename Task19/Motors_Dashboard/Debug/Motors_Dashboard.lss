
Motors_Dashboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000051a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000260  00800060  000051a4  00005238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000042  008002c0  008002c0  00005498  2**0
                  ALLOC
  3 .stab         00005574  00000000  00000000  00005498  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003ea5  00000000  00000000  0000aa0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000e8b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  0000ea51  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  0000ec41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0001104d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  000123c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0001359c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0001375c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  00013a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001441d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 13 0d 	jmp	0x1a26	; 0x1a26 <__vector_1>
       8:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <__vector_2>
       c:	0c 94 79 0d 	jmp	0x1af2	; 0x1af2 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 31 0b 	jmp	0x1662	; 0x1662 <__vector_10>
      2c:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ea       	ldi	r30, 0xA4	; 164
      68:	f1 e5       	ldi	r31, 0x51	; 81
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3c       	cpi	r26, 0xC0	; 192
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a0 ec       	ldi	r26, 0xC0	; 192
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 30       	cpi	r26, 0x02	; 2
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 33 20 	call	0x4066	; 0x4066 <main>
      8a:	0c 94 d0 28 	jmp	0x51a0	; 0x51a0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 89 28 	jmp	0x5112	; 0x5112 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e2       	ldi	r26, 0x2E	; 46
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a5 28 	jmp	0x514a	; 0x514a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 95 28 	jmp	0x512a	; 0x512a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b1 28 	jmp	0x5162	; 0x5162 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 95 28 	jmp	0x512a	; 0x512a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b1 28 	jmp	0x5162	; 0x5162 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 89 28 	jmp	0x5112	; 0x5112 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e2       	ldi	r24, 0x2E	; 46
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a5 28 	jmp	0x514a	; 0x514a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 91 28 	jmp	0x5122	; 0x5122 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e e2       	ldi	r22, 0x2E	; 46
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ad 28 	jmp	0x515a	; 0x515a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 95 28 	jmp	0x512a	; 0x512a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b1 28 	jmp	0x5162	; 0x5162 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 95 28 	jmp	0x512a	; 0x512a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b1 28 	jmp	0x5162	; 0x5162 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 95 28 	jmp	0x512a	; 0x512a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 b1 28 	jmp	0x5162	; 0x5162 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 92 28 	jmp	0x5124	; 0x5124 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 ae 28 	jmp	0x515c	; 0x515c <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 99 28 	jmp	0x5132	; 0x5132 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 b5 28 	jmp	0x516a	; 0x516a <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	ea 5c       	subi	r30, 0xCA	; 202
     a94:	fe 4f       	sbci	r31, 0xFE	; 254
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <TIMER0_Init>:
volatile u8 Global_Delay_Status=0;



ES_t TIMER0_Init(TIMER0_Config_t *TIME0_Cfg)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	2a 97       	sbiw	r28, 0x0a	; 10
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
     e0c:	9b 83       	std	Y+3, r25	; 0x03
     e0e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t RetValue = ES_NOT_OK;
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	89 83       	std	Y+1, r24	; 0x01
	if(TIME0_Cfg == NULLPTR){
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	9b 81       	ldd	r25, Y+3	; 0x03
     e18:	00 97       	sbiw	r24, 0x00	; 0
     e1a:	19 f4       	brne	.+6      	; 0xe22 <TIMER0_Init+0x2a>
		RetValue = ES_NOT_OK;
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	89 83       	std	Y+1, r24	; 0x01
     e20:	bb c0       	rjmp	.+374    	; 0xf98 <TIMER0_Init+0x1a0>
	}else
	{
		// Copy the configuration in a global structure in case of
		// usage inside othe functions
		Global_Timer0_Cfg = *TIME0_Cfg;
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	9b 81       	ldd	r25, Y+3	; 0x03
     e26:	22 ef       	ldi	r18, 0xF2	; 242
     e28:	32 e0       	ldi	r19, 0x02	; 2
     e2a:	3f 83       	std	Y+7, r19	; 0x07
     e2c:	2e 83       	std	Y+6, r18	; 0x06
     e2e:	99 87       	std	Y+9, r25	; 0x09
     e30:	88 87       	std	Y+8, r24	; 0x08
     e32:	35 e0       	ldi	r19, 0x05	; 5
     e34:	3a 87       	std	Y+10, r19	; 0x0a
     e36:	e8 85       	ldd	r30, Y+8	; 0x08
     e38:	f9 85       	ldd	r31, Y+9	; 0x09
     e3a:	00 80       	ld	r0, Z
     e3c:	28 85       	ldd	r18, Y+8	; 0x08
     e3e:	39 85       	ldd	r19, Y+9	; 0x09
     e40:	2f 5f       	subi	r18, 0xFF	; 255
     e42:	3f 4f       	sbci	r19, 0xFF	; 255
     e44:	39 87       	std	Y+9, r19	; 0x09
     e46:	28 87       	std	Y+8, r18	; 0x08
     e48:	ee 81       	ldd	r30, Y+6	; 0x06
     e4a:	ff 81       	ldd	r31, Y+7	; 0x07
     e4c:	00 82       	st	Z, r0
     e4e:	2e 81       	ldd	r18, Y+6	; 0x06
     e50:	3f 81       	ldd	r19, Y+7	; 0x07
     e52:	2f 5f       	subi	r18, 0xFF	; 255
     e54:	3f 4f       	sbci	r19, 0xFF	; 255
     e56:	3f 83       	std	Y+7, r19	; 0x07
     e58:	2e 83       	std	Y+6, r18	; 0x06
     e5a:	3a 85       	ldd	r19, Y+10	; 0x0a
     e5c:	31 50       	subi	r19, 0x01	; 1
     e5e:	3a 87       	std	Y+10, r19	; 0x0a
     e60:	8a 85       	ldd	r24, Y+10	; 0x0a
     e62:	88 23       	and	r24, r24
     e64:	41 f7       	brne	.-48     	; 0xe36 <TIMER0_Init+0x3e>


		// Timer0 mode Configurations
		if((TIME0_Cfg->mode >= TIMER0_NORMAL_MODE) && (TIME0_Cfg->mode <= TIMER0_FAST_PWM_MODE))
     e66:	ea 81       	ldd	r30, Y+2	; 0x02
     e68:	fb 81       	ldd	r31, Y+3	; 0x03
     e6a:	80 81       	ld	r24, Z
     e6c:	84 30       	cpi	r24, 0x04	; 4
     e6e:	08 f0       	brcs	.+2      	; 0xe72 <TIMER0_Init+0x7a>
     e70:	5e c0       	rjmp	.+188    	; 0xf2e <TIMER0_Init+0x136>
		{
			RetValue = ES_OK;
     e72:	19 82       	std	Y+1, r1	; 0x01
			switch(TIME0_Cfg->mode)
     e74:	ea 81       	ldd	r30, Y+2	; 0x02
     e76:	fb 81       	ldd	r31, Y+3	; 0x03
     e78:	80 81       	ld	r24, Z
     e7a:	e8 2f       	mov	r30, r24
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	fd 83       	std	Y+5, r31	; 0x05
     e80:	ec 83       	std	Y+4, r30	; 0x04
     e82:	2c 81       	ldd	r18, Y+4	; 0x04
     e84:	3d 81       	ldd	r19, Y+5	; 0x05
     e86:	21 30       	cpi	r18, 0x01	; 1
     e88:	31 05       	cpc	r19, r1
     e8a:	21 f1       	breq	.+72     	; 0xed4 <TIMER0_Init+0xdc>
     e8c:	8c 81       	ldd	r24, Y+4	; 0x04
     e8e:	9d 81       	ldd	r25, Y+5	; 0x05
     e90:	82 30       	cpi	r24, 0x02	; 2
     e92:	91 05       	cpc	r25, r1
     e94:	2c f4       	brge	.+10     	; 0xea0 <TIMER0_Init+0xa8>
     e96:	ec 81       	ldd	r30, Y+4	; 0x04
     e98:	fd 81       	ldd	r31, Y+5	; 0x05
     e9a:	30 97       	sbiw	r30, 0x00	; 0
     e9c:	61 f0       	breq	.+24     	; 0xeb6 <TIMER0_Init+0xbe>
     e9e:	49 c0       	rjmp	.+146    	; 0xf32 <TIMER0_Init+0x13a>
     ea0:	2c 81       	ldd	r18, Y+4	; 0x04
     ea2:	3d 81       	ldd	r19, Y+5	; 0x05
     ea4:	22 30       	cpi	r18, 0x02	; 2
     ea6:	31 05       	cpc	r19, r1
     ea8:	21 f1       	breq	.+72     	; 0xef2 <TIMER0_Init+0xfa>
     eaa:	8c 81       	ldd	r24, Y+4	; 0x04
     eac:	9d 81       	ldd	r25, Y+5	; 0x05
     eae:	83 30       	cpi	r24, 0x03	; 3
     eb0:	91 05       	cpc	r25, r1
     eb2:	71 f1       	breq	.+92     	; 0xf10 <TIMER0_Init+0x118>
     eb4:	3e c0       	rjmp	.+124    	; 0xf32 <TIMER0_Init+0x13a>
			{
			case TIMER0_NORMAL_MODE:
				CLR_BIT(TCCR0,WGM00);
     eb6:	a3 e5       	ldi	r26, 0x53	; 83
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e3 e5       	ldi	r30, 0x53	; 83
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	8f 7b       	andi	r24, 0xBF	; 191
     ec2:	8c 93       	st	X, r24
				CLR_BIT(TCCR0,WGM01);
     ec4:	a3 e5       	ldi	r26, 0x53	; 83
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e3 e5       	ldi	r30, 0x53	; 83
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	87 7f       	andi	r24, 0xF7	; 247
     ed0:	8c 93       	st	X, r24
     ed2:	2f c0       	rjmp	.+94     	; 0xf32 <TIMER0_Init+0x13a>
				break;
			case TIMER0_PHASE_CORRECT_MODE:
				SET_BIT(TCCR0,WGM00);
     ed4:	a3 e5       	ldi	r26, 0x53	; 83
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e3 e5       	ldi	r30, 0x53	; 83
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	80 64       	ori	r24, 0x40	; 64
     ee0:	8c 93       	st	X, r24
				CLR_BIT(TCCR0,WGM01);
     ee2:	a3 e5       	ldi	r26, 0x53	; 83
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e3 e5       	ldi	r30, 0x53	; 83
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	87 7f       	andi	r24, 0xF7	; 247
     eee:	8c 93       	st	X, r24
     ef0:	20 c0       	rjmp	.+64     	; 0xf32 <TIMER0_Init+0x13a>
				break;
			case TIMER0_CTC_MODE:
				CLR_BIT(TCCR0,WGM00);
     ef2:	a3 e5       	ldi	r26, 0x53	; 83
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e3 e5       	ldi	r30, 0x53	; 83
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	8f 7b       	andi	r24, 0xBF	; 191
     efe:	8c 93       	st	X, r24
				SET_BIT(TCCR0,WGM01);
     f00:	a3 e5       	ldi	r26, 0x53	; 83
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e3 e5       	ldi	r30, 0x53	; 83
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	88 60       	ori	r24, 0x08	; 8
     f0c:	8c 93       	st	X, r24
     f0e:	11 c0       	rjmp	.+34     	; 0xf32 <TIMER0_Init+0x13a>
				break;
			case TIMER0_FAST_PWM_MODE:
				SET_BIT(TCCR0,WGM00);
     f10:	a3 e5       	ldi	r26, 0x53	; 83
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e3 e5       	ldi	r30, 0x53	; 83
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	80 64       	ori	r24, 0x40	; 64
     f1c:	8c 93       	st	X, r24
				SET_BIT(TCCR0,WGM01);
     f1e:	a3 e5       	ldi	r26, 0x53	; 83
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e3 e5       	ldi	r30, 0x53	; 83
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	88 60       	ori	r24, 0x08	; 8
     f2a:	8c 93       	st	X, r24
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <TIMER0_Init+0x13a>
				break;
			}
		}else{
			RetValue = ES_NOT_OK;
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	89 83       	std	Y+1, r24	; 0x01
		}

		// Timer_0 Prescalar Configuration
		if((TIME0_Cfg->prescalar >= TIMER0_STOP) && (TIME0_Cfg->prescalar <= EXTERNAL_RISING))
     f32:	ea 81       	ldd	r30, Y+2	; 0x02
     f34:	fb 81       	ldd	r31, Y+3	; 0x03
     f36:	81 81       	ldd	r24, Z+1	; 0x01
     f38:	88 30       	cpi	r24, 0x08	; 8
     f3a:	58 f4       	brcc	.+22     	; 0xf52 <TIMER0_Init+0x15a>
		{
			TCCR0 |= TIME0_Cfg->prescalar;
     f3c:	a3 e5       	ldi	r26, 0x53	; 83
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e3 e5       	ldi	r30, 0x53	; 83
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	90 81       	ld	r25, Z
     f46:	ea 81       	ldd	r30, Y+2	; 0x02
     f48:	fb 81       	ldd	r31, Y+3	; 0x03
     f4a:	81 81       	ldd	r24, Z+1	; 0x01
     f4c:	89 2b       	or	r24, r25
     f4e:	8c 93       	st	X, r24
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <TIMER0_Init+0x15e>
		}else{
			RetValue = ES_NOT_OK;
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	89 83       	std	Y+1, r24	; 0x01
		}


		// Timer_0 OC0 Pin
		TCCR0 |= (TIME0_Cfg->oc0_mode << COM00);
     f56:	a3 e5       	ldi	r26, 0x53	; 83
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e3 e5       	ldi	r30, 0x53	; 83
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	28 2f       	mov	r18, r24
     f62:	ea 81       	ldd	r30, Y+2	; 0x02
     f64:	fb 81       	ldd	r31, Y+3	; 0x03
     f66:	82 81       	ldd	r24, Z+2	; 0x02
     f68:	88 2f       	mov	r24, r24
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	82 95       	swap	r24
     f6e:	92 95       	swap	r25
     f70:	90 7f       	andi	r25, 0xF0	; 240
     f72:	98 27       	eor	r25, r24
     f74:	80 7f       	andi	r24, 0xF0	; 240
     f76:	98 27       	eor	r25, r24
     f78:	82 2b       	or	r24, r18
     f7a:	8c 93       	st	X, r24


		// Timer_0 Interrupts
		TIMSK |= (TIME0_Cfg->OVF_Interrupt) | (TIME0_Cfg->OCM_Interrupt);
     f7c:	a9 e5       	ldi	r26, 0x59	; 89
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e9 e5       	ldi	r30, 0x59	; 89
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	20 81       	ld	r18, Z
     f86:	ea 81       	ldd	r30, Y+2	; 0x02
     f88:	fb 81       	ldd	r31, Y+3	; 0x03
     f8a:	93 81       	ldd	r25, Z+3	; 0x03
     f8c:	ea 81       	ldd	r30, Y+2	; 0x02
     f8e:	fb 81       	ldd	r31, Y+3	; 0x03
     f90:	84 81       	ldd	r24, Z+4	; 0x04
     f92:	89 2b       	or	r24, r25
     f94:	82 2b       	or	r24, r18
     f96:	8c 93       	st	X, r24



	}

	return RetValue;
     f98:	89 81       	ldd	r24, Y+1	; 0x01

}
     f9a:	2a 96       	adiw	r28, 0x0a	; 10
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	de bf       	out	0x3e, r29	; 62
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	cd bf       	out	0x3d, r28	; 61
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	08 95       	ret

00000fac <TIMER0_Stop>:
ES_t TIMER0_Stop(void)
{
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
	// No clock source
	CLR_BIT(TCCR0,CS00);
     fb4:	a3 e5       	ldi	r26, 0x53	; 83
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e3 e5       	ldi	r30, 0x53	; 83
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	8e 7f       	andi	r24, 0xFE	; 254
     fc0:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS01);
     fc2:	a3 e5       	ldi	r26, 0x53	; 83
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e3 e5       	ldi	r30, 0x53	; 83
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	8d 7f       	andi	r24, 0xFD	; 253
     fce:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS02);
     fd0:	a3 e5       	ldi	r26, 0x53	; 83
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e3 e5       	ldi	r30, 0x53	; 83
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	8b 7f       	andi	r24, 0xFB	; 251
     fdc:	8c 93       	st	X, r24
	return ES_OK;
     fde:	80 e0       	ldi	r24, 0x00	; 0
}
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	08 95       	ret

00000fe6 <TIMER0_GetCompareValue>:

ES_t TIMER0_GetCompareValue(u8 *CM_Value)
{
     fe6:	df 93       	push	r29
     fe8:	cf 93       	push	r28
     fea:	00 d0       	rcall	.+0      	; 0xfec <TIMER0_GetCompareValue+0x6>
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
     ff0:	9a 83       	std	Y+2, r25	; 0x02
     ff2:	89 83       	std	Y+1, r24	; 0x01
	*CM_Value = OCR0;
     ff4:	ec e5       	ldi	r30, 0x5C	; 92
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	e9 81       	ldd	r30, Y+1	; 0x01
     ffc:	fa 81       	ldd	r31, Y+2	; 0x02
     ffe:	80 83       	st	Z, r24

	return ES_OK;
    1000:	80 e0       	ldi	r24, 0x00	; 0

}
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	08 95       	ret

0000100c <TIMER0_SetCompareValue>:
ES_t TIMER0_SetCompareValue(u8 CM_Value)
{
    100c:	df 93       	push	r29
    100e:	cf 93       	push	r28
    1010:	0f 92       	push	r0
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = CM_Value;
    1018:	ec e5       	ldi	r30, 0x5C	; 92
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	80 83       	st	Z, r24

	return ES_OK;
    1020:	80 e0       	ldi	r24, 0x00	; 0

}
    1022:	0f 90       	pop	r0
    1024:	cf 91       	pop	r28
    1026:	df 91       	pop	r29
    1028:	08 95       	ret

0000102a <TIMER0_GetCounterValue>:

ES_t TIMER0_GetCounterValue(u8 *TCNT_Value)
{
    102a:	df 93       	push	r29
    102c:	cf 93       	push	r28
    102e:	00 d0       	rcall	.+0      	; 0x1030 <TIMER0_GetCounterValue+0x6>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	9a 83       	std	Y+2, r25	; 0x02
    1036:	89 83       	std	Y+1, r24	; 0x01

	*TCNT_Value = TCNT0;
    1038:	e2 e5       	ldi	r30, 0x52	; 82
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	e9 81       	ldd	r30, Y+1	; 0x01
    1040:	fa 81       	ldd	r31, Y+2	; 0x02
    1042:	80 83       	st	Z, r24


	return ES_OK;
    1044:	80 e0       	ldi	r24, 0x00	; 0
}
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	cf 91       	pop	r28
    104c:	df 91       	pop	r29
    104e:	08 95       	ret

00001050 <TIMER0_SetCounterValue>:


ES_t TIMER0_SetCounterValue(u8 TCNT_Value)
{
    1050:	df 93       	push	r29
    1052:	cf 93       	push	r28
    1054:	0f 92       	push	r0
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = TCNT_Value;
    105c:	e2 e5       	ldi	r30, 0x52	; 82
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	80 83       	st	Z, r24

	return ES_OK;
    1064:	80 e0       	ldi	r24, 0x00	; 0

}
    1066:	0f 90       	pop	r0
    1068:	cf 91       	pop	r28
    106a:	df 91       	pop	r29
    106c:	08 95       	ret

0000106e <TIMER0_GetOVF_Flag>:

// In case of larger than 255
ES_t TIMER0_GetOVF_Flag(u8 *OVF_Value)
{
    106e:	df 93       	push	r29
    1070:	cf 93       	push	r28
    1072:	00 d0       	rcall	.+0      	; 0x1074 <TIMER0_GetOVF_Flag+0x6>
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
    1078:	9a 83       	std	Y+2, r25	; 0x02
    107a:	89 83       	std	Y+1, r24	; 0x01

	*OVF_Value = OVF_Number;
    107c:	80 91 c5 02 	lds	r24, 0x02C5
    1080:	90 91 c6 02 	lds	r25, 0x02C6
    1084:	a0 91 c7 02 	lds	r26, 0x02C7
    1088:	b0 91 c8 02 	lds	r27, 0x02C8
    108c:	e9 81       	ldd	r30, Y+1	; 0x01
    108e:	fa 81       	ldd	r31, Y+2	; 0x02
    1090:	80 83       	st	Z, r24
	return ES_OK;
    1092:	80 e0       	ldi	r24, 0x00	; 0

}
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	08 95       	ret

0000109e <PWM_Set_DutyCycle>:



ES_t PWM_Set_DutyCycle(float dutyCycle)
{
    109e:	0f 93       	push	r16
    10a0:	1f 93       	push	r17
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <PWM_Set_DutyCycle+0xa>
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <PWM_Set_DutyCycle+0xc>
    10aa:	0f 92       	push	r0
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
    10b0:	6a 83       	std	Y+2, r22	; 0x02
    10b2:	7b 83       	std	Y+3, r23	; 0x03
    10b4:	8c 83       	std	Y+4, r24	; 0x04
    10b6:	9d 83       	std	Y+5, r25	; 0x05
	ES_t RetValue;

	if((Global_Timer0_Cfg.mode == TIMER0_FAST_PWM_MODE) || (Global_Timer0_Cfg.mode == TIMER0_PHASE_CORRECT_MODE))
    10b8:	80 91 f2 02 	lds	r24, 0x02F2
    10bc:	83 30       	cpi	r24, 0x03	; 3
    10be:	29 f0       	breq	.+10     	; 0x10ca <PWM_Set_DutyCycle+0x2c>
    10c0:	80 91 f2 02 	lds	r24, 0x02F2
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	09 f0       	breq	.+2      	; 0x10ca <PWM_Set_DutyCycle+0x2c>
    10c8:	57 c0       	rjmp	.+174    	; 0x1178 <PWM_Set_DutyCycle+0xda>
	{
		if(Global_Timer0_Cfg.oc0_mode == OC0_NON_INVERTING)
    10ca:	80 91 f4 02 	lds	r24, 0x02F4
    10ce:	82 30       	cpi	r24, 0x02	; 2
    10d0:	11 f5       	brne	.+68     	; 0x1116 <PWM_Set_DutyCycle+0x78>
		{
			OCR0 = (u8)((dutyCycle/100.0)*256) - 1;
    10d2:	0c e5       	ldi	r16, 0x5C	; 92
    10d4:	10 e0       	ldi	r17, 0x00	; 0
    10d6:	6a 81       	ldd	r22, Y+2	; 0x02
    10d8:	7b 81       	ldd	r23, Y+3	; 0x03
    10da:	8c 81       	ldd	r24, Y+4	; 0x04
    10dc:	9d 81       	ldd	r25, Y+5	; 0x05
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	48 ec       	ldi	r20, 0xC8	; 200
    10e4:	52 e4       	ldi	r21, 0x42	; 66
    10e6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    10ea:	dc 01       	movw	r26, r24
    10ec:	cb 01       	movw	r24, r22
    10ee:	bc 01       	movw	r22, r24
    10f0:	cd 01       	movw	r24, r26
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	40 e8       	ldi	r20, 0x80	; 128
    10f8:	53 e4       	ldi	r21, 0x43	; 67
    10fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	bc 01       	movw	r22, r24
    1104:	cd 01       	movw	r24, r26
    1106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    110a:	dc 01       	movw	r26, r24
    110c:	cb 01       	movw	r24, r22
    110e:	81 50       	subi	r24, 0x01	; 1
    1110:	f8 01       	movw	r30, r16
    1112:	80 83       	st	Z, r24
    1114:	2f c0       	rjmp	.+94     	; 0x1174 <PWM_Set_DutyCycle+0xd6>

		}else if(Global_Timer0_Cfg.oc0_mode == OC0_INVERTING)
    1116:	80 91 f4 02 	lds	r24, 0x02F4
    111a:	83 30       	cpi	r24, 0x03	; 3
    111c:	59 f5       	brne	.+86     	; 0x1174 <PWM_Set_DutyCycle+0xd6>
		{
			OCR0 = (u8)(256-((256*dutyCycle)/100.0)) - 1;
    111e:	0c e5       	ldi	r16, 0x5C	; 92
    1120:	10 e0       	ldi	r17, 0x00	; 0
    1122:	6a 81       	ldd	r22, Y+2	; 0x02
    1124:	7b 81       	ldd	r23, Y+3	; 0x03
    1126:	8c 81       	ldd	r24, Y+4	; 0x04
    1128:	9d 81       	ldd	r25, Y+5	; 0x05
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	40 e8       	ldi	r20, 0x80	; 128
    1130:	53 e4       	ldi	r21, 0x43	; 67
    1132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1136:	dc 01       	movw	r26, r24
    1138:	cb 01       	movw	r24, r22
    113a:	bc 01       	movw	r22, r24
    113c:	cd 01       	movw	r24, r26
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	48 ec       	ldi	r20, 0xC8	; 200
    1144:	52 ec       	ldi	r21, 0xC2	; 194
    1146:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    114a:	dc 01       	movw	r26, r24
    114c:	cb 01       	movw	r24, r22
    114e:	bc 01       	movw	r22, r24
    1150:	cd 01       	movw	r24, r26
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	40 e8       	ldi	r20, 0x80	; 128
    1158:	53 e4       	ldi	r21, 0x43	; 67
    115a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    115e:	dc 01       	movw	r26, r24
    1160:	cb 01       	movw	r24, r22
    1162:	bc 01       	movw	r22, r24
    1164:	cd 01       	movw	r24, r26
    1166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    116a:	dc 01       	movw	r26, r24
    116c:	cb 01       	movw	r24, r22
    116e:	81 50       	subi	r24, 0x01	; 1
    1170:	f8 01       	movw	r30, r16
    1172:	80 83       	st	Z, r24
		}
		RetValue = ES_OK;
    1174:	19 82       	std	Y+1, r1	; 0x01
    1176:	02 c0       	rjmp	.+4      	; 0x117c <PWM_Set_DutyCycle+0xde>
	}else{
		RetValue = ES_NOT_OK;
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	89 83       	std	Y+1, r24	; 0x01
	}
	return RetValue;
    117c:	89 81       	ldd	r24, Y+1	; 0x01
}
    117e:	0f 90       	pop	r0
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	cf 91       	pop	r28
    118a:	df 91       	pop	r29
    118c:	1f 91       	pop	r17
    118e:	0f 91       	pop	r16
    1190:	08 95       	ret

00001192 <Timer0_Set_Delay_ms>:



void Timer0_Set_Delay_ms(u32 delay_ms)
{
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	67 97       	sbiw	r28, 0x17	; 23
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	f8 94       	cli
    11a0:	de bf       	out	0x3e, r29	; 62
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	cd bf       	out	0x3d, r28	; 61
    11a6:	6d 87       	std	Y+13, r22	; 0x0d
    11a8:	7e 87       	std	Y+14, r23	; 0x0e
    11aa:	8f 87       	std	Y+15, r24	; 0x0f
    11ac:	98 8b       	std	Y+16, r25	; 0x10
	TIMER0_Config_t Timer0Cfg = {TIMER0_NORMAL_MODE, TIMER0_PRESCALAR_1024, OC0_DISCONNECTED, TOIE0_ENABLE, OCIE0_DISABLE};
    11ae:	9e 01       	movw	r18, r28
    11b0:	28 5f       	subi	r18, 0xF8	; 248
    11b2:	3f 4f       	sbci	r19, 0xFF	; 255
    11b4:	3c 8b       	std	Y+20, r19	; 0x14
    11b6:	2b 8b       	std	Y+19, r18	; 0x13
    11b8:	83 ea       	ldi	r24, 0xA3	; 163
    11ba:	92 e0       	ldi	r25, 0x02	; 2
    11bc:	9e 8b       	std	Y+22, r25	; 0x16
    11be:	8d 8b       	std	Y+21, r24	; 0x15
    11c0:	95 e0       	ldi	r25, 0x05	; 5
    11c2:	9f 8b       	std	Y+23, r25	; 0x17
    11c4:	ed 89       	ldd	r30, Y+21	; 0x15
    11c6:	fe 89       	ldd	r31, Y+22	; 0x16
    11c8:	00 80       	ld	r0, Z
    11ca:	2d 89       	ldd	r18, Y+21	; 0x15
    11cc:	3e 89       	ldd	r19, Y+22	; 0x16
    11ce:	2f 5f       	subi	r18, 0xFF	; 255
    11d0:	3f 4f       	sbci	r19, 0xFF	; 255
    11d2:	3e 8b       	std	Y+22, r19	; 0x16
    11d4:	2d 8b       	std	Y+21, r18	; 0x15
    11d6:	eb 89       	ldd	r30, Y+19	; 0x13
    11d8:	fc 89       	ldd	r31, Y+20	; 0x14
    11da:	00 82       	st	Z, r0
    11dc:	2b 89       	ldd	r18, Y+19	; 0x13
    11de:	3c 89       	ldd	r19, Y+20	; 0x14
    11e0:	2f 5f       	subi	r18, 0xFF	; 255
    11e2:	3f 4f       	sbci	r19, 0xFF	; 255
    11e4:	3c 8b       	std	Y+20, r19	; 0x14
    11e6:	2b 8b       	std	Y+19, r18	; 0x13
    11e8:	3f 89       	ldd	r19, Y+23	; 0x17
    11ea:	31 50       	subi	r19, 0x01	; 1
    11ec:	3f 8b       	std	Y+23, r19	; 0x17
    11ee:	8f 89       	ldd	r24, Y+23	; 0x17
    11f0:	88 23       	and	r24, r24
    11f2:	41 f7       	brne	.-48     	; 0x11c4 <Timer0_Set_Delay_ms+0x32>
	TIMER0_Init(&Timer0Cfg);
    11f4:	ce 01       	movw	r24, r28
    11f6:	08 96       	adiw	r24, 0x08	; 8
    11f8:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <TIMER0_Init>

	u16 prescalar = 0;
    11fc:	1f 82       	std	Y+7, r1	; 0x07
    11fe:	1e 82       	std	Y+6, r1	; 0x06
	switch(Timer0Cfg.prescalar){
    1200:	89 85       	ldd	r24, Y+9	; 0x09
    1202:	e8 2f       	mov	r30, r24
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	fa 8b       	std	Y+18, r31	; 0x12
    1208:	e9 8b       	std	Y+17, r30	; 0x11
    120a:	29 89       	ldd	r18, Y+17	; 0x11
    120c:	3a 89       	ldd	r19, Y+18	; 0x12
    120e:	23 30       	cpi	r18, 0x03	; 3
    1210:	31 05       	cpc	r19, r1
    1212:	49 f1       	breq	.+82     	; 0x1266 <Timer0_Set_Delay_ms+0xd4>
    1214:	89 89       	ldd	r24, Y+17	; 0x11
    1216:	9a 89       	ldd	r25, Y+18	; 0x12
    1218:	84 30       	cpi	r24, 0x04	; 4
    121a:	91 05       	cpc	r25, r1
    121c:	7c f4       	brge	.+30     	; 0x123c <Timer0_Set_Delay_ms+0xaa>
    121e:	e9 89       	ldd	r30, Y+17	; 0x11
    1220:	fa 89       	ldd	r31, Y+18	; 0x12
    1222:	e1 30       	cpi	r30, 0x01	; 1
    1224:	f1 05       	cpc	r31, r1
    1226:	49 f1       	breq	.+82     	; 0x127a <Timer0_Set_Delay_ms+0xe8>
    1228:	29 89       	ldd	r18, Y+17	; 0x11
    122a:	3a 89       	ldd	r19, Y+18	; 0x12
    122c:	22 30       	cpi	r18, 0x02	; 2
    122e:	31 05       	cpc	r19, r1
    1230:	fc f4       	brge	.+62     	; 0x1270 <Timer0_Set_Delay_ms+0xde>
    1232:	89 89       	ldd	r24, Y+17	; 0x11
    1234:	9a 89       	ldd	r25, Y+18	; 0x12
    1236:	00 97       	sbiw	r24, 0x00	; 0
    1238:	29 f1       	breq	.+74     	; 0x1284 <Timer0_Set_Delay_ms+0xf2>
    123a:	26 c0       	rjmp	.+76     	; 0x1288 <Timer0_Set_Delay_ms+0xf6>
    123c:	e9 89       	ldd	r30, Y+17	; 0x11
    123e:	fa 89       	ldd	r31, Y+18	; 0x12
    1240:	e5 30       	cpi	r30, 0x05	; 5
    1242:	f1 05       	cpc	r31, r1
    1244:	31 f0       	breq	.+12     	; 0x1252 <Timer0_Set_Delay_ms+0xc0>
    1246:	29 89       	ldd	r18, Y+17	; 0x11
    1248:	3a 89       	ldd	r19, Y+18	; 0x12
    124a:	25 30       	cpi	r18, 0x05	; 5
    124c:	31 05       	cpc	r19, r1
    124e:	34 f0       	brlt	.+12     	; 0x125c <Timer0_Set_Delay_ms+0xca>
    1250:	1b c0       	rjmp	.+54     	; 0x1288 <Timer0_Set_Delay_ms+0xf6>
	case TIMER0_PRESCALAR_1024:
		prescalar = 1024;
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	94 e0       	ldi	r25, 0x04	; 4
    1256:	9f 83       	std	Y+7, r25	; 0x07
    1258:	8e 83       	std	Y+6, r24	; 0x06
    125a:	16 c0       	rjmp	.+44     	; 0x1288 <Timer0_Set_Delay_ms+0xf6>
		break;
	case TIMER0_PRESCALAR_256:
		prescalar = 256;
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	91 e0       	ldi	r25, 0x01	; 1
    1260:	9f 83       	std	Y+7, r25	; 0x07
    1262:	8e 83       	std	Y+6, r24	; 0x06
    1264:	11 c0       	rjmp	.+34     	; 0x1288 <Timer0_Set_Delay_ms+0xf6>
		break;
	case TIMER0_PRESCALAR_64:
		prescalar = 64;
    1266:	80 e4       	ldi	r24, 0x40	; 64
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	9f 83       	std	Y+7, r25	; 0x07
    126c:	8e 83       	std	Y+6, r24	; 0x06
    126e:	0c c0       	rjmp	.+24     	; 0x1288 <Timer0_Set_Delay_ms+0xf6>
		break;
	case TIMER0_PRESCALAR_8:
		prescalar = 8;
    1270:	88 e0       	ldi	r24, 0x08	; 8
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	9f 83       	std	Y+7, r25	; 0x07
    1276:	8e 83       	std	Y+6, r24	; 0x06
    1278:	07 c0       	rjmp	.+14     	; 0x1288 <Timer0_Set_Delay_ms+0xf6>
		break;
	case TIMER0_PRESCALAR_1:
		prescalar = 1;
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	9f 83       	std	Y+7, r25	; 0x07
    1280:	8e 83       	std	Y+6, r24	; 0x06
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <Timer0_Set_Delay_ms+0xf6>
		break;
	case EXTERNAL_FALLING:
	case EXTERNAL_RISING:
		break;
	case TIMER0_STOP:
		prescalar = 0;
    1284:	1f 82       	std	Y+7, r1	; 0x07
    1286:	1e 82       	std	Y+6, r1	; 0x06
		break;
	}

	u32 CountsNum = (u32)((F_CPU / (prescalar * 1000UL)) * (delay_ms));
    1288:	8e 81       	ldd	r24, Y+6	; 0x06
    128a:	9f 81       	ldd	r25, Y+7	; 0x07
    128c:	cc 01       	movw	r24, r24
    128e:	a0 e0       	ldi	r26, 0x00	; 0
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	28 ee       	ldi	r18, 0xE8	; 232
    1294:	33 e0       	ldi	r19, 0x03	; 3
    1296:	40 e0       	ldi	r20, 0x00	; 0
    1298:	50 e0       	ldi	r21, 0x00	; 0
    129a:	bc 01       	movw	r22, r24
    129c:	cd 01       	movw	r24, r26
    129e:	0e 94 34 28 	call	0x5068	; 0x5068 <__mulsi3>
    12a2:	9b 01       	movw	r18, r22
    12a4:	ac 01       	movw	r20, r24
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	94 e2       	ldi	r25, 0x24	; 36
    12aa:	a4 ef       	ldi	r26, 0xF4	; 244
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	bc 01       	movw	r22, r24
    12b0:	cd 01       	movw	r24, r26
    12b2:	0e 94 67 28 	call	0x50ce	; 0x50ce <__udivmodsi4>
    12b6:	da 01       	movw	r26, r20
    12b8:	c9 01       	movw	r24, r18
    12ba:	2d 85       	ldd	r18, Y+13	; 0x0d
    12bc:	3e 85       	ldd	r19, Y+14	; 0x0e
    12be:	4f 85       	ldd	r20, Y+15	; 0x0f
    12c0:	58 89       	ldd	r21, Y+16	; 0x10
    12c2:	bc 01       	movw	r22, r24
    12c4:	cd 01       	movw	r24, r26
    12c6:	0e 94 34 28 	call	0x5068	; 0x5068 <__mulsi3>
    12ca:	dc 01       	movw	r26, r24
    12cc:	cb 01       	movw	r24, r22
    12ce:	8a 83       	std	Y+2, r24	; 0x02
    12d0:	9b 83       	std	Y+3, r25	; 0x03
    12d2:	ac 83       	std	Y+4, r26	; 0x04
    12d4:	bd 83       	std	Y+5, r27	; 0x05
	OVF_Number = (u32)(CountsNum / 256);
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	9b 81       	ldd	r25, Y+3	; 0x03
    12da:	ac 81       	ldd	r26, Y+4	; 0x04
    12dc:	bd 81       	ldd	r27, Y+5	; 0x05
    12de:	89 2f       	mov	r24, r25
    12e0:	9a 2f       	mov	r25, r26
    12e2:	ab 2f       	mov	r26, r27
    12e4:	bb 27       	eor	r27, r27
    12e6:	80 93 c5 02 	sts	0x02C5, r24
    12ea:	90 93 c6 02 	sts	0x02C6, r25
    12ee:	a0 93 c7 02 	sts	0x02C7, r26
    12f2:	b0 93 c8 02 	sts	0x02C8, r27
	u8 RestCounts = CountsNum % 256;
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	89 83       	std	Y+1, r24	; 0x01



	TIMER0_SetCounterValue(0);
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	0e 94 28 08 	call	0x1050	; 0x1050 <TIMER0_SetCounterValue>

	while(OVF_Number > 0);
    1300:	80 91 c5 02 	lds	r24, 0x02C5
    1304:	90 91 c6 02 	lds	r25, 0x02C6
    1308:	a0 91 c7 02 	lds	r26, 0x02C7
    130c:	b0 91 c8 02 	lds	r27, 0x02C8
    1310:	00 97       	sbiw	r24, 0x00	; 0
    1312:	a1 05       	cpc	r26, r1
    1314:	b1 05       	cpc	r27, r1
    1316:	a1 f7       	brne	.-24     	; 0x1300 <Timer0_Set_Delay_ms+0x16e>

	while(TCNT0 < RestCounts);
    1318:	e2 e5       	ldi	r30, 0x52	; 82
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	90 81       	ld	r25, Z
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	98 17       	cp	r25, r24
    1322:	d0 f3       	brcs	.-12     	; 0x1318 <Timer0_Set_Delay_ms+0x186>

	TIMER0_Stop();
    1324:	0e 94 d6 07 	call	0xfac	; 0xfac <TIMER0_Stop>

	// Disable Timer0 overflow interrupt
	TIMSK &= ~(1 << TOIE0);
    1328:	a9 e5       	ldi	r26, 0x59	; 89
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e9 e5       	ldi	r30, 0x59	; 89
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	8e 7f       	andi	r24, 0xFE	; 254
    1334:	8c 93       	st	X, r24
}
    1336:	67 96       	adiw	r28, 0x17	; 23
    1338:	0f b6       	in	r0, 0x3f	; 63
    133a:	f8 94       	cli
    133c:	de bf       	out	0x3e, r29	; 62
    133e:	0f be       	out	0x3f, r0	; 63
    1340:	cd bf       	out	0x3d, r28	; 61
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	08 95       	ret

00001348 <Timer0_OVF_SetCallBack>:


void Timer0_OVF_SetCallBack(void (*Local_ptr_toFunc))
{
    1348:	df 93       	push	r29
    134a:	cf 93       	push	r28
    134c:	00 d0       	rcall	.+0      	; 0x134e <Timer0_OVF_SetCallBack+0x6>
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	9a 83       	std	Y+2, r25	; 0x02
    1354:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OVF_Fptr = Local_ptr_toFunc;
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	9a 81       	ldd	r25, Y+2	; 0x02
    135a:	90 93 c1 02 	sts	0x02C1, r25
    135e:	80 93 c0 02 	sts	0x02C0, r24


}
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <Timer0_OCM_SetCallBack>:
void Timer0_OCM_SetCallBack(void (*Local_ptr_toFunc))
{
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	00 d0       	rcall	.+0      	; 0x1372 <Timer0_OCM_SetCallBack+0x6>
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
    1376:	9a 83       	std	Y+2, r25	; 0x02
    1378:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OCM_Fptr = Local_ptr_toFunc;
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	9a 81       	ldd	r25, Y+2	; 0x02
    137e:	90 93 c3 02 	sts	0x02C3, r25
    1382:	80 93 c2 02 	sts	0x02C2, r24
}
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	08 95       	ret

00001390 <TIMER1_Init>:

// ===========================================================


ES_t TIMER1_Init(TIMER1_Config_t *TIME1_Cfg)
{
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	2a 97       	sbiw	r28, 0x0a	; 10
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	f8 94       	cli
    139e:	de bf       	out	0x3e, r29	; 62
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	cd bf       	out	0x3d, r28	; 61
    13a4:	9b 83       	std	Y+3, r25	; 0x03
    13a6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t RetValue = ES_NOT_OK;
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	89 83       	std	Y+1, r24	; 0x01
	if(TIME1_Cfg == NULLPTR){
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	9b 81       	ldd	r25, Y+3	; 0x03
    13b0:	00 97       	sbiw	r24, 0x00	; 0
    13b2:	19 f4       	brne	.+6      	; 0x13ba <TIMER1_Init+0x2a>
		RetValue = ES_NOT_OK;
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	89 83       	std	Y+1, r24	; 0x01
    13b8:	ea c0       	rjmp	.+468    	; 0x158e <TIMER1_Init+0x1fe>
	}else
	{
		// Copy the configuration in a global structure in case of
		// usage inside othe functions
		Global_Timer1_Cfg = *TIME1_Cfg;
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	9b 81       	ldd	r25, Y+3	; 0x03
    13be:	27 ef       	ldi	r18, 0xF7	; 247
    13c0:	32 e0       	ldi	r19, 0x02	; 2
    13c2:	3f 83       	std	Y+7, r19	; 0x07
    13c4:	2e 83       	std	Y+6, r18	; 0x06
    13c6:	99 87       	std	Y+9, r25	; 0x09
    13c8:	88 87       	std	Y+8, r24	; 0x08
    13ca:	38 e0       	ldi	r19, 0x08	; 8
    13cc:	3a 87       	std	Y+10, r19	; 0x0a
    13ce:	e8 85       	ldd	r30, Y+8	; 0x08
    13d0:	f9 85       	ldd	r31, Y+9	; 0x09
    13d2:	00 80       	ld	r0, Z
    13d4:	28 85       	ldd	r18, Y+8	; 0x08
    13d6:	39 85       	ldd	r19, Y+9	; 0x09
    13d8:	2f 5f       	subi	r18, 0xFF	; 255
    13da:	3f 4f       	sbci	r19, 0xFF	; 255
    13dc:	39 87       	std	Y+9, r19	; 0x09
    13de:	28 87       	std	Y+8, r18	; 0x08
    13e0:	ee 81       	ldd	r30, Y+6	; 0x06
    13e2:	ff 81       	ldd	r31, Y+7	; 0x07
    13e4:	00 82       	st	Z, r0
    13e6:	2e 81       	ldd	r18, Y+6	; 0x06
    13e8:	3f 81       	ldd	r19, Y+7	; 0x07
    13ea:	2f 5f       	subi	r18, 0xFF	; 255
    13ec:	3f 4f       	sbci	r19, 0xFF	; 255
    13ee:	3f 83       	std	Y+7, r19	; 0x07
    13f0:	2e 83       	std	Y+6, r18	; 0x06
    13f2:	3a 85       	ldd	r19, Y+10	; 0x0a
    13f4:	31 50       	subi	r19, 0x01	; 1
    13f6:	3a 87       	std	Y+10, r19	; 0x0a
    13f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    13fa:	88 23       	and	r24, r24
    13fc:	41 f7       	brne	.-48     	; 0x13ce <TIMER1_Init+0x3e>


		// Timer0 mode Configurations
		if((TIME1_Cfg->mode >= TIMER1_NORMAL_MODE) && (TIME1_Cfg->mode <= TIMER1_FAST_PWM_OCR1A_TOP))
    13fe:	ea 81       	ldd	r30, Y+2	; 0x02
    1400:	fb 81       	ldd	r31, Y+3	; 0x03
    1402:	80 81       	ld	r24, Z
    1404:	83 30       	cpi	r24, 0x03	; 3
    1406:	08 f0       	brcs	.+2      	; 0x140a <TIMER1_Init+0x7a>
    1408:	6f c0       	rjmp	.+222    	; 0x14e8 <TIMER1_Init+0x158>
		{
			RetValue = ES_OK;
    140a:	19 82       	std	Y+1, r1	; 0x01
			switch(TIME1_Cfg->mode)
    140c:	ea 81       	ldd	r30, Y+2	; 0x02
    140e:	fb 81       	ldd	r31, Y+3	; 0x03
    1410:	80 81       	ld	r24, Z
    1412:	e8 2f       	mov	r30, r24
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	fd 83       	std	Y+5, r31	; 0x05
    1418:	ec 83       	std	Y+4, r30	; 0x04
    141a:	2c 81       	ldd	r18, Y+4	; 0x04
    141c:	3d 81       	ldd	r19, Y+5	; 0x05
    141e:	21 30       	cpi	r18, 0x01	; 1
    1420:	31 05       	cpc	r19, r1
    1422:	41 f1       	breq	.+80     	; 0x1474 <TIMER1_Init+0xe4>
    1424:	8c 81       	ldd	r24, Y+4	; 0x04
    1426:	9d 81       	ldd	r25, Y+5	; 0x05
    1428:	82 30       	cpi	r24, 0x02	; 2
    142a:	91 05       	cpc	r25, r1
    142c:	09 f4       	brne	.+2      	; 0x1430 <TIMER1_Init+0xa0>
    142e:	3f c0       	rjmp	.+126    	; 0x14ae <TIMER1_Init+0x11e>
    1430:	ec 81       	ldd	r30, Y+4	; 0x04
    1432:	fd 81       	ldd	r31, Y+5	; 0x05
    1434:	30 97       	sbiw	r30, 0x00	; 0
    1436:	09 f0       	breq	.+2      	; 0x143a <TIMER1_Init+0xaa>
    1438:	59 c0       	rjmp	.+178    	; 0x14ec <TIMER1_Init+0x15c>
			{
			case TIMER1_NORMAL_MODE:
				CLR_BIT(TCCR1A,WGM10);
    143a:	af e4       	ldi	r26, 0x4F	; 79
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	ef e4       	ldi	r30, 0x4F	; 79
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	8e 7f       	andi	r24, 0xFE	; 254
    1446:	8c 93       	st	X, r24
				CLR_BIT(TCCR1A,WGM11);
    1448:	af e4       	ldi	r26, 0x4F	; 79
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	ef e4       	ldi	r30, 0x4F	; 79
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	8d 7f       	andi	r24, 0xFD	; 253
    1454:	8c 93       	st	X, r24
				CLR_BIT(TCCR1B,WGM12);
    1456:	ae e4       	ldi	r26, 0x4E	; 78
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	ee e4       	ldi	r30, 0x4E	; 78
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	87 7f       	andi	r24, 0xF7	; 247
    1462:	8c 93       	st	X, r24
				CLR_BIT(TCCR1B,WGM13);
    1464:	ae e4       	ldi	r26, 0x4E	; 78
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	ee e4       	ldi	r30, 0x4E	; 78
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	8f 7e       	andi	r24, 0xEF	; 239
    1470:	8c 93       	st	X, r24
    1472:	3c c0       	rjmp	.+120    	; 0x14ec <TIMER1_Init+0x15c>
				break;
			case TIMER1_FAST_PWM_ICR1_TOP:
				CLR_BIT(TCCR1A,WGM10);
    1474:	af e4       	ldi	r26, 0x4F	; 79
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	ef e4       	ldi	r30, 0x4F	; 79
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	8e 7f       	andi	r24, 0xFE	; 254
    1480:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,WGM11);
    1482:	af e4       	ldi	r26, 0x4F	; 79
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	ef e4       	ldi	r30, 0x4F	; 79
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	82 60       	ori	r24, 0x02	; 2
    148e:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,WGM12);
    1490:	ae e4       	ldi	r26, 0x4E	; 78
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	ee e4       	ldi	r30, 0x4E	; 78
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	88 60       	ori	r24, 0x08	; 8
    149c:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,WGM13);
    149e:	ae e4       	ldi	r26, 0x4E	; 78
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	ee e4       	ldi	r30, 0x4E	; 78
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	80 61       	ori	r24, 0x10	; 16
    14aa:	8c 93       	st	X, r24
    14ac:	1f c0       	rjmp	.+62     	; 0x14ec <TIMER1_Init+0x15c>
				break;
			case TIMER1_FAST_PWM_OCR1A_TOP:
				SET_BIT(TCCR1A,WGM10);
    14ae:	af e4       	ldi	r26, 0x4F	; 79
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	ef e4       	ldi	r30, 0x4F	; 79
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	81 60       	ori	r24, 0x01	; 1
    14ba:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,WGM11);
    14bc:	af e4       	ldi	r26, 0x4F	; 79
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	ef e4       	ldi	r30, 0x4F	; 79
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	82 60       	ori	r24, 0x02	; 2
    14c8:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,WGM12);
    14ca:	ae e4       	ldi	r26, 0x4E	; 78
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	ee e4       	ldi	r30, 0x4E	; 78
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	88 60       	ori	r24, 0x08	; 8
    14d6:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,WGM13);
    14d8:	ae e4       	ldi	r26, 0x4E	; 78
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	ee e4       	ldi	r30, 0x4E	; 78
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	80 61       	ori	r24, 0x10	; 16
    14e4:	8c 93       	st	X, r24
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <TIMER1_Init+0x15c>
				break;
			}
		}else{
			RetValue = ES_NOT_OK;
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	89 83       	std	Y+1, r24	; 0x01
		}

		// Timer_0 Prescalar Configuration
		if((TIME1_Cfg->prescalar >= TIMER1_STOP) && (TIME1_Cfg->prescalar <= EXTERNAL1_RISING))
    14ec:	ea 81       	ldd	r30, Y+2	; 0x02
    14ee:	fb 81       	ldd	r31, Y+3	; 0x03
    14f0:	81 81       	ldd	r24, Z+1	; 0x01
    14f2:	88 30       	cpi	r24, 0x08	; 8
    14f4:	58 f4       	brcc	.+22     	; 0x150c <TIMER1_Init+0x17c>
		{
			TCCR1B |= TIME1_Cfg->prescalar;
    14f6:	ae e4       	ldi	r26, 0x4E	; 78
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	ee e4       	ldi	r30, 0x4E	; 78
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	90 81       	ld	r25, Z
    1500:	ea 81       	ldd	r30, Y+2	; 0x02
    1502:	fb 81       	ldd	r31, Y+3	; 0x03
    1504:	81 81       	ldd	r24, Z+1	; 0x01
    1506:	89 2b       	or	r24, r25
    1508:	8c 93       	st	X, r24
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <TIMER1_Init+0x180>
		}else{
			RetValue = ES_NOT_OK;
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	89 83       	std	Y+1, r24	; 0x01
		}


		// Timer_1 OCA Pin
		TCCR1A |= (TIME1_Cfg->OC1A_mode << COM1A0);
    1510:	af e4       	ldi	r26, 0x4F	; 79
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	ef e4       	ldi	r30, 0x4F	; 79
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	28 2f       	mov	r18, r24
    151c:	ea 81       	ldd	r30, Y+2	; 0x02
    151e:	fb 81       	ldd	r31, Y+3	; 0x03
    1520:	82 81       	ldd	r24, Z+2	; 0x02
    1522:	88 2f       	mov	r24, r24
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	00 24       	eor	r0, r0
    1528:	96 95       	lsr	r25
    152a:	87 95       	ror	r24
    152c:	07 94       	ror	r0
    152e:	96 95       	lsr	r25
    1530:	87 95       	ror	r24
    1532:	07 94       	ror	r0
    1534:	98 2f       	mov	r25, r24
    1536:	80 2d       	mov	r24, r0
    1538:	82 2b       	or	r24, r18
    153a:	8c 93       	st	X, r24

		// Timer_1 OCA Pin
		TCCR1A |= (TIME1_Cfg->OC1B_mode << COM1B0);
    153c:	af e4       	ldi	r26, 0x4F	; 79
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	ef e4       	ldi	r30, 0x4F	; 79
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	28 2f       	mov	r18, r24
    1548:	ea 81       	ldd	r30, Y+2	; 0x02
    154a:	fb 81       	ldd	r31, Y+3	; 0x03
    154c:	83 81       	ldd	r24, Z+3	; 0x03
    154e:	88 2f       	mov	r24, r24
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	82 95       	swap	r24
    1554:	92 95       	swap	r25
    1556:	90 7f       	andi	r25, 0xF0	; 240
    1558:	98 27       	eor	r25, r24
    155a:	80 7f       	andi	r24, 0xF0	; 240
    155c:	98 27       	eor	r25, r24
    155e:	82 2b       	or	r24, r18
    1560:	8c 93       	st	X, r24


		// Timer_1 Interrupts
		TIMSK |= (TIME1_Cfg->OVF_Interrupt) | (TIME1_Cfg->ICU_Interrupt) | (TIME1_Cfg->OCA_Interrupt) | (TIME1_Cfg->OCB_Interrupt);
    1562:	a9 e5       	ldi	r26, 0x59	; 89
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e9 e5       	ldi	r30, 0x59	; 89
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	20 81       	ld	r18, Z
    156c:	ea 81       	ldd	r30, Y+2	; 0x02
    156e:	fb 81       	ldd	r31, Y+3	; 0x03
    1570:	94 81       	ldd	r25, Z+4	; 0x04
    1572:	ea 81       	ldd	r30, Y+2	; 0x02
    1574:	fb 81       	ldd	r31, Y+3	; 0x03
    1576:	85 81       	ldd	r24, Z+5	; 0x05
    1578:	98 2b       	or	r25, r24
    157a:	ea 81       	ldd	r30, Y+2	; 0x02
    157c:	fb 81       	ldd	r31, Y+3	; 0x03
    157e:	86 81       	ldd	r24, Z+6	; 0x06
    1580:	98 2b       	or	r25, r24
    1582:	ea 81       	ldd	r30, Y+2	; 0x02
    1584:	fb 81       	ldd	r31, Y+3	; 0x03
    1586:	87 81       	ldd	r24, Z+7	; 0x07
    1588:	89 2b       	or	r24, r25
    158a:	82 2b       	or	r24, r18
    158c:	8c 93       	st	X, r24



	}

	return RetValue;
    158e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1590:	2a 96       	adiw	r28, 0x0a	; 10
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	de bf       	out	0x3e, r29	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	cd bf       	out	0x3d, r28	; 61
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <TIMER1_Stop>:


ES_t TIMER1_Stop(void)
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
	// No clock source
	CLR_BIT(TCCR1B,CS10);
    15aa:	ae e4       	ldi	r26, 0x4E	; 78
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	ee e4       	ldi	r30, 0x4E	; 78
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	8e 7f       	andi	r24, 0xFE	; 254
    15b6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS11);
    15b8:	ae e4       	ldi	r26, 0x4E	; 78
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	ee e4       	ldi	r30, 0x4E	; 78
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	8d 7f       	andi	r24, 0xFD	; 253
    15c4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS12);
    15c6:	ae e4       	ldi	r26, 0x4E	; 78
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	ee e4       	ldi	r30, 0x4E	; 78
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	8b 7f       	andi	r24, 0xFB	; 251
    15d2:	8c 93       	st	X, r24
	return ES_OK;
    15d4:	80 e0       	ldi	r24, 0x00	; 0
}
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	08 95       	ret

000015dc <__vector_11>:




ISR(TIMER0_OVF_vect)
{
    15dc:	1f 92       	push	r1
    15de:	0f 92       	push	r0
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	0f 92       	push	r0
    15e4:	11 24       	eor	r1, r1
    15e6:	8f 93       	push	r24
    15e8:	9f 93       	push	r25
    15ea:	af 93       	push	r26
    15ec:	bf 93       	push	r27
    15ee:	ef 93       	push	r30
    15f0:	ff 93       	push	r31
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
	if(OVF_Number > 0){
    15fa:	80 91 c5 02 	lds	r24, 0x02C5
    15fe:	90 91 c6 02 	lds	r25, 0x02C6
    1602:	a0 91 c7 02 	lds	r26, 0x02C7
    1606:	b0 91 c8 02 	lds	r27, 0x02C8
    160a:	00 97       	sbiw	r24, 0x00	; 0
    160c:	a1 05       	cpc	r26, r1
    160e:	b1 05       	cpc	r27, r1
    1610:	a1 f0       	breq	.+40     	; 0x163a <__vector_11+0x5e>
//		Lcd_ES_tdisplayNum(OVF_Number);
//		Lcd_ES_tsendString("  ");
		OVF_Number--;
    1612:	80 91 c5 02 	lds	r24, 0x02C5
    1616:	90 91 c6 02 	lds	r25, 0x02C6
    161a:	a0 91 c7 02 	lds	r26, 0x02C7
    161e:	b0 91 c8 02 	lds	r27, 0x02C8
    1622:	01 97       	sbiw	r24, 0x01	; 1
    1624:	a1 09       	sbc	r26, r1
    1626:	b1 09       	sbc	r27, r1
    1628:	80 93 c5 02 	sts	0x02C5, r24
    162c:	90 93 c6 02 	sts	0x02C6, r25
    1630:	a0 93 c7 02 	sts	0x02C7, r26
    1634:	b0 93 c8 02 	sts	0x02C8, r27
    1638:	07 c0       	rjmp	.+14     	; 0x1648 <__vector_11+0x6c>
	}else {
		// If all overflows are done, disable the interrupt
		TIMSK &= ~(1 << TOIE0);
    163a:	a9 e5       	ldi	r26, 0x59	; 89
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e9 e5       	ldi	r30, 0x59	; 89
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	8e 7f       	andi	r24, 0xFE	; 254
    1646:	8c 93       	st	X, r24
	}

}
    1648:	cf 91       	pop	r28
    164a:	df 91       	pop	r29
    164c:	ff 91       	pop	r31
    164e:	ef 91       	pop	r30
    1650:	bf 91       	pop	r27
    1652:	af 91       	pop	r26
    1654:	9f 91       	pop	r25
    1656:	8f 91       	pop	r24
    1658:	0f 90       	pop	r0
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	0f 90       	pop	r0
    165e:	1f 90       	pop	r1
    1660:	18 95       	reti

00001662 <__vector_10>:


ISR(TIMER0_COMP_vect)
{
    1662:	1f 92       	push	r1
    1664:	0f 92       	push	r0
    1666:	0f b6       	in	r0, 0x3f	; 63
    1668:	0f 92       	push	r0
    166a:	11 24       	eor	r1, r1
    166c:	2f 93       	push	r18
    166e:	3f 93       	push	r19
    1670:	4f 93       	push	r20
    1672:	5f 93       	push	r21
    1674:	6f 93       	push	r22
    1676:	7f 93       	push	r23
    1678:	8f 93       	push	r24
    167a:	9f 93       	push	r25
    167c:	af 93       	push	r26
    167e:	bf 93       	push	r27
    1680:	ef 93       	push	r30
    1682:	ff 93       	push	r31
    1684:	df 93       	push	r29
    1686:	cf 93       	push	r28
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_OCM_Fptr != NULLPTR)
    168c:	80 91 c2 02 	lds	r24, 0x02C2
    1690:	90 91 c3 02 	lds	r25, 0x02C3
    1694:	00 97       	sbiw	r24, 0x00	; 0
    1696:	29 f0       	breq	.+10     	; 0x16a2 <__vector_10+0x40>
	{
		Timer0_OCM_Fptr();
    1698:	e0 91 c2 02 	lds	r30, 0x02C2
    169c:	f0 91 c3 02 	lds	r31, 0x02C3
    16a0:	09 95       	icall
	}
}
    16a2:	cf 91       	pop	r28
    16a4:	df 91       	pop	r29
    16a6:	ff 91       	pop	r31
    16a8:	ef 91       	pop	r30
    16aa:	bf 91       	pop	r27
    16ac:	af 91       	pop	r26
    16ae:	9f 91       	pop	r25
    16b0:	8f 91       	pop	r24
    16b2:	7f 91       	pop	r23
    16b4:	6f 91       	pop	r22
    16b6:	5f 91       	pop	r21
    16b8:	4f 91       	pop	r20
    16ba:	3f 91       	pop	r19
    16bc:	2f 91       	pop	r18
    16be:	0f 90       	pop	r0
    16c0:	0f be       	out	0x3f, r0	; 63
    16c2:	0f 90       	pop	r0
    16c4:	1f 90       	pop	r1
    16c6:	18 95       	reti

000016c8 <EXI_Set_CallBack>:
/* void (*LocalPtr)(void) is a local pointer to function */
/* The name of function without () is an address to that function */
/* The function he passes must take void and return void also */
/************************************************************************/

void EXI_Set_CallBack(EX_Interrupt_Source_type interrupt, void (*LocalPtr)(void)){
    16c8:	df 93       	push	r29
    16ca:	cf 93       	push	r28
    16cc:	00 d0       	rcall	.+0      	; 0x16ce <EXI_Set_CallBack+0x6>
    16ce:	00 d0       	rcall	.+0      	; 0x16d0 <EXI_Set_CallBack+0x8>
    16d0:	0f 92       	push	r0
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
    16d6:	89 83       	std	Y+1, r24	; 0x01
    16d8:	7b 83       	std	Y+3, r23	; 0x03
    16da:	6a 83       	std	Y+2, r22	; 0x02
	switch(interrupt){
    16dc:	89 81       	ldd	r24, Y+1	; 0x01
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	3d 83       	std	Y+5, r19	; 0x05
    16e4:	2c 83       	std	Y+4, r18	; 0x04
    16e6:	8c 81       	ldd	r24, Y+4	; 0x04
    16e8:	9d 81       	ldd	r25, Y+5	; 0x05
    16ea:	81 30       	cpi	r24, 0x01	; 1
    16ec:	91 05       	cpc	r25, r1
    16ee:	81 f0       	breq	.+32     	; 0x1710 <EXI_Set_CallBack+0x48>
    16f0:	2c 81       	ldd	r18, Y+4	; 0x04
    16f2:	3d 81       	ldd	r19, Y+5	; 0x05
    16f4:	22 30       	cpi	r18, 0x02	; 2
    16f6:	31 05       	cpc	r19, r1
    16f8:	91 f0       	breq	.+36     	; 0x171e <EXI_Set_CallBack+0x56>
    16fa:	8c 81       	ldd	r24, Y+4	; 0x04
    16fc:	9d 81       	ldd	r25, Y+5	; 0x05
    16fe:	00 97       	sbiw	r24, 0x00	; 0
    1700:	a1 f4       	brne	.+40     	; 0x172a <EXI_Set_CallBack+0x62>
	case EX_INT0:
		INT0_Fptr = LocalPtr;
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	9b 81       	ldd	r25, Y+3	; 0x03
    1706:	90 93 cb 02 	sts	0x02CB, r25
    170a:	80 93 ca 02 	sts	0x02CA, r24
    170e:	0d c0       	rjmp	.+26     	; 0x172a <EXI_Set_CallBack+0x62>
		break;
	case EX_INT1:
		INT1_Fptr = LocalPtr;
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	9b 81       	ldd	r25, Y+3	; 0x03
    1714:	90 93 cd 02 	sts	0x02CD, r25
    1718:	80 93 cc 02 	sts	0x02CC, r24
    171c:	06 c0       	rjmp	.+12     	; 0x172a <EXI_Set_CallBack+0x62>
		break;
	case EX_INT2:
		INT2_Fptr = LocalPtr;
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	9b 81       	ldd	r25, Y+3	; 0x03
    1722:	90 93 cf 02 	sts	0x02CF, r25
    1726:	80 93 ce 02 	sts	0x02CE, r24
		break;
	}
}
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	0f 90       	pop	r0
    1734:	cf 91       	pop	r28
    1736:	df 91       	pop	r29
    1738:	08 95       	ret

0000173a <EXI_ENABLE>:
/************************************************************************/
/*  Enabling and disabling the interrupt                                */
/************************************************************************/


void EXI_ENABLE(EX_Interrupt_Source_type interrupt){
    173a:	df 93       	push	r29
    173c:	cf 93       	push	r28
    173e:	00 d0       	rcall	.+0      	; 0x1740 <EXI_ENABLE+0x6>
    1740:	0f 92       	push	r0
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62
    1746:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt){
    1748:	89 81       	ldd	r24, Y+1	; 0x01
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	3b 83       	std	Y+3, r19	; 0x03
    1750:	2a 83       	std	Y+2, r18	; 0x02
    1752:	8a 81       	ldd	r24, Y+2	; 0x02
    1754:	9b 81       	ldd	r25, Y+3	; 0x03
    1756:	81 30       	cpi	r24, 0x01	; 1
    1758:	91 05       	cpc	r25, r1
    175a:	89 f0       	breq	.+34     	; 0x177e <EXI_ENABLE+0x44>
    175c:	2a 81       	ldd	r18, Y+2	; 0x02
    175e:	3b 81       	ldd	r19, Y+3	; 0x03
    1760:	22 30       	cpi	r18, 0x02	; 2
    1762:	31 05       	cpc	r19, r1
    1764:	a1 f0       	breq	.+40     	; 0x178e <EXI_ENABLE+0x54>
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	9b 81       	ldd	r25, Y+3	; 0x03
    176a:	00 97       	sbiw	r24, 0x00	; 0
    176c:	b9 f4       	brne	.+46     	; 0x179c <EXI_ENABLE+0x62>
	case EX_INT0:
		SET_BIT(GICR,INT0);
    176e:	ab e5       	ldi	r26, 0x5B	; 91
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	eb e5       	ldi	r30, 0x5B	; 91
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	80 64       	ori	r24, 0x40	; 64
    177a:	8c 93       	st	X, r24
    177c:	0f c0       	rjmp	.+30     	; 0x179c <EXI_ENABLE+0x62>
		break;
	case EX_INT1:
		SET_BIT(GICR,INT1);
    177e:	ab e5       	ldi	r26, 0x5B	; 91
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	eb e5       	ldi	r30, 0x5B	; 91
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	80 68       	ori	r24, 0x80	; 128
    178a:	8c 93       	st	X, r24
    178c:	07 c0       	rjmp	.+14     	; 0x179c <EXI_ENABLE+0x62>
		break;
	case EX_INT2:
		SET_BIT(GICR,INT2);
    178e:	ab e5       	ldi	r26, 0x5B	; 91
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	eb e5       	ldi	r30, 0x5B	; 91
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	80 62       	ori	r24, 0x20	; 32
    179a:	8c 93       	st	X, r24
		break;
	}
}
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	cf 91       	pop	r28
    17a4:	df 91       	pop	r29
    17a6:	08 95       	ret

000017a8 <EXI_DISABLE>:


void EXI_DISABLE(EX_Interrupt_Source_type interrupt){
    17a8:	df 93       	push	r29
    17aa:	cf 93       	push	r28
    17ac:	00 d0       	rcall	.+0      	; 0x17ae <EXI_DISABLE+0x6>
    17ae:	0f 92       	push	r0
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt){
    17b6:	89 81       	ldd	r24, Y+1	; 0x01
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	3b 83       	std	Y+3, r19	; 0x03
    17be:	2a 83       	std	Y+2, r18	; 0x02
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	9b 81       	ldd	r25, Y+3	; 0x03
    17c4:	81 30       	cpi	r24, 0x01	; 1
    17c6:	91 05       	cpc	r25, r1
    17c8:	89 f0       	breq	.+34     	; 0x17ec <EXI_DISABLE+0x44>
    17ca:	2a 81       	ldd	r18, Y+2	; 0x02
    17cc:	3b 81       	ldd	r19, Y+3	; 0x03
    17ce:	22 30       	cpi	r18, 0x02	; 2
    17d0:	31 05       	cpc	r19, r1
    17d2:	a1 f0       	breq	.+40     	; 0x17fc <EXI_DISABLE+0x54>
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	9b 81       	ldd	r25, Y+3	; 0x03
    17d8:	00 97       	sbiw	r24, 0x00	; 0
    17da:	b9 f4       	brne	.+46     	; 0x180a <EXI_DISABLE+0x62>
	case EX_INT0:
		CLR_BIT(GICR,INT0);
    17dc:	ab e5       	ldi	r26, 0x5B	; 91
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	eb e5       	ldi	r30, 0x5B	; 91
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	8f 7b       	andi	r24, 0xBF	; 191
    17e8:	8c 93       	st	X, r24
    17ea:	0f c0       	rjmp	.+30     	; 0x180a <EXI_DISABLE+0x62>
		break;
	case EX_INT1:
		CLR_BIT(GICR,INT1);
    17ec:	ab e5       	ldi	r26, 0x5B	; 91
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	eb e5       	ldi	r30, 0x5B	; 91
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	8f 77       	andi	r24, 0x7F	; 127
    17f8:	8c 93       	st	X, r24
    17fa:	07 c0       	rjmp	.+14     	; 0x180a <EXI_DISABLE+0x62>
		break;
	case EX_INT2:
		CLR_BIT(GICR,INT2);
    17fc:	ab e5       	ldi	r26, 0x5B	; 91
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	eb e5       	ldi	r30, 0x5B	; 91
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	8f 7d       	andi	r24, 0xDF	; 223
    1808:	8c 93       	st	X, r24
		break;
	}
}
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	08 95       	ret

00001816 <EXI_TriggerEdge>:

void EXI_TriggerEdge(EX_Interrupt_Source_type interrupt,Trigger_Edge_type edge){
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
    181e:	2a 97       	sbiw	r28, 0x0a	; 10
    1820:	0f b6       	in	r0, 0x3f	; 63
    1822:	f8 94       	cli
    1824:	de bf       	out	0x3e, r29	; 62
    1826:	0f be       	out	0x3f, r0	; 63
    1828:	cd bf       	out	0x3d, r28	; 61
    182a:	89 83       	std	Y+1, r24	; 0x01
    182c:	6a 83       	std	Y+2, r22	; 0x02
	switch(interrupt){
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	3a 87       	std	Y+10, r19	; 0x0a
    1836:	29 87       	std	Y+9, r18	; 0x09
    1838:	89 85       	ldd	r24, Y+9	; 0x09
    183a:	9a 85       	ldd	r25, Y+10	; 0x0a
    183c:	81 30       	cpi	r24, 0x01	; 1
    183e:	91 05       	cpc	r25, r1
    1840:	09 f4       	brne	.+2      	; 0x1844 <EXI_TriggerEdge+0x2e>
    1842:	66 c0       	rjmp	.+204    	; 0x1910 <EXI_TriggerEdge+0xfa>
    1844:	29 85       	ldd	r18, Y+9	; 0x09
    1846:	3a 85       	ldd	r19, Y+10	; 0x0a
    1848:	22 30       	cpi	r18, 0x02	; 2
    184a:	31 05       	cpc	r19, r1
    184c:	09 f4       	brne	.+2      	; 0x1850 <EXI_TriggerEdge+0x3a>
    184e:	bb c0       	rjmp	.+374    	; 0x19c6 <EXI_TriggerEdge+0x1b0>
    1850:	89 85       	ldd	r24, Y+9	; 0x09
    1852:	9a 85       	ldd	r25, Y+10	; 0x0a
    1854:	00 97       	sbiw	r24, 0x00	; 0
    1856:	09 f0       	breq	.+2      	; 0x185a <EXI_TriggerEdge+0x44>
    1858:	dd c0       	rjmp	.+442    	; 0x1a14 <EXI_TriggerEdge+0x1fe>
	case EX_INT0:
		switch(edge){
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	28 2f       	mov	r18, r24
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	38 87       	std	Y+8, r19	; 0x08
    1862:	2f 83       	std	Y+7, r18	; 0x07
    1864:	8f 81       	ldd	r24, Y+7	; 0x07
    1866:	98 85       	ldd	r25, Y+8	; 0x08
    1868:	81 30       	cpi	r24, 0x01	; 1
    186a:	91 05       	cpc	r25, r1
    186c:	21 f1       	breq	.+72     	; 0x18b6 <EXI_TriggerEdge+0xa0>
    186e:	2f 81       	ldd	r18, Y+7	; 0x07
    1870:	38 85       	ldd	r19, Y+8	; 0x08
    1872:	22 30       	cpi	r18, 0x02	; 2
    1874:	31 05       	cpc	r19, r1
    1876:	2c f4       	brge	.+10     	; 0x1882 <EXI_TriggerEdge+0x6c>
    1878:	8f 81       	ldd	r24, Y+7	; 0x07
    187a:	98 85       	ldd	r25, Y+8	; 0x08
    187c:	00 97       	sbiw	r24, 0x00	; 0
    187e:	61 f0       	breq	.+24     	; 0x1898 <EXI_TriggerEdge+0x82>
    1880:	c9 c0       	rjmp	.+402    	; 0x1a14 <EXI_TriggerEdge+0x1fe>
    1882:	2f 81       	ldd	r18, Y+7	; 0x07
    1884:	38 85       	ldd	r19, Y+8	; 0x08
    1886:	22 30       	cpi	r18, 0x02	; 2
    1888:	31 05       	cpc	r19, r1
    188a:	21 f1       	breq	.+72     	; 0x18d4 <EXI_TriggerEdge+0xbe>
    188c:	8f 81       	ldd	r24, Y+7	; 0x07
    188e:	98 85       	ldd	r25, Y+8	; 0x08
    1890:	83 30       	cpi	r24, 0x03	; 3
    1892:	91 05       	cpc	r25, r1
    1894:	71 f1       	breq	.+92     	; 0x18f2 <EXI_TriggerEdge+0xdc>
    1896:	be c0       	rjmp	.+380    	; 0x1a14 <EXI_TriggerEdge+0x1fe>
		case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC00);
    1898:	a5 e5       	ldi	r26, 0x55	; 85
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	e5 e5       	ldi	r30, 0x55	; 85
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	8e 7f       	andi	r24, 0xFE	; 254
    18a4:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
    18a6:	a5 e5       	ldi	r26, 0x55	; 85
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	e5 e5       	ldi	r30, 0x55	; 85
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	8d 7f       	andi	r24, 0xFD	; 253
    18b2:	8c 93       	st	X, r24
    18b4:	af c0       	rjmp	.+350    	; 0x1a14 <EXI_TriggerEdge+0x1fe>
			break;
		case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC00);
    18b6:	a5 e5       	ldi	r26, 0x55	; 85
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e5 e5       	ldi	r30, 0x55	; 85
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	81 60       	ori	r24, 0x01	; 1
    18c2:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
    18c4:	a5 e5       	ldi	r26, 0x55	; 85
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	e5 e5       	ldi	r30, 0x55	; 85
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	8d 7f       	andi	r24, 0xFD	; 253
    18d0:	8c 93       	st	X, r24
    18d2:	a0 c0       	rjmp	.+320    	; 0x1a14 <EXI_TriggerEdge+0x1fe>
			break;
		case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC00);
    18d4:	a5 e5       	ldi	r26, 0x55	; 85
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	e5 e5       	ldi	r30, 0x55	; 85
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	8e 7f       	andi	r24, 0xFE	; 254
    18e0:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    18e2:	a5 e5       	ldi	r26, 0x55	; 85
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e5 e5       	ldi	r30, 0x55	; 85
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	82 60       	ori	r24, 0x02	; 2
    18ee:	8c 93       	st	X, r24
    18f0:	91 c0       	rjmp	.+290    	; 0x1a14 <EXI_TriggerEdge+0x1fe>
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
    18f2:	a5 e5       	ldi	r26, 0x55	; 85
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	e5 e5       	ldi	r30, 0x55	; 85
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	81 60       	ori	r24, 0x01	; 1
    18fe:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    1900:	a5 e5       	ldi	r26, 0x55	; 85
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	e5 e5       	ldi	r30, 0x55	; 85
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	82 60       	ori	r24, 0x02	; 2
    190c:	8c 93       	st	X, r24
    190e:	82 c0       	rjmp	.+260    	; 0x1a14 <EXI_TriggerEdge+0x1fe>
			break;
		}
		break;
		case EX_INT1:
			switch(edge){
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	28 2f       	mov	r18, r24
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	3e 83       	std	Y+6, r19	; 0x06
    1918:	2d 83       	std	Y+5, r18	; 0x05
    191a:	8d 81       	ldd	r24, Y+5	; 0x05
    191c:	9e 81       	ldd	r25, Y+6	; 0x06
    191e:	81 30       	cpi	r24, 0x01	; 1
    1920:	91 05       	cpc	r25, r1
    1922:	21 f1       	breq	.+72     	; 0x196c <EXI_TriggerEdge+0x156>
    1924:	2d 81       	ldd	r18, Y+5	; 0x05
    1926:	3e 81       	ldd	r19, Y+6	; 0x06
    1928:	22 30       	cpi	r18, 0x02	; 2
    192a:	31 05       	cpc	r19, r1
    192c:	2c f4       	brge	.+10     	; 0x1938 <EXI_TriggerEdge+0x122>
    192e:	8d 81       	ldd	r24, Y+5	; 0x05
    1930:	9e 81       	ldd	r25, Y+6	; 0x06
    1932:	00 97       	sbiw	r24, 0x00	; 0
    1934:	61 f0       	breq	.+24     	; 0x194e <EXI_TriggerEdge+0x138>
    1936:	6e c0       	rjmp	.+220    	; 0x1a14 <EXI_TriggerEdge+0x1fe>
    1938:	2d 81       	ldd	r18, Y+5	; 0x05
    193a:	3e 81       	ldd	r19, Y+6	; 0x06
    193c:	22 30       	cpi	r18, 0x02	; 2
    193e:	31 05       	cpc	r19, r1
    1940:	21 f1       	breq	.+72     	; 0x198a <EXI_TriggerEdge+0x174>
    1942:	8d 81       	ldd	r24, Y+5	; 0x05
    1944:	9e 81       	ldd	r25, Y+6	; 0x06
    1946:	83 30       	cpi	r24, 0x03	; 3
    1948:	91 05       	cpc	r25, r1
    194a:	71 f1       	breq	.+92     	; 0x19a8 <EXI_TriggerEdge+0x192>
    194c:	63 c0       	rjmp	.+198    	; 0x1a14 <EXI_TriggerEdge+0x1fe>
			case LOW_LEVEL:
				CLR_BIT(MCUCR,ISC10);
    194e:	a5 e5       	ldi	r26, 0x55	; 85
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	e5 e5       	ldi	r30, 0x55	; 85
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	8b 7f       	andi	r24, 0xFB	; 251
    195a:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC11);
    195c:	a5 e5       	ldi	r26, 0x55	; 85
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e5 e5       	ldi	r30, 0x55	; 85
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	87 7f       	andi	r24, 0xF7	; 247
    1968:	8c 93       	st	X, r24
    196a:	54 c0       	rjmp	.+168    	; 0x1a14 <EXI_TriggerEdge+0x1fe>
				break;
			case ANY_LOGIC_CHANGE:
				SET_BIT(MCUCR,ISC10);
    196c:	a5 e5       	ldi	r26, 0x55	; 85
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e5 e5       	ldi	r30, 0x55	; 85
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	84 60       	ori	r24, 0x04	; 4
    1978:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC11);
    197a:	a5 e5       	ldi	r26, 0x55	; 85
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	e5 e5       	ldi	r30, 0x55	; 85
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	87 7f       	andi	r24, 0xF7	; 247
    1986:	8c 93       	st	X, r24
    1988:	45 c0       	rjmp	.+138    	; 0x1a14 <EXI_TriggerEdge+0x1fe>
				break;
			case FALLING_EDGE:
				CLR_BIT(MCUCR,ISC10);
    198a:	a5 e5       	ldi	r26, 0x55	; 85
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	e5 e5       	ldi	r30, 0x55	; 85
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	8b 7f       	andi	r24, 0xFB	; 251
    1996:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
    1998:	a5 e5       	ldi	r26, 0x55	; 85
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	e5 e5       	ldi	r30, 0x55	; 85
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	88 60       	ori	r24, 0x08	; 8
    19a4:	8c 93       	st	X, r24
    19a6:	36 c0       	rjmp	.+108    	; 0x1a14 <EXI_TriggerEdge+0x1fe>
				break;
			case RISING_EDGE:
				SET_BIT(MCUCR,ISC10);
    19a8:	a5 e5       	ldi	r26, 0x55	; 85
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e5 e5       	ldi	r30, 0x55	; 85
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	84 60       	ori	r24, 0x04	; 4
    19b4:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
    19b6:	a5 e5       	ldi	r26, 0x55	; 85
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e5 e5       	ldi	r30, 0x55	; 85
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	88 60       	ori	r24, 0x08	; 8
    19c2:	8c 93       	st	X, r24
    19c4:	27 c0       	rjmp	.+78     	; 0x1a14 <EXI_TriggerEdge+0x1fe>
				break;
			}
			break;
			case EX_INT2:
				switch(edge){
    19c6:	8a 81       	ldd	r24, Y+2	; 0x02
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	3c 83       	std	Y+4, r19	; 0x04
    19ce:	2b 83       	std	Y+3, r18	; 0x03
    19d0:	8b 81       	ldd	r24, Y+3	; 0x03
    19d2:	9c 81       	ldd	r25, Y+4	; 0x04
    19d4:	82 30       	cpi	r24, 0x02	; 2
    19d6:	91 05       	cpc	r25, r1
    19d8:	31 f0       	breq	.+12     	; 0x19e6 <EXI_TriggerEdge+0x1d0>
    19da:	2b 81       	ldd	r18, Y+3	; 0x03
    19dc:	3c 81       	ldd	r19, Y+4	; 0x04
    19de:	23 30       	cpi	r18, 0x03	; 3
    19e0:	31 05       	cpc	r19, r1
    19e2:	49 f0       	breq	.+18     	; 0x19f6 <EXI_TriggerEdge+0x1e0>
    19e4:	10 c0       	rjmp	.+32     	; 0x1a06 <EXI_TriggerEdge+0x1f0>
				case FALLING_EDGE:
					CLR_BIT(MCUCSR,ISC2);
    19e6:	a4 e5       	ldi	r26, 0x54	; 84
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	e4 e5       	ldi	r30, 0x54	; 84
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	8f 7b       	andi	r24, 0xBF	; 191
    19f2:	8c 93       	st	X, r24
    19f4:	0f c0       	rjmp	.+30     	; 0x1a14 <EXI_TriggerEdge+0x1fe>
					break;
				case RISING_EDGE:
					SET_BIT(MCUCSR,ISC2);
    19f6:	a4 e5       	ldi	r26, 0x54	; 84
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e4 e5       	ldi	r30, 0x54	; 84
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	80 64       	ori	r24, 0x40	; 64
    1a02:	8c 93       	st	X, r24
    1a04:	07 c0       	rjmp	.+14     	; 0x1a14 <EXI_TriggerEdge+0x1fe>
					break;
				default:   // Because we haven't handled all cases just cuz of data sheet
					CLR_BIT(MCUCSR,ISC2);
    1a06:	a4 e5       	ldi	r26, 0x54	; 84
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	e4 e5       	ldi	r30, 0x54	; 84
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	8f 7b       	andi	r24, 0xBF	; 191
    1a12:	8c 93       	st	X, r24
				}
				break;
	}
}
    1a14:	2a 96       	adiw	r28, 0x0a	; 10
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	f8 94       	cli
    1a1a:	de bf       	out	0x3e, r29	; 62
    1a1c:	0f be       	out	0x3f, r0	; 63
    1a1e:	cd bf       	out	0x3d, r28	; 61
    1a20:	cf 91       	pop	r28
    1a22:	df 91       	pop	r29
    1a24:	08 95       	ret

00001a26 <__vector_1>:
/*                     ISR                                              */
/************************************************************************/

/* What if the user forgot to send a function to SetCallBack, We made an initialization with NULLPTR, So we can't call a NULLPTR, it will give undefined behavior  */

ISR(INT0_vect){
    1a26:	1f 92       	push	r1
    1a28:	0f 92       	push	r0
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	0f 92       	push	r0
    1a2e:	11 24       	eor	r1, r1
    1a30:	2f 93       	push	r18
    1a32:	3f 93       	push	r19
    1a34:	4f 93       	push	r20
    1a36:	5f 93       	push	r21
    1a38:	6f 93       	push	r22
    1a3a:	7f 93       	push	r23
    1a3c:	8f 93       	push	r24
    1a3e:	9f 93       	push	r25
    1a40:	af 93       	push	r26
    1a42:	bf 93       	push	r27
    1a44:	ef 93       	push	r30
    1a46:	ff 93       	push	r31
    1a48:	df 93       	push	r29
    1a4a:	cf 93       	push	r28
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
	if(INT0_Fptr != NULLPTR){
    1a50:	80 91 ca 02 	lds	r24, 0x02CA
    1a54:	90 91 cb 02 	lds	r25, 0x02CB
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	29 f0       	breq	.+10     	; 0x1a66 <__vector_1+0x40>
		INT0_Fptr();
    1a5c:	e0 91 ca 02 	lds	r30, 0x02CA
    1a60:	f0 91 cb 02 	lds	r31, 0x02CB
    1a64:	09 95       	icall
	}
}
    1a66:	cf 91       	pop	r28
    1a68:	df 91       	pop	r29
    1a6a:	ff 91       	pop	r31
    1a6c:	ef 91       	pop	r30
    1a6e:	bf 91       	pop	r27
    1a70:	af 91       	pop	r26
    1a72:	9f 91       	pop	r25
    1a74:	8f 91       	pop	r24
    1a76:	7f 91       	pop	r23
    1a78:	6f 91       	pop	r22
    1a7a:	5f 91       	pop	r21
    1a7c:	4f 91       	pop	r20
    1a7e:	3f 91       	pop	r19
    1a80:	2f 91       	pop	r18
    1a82:	0f 90       	pop	r0
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	0f 90       	pop	r0
    1a88:	1f 90       	pop	r1
    1a8a:	18 95       	reti

00001a8c <__vector_2>:

ISR(INT1_vect){
    1a8c:	1f 92       	push	r1
    1a8e:	0f 92       	push	r0
    1a90:	0f b6       	in	r0, 0x3f	; 63
    1a92:	0f 92       	push	r0
    1a94:	11 24       	eor	r1, r1
    1a96:	2f 93       	push	r18
    1a98:	3f 93       	push	r19
    1a9a:	4f 93       	push	r20
    1a9c:	5f 93       	push	r21
    1a9e:	6f 93       	push	r22
    1aa0:	7f 93       	push	r23
    1aa2:	8f 93       	push	r24
    1aa4:	9f 93       	push	r25
    1aa6:	af 93       	push	r26
    1aa8:	bf 93       	push	r27
    1aaa:	ef 93       	push	r30
    1aac:	ff 93       	push	r31
    1aae:	df 93       	push	r29
    1ab0:	cf 93       	push	r28
    1ab2:	cd b7       	in	r28, 0x3d	; 61
    1ab4:	de b7       	in	r29, 0x3e	; 62
	if(INT1_Fptr != NULLPTR){
    1ab6:	80 91 cc 02 	lds	r24, 0x02CC
    1aba:	90 91 cd 02 	lds	r25, 0x02CD
    1abe:	00 97       	sbiw	r24, 0x00	; 0
    1ac0:	29 f0       	breq	.+10     	; 0x1acc <__vector_2+0x40>
		INT1_Fptr();
    1ac2:	e0 91 cc 02 	lds	r30, 0x02CC
    1ac6:	f0 91 cd 02 	lds	r31, 0x02CD
    1aca:	09 95       	icall
	}
}
    1acc:	cf 91       	pop	r28
    1ace:	df 91       	pop	r29
    1ad0:	ff 91       	pop	r31
    1ad2:	ef 91       	pop	r30
    1ad4:	bf 91       	pop	r27
    1ad6:	af 91       	pop	r26
    1ad8:	9f 91       	pop	r25
    1ada:	8f 91       	pop	r24
    1adc:	7f 91       	pop	r23
    1ade:	6f 91       	pop	r22
    1ae0:	5f 91       	pop	r21
    1ae2:	4f 91       	pop	r20
    1ae4:	3f 91       	pop	r19
    1ae6:	2f 91       	pop	r18
    1ae8:	0f 90       	pop	r0
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	0f 90       	pop	r0
    1aee:	1f 90       	pop	r1
    1af0:	18 95       	reti

00001af2 <__vector_3>:

ISR(INT2_vect){
    1af2:	1f 92       	push	r1
    1af4:	0f 92       	push	r0
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	0f 92       	push	r0
    1afa:	11 24       	eor	r1, r1
    1afc:	2f 93       	push	r18
    1afe:	3f 93       	push	r19
    1b00:	4f 93       	push	r20
    1b02:	5f 93       	push	r21
    1b04:	6f 93       	push	r22
    1b06:	7f 93       	push	r23
    1b08:	8f 93       	push	r24
    1b0a:	9f 93       	push	r25
    1b0c:	af 93       	push	r26
    1b0e:	bf 93       	push	r27
    1b10:	ef 93       	push	r30
    1b12:	ff 93       	push	r31
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
	if(INT2_Fptr != NULLPTR){
    1b1c:	80 91 ce 02 	lds	r24, 0x02CE
    1b20:	90 91 cf 02 	lds	r25, 0x02CF
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	29 f0       	breq	.+10     	; 0x1b32 <__vector_3+0x40>
		INT2_Fptr();
    1b28:	e0 91 ce 02 	lds	r30, 0x02CE
    1b2c:	f0 91 cf 02 	lds	r31, 0x02CF
    1b30:	09 95       	icall
	}
}
    1b32:	cf 91       	pop	r28
    1b34:	df 91       	pop	r29
    1b36:	ff 91       	pop	r31
    1b38:	ef 91       	pop	r30
    1b3a:	bf 91       	pop	r27
    1b3c:	af 91       	pop	r26
    1b3e:	9f 91       	pop	r25
    1b40:	8f 91       	pop	r24
    1b42:	7f 91       	pop	r23
    1b44:	6f 91       	pop	r22
    1b46:	5f 91       	pop	r21
    1b48:	4f 91       	pop	r20
    1b4a:	3f 91       	pop	r19
    1b4c:	2f 91       	pop	r18
    1b4e:	0f 90       	pop	r0
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	0f 90       	pop	r0
    1b54:	1f 90       	pop	r1
    1b56:	18 95       	reti

00001b58 <DIO_ES_tSetPinDirection>:
 * DIO_ES_tSetPinDirection is used to set pin direction
 * ( INPUT or OUTPUT )
 */

ES_t DIO_ES_tSetPinDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Dir_Type copy_u8_PinDirection)
{
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	00 d0       	rcall	.+0      	; 0x1b5e <DIO_ES_tSetPinDirection+0x6>
    1b5e:	00 d0       	rcall	.+0      	; 0x1b60 <DIO_ES_tSetPinDirection+0x8>
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
    1b64:	89 83       	std	Y+1, r24	; 0x01
    1b66:	6a 83       	std	Y+2, r22	; 0x02
    1b68:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    1b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6c:	88 30       	cpi	r24, 0x08	; 8
    1b6e:	18 f0       	brcs	.+6      	; 0x1b76 <DIO_ES_tSetPinDirection+0x1e>
		return ES_NOT_OK;
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	8c 83       	std	Y+4, r24	; 0x04
    1b74:	d8 c0       	rjmp	.+432    	; 0x1d26 <DIO_ES_tSetPinDirection+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	88 23       	and	r24, r24
    1b7a:	91 f5       	brne	.+100    	; 0x1be0 <DIO_ES_tSetPinDirection+0x88>
		if(copy_u8_PinDirection == OUTPUT){
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	81 30       	cpi	r24, 0x01	; 1
    1b80:	a1 f4       	brne	.+40     	; 0x1baa <DIO_ES_tSetPinDirection+0x52>
			SET_BIT(DDRA,copy_u8_PinId);
    1b82:	aa e3       	ldi	r26, 0x3A	; 58
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	ea e3       	ldi	r30, 0x3A	; 58
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 81       	ld	r24, Z
    1b8c:	48 2f       	mov	r20, r24
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	28 2f       	mov	r18, r24
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	02 2e       	mov	r0, r18
    1b9a:	02 c0       	rjmp	.+4      	; 0x1ba0 <DIO_ES_tSetPinDirection+0x48>
    1b9c:	88 0f       	add	r24, r24
    1b9e:	99 1f       	adc	r25, r25
    1ba0:	0a 94       	dec	r0
    1ba2:	e2 f7       	brpl	.-8      	; 0x1b9c <DIO_ES_tSetPinDirection+0x44>
    1ba4:	84 2b       	or	r24, r20
    1ba6:	8c 93       	st	X, r24
    1ba8:	bd c0       	rjmp	.+378    	; 0x1d24 <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	88 23       	and	r24, r24
    1bae:	a9 f4       	brne	.+42     	; 0x1bda <DIO_ES_tSetPinDirection+0x82>
			CLR_BIT(DDRA,copy_u8_PinId);
    1bb0:	aa e3       	ldi	r26, 0x3A	; 58
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	ea e3       	ldi	r30, 0x3A	; 58
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	48 2f       	mov	r20, r24
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	02 2e       	mov	r0, r18
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <DIO_ES_tSetPinDirection+0x76>
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	0a 94       	dec	r0
    1bd0:	e2 f7       	brpl	.-8      	; 0x1bca <DIO_ES_tSetPinDirection+0x72>
    1bd2:	80 95       	com	r24
    1bd4:	84 23       	and	r24, r20
    1bd6:	8c 93       	st	X, r24
    1bd8:	a5 c0       	rjmp	.+330    	; 0x1d24 <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	8c 83       	std	Y+4, r24	; 0x04
    1bde:	a3 c0       	rjmp	.+326    	; 0x1d26 <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
    1be2:	81 30       	cpi	r24, 0x01	; 1
    1be4:	91 f5       	brne	.+100    	; 0x1c4a <DIO_ES_tSetPinDirection+0xf2>
		if(copy_u8_PinDirection == OUTPUT){
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	81 30       	cpi	r24, 0x01	; 1
    1bea:	a1 f4       	brne	.+40     	; 0x1c14 <DIO_ES_tSetPinDirection+0xbc>
			SET_BIT(DDRB,copy_u8_PinId);
    1bec:	a7 e3       	ldi	r26, 0x37	; 55
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	e7 e3       	ldi	r30, 0x37	; 55
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	48 2f       	mov	r20, r24
    1bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfa:	28 2f       	mov	r18, r24
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	02 2e       	mov	r0, r18
    1c04:	02 c0       	rjmp	.+4      	; 0x1c0a <DIO_ES_tSetPinDirection+0xb2>
    1c06:	88 0f       	add	r24, r24
    1c08:	99 1f       	adc	r25, r25
    1c0a:	0a 94       	dec	r0
    1c0c:	e2 f7       	brpl	.-8      	; 0x1c06 <DIO_ES_tSetPinDirection+0xae>
    1c0e:	84 2b       	or	r24, r20
    1c10:	8c 93       	st	X, r24
    1c12:	88 c0       	rjmp	.+272    	; 0x1d24 <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	88 23       	and	r24, r24
    1c18:	a9 f4       	brne	.+42     	; 0x1c44 <DIO_ES_tSetPinDirection+0xec>
			CLR_BIT(DDRB,copy_u8_PinId);
    1c1a:	a7 e3       	ldi	r26, 0x37	; 55
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e7 e3       	ldi	r30, 0x37	; 55
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	48 2f       	mov	r20, r24
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	28 2f       	mov	r18, r24
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	02 2e       	mov	r0, r18
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <DIO_ES_tSetPinDirection+0xe0>
    1c34:	88 0f       	add	r24, r24
    1c36:	99 1f       	adc	r25, r25
    1c38:	0a 94       	dec	r0
    1c3a:	e2 f7       	brpl	.-8      	; 0x1c34 <DIO_ES_tSetPinDirection+0xdc>
    1c3c:	80 95       	com	r24
    1c3e:	84 23       	and	r24, r20
    1c40:	8c 93       	st	X, r24
    1c42:	70 c0       	rjmp	.+224    	; 0x1d24 <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	8c 83       	std	Y+4, r24	; 0x04
    1c48:	6e c0       	rjmp	.+220    	; 0x1d26 <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    1c4a:	89 81       	ldd	r24, Y+1	; 0x01
    1c4c:	82 30       	cpi	r24, 0x02	; 2
    1c4e:	91 f5       	brne	.+100    	; 0x1cb4 <DIO_ES_tSetPinDirection+0x15c>
		if(copy_u8_PinDirection == OUTPUT){
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	81 30       	cpi	r24, 0x01	; 1
    1c54:	a1 f4       	brne	.+40     	; 0x1c7e <DIO_ES_tSetPinDirection+0x126>
			SET_BIT(DDRC,copy_u8_PinId);
    1c56:	a4 e3       	ldi	r26, 0x34	; 52
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	e4 e3       	ldi	r30, 0x34	; 52
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	48 2f       	mov	r20, r24
    1c62:	8a 81       	ldd	r24, Y+2	; 0x02
    1c64:	28 2f       	mov	r18, r24
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	02 2e       	mov	r0, r18
    1c6e:	02 c0       	rjmp	.+4      	; 0x1c74 <DIO_ES_tSetPinDirection+0x11c>
    1c70:	88 0f       	add	r24, r24
    1c72:	99 1f       	adc	r25, r25
    1c74:	0a 94       	dec	r0
    1c76:	e2 f7       	brpl	.-8      	; 0x1c70 <DIO_ES_tSetPinDirection+0x118>
    1c78:	84 2b       	or	r24, r20
    1c7a:	8c 93       	st	X, r24
    1c7c:	53 c0       	rjmp	.+166    	; 0x1d24 <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    1c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c80:	88 23       	and	r24, r24
    1c82:	a9 f4       	brne	.+42     	; 0x1cae <DIO_ES_tSetPinDirection+0x156>
			CLR_BIT(DDRC,copy_u8_PinId);
    1c84:	a4 e3       	ldi	r26, 0x34	; 52
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	e4 e3       	ldi	r30, 0x34	; 52
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	48 2f       	mov	r20, r24
    1c90:	8a 81       	ldd	r24, Y+2	; 0x02
    1c92:	28 2f       	mov	r18, r24
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	02 2e       	mov	r0, r18
    1c9c:	02 c0       	rjmp	.+4      	; 0x1ca2 <DIO_ES_tSetPinDirection+0x14a>
    1c9e:	88 0f       	add	r24, r24
    1ca0:	99 1f       	adc	r25, r25
    1ca2:	0a 94       	dec	r0
    1ca4:	e2 f7       	brpl	.-8      	; 0x1c9e <DIO_ES_tSetPinDirection+0x146>
    1ca6:	80 95       	com	r24
    1ca8:	84 23       	and	r24, r20
    1caa:	8c 93       	st	X, r24
    1cac:	3b c0       	rjmp	.+118    	; 0x1d24 <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	8c 83       	std	Y+4, r24	; 0x04
    1cb2:	39 c0       	rjmp	.+114    	; 0x1d26 <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    1cb4:	89 81       	ldd	r24, Y+1	; 0x01
    1cb6:	83 30       	cpi	r24, 0x03	; 3
    1cb8:	91 f5       	brne	.+100    	; 0x1d1e <DIO_ES_tSetPinDirection+0x1c6>
		if(copy_u8_PinDirection == OUTPUT){
    1cba:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbc:	81 30       	cpi	r24, 0x01	; 1
    1cbe:	a1 f4       	brne	.+40     	; 0x1ce8 <DIO_ES_tSetPinDirection+0x190>
			SET_BIT(DDRD,copy_u8_PinId);
    1cc0:	a1 e3       	ldi	r26, 0x31	; 49
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	e1 e3       	ldi	r30, 0x31	; 49
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	48 2f       	mov	r20, r24
    1ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cce:	28 2f       	mov	r18, r24
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	02 2e       	mov	r0, r18
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <DIO_ES_tSetPinDirection+0x186>
    1cda:	88 0f       	add	r24, r24
    1cdc:	99 1f       	adc	r25, r25
    1cde:	0a 94       	dec	r0
    1ce0:	e2 f7       	brpl	.-8      	; 0x1cda <DIO_ES_tSetPinDirection+0x182>
    1ce2:	84 2b       	or	r24, r20
    1ce4:	8c 93       	st	X, r24
    1ce6:	1e c0       	rjmp	.+60     	; 0x1d24 <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	88 23       	and	r24, r24
    1cec:	a9 f4       	brne	.+42     	; 0x1d18 <DIO_ES_tSetPinDirection+0x1c0>
			CLR_BIT(DDRD,copy_u8_PinId);
    1cee:	a1 e3       	ldi	r26, 0x31	; 49
    1cf0:	b0 e0       	ldi	r27, 0x00	; 0
    1cf2:	e1 e3       	ldi	r30, 0x31	; 49
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	48 2f       	mov	r20, r24
    1cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfc:	28 2f       	mov	r18, r24
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	02 2e       	mov	r0, r18
    1d06:	02 c0       	rjmp	.+4      	; 0x1d0c <DIO_ES_tSetPinDirection+0x1b4>
    1d08:	88 0f       	add	r24, r24
    1d0a:	99 1f       	adc	r25, r25
    1d0c:	0a 94       	dec	r0
    1d0e:	e2 f7       	brpl	.-8      	; 0x1d08 <DIO_ES_tSetPinDirection+0x1b0>
    1d10:	80 95       	com	r24
    1d12:	84 23       	and	r24, r20
    1d14:	8c 93       	st	X, r24
    1d16:	06 c0       	rjmp	.+12     	; 0x1d24 <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	8c 83       	std	Y+4, r24	; 0x04
    1d1c:	04 c0       	rjmp	.+8      	; 0x1d26 <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else{
		return ES_NOT_OK;
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	8c 83       	std	Y+4, r24	; 0x04
    1d22:	01 c0       	rjmp	.+2      	; 0x1d26 <DIO_ES_tSetPinDirection+0x1ce>
	}
	return ES_OK;
    1d24:	1c 82       	std	Y+4, r1	; 0x04
    1d26:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	cf 91       	pop	r28
    1d32:	df 91       	pop	r29
    1d34:	08 95       	ret

00001d36 <DIO_ES_tSetPinValue>:
 * DIO_ES_tSetPinValue is used to set pin value
 * ( LOW or HIGH )
 */

ES_t DIO_ES_tSetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type copy_u8_PinValue)
{
    1d36:	df 93       	push	r29
    1d38:	cf 93       	push	r28
    1d3a:	00 d0       	rcall	.+0      	; 0x1d3c <DIO_ES_tSetPinValue+0x6>
    1d3c:	00 d0       	rcall	.+0      	; 0x1d3e <DIO_ES_tSetPinValue+0x8>
    1d3e:	cd b7       	in	r28, 0x3d	; 61
    1d40:	de b7       	in	r29, 0x3e	; 62
    1d42:	89 83       	std	Y+1, r24	; 0x01
    1d44:	6a 83       	std	Y+2, r22	; 0x02
    1d46:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	88 30       	cpi	r24, 0x08	; 8
    1d4c:	18 f0       	brcs	.+6      	; 0x1d54 <DIO_ES_tSetPinValue+0x1e>
		return ES_NOT_OK;
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	8c 83       	std	Y+4, r24	; 0x04
    1d52:	d8 c0       	rjmp	.+432    	; 0x1f04 <DIO_ES_tSetPinValue+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
    1d56:	88 23       	and	r24, r24
    1d58:	91 f5       	brne	.+100    	; 0x1dbe <DIO_ES_tSetPinValue+0x88>
		if(copy_u8_PinValue == HIGH){
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	81 30       	cpi	r24, 0x01	; 1
    1d5e:	a1 f4       	brne	.+40     	; 0x1d88 <DIO_ES_tSetPinValue+0x52>
			SET_BIT(PORTA,copy_u8_PinId);
    1d60:	ab e3       	ldi	r26, 0x3B	; 59
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	eb e3       	ldi	r30, 0x3B	; 59
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	48 2f       	mov	r20, r24
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	28 2f       	mov	r18, r24
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	02 2e       	mov	r0, r18
    1d78:	02 c0       	rjmp	.+4      	; 0x1d7e <DIO_ES_tSetPinValue+0x48>
    1d7a:	88 0f       	add	r24, r24
    1d7c:	99 1f       	adc	r25, r25
    1d7e:	0a 94       	dec	r0
    1d80:	e2 f7       	brpl	.-8      	; 0x1d7a <DIO_ES_tSetPinValue+0x44>
    1d82:	84 2b       	or	r24, r20
    1d84:	8c 93       	st	X, r24
    1d86:	bd c0       	rjmp	.+378    	; 0x1f02 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    1d88:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8a:	88 23       	and	r24, r24
    1d8c:	a9 f4       	brne	.+42     	; 0x1db8 <DIO_ES_tSetPinValue+0x82>
			CLR_BIT(PORTA,copy_u8_PinId);
    1d8e:	ab e3       	ldi	r26, 0x3B	; 59
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	eb e3       	ldi	r30, 0x3B	; 59
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	48 2f       	mov	r20, r24
    1d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	02 2e       	mov	r0, r18
    1da6:	02 c0       	rjmp	.+4      	; 0x1dac <DIO_ES_tSetPinValue+0x76>
    1da8:	88 0f       	add	r24, r24
    1daa:	99 1f       	adc	r25, r25
    1dac:	0a 94       	dec	r0
    1dae:	e2 f7       	brpl	.-8      	; 0x1da8 <DIO_ES_tSetPinValue+0x72>
    1db0:	80 95       	com	r24
    1db2:	84 23       	and	r24, r20
    1db4:	8c 93       	st	X, r24
    1db6:	a5 c0       	rjmp	.+330    	; 0x1f02 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	8c 83       	std	Y+4, r24	; 0x04
    1dbc:	a3 c0       	rjmp	.+326    	; 0x1f04 <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	81 30       	cpi	r24, 0x01	; 1
    1dc2:	91 f5       	brne	.+100    	; 0x1e28 <DIO_ES_tSetPinValue+0xf2>
		if(copy_u8_PinValue == HIGH){
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	81 30       	cpi	r24, 0x01	; 1
    1dc8:	a1 f4       	brne	.+40     	; 0x1df2 <DIO_ES_tSetPinValue+0xbc>
			SET_BIT(PORTB,copy_u8_PinId);
    1dca:	a8 e3       	ldi	r26, 0x38	; 56
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	e8 e3       	ldi	r30, 0x38	; 56
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	48 2f       	mov	r20, r24
    1dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd8:	28 2f       	mov	r18, r24
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	02 2e       	mov	r0, r18
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <DIO_ES_tSetPinValue+0xb2>
    1de4:	88 0f       	add	r24, r24
    1de6:	99 1f       	adc	r25, r25
    1de8:	0a 94       	dec	r0
    1dea:	e2 f7       	brpl	.-8      	; 0x1de4 <DIO_ES_tSetPinValue+0xae>
    1dec:	84 2b       	or	r24, r20
    1dee:	8c 93       	st	X, r24
    1df0:	88 c0       	rjmp	.+272    	; 0x1f02 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    1df2:	8b 81       	ldd	r24, Y+3	; 0x03
    1df4:	88 23       	and	r24, r24
    1df6:	a9 f4       	brne	.+42     	; 0x1e22 <DIO_ES_tSetPinValue+0xec>
			CLR_BIT(PORTB,copy_u8_PinId);
    1df8:	a8 e3       	ldi	r26, 0x38	; 56
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	e8 e3       	ldi	r30, 0x38	; 56
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	48 2f       	mov	r20, r24
    1e04:	8a 81       	ldd	r24, Y+2	; 0x02
    1e06:	28 2f       	mov	r18, r24
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	02 2e       	mov	r0, r18
    1e10:	02 c0       	rjmp	.+4      	; 0x1e16 <DIO_ES_tSetPinValue+0xe0>
    1e12:	88 0f       	add	r24, r24
    1e14:	99 1f       	adc	r25, r25
    1e16:	0a 94       	dec	r0
    1e18:	e2 f7       	brpl	.-8      	; 0x1e12 <DIO_ES_tSetPinValue+0xdc>
    1e1a:	80 95       	com	r24
    1e1c:	84 23       	and	r24, r20
    1e1e:	8c 93       	st	X, r24
    1e20:	70 c0       	rjmp	.+224    	; 0x1f02 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	8c 83       	std	Y+4, r24	; 0x04
    1e26:	6e c0       	rjmp	.+220    	; 0x1f04 <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	82 30       	cpi	r24, 0x02	; 2
    1e2c:	91 f5       	brne	.+100    	; 0x1e92 <DIO_ES_tSetPinValue+0x15c>
		if(copy_u8_PinValue == HIGH){
    1e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e30:	81 30       	cpi	r24, 0x01	; 1
    1e32:	a1 f4       	brne	.+40     	; 0x1e5c <DIO_ES_tSetPinValue+0x126>
			SET_BIT(PORTC,copy_u8_PinId);
    1e34:	a5 e3       	ldi	r26, 0x35	; 53
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	e5 e3       	ldi	r30, 0x35	; 53
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	48 2f       	mov	r20, r24
    1e40:	8a 81       	ldd	r24, Y+2	; 0x02
    1e42:	28 2f       	mov	r18, r24
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	02 2e       	mov	r0, r18
    1e4c:	02 c0       	rjmp	.+4      	; 0x1e52 <DIO_ES_tSetPinValue+0x11c>
    1e4e:	88 0f       	add	r24, r24
    1e50:	99 1f       	adc	r25, r25
    1e52:	0a 94       	dec	r0
    1e54:	e2 f7       	brpl	.-8      	; 0x1e4e <DIO_ES_tSetPinValue+0x118>
    1e56:	84 2b       	or	r24, r20
    1e58:	8c 93       	st	X, r24
    1e5a:	53 c0       	rjmp	.+166    	; 0x1f02 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    1e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5e:	88 23       	and	r24, r24
    1e60:	a9 f4       	brne	.+42     	; 0x1e8c <DIO_ES_tSetPinValue+0x156>
			CLR_BIT(PORTC,copy_u8_PinId);
    1e62:	a5 e3       	ldi	r26, 0x35	; 53
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	e5 e3       	ldi	r30, 0x35	; 53
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	48 2f       	mov	r20, r24
    1e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e70:	28 2f       	mov	r18, r24
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	02 2e       	mov	r0, r18
    1e7a:	02 c0       	rjmp	.+4      	; 0x1e80 <DIO_ES_tSetPinValue+0x14a>
    1e7c:	88 0f       	add	r24, r24
    1e7e:	99 1f       	adc	r25, r25
    1e80:	0a 94       	dec	r0
    1e82:	e2 f7       	brpl	.-8      	; 0x1e7c <DIO_ES_tSetPinValue+0x146>
    1e84:	80 95       	com	r24
    1e86:	84 23       	and	r24, r20
    1e88:	8c 93       	st	X, r24
    1e8a:	3b c0       	rjmp	.+118    	; 0x1f02 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	8c 83       	std	Y+4, r24	; 0x04
    1e90:	39 c0       	rjmp	.+114    	; 0x1f04 <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	83 30       	cpi	r24, 0x03	; 3
    1e96:	91 f5       	brne	.+100    	; 0x1efc <DIO_ES_tSetPinValue+0x1c6>
		if(copy_u8_PinValue == HIGH){
    1e98:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9a:	81 30       	cpi	r24, 0x01	; 1
    1e9c:	a1 f4       	brne	.+40     	; 0x1ec6 <DIO_ES_tSetPinValue+0x190>
			SET_BIT(PORTD,copy_u8_PinId);
    1e9e:	a2 e3       	ldi	r26, 0x32	; 50
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	e2 e3       	ldi	r30, 0x32	; 50
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	48 2f       	mov	r20, r24
    1eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1eac:	28 2f       	mov	r18, r24
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	02 2e       	mov	r0, r18
    1eb6:	02 c0       	rjmp	.+4      	; 0x1ebc <DIO_ES_tSetPinValue+0x186>
    1eb8:	88 0f       	add	r24, r24
    1eba:	99 1f       	adc	r25, r25
    1ebc:	0a 94       	dec	r0
    1ebe:	e2 f7       	brpl	.-8      	; 0x1eb8 <DIO_ES_tSetPinValue+0x182>
    1ec0:	84 2b       	or	r24, r20
    1ec2:	8c 93       	st	X, r24
    1ec4:	1e c0       	rjmp	.+60     	; 0x1f02 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    1ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec8:	88 23       	and	r24, r24
    1eca:	a9 f4       	brne	.+42     	; 0x1ef6 <DIO_ES_tSetPinValue+0x1c0>
			CLR_BIT(PORTD,copy_u8_PinId);
    1ecc:	a2 e3       	ldi	r26, 0x32	; 50
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	e2 e3       	ldi	r30, 0x32	; 50
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	48 2f       	mov	r20, r24
    1ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eda:	28 2f       	mov	r18, r24
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	02 2e       	mov	r0, r18
    1ee4:	02 c0       	rjmp	.+4      	; 0x1eea <DIO_ES_tSetPinValue+0x1b4>
    1ee6:	88 0f       	add	r24, r24
    1ee8:	99 1f       	adc	r25, r25
    1eea:	0a 94       	dec	r0
    1eec:	e2 f7       	brpl	.-8      	; 0x1ee6 <DIO_ES_tSetPinValue+0x1b0>
    1eee:	80 95       	com	r24
    1ef0:	84 23       	and	r24, r20
    1ef2:	8c 93       	st	X, r24
    1ef4:	06 c0       	rjmp	.+12     	; 0x1f02 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	8c 83       	std	Y+4, r24	; 0x04
    1efa:	04 c0       	rjmp	.+8      	; 0x1f04 <DIO_ES_tSetPinValue+0x1ce>
		}
	}else{
		return ES_NOT_OK;
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	8c 83       	std	Y+4, r24	; 0x04
    1f00:	01 c0       	rjmp	.+2      	; 0x1f04 <DIO_ES_tSetPinValue+0x1ce>
	}
	return ES_OK;
    1f02:	1c 82       	std	Y+4, r1	; 0x04
    1f04:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	08 95       	ret

00001f14 <DIO_ES_tGetPinValue>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tGetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type* copy_pu8_PinValue)
{
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	00 d0       	rcall	.+0      	; 0x1f1a <DIO_ES_tGetPinValue+0x6>
    1f1a:	00 d0       	rcall	.+0      	; 0x1f1c <DIO_ES_tGetPinValue+0x8>
    1f1c:	0f 92       	push	r0
    1f1e:	cd b7       	in	r28, 0x3d	; 61
    1f20:	de b7       	in	r29, 0x3e	; 62
    1f22:	89 83       	std	Y+1, r24	; 0x01
    1f24:	6a 83       	std	Y+2, r22	; 0x02
    1f26:	5c 83       	std	Y+4, r21	; 0x04
    1f28:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    1f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2c:	88 30       	cpi	r24, 0x08	; 8
    1f2e:	18 f0       	brcs	.+6      	; 0x1f36 <DIO_ES_tGetPinValue+0x22>
		return ES_NOT_OK;
    1f30:	41 e0       	ldi	r20, 0x01	; 1
    1f32:	4d 83       	std	Y+5, r20	; 0x05
    1f34:	60 c0       	rjmp	.+192    	; 0x1ff6 <DIO_ES_tGetPinValue+0xe2>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
    1f38:	88 23       	and	r24, r24
    1f3a:	a1 f4       	brne	.+40     	; 0x1f64 <DIO_ES_tGetPinValue+0x50>
		*copy_pu8_PinValue = GET_BIT(PINA,copy_u8_PinId);
    1f3c:	e9 e3       	ldi	r30, 0x39	; 57
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	28 2f       	mov	r18, r24
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	8a 81       	ldd	r24, Y+2	; 0x02
    1f48:	88 2f       	mov	r24, r24
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	a9 01       	movw	r20, r18
    1f4e:	02 c0       	rjmp	.+4      	; 0x1f54 <DIO_ES_tGetPinValue+0x40>
    1f50:	55 95       	asr	r21
    1f52:	47 95       	ror	r20
    1f54:	8a 95       	dec	r24
    1f56:	e2 f7       	brpl	.-8      	; 0x1f50 <DIO_ES_tGetPinValue+0x3c>
    1f58:	ca 01       	movw	r24, r20
    1f5a:	81 70       	andi	r24, 0x01	; 1
    1f5c:	eb 81       	ldd	r30, Y+3	; 0x03
    1f5e:	fc 81       	ldd	r31, Y+4	; 0x04
    1f60:	80 83       	st	Z, r24
    1f62:	48 c0       	rjmp	.+144    	; 0x1ff4 <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	81 30       	cpi	r24, 0x01	; 1
    1f68:	a1 f4       	brne	.+40     	; 0x1f92 <DIO_ES_tGetPinValue+0x7e>
		*copy_pu8_PinValue = GET_BIT(PINB,copy_u8_PinId);
    1f6a:	e6 e3       	ldi	r30, 0x36	; 54
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	28 2f       	mov	r18, r24
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	8a 81       	ldd	r24, Y+2	; 0x02
    1f76:	88 2f       	mov	r24, r24
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	a9 01       	movw	r20, r18
    1f7c:	02 c0       	rjmp	.+4      	; 0x1f82 <DIO_ES_tGetPinValue+0x6e>
    1f7e:	55 95       	asr	r21
    1f80:	47 95       	ror	r20
    1f82:	8a 95       	dec	r24
    1f84:	e2 f7       	brpl	.-8      	; 0x1f7e <DIO_ES_tGetPinValue+0x6a>
    1f86:	ca 01       	movw	r24, r20
    1f88:	81 70       	andi	r24, 0x01	; 1
    1f8a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f8c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f8e:	80 83       	st	Z, r24
    1f90:	31 c0       	rjmp	.+98     	; 0x1ff4 <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    1f92:	89 81       	ldd	r24, Y+1	; 0x01
    1f94:	82 30       	cpi	r24, 0x02	; 2
    1f96:	a1 f4       	brne	.+40     	; 0x1fc0 <DIO_ES_tGetPinValue+0xac>
		*copy_pu8_PinValue = GET_BIT(PINC,copy_u8_PinId);
    1f98:	e3 e3       	ldi	r30, 0x33	; 51
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	28 2f       	mov	r18, r24
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa4:	88 2f       	mov	r24, r24
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	a9 01       	movw	r20, r18
    1faa:	02 c0       	rjmp	.+4      	; 0x1fb0 <DIO_ES_tGetPinValue+0x9c>
    1fac:	55 95       	asr	r21
    1fae:	47 95       	ror	r20
    1fb0:	8a 95       	dec	r24
    1fb2:	e2 f7       	brpl	.-8      	; 0x1fac <DIO_ES_tGetPinValue+0x98>
    1fb4:	ca 01       	movw	r24, r20
    1fb6:	81 70       	andi	r24, 0x01	; 1
    1fb8:	eb 81       	ldd	r30, Y+3	; 0x03
    1fba:	fc 81       	ldd	r31, Y+4	; 0x04
    1fbc:	80 83       	st	Z, r24
    1fbe:	1a c0       	rjmp	.+52     	; 0x1ff4 <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	83 30       	cpi	r24, 0x03	; 3
    1fc4:	a1 f4       	brne	.+40     	; 0x1fee <DIO_ES_tGetPinValue+0xda>
		*copy_pu8_PinValue = GET_BIT(PIND,copy_u8_PinId);
    1fc6:	e0 e3       	ldi	r30, 0x30	; 48
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	28 2f       	mov	r18, r24
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd2:	88 2f       	mov	r24, r24
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	a9 01       	movw	r20, r18
    1fd8:	02 c0       	rjmp	.+4      	; 0x1fde <DIO_ES_tGetPinValue+0xca>
    1fda:	55 95       	asr	r21
    1fdc:	47 95       	ror	r20
    1fde:	8a 95       	dec	r24
    1fe0:	e2 f7       	brpl	.-8      	; 0x1fda <DIO_ES_tGetPinValue+0xc6>
    1fe2:	ca 01       	movw	r24, r20
    1fe4:	81 70       	andi	r24, 0x01	; 1
    1fe6:	eb 81       	ldd	r30, Y+3	; 0x03
    1fe8:	fc 81       	ldd	r31, Y+4	; 0x04
    1fea:	80 83       	st	Z, r24
    1fec:	03 c0       	rjmp	.+6      	; 0x1ff4 <DIO_ES_tGetPinValue+0xe0>
	}else{
		return ES_NOT_OK;
    1fee:	51 e0       	ldi	r21, 0x01	; 1
    1ff0:	5d 83       	std	Y+5, r21	; 0x05
    1ff2:	01 c0       	rjmp	.+2      	; 0x1ff6 <DIO_ES_tGetPinValue+0xe2>
	}
	return ES_OK;
    1ff4:	1d 82       	std	Y+5, r1	; 0x05
    1ff6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1ff8:	0f 90       	pop	r0
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	cf 91       	pop	r28
    2004:	df 91       	pop	r29
    2006:	08 95       	ret

00002008 <DIO_ES_tSetPortDirection>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tSetPortDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Dir_Type copy_u8_PortDirection)
{
    2008:	df 93       	push	r29
    200a:	cf 93       	push	r28
    200c:	00 d0       	rcall	.+0      	; 0x200e <DIO_ES_tSetPortDirection+0x6>
    200e:	00 d0       	rcall	.+0      	; 0x2010 <DIO_ES_tSetPortDirection+0x8>
    2010:	0f 92       	push	r0
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
    2016:	89 83       	std	Y+1, r24	; 0x01
    2018:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortDirection != OUTPUT) && (copy_u8_PortDirection != OUTPUT)){
    201a:	8a 81       	ldd	r24, Y+2	; 0x02
    201c:	81 30       	cpi	r24, 0x01	; 1
    201e:	31 f0       	breq	.+12     	; 0x202c <DIO_ES_tSetPortDirection+0x24>
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	81 30       	cpi	r24, 0x01	; 1
    2024:	19 f0       	breq	.+6      	; 0x202c <DIO_ES_tSetPortDirection+0x24>
		return ES_NOT_OK;
    2026:	21 e0       	ldi	r18, 0x01	; 1
    2028:	2d 83       	std	Y+5, r18	; 0x05
    202a:	53 c0       	rjmp	.+166    	; 0x20d2 <DIO_ES_tSetPortDirection+0xca>
	}
	switch(copy_u8_PortId){
    202c:	89 81       	ldd	r24, Y+1	; 0x01
    202e:	28 2f       	mov	r18, r24
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	3c 83       	std	Y+4, r19	; 0x04
    2034:	2b 83       	std	Y+3, r18	; 0x03
    2036:	8b 81       	ldd	r24, Y+3	; 0x03
    2038:	9c 81       	ldd	r25, Y+4	; 0x04
    203a:	81 30       	cpi	r24, 0x01	; 1
    203c:	91 05       	cpc	r25, r1
    203e:	09 f1       	breq	.+66     	; 0x2082 <DIO_ES_tSetPortDirection+0x7a>
    2040:	2b 81       	ldd	r18, Y+3	; 0x03
    2042:	3c 81       	ldd	r19, Y+4	; 0x04
    2044:	22 30       	cpi	r18, 0x02	; 2
    2046:	31 05       	cpc	r19, r1
    2048:	2c f4       	brge	.+10     	; 0x2054 <DIO_ES_tSetPortDirection+0x4c>
    204a:	8b 81       	ldd	r24, Y+3	; 0x03
    204c:	9c 81       	ldd	r25, Y+4	; 0x04
    204e:	00 97       	sbiw	r24, 0x00	; 0
    2050:	61 f0       	breq	.+24     	; 0x206a <DIO_ES_tSetPortDirection+0x62>
    2052:	3b c0       	rjmp	.+118    	; 0x20ca <DIO_ES_tSetPortDirection+0xc2>
    2054:	2b 81       	ldd	r18, Y+3	; 0x03
    2056:	3c 81       	ldd	r19, Y+4	; 0x04
    2058:	22 30       	cpi	r18, 0x02	; 2
    205a:	31 05       	cpc	r19, r1
    205c:	f1 f0       	breq	.+60     	; 0x209a <DIO_ES_tSetPortDirection+0x92>
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	9c 81       	ldd	r25, Y+4	; 0x04
    2062:	83 30       	cpi	r24, 0x03	; 3
    2064:	91 05       	cpc	r25, r1
    2066:	29 f1       	breq	.+74     	; 0x20b2 <DIO_ES_tSetPortDirection+0xaa>
    2068:	30 c0       	rjmp	.+96     	; 0x20ca <DIO_ES_tSetPortDirection+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortDirection == OUTPUT)
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	81 30       	cpi	r24, 0x01	; 1
    206e:	29 f4       	brne	.+10     	; 0x207a <DIO_ES_tSetPortDirection+0x72>
			DDRA = 0xff;
    2070:	ea e3       	ldi	r30, 0x3A	; 58
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	8f ef       	ldi	r24, 0xFF	; 255
    2076:	80 83       	st	Z, r24
    2078:	2b c0       	rjmp	.+86     	; 0x20d0 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRA = 0x00;
    207a:	ea e3       	ldi	r30, 0x3A	; 58
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	10 82       	st	Z, r1
    2080:	27 c0       	rjmp	.+78     	; 0x20d0 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortDirection == OUTPUT)
    2082:	8a 81       	ldd	r24, Y+2	; 0x02
    2084:	81 30       	cpi	r24, 0x01	; 1
    2086:	29 f4       	brne	.+10     	; 0x2092 <DIO_ES_tSetPortDirection+0x8a>
			DDRB = 0xff;
    2088:	e7 e3       	ldi	r30, 0x37	; 55
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	8f ef       	ldi	r24, 0xFF	; 255
    208e:	80 83       	st	Z, r24
    2090:	1f c0       	rjmp	.+62     	; 0x20d0 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRB = 0x00;
    2092:	e7 e3       	ldi	r30, 0x37	; 55
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	10 82       	st	Z, r1
    2098:	1b c0       	rjmp	.+54     	; 0x20d0 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortDirection == OUTPUT)
    209a:	8a 81       	ldd	r24, Y+2	; 0x02
    209c:	81 30       	cpi	r24, 0x01	; 1
    209e:	29 f4       	brne	.+10     	; 0x20aa <DIO_ES_tSetPortDirection+0xa2>
			DDRC = 0xff;
    20a0:	e4 e3       	ldi	r30, 0x34	; 52
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	8f ef       	ldi	r24, 0xFF	; 255
    20a6:	80 83       	st	Z, r24
    20a8:	13 c0       	rjmp	.+38     	; 0x20d0 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRC = 0x00;
    20aa:	e4 e3       	ldi	r30, 0x34	; 52
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	10 82       	st	Z, r1
    20b0:	0f c0       	rjmp	.+30     	; 0x20d0 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortDirection == OUTPUT)
    20b2:	8a 81       	ldd	r24, Y+2	; 0x02
    20b4:	81 30       	cpi	r24, 0x01	; 1
    20b6:	29 f4       	brne	.+10     	; 0x20c2 <DIO_ES_tSetPortDirection+0xba>
			DDRD = 0xff;
    20b8:	e1 e3       	ldi	r30, 0x31	; 49
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	8f ef       	ldi	r24, 0xFF	; 255
    20be:	80 83       	st	Z, r24
    20c0:	07 c0       	rjmp	.+14     	; 0x20d0 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRD = 0x00;
    20c2:	e1 e3       	ldi	r30, 0x31	; 49
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	10 82       	st	Z, r1
    20c8:	03 c0       	rjmp	.+6      	; 0x20d0 <DIO_ES_tSetPortDirection+0xc8>
		break;
	default:
		return ES_NOT_OK;
    20ca:	91 e0       	ldi	r25, 0x01	; 1
    20cc:	9d 83       	std	Y+5, r25	; 0x05
    20ce:	01 c0       	rjmp	.+2      	; 0x20d2 <DIO_ES_tSetPortDirection+0xca>
		break;
	}
	return ES_OK;
    20d0:	1d 82       	std	Y+5, r1	; 0x05
    20d2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	cf 91       	pop	r28
    20e0:	df 91       	pop	r29
    20e2:	08 95       	ret

000020e4 <DIO_ES_tSetPortValue>:



ES_t DIO_ES_tSetPortValue(DIO_U8_Port_Type copy_u8_PortId, u8 copy_u8_PortValue)
{
    20e4:	df 93       	push	r29
    20e6:	cf 93       	push	r28
    20e8:	00 d0       	rcall	.+0      	; 0x20ea <DIO_ES_tSetPortValue+0x6>
    20ea:	00 d0       	rcall	.+0      	; 0x20ec <DIO_ES_tSetPortValue+0x8>
    20ec:	0f 92       	push	r0
    20ee:	cd b7       	in	r28, 0x3d	; 61
    20f0:	de b7       	in	r29, 0x3e	; 62
    20f2:	89 83       	std	Y+1, r24	; 0x01
    20f4:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortValue != HIGH) && (copy_u8_PortValue != LOW)){
    20f6:	8a 81       	ldd	r24, Y+2	; 0x02
    20f8:	81 30       	cpi	r24, 0x01	; 1
    20fa:	31 f0       	breq	.+12     	; 0x2108 <DIO_ES_tSetPortValue+0x24>
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	88 23       	and	r24, r24
    2100:	19 f0       	breq	.+6      	; 0x2108 <DIO_ES_tSetPortValue+0x24>
		return ES_NOT_OK;
    2102:	21 e0       	ldi	r18, 0x01	; 1
    2104:	2d 83       	std	Y+5, r18	; 0x05
    2106:	53 c0       	rjmp	.+166    	; 0x21ae <DIO_ES_tSetPortValue+0xca>
	}
	switch(copy_u8_PortId){
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	28 2f       	mov	r18, r24
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	3c 83       	std	Y+4, r19	; 0x04
    2110:	2b 83       	std	Y+3, r18	; 0x03
    2112:	8b 81       	ldd	r24, Y+3	; 0x03
    2114:	9c 81       	ldd	r25, Y+4	; 0x04
    2116:	81 30       	cpi	r24, 0x01	; 1
    2118:	91 05       	cpc	r25, r1
    211a:	09 f1       	breq	.+66     	; 0x215e <DIO_ES_tSetPortValue+0x7a>
    211c:	2b 81       	ldd	r18, Y+3	; 0x03
    211e:	3c 81       	ldd	r19, Y+4	; 0x04
    2120:	22 30       	cpi	r18, 0x02	; 2
    2122:	31 05       	cpc	r19, r1
    2124:	2c f4       	brge	.+10     	; 0x2130 <DIO_ES_tSetPortValue+0x4c>
    2126:	8b 81       	ldd	r24, Y+3	; 0x03
    2128:	9c 81       	ldd	r25, Y+4	; 0x04
    212a:	00 97       	sbiw	r24, 0x00	; 0
    212c:	61 f0       	breq	.+24     	; 0x2146 <DIO_ES_tSetPortValue+0x62>
    212e:	3b c0       	rjmp	.+118    	; 0x21a6 <DIO_ES_tSetPortValue+0xc2>
    2130:	2b 81       	ldd	r18, Y+3	; 0x03
    2132:	3c 81       	ldd	r19, Y+4	; 0x04
    2134:	22 30       	cpi	r18, 0x02	; 2
    2136:	31 05       	cpc	r19, r1
    2138:	f1 f0       	breq	.+60     	; 0x2176 <DIO_ES_tSetPortValue+0x92>
    213a:	8b 81       	ldd	r24, Y+3	; 0x03
    213c:	9c 81       	ldd	r25, Y+4	; 0x04
    213e:	83 30       	cpi	r24, 0x03	; 3
    2140:	91 05       	cpc	r25, r1
    2142:	29 f1       	breq	.+74     	; 0x218e <DIO_ES_tSetPortValue+0xaa>
    2144:	30 c0       	rjmp	.+96     	; 0x21a6 <DIO_ES_tSetPortValue+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortValue == HIGH)
    2146:	8a 81       	ldd	r24, Y+2	; 0x02
    2148:	81 30       	cpi	r24, 0x01	; 1
    214a:	29 f4       	brne	.+10     	; 0x2156 <DIO_ES_tSetPortValue+0x72>
			PORTA = 0xff;
    214c:	eb e3       	ldi	r30, 0x3B	; 59
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	8f ef       	ldi	r24, 0xFF	; 255
    2152:	80 83       	st	Z, r24
    2154:	2b c0       	rjmp	.+86     	; 0x21ac <DIO_ES_tSetPortValue+0xc8>
		else
			PORTA = 0x00;
    2156:	eb e3       	ldi	r30, 0x3B	; 59
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	10 82       	st	Z, r1
    215c:	27 c0       	rjmp	.+78     	; 0x21ac <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortValue == HIGH)
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	81 30       	cpi	r24, 0x01	; 1
    2162:	29 f4       	brne	.+10     	; 0x216e <DIO_ES_tSetPortValue+0x8a>
			PORTB = 0xff;
    2164:	e8 e3       	ldi	r30, 0x38	; 56
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	8f ef       	ldi	r24, 0xFF	; 255
    216a:	80 83       	st	Z, r24
    216c:	1f c0       	rjmp	.+62     	; 0x21ac <DIO_ES_tSetPortValue+0xc8>
		else
			PORTB = 0x00;
    216e:	e8 e3       	ldi	r30, 0x38	; 56
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	10 82       	st	Z, r1
    2174:	1b c0       	rjmp	.+54     	; 0x21ac <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortValue == HIGH)
    2176:	8a 81       	ldd	r24, Y+2	; 0x02
    2178:	81 30       	cpi	r24, 0x01	; 1
    217a:	29 f4       	brne	.+10     	; 0x2186 <DIO_ES_tSetPortValue+0xa2>
			PORTC = 0xff;
    217c:	e5 e3       	ldi	r30, 0x35	; 53
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	8f ef       	ldi	r24, 0xFF	; 255
    2182:	80 83       	st	Z, r24
    2184:	13 c0       	rjmp	.+38     	; 0x21ac <DIO_ES_tSetPortValue+0xc8>
		else
			PORTC = 0x00;
    2186:	e5 e3       	ldi	r30, 0x35	; 53
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	10 82       	st	Z, r1
    218c:	0f c0       	rjmp	.+30     	; 0x21ac <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortValue == HIGH)
    218e:	8a 81       	ldd	r24, Y+2	; 0x02
    2190:	81 30       	cpi	r24, 0x01	; 1
    2192:	29 f4       	brne	.+10     	; 0x219e <DIO_ES_tSetPortValue+0xba>
			PORTD = 0xff;
    2194:	e2 e3       	ldi	r30, 0x32	; 50
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	8f ef       	ldi	r24, 0xFF	; 255
    219a:	80 83       	st	Z, r24
    219c:	07 c0       	rjmp	.+14     	; 0x21ac <DIO_ES_tSetPortValue+0xc8>
		else
			PORTD = 0x00;
    219e:	e2 e3       	ldi	r30, 0x32	; 50
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	10 82       	st	Z, r1
    21a4:	03 c0       	rjmp	.+6      	; 0x21ac <DIO_ES_tSetPortValue+0xc8>
		break;
	default:
		return ES_NOT_OK;
    21a6:	91 e0       	ldi	r25, 0x01	; 1
    21a8:	9d 83       	std	Y+5, r25	; 0x05
    21aa:	01 c0       	rjmp	.+2      	; 0x21ae <DIO_ES_tSetPortValue+0xca>
		break;
	}
	return ES_OK;
    21ac:	1d 82       	std	Y+5, r1	; 0x05
    21ae:	8d 81       	ldd	r24, Y+5	; 0x05
}
    21b0:	0f 90       	pop	r0
    21b2:	0f 90       	pop	r0
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	0f 90       	pop	r0
    21ba:	cf 91       	pop	r28
    21bc:	df 91       	pop	r29
    21be:	08 95       	ret

000021c0 <DIO_ES_tTOGPin>:
/*
 * DIO_ES_tTOGPin is used to Toggle a specific pin
 */

ES_t DIO_ES_tTOGPin(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId)
{
    21c0:	df 93       	push	r29
    21c2:	cf 93       	push	r28
    21c4:	00 d0       	rcall	.+0      	; 0x21c6 <DIO_ES_tTOGPin+0x6>
    21c6:	0f 92       	push	r0
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
    21cc:	89 83       	std	Y+1, r24	; 0x01
    21ce:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8_PinId > PIN_LIMIT){
    21d0:	8a 81       	ldd	r24, Y+2	; 0x02
    21d2:	88 30       	cpi	r24, 0x08	; 8
    21d4:	18 f0       	brcs	.+6      	; 0x21dc <DIO_ES_tTOGPin+0x1c>
		return ES_NOT_OK;
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	8b 83       	std	Y+3, r24	; 0x03
    21da:	60 c0       	rjmp	.+192    	; 0x229c <DIO_ES_tTOGPin+0xdc>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    21dc:	89 81       	ldd	r24, Y+1	; 0x01
    21de:	88 23       	and	r24, r24
    21e0:	a1 f4       	brne	.+40     	; 0x220a <DIO_ES_tTOGPin+0x4a>
		TOG_BIT(PORTA,copy_u8_PinId);
    21e2:	ab e3       	ldi	r26, 0x3B	; 59
    21e4:	b0 e0       	ldi	r27, 0x00	; 0
    21e6:	eb e3       	ldi	r30, 0x3B	; 59
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	80 81       	ld	r24, Z
    21ec:	48 2f       	mov	r20, r24
    21ee:	8a 81       	ldd	r24, Y+2	; 0x02
    21f0:	28 2f       	mov	r18, r24
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	02 2e       	mov	r0, r18
    21fa:	02 c0       	rjmp	.+4      	; 0x2200 <DIO_ES_tTOGPin+0x40>
    21fc:	88 0f       	add	r24, r24
    21fe:	99 1f       	adc	r25, r25
    2200:	0a 94       	dec	r0
    2202:	e2 f7       	brpl	.-8      	; 0x21fc <DIO_ES_tTOGPin+0x3c>
    2204:	84 27       	eor	r24, r20
    2206:	8c 93       	st	X, r24
    2208:	48 c0       	rjmp	.+144    	; 0x229a <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    220a:	89 81       	ldd	r24, Y+1	; 0x01
    220c:	81 30       	cpi	r24, 0x01	; 1
    220e:	a1 f4       	brne	.+40     	; 0x2238 <DIO_ES_tTOGPin+0x78>
		TOG_BIT(PORTB,copy_u8_PinId);
    2210:	a8 e3       	ldi	r26, 0x38	; 56
    2212:	b0 e0       	ldi	r27, 0x00	; 0
    2214:	e8 e3       	ldi	r30, 0x38	; 56
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	80 81       	ld	r24, Z
    221a:	48 2f       	mov	r20, r24
    221c:	8a 81       	ldd	r24, Y+2	; 0x02
    221e:	28 2f       	mov	r18, r24
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	02 2e       	mov	r0, r18
    2228:	02 c0       	rjmp	.+4      	; 0x222e <DIO_ES_tTOGPin+0x6e>
    222a:	88 0f       	add	r24, r24
    222c:	99 1f       	adc	r25, r25
    222e:	0a 94       	dec	r0
    2230:	e2 f7       	brpl	.-8      	; 0x222a <DIO_ES_tTOGPin+0x6a>
    2232:	84 27       	eor	r24, r20
    2234:	8c 93       	st	X, r24
    2236:	31 c0       	rjmp	.+98     	; 0x229a <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    2238:	89 81       	ldd	r24, Y+1	; 0x01
    223a:	82 30       	cpi	r24, 0x02	; 2
    223c:	a1 f4       	brne	.+40     	; 0x2266 <DIO_ES_tTOGPin+0xa6>
		TOG_BIT(PORTC,copy_u8_PinId);
    223e:	a5 e3       	ldi	r26, 0x35	; 53
    2240:	b0 e0       	ldi	r27, 0x00	; 0
    2242:	e5 e3       	ldi	r30, 0x35	; 53
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	48 2f       	mov	r20, r24
    224a:	8a 81       	ldd	r24, Y+2	; 0x02
    224c:	28 2f       	mov	r18, r24
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	02 2e       	mov	r0, r18
    2256:	02 c0       	rjmp	.+4      	; 0x225c <DIO_ES_tTOGPin+0x9c>
    2258:	88 0f       	add	r24, r24
    225a:	99 1f       	adc	r25, r25
    225c:	0a 94       	dec	r0
    225e:	e2 f7       	brpl	.-8      	; 0x2258 <DIO_ES_tTOGPin+0x98>
    2260:	84 27       	eor	r24, r20
    2262:	8c 93       	st	X, r24
    2264:	1a c0       	rjmp	.+52     	; 0x229a <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    2266:	89 81       	ldd	r24, Y+1	; 0x01
    2268:	83 30       	cpi	r24, 0x03	; 3
    226a:	a1 f4       	brne	.+40     	; 0x2294 <DIO_ES_tTOGPin+0xd4>
		TOG_BIT(PORTD,copy_u8_PinId);
    226c:	a2 e3       	ldi	r26, 0x32	; 50
    226e:	b0 e0       	ldi	r27, 0x00	; 0
    2270:	e2 e3       	ldi	r30, 0x32	; 50
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	80 81       	ld	r24, Z
    2276:	48 2f       	mov	r20, r24
    2278:	8a 81       	ldd	r24, Y+2	; 0x02
    227a:	28 2f       	mov	r18, r24
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	02 2e       	mov	r0, r18
    2284:	02 c0       	rjmp	.+4      	; 0x228a <DIO_ES_tTOGPin+0xca>
    2286:	88 0f       	add	r24, r24
    2288:	99 1f       	adc	r25, r25
    228a:	0a 94       	dec	r0
    228c:	e2 f7       	brpl	.-8      	; 0x2286 <DIO_ES_tTOGPin+0xc6>
    228e:	84 27       	eor	r24, r20
    2290:	8c 93       	st	X, r24
    2292:	03 c0       	rjmp	.+6      	; 0x229a <DIO_ES_tTOGPin+0xda>
	}else{
		return ES_NOT_OK;
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	8b 83       	std	Y+3, r24	; 0x03
    2298:	01 c0       	rjmp	.+2      	; 0x229c <DIO_ES_tTOGPin+0xdc>
	}
	return ES_OK;
    229a:	1b 82       	std	Y+3, r1	; 0x03
    229c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    229e:	0f 90       	pop	r0
    22a0:	0f 90       	pop	r0
    22a2:	0f 90       	pop	r0
    22a4:	cf 91       	pop	r28
    22a6:	df 91       	pop	r29
    22a8:	08 95       	ret

000022aa <DIO_ES_tInit>:




ES_t DIO_ES_tInit(void)
{
    22aa:	df 93       	push	r29
    22ac:	cf 93       	push	r28
    22ae:	00 d0       	rcall	.+0      	; 0x22b0 <DIO_ES_tInit+0x6>
    22b0:	cd b7       	in	r28, 0x3d	; 61
    22b2:	de b7       	in	r29, 0x3e	; 62
	int i = 0;
    22b4:	1a 82       	std	Y+2, r1	; 0x02
    22b6:	19 82       	std	Y+1, r1	; 0x01
	for(i=0 ; i<PIN_COUNT ; i++){
    22b8:	1a 82       	std	Y+2, r1	; 0x02
    22ba:	19 82       	std	Y+1, r1	; 0x01
    22bc:	a3 c2       	rjmp	.+1350   	; 0x2804 <DIO_ES_tInit+0x55a>
		if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_A){
    22be:	89 81       	ldd	r24, Y+1	; 0x01
    22c0:	9a 81       	ldd	r25, Y+2	; 0x02
    22c2:	88 0f       	add	r24, r24
    22c4:	99 1f       	adc	r25, r25
    22c6:	88 0f       	add	r24, r24
    22c8:	99 1f       	adc	r25, r25
    22ca:	fc 01       	movw	r30, r24
    22cc:	ea 5c       	subi	r30, 0xCA	; 202
    22ce:	fd 4f       	sbci	r31, 0xFD	; 253
    22d0:	80 81       	ld	r24, Z
    22d2:	88 23       	and	r24, r24
    22d4:	09 f0       	breq	.+2      	; 0x22d8 <DIO_ES_tInit+0x2e>
    22d6:	9b c0       	rjmp	.+310    	; 0x240e <DIO_ES_tInit+0x164>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
    22da:	9a 81       	ldd	r25, Y+2	; 0x02
    22dc:	88 0f       	add	r24, r24
    22de:	99 1f       	adc	r25, r25
    22e0:	01 96       	adiw	r24, 0x01	; 1
    22e2:	88 0f       	add	r24, r24
    22e4:	99 1f       	adc	r25, r25
    22e6:	fc 01       	movw	r30, r24
    22e8:	ea 5c       	subi	r30, 0xCA	; 202
    22ea:	fd 4f       	sbci	r31, 0xFD	; 253
    22ec:	80 81       	ld	r24, Z
    22ee:	81 30       	cpi	r24, 0x01	; 1
    22f0:	e9 f4       	brne	.+58     	; 0x232c <DIO_ES_tInit+0x82>
				SET_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    22f2:	aa e3       	ldi	r26, 0x3A	; 58
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	ea e3       	ldi	r30, 0x3A	; 58
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	80 81       	ld	r24, Z
    22fc:	48 2f       	mov	r20, r24
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
    2300:	9a 81       	ldd	r25, Y+2	; 0x02
    2302:	88 0f       	add	r24, r24
    2304:	99 1f       	adc	r25, r25
    2306:	88 0f       	add	r24, r24
    2308:	99 1f       	adc	r25, r25
    230a:	fc 01       	movw	r30, r24
    230c:	e9 5c       	subi	r30, 0xC9	; 201
    230e:	fd 4f       	sbci	r31, 0xFD	; 253
    2310:	80 81       	ld	r24, Z
    2312:	28 2f       	mov	r18, r24
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	02 2e       	mov	r0, r18
    231c:	02 c0       	rjmp	.+4      	; 0x2322 <DIO_ES_tInit+0x78>
    231e:	88 0f       	add	r24, r24
    2320:	99 1f       	adc	r25, r25
    2322:	0a 94       	dec	r0
    2324:	e2 f7       	brpl	.-8      	; 0x231e <DIO_ES_tInit+0x74>
    2326:	84 2b       	or	r24, r20
    2328:	8c 93       	st	X, r24
    232a:	67 c2       	rjmp	.+1230   	; 0x27fa <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    232c:	aa e3       	ldi	r26, 0x3A	; 58
    232e:	b0 e0       	ldi	r27, 0x00	; 0
    2330:	ea e3       	ldi	r30, 0x3A	; 58
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	80 81       	ld	r24, Z
    2336:	48 2f       	mov	r20, r24
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	9a 81       	ldd	r25, Y+2	; 0x02
    233c:	88 0f       	add	r24, r24
    233e:	99 1f       	adc	r25, r25
    2340:	88 0f       	add	r24, r24
    2342:	99 1f       	adc	r25, r25
    2344:	fc 01       	movw	r30, r24
    2346:	e9 5c       	subi	r30, 0xC9	; 201
    2348:	fd 4f       	sbci	r31, 0xFD	; 253
    234a:	80 81       	ld	r24, Z
    234c:	28 2f       	mov	r18, r24
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	02 2e       	mov	r0, r18
    2356:	02 c0       	rjmp	.+4      	; 0x235c <DIO_ES_tInit+0xb2>
    2358:	88 0f       	add	r24, r24
    235a:	99 1f       	adc	r25, r25
    235c:	0a 94       	dec	r0
    235e:	e2 f7       	brpl	.-8      	; 0x2358 <DIO_ES_tInit+0xae>
    2360:	80 95       	com	r24
    2362:	84 23       	and	r24, r20
    2364:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	9a 81       	ldd	r25, Y+2	; 0x02
    236a:	88 0f       	add	r24, r24
    236c:	99 1f       	adc	r25, r25
    236e:	88 0f       	add	r24, r24
    2370:	99 1f       	adc	r25, r25
    2372:	fc 01       	movw	r30, r24
    2374:	e7 5c       	subi	r30, 0xC7	; 199
    2376:	fd 4f       	sbci	r31, 0xFD	; 253
    2378:	80 81       	ld	r24, Z
    237a:	81 30       	cpi	r24, 0x01	; 1
    237c:	e9 f4       	brne	.+58     	; 0x23b8 <DIO_ES_tInit+0x10e>
					SET_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    237e:	ab e3       	ldi	r26, 0x3B	; 59
    2380:	b0 e0       	ldi	r27, 0x00	; 0
    2382:	eb e3       	ldi	r30, 0x3B	; 59
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	80 81       	ld	r24, Z
    2388:	48 2f       	mov	r20, r24
    238a:	89 81       	ldd	r24, Y+1	; 0x01
    238c:	9a 81       	ldd	r25, Y+2	; 0x02
    238e:	88 0f       	add	r24, r24
    2390:	99 1f       	adc	r25, r25
    2392:	88 0f       	add	r24, r24
    2394:	99 1f       	adc	r25, r25
    2396:	fc 01       	movw	r30, r24
    2398:	e9 5c       	subi	r30, 0xC9	; 201
    239a:	fd 4f       	sbci	r31, 0xFD	; 253
    239c:	80 81       	ld	r24, Z
    239e:	28 2f       	mov	r18, r24
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	02 2e       	mov	r0, r18
    23a8:	02 c0       	rjmp	.+4      	; 0x23ae <DIO_ES_tInit+0x104>
    23aa:	88 0f       	add	r24, r24
    23ac:	99 1f       	adc	r25, r25
    23ae:	0a 94       	dec	r0
    23b0:	e2 f7       	brpl	.-8      	; 0x23aa <DIO_ES_tInit+0x100>
    23b2:	84 2b       	or	r24, r20
    23b4:	8c 93       	st	X, r24
    23b6:	21 c2       	rjmp	.+1090   	; 0x27fa <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
    23ba:	9a 81       	ldd	r25, Y+2	; 0x02
    23bc:	88 0f       	add	r24, r24
    23be:	99 1f       	adc	r25, r25
    23c0:	88 0f       	add	r24, r24
    23c2:	99 1f       	adc	r25, r25
    23c4:	fc 01       	movw	r30, r24
    23c6:	e7 5c       	subi	r30, 0xC7	; 199
    23c8:	fd 4f       	sbci	r31, 0xFD	; 253
    23ca:	80 81       	ld	r24, Z
    23cc:	88 23       	and	r24, r24
    23ce:	09 f0       	breq	.+2      	; 0x23d2 <DIO_ES_tInit+0x128>
    23d0:	14 c2       	rjmp	.+1064   	; 0x27fa <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    23d2:	ab e3       	ldi	r26, 0x3B	; 59
    23d4:	b0 e0       	ldi	r27, 0x00	; 0
    23d6:	eb e3       	ldi	r30, 0x3B	; 59
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	80 81       	ld	r24, Z
    23dc:	48 2f       	mov	r20, r24
    23de:	89 81       	ldd	r24, Y+1	; 0x01
    23e0:	9a 81       	ldd	r25, Y+2	; 0x02
    23e2:	88 0f       	add	r24, r24
    23e4:	99 1f       	adc	r25, r25
    23e6:	88 0f       	add	r24, r24
    23e8:	99 1f       	adc	r25, r25
    23ea:	fc 01       	movw	r30, r24
    23ec:	e9 5c       	subi	r30, 0xC9	; 201
    23ee:	fd 4f       	sbci	r31, 0xFD	; 253
    23f0:	80 81       	ld	r24, Z
    23f2:	28 2f       	mov	r18, r24
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	02 2e       	mov	r0, r18
    23fc:	02 c0       	rjmp	.+4      	; 0x2402 <DIO_ES_tInit+0x158>
    23fe:	88 0f       	add	r24, r24
    2400:	99 1f       	adc	r25, r25
    2402:	0a 94       	dec	r0
    2404:	e2 f7       	brpl	.-8      	; 0x23fe <DIO_ES_tInit+0x154>
    2406:	80 95       	com	r24
    2408:	84 23       	and	r24, r20
    240a:	8c 93       	st	X, r24
    240c:	f6 c1       	rjmp	.+1004   	; 0x27fa <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_B){
    240e:	89 81       	ldd	r24, Y+1	; 0x01
    2410:	9a 81       	ldd	r25, Y+2	; 0x02
    2412:	88 0f       	add	r24, r24
    2414:	99 1f       	adc	r25, r25
    2416:	88 0f       	add	r24, r24
    2418:	99 1f       	adc	r25, r25
    241a:	fc 01       	movw	r30, r24
    241c:	ea 5c       	subi	r30, 0xCA	; 202
    241e:	fd 4f       	sbci	r31, 0xFD	; 253
    2420:	80 81       	ld	r24, Z
    2422:	81 30       	cpi	r24, 0x01	; 1
    2424:	09 f0       	breq	.+2      	; 0x2428 <DIO_ES_tInit+0x17e>
    2426:	9b c0       	rjmp	.+310    	; 0x255e <DIO_ES_tInit+0x2b4>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    2428:	89 81       	ldd	r24, Y+1	; 0x01
    242a:	9a 81       	ldd	r25, Y+2	; 0x02
    242c:	88 0f       	add	r24, r24
    242e:	99 1f       	adc	r25, r25
    2430:	01 96       	adiw	r24, 0x01	; 1
    2432:	88 0f       	add	r24, r24
    2434:	99 1f       	adc	r25, r25
    2436:	fc 01       	movw	r30, r24
    2438:	ea 5c       	subi	r30, 0xCA	; 202
    243a:	fd 4f       	sbci	r31, 0xFD	; 253
    243c:	80 81       	ld	r24, Z
    243e:	81 30       	cpi	r24, 0x01	; 1
    2440:	e9 f4       	brne	.+58     	; 0x247c <DIO_ES_tInit+0x1d2>
				SET_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    2442:	a7 e3       	ldi	r26, 0x37	; 55
    2444:	b0 e0       	ldi	r27, 0x00	; 0
    2446:	e7 e3       	ldi	r30, 0x37	; 55
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	80 81       	ld	r24, Z
    244c:	48 2f       	mov	r20, r24
    244e:	89 81       	ldd	r24, Y+1	; 0x01
    2450:	9a 81       	ldd	r25, Y+2	; 0x02
    2452:	88 0f       	add	r24, r24
    2454:	99 1f       	adc	r25, r25
    2456:	88 0f       	add	r24, r24
    2458:	99 1f       	adc	r25, r25
    245a:	fc 01       	movw	r30, r24
    245c:	e9 5c       	subi	r30, 0xC9	; 201
    245e:	fd 4f       	sbci	r31, 0xFD	; 253
    2460:	80 81       	ld	r24, Z
    2462:	28 2f       	mov	r18, r24
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	02 2e       	mov	r0, r18
    246c:	02 c0       	rjmp	.+4      	; 0x2472 <DIO_ES_tInit+0x1c8>
    246e:	88 0f       	add	r24, r24
    2470:	99 1f       	adc	r25, r25
    2472:	0a 94       	dec	r0
    2474:	e2 f7       	brpl	.-8      	; 0x246e <DIO_ES_tInit+0x1c4>
    2476:	84 2b       	or	r24, r20
    2478:	8c 93       	st	X, r24
    247a:	bf c1       	rjmp	.+894    	; 0x27fa <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    247c:	a7 e3       	ldi	r26, 0x37	; 55
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	e7 e3       	ldi	r30, 0x37	; 55
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	80 81       	ld	r24, Z
    2486:	48 2f       	mov	r20, r24
    2488:	89 81       	ldd	r24, Y+1	; 0x01
    248a:	9a 81       	ldd	r25, Y+2	; 0x02
    248c:	88 0f       	add	r24, r24
    248e:	99 1f       	adc	r25, r25
    2490:	88 0f       	add	r24, r24
    2492:	99 1f       	adc	r25, r25
    2494:	fc 01       	movw	r30, r24
    2496:	e9 5c       	subi	r30, 0xC9	; 201
    2498:	fd 4f       	sbci	r31, 0xFD	; 253
    249a:	80 81       	ld	r24, Z
    249c:	28 2f       	mov	r18, r24
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	02 2e       	mov	r0, r18
    24a6:	02 c0       	rjmp	.+4      	; 0x24ac <DIO_ES_tInit+0x202>
    24a8:	88 0f       	add	r24, r24
    24aa:	99 1f       	adc	r25, r25
    24ac:	0a 94       	dec	r0
    24ae:	e2 f7       	brpl	.-8      	; 0x24a8 <DIO_ES_tInit+0x1fe>
    24b0:	80 95       	com	r24
    24b2:	84 23       	and	r24, r20
    24b4:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    24b6:	89 81       	ldd	r24, Y+1	; 0x01
    24b8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ba:	88 0f       	add	r24, r24
    24bc:	99 1f       	adc	r25, r25
    24be:	88 0f       	add	r24, r24
    24c0:	99 1f       	adc	r25, r25
    24c2:	fc 01       	movw	r30, r24
    24c4:	e7 5c       	subi	r30, 0xC7	; 199
    24c6:	fd 4f       	sbci	r31, 0xFD	; 253
    24c8:	80 81       	ld	r24, Z
    24ca:	81 30       	cpi	r24, 0x01	; 1
    24cc:	e9 f4       	brne	.+58     	; 0x2508 <DIO_ES_tInit+0x25e>
					SET_BIT(PORTB,Dio_CfgPinsArray[i].Pin);
    24ce:	a8 e3       	ldi	r26, 0x38	; 56
    24d0:	b0 e0       	ldi	r27, 0x00	; 0
    24d2:	e8 e3       	ldi	r30, 0x38	; 56
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	80 81       	ld	r24, Z
    24d8:	48 2f       	mov	r20, r24
    24da:	89 81       	ldd	r24, Y+1	; 0x01
    24dc:	9a 81       	ldd	r25, Y+2	; 0x02
    24de:	88 0f       	add	r24, r24
    24e0:	99 1f       	adc	r25, r25
    24e2:	88 0f       	add	r24, r24
    24e4:	99 1f       	adc	r25, r25
    24e6:	fc 01       	movw	r30, r24
    24e8:	e9 5c       	subi	r30, 0xC9	; 201
    24ea:	fd 4f       	sbci	r31, 0xFD	; 253
    24ec:	80 81       	ld	r24, Z
    24ee:	28 2f       	mov	r18, r24
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	02 2e       	mov	r0, r18
    24f8:	02 c0       	rjmp	.+4      	; 0x24fe <DIO_ES_tInit+0x254>
    24fa:	88 0f       	add	r24, r24
    24fc:	99 1f       	adc	r25, r25
    24fe:	0a 94       	dec	r0
    2500:	e2 f7       	brpl	.-8      	; 0x24fa <DIO_ES_tInit+0x250>
    2502:	84 2b       	or	r24, r20
    2504:	8c 93       	st	X, r24
    2506:	79 c1       	rjmp	.+754    	; 0x27fa <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    2508:	89 81       	ldd	r24, Y+1	; 0x01
    250a:	9a 81       	ldd	r25, Y+2	; 0x02
    250c:	88 0f       	add	r24, r24
    250e:	99 1f       	adc	r25, r25
    2510:	88 0f       	add	r24, r24
    2512:	99 1f       	adc	r25, r25
    2514:	fc 01       	movw	r30, r24
    2516:	e7 5c       	subi	r30, 0xC7	; 199
    2518:	fd 4f       	sbci	r31, 0xFD	; 253
    251a:	80 81       	ld	r24, Z
    251c:	88 23       	and	r24, r24
    251e:	09 f0       	breq	.+2      	; 0x2522 <DIO_ES_tInit+0x278>
    2520:	6c c1       	rjmp	.+728    	; 0x27fa <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    2522:	ab e3       	ldi	r26, 0x3B	; 59
    2524:	b0 e0       	ldi	r27, 0x00	; 0
    2526:	eb e3       	ldi	r30, 0x3B	; 59
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	48 2f       	mov	r20, r24
    252e:	89 81       	ldd	r24, Y+1	; 0x01
    2530:	9a 81       	ldd	r25, Y+2	; 0x02
    2532:	88 0f       	add	r24, r24
    2534:	99 1f       	adc	r25, r25
    2536:	88 0f       	add	r24, r24
    2538:	99 1f       	adc	r25, r25
    253a:	fc 01       	movw	r30, r24
    253c:	e9 5c       	subi	r30, 0xC9	; 201
    253e:	fd 4f       	sbci	r31, 0xFD	; 253
    2540:	80 81       	ld	r24, Z
    2542:	28 2f       	mov	r18, r24
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	02 2e       	mov	r0, r18
    254c:	02 c0       	rjmp	.+4      	; 0x2552 <DIO_ES_tInit+0x2a8>
    254e:	88 0f       	add	r24, r24
    2550:	99 1f       	adc	r25, r25
    2552:	0a 94       	dec	r0
    2554:	e2 f7       	brpl	.-8      	; 0x254e <DIO_ES_tInit+0x2a4>
    2556:	80 95       	com	r24
    2558:	84 23       	and	r24, r20
    255a:	8c 93       	st	X, r24
    255c:	4e c1       	rjmp	.+668    	; 0x27fa <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_C){
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	9a 81       	ldd	r25, Y+2	; 0x02
    2562:	88 0f       	add	r24, r24
    2564:	99 1f       	adc	r25, r25
    2566:	88 0f       	add	r24, r24
    2568:	99 1f       	adc	r25, r25
    256a:	fc 01       	movw	r30, r24
    256c:	ea 5c       	subi	r30, 0xCA	; 202
    256e:	fd 4f       	sbci	r31, 0xFD	; 253
    2570:	80 81       	ld	r24, Z
    2572:	82 30       	cpi	r24, 0x02	; 2
    2574:	09 f0       	breq	.+2      	; 0x2578 <DIO_ES_tInit+0x2ce>
    2576:	9b c0       	rjmp	.+310    	; 0x26ae <DIO_ES_tInit+0x404>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    2578:	89 81       	ldd	r24, Y+1	; 0x01
    257a:	9a 81       	ldd	r25, Y+2	; 0x02
    257c:	88 0f       	add	r24, r24
    257e:	99 1f       	adc	r25, r25
    2580:	01 96       	adiw	r24, 0x01	; 1
    2582:	88 0f       	add	r24, r24
    2584:	99 1f       	adc	r25, r25
    2586:	fc 01       	movw	r30, r24
    2588:	ea 5c       	subi	r30, 0xCA	; 202
    258a:	fd 4f       	sbci	r31, 0xFD	; 253
    258c:	80 81       	ld	r24, Z
    258e:	81 30       	cpi	r24, 0x01	; 1
    2590:	e9 f4       	brne	.+58     	; 0x25cc <DIO_ES_tInit+0x322>
				SET_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    2592:	a4 e3       	ldi	r26, 0x34	; 52
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	e4 e3       	ldi	r30, 0x34	; 52
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	48 2f       	mov	r20, r24
    259e:	89 81       	ldd	r24, Y+1	; 0x01
    25a0:	9a 81       	ldd	r25, Y+2	; 0x02
    25a2:	88 0f       	add	r24, r24
    25a4:	99 1f       	adc	r25, r25
    25a6:	88 0f       	add	r24, r24
    25a8:	99 1f       	adc	r25, r25
    25aa:	fc 01       	movw	r30, r24
    25ac:	e9 5c       	subi	r30, 0xC9	; 201
    25ae:	fd 4f       	sbci	r31, 0xFD	; 253
    25b0:	80 81       	ld	r24, Z
    25b2:	28 2f       	mov	r18, r24
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	02 2e       	mov	r0, r18
    25bc:	02 c0       	rjmp	.+4      	; 0x25c2 <DIO_ES_tInit+0x318>
    25be:	88 0f       	add	r24, r24
    25c0:	99 1f       	adc	r25, r25
    25c2:	0a 94       	dec	r0
    25c4:	e2 f7       	brpl	.-8      	; 0x25be <DIO_ES_tInit+0x314>
    25c6:	84 2b       	or	r24, r20
    25c8:	8c 93       	st	X, r24
    25ca:	17 c1       	rjmp	.+558    	; 0x27fa <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    25cc:	a4 e3       	ldi	r26, 0x34	; 52
    25ce:	b0 e0       	ldi	r27, 0x00	; 0
    25d0:	e4 e3       	ldi	r30, 0x34	; 52
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	80 81       	ld	r24, Z
    25d6:	48 2f       	mov	r20, r24
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	9a 81       	ldd	r25, Y+2	; 0x02
    25dc:	88 0f       	add	r24, r24
    25de:	99 1f       	adc	r25, r25
    25e0:	88 0f       	add	r24, r24
    25e2:	99 1f       	adc	r25, r25
    25e4:	fc 01       	movw	r30, r24
    25e6:	e9 5c       	subi	r30, 0xC9	; 201
    25e8:	fd 4f       	sbci	r31, 0xFD	; 253
    25ea:	80 81       	ld	r24, Z
    25ec:	28 2f       	mov	r18, r24
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	02 2e       	mov	r0, r18
    25f6:	02 c0       	rjmp	.+4      	; 0x25fc <DIO_ES_tInit+0x352>
    25f8:	88 0f       	add	r24, r24
    25fa:	99 1f       	adc	r25, r25
    25fc:	0a 94       	dec	r0
    25fe:	e2 f7       	brpl	.-8      	; 0x25f8 <DIO_ES_tInit+0x34e>
    2600:	80 95       	com	r24
    2602:	84 23       	and	r24, r20
    2604:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    2606:	89 81       	ldd	r24, Y+1	; 0x01
    2608:	9a 81       	ldd	r25, Y+2	; 0x02
    260a:	88 0f       	add	r24, r24
    260c:	99 1f       	adc	r25, r25
    260e:	88 0f       	add	r24, r24
    2610:	99 1f       	adc	r25, r25
    2612:	fc 01       	movw	r30, r24
    2614:	e7 5c       	subi	r30, 0xC7	; 199
    2616:	fd 4f       	sbci	r31, 0xFD	; 253
    2618:	80 81       	ld	r24, Z
    261a:	81 30       	cpi	r24, 0x01	; 1
    261c:	e9 f4       	brne	.+58     	; 0x2658 <DIO_ES_tInit+0x3ae>
					SET_BIT(PORTC,Dio_CfgPinsArray[i].Pin);
    261e:	a5 e3       	ldi	r26, 0x35	; 53
    2620:	b0 e0       	ldi	r27, 0x00	; 0
    2622:	e5 e3       	ldi	r30, 0x35	; 53
    2624:	f0 e0       	ldi	r31, 0x00	; 0
    2626:	80 81       	ld	r24, Z
    2628:	48 2f       	mov	r20, r24
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	9a 81       	ldd	r25, Y+2	; 0x02
    262e:	88 0f       	add	r24, r24
    2630:	99 1f       	adc	r25, r25
    2632:	88 0f       	add	r24, r24
    2634:	99 1f       	adc	r25, r25
    2636:	fc 01       	movw	r30, r24
    2638:	e9 5c       	subi	r30, 0xC9	; 201
    263a:	fd 4f       	sbci	r31, 0xFD	; 253
    263c:	80 81       	ld	r24, Z
    263e:	28 2f       	mov	r18, r24
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	02 2e       	mov	r0, r18
    2648:	02 c0       	rjmp	.+4      	; 0x264e <DIO_ES_tInit+0x3a4>
    264a:	88 0f       	add	r24, r24
    264c:	99 1f       	adc	r25, r25
    264e:	0a 94       	dec	r0
    2650:	e2 f7       	brpl	.-8      	; 0x264a <DIO_ES_tInit+0x3a0>
    2652:	84 2b       	or	r24, r20
    2654:	8c 93       	st	X, r24
    2656:	d1 c0       	rjmp	.+418    	; 0x27fa <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    2658:	89 81       	ldd	r24, Y+1	; 0x01
    265a:	9a 81       	ldd	r25, Y+2	; 0x02
    265c:	88 0f       	add	r24, r24
    265e:	99 1f       	adc	r25, r25
    2660:	88 0f       	add	r24, r24
    2662:	99 1f       	adc	r25, r25
    2664:	fc 01       	movw	r30, r24
    2666:	e7 5c       	subi	r30, 0xC7	; 199
    2668:	fd 4f       	sbci	r31, 0xFD	; 253
    266a:	80 81       	ld	r24, Z
    266c:	88 23       	and	r24, r24
    266e:	09 f0       	breq	.+2      	; 0x2672 <DIO_ES_tInit+0x3c8>
    2670:	c4 c0       	rjmp	.+392    	; 0x27fa <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    2672:	ab e3       	ldi	r26, 0x3B	; 59
    2674:	b0 e0       	ldi	r27, 0x00	; 0
    2676:	eb e3       	ldi	r30, 0x3B	; 59
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	80 81       	ld	r24, Z
    267c:	48 2f       	mov	r20, r24
    267e:	89 81       	ldd	r24, Y+1	; 0x01
    2680:	9a 81       	ldd	r25, Y+2	; 0x02
    2682:	88 0f       	add	r24, r24
    2684:	99 1f       	adc	r25, r25
    2686:	88 0f       	add	r24, r24
    2688:	99 1f       	adc	r25, r25
    268a:	fc 01       	movw	r30, r24
    268c:	e9 5c       	subi	r30, 0xC9	; 201
    268e:	fd 4f       	sbci	r31, 0xFD	; 253
    2690:	80 81       	ld	r24, Z
    2692:	28 2f       	mov	r18, r24
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	02 2e       	mov	r0, r18
    269c:	02 c0       	rjmp	.+4      	; 0x26a2 <DIO_ES_tInit+0x3f8>
    269e:	88 0f       	add	r24, r24
    26a0:	99 1f       	adc	r25, r25
    26a2:	0a 94       	dec	r0
    26a4:	e2 f7       	brpl	.-8      	; 0x269e <DIO_ES_tInit+0x3f4>
    26a6:	80 95       	com	r24
    26a8:	84 23       	and	r24, r20
    26aa:	8c 93       	st	X, r24
    26ac:	a6 c0       	rjmp	.+332    	; 0x27fa <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_D){
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	9a 81       	ldd	r25, Y+2	; 0x02
    26b2:	88 0f       	add	r24, r24
    26b4:	99 1f       	adc	r25, r25
    26b6:	88 0f       	add	r24, r24
    26b8:	99 1f       	adc	r25, r25
    26ba:	fc 01       	movw	r30, r24
    26bc:	ea 5c       	subi	r30, 0xCA	; 202
    26be:	fd 4f       	sbci	r31, 0xFD	; 253
    26c0:	80 81       	ld	r24, Z
    26c2:	83 30       	cpi	r24, 0x03	; 3
    26c4:	09 f0       	breq	.+2      	; 0x26c8 <DIO_ES_tInit+0x41e>
    26c6:	99 c0       	rjmp	.+306    	; 0x27fa <DIO_ES_tInit+0x550>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	9a 81       	ldd	r25, Y+2	; 0x02
    26cc:	88 0f       	add	r24, r24
    26ce:	99 1f       	adc	r25, r25
    26d0:	01 96       	adiw	r24, 0x01	; 1
    26d2:	88 0f       	add	r24, r24
    26d4:	99 1f       	adc	r25, r25
    26d6:	fc 01       	movw	r30, r24
    26d8:	ea 5c       	subi	r30, 0xCA	; 202
    26da:	fd 4f       	sbci	r31, 0xFD	; 253
    26dc:	80 81       	ld	r24, Z
    26de:	81 30       	cpi	r24, 0x01	; 1
    26e0:	e9 f4       	brne	.+58     	; 0x271c <DIO_ES_tInit+0x472>
				SET_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    26e2:	a1 e3       	ldi	r26, 0x31	; 49
    26e4:	b0 e0       	ldi	r27, 0x00	; 0
    26e6:	e1 e3       	ldi	r30, 0x31	; 49
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	80 81       	ld	r24, Z
    26ec:	48 2f       	mov	r20, r24
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	9a 81       	ldd	r25, Y+2	; 0x02
    26f2:	88 0f       	add	r24, r24
    26f4:	99 1f       	adc	r25, r25
    26f6:	88 0f       	add	r24, r24
    26f8:	99 1f       	adc	r25, r25
    26fa:	fc 01       	movw	r30, r24
    26fc:	e9 5c       	subi	r30, 0xC9	; 201
    26fe:	fd 4f       	sbci	r31, 0xFD	; 253
    2700:	80 81       	ld	r24, Z
    2702:	28 2f       	mov	r18, r24
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	02 2e       	mov	r0, r18
    270c:	02 c0       	rjmp	.+4      	; 0x2712 <DIO_ES_tInit+0x468>
    270e:	88 0f       	add	r24, r24
    2710:	99 1f       	adc	r25, r25
    2712:	0a 94       	dec	r0
    2714:	e2 f7       	brpl	.-8      	; 0x270e <DIO_ES_tInit+0x464>
    2716:	84 2b       	or	r24, r20
    2718:	8c 93       	st	X, r24
    271a:	6f c0       	rjmp	.+222    	; 0x27fa <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    271c:	a1 e3       	ldi	r26, 0x31	; 49
    271e:	b0 e0       	ldi	r27, 0x00	; 0
    2720:	e1 e3       	ldi	r30, 0x31	; 49
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	80 81       	ld	r24, Z
    2726:	48 2f       	mov	r20, r24
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	9a 81       	ldd	r25, Y+2	; 0x02
    272c:	88 0f       	add	r24, r24
    272e:	99 1f       	adc	r25, r25
    2730:	88 0f       	add	r24, r24
    2732:	99 1f       	adc	r25, r25
    2734:	fc 01       	movw	r30, r24
    2736:	e9 5c       	subi	r30, 0xC9	; 201
    2738:	fd 4f       	sbci	r31, 0xFD	; 253
    273a:	80 81       	ld	r24, Z
    273c:	28 2f       	mov	r18, r24
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	02 2e       	mov	r0, r18
    2746:	02 c0       	rjmp	.+4      	; 0x274c <DIO_ES_tInit+0x4a2>
    2748:	88 0f       	add	r24, r24
    274a:	99 1f       	adc	r25, r25
    274c:	0a 94       	dec	r0
    274e:	e2 f7       	brpl	.-8      	; 0x2748 <DIO_ES_tInit+0x49e>
    2750:	80 95       	com	r24
    2752:	84 23       	and	r24, r20
    2754:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    2756:	89 81       	ldd	r24, Y+1	; 0x01
    2758:	9a 81       	ldd	r25, Y+2	; 0x02
    275a:	88 0f       	add	r24, r24
    275c:	99 1f       	adc	r25, r25
    275e:	88 0f       	add	r24, r24
    2760:	99 1f       	adc	r25, r25
    2762:	fc 01       	movw	r30, r24
    2764:	e7 5c       	subi	r30, 0xC7	; 199
    2766:	fd 4f       	sbci	r31, 0xFD	; 253
    2768:	80 81       	ld	r24, Z
    276a:	81 30       	cpi	r24, 0x01	; 1
    276c:	e9 f4       	brne	.+58     	; 0x27a8 <DIO_ES_tInit+0x4fe>
					SET_BIT(PORTD,Dio_CfgPinsArray[i].Pin);
    276e:	a2 e3       	ldi	r26, 0x32	; 50
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	e2 e3       	ldi	r30, 0x32	; 50
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	80 81       	ld	r24, Z
    2778:	48 2f       	mov	r20, r24
    277a:	89 81       	ldd	r24, Y+1	; 0x01
    277c:	9a 81       	ldd	r25, Y+2	; 0x02
    277e:	88 0f       	add	r24, r24
    2780:	99 1f       	adc	r25, r25
    2782:	88 0f       	add	r24, r24
    2784:	99 1f       	adc	r25, r25
    2786:	fc 01       	movw	r30, r24
    2788:	e9 5c       	subi	r30, 0xC9	; 201
    278a:	fd 4f       	sbci	r31, 0xFD	; 253
    278c:	80 81       	ld	r24, Z
    278e:	28 2f       	mov	r18, r24
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	02 2e       	mov	r0, r18
    2798:	02 c0       	rjmp	.+4      	; 0x279e <DIO_ES_tInit+0x4f4>
    279a:	88 0f       	add	r24, r24
    279c:	99 1f       	adc	r25, r25
    279e:	0a 94       	dec	r0
    27a0:	e2 f7       	brpl	.-8      	; 0x279a <DIO_ES_tInit+0x4f0>
    27a2:	84 2b       	or	r24, r20
    27a4:	8c 93       	st	X, r24
    27a6:	29 c0       	rjmp	.+82     	; 0x27fa <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	9a 81       	ldd	r25, Y+2	; 0x02
    27ac:	88 0f       	add	r24, r24
    27ae:	99 1f       	adc	r25, r25
    27b0:	88 0f       	add	r24, r24
    27b2:	99 1f       	adc	r25, r25
    27b4:	fc 01       	movw	r30, r24
    27b6:	e7 5c       	subi	r30, 0xC7	; 199
    27b8:	fd 4f       	sbci	r31, 0xFD	; 253
    27ba:	80 81       	ld	r24, Z
    27bc:	88 23       	and	r24, r24
    27be:	e9 f4       	brne	.+58     	; 0x27fa <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    27c0:	ab e3       	ldi	r26, 0x3B	; 59
    27c2:	b0 e0       	ldi	r27, 0x00	; 0
    27c4:	eb e3       	ldi	r30, 0x3B	; 59
    27c6:	f0 e0       	ldi	r31, 0x00	; 0
    27c8:	80 81       	ld	r24, Z
    27ca:	48 2f       	mov	r20, r24
    27cc:	89 81       	ldd	r24, Y+1	; 0x01
    27ce:	9a 81       	ldd	r25, Y+2	; 0x02
    27d0:	88 0f       	add	r24, r24
    27d2:	99 1f       	adc	r25, r25
    27d4:	88 0f       	add	r24, r24
    27d6:	99 1f       	adc	r25, r25
    27d8:	fc 01       	movw	r30, r24
    27da:	e9 5c       	subi	r30, 0xC9	; 201
    27dc:	fd 4f       	sbci	r31, 0xFD	; 253
    27de:	80 81       	ld	r24, Z
    27e0:	28 2f       	mov	r18, r24
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	02 2e       	mov	r0, r18
    27ea:	02 c0       	rjmp	.+4      	; 0x27f0 <DIO_ES_tInit+0x546>
    27ec:	88 0f       	add	r24, r24
    27ee:	99 1f       	adc	r25, r25
    27f0:	0a 94       	dec	r0
    27f2:	e2 f7       	brpl	.-8      	; 0x27ec <DIO_ES_tInit+0x542>
    27f4:	80 95       	com	r24
    27f6:	84 23       	and	r24, r20
    27f8:	8c 93       	st	X, r24


ES_t DIO_ES_tInit(void)
{
	int i = 0;
	for(i=0 ; i<PIN_COUNT ; i++){
    27fa:	89 81       	ldd	r24, Y+1	; 0x01
    27fc:	9a 81       	ldd	r25, Y+2	; 0x02
    27fe:	01 96       	adiw	r24, 0x01	; 1
    2800:	9a 83       	std	Y+2, r25	; 0x02
    2802:	89 83       	std	Y+1, r24	; 0x01
    2804:	89 81       	ldd	r24, Y+1	; 0x01
    2806:	9a 81       	ldd	r25, Y+2	; 0x02
    2808:	8a 31       	cpi	r24, 0x1A	; 26
    280a:	91 05       	cpc	r25, r1
    280c:	0c f4       	brge	.+2      	; 0x2810 <DIO_ES_tInit+0x566>
    280e:	57 cd       	rjmp	.-1362   	; 0x22be <DIO_ES_tInit+0x14>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
				}
			}
		}
	}
	return ES_OK;
    2810:	80 e0       	ldi	r24, 0x00	; 0
}
    2812:	0f 90       	pop	r0
    2814:	0f 90       	pop	r0
    2816:	cf 91       	pop	r28
    2818:	df 91       	pop	r29
    281a:	08 95       	ret

0000281c <Stepper_Init>:

#include "Stepper.h"
#include "StepperCfg.h"

void Stepper_Init(void)
{
    281c:	df 93       	push	r29
    281e:	cf 93       	push	r28
    2820:	cd b7       	in	r28, 0x3d	; 61
    2822:	de b7       	in	r29, 0x3e	; 62
	DIO_ES_tSetPinDirection(Stepper_MOTOR_REG, S1, OUTPUT);
    2824:	82 e0       	ldi	r24, 0x02	; 2
    2826:	60 e0       	ldi	r22, 0x00	; 0
    2828:	41 e0       	ldi	r20, 0x01	; 1
    282a:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(Stepper_MOTOR_REG, S2, OUTPUT);
    282e:	82 e0       	ldi	r24, 0x02	; 2
    2830:	65 e0       	ldi	r22, 0x05	; 5
    2832:	41 e0       	ldi	r20, 0x01	; 1
    2834:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(Stepper_MOTOR_REG, S3, OUTPUT);
    2838:	82 e0       	ldi	r24, 0x02	; 2
    283a:	66 e0       	ldi	r22, 0x06	; 6
    283c:	41 e0       	ldi	r20, 0x01	; 1
    283e:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(Stepper_MOTOR_REG, S4, OUTPUT);
    2842:	82 e0       	ldi	r24, 0x02	; 2
    2844:	67 e0       	ldi	r22, 0x07	; 7
    2846:	41 e0       	ldi	r20, 0x01	; 1
    2848:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S1, LOW);
    284c:	82 e0       	ldi	r24, 0x02	; 2
    284e:	60 e0       	ldi	r22, 0x00	; 0
    2850:	40 e0       	ldi	r20, 0x00	; 0
    2852:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S2, LOW);
    2856:	82 e0       	ldi	r24, 0x02	; 2
    2858:	65 e0       	ldi	r22, 0x05	; 5
    285a:	40 e0       	ldi	r20, 0x00	; 0
    285c:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S3, LOW);
    2860:	82 e0       	ldi	r24, 0x02	; 2
    2862:	66 e0       	ldi	r22, 0x06	; 6
    2864:	40 e0       	ldi	r20, 0x00	; 0
    2866:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S4, LOW);
    286a:	82 e0       	ldi	r24, 0x02	; 2
    286c:	67 e0       	ldi	r22, 0x07	; 7
    286e:	40 e0       	ldi	r20, 0x00	; 0
    2870:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
}
    2874:	cf 91       	pop	r28
    2876:	df 91       	pop	r29
    2878:	08 95       	ret

0000287a <Stepper_Rotate>:


void Stepper_Rotate(u8 degree)
{
    287a:	df 93       	push	r29
    287c:	cf 93       	push	r28
    287e:	cd b7       	in	r28, 0x3d	; 61
    2880:	de b7       	in	r29, 0x3e	; 62
    2882:	ef 97       	sbiw	r28, 0x3f	; 63
    2884:	0f b6       	in	r0, 0x3f	; 63
    2886:	f8 94       	cli
    2888:	de bf       	out	0x3e, r29	; 62
    288a:	0f be       	out	0x3f, r0	; 63
    288c:	cd bf       	out	0x3d, r28	; 61
    288e:	8f af       	std	Y+63, r24	; 0x3f
	u16 stepsNum = (degree * 2048UL)/360;
    2890:	8f ad       	ldd	r24, Y+63	; 0x3f
    2892:	88 2f       	mov	r24, r24
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	a0 e0       	ldi	r26, 0x00	; 0
    2898:	b0 e0       	ldi	r27, 0x00	; 0
    289a:	07 2e       	mov	r0, r23
    289c:	7b e0       	ldi	r23, 0x0B	; 11
    289e:	88 0f       	add	r24, r24
    28a0:	99 1f       	adc	r25, r25
    28a2:	aa 1f       	adc	r26, r26
    28a4:	bb 1f       	adc	r27, r27
    28a6:	7a 95       	dec	r23
    28a8:	d1 f7       	brne	.-12     	; 0x289e <Stepper_Rotate+0x24>
    28aa:	70 2d       	mov	r23, r0
    28ac:	28 e6       	ldi	r18, 0x68	; 104
    28ae:	31 e0       	ldi	r19, 0x01	; 1
    28b0:	40 e0       	ldi	r20, 0x00	; 0
    28b2:	50 e0       	ldi	r21, 0x00	; 0
    28b4:	bc 01       	movw	r22, r24
    28b6:	cd 01       	movw	r24, r26
    28b8:	0e 94 67 28 	call	0x50ce	; 0x50ce <__udivmodsi4>
    28bc:	da 01       	movw	r26, r20
    28be:	c9 01       	movw	r24, r18
    28c0:	9e af       	std	Y+62, r25	; 0x3e
    28c2:	8d af       	std	Y+61, r24	; 0x3d
	u16 IterationsNum = stepsNum/4;
    28c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    28c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    28c8:	96 95       	lsr	r25
    28ca:	87 95       	ror	r24
    28cc:	96 95       	lsr	r25
    28ce:	87 95       	ror	r24
    28d0:	9c af       	std	Y+60, r25	; 0x3c
    28d2:	8b af       	std	Y+59, r24	; 0x3b

	u16 i=0;
    28d4:	1a ae       	std	Y+58, r1	; 0x3a
    28d6:	19 ae       	std	Y+57, r1	; 0x39
	for(i=0;i<IterationsNum;i++)
    28d8:	1a ae       	std	Y+58, r1	; 0x3a
    28da:	19 ae       	std	Y+57, r1	; 0x39
    28dc:	1d c2       	rjmp	.+1082   	; 0x2d18 <Stepper_Rotate+0x49e>
	{
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S1, HIGH);
    28de:	82 e0       	ldi	r24, 0x02	; 2
    28e0:	60 e0       	ldi	r22, 0x00	; 0
    28e2:	41 e0       	ldi	r20, 0x01	; 1
    28e4:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S2, LOW);
    28e8:	82 e0       	ldi	r24, 0x02	; 2
    28ea:	65 e0       	ldi	r22, 0x05	; 5
    28ec:	40 e0       	ldi	r20, 0x00	; 0
    28ee:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S3, LOW);
    28f2:	82 e0       	ldi	r24, 0x02	; 2
    28f4:	66 e0       	ldi	r22, 0x06	; 6
    28f6:	40 e0       	ldi	r20, 0x00	; 0
    28f8:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S4, LOW);
    28fc:	82 e0       	ldi	r24, 0x02	; 2
    28fe:	67 e0       	ldi	r22, 0x07	; 7
    2900:	40 e0       	ldi	r20, 0x00	; 0
    2902:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
    2906:	80 e0       	ldi	r24, 0x00	; 0
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	a0 ea       	ldi	r26, 0xA0	; 160
    290c:	b1 e4       	ldi	r27, 0x41	; 65
    290e:	8d ab       	std	Y+53, r24	; 0x35
    2910:	9e ab       	std	Y+54, r25	; 0x36
    2912:	af ab       	std	Y+55, r26	; 0x37
    2914:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2916:	6d a9       	ldd	r22, Y+53	; 0x35
    2918:	7e a9       	ldd	r23, Y+54	; 0x36
    291a:	8f a9       	ldd	r24, Y+55	; 0x37
    291c:	98 ad       	ldd	r25, Y+56	; 0x38
    291e:	20 e0       	ldi	r18, 0x00	; 0
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	4a e7       	ldi	r20, 0x7A	; 122
    2924:	55 e4       	ldi	r21, 0x45	; 69
    2926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    292a:	dc 01       	movw	r26, r24
    292c:	cb 01       	movw	r24, r22
    292e:	89 ab       	std	Y+49, r24	; 0x31
    2930:	9a ab       	std	Y+50, r25	; 0x32
    2932:	ab ab       	std	Y+51, r26	; 0x33
    2934:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2936:	69 a9       	ldd	r22, Y+49	; 0x31
    2938:	7a a9       	ldd	r23, Y+50	; 0x32
    293a:	8b a9       	ldd	r24, Y+51	; 0x33
    293c:	9c a9       	ldd	r25, Y+52	; 0x34
    293e:	20 e0       	ldi	r18, 0x00	; 0
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	40 e8       	ldi	r20, 0x80	; 128
    2944:	5f e3       	ldi	r21, 0x3F	; 63
    2946:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    294a:	88 23       	and	r24, r24
    294c:	2c f4       	brge	.+10     	; 0x2958 <Stepper_Rotate+0xde>
		__ticks = 1;
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	98 ab       	std	Y+48, r25	; 0x30
    2954:	8f a7       	std	Y+47, r24	; 0x2f
    2956:	3f c0       	rjmp	.+126    	; 0x29d6 <Stepper_Rotate+0x15c>
	else if (__tmp > 65535)
    2958:	69 a9       	ldd	r22, Y+49	; 0x31
    295a:	7a a9       	ldd	r23, Y+50	; 0x32
    295c:	8b a9       	ldd	r24, Y+51	; 0x33
    295e:	9c a9       	ldd	r25, Y+52	; 0x34
    2960:	20 e0       	ldi	r18, 0x00	; 0
    2962:	3f ef       	ldi	r19, 0xFF	; 255
    2964:	4f e7       	ldi	r20, 0x7F	; 127
    2966:	57 e4       	ldi	r21, 0x47	; 71
    2968:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    296c:	18 16       	cp	r1, r24
    296e:	4c f5       	brge	.+82     	; 0x29c2 <Stepper_Rotate+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2970:	6d a9       	ldd	r22, Y+53	; 0x35
    2972:	7e a9       	ldd	r23, Y+54	; 0x36
    2974:	8f a9       	ldd	r24, Y+55	; 0x37
    2976:	98 ad       	ldd	r25, Y+56	; 0x38
    2978:	20 e0       	ldi	r18, 0x00	; 0
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	40 e2       	ldi	r20, 0x20	; 32
    297e:	51 e4       	ldi	r21, 0x41	; 65
    2980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	bc 01       	movw	r22, r24
    298a:	cd 01       	movw	r24, r26
    298c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	98 ab       	std	Y+48, r25	; 0x30
    2996:	8f a7       	std	Y+47, r24	; 0x2f
    2998:	0f c0       	rjmp	.+30     	; 0x29b8 <Stepper_Rotate+0x13e>
    299a:	80 e9       	ldi	r24, 0x90	; 144
    299c:	91 e0       	ldi	r25, 0x01	; 1
    299e:	9e a7       	std	Y+46, r25	; 0x2e
    29a0:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29a2:	8d a5       	ldd	r24, Y+45	; 0x2d
    29a4:	9e a5       	ldd	r25, Y+46	; 0x2e
    29a6:	01 97       	sbiw	r24, 0x01	; 1
    29a8:	f1 f7       	brne	.-4      	; 0x29a6 <Stepper_Rotate+0x12c>
    29aa:	9e a7       	std	Y+46, r25	; 0x2e
    29ac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    29b0:	98 a9       	ldd	r25, Y+48	; 0x30
    29b2:	01 97       	sbiw	r24, 0x01	; 1
    29b4:	98 ab       	std	Y+48, r25	; 0x30
    29b6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    29ba:	98 a9       	ldd	r25, Y+48	; 0x30
    29bc:	00 97       	sbiw	r24, 0x00	; 0
    29be:	69 f7       	brne	.-38     	; 0x299a <Stepper_Rotate+0x120>
    29c0:	14 c0       	rjmp	.+40     	; 0x29ea <Stepper_Rotate+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c2:	69 a9       	ldd	r22, Y+49	; 0x31
    29c4:	7a a9       	ldd	r23, Y+50	; 0x32
    29c6:	8b a9       	ldd	r24, Y+51	; 0x33
    29c8:	9c a9       	ldd	r25, Y+52	; 0x34
    29ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	98 ab       	std	Y+48, r25	; 0x30
    29d4:	8f a7       	std	Y+47, r24	; 0x2f
    29d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    29d8:	98 a9       	ldd	r25, Y+48	; 0x30
    29da:	9c a7       	std	Y+44, r25	; 0x2c
    29dc:	8b a7       	std	Y+43, r24	; 0x2b
    29de:	8b a5       	ldd	r24, Y+43	; 0x2b
    29e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    29e2:	01 97       	sbiw	r24, 0x01	; 1
    29e4:	f1 f7       	brne	.-4      	; 0x29e2 <Stepper_Rotate+0x168>
    29e6:	9c a7       	std	Y+44, r25	; 0x2c
    29e8:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(20);
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S1, LOW);
    29ea:	82 e0       	ldi	r24, 0x02	; 2
    29ec:	60 e0       	ldi	r22, 0x00	; 0
    29ee:	40 e0       	ldi	r20, 0x00	; 0
    29f0:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S2, HIGH);
    29f4:	82 e0       	ldi	r24, 0x02	; 2
    29f6:	65 e0       	ldi	r22, 0x05	; 5
    29f8:	41 e0       	ldi	r20, 0x01	; 1
    29fa:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S3, LOW);
    29fe:	82 e0       	ldi	r24, 0x02	; 2
    2a00:	66 e0       	ldi	r22, 0x06	; 6
    2a02:	40 e0       	ldi	r20, 0x00	; 0
    2a04:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S4, LOW);
    2a08:	82 e0       	ldi	r24, 0x02	; 2
    2a0a:	67 e0       	ldi	r22, 0x07	; 7
    2a0c:	40 e0       	ldi	r20, 0x00	; 0
    2a0e:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
    2a12:	80 e0       	ldi	r24, 0x00	; 0
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	a0 ea       	ldi	r26, 0xA0	; 160
    2a18:	b1 e4       	ldi	r27, 0x41	; 65
    2a1a:	8f a3       	std	Y+39, r24	; 0x27
    2a1c:	98 a7       	std	Y+40, r25	; 0x28
    2a1e:	a9 a7       	std	Y+41, r26	; 0x29
    2a20:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a22:	6f a1       	ldd	r22, Y+39	; 0x27
    2a24:	78 a5       	ldd	r23, Y+40	; 0x28
    2a26:	89 a5       	ldd	r24, Y+41	; 0x29
    2a28:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	4a e7       	ldi	r20, 0x7A	; 122
    2a30:	55 e4       	ldi	r21, 0x45	; 69
    2a32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	8b a3       	std	Y+35, r24	; 0x23
    2a3c:	9c a3       	std	Y+36, r25	; 0x24
    2a3e:	ad a3       	std	Y+37, r26	; 0x25
    2a40:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a42:	6b a1       	ldd	r22, Y+35	; 0x23
    2a44:	7c a1       	ldd	r23, Y+36	; 0x24
    2a46:	8d a1       	ldd	r24, Y+37	; 0x25
    2a48:	9e a1       	ldd	r25, Y+38	; 0x26
    2a4a:	20 e0       	ldi	r18, 0x00	; 0
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	40 e8       	ldi	r20, 0x80	; 128
    2a50:	5f e3       	ldi	r21, 0x3F	; 63
    2a52:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a56:	88 23       	and	r24, r24
    2a58:	2c f4       	brge	.+10     	; 0x2a64 <Stepper_Rotate+0x1ea>
		__ticks = 1;
    2a5a:	81 e0       	ldi	r24, 0x01	; 1
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	9a a3       	std	Y+34, r25	; 0x22
    2a60:	89 a3       	std	Y+33, r24	; 0x21
    2a62:	3f c0       	rjmp	.+126    	; 0x2ae2 <Stepper_Rotate+0x268>
	else if (__tmp > 65535)
    2a64:	6b a1       	ldd	r22, Y+35	; 0x23
    2a66:	7c a1       	ldd	r23, Y+36	; 0x24
    2a68:	8d a1       	ldd	r24, Y+37	; 0x25
    2a6a:	9e a1       	ldd	r25, Y+38	; 0x26
    2a6c:	20 e0       	ldi	r18, 0x00	; 0
    2a6e:	3f ef       	ldi	r19, 0xFF	; 255
    2a70:	4f e7       	ldi	r20, 0x7F	; 127
    2a72:	57 e4       	ldi	r21, 0x47	; 71
    2a74:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a78:	18 16       	cp	r1, r24
    2a7a:	4c f5       	brge	.+82     	; 0x2ace <Stepper_Rotate+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a7c:	6f a1       	ldd	r22, Y+39	; 0x27
    2a7e:	78 a5       	ldd	r23, Y+40	; 0x28
    2a80:	89 a5       	ldd	r24, Y+41	; 0x29
    2a82:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	40 e2       	ldi	r20, 0x20	; 32
    2a8a:	51 e4       	ldi	r21, 0x41	; 65
    2a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a90:	dc 01       	movw	r26, r24
    2a92:	cb 01       	movw	r24, r22
    2a94:	bc 01       	movw	r22, r24
    2a96:	cd 01       	movw	r24, r26
    2a98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a9c:	dc 01       	movw	r26, r24
    2a9e:	cb 01       	movw	r24, r22
    2aa0:	9a a3       	std	Y+34, r25	; 0x22
    2aa2:	89 a3       	std	Y+33, r24	; 0x21
    2aa4:	0f c0       	rjmp	.+30     	; 0x2ac4 <Stepper_Rotate+0x24a>
    2aa6:	80 e9       	ldi	r24, 0x90	; 144
    2aa8:	91 e0       	ldi	r25, 0x01	; 1
    2aaa:	98 a3       	std	Y+32, r25	; 0x20
    2aac:	8f 8f       	std	Y+31, r24	; 0x1f
    2aae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ab0:	98 a1       	ldd	r25, Y+32	; 0x20
    2ab2:	01 97       	sbiw	r24, 0x01	; 1
    2ab4:	f1 f7       	brne	.-4      	; 0x2ab2 <Stepper_Rotate+0x238>
    2ab6:	98 a3       	std	Y+32, r25	; 0x20
    2ab8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aba:	89 a1       	ldd	r24, Y+33	; 0x21
    2abc:	9a a1       	ldd	r25, Y+34	; 0x22
    2abe:	01 97       	sbiw	r24, 0x01	; 1
    2ac0:	9a a3       	std	Y+34, r25	; 0x22
    2ac2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ac4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ac6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ac8:	00 97       	sbiw	r24, 0x00	; 0
    2aca:	69 f7       	brne	.-38     	; 0x2aa6 <Stepper_Rotate+0x22c>
    2acc:	14 c0       	rjmp	.+40     	; 0x2af6 <Stepper_Rotate+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ace:	6b a1       	ldd	r22, Y+35	; 0x23
    2ad0:	7c a1       	ldd	r23, Y+36	; 0x24
    2ad2:	8d a1       	ldd	r24, Y+37	; 0x25
    2ad4:	9e a1       	ldd	r25, Y+38	; 0x26
    2ad6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ada:	dc 01       	movw	r26, r24
    2adc:	cb 01       	movw	r24, r22
    2ade:	9a a3       	std	Y+34, r25	; 0x22
    2ae0:	89 a3       	std	Y+33, r24	; 0x21
    2ae2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ae4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ae6:	9e 8f       	std	Y+30, r25	; 0x1e
    2ae8:	8d 8f       	std	Y+29, r24	; 0x1d
    2aea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2aec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2aee:	01 97       	sbiw	r24, 0x01	; 1
    2af0:	f1 f7       	brne	.-4      	; 0x2aee <Stepper_Rotate+0x274>
    2af2:	9e 8f       	std	Y+30, r25	; 0x1e
    2af4:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(20);
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S1, LOW);
    2af6:	82 e0       	ldi	r24, 0x02	; 2
    2af8:	60 e0       	ldi	r22, 0x00	; 0
    2afa:	40 e0       	ldi	r20, 0x00	; 0
    2afc:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S2, LOW);
    2b00:	82 e0       	ldi	r24, 0x02	; 2
    2b02:	65 e0       	ldi	r22, 0x05	; 5
    2b04:	40 e0       	ldi	r20, 0x00	; 0
    2b06:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S3, HIGH);
    2b0a:	82 e0       	ldi	r24, 0x02	; 2
    2b0c:	66 e0       	ldi	r22, 0x06	; 6
    2b0e:	41 e0       	ldi	r20, 0x01	; 1
    2b10:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S4, LOW);
    2b14:	82 e0       	ldi	r24, 0x02	; 2
    2b16:	67 e0       	ldi	r22, 0x07	; 7
    2b18:	40 e0       	ldi	r20, 0x00	; 0
    2b1a:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
    2b1e:	80 e0       	ldi	r24, 0x00	; 0
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	a0 ea       	ldi	r26, 0xA0	; 160
    2b24:	b1 e4       	ldi	r27, 0x41	; 65
    2b26:	89 8f       	std	Y+25, r24	; 0x19
    2b28:	9a 8f       	std	Y+26, r25	; 0x1a
    2b2a:	ab 8f       	std	Y+27, r26	; 0x1b
    2b2c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b2e:	69 8d       	ldd	r22, Y+25	; 0x19
    2b30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	4a e7       	ldi	r20, 0x7A	; 122
    2b3c:	55 e4       	ldi	r21, 0x45	; 69
    2b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	8d 8b       	std	Y+21, r24	; 0x15
    2b48:	9e 8b       	std	Y+22, r25	; 0x16
    2b4a:	af 8b       	std	Y+23, r26	; 0x17
    2b4c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b4e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b50:	7e 89       	ldd	r23, Y+22	; 0x16
    2b52:	8f 89       	ldd	r24, Y+23	; 0x17
    2b54:	98 8d       	ldd	r25, Y+24	; 0x18
    2b56:	20 e0       	ldi	r18, 0x00	; 0
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	40 e8       	ldi	r20, 0x80	; 128
    2b5c:	5f e3       	ldi	r21, 0x3F	; 63
    2b5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b62:	88 23       	and	r24, r24
    2b64:	2c f4       	brge	.+10     	; 0x2b70 <Stepper_Rotate+0x2f6>
		__ticks = 1;
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	9c 8b       	std	Y+20, r25	; 0x14
    2b6c:	8b 8b       	std	Y+19, r24	; 0x13
    2b6e:	3f c0       	rjmp	.+126    	; 0x2bee <Stepper_Rotate+0x374>
	else if (__tmp > 65535)
    2b70:	6d 89       	ldd	r22, Y+21	; 0x15
    2b72:	7e 89       	ldd	r23, Y+22	; 0x16
    2b74:	8f 89       	ldd	r24, Y+23	; 0x17
    2b76:	98 8d       	ldd	r25, Y+24	; 0x18
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	3f ef       	ldi	r19, 0xFF	; 255
    2b7c:	4f e7       	ldi	r20, 0x7F	; 127
    2b7e:	57 e4       	ldi	r21, 0x47	; 71
    2b80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b84:	18 16       	cp	r1, r24
    2b86:	4c f5       	brge	.+82     	; 0x2bda <Stepper_Rotate+0x360>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b88:	69 8d       	ldd	r22, Y+25	; 0x19
    2b8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	40 e2       	ldi	r20, 0x20	; 32
    2b96:	51 e4       	ldi	r21, 0x41	; 65
    2b98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9c:	dc 01       	movw	r26, r24
    2b9e:	cb 01       	movw	r24, r22
    2ba0:	bc 01       	movw	r22, r24
    2ba2:	cd 01       	movw	r24, r26
    2ba4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba8:	dc 01       	movw	r26, r24
    2baa:	cb 01       	movw	r24, r22
    2bac:	9c 8b       	std	Y+20, r25	; 0x14
    2bae:	8b 8b       	std	Y+19, r24	; 0x13
    2bb0:	0f c0       	rjmp	.+30     	; 0x2bd0 <Stepper_Rotate+0x356>
    2bb2:	80 e9       	ldi	r24, 0x90	; 144
    2bb4:	91 e0       	ldi	r25, 0x01	; 1
    2bb6:	9a 8b       	std	Y+18, r25	; 0x12
    2bb8:	89 8b       	std	Y+17, r24	; 0x11
    2bba:	89 89       	ldd	r24, Y+17	; 0x11
    2bbc:	9a 89       	ldd	r25, Y+18	; 0x12
    2bbe:	01 97       	sbiw	r24, 0x01	; 1
    2bc0:	f1 f7       	brne	.-4      	; 0x2bbe <Stepper_Rotate+0x344>
    2bc2:	9a 8b       	std	Y+18, r25	; 0x12
    2bc4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc6:	8b 89       	ldd	r24, Y+19	; 0x13
    2bc8:	9c 89       	ldd	r25, Y+20	; 0x14
    2bca:	01 97       	sbiw	r24, 0x01	; 1
    2bcc:	9c 8b       	std	Y+20, r25	; 0x14
    2bce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bd0:	8b 89       	ldd	r24, Y+19	; 0x13
    2bd2:	9c 89       	ldd	r25, Y+20	; 0x14
    2bd4:	00 97       	sbiw	r24, 0x00	; 0
    2bd6:	69 f7       	brne	.-38     	; 0x2bb2 <Stepper_Rotate+0x338>
    2bd8:	14 c0       	rjmp	.+40     	; 0x2c02 <Stepper_Rotate+0x388>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bda:	6d 89       	ldd	r22, Y+21	; 0x15
    2bdc:	7e 89       	ldd	r23, Y+22	; 0x16
    2bde:	8f 89       	ldd	r24, Y+23	; 0x17
    2be0:	98 8d       	ldd	r25, Y+24	; 0x18
    2be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be6:	dc 01       	movw	r26, r24
    2be8:	cb 01       	movw	r24, r22
    2bea:	9c 8b       	std	Y+20, r25	; 0x14
    2bec:	8b 8b       	std	Y+19, r24	; 0x13
    2bee:	8b 89       	ldd	r24, Y+19	; 0x13
    2bf0:	9c 89       	ldd	r25, Y+20	; 0x14
    2bf2:	98 8b       	std	Y+16, r25	; 0x10
    2bf4:	8f 87       	std	Y+15, r24	; 0x0f
    2bf6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bf8:	98 89       	ldd	r25, Y+16	; 0x10
    2bfa:	01 97       	sbiw	r24, 0x01	; 1
    2bfc:	f1 f7       	brne	.-4      	; 0x2bfa <Stepper_Rotate+0x380>
    2bfe:	98 8b       	std	Y+16, r25	; 0x10
    2c00:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(20);
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S1, LOW);
    2c02:	82 e0       	ldi	r24, 0x02	; 2
    2c04:	60 e0       	ldi	r22, 0x00	; 0
    2c06:	40 e0       	ldi	r20, 0x00	; 0
    2c08:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S2, LOW);
    2c0c:	82 e0       	ldi	r24, 0x02	; 2
    2c0e:	65 e0       	ldi	r22, 0x05	; 5
    2c10:	40 e0       	ldi	r20, 0x00	; 0
    2c12:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S3, LOW);
    2c16:	82 e0       	ldi	r24, 0x02	; 2
    2c18:	66 e0       	ldi	r22, 0x06	; 6
    2c1a:	40 e0       	ldi	r20, 0x00	; 0
    2c1c:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S4, HIGH);
    2c20:	82 e0       	ldi	r24, 0x02	; 2
    2c22:	67 e0       	ldi	r22, 0x07	; 7
    2c24:	41 e0       	ldi	r20, 0x01	; 1
    2c26:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
    2c2a:	80 e0       	ldi	r24, 0x00	; 0
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	a0 ea       	ldi	r26, 0xA0	; 160
    2c30:	b1 e4       	ldi	r27, 0x41	; 65
    2c32:	8b 87       	std	Y+11, r24	; 0x0b
    2c34:	9c 87       	std	Y+12, r25	; 0x0c
    2c36:	ad 87       	std	Y+13, r26	; 0x0d
    2c38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c40:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c42:	20 e0       	ldi	r18, 0x00	; 0
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	4a e7       	ldi	r20, 0x7A	; 122
    2c48:	55 e4       	ldi	r21, 0x45	; 69
    2c4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c4e:	dc 01       	movw	r26, r24
    2c50:	cb 01       	movw	r24, r22
    2c52:	8f 83       	std	Y+7, r24	; 0x07
    2c54:	98 87       	std	Y+8, r25	; 0x08
    2c56:	a9 87       	std	Y+9, r26	; 0x09
    2c58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c5c:	78 85       	ldd	r23, Y+8	; 0x08
    2c5e:	89 85       	ldd	r24, Y+9	; 0x09
    2c60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	40 e8       	ldi	r20, 0x80	; 128
    2c68:	5f e3       	ldi	r21, 0x3F	; 63
    2c6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c6e:	88 23       	and	r24, r24
    2c70:	2c f4       	brge	.+10     	; 0x2c7c <Stepper_Rotate+0x402>
		__ticks = 1;
    2c72:	81 e0       	ldi	r24, 0x01	; 1
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	9e 83       	std	Y+6, r25	; 0x06
    2c78:	8d 83       	std	Y+5, r24	; 0x05
    2c7a:	3f c0       	rjmp	.+126    	; 0x2cfa <Stepper_Rotate+0x480>
	else if (__tmp > 65535)
    2c7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c7e:	78 85       	ldd	r23, Y+8	; 0x08
    2c80:	89 85       	ldd	r24, Y+9	; 0x09
    2c82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	3f ef       	ldi	r19, 0xFF	; 255
    2c88:	4f e7       	ldi	r20, 0x7F	; 127
    2c8a:	57 e4       	ldi	r21, 0x47	; 71
    2c8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c90:	18 16       	cp	r1, r24
    2c92:	4c f5       	brge	.+82     	; 0x2ce6 <Stepper_Rotate+0x46c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c94:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c96:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c98:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	40 e2       	ldi	r20, 0x20	; 32
    2ca2:	51 e4       	ldi	r21, 0x41	; 65
    2ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca8:	dc 01       	movw	r26, r24
    2caa:	cb 01       	movw	r24, r22
    2cac:	bc 01       	movw	r22, r24
    2cae:	cd 01       	movw	r24, r26
    2cb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	cb 01       	movw	r24, r22
    2cb8:	9e 83       	std	Y+6, r25	; 0x06
    2cba:	8d 83       	std	Y+5, r24	; 0x05
    2cbc:	0f c0       	rjmp	.+30     	; 0x2cdc <Stepper_Rotate+0x462>
    2cbe:	80 e9       	ldi	r24, 0x90	; 144
    2cc0:	91 e0       	ldi	r25, 0x01	; 1
    2cc2:	9c 83       	std	Y+4, r25	; 0x04
    2cc4:	8b 83       	std	Y+3, r24	; 0x03
    2cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cca:	01 97       	sbiw	r24, 0x01	; 1
    2ccc:	f1 f7       	brne	.-4      	; 0x2cca <Stepper_Rotate+0x450>
    2cce:	9c 83       	std	Y+4, r25	; 0x04
    2cd0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd6:	01 97       	sbiw	r24, 0x01	; 1
    2cd8:	9e 83       	std	Y+6, r25	; 0x06
    2cda:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cde:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce0:	00 97       	sbiw	r24, 0x00	; 0
    2ce2:	69 f7       	brne	.-38     	; 0x2cbe <Stepper_Rotate+0x444>
    2ce4:	14 c0       	rjmp	.+40     	; 0x2d0e <Stepper_Rotate+0x494>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ce6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce8:	78 85       	ldd	r23, Y+8	; 0x08
    2cea:	89 85       	ldd	r24, Y+9	; 0x09
    2cec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	cb 01       	movw	r24, r22
    2cf6:	9e 83       	std	Y+6, r25	; 0x06
    2cf8:	8d 83       	std	Y+5, r24	; 0x05
    2cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    2cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cfe:	9a 83       	std	Y+2, r25	; 0x02
    2d00:	89 83       	std	Y+1, r24	; 0x01
    2d02:	89 81       	ldd	r24, Y+1	; 0x01
    2d04:	9a 81       	ldd	r25, Y+2	; 0x02
    2d06:	01 97       	sbiw	r24, 0x01	; 1
    2d08:	f1 f7       	brne	.-4      	; 0x2d06 <Stepper_Rotate+0x48c>
    2d0a:	9a 83       	std	Y+2, r25	; 0x02
    2d0c:	89 83       	std	Y+1, r24	; 0x01
{
	u16 stepsNum = (degree * 2048UL)/360;
	u16 IterationsNum = stepsNum/4;

	u16 i=0;
	for(i=0;i<IterationsNum;i++)
    2d0e:	89 ad       	ldd	r24, Y+57	; 0x39
    2d10:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d12:	01 96       	adiw	r24, 0x01	; 1
    2d14:	9a af       	std	Y+58, r25	; 0x3a
    2d16:	89 af       	std	Y+57, r24	; 0x39
    2d18:	29 ad       	ldd	r18, Y+57	; 0x39
    2d1a:	3a ad       	ldd	r19, Y+58	; 0x3a
    2d1c:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d1e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d20:	28 17       	cp	r18, r24
    2d22:	39 07       	cpc	r19, r25
    2d24:	08 f4       	brcc	.+2      	; 0x2d28 <Stepper_Rotate+0x4ae>
    2d26:	db cd       	rjmp	.-1098   	; 0x28de <Stepper_Rotate+0x64>
		_delay_ms(20);
	}



}
    2d28:	ef 96       	adiw	r28, 0x3f	; 63
    2d2a:	0f b6       	in	r0, 0x3f	; 63
    2d2c:	f8 94       	cli
    2d2e:	de bf       	out	0x3e, r29	; 62
    2d30:	0f be       	out	0x3f, r0	; 63
    2d32:	cd bf       	out	0x3d, r28	; 61
    2d34:	cf 91       	pop	r28
    2d36:	df 91       	pop	r29
    2d38:	08 95       	ret

00002d3a <Servo_Init>:

TIMER1_Config_t Timer1Cfg = {0};


void Servo_Init(void)
{
    2d3a:	df 93       	push	r29
    2d3c:	cf 93       	push	r28
    2d3e:	cd b7       	in	r28, 0x3d	; 61
    2d40:	de b7       	in	r29, 0x3e	; 62



	Timer1Cfg.mode = TIMER1_FAST_PWM_ICR1_TOP;
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	80 93 d0 02 	sts	0x02D0, r24
	Timer1Cfg.prescalar = TIMER1_PRESCALAR_64;
    2d48:	83 e0       	ldi	r24, 0x03	; 3
    2d4a:	80 93 d1 02 	sts	0x02D1, r24
	Timer1Cfg.OC1A_mode = OCRA_NON_INVERTING;
    2d4e:	82 e0       	ldi	r24, 0x02	; 2
    2d50:	80 93 d2 02 	sts	0x02D2, r24
	Timer1Cfg.OC1B_mode = OCRB_DISCONNECTED;
    2d54:	10 92 d3 02 	sts	0x02D3, r1
	TIMER1_Init(&Timer1Cfg);
    2d58:	80 ed       	ldi	r24, 0xD0	; 208
    2d5a:	92 e0       	ldi	r25, 0x02	; 2
    2d5c:	0e 94 c8 09 	call	0x1390	; 0x1390 <TIMER1_Init>



}
    2d60:	cf 91       	pop	r28
    2d62:	df 91       	pop	r29
    2d64:	08 95       	ret

00002d66 <Servo_Turn>:



// From 0 to 180
void Servo_Turn(int angle)
{
    2d66:	df 93       	push	r29
    2d68:	cf 93       	push	r28
    2d6a:	00 d0       	rcall	.+0      	; 0x2d6c <Servo_Turn+0x6>
    2d6c:	00 d0       	rcall	.+0      	; 0x2d6e <Servo_Turn+0x8>
    2d6e:	00 d0       	rcall	.+0      	; 0x2d70 <Servo_Turn+0xa>
    2d70:	cd b7       	in	r28, 0x3d	; 61
    2d72:	de b7       	in	r29, 0x3e	; 62
    2d74:	9e 83       	std	Y+6, r25	; 0x06
    2d76:	8d 83       	std	Y+5, r24	; 0x05
//	DIO_ES_tSetPinDirection(DIO_U8_PORT_D, DIO_U8_PIN_5, OUTPUT);

	// Calculate the pulse width based on the desired angle
	u16 pulse_width_microseconds = 1500 + ((angle / 180.0) * 1000);
    2d78:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d7c:	aa 27       	eor	r26, r26
    2d7e:	97 fd       	sbrc	r25, 7
    2d80:	a0 95       	com	r26
    2d82:	ba 2f       	mov	r27, r26
    2d84:	bc 01       	movw	r22, r24
    2d86:	cd 01       	movw	r24, r26
    2d88:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	bc 01       	movw	r22, r24
    2d92:	cd 01       	movw	r24, r26
    2d94:	20 e0       	ldi	r18, 0x00	; 0
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	44 e3       	ldi	r20, 0x34	; 52
    2d9a:	53 e4       	ldi	r21, 0x43	; 67
    2d9c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2da0:	dc 01       	movw	r26, r24
    2da2:	cb 01       	movw	r24, r22
    2da4:	bc 01       	movw	r22, r24
    2da6:	cd 01       	movw	r24, r26
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	4a e7       	ldi	r20, 0x7A	; 122
    2dae:	54 e4       	ldi	r21, 0x44	; 68
    2db0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db4:	dc 01       	movw	r26, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	bc 01       	movw	r22, r24
    2dba:	cd 01       	movw	r24, r26
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	30 e8       	ldi	r19, 0x80	; 128
    2dc0:	4b eb       	ldi	r20, 0xBB	; 187
    2dc2:	54 e4       	ldi	r21, 0x44	; 68
    2dc4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2dc8:	dc 01       	movw	r26, r24
    2dca:	cb 01       	movw	r24, r22
    2dcc:	bc 01       	movw	r22, r24
    2dce:	cd 01       	movw	r24, r26
    2dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	cb 01       	movw	r24, r22
    2dd8:	9c 83       	std	Y+4, r25	; 0x04
    2dda:	8b 83       	std	Y+3, r24	; 0x03
	u16 pulse_width_counts = pulse_width_microseconds / 4; // Timer 1 resolution prescaler is 64
    2ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dde:	9c 81       	ldd	r25, Y+4	; 0x04
    2de0:	96 95       	lsr	r25
    2de2:	87 95       	ror	r24
    2de4:	96 95       	lsr	r25
    2de6:	87 95       	ror	r24
    2de8:	9a 83       	std	Y+2, r25	; 0x02
    2dea:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = pulse_width_counts - 1;
    2dec:	ea e4       	ldi	r30, 0x4A	; 74
    2dee:	f0 e0       	ldi	r31, 0x00	; 0
    2df0:	89 81       	ldd	r24, Y+1	; 0x01
    2df2:	9a 81       	ldd	r25, Y+2	; 0x02
    2df4:	01 97       	sbiw	r24, 0x01	; 1
    2df6:	91 83       	std	Z+1, r25	; 0x01
    2df8:	80 83       	st	Z, r24
	ICR1 = 4999;			// 20 ms in data sheet of servo
    2dfa:	e6 e4       	ldi	r30, 0x46	; 70
    2dfc:	f0 e0       	ldi	r31, 0x00	; 0
    2dfe:	87 e8       	ldi	r24, 0x87	; 135
    2e00:	93 e1       	ldi	r25, 0x13	; 19
    2e02:	91 83       	std	Z+1, r25	; 0x01
    2e04:	80 83       	st	Z, r24


	SET_BIT(TCCR1A,COM1A1);
    2e06:	af e4       	ldi	r26, 0x4F	; 79
    2e08:	b0 e0       	ldi	r27, 0x00	; 0
    2e0a:	ef e4       	ldi	r30, 0x4F	; 79
    2e0c:	f0 e0       	ldi	r31, 0x00	; 0
    2e0e:	80 81       	ld	r24, Z
    2e10:	80 68       	ori	r24, 0x80	; 128
    2e12:	8c 93       	st	X, r24
	Servo_Init();
    2e14:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <Servo_Init>



	// Limit the angle to the range -90 to +90 degrees
	if (angle < -90)
    2e18:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1c:	2f ef       	ldi	r18, 0xFF	; 255
    2e1e:	86 3a       	cpi	r24, 0xA6	; 166
    2e20:	92 07       	cpc	r25, r18
    2e22:	2c f4       	brge	.+10     	; 0x2e2e <Servo_Turn+0xc8>
		angle = -90;
    2e24:	86 ea       	ldi	r24, 0xA6	; 166
    2e26:	9f ef       	ldi	r25, 0xFF	; 255
    2e28:	9e 83       	std	Y+6, r25	; 0x06
    2e2a:	8d 83       	std	Y+5, r24	; 0x05
    2e2c:	09 c0       	rjmp	.+18     	; 0x2e40 <Servo_Turn+0xda>
	else if (angle > 90)
    2e2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e30:	9e 81       	ldd	r25, Y+6	; 0x06
    2e32:	8b 35       	cpi	r24, 0x5B	; 91
    2e34:	91 05       	cpc	r25, r1
    2e36:	24 f0       	brlt	.+8      	; 0x2e40 <Servo_Turn+0xda>
		angle = 90;
    2e38:	8a e5       	ldi	r24, 0x5A	; 90
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	9e 83       	std	Y+6, r25	; 0x06
    2e3e:	8d 83       	std	Y+5, r24	; 0x05




}
    2e40:	26 96       	adiw	r28, 0x06	; 6
    2e42:	0f b6       	in	r0, 0x3f	; 63
    2e44:	f8 94       	cli
    2e46:	de bf       	out	0x3e, r29	; 62
    2e48:	0f be       	out	0x3f, r0	; 63
    2e4a:	cd bf       	out	0x3d, r28	; 61
    2e4c:	cf 91       	pop	r28
    2e4e:	df 91       	pop	r29
    2e50:	08 95       	ret

00002e52 <Servo_Stop>:

void Servo_Stop()
{
    2e52:	df 93       	push	r29
    2e54:	cf 93       	push	r28
    2e56:	cd b7       	in	r28, 0x3d	; 61
    2e58:	de b7       	in	r29, 0x3e	; 62
	// Disable the OC1A interrupt
	TIMER1_Stop();
    2e5a:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <TIMER1_Stop>
}
    2e5e:	cf 91       	pop	r28
    2e60:	df 91       	pop	r29
    2e62:	08 95       	ret

00002e64 <LCD_ES_tTrigger_Enable>:
//ProtoType of static is defined in source file itself(Private declaration)
static ES_t LCD_ES_tTrigger_Enable(void);
static ES_t LCD_ES_tSet_Cursor_Pos(u8 row,u8 column);

//We make it static cuz we won't use it anywhere but here
static ES_t LCD_ES_tTrigger_Enable(void){
    2e64:	df 93       	push	r29
    2e66:	cf 93       	push	r28
    2e68:	cd b7       	in	r28, 0x3d	; 61
    2e6a:	de b7       	in	r29, 0x3e	; 62
    2e6c:	e0 97       	sbiw	r28, 0x30	; 48
    2e6e:	0f b6       	in	r0, 0x3f	; 63
    2e70:	f8 94       	cli
    2e72:	de bf       	out	0x3e, r29	; 62
    2e74:	0f be       	out	0x3f, r0	; 63
    2e76:	cd bf       	out	0x3d, r28	; 61
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, HIGH);
    2e78:	81 e0       	ldi	r24, 0x01	; 1
    2e7a:	63 e0       	ldi	r22, 0x03	; 3
    2e7c:	41 e0       	ldi	r20, 0x01	; 1
    2e7e:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
    2e82:	80 e0       	ldi	r24, 0x00	; 0
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	a0 e2       	ldi	r26, 0x20	; 32
    2e88:	b1 e4       	ldi	r27, 0x41	; 65
    2e8a:	8d a7       	std	Y+45, r24	; 0x2d
    2e8c:	9e a7       	std	Y+46, r25	; 0x2e
    2e8e:	af a7       	std	Y+47, r26	; 0x2f
    2e90:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e92:	6d a5       	ldd	r22, Y+45	; 0x2d
    2e94:	7e a5       	ldd	r23, Y+46	; 0x2e
    2e96:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e98:	98 a9       	ldd	r25, Y+48	; 0x30
    2e9a:	2b ea       	ldi	r18, 0xAB	; 171
    2e9c:	3a ea       	ldi	r19, 0xAA	; 170
    2e9e:	4a ea       	ldi	r20, 0xAA	; 170
    2ea0:	50 e4       	ldi	r21, 0x40	; 64
    2ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	89 a7       	std	Y+41, r24	; 0x29
    2eac:	9a a7       	std	Y+42, r25	; 0x2a
    2eae:	ab a7       	std	Y+43, r26	; 0x2b
    2eb0:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2eb2:	69 a5       	ldd	r22, Y+41	; 0x29
    2eb4:	7a a5       	ldd	r23, Y+42	; 0x2a
    2eb6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2eb8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	40 e8       	ldi	r20, 0x80	; 128
    2ec0:	5f e3       	ldi	r21, 0x3F	; 63
    2ec2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ec6:	88 23       	and	r24, r24
    2ec8:	1c f4       	brge	.+6      	; 0x2ed0 <LCD_ES_tTrigger_Enable+0x6c>
		__ticks = 1;
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	88 a7       	std	Y+40, r24	; 0x28
    2ece:	91 c0       	rjmp	.+290    	; 0x2ff2 <LCD_ES_tTrigger_Enable+0x18e>
	else if (__tmp > 255)
    2ed0:	69 a5       	ldd	r22, Y+41	; 0x29
    2ed2:	7a a5       	ldd	r23, Y+42	; 0x2a
    2ed4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ed6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	4f e7       	ldi	r20, 0x7F	; 127
    2ede:	53 e4       	ldi	r21, 0x43	; 67
    2ee0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ee4:	18 16       	cp	r1, r24
    2ee6:	0c f0       	brlt	.+2      	; 0x2eea <LCD_ES_tTrigger_Enable+0x86>
    2ee8:	7b c0       	rjmp	.+246    	; 0x2fe0 <LCD_ES_tTrigger_Enable+0x17c>
	{
		_delay_ms(__us / 1000.0);
    2eea:	6d a5       	ldd	r22, Y+45	; 0x2d
    2eec:	7e a5       	ldd	r23, Y+46	; 0x2e
    2eee:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ef0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ef2:	20 e0       	ldi	r18, 0x00	; 0
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	4a e7       	ldi	r20, 0x7A	; 122
    2ef8:	54 e4       	ldi	r21, 0x44	; 68
    2efa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2efe:	dc 01       	movw	r26, r24
    2f00:	cb 01       	movw	r24, r22
    2f02:	8c a3       	std	Y+36, r24	; 0x24
    2f04:	9d a3       	std	Y+37, r25	; 0x25
    2f06:	ae a3       	std	Y+38, r26	; 0x26
    2f08:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f0a:	6c a1       	ldd	r22, Y+36	; 0x24
    2f0c:	7d a1       	ldd	r23, Y+37	; 0x25
    2f0e:	8e a1       	ldd	r24, Y+38	; 0x26
    2f10:	9f a1       	ldd	r25, Y+39	; 0x27
    2f12:	20 e0       	ldi	r18, 0x00	; 0
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	4a e7       	ldi	r20, 0x7A	; 122
    2f18:	55 e4       	ldi	r21, 0x45	; 69
    2f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f1e:	dc 01       	movw	r26, r24
    2f20:	cb 01       	movw	r24, r22
    2f22:	88 a3       	std	Y+32, r24	; 0x20
    2f24:	99 a3       	std	Y+33, r25	; 0x21
    2f26:	aa a3       	std	Y+34, r26	; 0x22
    2f28:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2f2a:	68 a1       	ldd	r22, Y+32	; 0x20
    2f2c:	79 a1       	ldd	r23, Y+33	; 0x21
    2f2e:	8a a1       	ldd	r24, Y+34	; 0x22
    2f30:	9b a1       	ldd	r25, Y+35	; 0x23
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	40 e8       	ldi	r20, 0x80	; 128
    2f38:	5f e3       	ldi	r21, 0x3F	; 63
    2f3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f3e:	88 23       	and	r24, r24
    2f40:	2c f4       	brge	.+10     	; 0x2f4c <LCD_ES_tTrigger_Enable+0xe8>
		__ticks = 1;
    2f42:	81 e0       	ldi	r24, 0x01	; 1
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	9f 8f       	std	Y+31, r25	; 0x1f
    2f48:	8e 8f       	std	Y+30, r24	; 0x1e
    2f4a:	3f c0       	rjmp	.+126    	; 0x2fca <LCD_ES_tTrigger_Enable+0x166>
	else if (__tmp > 65535)
    2f4c:	68 a1       	ldd	r22, Y+32	; 0x20
    2f4e:	79 a1       	ldd	r23, Y+33	; 0x21
    2f50:	8a a1       	ldd	r24, Y+34	; 0x22
    2f52:	9b a1       	ldd	r25, Y+35	; 0x23
    2f54:	20 e0       	ldi	r18, 0x00	; 0
    2f56:	3f ef       	ldi	r19, 0xFF	; 255
    2f58:	4f e7       	ldi	r20, 0x7F	; 127
    2f5a:	57 e4       	ldi	r21, 0x47	; 71
    2f5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f60:	18 16       	cp	r1, r24
    2f62:	4c f5       	brge	.+82     	; 0x2fb6 <LCD_ES_tTrigger_Enable+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f64:	6c a1       	ldd	r22, Y+36	; 0x24
    2f66:	7d a1       	ldd	r23, Y+37	; 0x25
    2f68:	8e a1       	ldd	r24, Y+38	; 0x26
    2f6a:	9f a1       	ldd	r25, Y+39	; 0x27
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	40 e2       	ldi	r20, 0x20	; 32
    2f72:	51 e4       	ldi	r21, 0x41	; 65
    2f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f78:	dc 01       	movw	r26, r24
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	bc 01       	movw	r22, r24
    2f7e:	cd 01       	movw	r24, r26
    2f80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f84:	dc 01       	movw	r26, r24
    2f86:	cb 01       	movw	r24, r22
    2f88:	9f 8f       	std	Y+31, r25	; 0x1f
    2f8a:	8e 8f       	std	Y+30, r24	; 0x1e
    2f8c:	0f c0       	rjmp	.+30     	; 0x2fac <LCD_ES_tTrigger_Enable+0x148>
    2f8e:	80 e9       	ldi	r24, 0x90	; 144
    2f90:	91 e0       	ldi	r25, 0x01	; 1
    2f92:	9d 8f       	std	Y+29, r25	; 0x1d
    2f94:	8c 8f       	std	Y+28, r24	; 0x1c
    2f96:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2f98:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2f9a:	01 97       	sbiw	r24, 0x01	; 1
    2f9c:	f1 f7       	brne	.-4      	; 0x2f9a <LCD_ES_tTrigger_Enable+0x136>
    2f9e:	9d 8f       	std	Y+29, r25	; 0x1d
    2fa0:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fa2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2fa4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2fa6:	01 97       	sbiw	r24, 0x01	; 1
    2fa8:	9f 8f       	std	Y+31, r25	; 0x1f
    2faa:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2fae:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2fb0:	00 97       	sbiw	r24, 0x00	; 0
    2fb2:	69 f7       	brne	.-38     	; 0x2f8e <LCD_ES_tTrigger_Enable+0x12a>
    2fb4:	24 c0       	rjmp	.+72     	; 0x2ffe <LCD_ES_tTrigger_Enable+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fb6:	68 a1       	ldd	r22, Y+32	; 0x20
    2fb8:	79 a1       	ldd	r23, Y+33	; 0x21
    2fba:	8a a1       	ldd	r24, Y+34	; 0x22
    2fbc:	9b a1       	ldd	r25, Y+35	; 0x23
    2fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	9f 8f       	std	Y+31, r25	; 0x1f
    2fc8:	8e 8f       	std	Y+30, r24	; 0x1e
    2fca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2fcc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2fce:	9b 8f       	std	Y+27, r25	; 0x1b
    2fd0:	8a 8f       	std	Y+26, r24	; 0x1a
    2fd2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2fd4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2fd6:	01 97       	sbiw	r24, 0x01	; 1
    2fd8:	f1 f7       	brne	.-4      	; 0x2fd6 <LCD_ES_tTrigger_Enable+0x172>
    2fda:	9b 8f       	std	Y+27, r25	; 0x1b
    2fdc:	8a 8f       	std	Y+26, r24	; 0x1a
    2fde:	0f c0       	rjmp	.+30     	; 0x2ffe <LCD_ES_tTrigger_Enable+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2fe0:	69 a5       	ldd	r22, Y+41	; 0x29
    2fe2:	7a a5       	ldd	r23, Y+42	; 0x2a
    2fe4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fe6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fec:	dc 01       	movw	r26, r24
    2fee:	cb 01       	movw	r24, r22
    2ff0:	88 a7       	std	Y+40, r24	; 0x28
    2ff2:	88 a5       	ldd	r24, Y+40	; 0x28
    2ff4:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ff6:	89 8d       	ldd	r24, Y+25	; 0x19
    2ff8:	8a 95       	dec	r24
    2ffa:	f1 f7       	brne	.-4      	; 0x2ff8 <LCD_ES_tTrigger_Enable+0x194>
    2ffc:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, LOW);
    2ffe:	81 e0       	ldi	r24, 0x01	; 1
    3000:	63 e0       	ldi	r22, 0x03	; 3
    3002:	40 e0       	ldi	r20, 0x00	; 0
    3004:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
    3008:	80 e0       	ldi	r24, 0x00	; 0
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	aa ef       	ldi	r26, 0xFA	; 250
    300e:	b4 e4       	ldi	r27, 0x44	; 68
    3010:	8d 8b       	std	Y+21, r24	; 0x15
    3012:	9e 8b       	std	Y+22, r25	; 0x16
    3014:	af 8b       	std	Y+23, r26	; 0x17
    3016:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3018:	6d 89       	ldd	r22, Y+21	; 0x15
    301a:	7e 89       	ldd	r23, Y+22	; 0x16
    301c:	8f 89       	ldd	r24, Y+23	; 0x17
    301e:	98 8d       	ldd	r25, Y+24	; 0x18
    3020:	2b ea       	ldi	r18, 0xAB	; 171
    3022:	3a ea       	ldi	r19, 0xAA	; 170
    3024:	4a ea       	ldi	r20, 0xAA	; 170
    3026:	50 e4       	ldi	r21, 0x40	; 64
    3028:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    302c:	dc 01       	movw	r26, r24
    302e:	cb 01       	movw	r24, r22
    3030:	89 8b       	std	Y+17, r24	; 0x11
    3032:	9a 8b       	std	Y+18, r25	; 0x12
    3034:	ab 8b       	std	Y+19, r26	; 0x13
    3036:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3038:	69 89       	ldd	r22, Y+17	; 0x11
    303a:	7a 89       	ldd	r23, Y+18	; 0x12
    303c:	8b 89       	ldd	r24, Y+19	; 0x13
    303e:	9c 89       	ldd	r25, Y+20	; 0x14
    3040:	20 e0       	ldi	r18, 0x00	; 0
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	40 e8       	ldi	r20, 0x80	; 128
    3046:	5f e3       	ldi	r21, 0x3F	; 63
    3048:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    304c:	88 23       	and	r24, r24
    304e:	1c f4       	brge	.+6      	; 0x3056 <LCD_ES_tTrigger_Enable+0x1f2>
		__ticks = 1;
    3050:	81 e0       	ldi	r24, 0x01	; 1
    3052:	88 8b       	std	Y+16, r24	; 0x10
    3054:	91 c0       	rjmp	.+290    	; 0x3178 <LCD_ES_tTrigger_Enable+0x314>
	else if (__tmp > 255)
    3056:	69 89       	ldd	r22, Y+17	; 0x11
    3058:	7a 89       	ldd	r23, Y+18	; 0x12
    305a:	8b 89       	ldd	r24, Y+19	; 0x13
    305c:	9c 89       	ldd	r25, Y+20	; 0x14
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	4f e7       	ldi	r20, 0x7F	; 127
    3064:	53 e4       	ldi	r21, 0x43	; 67
    3066:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    306a:	18 16       	cp	r1, r24
    306c:	0c f0       	brlt	.+2      	; 0x3070 <LCD_ES_tTrigger_Enable+0x20c>
    306e:	7b c0       	rjmp	.+246    	; 0x3166 <LCD_ES_tTrigger_Enable+0x302>
	{
		_delay_ms(__us / 1000.0);
    3070:	6d 89       	ldd	r22, Y+21	; 0x15
    3072:	7e 89       	ldd	r23, Y+22	; 0x16
    3074:	8f 89       	ldd	r24, Y+23	; 0x17
    3076:	98 8d       	ldd	r25, Y+24	; 0x18
    3078:	20 e0       	ldi	r18, 0x00	; 0
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	4a e7       	ldi	r20, 0x7A	; 122
    307e:	54 e4       	ldi	r21, 0x44	; 68
    3080:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3084:	dc 01       	movw	r26, r24
    3086:	cb 01       	movw	r24, r22
    3088:	8c 87       	std	Y+12, r24	; 0x0c
    308a:	9d 87       	std	Y+13, r25	; 0x0d
    308c:	ae 87       	std	Y+14, r26	; 0x0e
    308e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3090:	6c 85       	ldd	r22, Y+12	; 0x0c
    3092:	7d 85       	ldd	r23, Y+13	; 0x0d
    3094:	8e 85       	ldd	r24, Y+14	; 0x0e
    3096:	9f 85       	ldd	r25, Y+15	; 0x0f
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	4a e7       	ldi	r20, 0x7A	; 122
    309e:	55 e4       	ldi	r21, 0x45	; 69
    30a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	88 87       	std	Y+8, r24	; 0x08
    30aa:	99 87       	std	Y+9, r25	; 0x09
    30ac:	aa 87       	std	Y+10, r26	; 0x0a
    30ae:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    30b0:	68 85       	ldd	r22, Y+8	; 0x08
    30b2:	79 85       	ldd	r23, Y+9	; 0x09
    30b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    30b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	40 e8       	ldi	r20, 0x80	; 128
    30be:	5f e3       	ldi	r21, 0x3F	; 63
    30c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30c4:	88 23       	and	r24, r24
    30c6:	2c f4       	brge	.+10     	; 0x30d2 <LCD_ES_tTrigger_Enable+0x26e>
		__ticks = 1;
    30c8:	81 e0       	ldi	r24, 0x01	; 1
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	9f 83       	std	Y+7, r25	; 0x07
    30ce:	8e 83       	std	Y+6, r24	; 0x06
    30d0:	3f c0       	rjmp	.+126    	; 0x3150 <LCD_ES_tTrigger_Enable+0x2ec>
	else if (__tmp > 65535)
    30d2:	68 85       	ldd	r22, Y+8	; 0x08
    30d4:	79 85       	ldd	r23, Y+9	; 0x09
    30d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    30d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    30da:	20 e0       	ldi	r18, 0x00	; 0
    30dc:	3f ef       	ldi	r19, 0xFF	; 255
    30de:	4f e7       	ldi	r20, 0x7F	; 127
    30e0:	57 e4       	ldi	r21, 0x47	; 71
    30e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30e6:	18 16       	cp	r1, r24
    30e8:	4c f5       	brge	.+82     	; 0x313c <LCD_ES_tTrigger_Enable+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ea:	6c 85       	ldd	r22, Y+12	; 0x0c
    30ec:	7d 85       	ldd	r23, Y+13	; 0x0d
    30ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    30f0:	9f 85       	ldd	r25, Y+15	; 0x0f
    30f2:	20 e0       	ldi	r18, 0x00	; 0
    30f4:	30 e0       	ldi	r19, 0x00	; 0
    30f6:	40 e2       	ldi	r20, 0x20	; 32
    30f8:	51 e4       	ldi	r21, 0x41	; 65
    30fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30fe:	dc 01       	movw	r26, r24
    3100:	cb 01       	movw	r24, r22
    3102:	bc 01       	movw	r22, r24
    3104:	cd 01       	movw	r24, r26
    3106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310a:	dc 01       	movw	r26, r24
    310c:	cb 01       	movw	r24, r22
    310e:	9f 83       	std	Y+7, r25	; 0x07
    3110:	8e 83       	std	Y+6, r24	; 0x06
    3112:	0f c0       	rjmp	.+30     	; 0x3132 <LCD_ES_tTrigger_Enable+0x2ce>
    3114:	80 e9       	ldi	r24, 0x90	; 144
    3116:	91 e0       	ldi	r25, 0x01	; 1
    3118:	9d 83       	std	Y+5, r25	; 0x05
    311a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    311c:	8c 81       	ldd	r24, Y+4	; 0x04
    311e:	9d 81       	ldd	r25, Y+5	; 0x05
    3120:	01 97       	sbiw	r24, 0x01	; 1
    3122:	f1 f7       	brne	.-4      	; 0x3120 <LCD_ES_tTrigger_Enable+0x2bc>
    3124:	9d 83       	std	Y+5, r25	; 0x05
    3126:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3128:	8e 81       	ldd	r24, Y+6	; 0x06
    312a:	9f 81       	ldd	r25, Y+7	; 0x07
    312c:	01 97       	sbiw	r24, 0x01	; 1
    312e:	9f 83       	std	Y+7, r25	; 0x07
    3130:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3132:	8e 81       	ldd	r24, Y+6	; 0x06
    3134:	9f 81       	ldd	r25, Y+7	; 0x07
    3136:	00 97       	sbiw	r24, 0x00	; 0
    3138:	69 f7       	brne	.-38     	; 0x3114 <LCD_ES_tTrigger_Enable+0x2b0>
    313a:	24 c0       	rjmp	.+72     	; 0x3184 <LCD_ES_tTrigger_Enable+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    313c:	68 85       	ldd	r22, Y+8	; 0x08
    313e:	79 85       	ldd	r23, Y+9	; 0x09
    3140:	8a 85       	ldd	r24, Y+10	; 0x0a
    3142:	9b 85       	ldd	r25, Y+11	; 0x0b
    3144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3148:	dc 01       	movw	r26, r24
    314a:	cb 01       	movw	r24, r22
    314c:	9f 83       	std	Y+7, r25	; 0x07
    314e:	8e 83       	std	Y+6, r24	; 0x06
    3150:	8e 81       	ldd	r24, Y+6	; 0x06
    3152:	9f 81       	ldd	r25, Y+7	; 0x07
    3154:	9b 83       	std	Y+3, r25	; 0x03
    3156:	8a 83       	std	Y+2, r24	; 0x02
    3158:	8a 81       	ldd	r24, Y+2	; 0x02
    315a:	9b 81       	ldd	r25, Y+3	; 0x03
    315c:	01 97       	sbiw	r24, 0x01	; 1
    315e:	f1 f7       	brne	.-4      	; 0x315c <LCD_ES_tTrigger_Enable+0x2f8>
    3160:	9b 83       	std	Y+3, r25	; 0x03
    3162:	8a 83       	std	Y+2, r24	; 0x02
    3164:	0f c0       	rjmp	.+30     	; 0x3184 <LCD_ES_tTrigger_Enable+0x320>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3166:	69 89       	ldd	r22, Y+17	; 0x11
    3168:	7a 89       	ldd	r23, Y+18	; 0x12
    316a:	8b 89       	ldd	r24, Y+19	; 0x13
    316c:	9c 89       	ldd	r25, Y+20	; 0x14
    316e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3172:	dc 01       	movw	r26, r24
    3174:	cb 01       	movw	r24, r22
    3176:	88 8b       	std	Y+16, r24	; 0x10
    3178:	88 89       	ldd	r24, Y+16	; 0x10
    317a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    317c:	89 81       	ldd	r24, Y+1	; 0x01
    317e:	8a 95       	dec	r24
    3180:	f1 f7       	brne	.-4      	; 0x317e <LCD_ES_tTrigger_Enable+0x31a>
    3182:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2000);
	return ES_OK;
    3184:	80 e0       	ldi	r24, 0x00	; 0
}
    3186:	e0 96       	adiw	r28, 0x30	; 48
    3188:	0f b6       	in	r0, 0x3f	; 63
    318a:	f8 94       	cli
    318c:	de bf       	out	0x3e, r29	; 62
    318e:	0f be       	out	0x3f, r0	; 63
    3190:	cd bf       	out	0x3d, r28	; 61
    3192:	cf 91       	pop	r28
    3194:	df 91       	pop	r29
    3196:	08 95       	ret

00003198 <Lcd_ES_tInit>:


ES_t Lcd_ES_tInit(){
    3198:	df 93       	push	r29
    319a:	cf 93       	push	r28
    319c:	cd b7       	in	r28, 0x3d	; 61
    319e:	de b7       	in	r29, 0x3e	; 62
#if LCD_MODE == FOUR_BIT_MODE
	Lcd_ES_tsendCmd(Four_BitMode);   /* Go into 4-bit operating mode*/
    31a0:	82 e0       	ldi	r24, 0x02	; 2
    31a2:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(D4_D7);  /* 2 Line, 5*7 matrix in 4-bit mode */
    31a6:	88 e2       	ldi	r24, 0x28	; 40
    31a8:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
    31ac:	8e e0       	ldi	r24, 0x0E	; 14
    31ae:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
    31b2:	86 e0       	ldi	r24, 0x06	; 6
    31b4:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
    31b8:	81 e0       	ldi	r24, 0x01	; 1
    31ba:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <Lcd_ES_tsendCmd>
	return ES_OK;
    31be:	80 e0       	ldi	r24, 0x00	; 0
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
	return ES_OK;
#endif
}
    31c0:	cf 91       	pop	r28
    31c2:	df 91       	pop	r29
    31c4:	08 95       	ret

000031c6 <lcd_ES_tclear>:
 *
 *	Ex. 0x28 0b 0010 1000  //Read bit by bit and see if it is low or high
 */

ES_t lcd_ES_tclear()
{
    31c6:	df 93       	push	r29
    31c8:	cf 93       	push	r28
    31ca:	cd b7       	in	r28, 0x3d	; 61
    31cc:	de b7       	in	r29, 0x3e	; 62
    31ce:	2e 97       	sbiw	r28, 0x0e	; 14
    31d0:	0f b6       	in	r0, 0x3f	; 63
    31d2:	f8 94       	cli
    31d4:	de bf       	out	0x3e, r29	; 62
    31d6:	0f be       	out	0x3f, r0	; 63
    31d8:	cd bf       	out	0x3d, r28	; 61
	Lcd_ES_tsendCmd(CLR_Display);
    31da:	81 e0       	ldi	r24, 0x01	; 1
    31dc:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <Lcd_ES_tsendCmd>
    31e0:	80 e0       	ldi	r24, 0x00	; 0
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	a0 e0       	ldi	r26, 0x00	; 0
    31e6:	b0 e4       	ldi	r27, 0x40	; 64
    31e8:	8b 87       	std	Y+11, r24	; 0x0b
    31ea:	9c 87       	std	Y+12, r25	; 0x0c
    31ec:	ad 87       	std	Y+13, r26	; 0x0d
    31ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    31f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    31f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    31f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    31f8:	20 e0       	ldi	r18, 0x00	; 0
    31fa:	30 e0       	ldi	r19, 0x00	; 0
    31fc:	4a e7       	ldi	r20, 0x7A	; 122
    31fe:	55 e4       	ldi	r21, 0x45	; 69
    3200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3204:	dc 01       	movw	r26, r24
    3206:	cb 01       	movw	r24, r22
    3208:	8f 83       	std	Y+7, r24	; 0x07
    320a:	98 87       	std	Y+8, r25	; 0x08
    320c:	a9 87       	std	Y+9, r26	; 0x09
    320e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3210:	6f 81       	ldd	r22, Y+7	; 0x07
    3212:	78 85       	ldd	r23, Y+8	; 0x08
    3214:	89 85       	ldd	r24, Y+9	; 0x09
    3216:	9a 85       	ldd	r25, Y+10	; 0x0a
    3218:	20 e0       	ldi	r18, 0x00	; 0
    321a:	30 e0       	ldi	r19, 0x00	; 0
    321c:	40 e8       	ldi	r20, 0x80	; 128
    321e:	5f e3       	ldi	r21, 0x3F	; 63
    3220:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3224:	88 23       	and	r24, r24
    3226:	2c f4       	brge	.+10     	; 0x3232 <lcd_ES_tclear+0x6c>
		__ticks = 1;
    3228:	81 e0       	ldi	r24, 0x01	; 1
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	9e 83       	std	Y+6, r25	; 0x06
    322e:	8d 83       	std	Y+5, r24	; 0x05
    3230:	3f c0       	rjmp	.+126    	; 0x32b0 <lcd_ES_tclear+0xea>
	else if (__tmp > 65535)
    3232:	6f 81       	ldd	r22, Y+7	; 0x07
    3234:	78 85       	ldd	r23, Y+8	; 0x08
    3236:	89 85       	ldd	r24, Y+9	; 0x09
    3238:	9a 85       	ldd	r25, Y+10	; 0x0a
    323a:	20 e0       	ldi	r18, 0x00	; 0
    323c:	3f ef       	ldi	r19, 0xFF	; 255
    323e:	4f e7       	ldi	r20, 0x7F	; 127
    3240:	57 e4       	ldi	r21, 0x47	; 71
    3242:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3246:	18 16       	cp	r1, r24
    3248:	4c f5       	brge	.+82     	; 0x329c <lcd_ES_tclear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    324a:	6b 85       	ldd	r22, Y+11	; 0x0b
    324c:	7c 85       	ldd	r23, Y+12	; 0x0c
    324e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3250:	9e 85       	ldd	r25, Y+14	; 0x0e
    3252:	20 e0       	ldi	r18, 0x00	; 0
    3254:	30 e0       	ldi	r19, 0x00	; 0
    3256:	40 e2       	ldi	r20, 0x20	; 32
    3258:	51 e4       	ldi	r21, 0x41	; 65
    325a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    325e:	dc 01       	movw	r26, r24
    3260:	cb 01       	movw	r24, r22
    3262:	bc 01       	movw	r22, r24
    3264:	cd 01       	movw	r24, r26
    3266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    326a:	dc 01       	movw	r26, r24
    326c:	cb 01       	movw	r24, r22
    326e:	9e 83       	std	Y+6, r25	; 0x06
    3270:	8d 83       	std	Y+5, r24	; 0x05
    3272:	0f c0       	rjmp	.+30     	; 0x3292 <lcd_ES_tclear+0xcc>
    3274:	80 e9       	ldi	r24, 0x90	; 144
    3276:	91 e0       	ldi	r25, 0x01	; 1
    3278:	9c 83       	std	Y+4, r25	; 0x04
    327a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    327c:	8b 81       	ldd	r24, Y+3	; 0x03
    327e:	9c 81       	ldd	r25, Y+4	; 0x04
    3280:	01 97       	sbiw	r24, 0x01	; 1
    3282:	f1 f7       	brne	.-4      	; 0x3280 <lcd_ES_tclear+0xba>
    3284:	9c 83       	std	Y+4, r25	; 0x04
    3286:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3288:	8d 81       	ldd	r24, Y+5	; 0x05
    328a:	9e 81       	ldd	r25, Y+6	; 0x06
    328c:	01 97       	sbiw	r24, 0x01	; 1
    328e:	9e 83       	std	Y+6, r25	; 0x06
    3290:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3292:	8d 81       	ldd	r24, Y+5	; 0x05
    3294:	9e 81       	ldd	r25, Y+6	; 0x06
    3296:	00 97       	sbiw	r24, 0x00	; 0
    3298:	69 f7       	brne	.-38     	; 0x3274 <lcd_ES_tclear+0xae>
    329a:	14 c0       	rjmp	.+40     	; 0x32c4 <lcd_ES_tclear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    329c:	6f 81       	ldd	r22, Y+7	; 0x07
    329e:	78 85       	ldd	r23, Y+8	; 0x08
    32a0:	89 85       	ldd	r24, Y+9	; 0x09
    32a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    32a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32a8:	dc 01       	movw	r26, r24
    32aa:	cb 01       	movw	r24, r22
    32ac:	9e 83       	std	Y+6, r25	; 0x06
    32ae:	8d 83       	std	Y+5, r24	; 0x05
    32b0:	8d 81       	ldd	r24, Y+5	; 0x05
    32b2:	9e 81       	ldd	r25, Y+6	; 0x06
    32b4:	9a 83       	std	Y+2, r25	; 0x02
    32b6:	89 83       	std	Y+1, r24	; 0x01
    32b8:	89 81       	ldd	r24, Y+1	; 0x01
    32ba:	9a 81       	ldd	r25, Y+2	; 0x02
    32bc:	01 97       	sbiw	r24, 0x01	; 1
    32be:	f1 f7       	brne	.-4      	; 0x32bc <lcd_ES_tclear+0xf6>
    32c0:	9a 83       	std	Y+2, r25	; 0x02
    32c2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	return ES_OK;
    32c4:	80 e0       	ldi	r24, 0x00	; 0
}
    32c6:	2e 96       	adiw	r28, 0x0e	; 14
    32c8:	0f b6       	in	r0, 0x3f	; 63
    32ca:	f8 94       	cli
    32cc:	de bf       	out	0x3e, r29	; 62
    32ce:	0f be       	out	0x3f, r0	; 63
    32d0:	cd bf       	out	0x3d, r28	; 61
    32d2:	cf 91       	pop	r28
    32d4:	df 91       	pop	r29
    32d6:	08 95       	ret

000032d8 <Lcd_ES_tsendCmd>:

ES_t Lcd_ES_tsendCmd(u8 cmd){
    32d8:	df 93       	push	r29
    32da:	cf 93       	push	r28
    32dc:	0f 92       	push	r0
    32de:	cd b7       	in	r28, 0x3d	; 61
    32e0:	de b7       	in	r29, 0x3e	; 62
    32e2:	89 83       	std	Y+1, r24	; 0x01
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, LOW);
    32e4:	81 e0       	ldi	r24, 0x01	; 1
    32e6:	61 e0       	ldi	r22, 0x01	; 1
    32e8:	40 e0       	ldi	r20, 0x00	; 0
    32ea:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    32ee:	81 e0       	ldi	r24, 0x01	; 1
    32f0:	60 e0       	ldi	r22, 0x00	; 0
    32f2:	40 e0       	ldi	r20, 0x00	; 0
    32f4:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
	// DIO_ES_tGetPinValue, DIO_ES_tSetPinValue
	// if(GET_BIT(cmd,7)){Dio_Write(D7,HIGH);}else{Dio_write(D7,LOW);}
	// We use ternary operator instead
#if LCD_MODE == FOUR_BIT_MODE
	(GET_BIT(cmd,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    32f8:	89 81       	ldd	r24, Y+1	; 0x01
    32fa:	88 23       	and	r24, r24
    32fc:	34 f4       	brge	.+12     	; 0x330a <Lcd_ES_tsendCmd+0x32>
    32fe:	80 e0       	ldi	r24, 0x00	; 0
    3300:	66 e0       	ldi	r22, 0x06	; 6
    3302:	41 e0       	ldi	r20, 0x01	; 1
    3304:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
    3308:	05 c0       	rjmp	.+10     	; 0x3314 <Lcd_ES_tsendCmd+0x3c>
    330a:	80 e0       	ldi	r24, 0x00	; 0
    330c:	66 e0       	ldi	r22, 0x06	; 6
    330e:	40 e0       	ldi	r20, 0x00	; 0
    3310:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    3314:	89 81       	ldd	r24, Y+1	; 0x01
    3316:	82 95       	swap	r24
    3318:	86 95       	lsr	r24
    331a:	86 95       	lsr	r24
    331c:	83 70       	andi	r24, 0x03	; 3
    331e:	88 2f       	mov	r24, r24
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	81 70       	andi	r24, 0x01	; 1
    3324:	90 70       	andi	r25, 0x00	; 0
    3326:	88 23       	and	r24, r24
    3328:	31 f0       	breq	.+12     	; 0x3336 <Lcd_ES_tsendCmd+0x5e>
    332a:	80 e0       	ldi	r24, 0x00	; 0
    332c:	65 e0       	ldi	r22, 0x05	; 5
    332e:	41 e0       	ldi	r20, 0x01	; 1
    3330:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
    3334:	05 c0       	rjmp	.+10     	; 0x3340 <Lcd_ES_tsendCmd+0x68>
    3336:	80 e0       	ldi	r24, 0x00	; 0
    3338:	65 e0       	ldi	r22, 0x05	; 5
    333a:	40 e0       	ldi	r20, 0x00	; 0
    333c:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    3340:	89 81       	ldd	r24, Y+1	; 0x01
    3342:	82 95       	swap	r24
    3344:	86 95       	lsr	r24
    3346:	87 70       	andi	r24, 0x07	; 7
    3348:	88 2f       	mov	r24, r24
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	81 70       	andi	r24, 0x01	; 1
    334e:	90 70       	andi	r25, 0x00	; 0
    3350:	88 23       	and	r24, r24
    3352:	31 f0       	breq	.+12     	; 0x3360 <Lcd_ES_tsendCmd+0x88>
    3354:	80 e0       	ldi	r24, 0x00	; 0
    3356:	64 e0       	ldi	r22, 0x04	; 4
    3358:	41 e0       	ldi	r20, 0x01	; 1
    335a:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
    335e:	05 c0       	rjmp	.+10     	; 0x336a <Lcd_ES_tsendCmd+0x92>
    3360:	80 e0       	ldi	r24, 0x00	; 0
    3362:	64 e0       	ldi	r22, 0x04	; 4
    3364:	40 e0       	ldi	r20, 0x00	; 0
    3366:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    336a:	89 81       	ldd	r24, Y+1	; 0x01
    336c:	82 95       	swap	r24
    336e:	8f 70       	andi	r24, 0x0F	; 15
    3370:	88 2f       	mov	r24, r24
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	81 70       	andi	r24, 0x01	; 1
    3376:	90 70       	andi	r25, 0x00	; 0
    3378:	88 23       	and	r24, r24
    337a:	31 f0       	breq	.+12     	; 0x3388 <Lcd_ES_tsendCmd+0xb0>
    337c:	80 e0       	ldi	r24, 0x00	; 0
    337e:	63 e0       	ldi	r22, 0x03	; 3
    3380:	41 e0       	ldi	r20, 0x01	; 1
    3382:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
    3386:	05 c0       	rjmp	.+10     	; 0x3392 <Lcd_ES_tsendCmd+0xba>
    3388:	80 e0       	ldi	r24, 0x00	; 0
    338a:	63 e0       	ldi	r22, 0x03	; 3
    338c:	40 e0       	ldi	r20, 0x00	; 0
    338e:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    3392:	0e 94 32 17 	call	0x2e64	; 0x2e64 <LCD_ES_tTrigger_Enable>
	(GET_BIT(cmd,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    3396:	89 81       	ldd	r24, Y+1	; 0x01
    3398:	86 95       	lsr	r24
    339a:	86 95       	lsr	r24
    339c:	86 95       	lsr	r24
    339e:	88 2f       	mov	r24, r24
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	81 70       	andi	r24, 0x01	; 1
    33a4:	90 70       	andi	r25, 0x00	; 0
    33a6:	88 23       	and	r24, r24
    33a8:	31 f0       	breq	.+12     	; 0x33b6 <Lcd_ES_tsendCmd+0xde>
    33aa:	80 e0       	ldi	r24, 0x00	; 0
    33ac:	66 e0       	ldi	r22, 0x06	; 6
    33ae:	41 e0       	ldi	r20, 0x01	; 1
    33b0:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
    33b4:	05 c0       	rjmp	.+10     	; 0x33c0 <Lcd_ES_tsendCmd+0xe8>
    33b6:	80 e0       	ldi	r24, 0x00	; 0
    33b8:	66 e0       	ldi	r22, 0x06	; 6
    33ba:	40 e0       	ldi	r20, 0x00	; 0
    33bc:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    33c0:	89 81       	ldd	r24, Y+1	; 0x01
    33c2:	86 95       	lsr	r24
    33c4:	86 95       	lsr	r24
    33c6:	88 2f       	mov	r24, r24
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	81 70       	andi	r24, 0x01	; 1
    33cc:	90 70       	andi	r25, 0x00	; 0
    33ce:	88 23       	and	r24, r24
    33d0:	31 f0       	breq	.+12     	; 0x33de <Lcd_ES_tsendCmd+0x106>
    33d2:	80 e0       	ldi	r24, 0x00	; 0
    33d4:	65 e0       	ldi	r22, 0x05	; 5
    33d6:	41 e0       	ldi	r20, 0x01	; 1
    33d8:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
    33dc:	05 c0       	rjmp	.+10     	; 0x33e8 <Lcd_ES_tsendCmd+0x110>
    33de:	80 e0       	ldi	r24, 0x00	; 0
    33e0:	65 e0       	ldi	r22, 0x05	; 5
    33e2:	40 e0       	ldi	r20, 0x00	; 0
    33e4:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    33e8:	89 81       	ldd	r24, Y+1	; 0x01
    33ea:	86 95       	lsr	r24
    33ec:	88 2f       	mov	r24, r24
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	81 70       	andi	r24, 0x01	; 1
    33f2:	90 70       	andi	r25, 0x00	; 0
    33f4:	88 23       	and	r24, r24
    33f6:	31 f0       	breq	.+12     	; 0x3404 <Lcd_ES_tsendCmd+0x12c>
    33f8:	80 e0       	ldi	r24, 0x00	; 0
    33fa:	64 e0       	ldi	r22, 0x04	; 4
    33fc:	41 e0       	ldi	r20, 0x01	; 1
    33fe:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
    3402:	05 c0       	rjmp	.+10     	; 0x340e <Lcd_ES_tsendCmd+0x136>
    3404:	80 e0       	ldi	r24, 0x00	; 0
    3406:	64 e0       	ldi	r22, 0x04	; 4
    3408:	40 e0       	ldi	r20, 0x00	; 0
    340a:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    340e:	89 81       	ldd	r24, Y+1	; 0x01
    3410:	88 2f       	mov	r24, r24
    3412:	90 e0       	ldi	r25, 0x00	; 0
    3414:	81 70       	andi	r24, 0x01	; 1
    3416:	90 70       	andi	r25, 0x00	; 0
    3418:	88 23       	and	r24, r24
    341a:	31 f0       	breq	.+12     	; 0x3428 <Lcd_ES_tsendCmd+0x150>
    341c:	80 e0       	ldi	r24, 0x00	; 0
    341e:	63 e0       	ldi	r22, 0x03	; 3
    3420:	41 e0       	ldi	r20, 0x01	; 1
    3422:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
    3426:	05 c0       	rjmp	.+10     	; 0x3432 <Lcd_ES_tsendCmd+0x15a>
    3428:	80 e0       	ldi	r24, 0x00	; 0
    342a:	63 e0       	ldi	r22, 0x03	; 3
    342c:	40 e0       	ldi	r20, 0x00	; 0
    342e:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    3432:	0e 94 32 17 	call	0x2e64	; 0x2e64 <LCD_ES_tTrigger_Enable>
	return ES_OK;
    3436:	80 e0       	ldi	r24, 0x00	; 0
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D0,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D0,LOW);
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif
}
    3438:	0f 90       	pop	r0
    343a:	cf 91       	pop	r28
    343c:	df 91       	pop	r29
    343e:	08 95       	ret

00003440 <Lcd_ES_tsendChar>:
ES_t Lcd_ES_tsendChar(u8 data){
    3440:	df 93       	push	r29
    3442:	cf 93       	push	r28
    3444:	0f 92       	push	r0
    3446:	cd b7       	in	r28, 0x3d	; 61
    3448:	de b7       	in	r29, 0x3e	; 62
    344a:	89 83       	std	Y+1, r24	; 0x01
#if LCD_MODE == FOUR_BIT_MODE
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    344c:	81 e0       	ldi	r24, 0x01	; 1
    344e:	61 e0       	ldi	r22, 0x01	; 1
    3450:	41 e0       	ldi	r20, 0x01	; 1
    3452:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    3456:	81 e0       	ldi	r24, 0x01	; 1
    3458:	60 e0       	ldi	r22, 0x00	; 0
    345a:	40 e0       	ldi	r20, 0x00	; 0
    345c:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
	(GET_BIT(data,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    3460:	89 81       	ldd	r24, Y+1	; 0x01
    3462:	88 23       	and	r24, r24
    3464:	34 f4       	brge	.+12     	; 0x3472 <Lcd_ES_tsendChar+0x32>
    3466:	80 e0       	ldi	r24, 0x00	; 0
    3468:	66 e0       	ldi	r22, 0x06	; 6
    346a:	41 e0       	ldi	r20, 0x01	; 1
    346c:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
    3470:	05 c0       	rjmp	.+10     	; 0x347c <Lcd_ES_tsendChar+0x3c>
    3472:	80 e0       	ldi	r24, 0x00	; 0
    3474:	66 e0       	ldi	r22, 0x06	; 6
    3476:	40 e0       	ldi	r20, 0x00	; 0
    3478:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
	(GET_BIT(data,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    347c:	89 81       	ldd	r24, Y+1	; 0x01
    347e:	82 95       	swap	r24
    3480:	86 95       	lsr	r24
    3482:	86 95       	lsr	r24
    3484:	83 70       	andi	r24, 0x03	; 3
    3486:	88 2f       	mov	r24, r24
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	81 70       	andi	r24, 0x01	; 1
    348c:	90 70       	andi	r25, 0x00	; 0
    348e:	88 23       	and	r24, r24
    3490:	31 f0       	breq	.+12     	; 0x349e <Lcd_ES_tsendChar+0x5e>
    3492:	80 e0       	ldi	r24, 0x00	; 0
    3494:	65 e0       	ldi	r22, 0x05	; 5
    3496:	41 e0       	ldi	r20, 0x01	; 1
    3498:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
    349c:	05 c0       	rjmp	.+10     	; 0x34a8 <Lcd_ES_tsendChar+0x68>
    349e:	80 e0       	ldi	r24, 0x00	; 0
    34a0:	65 e0       	ldi	r22, 0x05	; 5
    34a2:	40 e0       	ldi	r20, 0x00	; 0
    34a4:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
	(GET_BIT(data,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    34a8:	89 81       	ldd	r24, Y+1	; 0x01
    34aa:	82 95       	swap	r24
    34ac:	86 95       	lsr	r24
    34ae:	87 70       	andi	r24, 0x07	; 7
    34b0:	88 2f       	mov	r24, r24
    34b2:	90 e0       	ldi	r25, 0x00	; 0
    34b4:	81 70       	andi	r24, 0x01	; 1
    34b6:	90 70       	andi	r25, 0x00	; 0
    34b8:	88 23       	and	r24, r24
    34ba:	31 f0       	breq	.+12     	; 0x34c8 <Lcd_ES_tsendChar+0x88>
    34bc:	80 e0       	ldi	r24, 0x00	; 0
    34be:	64 e0       	ldi	r22, 0x04	; 4
    34c0:	41 e0       	ldi	r20, 0x01	; 1
    34c2:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
    34c6:	05 c0       	rjmp	.+10     	; 0x34d2 <Lcd_ES_tsendChar+0x92>
    34c8:	80 e0       	ldi	r24, 0x00	; 0
    34ca:	64 e0       	ldi	r22, 0x04	; 4
    34cc:	40 e0       	ldi	r20, 0x00	; 0
    34ce:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
	(GET_BIT(data,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    34d2:	89 81       	ldd	r24, Y+1	; 0x01
    34d4:	82 95       	swap	r24
    34d6:	8f 70       	andi	r24, 0x0F	; 15
    34d8:	88 2f       	mov	r24, r24
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	81 70       	andi	r24, 0x01	; 1
    34de:	90 70       	andi	r25, 0x00	; 0
    34e0:	88 23       	and	r24, r24
    34e2:	31 f0       	breq	.+12     	; 0x34f0 <Lcd_ES_tsendChar+0xb0>
    34e4:	80 e0       	ldi	r24, 0x00	; 0
    34e6:	63 e0       	ldi	r22, 0x03	; 3
    34e8:	41 e0       	ldi	r20, 0x01	; 1
    34ea:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
    34ee:	05 c0       	rjmp	.+10     	; 0x34fa <Lcd_ES_tsendChar+0xba>
    34f0:	80 e0       	ldi	r24, 0x00	; 0
    34f2:	63 e0       	ldi	r22, 0x03	; 3
    34f4:	40 e0       	ldi	r20, 0x00	; 0
    34f6:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    34fa:	0e 94 32 17 	call	0x2e64	; 0x2e64 <LCD_ES_tTrigger_Enable>
	(GET_BIT(data,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    34fe:	89 81       	ldd	r24, Y+1	; 0x01
    3500:	86 95       	lsr	r24
    3502:	86 95       	lsr	r24
    3504:	86 95       	lsr	r24
    3506:	88 2f       	mov	r24, r24
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	81 70       	andi	r24, 0x01	; 1
    350c:	90 70       	andi	r25, 0x00	; 0
    350e:	88 23       	and	r24, r24
    3510:	31 f0       	breq	.+12     	; 0x351e <Lcd_ES_tsendChar+0xde>
    3512:	80 e0       	ldi	r24, 0x00	; 0
    3514:	66 e0       	ldi	r22, 0x06	; 6
    3516:	41 e0       	ldi	r20, 0x01	; 1
    3518:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
    351c:	05 c0       	rjmp	.+10     	; 0x3528 <Lcd_ES_tsendChar+0xe8>
    351e:	80 e0       	ldi	r24, 0x00	; 0
    3520:	66 e0       	ldi	r22, 0x06	; 6
    3522:	40 e0       	ldi	r20, 0x00	; 0
    3524:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
	(GET_BIT(data,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    3528:	89 81       	ldd	r24, Y+1	; 0x01
    352a:	86 95       	lsr	r24
    352c:	86 95       	lsr	r24
    352e:	88 2f       	mov	r24, r24
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	81 70       	andi	r24, 0x01	; 1
    3534:	90 70       	andi	r25, 0x00	; 0
    3536:	88 23       	and	r24, r24
    3538:	31 f0       	breq	.+12     	; 0x3546 <Lcd_ES_tsendChar+0x106>
    353a:	80 e0       	ldi	r24, 0x00	; 0
    353c:	65 e0       	ldi	r22, 0x05	; 5
    353e:	41 e0       	ldi	r20, 0x01	; 1
    3540:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
    3544:	05 c0       	rjmp	.+10     	; 0x3550 <Lcd_ES_tsendChar+0x110>
    3546:	80 e0       	ldi	r24, 0x00	; 0
    3548:	65 e0       	ldi	r22, 0x05	; 5
    354a:	40 e0       	ldi	r20, 0x00	; 0
    354c:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
	(GET_BIT(data,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    3550:	89 81       	ldd	r24, Y+1	; 0x01
    3552:	86 95       	lsr	r24
    3554:	88 2f       	mov	r24, r24
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	81 70       	andi	r24, 0x01	; 1
    355a:	90 70       	andi	r25, 0x00	; 0
    355c:	88 23       	and	r24, r24
    355e:	31 f0       	breq	.+12     	; 0x356c <Lcd_ES_tsendChar+0x12c>
    3560:	80 e0       	ldi	r24, 0x00	; 0
    3562:	64 e0       	ldi	r22, 0x04	; 4
    3564:	41 e0       	ldi	r20, 0x01	; 1
    3566:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
    356a:	05 c0       	rjmp	.+10     	; 0x3576 <Lcd_ES_tsendChar+0x136>
    356c:	80 e0       	ldi	r24, 0x00	; 0
    356e:	64 e0       	ldi	r22, 0x04	; 4
    3570:	40 e0       	ldi	r20, 0x00	; 0
    3572:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
	(GET_BIT(data,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    3576:	89 81       	ldd	r24, Y+1	; 0x01
    3578:	88 2f       	mov	r24, r24
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	81 70       	andi	r24, 0x01	; 1
    357e:	90 70       	andi	r25, 0x00	; 0
    3580:	88 23       	and	r24, r24
    3582:	31 f0       	breq	.+12     	; 0x3590 <Lcd_ES_tsendChar+0x150>
    3584:	80 e0       	ldi	r24, 0x00	; 0
    3586:	63 e0       	ldi	r22, 0x03	; 3
    3588:	41 e0       	ldi	r20, 0x01	; 1
    358a:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
    358e:	05 c0       	rjmp	.+10     	; 0x359a <Lcd_ES_tsendChar+0x15a>
    3590:	80 e0       	ldi	r24, 0x00	; 0
    3592:	63 e0       	ldi	r22, 0x03	; 3
    3594:	40 e0       	ldi	r20, 0x00	; 0
    3596:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    359a:	0e 94 32 17 	call	0x2e64	; 0x2e64 <LCD_ES_tTrigger_Enable>
	return ES_OK;
    359e:	80 e0       	ldi	r24, 0x00	; 0
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif

}
    35a0:	0f 90       	pop	r0
    35a2:	cf 91       	pop	r28
    35a4:	df 91       	pop	r29
    35a6:	08 95       	ret

000035a8 <Lcd_ES_tsendString>:

ES_t Lcd_ES_tsendString(char *data)
{
    35a8:	df 93       	push	r29
    35aa:	cf 93       	push	r28
    35ac:	00 d0       	rcall	.+0      	; 0x35ae <Lcd_ES_tsendString+0x6>
    35ae:	0f 92       	push	r0
    35b0:	cd b7       	in	r28, 0x3d	; 61
    35b2:	de b7       	in	r29, 0x3e	; 62
    35b4:	9b 83       	std	Y+3, r25	; 0x03
    35b6:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    35b8:	81 e0       	ldi	r24, 0x01	; 1
    35ba:	61 e0       	ldi	r22, 0x01	; 1
    35bc:	41 e0       	ldi	r20, 0x01	; 1
    35be:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    35c2:	81 e0       	ldi	r24, 0x01	; 1
    35c4:	60 e0       	ldi	r22, 0x00	; 0
    35c6:	40 e0       	ldi	r20, 0x00	; 0
    35c8:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>

	unsigned char i=0;
    35cc:	19 82       	std	Y+1, r1	; 0x01
    35ce:	0e c0       	rjmp	.+28     	; 0x35ec <Lcd_ES_tsendString+0x44>
	while(data[i]!=0)
	{
		Lcd_ES_tsendChar(data[i]);
    35d0:	89 81       	ldd	r24, Y+1	; 0x01
    35d2:	28 2f       	mov	r18, r24
    35d4:	30 e0       	ldi	r19, 0x00	; 0
    35d6:	8a 81       	ldd	r24, Y+2	; 0x02
    35d8:	9b 81       	ldd	r25, Y+3	; 0x03
    35da:	fc 01       	movw	r30, r24
    35dc:	e2 0f       	add	r30, r18
    35de:	f3 1f       	adc	r31, r19
    35e0:	80 81       	ld	r24, Z
    35e2:	0e 94 20 1a 	call	0x3440	; 0x3440 <Lcd_ES_tsendChar>
		i++;
    35e6:	89 81       	ldd	r24, Y+1	; 0x01
    35e8:	8f 5f       	subi	r24, 0xFF	; 255
    35ea:	89 83       	std	Y+1, r24	; 0x01
{
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);

	unsigned char i=0;
	while(data[i]!=0)
    35ec:	89 81       	ldd	r24, Y+1	; 0x01
    35ee:	28 2f       	mov	r18, r24
    35f0:	30 e0       	ldi	r19, 0x00	; 0
    35f2:	8a 81       	ldd	r24, Y+2	; 0x02
    35f4:	9b 81       	ldd	r25, Y+3	; 0x03
    35f6:	fc 01       	movw	r30, r24
    35f8:	e2 0f       	add	r30, r18
    35fa:	f3 1f       	adc	r31, r19
    35fc:	80 81       	ld	r24, Z
    35fe:	88 23       	and	r24, r24
    3600:	39 f7       	brne	.-50     	; 0x35d0 <Lcd_ES_tsendString+0x28>
	{
		Lcd_ES_tsendChar(data[i]);
		i++;
	}
	return ES_OK;
    3602:	80 e0       	ldi	r24, 0x00	; 0
}
    3604:	0f 90       	pop	r0
    3606:	0f 90       	pop	r0
    3608:	0f 90       	pop	r0
    360a:	cf 91       	pop	r28
    360c:	df 91       	pop	r29
    360e:	08 95       	ret

00003610 <Lcd_ES_tsendString_xy>:

ES_t Lcd_ES_tsendString_xy(char *data,u8 row,u8 col){
    3610:	df 93       	push	r29
    3612:	cf 93       	push	r28
    3614:	00 d0       	rcall	.+0      	; 0x3616 <Lcd_ES_tsendString_xy+0x6>
    3616:	00 d0       	rcall	.+0      	; 0x3618 <Lcd_ES_tsendString_xy+0x8>
    3618:	cd b7       	in	r28, 0x3d	; 61
    361a:	de b7       	in	r29, 0x3e	; 62
    361c:	9a 83       	std	Y+2, r25	; 0x02
    361e:	89 83       	std	Y+1, r24	; 0x01
    3620:	6b 83       	std	Y+3, r22	; 0x03
    3622:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    3624:	81 e0       	ldi	r24, 0x01	; 1
    3626:	61 e0       	ldi	r22, 0x01	; 1
    3628:	41 e0       	ldi	r20, 0x01	; 1
    362a:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    362e:	81 e0       	ldi	r24, 0x01	; 1
    3630:	60 e0       	ldi	r22, 0x00	; 0
    3632:	40 e0       	ldi	r20, 0x00	; 0
    3634:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>

	LCD_ES_tSet_Cursor_Pos(row,col);
    3638:	8b 81       	ldd	r24, Y+3	; 0x03
    363a:	6c 81       	ldd	r22, Y+4	; 0x04
    363c:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <LCD_ES_tSet_Cursor_Pos>
	Lcd_ES_tsendString(data);
    3640:	89 81       	ldd	r24, Y+1	; 0x01
    3642:	9a 81       	ldd	r25, Y+2	; 0x02
    3644:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <Lcd_ES_tsendString>
	return ES_OK;
    3648:	80 e0       	ldi	r24, 0x00	; 0

}
    364a:	0f 90       	pop	r0
    364c:	0f 90       	pop	r0
    364e:	0f 90       	pop	r0
    3650:	0f 90       	pop	r0
    3652:	cf 91       	pop	r28
    3654:	df 91       	pop	r29
    3656:	08 95       	ret

00003658 <Lcd_ES_tdisplayNum>:


//A function to display Numbers instead of characters
ES_t Lcd_ES_tdisplayNum(u16 num)
{
    3658:	df 93       	push	r29
    365a:	cf 93       	push	r28
    365c:	cd b7       	in	r28, 0x3d	; 61
    365e:	de b7       	in	r29, 0x3e	; 62
    3660:	2e 97       	sbiw	r28, 0x0e	; 14
    3662:	0f b6       	in	r0, 0x3f	; 63
    3664:	f8 94       	cli
    3666:	de bf       	out	0x3e, r29	; 62
    3668:	0f be       	out	0x3f, r0	; 63
    366a:	cd bf       	out	0x3d, r28	; 61
    366c:	9e 87       	std	Y+14, r25	; 0x0e
    366e:	8d 87       	std	Y+13, r24	; 0x0d
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    3670:	81 e0       	ldi	r24, 0x01	; 1
    3672:	61 e0       	ldi	r22, 0x01	; 1
    3674:	41 e0       	ldi	r20, 0x01	; 1
    3676:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    367a:	81 e0       	ldi	r24, 0x01	; 1
    367c:	60 e0       	ldi	r22, 0x00	; 0
    367e:	40 e0       	ldi	r20, 0x00	; 0
    3680:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>

	uint8_t ch[10],i=0,j=0;
    3684:	1a 82       	std	Y+2, r1	; 0x02
    3686:	19 82       	std	Y+1, r1	; 0x01
	if(num == 0)
    3688:	8d 85       	ldd	r24, Y+13	; 0x0d
    368a:	9e 85       	ldd	r25, Y+14	; 0x0e
    368c:	00 97       	sbiw	r24, 0x00	; 0
    368e:	11 f5       	brne	.+68     	; 0x36d4 <Lcd_ES_tdisplayNum+0x7c>
	{
		Lcd_ES_tsendChar('0');
    3690:	80 e3       	ldi	r24, 0x30	; 48
    3692:	0e 94 20 1a 	call	0x3440	; 0x3440 <Lcd_ES_tsendChar>
    3696:	39 c0       	rjmp	.+114    	; 0x370a <Lcd_ES_tdisplayNum+0xb2>
	}
	else
	{
		while(num)
		{
			ch[i] = num % 10 + '0';  //To convert int to char
    3698:	8a 81       	ldd	r24, Y+2	; 0x02
    369a:	e8 2f       	mov	r30, r24
    369c:	f0 e0       	ldi	r31, 0x00	; 0
    369e:	8d 85       	ldd	r24, Y+13	; 0x0d
    36a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    36a2:	2a e0       	ldi	r18, 0x0A	; 10
    36a4:	30 e0       	ldi	r19, 0x00	; 0
    36a6:	b9 01       	movw	r22, r18
    36a8:	0e 94 53 28 	call	0x50a6	; 0x50a6 <__udivmodhi4>
    36ac:	28 2f       	mov	r18, r24
    36ae:	20 5d       	subi	r18, 0xD0	; 208
    36b0:	ce 01       	movw	r24, r28
    36b2:	03 96       	adiw	r24, 0x03	; 3
    36b4:	e8 0f       	add	r30, r24
    36b6:	f9 1f       	adc	r31, r25
    36b8:	20 83       	st	Z, r18
			num /= 10;
    36ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    36bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    36be:	2a e0       	ldi	r18, 0x0A	; 10
    36c0:	30 e0       	ldi	r19, 0x00	; 0
    36c2:	b9 01       	movw	r22, r18
    36c4:	0e 94 53 28 	call	0x50a6	; 0x50a6 <__udivmodhi4>
    36c8:	cb 01       	movw	r24, r22
    36ca:	9e 87       	std	Y+14, r25	; 0x0e
    36cc:	8d 87       	std	Y+13, r24	; 0x0d
			i++;
    36ce:	8a 81       	ldd	r24, Y+2	; 0x02
    36d0:	8f 5f       	subi	r24, 0xFF	; 255
    36d2:	8a 83       	std	Y+2, r24	; 0x02
	{
		Lcd_ES_tsendChar('0');
	}
	else
	{
		while(num)
    36d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    36d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    36d8:	00 97       	sbiw	r24, 0x00	; 0
    36da:	f1 f6       	brne	.-68     	; 0x3698 <Lcd_ES_tdisplayNum+0x40>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    36dc:	8a 81       	ldd	r24, Y+2	; 0x02
    36de:	89 83       	std	Y+1, r24	; 0x01
    36e0:	11 c0       	rjmp	.+34     	; 0x3704 <Lcd_ES_tdisplayNum+0xac>
		{
			Lcd_ES_tsendChar(ch[j-1]);
    36e2:	89 81       	ldd	r24, Y+1	; 0x01
    36e4:	88 2f       	mov	r24, r24
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	9c 01       	movw	r18, r24
    36ea:	21 50       	subi	r18, 0x01	; 1
    36ec:	30 40       	sbci	r19, 0x00	; 0
    36ee:	ce 01       	movw	r24, r28
    36f0:	03 96       	adiw	r24, 0x03	; 3
    36f2:	fc 01       	movw	r30, r24
    36f4:	e2 0f       	add	r30, r18
    36f6:	f3 1f       	adc	r31, r19
    36f8:	80 81       	ld	r24, Z
    36fa:	0e 94 20 1a 	call	0x3440	; 0x3440 <Lcd_ES_tsendChar>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    36fe:	89 81       	ldd	r24, Y+1	; 0x01
    3700:	81 50       	subi	r24, 0x01	; 1
    3702:	89 83       	std	Y+1, r24	; 0x01
    3704:	89 81       	ldd	r24, Y+1	; 0x01
    3706:	88 23       	and	r24, r24
    3708:	61 f7       	brne	.-40     	; 0x36e2 <Lcd_ES_tdisplayNum+0x8a>
		{
			Lcd_ES_tsendChar(ch[j-1]);
		}
	}
	return ES_OK;
    370a:	80 e0       	ldi	r24, 0x00	; 0
}
    370c:	2e 96       	adiw	r28, 0x0e	; 14
    370e:	0f b6       	in	r0, 0x3f	; 63
    3710:	f8 94       	cli
    3712:	de bf       	out	0x3e, r29	; 62
    3714:	0f be       	out	0x3f, r0	; 63
    3716:	cd bf       	out	0x3d, r28	; 61
    3718:	cf 91       	pop	r28
    371a:	df 91       	pop	r29
    371c:	08 95       	ret

0000371e <Lcd_ES_tdisplayNum_xy>:

ES_t Lcd_ES_tdisplayNum_xy(u16 num,u8 row,u8 col){
    371e:	df 93       	push	r29
    3720:	cf 93       	push	r28
    3722:	cd b7       	in	r28, 0x3d	; 61
    3724:	de b7       	in	r29, 0x3e	; 62
    3726:	a3 97       	sbiw	r28, 0x23	; 35
    3728:	0f b6       	in	r0, 0x3f	; 63
    372a:	f8 94       	cli
    372c:	de bf       	out	0x3e, r29	; 62
    372e:	0f be       	out	0x3f, r0	; 63
    3730:	cd bf       	out	0x3d, r28	; 61
    3732:	98 a3       	std	Y+32, r25	; 0x20
    3734:	8f 8f       	std	Y+31, r24	; 0x1f
    3736:	69 a3       	std	Y+33, r22	; 0x21
    3738:	4a a3       	std	Y+34, r20	; 0x22

	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    373a:	81 e0       	ldi	r24, 0x01	; 1
    373c:	61 e0       	ldi	r22, 0x01	; 1
    373e:	41 e0       	ldi	r20, 0x01	; 1
    3740:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    3744:	81 e0       	ldi	r24, 0x01	; 1
    3746:	60 e0       	ldi	r22, 0x00	; 0
    3748:	40 e0       	ldi	r20, 0x00	; 0
    374a:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>


	if(row == 1){
    374e:	89 a1       	ldd	r24, Y+33	; 0x21
    3750:	81 30       	cpi	r24, 0x01	; 1
    3752:	09 f0       	breq	.+2      	; 0x3756 <Lcd_ES_tdisplayNum_xy+0x38>
    3754:	76 c0       	rjmp	.+236    	; 0x3842 <Lcd_ES_tdisplayNum_xy+0x124>
		Lcd_ES_tsendCmd(Force1stline);
    3756:	80 e8       	ldi	r24, 0x80	; 128
    3758:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <Lcd_ES_tsendCmd>
    375c:	80 e0       	ldi	r24, 0x00	; 0
    375e:	90 e0       	ldi	r25, 0x00	; 0
    3760:	a0 e8       	ldi	r26, 0x80	; 128
    3762:	bf e3       	ldi	r27, 0x3F	; 63
    3764:	89 8f       	std	Y+25, r24	; 0x19
    3766:	9a 8f       	std	Y+26, r25	; 0x1a
    3768:	ab 8f       	std	Y+27, r26	; 0x1b
    376a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    376c:	69 8d       	ldd	r22, Y+25	; 0x19
    376e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3770:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3772:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3774:	20 e0       	ldi	r18, 0x00	; 0
    3776:	30 e0       	ldi	r19, 0x00	; 0
    3778:	4a e7       	ldi	r20, 0x7A	; 122
    377a:	55 e4       	ldi	r21, 0x45	; 69
    377c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3780:	dc 01       	movw	r26, r24
    3782:	cb 01       	movw	r24, r22
    3784:	8d 8b       	std	Y+21, r24	; 0x15
    3786:	9e 8b       	std	Y+22, r25	; 0x16
    3788:	af 8b       	std	Y+23, r26	; 0x17
    378a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    378c:	6d 89       	ldd	r22, Y+21	; 0x15
    378e:	7e 89       	ldd	r23, Y+22	; 0x16
    3790:	8f 89       	ldd	r24, Y+23	; 0x17
    3792:	98 8d       	ldd	r25, Y+24	; 0x18
    3794:	20 e0       	ldi	r18, 0x00	; 0
    3796:	30 e0       	ldi	r19, 0x00	; 0
    3798:	40 e8       	ldi	r20, 0x80	; 128
    379a:	5f e3       	ldi	r21, 0x3F	; 63
    379c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37a0:	88 23       	and	r24, r24
    37a2:	2c f4       	brge	.+10     	; 0x37ae <Lcd_ES_tdisplayNum_xy+0x90>
		__ticks = 1;
    37a4:	81 e0       	ldi	r24, 0x01	; 1
    37a6:	90 e0       	ldi	r25, 0x00	; 0
    37a8:	9c 8b       	std	Y+20, r25	; 0x14
    37aa:	8b 8b       	std	Y+19, r24	; 0x13
    37ac:	3f c0       	rjmp	.+126    	; 0x382c <Lcd_ES_tdisplayNum_xy+0x10e>
	else if (__tmp > 65535)
    37ae:	6d 89       	ldd	r22, Y+21	; 0x15
    37b0:	7e 89       	ldd	r23, Y+22	; 0x16
    37b2:	8f 89       	ldd	r24, Y+23	; 0x17
    37b4:	98 8d       	ldd	r25, Y+24	; 0x18
    37b6:	20 e0       	ldi	r18, 0x00	; 0
    37b8:	3f ef       	ldi	r19, 0xFF	; 255
    37ba:	4f e7       	ldi	r20, 0x7F	; 127
    37bc:	57 e4       	ldi	r21, 0x47	; 71
    37be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37c2:	18 16       	cp	r1, r24
    37c4:	4c f5       	brge	.+82     	; 0x3818 <Lcd_ES_tdisplayNum_xy+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37c6:	69 8d       	ldd	r22, Y+25	; 0x19
    37c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37ce:	20 e0       	ldi	r18, 0x00	; 0
    37d0:	30 e0       	ldi	r19, 0x00	; 0
    37d2:	40 e2       	ldi	r20, 0x20	; 32
    37d4:	51 e4       	ldi	r21, 0x41	; 65
    37d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37da:	dc 01       	movw	r26, r24
    37dc:	cb 01       	movw	r24, r22
    37de:	bc 01       	movw	r22, r24
    37e0:	cd 01       	movw	r24, r26
    37e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e6:	dc 01       	movw	r26, r24
    37e8:	cb 01       	movw	r24, r22
    37ea:	9c 8b       	std	Y+20, r25	; 0x14
    37ec:	8b 8b       	std	Y+19, r24	; 0x13
    37ee:	0f c0       	rjmp	.+30     	; 0x380e <Lcd_ES_tdisplayNum_xy+0xf0>
    37f0:	80 e9       	ldi	r24, 0x90	; 144
    37f2:	91 e0       	ldi	r25, 0x01	; 1
    37f4:	9a 8b       	std	Y+18, r25	; 0x12
    37f6:	89 8b       	std	Y+17, r24	; 0x11
    37f8:	89 89       	ldd	r24, Y+17	; 0x11
    37fa:	9a 89       	ldd	r25, Y+18	; 0x12
    37fc:	01 97       	sbiw	r24, 0x01	; 1
    37fe:	f1 f7       	brne	.-4      	; 0x37fc <Lcd_ES_tdisplayNum_xy+0xde>
    3800:	9a 8b       	std	Y+18, r25	; 0x12
    3802:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3804:	8b 89       	ldd	r24, Y+19	; 0x13
    3806:	9c 89       	ldd	r25, Y+20	; 0x14
    3808:	01 97       	sbiw	r24, 0x01	; 1
    380a:	9c 8b       	std	Y+20, r25	; 0x14
    380c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    380e:	8b 89       	ldd	r24, Y+19	; 0x13
    3810:	9c 89       	ldd	r25, Y+20	; 0x14
    3812:	00 97       	sbiw	r24, 0x00	; 0
    3814:	69 f7       	brne	.-38     	; 0x37f0 <Lcd_ES_tdisplayNum_xy+0xd2>
    3816:	92 c0       	rjmp	.+292    	; 0x393c <Lcd_ES_tdisplayNum_xy+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3818:	6d 89       	ldd	r22, Y+21	; 0x15
    381a:	7e 89       	ldd	r23, Y+22	; 0x16
    381c:	8f 89       	ldd	r24, Y+23	; 0x17
    381e:	98 8d       	ldd	r25, Y+24	; 0x18
    3820:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3824:	dc 01       	movw	r26, r24
    3826:	cb 01       	movw	r24, r22
    3828:	9c 8b       	std	Y+20, r25	; 0x14
    382a:	8b 8b       	std	Y+19, r24	; 0x13
    382c:	8b 89       	ldd	r24, Y+19	; 0x13
    382e:	9c 89       	ldd	r25, Y+20	; 0x14
    3830:	98 8b       	std	Y+16, r25	; 0x10
    3832:	8f 87       	std	Y+15, r24	; 0x0f
    3834:	8f 85       	ldd	r24, Y+15	; 0x0f
    3836:	98 89       	ldd	r25, Y+16	; 0x10
    3838:	01 97       	sbiw	r24, 0x01	; 1
    383a:	f1 f7       	brne	.-4      	; 0x3838 <Lcd_ES_tdisplayNum_xy+0x11a>
    383c:	98 8b       	std	Y+16, r25	; 0x10
    383e:	8f 87       	std	Y+15, r24	; 0x0f
    3840:	7d c0       	rjmp	.+250    	; 0x393c <Lcd_ES_tdisplayNum_xy+0x21e>
		_delay_ms(1);
	}else if(row == 2){
    3842:	89 a1       	ldd	r24, Y+33	; 0x21
    3844:	82 30       	cpi	r24, 0x02	; 2
    3846:	09 f0       	breq	.+2      	; 0x384a <Lcd_ES_tdisplayNum_xy+0x12c>
    3848:	76 c0       	rjmp	.+236    	; 0x3936 <Lcd_ES_tdisplayNum_xy+0x218>
		Lcd_ES_tsendCmd(Force2ndline);
    384a:	80 ec       	ldi	r24, 0xC0	; 192
    384c:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <Lcd_ES_tsendCmd>
    3850:	80 e0       	ldi	r24, 0x00	; 0
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	a0 e2       	ldi	r26, 0x20	; 32
    3856:	b1 e4       	ldi	r27, 0x41	; 65
    3858:	8b 87       	std	Y+11, r24	; 0x0b
    385a:	9c 87       	std	Y+12, r25	; 0x0c
    385c:	ad 87       	std	Y+13, r26	; 0x0d
    385e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3860:	6b 85       	ldd	r22, Y+11	; 0x0b
    3862:	7c 85       	ldd	r23, Y+12	; 0x0c
    3864:	8d 85       	ldd	r24, Y+13	; 0x0d
    3866:	9e 85       	ldd	r25, Y+14	; 0x0e
    3868:	20 e0       	ldi	r18, 0x00	; 0
    386a:	30 e0       	ldi	r19, 0x00	; 0
    386c:	4a e7       	ldi	r20, 0x7A	; 122
    386e:	55 e4       	ldi	r21, 0x45	; 69
    3870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3874:	dc 01       	movw	r26, r24
    3876:	cb 01       	movw	r24, r22
    3878:	8f 83       	std	Y+7, r24	; 0x07
    387a:	98 87       	std	Y+8, r25	; 0x08
    387c:	a9 87       	std	Y+9, r26	; 0x09
    387e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3880:	6f 81       	ldd	r22, Y+7	; 0x07
    3882:	78 85       	ldd	r23, Y+8	; 0x08
    3884:	89 85       	ldd	r24, Y+9	; 0x09
    3886:	9a 85       	ldd	r25, Y+10	; 0x0a
    3888:	20 e0       	ldi	r18, 0x00	; 0
    388a:	30 e0       	ldi	r19, 0x00	; 0
    388c:	40 e8       	ldi	r20, 0x80	; 128
    388e:	5f e3       	ldi	r21, 0x3F	; 63
    3890:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3894:	88 23       	and	r24, r24
    3896:	2c f4       	brge	.+10     	; 0x38a2 <Lcd_ES_tdisplayNum_xy+0x184>
		__ticks = 1;
    3898:	81 e0       	ldi	r24, 0x01	; 1
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	9e 83       	std	Y+6, r25	; 0x06
    389e:	8d 83       	std	Y+5, r24	; 0x05
    38a0:	3f c0       	rjmp	.+126    	; 0x3920 <Lcd_ES_tdisplayNum_xy+0x202>
	else if (__tmp > 65535)
    38a2:	6f 81       	ldd	r22, Y+7	; 0x07
    38a4:	78 85       	ldd	r23, Y+8	; 0x08
    38a6:	89 85       	ldd	r24, Y+9	; 0x09
    38a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    38aa:	20 e0       	ldi	r18, 0x00	; 0
    38ac:	3f ef       	ldi	r19, 0xFF	; 255
    38ae:	4f e7       	ldi	r20, 0x7F	; 127
    38b0:	57 e4       	ldi	r21, 0x47	; 71
    38b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38b6:	18 16       	cp	r1, r24
    38b8:	4c f5       	brge	.+82     	; 0x390c <Lcd_ES_tdisplayNum_xy+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    38bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    38be:	8d 85       	ldd	r24, Y+13	; 0x0d
    38c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    38c2:	20 e0       	ldi	r18, 0x00	; 0
    38c4:	30 e0       	ldi	r19, 0x00	; 0
    38c6:	40 e2       	ldi	r20, 0x20	; 32
    38c8:	51 e4       	ldi	r21, 0x41	; 65
    38ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ce:	dc 01       	movw	r26, r24
    38d0:	cb 01       	movw	r24, r22
    38d2:	bc 01       	movw	r22, r24
    38d4:	cd 01       	movw	r24, r26
    38d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38da:	dc 01       	movw	r26, r24
    38dc:	cb 01       	movw	r24, r22
    38de:	9e 83       	std	Y+6, r25	; 0x06
    38e0:	8d 83       	std	Y+5, r24	; 0x05
    38e2:	0f c0       	rjmp	.+30     	; 0x3902 <Lcd_ES_tdisplayNum_xy+0x1e4>
    38e4:	80 e9       	ldi	r24, 0x90	; 144
    38e6:	91 e0       	ldi	r25, 0x01	; 1
    38e8:	9c 83       	std	Y+4, r25	; 0x04
    38ea:	8b 83       	std	Y+3, r24	; 0x03
    38ec:	8b 81       	ldd	r24, Y+3	; 0x03
    38ee:	9c 81       	ldd	r25, Y+4	; 0x04
    38f0:	01 97       	sbiw	r24, 0x01	; 1
    38f2:	f1 f7       	brne	.-4      	; 0x38f0 <Lcd_ES_tdisplayNum_xy+0x1d2>
    38f4:	9c 83       	std	Y+4, r25	; 0x04
    38f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38f8:	8d 81       	ldd	r24, Y+5	; 0x05
    38fa:	9e 81       	ldd	r25, Y+6	; 0x06
    38fc:	01 97       	sbiw	r24, 0x01	; 1
    38fe:	9e 83       	std	Y+6, r25	; 0x06
    3900:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3902:	8d 81       	ldd	r24, Y+5	; 0x05
    3904:	9e 81       	ldd	r25, Y+6	; 0x06
    3906:	00 97       	sbiw	r24, 0x00	; 0
    3908:	69 f7       	brne	.-38     	; 0x38e4 <Lcd_ES_tdisplayNum_xy+0x1c6>
    390a:	18 c0       	rjmp	.+48     	; 0x393c <Lcd_ES_tdisplayNum_xy+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    390c:	6f 81       	ldd	r22, Y+7	; 0x07
    390e:	78 85       	ldd	r23, Y+8	; 0x08
    3910:	89 85       	ldd	r24, Y+9	; 0x09
    3912:	9a 85       	ldd	r25, Y+10	; 0x0a
    3914:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3918:	dc 01       	movw	r26, r24
    391a:	cb 01       	movw	r24, r22
    391c:	9e 83       	std	Y+6, r25	; 0x06
    391e:	8d 83       	std	Y+5, r24	; 0x05
    3920:	8d 81       	ldd	r24, Y+5	; 0x05
    3922:	9e 81       	ldd	r25, Y+6	; 0x06
    3924:	9a 83       	std	Y+2, r25	; 0x02
    3926:	89 83       	std	Y+1, r24	; 0x01
    3928:	89 81       	ldd	r24, Y+1	; 0x01
    392a:	9a 81       	ldd	r25, Y+2	; 0x02
    392c:	01 97       	sbiw	r24, 0x01	; 1
    392e:	f1 f7       	brne	.-4      	; 0x392c <Lcd_ES_tdisplayNum_xy+0x20e>
    3930:	9a 83       	std	Y+2, r25	; 0x02
    3932:	89 83       	std	Y+1, r24	; 0x01
    3934:	03 c0       	rjmp	.+6      	; 0x393c <Lcd_ES_tdisplayNum_xy+0x21e>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    3936:	81 e0       	ldi	r24, 0x01	; 1
    3938:	8b a3       	std	Y+35, r24	; 0x23
    393a:	1a c0       	rjmp	.+52     	; 0x3970 <Lcd_ES_tdisplayNum_xy+0x252>
	}


	for(int j=1;j<=col;j++){
    393c:	81 e0       	ldi	r24, 0x01	; 1
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	9e 8f       	std	Y+30, r25	; 0x1e
    3942:	8d 8f       	std	Y+29, r24	; 0x1d
    3944:	08 c0       	rjmp	.+16     	; 0x3956 <Lcd_ES_tdisplayNum_xy+0x238>
		Lcd_ES_tsendCmd(ShiftRight);
    3946:	8c e1       	ldi	r24, 0x1C	; 28
    3948:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <Lcd_ES_tsendCmd>
	}else{
		return ES_NOT_OK;
	}


	for(int j=1;j<=col;j++){
    394c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    394e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3950:	01 96       	adiw	r24, 0x01	; 1
    3952:	9e 8f       	std	Y+30, r25	; 0x1e
    3954:	8d 8f       	std	Y+29, r24	; 0x1d
    3956:	8a a1       	ldd	r24, Y+34	; 0x22
    3958:	28 2f       	mov	r18, r24
    395a:	30 e0       	ldi	r19, 0x00	; 0
    395c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    395e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3960:	28 17       	cp	r18, r24
    3962:	39 07       	cpc	r19, r25
    3964:	84 f7       	brge	.-32     	; 0x3946 <Lcd_ES_tdisplayNum_xy+0x228>
		Lcd_ES_tsendCmd(ShiftRight);
	}

	Lcd_ES_tdisplayNum(num);
    3966:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3968:	98 a1       	ldd	r25, Y+32	; 0x20
    396a:	0e 94 2c 1b 	call	0x3658	; 0x3658 <Lcd_ES_tdisplayNum>
	return ES_OK;
    396e:	1b a2       	std	Y+35, r1	; 0x23
    3970:	8b a1       	ldd	r24, Y+35	; 0x23

}
    3972:	a3 96       	adiw	r28, 0x23	; 35
    3974:	0f b6       	in	r0, 0x3f	; 63
    3976:	f8 94       	cli
    3978:	de bf       	out	0x3e, r29	; 62
    397a:	0f be       	out	0x3f, r0	; 63
    397c:	cd bf       	out	0x3d, r28	; 61
    397e:	cf 91       	pop	r28
    3980:	df 91       	pop	r29
    3982:	08 95       	ret

00003984 <Lcd_ES_tsendChar_xy>:

ES_t Lcd_ES_tsendChar_xy(u8 data,u8 row,u8 col){
    3984:	df 93       	push	r29
    3986:	cf 93       	push	r28
    3988:	cd b7       	in	r28, 0x3d	; 61
    398a:	de b7       	in	r29, 0x3e	; 62
    398c:	a2 97       	sbiw	r28, 0x22	; 34
    398e:	0f b6       	in	r0, 0x3f	; 63
    3990:	f8 94       	cli
    3992:	de bf       	out	0x3e, r29	; 62
    3994:	0f be       	out	0x3f, r0	; 63
    3996:	cd bf       	out	0x3d, r28	; 61
    3998:	8f 8f       	std	Y+31, r24	; 0x1f
    399a:	68 a3       	std	Y+32, r22	; 0x20
    399c:	49 a3       	std	Y+33, r20	; 0x21
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    399e:	81 e0       	ldi	r24, 0x01	; 1
    39a0:	61 e0       	ldi	r22, 0x01	; 1
    39a2:	41 e0       	ldi	r20, 0x01	; 1
    39a4:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    39a8:	81 e0       	ldi	r24, 0x01	; 1
    39aa:	60 e0       	ldi	r22, 0x00	; 0
    39ac:	40 e0       	ldi	r20, 0x00	; 0
    39ae:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>


	if(row == 1){
    39b2:	88 a1       	ldd	r24, Y+32	; 0x20
    39b4:	81 30       	cpi	r24, 0x01	; 1
    39b6:	09 f0       	breq	.+2      	; 0x39ba <Lcd_ES_tsendChar_xy+0x36>
    39b8:	76 c0       	rjmp	.+236    	; 0x3aa6 <Lcd_ES_tsendChar_xy+0x122>
		Lcd_ES_tsendCmd(Force1stline);
    39ba:	80 e8       	ldi	r24, 0x80	; 128
    39bc:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <Lcd_ES_tsendCmd>
    39c0:	80 e0       	ldi	r24, 0x00	; 0
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	a0 e8       	ldi	r26, 0x80	; 128
    39c6:	bf e3       	ldi	r27, 0x3F	; 63
    39c8:	89 8f       	std	Y+25, r24	; 0x19
    39ca:	9a 8f       	std	Y+26, r25	; 0x1a
    39cc:	ab 8f       	std	Y+27, r26	; 0x1b
    39ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39d0:	69 8d       	ldd	r22, Y+25	; 0x19
    39d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39d8:	20 e0       	ldi	r18, 0x00	; 0
    39da:	30 e0       	ldi	r19, 0x00	; 0
    39dc:	4a e7       	ldi	r20, 0x7A	; 122
    39de:	55 e4       	ldi	r21, 0x45	; 69
    39e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e4:	dc 01       	movw	r26, r24
    39e6:	cb 01       	movw	r24, r22
    39e8:	8d 8b       	std	Y+21, r24	; 0x15
    39ea:	9e 8b       	std	Y+22, r25	; 0x16
    39ec:	af 8b       	std	Y+23, r26	; 0x17
    39ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    39f0:	6d 89       	ldd	r22, Y+21	; 0x15
    39f2:	7e 89       	ldd	r23, Y+22	; 0x16
    39f4:	8f 89       	ldd	r24, Y+23	; 0x17
    39f6:	98 8d       	ldd	r25, Y+24	; 0x18
    39f8:	20 e0       	ldi	r18, 0x00	; 0
    39fa:	30 e0       	ldi	r19, 0x00	; 0
    39fc:	40 e8       	ldi	r20, 0x80	; 128
    39fe:	5f e3       	ldi	r21, 0x3F	; 63
    3a00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a04:	88 23       	and	r24, r24
    3a06:	2c f4       	brge	.+10     	; 0x3a12 <Lcd_ES_tsendChar_xy+0x8e>
		__ticks = 1;
    3a08:	81 e0       	ldi	r24, 0x01	; 1
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	9c 8b       	std	Y+20, r25	; 0x14
    3a0e:	8b 8b       	std	Y+19, r24	; 0x13
    3a10:	3f c0       	rjmp	.+126    	; 0x3a90 <Lcd_ES_tsendChar_xy+0x10c>
	else if (__tmp > 65535)
    3a12:	6d 89       	ldd	r22, Y+21	; 0x15
    3a14:	7e 89       	ldd	r23, Y+22	; 0x16
    3a16:	8f 89       	ldd	r24, Y+23	; 0x17
    3a18:	98 8d       	ldd	r25, Y+24	; 0x18
    3a1a:	20 e0       	ldi	r18, 0x00	; 0
    3a1c:	3f ef       	ldi	r19, 0xFF	; 255
    3a1e:	4f e7       	ldi	r20, 0x7F	; 127
    3a20:	57 e4       	ldi	r21, 0x47	; 71
    3a22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a26:	18 16       	cp	r1, r24
    3a28:	4c f5       	brge	.+82     	; 0x3a7c <Lcd_ES_tsendChar_xy+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a2a:	69 8d       	ldd	r22, Y+25	; 0x19
    3a2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a32:	20 e0       	ldi	r18, 0x00	; 0
    3a34:	30 e0       	ldi	r19, 0x00	; 0
    3a36:	40 e2       	ldi	r20, 0x20	; 32
    3a38:	51 e4       	ldi	r21, 0x41	; 65
    3a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a3e:	dc 01       	movw	r26, r24
    3a40:	cb 01       	movw	r24, r22
    3a42:	bc 01       	movw	r22, r24
    3a44:	cd 01       	movw	r24, r26
    3a46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a4a:	dc 01       	movw	r26, r24
    3a4c:	cb 01       	movw	r24, r22
    3a4e:	9c 8b       	std	Y+20, r25	; 0x14
    3a50:	8b 8b       	std	Y+19, r24	; 0x13
    3a52:	0f c0       	rjmp	.+30     	; 0x3a72 <Lcd_ES_tsendChar_xy+0xee>
    3a54:	80 e9       	ldi	r24, 0x90	; 144
    3a56:	91 e0       	ldi	r25, 0x01	; 1
    3a58:	9a 8b       	std	Y+18, r25	; 0x12
    3a5a:	89 8b       	std	Y+17, r24	; 0x11
    3a5c:	89 89       	ldd	r24, Y+17	; 0x11
    3a5e:	9a 89       	ldd	r25, Y+18	; 0x12
    3a60:	01 97       	sbiw	r24, 0x01	; 1
    3a62:	f1 f7       	brne	.-4      	; 0x3a60 <Lcd_ES_tsendChar_xy+0xdc>
    3a64:	9a 8b       	std	Y+18, r25	; 0x12
    3a66:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a68:	8b 89       	ldd	r24, Y+19	; 0x13
    3a6a:	9c 89       	ldd	r25, Y+20	; 0x14
    3a6c:	01 97       	sbiw	r24, 0x01	; 1
    3a6e:	9c 8b       	std	Y+20, r25	; 0x14
    3a70:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a72:	8b 89       	ldd	r24, Y+19	; 0x13
    3a74:	9c 89       	ldd	r25, Y+20	; 0x14
    3a76:	00 97       	sbiw	r24, 0x00	; 0
    3a78:	69 f7       	brne	.-38     	; 0x3a54 <Lcd_ES_tsendChar_xy+0xd0>
    3a7a:	92 c0       	rjmp	.+292    	; 0x3ba0 <Lcd_ES_tsendChar_xy+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a7c:	6d 89       	ldd	r22, Y+21	; 0x15
    3a7e:	7e 89       	ldd	r23, Y+22	; 0x16
    3a80:	8f 89       	ldd	r24, Y+23	; 0x17
    3a82:	98 8d       	ldd	r25, Y+24	; 0x18
    3a84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a88:	dc 01       	movw	r26, r24
    3a8a:	cb 01       	movw	r24, r22
    3a8c:	9c 8b       	std	Y+20, r25	; 0x14
    3a8e:	8b 8b       	std	Y+19, r24	; 0x13
    3a90:	8b 89       	ldd	r24, Y+19	; 0x13
    3a92:	9c 89       	ldd	r25, Y+20	; 0x14
    3a94:	98 8b       	std	Y+16, r25	; 0x10
    3a96:	8f 87       	std	Y+15, r24	; 0x0f
    3a98:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a9a:	98 89       	ldd	r25, Y+16	; 0x10
    3a9c:	01 97       	sbiw	r24, 0x01	; 1
    3a9e:	f1 f7       	brne	.-4      	; 0x3a9c <Lcd_ES_tsendChar_xy+0x118>
    3aa0:	98 8b       	std	Y+16, r25	; 0x10
    3aa2:	8f 87       	std	Y+15, r24	; 0x0f
    3aa4:	7d c0       	rjmp	.+250    	; 0x3ba0 <Lcd_ES_tsendChar_xy+0x21c>
		_delay_ms(1);
	}else if(row == 2){
    3aa6:	88 a1       	ldd	r24, Y+32	; 0x20
    3aa8:	82 30       	cpi	r24, 0x02	; 2
    3aaa:	09 f0       	breq	.+2      	; 0x3aae <Lcd_ES_tsendChar_xy+0x12a>
    3aac:	76 c0       	rjmp	.+236    	; 0x3b9a <Lcd_ES_tsendChar_xy+0x216>
		Lcd_ES_tsendCmd(Force2ndline);
    3aae:	80 ec       	ldi	r24, 0xC0	; 192
    3ab0:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <Lcd_ES_tsendCmd>
    3ab4:	80 e0       	ldi	r24, 0x00	; 0
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	a0 e2       	ldi	r26, 0x20	; 32
    3aba:	b1 e4       	ldi	r27, 0x41	; 65
    3abc:	8b 87       	std	Y+11, r24	; 0x0b
    3abe:	9c 87       	std	Y+12, r25	; 0x0c
    3ac0:	ad 87       	std	Y+13, r26	; 0x0d
    3ac2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ac4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ac6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ac8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3aca:	9e 85       	ldd	r25, Y+14	; 0x0e
    3acc:	20 e0       	ldi	r18, 0x00	; 0
    3ace:	30 e0       	ldi	r19, 0x00	; 0
    3ad0:	4a e7       	ldi	r20, 0x7A	; 122
    3ad2:	55 e4       	ldi	r21, 0x45	; 69
    3ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ad8:	dc 01       	movw	r26, r24
    3ada:	cb 01       	movw	r24, r22
    3adc:	8f 83       	std	Y+7, r24	; 0x07
    3ade:	98 87       	std	Y+8, r25	; 0x08
    3ae0:	a9 87       	std	Y+9, r26	; 0x09
    3ae2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ae4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ae6:	78 85       	ldd	r23, Y+8	; 0x08
    3ae8:	89 85       	ldd	r24, Y+9	; 0x09
    3aea:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aec:	20 e0       	ldi	r18, 0x00	; 0
    3aee:	30 e0       	ldi	r19, 0x00	; 0
    3af0:	40 e8       	ldi	r20, 0x80	; 128
    3af2:	5f e3       	ldi	r21, 0x3F	; 63
    3af4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3af8:	88 23       	and	r24, r24
    3afa:	2c f4       	brge	.+10     	; 0x3b06 <Lcd_ES_tsendChar_xy+0x182>
		__ticks = 1;
    3afc:	81 e0       	ldi	r24, 0x01	; 1
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	9e 83       	std	Y+6, r25	; 0x06
    3b02:	8d 83       	std	Y+5, r24	; 0x05
    3b04:	3f c0       	rjmp	.+126    	; 0x3b84 <Lcd_ES_tsendChar_xy+0x200>
	else if (__tmp > 65535)
    3b06:	6f 81       	ldd	r22, Y+7	; 0x07
    3b08:	78 85       	ldd	r23, Y+8	; 0x08
    3b0a:	89 85       	ldd	r24, Y+9	; 0x09
    3b0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b0e:	20 e0       	ldi	r18, 0x00	; 0
    3b10:	3f ef       	ldi	r19, 0xFF	; 255
    3b12:	4f e7       	ldi	r20, 0x7F	; 127
    3b14:	57 e4       	ldi	r21, 0x47	; 71
    3b16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b1a:	18 16       	cp	r1, r24
    3b1c:	4c f5       	brge	.+82     	; 0x3b70 <Lcd_ES_tsendChar_xy+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b20:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b22:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b24:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b26:	20 e0       	ldi	r18, 0x00	; 0
    3b28:	30 e0       	ldi	r19, 0x00	; 0
    3b2a:	40 e2       	ldi	r20, 0x20	; 32
    3b2c:	51 e4       	ldi	r21, 0x41	; 65
    3b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b32:	dc 01       	movw	r26, r24
    3b34:	cb 01       	movw	r24, r22
    3b36:	bc 01       	movw	r22, r24
    3b38:	cd 01       	movw	r24, r26
    3b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b3e:	dc 01       	movw	r26, r24
    3b40:	cb 01       	movw	r24, r22
    3b42:	9e 83       	std	Y+6, r25	; 0x06
    3b44:	8d 83       	std	Y+5, r24	; 0x05
    3b46:	0f c0       	rjmp	.+30     	; 0x3b66 <Lcd_ES_tsendChar_xy+0x1e2>
    3b48:	80 e9       	ldi	r24, 0x90	; 144
    3b4a:	91 e0       	ldi	r25, 0x01	; 1
    3b4c:	9c 83       	std	Y+4, r25	; 0x04
    3b4e:	8b 83       	std	Y+3, r24	; 0x03
    3b50:	8b 81       	ldd	r24, Y+3	; 0x03
    3b52:	9c 81       	ldd	r25, Y+4	; 0x04
    3b54:	01 97       	sbiw	r24, 0x01	; 1
    3b56:	f1 f7       	brne	.-4      	; 0x3b54 <Lcd_ES_tsendChar_xy+0x1d0>
    3b58:	9c 83       	std	Y+4, r25	; 0x04
    3b5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b60:	01 97       	sbiw	r24, 0x01	; 1
    3b62:	9e 83       	std	Y+6, r25	; 0x06
    3b64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b66:	8d 81       	ldd	r24, Y+5	; 0x05
    3b68:	9e 81       	ldd	r25, Y+6	; 0x06
    3b6a:	00 97       	sbiw	r24, 0x00	; 0
    3b6c:	69 f7       	brne	.-38     	; 0x3b48 <Lcd_ES_tsendChar_xy+0x1c4>
    3b6e:	18 c0       	rjmp	.+48     	; 0x3ba0 <Lcd_ES_tsendChar_xy+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b70:	6f 81       	ldd	r22, Y+7	; 0x07
    3b72:	78 85       	ldd	r23, Y+8	; 0x08
    3b74:	89 85       	ldd	r24, Y+9	; 0x09
    3b76:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b7c:	dc 01       	movw	r26, r24
    3b7e:	cb 01       	movw	r24, r22
    3b80:	9e 83       	std	Y+6, r25	; 0x06
    3b82:	8d 83       	std	Y+5, r24	; 0x05
    3b84:	8d 81       	ldd	r24, Y+5	; 0x05
    3b86:	9e 81       	ldd	r25, Y+6	; 0x06
    3b88:	9a 83       	std	Y+2, r25	; 0x02
    3b8a:	89 83       	std	Y+1, r24	; 0x01
    3b8c:	89 81       	ldd	r24, Y+1	; 0x01
    3b8e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b90:	01 97       	sbiw	r24, 0x01	; 1
    3b92:	f1 f7       	brne	.-4      	; 0x3b90 <Lcd_ES_tsendChar_xy+0x20c>
    3b94:	9a 83       	std	Y+2, r25	; 0x02
    3b96:	89 83       	std	Y+1, r24	; 0x01
    3b98:	03 c0       	rjmp	.+6      	; 0x3ba0 <Lcd_ES_tsendChar_xy+0x21c>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    3b9a:	81 e0       	ldi	r24, 0x01	; 1
    3b9c:	8a a3       	std	Y+34, r24	; 0x22
    3b9e:	19 c0       	rjmp	.+50     	; 0x3bd2 <Lcd_ES_tsendChar_xy+0x24e>
	}

	for(int j=1;j<=col;j++){
    3ba0:	81 e0       	ldi	r24, 0x01	; 1
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	9e 8f       	std	Y+30, r25	; 0x1e
    3ba6:	8d 8f       	std	Y+29, r24	; 0x1d
    3ba8:	08 c0       	rjmp	.+16     	; 0x3bba <Lcd_ES_tsendChar_xy+0x236>
		Lcd_ES_tsendCmd(ShiftRight);
    3baa:	8c e1       	ldi	r24, 0x1C	; 28
    3bac:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <Lcd_ES_tsendCmd>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
	}

	for(int j=1;j<=col;j++){
    3bb0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3bb2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3bb4:	01 96       	adiw	r24, 0x01	; 1
    3bb6:	9e 8f       	std	Y+30, r25	; 0x1e
    3bb8:	8d 8f       	std	Y+29, r24	; 0x1d
    3bba:	89 a1       	ldd	r24, Y+33	; 0x21
    3bbc:	28 2f       	mov	r18, r24
    3bbe:	30 e0       	ldi	r19, 0x00	; 0
    3bc0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3bc2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3bc4:	28 17       	cp	r18, r24
    3bc6:	39 07       	cpc	r19, r25
    3bc8:	84 f7       	brge	.-32     	; 0x3baa <Lcd_ES_tsendChar_xy+0x226>
		Lcd_ES_tsendCmd(ShiftRight);
	}
	Lcd_ES_tsendChar(data);
    3bca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3bcc:	0e 94 20 1a 	call	0x3440	; 0x3440 <Lcd_ES_tsendChar>
	return ES_OK;
    3bd0:	1a a2       	std	Y+34, r1	; 0x22
    3bd2:	8a a1       	ldd	r24, Y+34	; 0x22
}
    3bd4:	a2 96       	adiw	r28, 0x22	; 34
    3bd6:	0f b6       	in	r0, 0x3f	; 63
    3bd8:	f8 94       	cli
    3bda:	de bf       	out	0x3e, r29	; 62
    3bdc:	0f be       	out	0x3f, r0	; 63
    3bde:	cd bf       	out	0x3d, r28	; 61
    3be0:	cf 91       	pop	r28
    3be2:	df 91       	pop	r29
    3be4:	08 95       	ret

00003be6 <LCD_ES_tSet_Cursor_Pos>:

static ES_t LCD_ES_tSet_Cursor_Pos(u8 row,u8 column){
    3be6:	df 93       	push	r29
    3be8:	cf 93       	push	r28
    3bea:	00 d0       	rcall	.+0      	; 0x3bec <LCD_ES_tSet_Cursor_Pos+0x6>
    3bec:	00 d0       	rcall	.+0      	; 0x3bee <LCD_ES_tSet_Cursor_Pos+0x8>
    3bee:	0f 92       	push	r0
    3bf0:	cd b7       	in	r28, 0x3d	; 61
    3bf2:	de b7       	in	r29, 0x3e	; 62
    3bf4:	89 83       	std	Y+1, r24	; 0x01
    3bf6:	6a 83       	std	Y+2, r22	; 0x02
	column--;
    3bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    3bfa:	81 50       	subi	r24, 0x01	; 1
    3bfc:	8a 83       	std	Y+2, r24	; 0x02
	switch(row){
    3bfe:	89 81       	ldd	r24, Y+1	; 0x01
    3c00:	28 2f       	mov	r18, r24
    3c02:	30 e0       	ldi	r19, 0x00	; 0
    3c04:	3d 83       	std	Y+5, r19	; 0x05
    3c06:	2c 83       	std	Y+4, r18	; 0x04
    3c08:	8c 81       	ldd	r24, Y+4	; 0x04
    3c0a:	9d 81       	ldd	r25, Y+5	; 0x05
    3c0c:	81 30       	cpi	r24, 0x01	; 1
    3c0e:	91 05       	cpc	r25, r1
    3c10:	31 f0       	breq	.+12     	; 0x3c1e <LCD_ES_tSet_Cursor_Pos+0x38>
    3c12:	2c 81       	ldd	r18, Y+4	; 0x04
    3c14:	3d 81       	ldd	r19, Y+5	; 0x05
    3c16:	22 30       	cpi	r18, 0x02	; 2
    3c18:	31 05       	cpc	r19, r1
    3c1a:	31 f0       	breq	.+12     	; 0x3c28 <LCD_ES_tSet_Cursor_Pos+0x42>
    3c1c:	0a c0       	rjmp	.+20     	; 0x3c32 <LCD_ES_tSet_Cursor_Pos+0x4c>
	case 1:
		Lcd_ES_tsendCmd((0x80 + column));
    3c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c20:	80 58       	subi	r24, 0x80	; 128
    3c22:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <Lcd_ES_tsendCmd>
    3c26:	08 c0       	rjmp	.+16     	; 0x3c38 <LCD_ES_tSet_Cursor_Pos+0x52>
		break;
	case 2:
		Lcd_ES_tsendCmd((0xc0 + column));
    3c28:	8a 81       	ldd	r24, Y+2	; 0x02
    3c2a:	80 54       	subi	r24, 0x40	; 64
    3c2c:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <Lcd_ES_tsendCmd>
    3c30:	03 c0       	rjmp	.+6      	; 0x3c38 <LCD_ES_tSet_Cursor_Pos+0x52>
		break;
	default:
		return ES_NOT_OK;
    3c32:	31 e0       	ldi	r19, 0x01	; 1
    3c34:	3b 83       	std	Y+3, r19	; 0x03
    3c36:	01 c0       	rjmp	.+2      	; 0x3c3a <LCD_ES_tSet_Cursor_Pos+0x54>
	}
	return ES_OK;
    3c38:	1b 82       	std	Y+3, r1	; 0x03
    3c3a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3c3c:	0f 90       	pop	r0
    3c3e:	0f 90       	pop	r0
    3c40:	0f 90       	pop	r0
    3c42:	0f 90       	pop	r0
    3c44:	0f 90       	pop	r0
    3c46:	cf 91       	pop	r28
    3c48:	df 91       	pop	r29
    3c4a:	08 95       	ret

00003c4c <LCD_ES_tGoTo>:

/************************************************************************/
ES_t LCD_ES_tGoTo(u8 Line, u8 x){
    3c4c:	df 93       	push	r29
    3c4e:	cf 93       	push	r28
    3c50:	00 d0       	rcall	.+0      	; 0x3c52 <LCD_ES_tGoTo+0x6>
    3c52:	0f 92       	push	r0
    3c54:	cd b7       	in	r28, 0x3d	; 61
    3c56:	de b7       	in	r29, 0x3e	; 62
    3c58:	89 83       	std	Y+1, r24	; 0x01
    3c5a:	6a 83       	std	Y+2, r22	; 0x02
	if(0 == Line)
    3c5c:	89 81       	ldd	r24, Y+1	; 0x01
    3c5e:	88 23       	and	r24, r24
    3c60:	41 f4       	brne	.+16     	; 0x3c72 <LCD_ES_tGoTo+0x26>
	{
		if ( x <=15)
    3c62:	8a 81       	ldd	r24, Y+2	; 0x02
    3c64:	80 31       	cpi	r24, 0x10	; 16
    3c66:	48 f5       	brcc	.+82     	; 0x3cba <LCD_ES_tGoTo+0x6e>
		{
			Lcd_ES_tsendCmd(0x80 + x);
    3c68:	8a 81       	ldd	r24, Y+2	; 0x02
    3c6a:	80 58       	subi	r24, 0x80	; 128
    3c6c:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <Lcd_ES_tsendCmd>
    3c70:	24 c0       	rjmp	.+72     	; 0x3cba <LCD_ES_tGoTo+0x6e>
		}
	}
	else if (1 == Line)
    3c72:	89 81       	ldd	r24, Y+1	; 0x01
    3c74:	81 30       	cpi	r24, 0x01	; 1
    3c76:	41 f4       	brne	.+16     	; 0x3c88 <LCD_ES_tGoTo+0x3c>
	{
		if ( x <=15)
    3c78:	8a 81       	ldd	r24, Y+2	; 0x02
    3c7a:	80 31       	cpi	r24, 0x10	; 16
    3c7c:	f0 f4       	brcc	.+60     	; 0x3cba <LCD_ES_tGoTo+0x6e>
		{
			Lcd_ES_tsendCmd(0xC0 + x);
    3c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c80:	80 54       	subi	r24, 0x40	; 64
    3c82:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <Lcd_ES_tsendCmd>
    3c86:	19 c0       	rjmp	.+50     	; 0x3cba <LCD_ES_tGoTo+0x6e>
		}
	}// In case of 16*4 lcd
	else if(2 == Line)
    3c88:	89 81       	ldd	r24, Y+1	; 0x01
    3c8a:	82 30       	cpi	r24, 0x02	; 2
    3c8c:	41 f4       	brne	.+16     	; 0x3c9e <LCD_ES_tGoTo+0x52>
	{
		if ( x <=15)
    3c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c90:	80 31       	cpi	r24, 0x10	; 16
    3c92:	98 f4       	brcc	.+38     	; 0x3cba <LCD_ES_tGoTo+0x6e>
		{
			Lcd_ES_tsendCmd(0x90 + x);
    3c94:	8a 81       	ldd	r24, Y+2	; 0x02
    3c96:	80 57       	subi	r24, 0x70	; 112
    3c98:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <Lcd_ES_tsendCmd>
    3c9c:	0e c0       	rjmp	.+28     	; 0x3cba <LCD_ES_tGoTo+0x6e>
		}
	}else if(3 == Line)
    3c9e:	89 81       	ldd	r24, Y+1	; 0x01
    3ca0:	83 30       	cpi	r24, 0x03	; 3
    3ca2:	41 f4       	brne	.+16     	; 0x3cb4 <LCD_ES_tGoTo+0x68>
	{
		if ( x <=15)
    3ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca6:	80 31       	cpi	r24, 0x10	; 16
    3ca8:	40 f4       	brcc	.+16     	; 0x3cba <LCD_ES_tGoTo+0x6e>
		{
			Lcd_ES_tsendCmd(0xD0 + x);
    3caa:	8a 81       	ldd	r24, Y+2	; 0x02
    3cac:	80 53       	subi	r24, 0x30	; 48
    3cae:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <Lcd_ES_tsendCmd>
    3cb2:	03 c0       	rjmp	.+6      	; 0x3cba <LCD_ES_tGoTo+0x6e>
		}
	}
	else{
		return ES_NOT_OK;
    3cb4:	81 e0       	ldi	r24, 0x01	; 1
    3cb6:	8b 83       	std	Y+3, r24	; 0x03
    3cb8:	01 c0       	rjmp	.+2      	; 0x3cbc <LCD_ES_tGoTo+0x70>
	}
	return ES_OK;
    3cba:	1b 82       	std	Y+3, r1	; 0x03
    3cbc:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3cbe:	0f 90       	pop	r0
    3cc0:	0f 90       	pop	r0
    3cc2:	0f 90       	pop	r0
    3cc4:	cf 91       	pop	r28
    3cc6:	df 91       	pop	r29
    3cc8:	08 95       	ret

00003cca <KPD_ES_tGetKeyPressed>:
// To avoid the unarrangement and uncontiguous
const u8 KPD_Au8RowsPins[4] = {KPD_U8_R1,KPD_U8_R2,KPD_U8_R3,KPD_U8_R4};
const u8 KPD_Au8ColsPins[4] = {KPD_U8_C1,KPD_U8_C2,KPD_U8_C3,KPD_U8_C4};

ES_t KPD_ES_tGetKeyPressed(u8 *copy_pu8ReturnedKey)
{
    3cca:	df 93       	push	r29
    3ccc:	cf 93       	push	r28
    3cce:	cd b7       	in	r28, 0x3d	; 61
    3cd0:	de b7       	in	r29, 0x3e	; 62
    3cd2:	65 97       	sbiw	r28, 0x15	; 21
    3cd4:	0f b6       	in	r0, 0x3f	; 63
    3cd6:	f8 94       	cli
    3cd8:	de bf       	out	0x3e, r29	; 62
    3cda:	0f be       	out	0x3f, r0	; 63
    3cdc:	cd bf       	out	0x3d, r28	; 61
    3cde:	9c 8b       	std	Y+20, r25	; 0x14
    3ce0:	8b 8b       	std	Y+19, r24	; 0x13
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
    3ce2:	eb 89       	ldd	r30, Y+19	; 0x13
    3ce4:	fc 89       	ldd	r31, Y+20	; 0x14
    3ce6:	8f ef       	ldi	r24, 0xFF	; 255
    3ce8:	80 83       	st	Z, r24
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
    3cea:	1f 86       	std	Y+15, r1	; 0x0f
	if(copy_pu8ReturnedKey != NULL)
    3cec:	8b 89       	ldd	r24, Y+19	; 0x13
    3cee:	9c 89       	ldd	r25, Y+20	; 0x14
    3cf0:	00 97       	sbiw	r24, 0x00	; 0
    3cf2:	09 f4       	brne	.+2      	; 0x3cf6 <KPD_ES_tGetKeyPressed+0x2c>
    3cf4:	ed c0       	rjmp	.+474    	; 0x3ed0 <KPD_ES_tGetKeyPressed+0x206>
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
    3cf6:	19 8a       	std	Y+17, r1	; 0x11
    3cf8:	e5 c0       	rjmp	.+458    	; 0x3ec4 <KPD_ES_tGetKeyPressed+0x1fa>
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
    3cfa:	89 89       	ldd	r24, Y+17	; 0x11
    3cfc:	88 2f       	mov	r24, r24
    3cfe:	90 e0       	ldi	r25, 0x00	; 0
    3d00:	fc 01       	movw	r30, r24
    3d02:	e8 54       	subi	r30, 0x48	; 72
    3d04:	fd 4f       	sbci	r31, 0xFD	; 253
    3d06:	90 81       	ld	r25, Z
    3d08:	81 e0       	ldi	r24, 0x01	; 1
    3d0a:	69 2f       	mov	r22, r25
    3d0c:	40 e0       	ldi	r20, 0x00	; 0
    3d0e:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
    3d12:	18 8a       	std	Y+16, r1	; 0x10
    3d14:	c1 c0       	rjmp	.+386    	; 0x3e98 <KPD_ES_tGetKeyPressed+0x1ce>
			{
				DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);
    3d16:	88 89       	ldd	r24, Y+16	; 0x10
    3d18:	88 2f       	mov	r24, r24
    3d1a:	90 e0       	ldi	r25, 0x00	; 0
    3d1c:	fc 01       	movw	r30, r24
    3d1e:	e4 54       	subi	r30, 0x44	; 68
    3d20:	fd 4f       	sbci	r31, 0xFD	; 253
    3d22:	90 81       	ld	r25, Z
    3d24:	9e 01       	movw	r18, r28
    3d26:	2e 5e       	subi	r18, 0xEE	; 238
    3d28:	3f 4f       	sbci	r19, 0xFF	; 255
    3d2a:	83 e0       	ldi	r24, 0x03	; 3
    3d2c:	69 2f       	mov	r22, r25
    3d2e:	a9 01       	movw	r20, r18
    3d30:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <DIO_ES_tGetPinValue>
				if(Local_u8PinVal == LOW){ /* Switch is pressed */
    3d34:	8a 89       	ldd	r24, Y+18	; 0x12
    3d36:	88 23       	and	r24, r24
    3d38:	09 f0       	breq	.+2      	; 0x3d3c <KPD_ES_tGetKeyPressed+0x72>
    3d3a:	ab c0       	rjmp	.+342    	; 0x3e92 <KPD_ES_tGetKeyPressed+0x1c8>
    3d3c:	80 e0       	ldi	r24, 0x00	; 0
    3d3e:	90 e0       	ldi	r25, 0x00	; 0
    3d40:	a0 ea       	ldi	r26, 0xA0	; 160
    3d42:	b1 e4       	ldi	r27, 0x41	; 65
    3d44:	8b 87       	std	Y+11, r24	; 0x0b
    3d46:	9c 87       	std	Y+12, r25	; 0x0c
    3d48:	ad 87       	std	Y+13, r26	; 0x0d
    3d4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d50:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d52:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d54:	20 e0       	ldi	r18, 0x00	; 0
    3d56:	30 e0       	ldi	r19, 0x00	; 0
    3d58:	4a e7       	ldi	r20, 0x7A	; 122
    3d5a:	55 e4       	ldi	r21, 0x45	; 69
    3d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d60:	dc 01       	movw	r26, r24
    3d62:	cb 01       	movw	r24, r22
    3d64:	8f 83       	std	Y+7, r24	; 0x07
    3d66:	98 87       	std	Y+8, r25	; 0x08
    3d68:	a9 87       	std	Y+9, r26	; 0x09
    3d6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d6c:	6f 81       	ldd	r22, Y+7	; 0x07
    3d6e:	78 85       	ldd	r23, Y+8	; 0x08
    3d70:	89 85       	ldd	r24, Y+9	; 0x09
    3d72:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d74:	20 e0       	ldi	r18, 0x00	; 0
    3d76:	30 e0       	ldi	r19, 0x00	; 0
    3d78:	40 e8       	ldi	r20, 0x80	; 128
    3d7a:	5f e3       	ldi	r21, 0x3F	; 63
    3d7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d80:	88 23       	and	r24, r24
    3d82:	2c f4       	brge	.+10     	; 0x3d8e <KPD_ES_tGetKeyPressed+0xc4>
		__ticks = 1;
    3d84:	81 e0       	ldi	r24, 0x01	; 1
    3d86:	90 e0       	ldi	r25, 0x00	; 0
    3d88:	9e 83       	std	Y+6, r25	; 0x06
    3d8a:	8d 83       	std	Y+5, r24	; 0x05
    3d8c:	3f c0       	rjmp	.+126    	; 0x3e0c <KPD_ES_tGetKeyPressed+0x142>
	else if (__tmp > 65535)
    3d8e:	6f 81       	ldd	r22, Y+7	; 0x07
    3d90:	78 85       	ldd	r23, Y+8	; 0x08
    3d92:	89 85       	ldd	r24, Y+9	; 0x09
    3d94:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d96:	20 e0       	ldi	r18, 0x00	; 0
    3d98:	3f ef       	ldi	r19, 0xFF	; 255
    3d9a:	4f e7       	ldi	r20, 0x7F	; 127
    3d9c:	57 e4       	ldi	r21, 0x47	; 71
    3d9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3da2:	18 16       	cp	r1, r24
    3da4:	4c f5       	brge	.+82     	; 0x3df8 <KPD_ES_tGetKeyPressed+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3da6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3da8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3daa:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dac:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dae:	20 e0       	ldi	r18, 0x00	; 0
    3db0:	30 e0       	ldi	r19, 0x00	; 0
    3db2:	40 e2       	ldi	r20, 0x20	; 32
    3db4:	51 e4       	ldi	r21, 0x41	; 65
    3db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dba:	dc 01       	movw	r26, r24
    3dbc:	cb 01       	movw	r24, r22
    3dbe:	bc 01       	movw	r22, r24
    3dc0:	cd 01       	movw	r24, r26
    3dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dc6:	dc 01       	movw	r26, r24
    3dc8:	cb 01       	movw	r24, r22
    3dca:	9e 83       	std	Y+6, r25	; 0x06
    3dcc:	8d 83       	std	Y+5, r24	; 0x05
    3dce:	0f c0       	rjmp	.+30     	; 0x3dee <KPD_ES_tGetKeyPressed+0x124>
    3dd0:	80 e9       	ldi	r24, 0x90	; 144
    3dd2:	91 e0       	ldi	r25, 0x01	; 1
    3dd4:	9c 83       	std	Y+4, r25	; 0x04
    3dd6:	8b 83       	std	Y+3, r24	; 0x03
    3dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    3dda:	9c 81       	ldd	r25, Y+4	; 0x04
    3ddc:	01 97       	sbiw	r24, 0x01	; 1
    3dde:	f1 f7       	brne	.-4      	; 0x3ddc <KPD_ES_tGetKeyPressed+0x112>
    3de0:	9c 83       	std	Y+4, r25	; 0x04
    3de2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3de4:	8d 81       	ldd	r24, Y+5	; 0x05
    3de6:	9e 81       	ldd	r25, Y+6	; 0x06
    3de8:	01 97       	sbiw	r24, 0x01	; 1
    3dea:	9e 83       	std	Y+6, r25	; 0x06
    3dec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dee:	8d 81       	ldd	r24, Y+5	; 0x05
    3df0:	9e 81       	ldd	r25, Y+6	; 0x06
    3df2:	00 97       	sbiw	r24, 0x00	; 0
    3df4:	69 f7       	brne	.-38     	; 0x3dd0 <KPD_ES_tGetKeyPressed+0x106>
    3df6:	14 c0       	rjmp	.+40     	; 0x3e20 <KPD_ES_tGetKeyPressed+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3df8:	6f 81       	ldd	r22, Y+7	; 0x07
    3dfa:	78 85       	ldd	r23, Y+8	; 0x08
    3dfc:	89 85       	ldd	r24, Y+9	; 0x09
    3dfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e04:	dc 01       	movw	r26, r24
    3e06:	cb 01       	movw	r24, r22
    3e08:	9e 83       	std	Y+6, r25	; 0x06
    3e0a:	8d 83       	std	Y+5, r24	; 0x05
    3e0c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e0e:	9e 81       	ldd	r25, Y+6	; 0x06
    3e10:	9a 83       	std	Y+2, r25	; 0x02
    3e12:	89 83       	std	Y+1, r24	; 0x01
    3e14:	89 81       	ldd	r24, Y+1	; 0x01
    3e16:	9a 81       	ldd	r25, Y+2	; 0x02
    3e18:	01 97       	sbiw	r24, 0x01	; 1
    3e1a:	f1 f7       	brne	.-4      	; 0x3e18 <KPD_ES_tGetKeyPressed+0x14e>
    3e1c:	9a 83       	std	Y+2, r25	; 0x02
    3e1e:	89 83       	std	Y+1, r24	; 0x01
					/* The switch which reaches between the activated
					 * Column and the pressed key */
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    3e20:	88 89       	ldd	r24, Y+16	; 0x10
    3e22:	88 2f       	mov	r24, r24
    3e24:	90 e0       	ldi	r25, 0x00	; 0
    3e26:	fc 01       	movw	r30, r24
    3e28:	e4 54       	subi	r30, 0x44	; 68
    3e2a:	fd 4f       	sbci	r31, 0xFD	; 253
    3e2c:	90 81       	ld	r25, Z
    3e2e:	9e 01       	movw	r18, r28
    3e30:	2e 5e       	subi	r18, 0xEE	; 238
    3e32:	3f 4f       	sbci	r19, 0xFF	; 255
    3e34:	83 e0       	ldi	r24, 0x03	; 3
    3e36:	69 2f       	mov	r22, r25
    3e38:	a9 01       	movw	r20, r18
    3e3a:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <DIO_ES_tGetPinValue>
    3e3e:	0f c0       	rjmp	.+30     	; 0x3e5e <KPD_ES_tGetKeyPressed+0x194>
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    3e40:	88 89       	ldd	r24, Y+16	; 0x10
    3e42:	88 2f       	mov	r24, r24
    3e44:	90 e0       	ldi	r25, 0x00	; 0
    3e46:	fc 01       	movw	r30, r24
    3e48:	e4 54       	subi	r30, 0x44	; 68
    3e4a:	fd 4f       	sbci	r31, 0xFD	; 253
    3e4c:	90 81       	ld	r25, Z
    3e4e:	9e 01       	movw	r18, r28
    3e50:	2e 5e       	subi	r18, 0xEE	; 238
    3e52:	3f 4f       	sbci	r19, 0xFF	; 255
    3e54:	83 e0       	ldi	r24, 0x03	; 3
    3e56:	69 2f       	mov	r22, r25
    3e58:	a9 01       	movw	r20, r18
    3e5a:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <DIO_ES_tGetPinValue>
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
    3e5e:	8a 89       	ldd	r24, Y+18	; 0x12
    3e60:	88 23       	and	r24, r24
    3e62:	71 f3       	breq	.-36     	; 0x3e40 <KPD_ES_tGetKeyPressed+0x176>
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					}
					*copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    3e64:	89 89       	ldd	r24, Y+17	; 0x11
    3e66:	48 2f       	mov	r20, r24
    3e68:	50 e0       	ldi	r21, 0x00	; 0
    3e6a:	88 89       	ldd	r24, Y+16	; 0x10
    3e6c:	28 2f       	mov	r18, r24
    3e6e:	30 e0       	ldi	r19, 0x00	; 0
    3e70:	ca 01       	movw	r24, r20
    3e72:	88 0f       	add	r24, r24
    3e74:	99 1f       	adc	r25, r25
    3e76:	88 0f       	add	r24, r24
    3e78:	99 1f       	adc	r25, r25
    3e7a:	82 0f       	add	r24, r18
    3e7c:	93 1f       	adc	r25, r19
    3e7e:	fc 01       	movw	r30, r24
    3e80:	e8 55       	subi	r30, 0x58	; 88
    3e82:	fd 4f       	sbci	r31, 0xFD	; 253
    3e84:	80 81       	ld	r24, Z
    3e86:	eb 89       	ldd	r30, Y+19	; 0x13
    3e88:	fc 89       	ldd	r31, Y+20	; 0x14
    3e8a:	80 83       	st	Z, r24
					Local_u8Flag = HIGH;
    3e8c:	81 e0       	ldi	r24, 0x01	; 1
    3e8e:	8f 87       	std	Y+15, r24	; 0x0f
    3e90:	07 c0       	rjmp	.+14     	; 0x3ea0 <KPD_ES_tGetKeyPressed+0x1d6>
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
    3e92:	88 89       	ldd	r24, Y+16	; 0x10
    3e94:	8f 5f       	subi	r24, 0xFF	; 255
    3e96:	88 8b       	std	Y+16, r24	; 0x10
    3e98:	88 89       	ldd	r24, Y+16	; 0x10
    3e9a:	84 30       	cpi	r24, 0x04	; 4
    3e9c:	08 f4       	brcc	.+2      	; 0x3ea0 <KPD_ES_tGetKeyPressed+0x1d6>
    3e9e:	3b cf       	rjmp	.-394    	; 0x3d16 <KPD_ES_tGetKeyPressed+0x4c>
					Local_u8Flag = HIGH;
					break;
				}
			}
			// Deactivate ROW
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],HIGH);
    3ea0:	89 89       	ldd	r24, Y+17	; 0x11
    3ea2:	88 2f       	mov	r24, r24
    3ea4:	90 e0       	ldi	r25, 0x00	; 0
    3ea6:	fc 01       	movw	r30, r24
    3ea8:	e8 54       	subi	r30, 0x48	; 72
    3eaa:	fd 4f       	sbci	r31, 0xFD	; 253
    3eac:	90 81       	ld	r25, Z
    3eae:	81 e0       	ldi	r24, 0x01	; 1
    3eb0:	69 2f       	mov	r22, r25
    3eb2:	41 e0       	ldi	r20, 0x01	; 1
    3eb4:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
			if(Local_u8Flag == HIGH)
    3eb8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3eba:	81 30       	cpi	r24, 0x01	; 1
    3ebc:	39 f0       	breq	.+14     	; 0x3ecc <KPD_ES_tGetKeyPressed+0x202>
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
	if(copy_pu8ReturnedKey != NULL)
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
    3ebe:	89 89       	ldd	r24, Y+17	; 0x11
    3ec0:	8f 5f       	subi	r24, 0xFF	; 255
    3ec2:	89 8b       	std	Y+17, r24	; 0x11
    3ec4:	89 89       	ldd	r24, Y+17	; 0x11
    3ec6:	84 30       	cpi	r24, 0x04	; 4
    3ec8:	08 f4       	brcc	.+2      	; 0x3ecc <KPD_ES_tGetKeyPressed+0x202>
    3eca:	17 cf       	rjmp	.-466    	; 0x3cfa <KPD_ES_tGetKeyPressed+0x30>


	}else{
		return ES_NOT_OK;
	}
	return ES_OK;
    3ecc:	1d 8a       	std	Y+21, r1	; 0x15
    3ece:	02 c0       	rjmp	.+4      	; 0x3ed4 <KPD_ES_tGetKeyPressed+0x20a>
				break;
		}


	}else{
		return ES_NOT_OK;
    3ed0:	81 e0       	ldi	r24, 0x01	; 1
    3ed2:	8d 8b       	std	Y+21, r24	; 0x15
    3ed4:	8d 89       	ldd	r24, Y+21	; 0x15
	}
	return ES_OK;
}
    3ed6:	65 96       	adiw	r28, 0x15	; 21
    3ed8:	0f b6       	in	r0, 0x3f	; 63
    3eda:	f8 94       	cli
    3edc:	de bf       	out	0x3e, r29	; 62
    3ede:	0f be       	out	0x3f, r0	; 63
    3ee0:	cd bf       	out	0x3d, r28	; 61
    3ee2:	cf 91       	pop	r28
    3ee4:	df 91       	pop	r29
    3ee6:	08 95       	ret

00003ee8 <DC_Motor_Init>:
#include "DC_Motor.h"
#include "DC_MotorCfg.h"


ES_t DC_Motor_Init(DC_MOTOR_Index Motor)
{
    3ee8:	df 93       	push	r29
    3eea:	cf 93       	push	r28
    3eec:	00 d0       	rcall	.+0      	; 0x3eee <DC_Motor_Init+0x6>
    3eee:	cd b7       	in	r28, 0x3d	; 61
    3ef0:	de b7       	in	r29, 0x3e	; 62
    3ef2:	89 83       	std	Y+1, r24	; 0x01
	if(Motor == DC_MOTOR_0){
    3ef4:	89 81       	ldd	r24, Y+1	; 0x01
    3ef6:	88 23       	and	r24, r24
    3ef8:	59 f4       	brne	.+22     	; 0x3f10 <DC_Motor_Init+0x28>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN1, OUTPUT);
    3efa:	82 e0       	ldi	r24, 0x02	; 2
    3efc:	61 e0       	ldi	r22, 0x01	; 1
    3efe:	41 e0       	ldi	r20, 0x01	; 1
    3f00:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN2, OUTPUT);
    3f04:	82 e0       	ldi	r24, 0x02	; 2
    3f06:	62 e0       	ldi	r22, 0x02	; 2
    3f08:	41 e0       	ldi	r20, 0x01	; 1
    3f0a:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <DIO_ES_tSetPinDirection>
    3f0e:	11 c0       	rjmp	.+34     	; 0x3f32 <DC_Motor_Init+0x4a>
	}else if(Motor == DC_MOTOR_1){
    3f10:	89 81       	ldd	r24, Y+1	; 0x01
    3f12:	81 30       	cpi	r24, 0x01	; 1
    3f14:	59 f4       	brne	.+22     	; 0x3f2c <DC_Motor_Init+0x44>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN3, OUTPUT);
    3f16:	82 e0       	ldi	r24, 0x02	; 2
    3f18:	63 e0       	ldi	r22, 0x03	; 3
    3f1a:	41 e0       	ldi	r20, 0x01	; 1
    3f1c:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN4, OUTPUT);
    3f20:	82 e0       	ldi	r24, 0x02	; 2
    3f22:	64 e0       	ldi	r22, 0x04	; 4
    3f24:	41 e0       	ldi	r20, 0x01	; 1
    3f26:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <DIO_ES_tSetPinDirection>
    3f2a:	03 c0       	rjmp	.+6      	; 0x3f32 <DC_Motor_Init+0x4a>
	}else{
		return ES_NOT_OK;
    3f2c:	81 e0       	ldi	r24, 0x01	; 1
    3f2e:	8a 83       	std	Y+2, r24	; 0x02
    3f30:	01 c0       	rjmp	.+2      	; 0x3f34 <DC_Motor_Init+0x4c>
	}
	return ES_OK;
    3f32:	1a 82       	std	Y+2, r1	; 0x02
    3f34:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3f36:	0f 90       	pop	r0
    3f38:	0f 90       	pop	r0
    3f3a:	cf 91       	pop	r28
    3f3c:	df 91       	pop	r29
    3f3e:	08 95       	ret

00003f40 <DC_Motor_Stop>:


ES_t DC_Motor_Stop(DC_MOTOR_Index Motor)
{
    3f40:	df 93       	push	r29
    3f42:	cf 93       	push	r28
    3f44:	00 d0       	rcall	.+0      	; 0x3f46 <DC_Motor_Stop+0x6>
    3f46:	cd b7       	in	r28, 0x3d	; 61
    3f48:	de b7       	in	r29, 0x3e	; 62
    3f4a:	89 83       	std	Y+1, r24	; 0x01
	if(Motor == DC_MOTOR_0){
    3f4c:	89 81       	ldd	r24, Y+1	; 0x01
    3f4e:	88 23       	and	r24, r24
    3f50:	59 f4       	brne	.+22     	; 0x3f68 <DC_Motor_Stop+0x28>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN1, LOW);
    3f52:	82 e0       	ldi	r24, 0x02	; 2
    3f54:	61 e0       	ldi	r22, 0x01	; 1
    3f56:	40 e0       	ldi	r20, 0x00	; 0
    3f58:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN2, LOW);
    3f5c:	82 e0       	ldi	r24, 0x02	; 2
    3f5e:	62 e0       	ldi	r22, 0x02	; 2
    3f60:	40 e0       	ldi	r20, 0x00	; 0
    3f62:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
    3f66:	11 c0       	rjmp	.+34     	; 0x3f8a <DC_Motor_Stop+0x4a>
	}else if(Motor == DC_MOTOR_1){
    3f68:	89 81       	ldd	r24, Y+1	; 0x01
    3f6a:	81 30       	cpi	r24, 0x01	; 1
    3f6c:	59 f4       	brne	.+22     	; 0x3f84 <DC_Motor_Stop+0x44>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN3, LOW);
    3f6e:	82 e0       	ldi	r24, 0x02	; 2
    3f70:	63 e0       	ldi	r22, 0x03	; 3
    3f72:	40 e0       	ldi	r20, 0x00	; 0
    3f74:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN4, LOW);
    3f78:	82 e0       	ldi	r24, 0x02	; 2
    3f7a:	64 e0       	ldi	r22, 0x04	; 4
    3f7c:	40 e0       	ldi	r20, 0x00	; 0
    3f7e:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
    3f82:	03 c0       	rjmp	.+6      	; 0x3f8a <DC_Motor_Stop+0x4a>
	}else{
		return ES_NOT_OK;
    3f84:	81 e0       	ldi	r24, 0x01	; 1
    3f86:	8a 83       	std	Y+2, r24	; 0x02
    3f88:	01 c0       	rjmp	.+2      	; 0x3f8c <DC_Motor_Stop+0x4c>
	}
	return ES_OK;
    3f8a:	1a 82       	std	Y+2, r1	; 0x02
    3f8c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3f8e:	0f 90       	pop	r0
    3f90:	0f 90       	pop	r0
    3f92:	cf 91       	pop	r28
    3f94:	df 91       	pop	r29
    3f96:	08 95       	ret

00003f98 <DC_Motor_Move>:


ES_t DC_Motor_Move(DC_MOTOR_Index Motor,DC_MOTOR_Cfg MotorCfg)
{
    3f98:	df 93       	push	r29
    3f9a:	cf 93       	push	r28
    3f9c:	00 d0       	rcall	.+0      	; 0x3f9e <DC_Motor_Move+0x6>
    3f9e:	00 d0       	rcall	.+0      	; 0x3fa0 <DC_Motor_Move+0x8>
    3fa0:	0f 92       	push	r0
    3fa2:	cd b7       	in	r28, 0x3d	; 61
    3fa4:	de b7       	in	r29, 0x3e	; 62
    3fa6:	89 83       	std	Y+1, r24	; 0x01
    3fa8:	6a 83       	std	Y+2, r22	; 0x02
	switch(MotorCfg){
    3faa:	8a 81       	ldd	r24, Y+2	; 0x02
    3fac:	28 2f       	mov	r18, r24
    3fae:	30 e0       	ldi	r19, 0x00	; 0
    3fb0:	3d 83       	std	Y+5, r19	; 0x05
    3fb2:	2c 83       	std	Y+4, r18	; 0x04
    3fb4:	8c 81       	ldd	r24, Y+4	; 0x04
    3fb6:	9d 81       	ldd	r25, Y+5	; 0x05
    3fb8:	00 97       	sbiw	r24, 0x00	; 0
    3fba:	31 f0       	breq	.+12     	; 0x3fc8 <DC_Motor_Move+0x30>
    3fbc:	2c 81       	ldd	r18, Y+4	; 0x04
    3fbe:	3d 81       	ldd	r19, Y+5	; 0x05
    3fc0:	21 30       	cpi	r18, 0x01	; 1
    3fc2:	31 05       	cpc	r19, r1
    3fc4:	e9 f0       	breq	.+58     	; 0x4000 <DC_Motor_Move+0x68>
    3fc6:	38 c0       	rjmp	.+112    	; 0x4038 <DC_Motor_Move+0xa0>
	case DC_MOTOR_CW:
		if(Motor == DC_MOTOR_0){
    3fc8:	89 81       	ldd	r24, Y+1	; 0x01
    3fca:	88 23       	and	r24, r24
    3fcc:	59 f4       	brne	.+22     	; 0x3fe4 <DC_Motor_Move+0x4c>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN1, HIGH);
    3fce:	82 e0       	ldi	r24, 0x02	; 2
    3fd0:	61 e0       	ldi	r22, 0x01	; 1
    3fd2:	41 e0       	ldi	r20, 0x01	; 1
    3fd4:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN2, LOW);
    3fd8:	82 e0       	ldi	r24, 0x02	; 2
    3fda:	62 e0       	ldi	r22, 0x02	; 2
    3fdc:	40 e0       	ldi	r20, 0x00	; 0
    3fde:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
    3fe2:	2d c0       	rjmp	.+90     	; 0x403e <DC_Motor_Move+0xa6>
		}else if(Motor == DC_MOTOR_1){
    3fe4:	89 81       	ldd	r24, Y+1	; 0x01
    3fe6:	81 30       	cpi	r24, 0x01	; 1
    3fe8:	51 f5       	brne	.+84     	; 0x403e <DC_Motor_Move+0xa6>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN3, HIGH);
    3fea:	82 e0       	ldi	r24, 0x02	; 2
    3fec:	63 e0       	ldi	r22, 0x03	; 3
    3fee:	41 e0       	ldi	r20, 0x01	; 1
    3ff0:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN4, LOW);
    3ff4:	82 e0       	ldi	r24, 0x02	; 2
    3ff6:	64 e0       	ldi	r22, 0x04	; 4
    3ff8:	40 e0       	ldi	r20, 0x00	; 0
    3ffa:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
    3ffe:	1f c0       	rjmp	.+62     	; 0x403e <DC_Motor_Move+0xa6>
		}
		break;
	case DC_MOTOR_CCW:
		if(Motor == DC_MOTOR_0){
    4000:	89 81       	ldd	r24, Y+1	; 0x01
    4002:	88 23       	and	r24, r24
    4004:	59 f4       	brne	.+22     	; 0x401c <DC_Motor_Move+0x84>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN1, LOW);
    4006:	82 e0       	ldi	r24, 0x02	; 2
    4008:	61 e0       	ldi	r22, 0x01	; 1
    400a:	40 e0       	ldi	r20, 0x00	; 0
    400c:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN2, HIGH);
    4010:	82 e0       	ldi	r24, 0x02	; 2
    4012:	62 e0       	ldi	r22, 0x02	; 2
    4014:	41 e0       	ldi	r20, 0x01	; 1
    4016:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
    401a:	11 c0       	rjmp	.+34     	; 0x403e <DC_Motor_Move+0xa6>
		}else if(Motor == DC_MOTOR_1){
    401c:	89 81       	ldd	r24, Y+1	; 0x01
    401e:	81 30       	cpi	r24, 0x01	; 1
    4020:	71 f4       	brne	.+28     	; 0x403e <DC_Motor_Move+0xa6>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN3, LOW);
    4022:	82 e0       	ldi	r24, 0x02	; 2
    4024:	63 e0       	ldi	r22, 0x03	; 3
    4026:	40 e0       	ldi	r20, 0x00	; 0
    4028:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN4, HIGH);
    402c:	82 e0       	ldi	r24, 0x02	; 2
    402e:	64 e0       	ldi	r22, 0x04	; 4
    4030:	41 e0       	ldi	r20, 0x01	; 1
    4032:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_ES_tSetPinValue>
    4036:	03 c0       	rjmp	.+6      	; 0x403e <DC_Motor_Move+0xa6>
		}
		break;
	default:
		return ES_NOT_OK;
    4038:	31 e0       	ldi	r19, 0x01	; 1
    403a:	3b 83       	std	Y+3, r19	; 0x03
    403c:	01 c0       	rjmp	.+2      	; 0x4040 <DC_Motor_Move+0xa8>
	}
	return ES_OK;
    403e:	1b 82       	std	Y+3, r1	; 0x03
    4040:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4042:	0f 90       	pop	r0
    4044:	0f 90       	pop	r0
    4046:	0f 90       	pop	r0
    4048:	0f 90       	pop	r0
    404a:	0f 90       	pop	r0
    404c:	cf 91       	pop	r28
    404e:	df 91       	pop	r29
    4050:	08 95       	ret

00004052 <Enter_IRQ_CallBack>:
u8 gettingServoOption=0;

State currentState;

void Enter_IRQ_CallBack(void)
{
    4052:	df 93       	push	r29
    4054:	cf 93       	push	r28
    4056:	cd b7       	in	r28, 0x3d	; 61
    4058:	de b7       	in	r29, 0x3e	; 62
	currentState = STATE_MAIN_SCREEN;
    405a:	81 e0       	ldi	r24, 0x01	; 1
    405c:	80 93 ff 02 	sts	0x02FF, r24
}
    4060:	cf 91       	pop	r28
    4062:	df 91       	pop	r29
    4064:	08 95       	ret

00004066 <main>:

int main()
{
    4066:	0f 93       	push	r16
    4068:	1f 93       	push	r17
    406a:	df 93       	push	r29
    406c:	cf 93       	push	r28
    406e:	cd b7       	in	r28, 0x3d	; 61
    4070:	de b7       	in	r29, 0x3e	; 62
    4072:	c9 58       	subi	r28, 0x89	; 137
    4074:	d0 40       	sbci	r29, 0x00	; 0
    4076:	0f b6       	in	r0, 0x3f	; 63
    4078:	f8 94       	cli
    407a:	de bf       	out	0x3e, r29	; 62
    407c:	0f be       	out	0x3f, r0	; 63
    407e:	cd bf       	out	0x3d, r28	; 61
	DIO_ES_tInit();
    4080:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_ES_tInit>
	Lcd_ES_tInit();
    4084:	0e 94 cc 18 	call	0x3198	; 0x3198 <Lcd_ES_tInit>
	Stepper_Init();
    4088:	0e 94 0e 14 	call	0x281c	; 0x281c <Stepper_Init>
	sei();
    408c:	78 94       	sei


	DC_Motor_Init(DC_MOTOR_0);
    408e:	80 e0       	ldi	r24, 0x00	; 0
    4090:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <DC_Motor_Init>

	u8 Value;
	char Option,Option2,Option3,Option4;
	u8 count=0;
    4094:	fe 01       	movw	r30, r28
    4096:	ee 57       	subi	r30, 0x7E	; 126
    4098:	ff 4f       	sbci	r31, 0xFF	; 255
    409a:	10 82       	st	Z, r1
	u8 stepperAngle=0;
    409c:	fe 01       	movw	r30, r28
    409e:	ef 57       	subi	r30, 0x7F	; 127
    40a0:	ff 4f       	sbci	r31, 0xFF	; 255
    40a2:	10 82       	st	Z, r1
	int ServoAngle=0;
    40a4:	fe 01       	movw	r30, r28
    40a6:	e1 58       	subi	r30, 0x81	; 129
    40a8:	ff 4f       	sbci	r31, 0xFF	; 255
    40aa:	11 82       	std	Z+1, r1	; 0x01
    40ac:	10 82       	st	Z, r1

	EXI_TriggerEdge(EX_INT2,RISING_EDGE);
    40ae:	82 e0       	ldi	r24, 0x02	; 2
    40b0:	63 e0       	ldi	r22, 0x03	; 3
    40b2:	0e 94 0b 0c 	call	0x1816	; 0x1816 <EXI_TriggerEdge>
	EXI_ENABLE(EX_INT2);
    40b6:	82 e0       	ldi	r24, 0x02	; 2
    40b8:	0e 94 9d 0b 	call	0x173a	; 0x173a <EXI_ENABLE>
	EXI_Set_CallBack(EX_INT2,Enter_IRQ_CallBack);
    40bc:	29 e2       	ldi	r18, 0x29	; 41
    40be:	30 e2       	ldi	r19, 0x20	; 32
    40c0:	82 e0       	ldi	r24, 0x02	; 2
    40c2:	b9 01       	movw	r22, r18
    40c4:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <EXI_Set_CallBack>


	currentState = STATE_NULL_STATE;
    40c8:	10 92 ff 02 	sts	0x02FF, r1


	Lcd_ES_tsendString("Enter Password !");
    40cc:	80 e6       	ldi	r24, 0x60	; 96
    40ce:	90 e0       	ldi	r25, 0x00	; 0
    40d0:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <Lcd_ES_tsendString>
	LCD_ES_tGoTo(1, 5);
    40d4:	81 e0       	ldi	r24, 0x01	; 1
    40d6:	65 e0       	ldi	r22, 0x05	; 5
    40d8:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <LCD_ES_tGoTo>

	while(1)
	{
		switch(currentState)
    40dc:	80 91 ff 02 	lds	r24, 0x02FF
    40e0:	28 2f       	mov	r18, r24
    40e2:	30 e0       	ldi	r19, 0x00	; 0
    40e4:	c8 57       	subi	r28, 0x78	; 120
    40e6:	df 4f       	sbci	r29, 0xFF	; 255
    40e8:	39 83       	std	Y+1, r19	; 0x01
    40ea:	28 83       	st	Y, r18
    40ec:	c8 58       	subi	r28, 0x88	; 136
    40ee:	d0 40       	sbci	r29, 0x00	; 0
    40f0:	c8 57       	subi	r28, 0x78	; 120
    40f2:	df 4f       	sbci	r29, 0xFF	; 255
    40f4:	48 81       	ld	r20, Y
    40f6:	59 81       	ldd	r21, Y+1	; 0x01
    40f8:	c8 58       	subi	r28, 0x88	; 136
    40fa:	d0 40       	sbci	r29, 0x00	; 0
    40fc:	43 30       	cpi	r20, 0x03	; 3
    40fe:	51 05       	cpc	r21, r1
    4100:	09 f4       	brne	.+2      	; 0x4104 <main+0x9e>
    4102:	e7 c3       	rjmp	.+1998   	; 0x48d2 <main+0x86c>
    4104:	c8 57       	subi	r28, 0x78	; 120
    4106:	df 4f       	sbci	r29, 0xFF	; 255
    4108:	88 81       	ld	r24, Y
    410a:	99 81       	ldd	r25, Y+1	; 0x01
    410c:	c8 58       	subi	r28, 0x88	; 136
    410e:	d0 40       	sbci	r29, 0x00	; 0
    4110:	84 30       	cpi	r24, 0x04	; 4
    4112:	91 05       	cpc	r25, r1
    4114:	f4 f4       	brge	.+60     	; 0x4152 <main+0xec>
    4116:	c8 57       	subi	r28, 0x78	; 120
    4118:	df 4f       	sbci	r29, 0xFF	; 255
    411a:	e8 81       	ld	r30, Y
    411c:	f9 81       	ldd	r31, Y+1	; 0x01
    411e:	c8 58       	subi	r28, 0x88	; 136
    4120:	d0 40       	sbci	r29, 0x00	; 0
    4122:	e1 30       	cpi	r30, 0x01	; 1
    4124:	f1 05       	cpc	r31, r1
    4126:	09 f4       	brne	.+2      	; 0x412a <main+0xc4>
    4128:	ec c0       	rjmp	.+472    	; 0x4302 <main+0x29c>
    412a:	c8 57       	subi	r28, 0x78	; 120
    412c:	df 4f       	sbci	r29, 0xFF	; 255
    412e:	28 81       	ld	r18, Y
    4130:	39 81       	ldd	r19, Y+1	; 0x01
    4132:	c8 58       	subi	r28, 0x88	; 136
    4134:	d0 40       	sbci	r29, 0x00	; 0
    4136:	22 30       	cpi	r18, 0x02	; 2
    4138:	31 05       	cpc	r19, r1
    413a:	0c f0       	brlt	.+2      	; 0x413e <main+0xd8>
    413c:	c1 c2       	rjmp	.+1410   	; 0x46c0 <main+0x65a>
    413e:	c8 57       	subi	r28, 0x78	; 120
    4140:	df 4f       	sbci	r29, 0xFF	; 255
    4142:	48 81       	ld	r20, Y
    4144:	59 81       	ldd	r21, Y+1	; 0x01
    4146:	c8 58       	subi	r28, 0x88	; 136
    4148:	d0 40       	sbci	r29, 0x00	; 0
    414a:	41 15       	cp	r20, r1
    414c:	51 05       	cpc	r21, r1
    414e:	01 f1       	breq	.+64     	; 0x4190 <main+0x12a>
    4150:	c5 cf       	rjmp	.-118    	; 0x40dc <main+0x76>
    4152:	c8 57       	subi	r28, 0x78	; 120
    4154:	df 4f       	sbci	r29, 0xFF	; 255
    4156:	88 81       	ld	r24, Y
    4158:	99 81       	ldd	r25, Y+1	; 0x01
    415a:	c8 58       	subi	r28, 0x88	; 136
    415c:	d0 40       	sbci	r29, 0x00	; 0
    415e:	85 30       	cpi	r24, 0x05	; 5
    4160:	91 05       	cpc	r25, r1
    4162:	09 f4       	brne	.+2      	; 0x4166 <main+0x100>
    4164:	ee c5       	rjmp	.+3036   	; 0x4d42 <main+0xcdc>
    4166:	c8 57       	subi	r28, 0x78	; 120
    4168:	df 4f       	sbci	r29, 0xFF	; 255
    416a:	e8 81       	ld	r30, Y
    416c:	f9 81       	ldd	r31, Y+1	; 0x01
    416e:	c8 58       	subi	r28, 0x88	; 136
    4170:	d0 40       	sbci	r29, 0x00	; 0
    4172:	e5 30       	cpi	r30, 0x05	; 5
    4174:	f1 05       	cpc	r31, r1
    4176:	0c f4       	brge	.+2      	; 0x417a <main+0x114>
    4178:	6a c5       	rjmp	.+2772   	; 0x4c4e <main+0xbe8>
    417a:	c8 57       	subi	r28, 0x78	; 120
    417c:	df 4f       	sbci	r29, 0xFF	; 255
    417e:	28 81       	ld	r18, Y
    4180:	39 81       	ldd	r19, Y+1	; 0x01
    4182:	c8 58       	subi	r28, 0x88	; 136
    4184:	d0 40       	sbci	r29, 0x00	; 0
    4186:	26 30       	cpi	r18, 0x06	; 6
    4188:	31 05       	cpc	r19, r1
    418a:	09 f4       	brne	.+2      	; 0x418e <main+0x128>
    418c:	e7 c6       	rjmp	.+3534   	; 0x4f5c <main+0xef6>
    418e:	a6 cf       	rjmp	.-180    	; 0x40dc <main+0x76>
		{
		case STATE_NULL_STATE:
			DIO_ES_tTOGPin(DIO_U8_PORT_D, DIO_U8_PIN_7);
    4190:	83 e0       	ldi	r24, 0x03	; 3
    4192:	67 e0       	ldi	r22, 0x07	; 7
    4194:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <DIO_ES_tTOGPin>
    4198:	fe 01       	movw	r30, r28
    419a:	e5 58       	subi	r30, 0x85	; 133
    419c:	ff 4f       	sbci	r31, 0xFF	; 255
    419e:	80 e0       	ldi	r24, 0x00	; 0
    41a0:	90 e0       	ldi	r25, 0x00	; 0
    41a2:	aa ef       	ldi	r26, 0xFA	; 250
    41a4:	b3 e4       	ldi	r27, 0x43	; 67
    41a6:	80 83       	st	Z, r24
    41a8:	91 83       	std	Z+1, r25	; 0x01
    41aa:	a2 83       	std	Z+2, r26	; 0x02
    41ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41ae:	8e 01       	movw	r16, r28
    41b0:	09 58       	subi	r16, 0x89	; 137
    41b2:	1f 4f       	sbci	r17, 0xFF	; 255
    41b4:	fe 01       	movw	r30, r28
    41b6:	e5 58       	subi	r30, 0x85	; 133
    41b8:	ff 4f       	sbci	r31, 0xFF	; 255
    41ba:	60 81       	ld	r22, Z
    41bc:	71 81       	ldd	r23, Z+1	; 0x01
    41be:	82 81       	ldd	r24, Z+2	; 0x02
    41c0:	93 81       	ldd	r25, Z+3	; 0x03
    41c2:	20 e0       	ldi	r18, 0x00	; 0
    41c4:	30 e0       	ldi	r19, 0x00	; 0
    41c6:	4a e7       	ldi	r20, 0x7A	; 122
    41c8:	55 e4       	ldi	r21, 0x45	; 69
    41ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41ce:	dc 01       	movw	r26, r24
    41d0:	cb 01       	movw	r24, r22
    41d2:	f8 01       	movw	r30, r16
    41d4:	80 83       	st	Z, r24
    41d6:	91 83       	std	Z+1, r25	; 0x01
    41d8:	a2 83       	std	Z+2, r26	; 0x02
    41da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    41dc:	fe 01       	movw	r30, r28
    41de:	e9 58       	subi	r30, 0x89	; 137
    41e0:	ff 4f       	sbci	r31, 0xFF	; 255
    41e2:	60 81       	ld	r22, Z
    41e4:	71 81       	ldd	r23, Z+1	; 0x01
    41e6:	82 81       	ldd	r24, Z+2	; 0x02
    41e8:	93 81       	ldd	r25, Z+3	; 0x03
    41ea:	20 e0       	ldi	r18, 0x00	; 0
    41ec:	30 e0       	ldi	r19, 0x00	; 0
    41ee:	40 e8       	ldi	r20, 0x80	; 128
    41f0:	5f e3       	ldi	r21, 0x3F	; 63
    41f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41f6:	88 23       	and	r24, r24
    41f8:	44 f4       	brge	.+16     	; 0x420a <main+0x1a4>
		__ticks = 1;
    41fa:	fe 01       	movw	r30, r28
    41fc:	eb 58       	subi	r30, 0x8B	; 139
    41fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4200:	81 e0       	ldi	r24, 0x01	; 1
    4202:	90 e0       	ldi	r25, 0x00	; 0
    4204:	91 83       	std	Z+1, r25	; 0x01
    4206:	80 83       	st	Z, r24
    4208:	64 c0       	rjmp	.+200    	; 0x42d2 <main+0x26c>
	else if (__tmp > 65535)
    420a:	fe 01       	movw	r30, r28
    420c:	e9 58       	subi	r30, 0x89	; 137
    420e:	ff 4f       	sbci	r31, 0xFF	; 255
    4210:	60 81       	ld	r22, Z
    4212:	71 81       	ldd	r23, Z+1	; 0x01
    4214:	82 81       	ldd	r24, Z+2	; 0x02
    4216:	93 81       	ldd	r25, Z+3	; 0x03
    4218:	20 e0       	ldi	r18, 0x00	; 0
    421a:	3f ef       	ldi	r19, 0xFF	; 255
    421c:	4f e7       	ldi	r20, 0x7F	; 127
    421e:	57 e4       	ldi	r21, 0x47	; 71
    4220:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4224:	18 16       	cp	r1, r24
    4226:	0c f0       	brlt	.+2      	; 0x422a <main+0x1c4>
    4228:	43 c0       	rjmp	.+134    	; 0x42b0 <main+0x24a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    422a:	fe 01       	movw	r30, r28
    422c:	e5 58       	subi	r30, 0x85	; 133
    422e:	ff 4f       	sbci	r31, 0xFF	; 255
    4230:	60 81       	ld	r22, Z
    4232:	71 81       	ldd	r23, Z+1	; 0x01
    4234:	82 81       	ldd	r24, Z+2	; 0x02
    4236:	93 81       	ldd	r25, Z+3	; 0x03
    4238:	20 e0       	ldi	r18, 0x00	; 0
    423a:	30 e0       	ldi	r19, 0x00	; 0
    423c:	40 e2       	ldi	r20, 0x20	; 32
    423e:	51 e4       	ldi	r21, 0x41	; 65
    4240:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4244:	dc 01       	movw	r26, r24
    4246:	cb 01       	movw	r24, r22
    4248:	8e 01       	movw	r16, r28
    424a:	0b 58       	subi	r16, 0x8B	; 139
    424c:	1f 4f       	sbci	r17, 0xFF	; 255
    424e:	bc 01       	movw	r22, r24
    4250:	cd 01       	movw	r24, r26
    4252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4256:	dc 01       	movw	r26, r24
    4258:	cb 01       	movw	r24, r22
    425a:	f8 01       	movw	r30, r16
    425c:	91 83       	std	Z+1, r25	; 0x01
    425e:	80 83       	st	Z, r24
    4260:	1f c0       	rjmp	.+62     	; 0x42a0 <main+0x23a>
    4262:	fe 01       	movw	r30, r28
    4264:	ed 58       	subi	r30, 0x8D	; 141
    4266:	ff 4f       	sbci	r31, 0xFF	; 255
    4268:	80 e9       	ldi	r24, 0x90	; 144
    426a:	91 e0       	ldi	r25, 0x01	; 1
    426c:	91 83       	std	Z+1, r25	; 0x01
    426e:	80 83       	st	Z, r24
    4270:	fe 01       	movw	r30, r28
    4272:	ed 58       	subi	r30, 0x8D	; 141
    4274:	ff 4f       	sbci	r31, 0xFF	; 255
    4276:	80 81       	ld	r24, Z
    4278:	91 81       	ldd	r25, Z+1	; 0x01
    427a:	01 97       	sbiw	r24, 0x01	; 1
    427c:	f1 f7       	brne	.-4      	; 0x427a <main+0x214>
    427e:	fe 01       	movw	r30, r28
    4280:	ed 58       	subi	r30, 0x8D	; 141
    4282:	ff 4f       	sbci	r31, 0xFF	; 255
    4284:	91 83       	std	Z+1, r25	; 0x01
    4286:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4288:	de 01       	movw	r26, r28
    428a:	ab 58       	subi	r26, 0x8B	; 139
    428c:	bf 4f       	sbci	r27, 0xFF	; 255
    428e:	fe 01       	movw	r30, r28
    4290:	eb 58       	subi	r30, 0x8B	; 139
    4292:	ff 4f       	sbci	r31, 0xFF	; 255
    4294:	80 81       	ld	r24, Z
    4296:	91 81       	ldd	r25, Z+1	; 0x01
    4298:	01 97       	sbiw	r24, 0x01	; 1
    429a:	11 96       	adiw	r26, 0x01	; 1
    429c:	9c 93       	st	X, r25
    429e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42a0:	fe 01       	movw	r30, r28
    42a2:	eb 58       	subi	r30, 0x8B	; 139
    42a4:	ff 4f       	sbci	r31, 0xFF	; 255
    42a6:	80 81       	ld	r24, Z
    42a8:	91 81       	ldd	r25, Z+1	; 0x01
    42aa:	00 97       	sbiw	r24, 0x00	; 0
    42ac:	d1 f6       	brne	.-76     	; 0x4262 <main+0x1fc>
    42ae:	16 cf       	rjmp	.-468    	; 0x40dc <main+0x76>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42b0:	8e 01       	movw	r16, r28
    42b2:	0b 58       	subi	r16, 0x8B	; 139
    42b4:	1f 4f       	sbci	r17, 0xFF	; 255
    42b6:	fe 01       	movw	r30, r28
    42b8:	e9 58       	subi	r30, 0x89	; 137
    42ba:	ff 4f       	sbci	r31, 0xFF	; 255
    42bc:	60 81       	ld	r22, Z
    42be:	71 81       	ldd	r23, Z+1	; 0x01
    42c0:	82 81       	ldd	r24, Z+2	; 0x02
    42c2:	93 81       	ldd	r25, Z+3	; 0x03
    42c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42c8:	dc 01       	movw	r26, r24
    42ca:	cb 01       	movw	r24, r22
    42cc:	f8 01       	movw	r30, r16
    42ce:	91 83       	std	Z+1, r25	; 0x01
    42d0:	80 83       	st	Z, r24
    42d2:	de 01       	movw	r26, r28
    42d4:	af 58       	subi	r26, 0x8F	; 143
    42d6:	bf 4f       	sbci	r27, 0xFF	; 255
    42d8:	fe 01       	movw	r30, r28
    42da:	eb 58       	subi	r30, 0x8B	; 139
    42dc:	ff 4f       	sbci	r31, 0xFF	; 255
    42de:	80 81       	ld	r24, Z
    42e0:	91 81       	ldd	r25, Z+1	; 0x01
    42e2:	11 96       	adiw	r26, 0x01	; 1
    42e4:	9c 93       	st	X, r25
    42e6:	8e 93       	st	-X, r24
    42e8:	fe 01       	movw	r30, r28
    42ea:	ef 58       	subi	r30, 0x8F	; 143
    42ec:	ff 4f       	sbci	r31, 0xFF	; 255
    42ee:	80 81       	ld	r24, Z
    42f0:	91 81       	ldd	r25, Z+1	; 0x01
    42f2:	01 97       	sbiw	r24, 0x01	; 1
    42f4:	f1 f7       	brne	.-4      	; 0x42f2 <main+0x28c>
    42f6:	fe 01       	movw	r30, r28
    42f8:	ef 58       	subi	r30, 0x8F	; 143
    42fa:	ff 4f       	sbci	r31, 0xFF	; 255
    42fc:	91 83       	std	Z+1, r25	; 0x01
    42fe:	80 83       	st	Z, r24
    4300:	ed ce       	rjmp	.-550    	; 0x40dc <main+0x76>
			_delay_ms(500);
			break;


		case STATE_MAIN_SCREEN:
			KPD_ES_tGetKeyPressed(&Value);
    4302:	ce 01       	movw	r24, r28
    4304:	8d 57       	subi	r24, 0x7D	; 125
    4306:	9f 4f       	sbci	r25, 0xFF	; 255
    4308:	0e 94 65 1e 	call	0x3cca	; 0x3cca <KPD_ES_tGetKeyPressed>
			if(Value != KPD_U8_NOT_PRESSED){
    430c:	fe 01       	movw	r30, r28
    430e:	ed 57       	subi	r30, 0x7D	; 125
    4310:	ff 4f       	sbci	r31, 0xFF	; 255
    4312:	80 81       	ld	r24, Z
    4314:	8f 3f       	cpi	r24, 0xFF	; 255
    4316:	09 f4       	brne	.+2      	; 0x431a <main+0x2b4>
    4318:	e1 ce       	rjmp	.-574    	; 0x40dc <main+0x76>

				Lcd_ES_tsendChar('*');
    431a:	8a e2       	ldi	r24, 0x2A	; 42
    431c:	0e 94 20 1a 	call	0x3440	; 0x3440 <Lcd_ES_tsendChar>
				input[indexz] = Value; // Store input in array
    4320:	80 91 e1 02 	lds	r24, 0x02E1
    4324:	88 2f       	mov	r24, r24
    4326:	90 e0       	ldi	r25, 0x00	; 0
    4328:	fe 01       	movw	r30, r28
    432a:	ed 57       	subi	r30, 0x7D	; 125
    432c:	ff 4f       	sbci	r31, 0xFF	; 255
    432e:	20 81       	ld	r18, Z
    4330:	fc 01       	movw	r30, r24
    4332:	e4 52       	subi	r30, 0x24	; 36
    4334:	fd 4f       	sbci	r31, 0xFD	; 253
    4336:	20 83       	st	Z, r18
				indexz++;
    4338:	80 91 e1 02 	lds	r24, 0x02E1
    433c:	8f 5f       	subi	r24, 0xFF	; 255
    433e:	80 93 e1 02 	sts	0x02E1, r24
				if (indexz >= 4) { // Check if password entered
    4342:	80 91 e1 02 	lds	r24, 0x02E1
    4346:	84 30       	cpi	r24, 0x04	; 4
    4348:	08 f4       	brcc	.+2      	; 0x434c <main+0x2e6>
    434a:	c8 ce       	rjmp	.-624    	; 0x40dc <main+0x76>
					if (strcmp(input, password) == 0) {
    434c:	8c ed       	ldi	r24, 0xDC	; 220
    434e:	92 e0       	ldi	r25, 0x02	; 2
    4350:	2e e9       	ldi	r18, 0x9E	; 158
    4352:	32 e0       	ldi	r19, 0x02	; 2
    4354:	b9 01       	movw	r22, r18
    4356:	0e 94 c7 28 	call	0x518e	; 0x518e <strcmp>
    435a:	00 97       	sbiw	r24, 0x00	; 0
    435c:	09 f0       	breq	.+2      	; 0x4360 <main+0x2fa>
    435e:	c6 c0       	rjmp	.+396    	; 0x44ec <main+0x486>
						// Password is correct, perform action
						lcd_ES_tclear();
    4360:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <lcd_ES_tclear>
						Lcd_ES_tsendString("Welcome to Motor");
    4364:	81 e7       	ldi	r24, 0x71	; 113
    4366:	90 e0       	ldi	r25, 0x00	; 0
    4368:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <Lcd_ES_tsendString>
						LCD_ES_tGoTo(1, 0);
    436c:	81 e0       	ldi	r24, 0x01	; 1
    436e:	60 e0       	ldi	r22, 0x00	; 0
    4370:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <LCD_ES_tGoTo>
						Lcd_ES_tsendString("Dash board");
    4374:	82 e8       	ldi	r24, 0x82	; 130
    4376:	90 e0       	ldi	r25, 0x00	; 0
    4378:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <Lcd_ES_tsendString>
    437c:	fe 01       	movw	r30, r28
    437e:	e3 59       	subi	r30, 0x93	; 147
    4380:	ff 4f       	sbci	r31, 0xFF	; 255
    4382:	80 e0       	ldi	r24, 0x00	; 0
    4384:	90 e0       	ldi	r25, 0x00	; 0
    4386:	aa ef       	ldi	r26, 0xFA	; 250
    4388:	b4 e4       	ldi	r27, 0x44	; 68
    438a:	80 83       	st	Z, r24
    438c:	91 83       	std	Z+1, r25	; 0x01
    438e:	a2 83       	std	Z+2, r26	; 0x02
    4390:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4392:	8e 01       	movw	r16, r28
    4394:	07 59       	subi	r16, 0x97	; 151
    4396:	1f 4f       	sbci	r17, 0xFF	; 255
    4398:	fe 01       	movw	r30, r28
    439a:	e3 59       	subi	r30, 0x93	; 147
    439c:	ff 4f       	sbci	r31, 0xFF	; 255
    439e:	60 81       	ld	r22, Z
    43a0:	71 81       	ldd	r23, Z+1	; 0x01
    43a2:	82 81       	ldd	r24, Z+2	; 0x02
    43a4:	93 81       	ldd	r25, Z+3	; 0x03
    43a6:	20 e0       	ldi	r18, 0x00	; 0
    43a8:	30 e0       	ldi	r19, 0x00	; 0
    43aa:	4a e7       	ldi	r20, 0x7A	; 122
    43ac:	55 e4       	ldi	r21, 0x45	; 69
    43ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43b2:	dc 01       	movw	r26, r24
    43b4:	cb 01       	movw	r24, r22
    43b6:	f8 01       	movw	r30, r16
    43b8:	80 83       	st	Z, r24
    43ba:	91 83       	std	Z+1, r25	; 0x01
    43bc:	a2 83       	std	Z+2, r26	; 0x02
    43be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    43c0:	fe 01       	movw	r30, r28
    43c2:	e7 59       	subi	r30, 0x97	; 151
    43c4:	ff 4f       	sbci	r31, 0xFF	; 255
    43c6:	60 81       	ld	r22, Z
    43c8:	71 81       	ldd	r23, Z+1	; 0x01
    43ca:	82 81       	ldd	r24, Z+2	; 0x02
    43cc:	93 81       	ldd	r25, Z+3	; 0x03
    43ce:	20 e0       	ldi	r18, 0x00	; 0
    43d0:	30 e0       	ldi	r19, 0x00	; 0
    43d2:	40 e8       	ldi	r20, 0x80	; 128
    43d4:	5f e3       	ldi	r21, 0x3F	; 63
    43d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43da:	88 23       	and	r24, r24
    43dc:	44 f4       	brge	.+16     	; 0x43ee <main+0x388>
		__ticks = 1;
    43de:	fe 01       	movw	r30, r28
    43e0:	e9 59       	subi	r30, 0x99	; 153
    43e2:	ff 4f       	sbci	r31, 0xFF	; 255
    43e4:	81 e0       	ldi	r24, 0x01	; 1
    43e6:	90 e0       	ldi	r25, 0x00	; 0
    43e8:	91 83       	std	Z+1, r25	; 0x01
    43ea:	80 83       	st	Z, r24
    43ec:	64 c0       	rjmp	.+200    	; 0x44b6 <main+0x450>
	else if (__tmp > 65535)
    43ee:	fe 01       	movw	r30, r28
    43f0:	e7 59       	subi	r30, 0x97	; 151
    43f2:	ff 4f       	sbci	r31, 0xFF	; 255
    43f4:	60 81       	ld	r22, Z
    43f6:	71 81       	ldd	r23, Z+1	; 0x01
    43f8:	82 81       	ldd	r24, Z+2	; 0x02
    43fa:	93 81       	ldd	r25, Z+3	; 0x03
    43fc:	20 e0       	ldi	r18, 0x00	; 0
    43fe:	3f ef       	ldi	r19, 0xFF	; 255
    4400:	4f e7       	ldi	r20, 0x7F	; 127
    4402:	57 e4       	ldi	r21, 0x47	; 71
    4404:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4408:	18 16       	cp	r1, r24
    440a:	0c f0       	brlt	.+2      	; 0x440e <main+0x3a8>
    440c:	43 c0       	rjmp	.+134    	; 0x4494 <main+0x42e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    440e:	fe 01       	movw	r30, r28
    4410:	e3 59       	subi	r30, 0x93	; 147
    4412:	ff 4f       	sbci	r31, 0xFF	; 255
    4414:	60 81       	ld	r22, Z
    4416:	71 81       	ldd	r23, Z+1	; 0x01
    4418:	82 81       	ldd	r24, Z+2	; 0x02
    441a:	93 81       	ldd	r25, Z+3	; 0x03
    441c:	20 e0       	ldi	r18, 0x00	; 0
    441e:	30 e0       	ldi	r19, 0x00	; 0
    4420:	40 e2       	ldi	r20, 0x20	; 32
    4422:	51 e4       	ldi	r21, 0x41	; 65
    4424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4428:	dc 01       	movw	r26, r24
    442a:	cb 01       	movw	r24, r22
    442c:	8e 01       	movw	r16, r28
    442e:	09 59       	subi	r16, 0x99	; 153
    4430:	1f 4f       	sbci	r17, 0xFF	; 255
    4432:	bc 01       	movw	r22, r24
    4434:	cd 01       	movw	r24, r26
    4436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    443a:	dc 01       	movw	r26, r24
    443c:	cb 01       	movw	r24, r22
    443e:	f8 01       	movw	r30, r16
    4440:	91 83       	std	Z+1, r25	; 0x01
    4442:	80 83       	st	Z, r24
    4444:	1f c0       	rjmp	.+62     	; 0x4484 <main+0x41e>
    4446:	fe 01       	movw	r30, r28
    4448:	eb 59       	subi	r30, 0x9B	; 155
    444a:	ff 4f       	sbci	r31, 0xFF	; 255
    444c:	80 e9       	ldi	r24, 0x90	; 144
    444e:	91 e0       	ldi	r25, 0x01	; 1
    4450:	91 83       	std	Z+1, r25	; 0x01
    4452:	80 83       	st	Z, r24
    4454:	fe 01       	movw	r30, r28
    4456:	eb 59       	subi	r30, 0x9B	; 155
    4458:	ff 4f       	sbci	r31, 0xFF	; 255
    445a:	80 81       	ld	r24, Z
    445c:	91 81       	ldd	r25, Z+1	; 0x01
    445e:	01 97       	sbiw	r24, 0x01	; 1
    4460:	f1 f7       	brne	.-4      	; 0x445e <main+0x3f8>
    4462:	fe 01       	movw	r30, r28
    4464:	eb 59       	subi	r30, 0x9B	; 155
    4466:	ff 4f       	sbci	r31, 0xFF	; 255
    4468:	91 83       	std	Z+1, r25	; 0x01
    446a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    446c:	de 01       	movw	r26, r28
    446e:	a9 59       	subi	r26, 0x99	; 153
    4470:	bf 4f       	sbci	r27, 0xFF	; 255
    4472:	fe 01       	movw	r30, r28
    4474:	e9 59       	subi	r30, 0x99	; 153
    4476:	ff 4f       	sbci	r31, 0xFF	; 255
    4478:	80 81       	ld	r24, Z
    447a:	91 81       	ldd	r25, Z+1	; 0x01
    447c:	01 97       	sbiw	r24, 0x01	; 1
    447e:	11 96       	adiw	r26, 0x01	; 1
    4480:	9c 93       	st	X, r25
    4482:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4484:	fe 01       	movw	r30, r28
    4486:	e9 59       	subi	r30, 0x99	; 153
    4488:	ff 4f       	sbci	r31, 0xFF	; 255
    448a:	80 81       	ld	r24, Z
    448c:	91 81       	ldd	r25, Z+1	; 0x01
    448e:	00 97       	sbiw	r24, 0x00	; 0
    4490:	d1 f6       	brne	.-76     	; 0x4446 <main+0x3e0>
    4492:	28 c0       	rjmp	.+80     	; 0x44e4 <main+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4494:	8e 01       	movw	r16, r28
    4496:	09 59       	subi	r16, 0x99	; 153
    4498:	1f 4f       	sbci	r17, 0xFF	; 255
    449a:	fe 01       	movw	r30, r28
    449c:	e7 59       	subi	r30, 0x97	; 151
    449e:	ff 4f       	sbci	r31, 0xFF	; 255
    44a0:	60 81       	ld	r22, Z
    44a2:	71 81       	ldd	r23, Z+1	; 0x01
    44a4:	82 81       	ldd	r24, Z+2	; 0x02
    44a6:	93 81       	ldd	r25, Z+3	; 0x03
    44a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44ac:	dc 01       	movw	r26, r24
    44ae:	cb 01       	movw	r24, r22
    44b0:	f8 01       	movw	r30, r16
    44b2:	91 83       	std	Z+1, r25	; 0x01
    44b4:	80 83       	st	Z, r24
    44b6:	de 01       	movw	r26, r28
    44b8:	ad 59       	subi	r26, 0x9D	; 157
    44ba:	bf 4f       	sbci	r27, 0xFF	; 255
    44bc:	fe 01       	movw	r30, r28
    44be:	e9 59       	subi	r30, 0x99	; 153
    44c0:	ff 4f       	sbci	r31, 0xFF	; 255
    44c2:	80 81       	ld	r24, Z
    44c4:	91 81       	ldd	r25, Z+1	; 0x01
    44c6:	11 96       	adiw	r26, 0x01	; 1
    44c8:	9c 93       	st	X, r25
    44ca:	8e 93       	st	-X, r24
    44cc:	fe 01       	movw	r30, r28
    44ce:	ed 59       	subi	r30, 0x9D	; 157
    44d0:	ff 4f       	sbci	r31, 0xFF	; 255
    44d2:	80 81       	ld	r24, Z
    44d4:	91 81       	ldd	r25, Z+1	; 0x01
    44d6:	01 97       	sbiw	r24, 0x01	; 1
    44d8:	f1 f7       	brne	.-4      	; 0x44d6 <main+0x470>
    44da:	fe 01       	movw	r30, r28
    44dc:	ed 59       	subi	r30, 0x9D	; 157
    44de:	ff 4f       	sbci	r31, 0xFF	; 255
    44e0:	91 83       	std	Z+1, r25	; 0x01
    44e2:	80 83       	st	Z, r24
						_delay_ms(2000);
						currentState = STATE_MOTOR_OPTIONS;
    44e4:	82 e0       	ldi	r24, 0x02	; 2
    44e6:	80 93 ff 02 	sts	0x02FF, r24
    44ea:	f8 cd       	rjmp	.-1040   	; 0x40dc <main+0x76>
					}
					else {
						// Password is incorrect, reset input
						lcd_ES_tclear();
    44ec:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <lcd_ES_tclear>
						Lcd_ES_tsendString("Wrong Password");
    44f0:	8d e8       	ldi	r24, 0x8D	; 141
    44f2:	90 e0       	ldi	r25, 0x00	; 0
    44f4:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <Lcd_ES_tsendString>
						memset(input, '\0', sizeof(input));
    44f8:	8c ed       	ldi	r24, 0xDC	; 220
    44fa:	92 e0       	ldi	r25, 0x02	; 2
    44fc:	60 e0       	ldi	r22, 0x00	; 0
    44fe:	70 e0       	ldi	r23, 0x00	; 0
    4500:	45 e0       	ldi	r20, 0x05	; 5
    4502:	50 e0       	ldi	r21, 0x00	; 0
    4504:	0e 94 c0 28 	call	0x5180	; 0x5180 <memset>
						indexz = 0;
    4508:	10 92 e1 02 	sts	0x02E1, r1
    450c:	fe 01       	movw	r30, r28
    450e:	e1 5a       	subi	r30, 0xA1	; 161
    4510:	ff 4f       	sbci	r31, 0xFF	; 255
    4512:	80 e0       	ldi	r24, 0x00	; 0
    4514:	90 e8       	ldi	r25, 0x80	; 128
    4516:	ab eb       	ldi	r26, 0xBB	; 187
    4518:	b4 e4       	ldi	r27, 0x44	; 68
    451a:	80 83       	st	Z, r24
    451c:	91 83       	std	Z+1, r25	; 0x01
    451e:	a2 83       	std	Z+2, r26	; 0x02
    4520:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4522:	8e 01       	movw	r16, r28
    4524:	05 5a       	subi	r16, 0xA5	; 165
    4526:	1f 4f       	sbci	r17, 0xFF	; 255
    4528:	fe 01       	movw	r30, r28
    452a:	e1 5a       	subi	r30, 0xA1	; 161
    452c:	ff 4f       	sbci	r31, 0xFF	; 255
    452e:	60 81       	ld	r22, Z
    4530:	71 81       	ldd	r23, Z+1	; 0x01
    4532:	82 81       	ldd	r24, Z+2	; 0x02
    4534:	93 81       	ldd	r25, Z+3	; 0x03
    4536:	20 e0       	ldi	r18, 0x00	; 0
    4538:	30 e0       	ldi	r19, 0x00	; 0
    453a:	4a e7       	ldi	r20, 0x7A	; 122
    453c:	55 e4       	ldi	r21, 0x45	; 69
    453e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4542:	dc 01       	movw	r26, r24
    4544:	cb 01       	movw	r24, r22
    4546:	f8 01       	movw	r30, r16
    4548:	80 83       	st	Z, r24
    454a:	91 83       	std	Z+1, r25	; 0x01
    454c:	a2 83       	std	Z+2, r26	; 0x02
    454e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4550:	fe 01       	movw	r30, r28
    4552:	e5 5a       	subi	r30, 0xA5	; 165
    4554:	ff 4f       	sbci	r31, 0xFF	; 255
    4556:	60 81       	ld	r22, Z
    4558:	71 81       	ldd	r23, Z+1	; 0x01
    455a:	82 81       	ldd	r24, Z+2	; 0x02
    455c:	93 81       	ldd	r25, Z+3	; 0x03
    455e:	20 e0       	ldi	r18, 0x00	; 0
    4560:	30 e0       	ldi	r19, 0x00	; 0
    4562:	40 e8       	ldi	r20, 0x80	; 128
    4564:	5f e3       	ldi	r21, 0x3F	; 63
    4566:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    456a:	88 23       	and	r24, r24
    456c:	44 f4       	brge	.+16     	; 0x457e <main+0x518>
		__ticks = 1;
    456e:	fe 01       	movw	r30, r28
    4570:	e7 5a       	subi	r30, 0xA7	; 167
    4572:	ff 4f       	sbci	r31, 0xFF	; 255
    4574:	81 e0       	ldi	r24, 0x01	; 1
    4576:	90 e0       	ldi	r25, 0x00	; 0
    4578:	91 83       	std	Z+1, r25	; 0x01
    457a:	80 83       	st	Z, r24
    457c:	64 c0       	rjmp	.+200    	; 0x4646 <main+0x5e0>
	else if (__tmp > 65535)
    457e:	fe 01       	movw	r30, r28
    4580:	e5 5a       	subi	r30, 0xA5	; 165
    4582:	ff 4f       	sbci	r31, 0xFF	; 255
    4584:	60 81       	ld	r22, Z
    4586:	71 81       	ldd	r23, Z+1	; 0x01
    4588:	82 81       	ldd	r24, Z+2	; 0x02
    458a:	93 81       	ldd	r25, Z+3	; 0x03
    458c:	20 e0       	ldi	r18, 0x00	; 0
    458e:	3f ef       	ldi	r19, 0xFF	; 255
    4590:	4f e7       	ldi	r20, 0x7F	; 127
    4592:	57 e4       	ldi	r21, 0x47	; 71
    4594:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4598:	18 16       	cp	r1, r24
    459a:	0c f0       	brlt	.+2      	; 0x459e <main+0x538>
    459c:	43 c0       	rjmp	.+134    	; 0x4624 <main+0x5be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    459e:	fe 01       	movw	r30, r28
    45a0:	e1 5a       	subi	r30, 0xA1	; 161
    45a2:	ff 4f       	sbci	r31, 0xFF	; 255
    45a4:	60 81       	ld	r22, Z
    45a6:	71 81       	ldd	r23, Z+1	; 0x01
    45a8:	82 81       	ldd	r24, Z+2	; 0x02
    45aa:	93 81       	ldd	r25, Z+3	; 0x03
    45ac:	20 e0       	ldi	r18, 0x00	; 0
    45ae:	30 e0       	ldi	r19, 0x00	; 0
    45b0:	40 e2       	ldi	r20, 0x20	; 32
    45b2:	51 e4       	ldi	r21, 0x41	; 65
    45b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45b8:	dc 01       	movw	r26, r24
    45ba:	cb 01       	movw	r24, r22
    45bc:	8e 01       	movw	r16, r28
    45be:	07 5a       	subi	r16, 0xA7	; 167
    45c0:	1f 4f       	sbci	r17, 0xFF	; 255
    45c2:	bc 01       	movw	r22, r24
    45c4:	cd 01       	movw	r24, r26
    45c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45ca:	dc 01       	movw	r26, r24
    45cc:	cb 01       	movw	r24, r22
    45ce:	f8 01       	movw	r30, r16
    45d0:	91 83       	std	Z+1, r25	; 0x01
    45d2:	80 83       	st	Z, r24
    45d4:	1f c0       	rjmp	.+62     	; 0x4614 <main+0x5ae>
    45d6:	fe 01       	movw	r30, r28
    45d8:	e9 5a       	subi	r30, 0xA9	; 169
    45da:	ff 4f       	sbci	r31, 0xFF	; 255
    45dc:	80 e9       	ldi	r24, 0x90	; 144
    45de:	91 e0       	ldi	r25, 0x01	; 1
    45e0:	91 83       	std	Z+1, r25	; 0x01
    45e2:	80 83       	st	Z, r24
    45e4:	fe 01       	movw	r30, r28
    45e6:	e9 5a       	subi	r30, 0xA9	; 169
    45e8:	ff 4f       	sbci	r31, 0xFF	; 255
    45ea:	80 81       	ld	r24, Z
    45ec:	91 81       	ldd	r25, Z+1	; 0x01
    45ee:	01 97       	sbiw	r24, 0x01	; 1
    45f0:	f1 f7       	brne	.-4      	; 0x45ee <main+0x588>
    45f2:	fe 01       	movw	r30, r28
    45f4:	e9 5a       	subi	r30, 0xA9	; 169
    45f6:	ff 4f       	sbci	r31, 0xFF	; 255
    45f8:	91 83       	std	Z+1, r25	; 0x01
    45fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45fc:	de 01       	movw	r26, r28
    45fe:	a7 5a       	subi	r26, 0xA7	; 167
    4600:	bf 4f       	sbci	r27, 0xFF	; 255
    4602:	fe 01       	movw	r30, r28
    4604:	e7 5a       	subi	r30, 0xA7	; 167
    4606:	ff 4f       	sbci	r31, 0xFF	; 255
    4608:	80 81       	ld	r24, Z
    460a:	91 81       	ldd	r25, Z+1	; 0x01
    460c:	01 97       	sbiw	r24, 0x01	; 1
    460e:	11 96       	adiw	r26, 0x01	; 1
    4610:	9c 93       	st	X, r25
    4612:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4614:	fe 01       	movw	r30, r28
    4616:	e7 5a       	subi	r30, 0xA7	; 167
    4618:	ff 4f       	sbci	r31, 0xFF	; 255
    461a:	80 81       	ld	r24, Z
    461c:	91 81       	ldd	r25, Z+1	; 0x01
    461e:	00 97       	sbiw	r24, 0x00	; 0
    4620:	d1 f6       	brne	.-76     	; 0x45d6 <main+0x570>
    4622:	27 c0       	rjmp	.+78     	; 0x4672 <main+0x60c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4624:	8e 01       	movw	r16, r28
    4626:	07 5a       	subi	r16, 0xA7	; 167
    4628:	1f 4f       	sbci	r17, 0xFF	; 255
    462a:	fe 01       	movw	r30, r28
    462c:	e5 5a       	subi	r30, 0xA5	; 165
    462e:	ff 4f       	sbci	r31, 0xFF	; 255
    4630:	60 81       	ld	r22, Z
    4632:	71 81       	ldd	r23, Z+1	; 0x01
    4634:	82 81       	ldd	r24, Z+2	; 0x02
    4636:	93 81       	ldd	r25, Z+3	; 0x03
    4638:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    463c:	dc 01       	movw	r26, r24
    463e:	cb 01       	movw	r24, r22
    4640:	f8 01       	movw	r30, r16
    4642:	91 83       	std	Z+1, r25	; 0x01
    4644:	80 83       	st	Z, r24
    4646:	de 01       	movw	r26, r28
    4648:	ab 5a       	subi	r26, 0xAB	; 171
    464a:	bf 4f       	sbci	r27, 0xFF	; 255
    464c:	fe 01       	movw	r30, r28
    464e:	e7 5a       	subi	r30, 0xA7	; 167
    4650:	ff 4f       	sbci	r31, 0xFF	; 255
    4652:	80 81       	ld	r24, Z
    4654:	91 81       	ldd	r25, Z+1	; 0x01
    4656:	8d 93       	st	X+, r24
    4658:	9c 93       	st	X, r25
    465a:	fe 01       	movw	r30, r28
    465c:	eb 5a       	subi	r30, 0xAB	; 171
    465e:	ff 4f       	sbci	r31, 0xFF	; 255
    4660:	80 81       	ld	r24, Z
    4662:	91 81       	ldd	r25, Z+1	; 0x01
    4664:	01 97       	sbiw	r24, 0x01	; 1
    4666:	f1 f7       	brne	.-4      	; 0x4664 <main+0x5fe>
    4668:	fe 01       	movw	r30, r28
    466a:	eb 5a       	subi	r30, 0xAB	; 171
    466c:	ff 4f       	sbci	r31, 0xFF	; 255
    466e:	91 83       	std	Z+1, r25	; 0x01
    4670:	80 83       	st	Z, r24
						_delay_ms(1500);
						flag=0;
    4672:	10 92 da 02 	sts	0x02DA, r1
						count++;
    4676:	de 01       	movw	r26, r28
    4678:	ae 57       	subi	r26, 0x7E	; 126
    467a:	bf 4f       	sbci	r27, 0xFF	; 255
    467c:	fe 01       	movw	r30, r28
    467e:	ee 57       	subi	r30, 0x7E	; 126
    4680:	ff 4f       	sbci	r31, 0xFF	; 255
    4682:	80 81       	ld	r24, Z
    4684:	8f 5f       	subi	r24, 0xFF	; 255
    4686:	8c 93       	st	X, r24
						lcd_ES_tclear();
    4688:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <lcd_ES_tclear>
						Lcd_ES_tsendString("Try again");
    468c:	8c e9       	ldi	r24, 0x9C	; 156
    468e:	90 e0       	ldi	r25, 0x00	; 0
    4690:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <Lcd_ES_tsendString>
						LCD_ES_tGoTo(1, 5);
    4694:	81 e0       	ldi	r24, 0x01	; 1
    4696:	65 e0       	ldi	r22, 0x05	; 5
    4698:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <LCD_ES_tGoTo>
						if(count == 3){
    469c:	fe 01       	movw	r30, r28
    469e:	ee 57       	subi	r30, 0x7E	; 126
    46a0:	ff 4f       	sbci	r31, 0xFF	; 255
    46a2:	80 81       	ld	r24, Z
    46a4:	83 30       	cpi	r24, 0x03	; 3
    46a6:	09 f0       	breq	.+2      	; 0x46aa <main+0x644>
    46a8:	19 cd       	rjmp	.-1486   	; 0x40dc <main+0x76>
							lcd_ES_tclear();
    46aa:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <lcd_ES_tclear>
							Lcd_ES_tsendString("Blocked !!!");
    46ae:	86 ea       	ldi	r24, 0xA6	; 166
    46b0:	90 e0       	ldi	r25, 0x00	; 0
    46b2:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <Lcd_ES_tsendString>
							count=0;
    46b6:	fe 01       	movw	r30, r28
    46b8:	ee 57       	subi	r30, 0x7E	; 126
    46ba:	ff 4f       	sbci	r31, 0xFF	; 255
    46bc:	10 82       	st	Z, r1
    46be:	0e cd       	rjmp	.-1508   	; 0x40dc <main+0x76>

			break;


		case STATE_MOTOR_OPTIONS:
			if (!gettingMotorOption) {
    46c0:	80 91 ee 02 	lds	r24, 0x02EE
    46c4:	88 23       	and	r24, r24
    46c6:	c9 f4       	brne	.+50     	; 0x46fa <main+0x694>
				lcd_ES_tclear();
    46c8:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <lcd_ES_tclear>
				Lcd_ES_tsendString("1- DC Motor");
    46cc:	82 eb       	ldi	r24, 0xB2	; 178
    46ce:	90 e0       	ldi	r25, 0x00	; 0
    46d0:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <Lcd_ES_tsendString>
				LCD_ES_tGoTo(1, 0);
    46d4:	81 e0       	ldi	r24, 0x01	; 1
    46d6:	60 e0       	ldi	r22, 0x00	; 0
    46d8:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <LCD_ES_tGoTo>
				Lcd_ES_tsendString("2- Stepper");
    46dc:	8e eb       	ldi	r24, 0xBE	; 190
    46de:	90 e0       	ldi	r25, 0x00	; 0
    46e0:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <Lcd_ES_tsendString>
				LCD_ES_tGoTo(2, 0);
    46e4:	82 e0       	ldi	r24, 0x02	; 2
    46e6:	60 e0       	ldi	r22, 0x00	; 0
    46e8:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <LCD_ES_tGoTo>
				Lcd_ES_tsendString("3- Servo Motor");
    46ec:	89 ec       	ldi	r24, 0xC9	; 201
    46ee:	90 e0       	ldi	r25, 0x00	; 0
    46f0:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <Lcd_ES_tsendString>
				gettingMotorOption = 1;
    46f4:	81 e0       	ldi	r24, 0x01	; 1
    46f6:	80 93 ee 02 	sts	0x02EE, r24
			}

			KPD_ES_tGetKeyPressed(&Option);
    46fa:	ce 01       	movw	r24, r28
    46fc:	8c 57       	subi	r24, 0x7C	; 124
    46fe:	9f 4f       	sbci	r25, 0xFF	; 255
    4700:	0e 94 65 1e 	call	0x3cca	; 0x3cca <KPD_ES_tGetKeyPressed>
			if (Option != KPD_U8_NOT_PRESSED) {
    4704:	fe 01       	movw	r30, r28
    4706:	ec 57       	subi	r30, 0x7C	; 124
    4708:	ff 4f       	sbci	r31, 0xFF	; 255
    470a:	80 81       	ld	r24, Z
    470c:	8f 3f       	cpi	r24, 0xFF	; 255
    470e:	09 f4       	brne	.+2      	; 0x4712 <main+0x6ac>
    4710:	e5 cc       	rjmp	.-1590   	; 0x40dc <main+0x76>
				if (Option == '1') {  // DC Motor
    4712:	fe 01       	movw	r30, r28
    4714:	ec 57       	subi	r30, 0x7C	; 124
    4716:	ff 4f       	sbci	r31, 0xFF	; 255
    4718:	80 81       	ld	r24, Z
    471a:	81 33       	cpi	r24, 0x31	; 49
    471c:	31 f4       	brne	.+12     	; 0x472a <main+0x6c4>
					gettingMotorOption = 0;
    471e:	10 92 ee 02 	sts	0x02EE, r1
					currentState = STATE_DC_MOTOR_MOVE;
    4722:	83 e0       	ldi	r24, 0x03	; 3
    4724:	80 93 ff 02 	sts	0x02FF, r24
    4728:	d9 cc       	rjmp	.-1614   	; 0x40dc <main+0x76>
				} else if (Option == '2') {  // Stepper Motor
    472a:	fe 01       	movw	r30, r28
    472c:	ec 57       	subi	r30, 0x7C	; 124
    472e:	ff 4f       	sbci	r31, 0xFF	; 255
    4730:	80 81       	ld	r24, Z
    4732:	82 33       	cpi	r24, 0x32	; 50
    4734:	21 f4       	brne	.+8      	; 0x473e <main+0x6d8>
					currentState = STATE_STEPPER_MOVE;
    4736:	84 e0       	ldi	r24, 0x04	; 4
    4738:	80 93 ff 02 	sts	0x02FF, r24
    473c:	cf cc       	rjmp	.-1634   	; 0x40dc <main+0x76>
				}else if (Option == '3') {  // Stepper Motor
    473e:	fe 01       	movw	r30, r28
    4740:	ec 57       	subi	r30, 0x7C	; 124
    4742:	ff 4f       	sbci	r31, 0xFF	; 255
    4744:	80 81       	ld	r24, Z
    4746:	83 33       	cpi	r24, 0x33	; 51
    4748:	21 f4       	brne	.+8      	; 0x4752 <main+0x6ec>
					currentState = STATE_SERVO_MOVE;
    474a:	85 e0       	ldi	r24, 0x05	; 5
    474c:	80 93 ff 02 	sts	0x02FF, r24
    4750:	c5 cc       	rjmp	.-1654   	; 0x40dc <main+0x76>
				}else {
					lcd_ES_tclear();
    4752:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <lcd_ES_tclear>
					Lcd_ES_tsendString("Invalid Option");
    4756:	88 ed       	ldi	r24, 0xD8	; 216
    4758:	90 e0       	ldi	r25, 0x00	; 0
    475a:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <Lcd_ES_tsendString>
    475e:	fe 01       	movw	r30, r28
    4760:	ef 5a       	subi	r30, 0xAF	; 175
    4762:	ff 4f       	sbci	r31, 0xFF	; 255
    4764:	80 e0       	ldi	r24, 0x00	; 0
    4766:	90 e0       	ldi	r25, 0x00	; 0
    4768:	aa ef       	ldi	r26, 0xFA	; 250
    476a:	b4 e4       	ldi	r27, 0x44	; 68
    476c:	80 83       	st	Z, r24
    476e:	91 83       	std	Z+1, r25	; 0x01
    4770:	a2 83       	std	Z+2, r26	; 0x02
    4772:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4774:	8e 01       	movw	r16, r28
    4776:	03 5b       	subi	r16, 0xB3	; 179
    4778:	1f 4f       	sbci	r17, 0xFF	; 255
    477a:	fe 01       	movw	r30, r28
    477c:	ef 5a       	subi	r30, 0xAF	; 175
    477e:	ff 4f       	sbci	r31, 0xFF	; 255
    4780:	60 81       	ld	r22, Z
    4782:	71 81       	ldd	r23, Z+1	; 0x01
    4784:	82 81       	ldd	r24, Z+2	; 0x02
    4786:	93 81       	ldd	r25, Z+3	; 0x03
    4788:	20 e0       	ldi	r18, 0x00	; 0
    478a:	30 e0       	ldi	r19, 0x00	; 0
    478c:	4a e7       	ldi	r20, 0x7A	; 122
    478e:	55 e4       	ldi	r21, 0x45	; 69
    4790:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4794:	dc 01       	movw	r26, r24
    4796:	cb 01       	movw	r24, r22
    4798:	f8 01       	movw	r30, r16
    479a:	80 83       	st	Z, r24
    479c:	91 83       	std	Z+1, r25	; 0x01
    479e:	a2 83       	std	Z+2, r26	; 0x02
    47a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    47a2:	fe 01       	movw	r30, r28
    47a4:	e3 5b       	subi	r30, 0xB3	; 179
    47a6:	ff 4f       	sbci	r31, 0xFF	; 255
    47a8:	60 81       	ld	r22, Z
    47aa:	71 81       	ldd	r23, Z+1	; 0x01
    47ac:	82 81       	ldd	r24, Z+2	; 0x02
    47ae:	93 81       	ldd	r25, Z+3	; 0x03
    47b0:	20 e0       	ldi	r18, 0x00	; 0
    47b2:	30 e0       	ldi	r19, 0x00	; 0
    47b4:	40 e8       	ldi	r20, 0x80	; 128
    47b6:	5f e3       	ldi	r21, 0x3F	; 63
    47b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47bc:	88 23       	and	r24, r24
    47be:	44 f4       	brge	.+16     	; 0x47d0 <main+0x76a>
		__ticks = 1;
    47c0:	fe 01       	movw	r30, r28
    47c2:	e5 5b       	subi	r30, 0xB5	; 181
    47c4:	ff 4f       	sbci	r31, 0xFF	; 255
    47c6:	81 e0       	ldi	r24, 0x01	; 1
    47c8:	90 e0       	ldi	r25, 0x00	; 0
    47ca:	91 83       	std	Z+1, r25	; 0x01
    47cc:	80 83       	st	Z, r24
    47ce:	64 c0       	rjmp	.+200    	; 0x4898 <main+0x832>
	else if (__tmp > 65535)
    47d0:	fe 01       	movw	r30, r28
    47d2:	e3 5b       	subi	r30, 0xB3	; 179
    47d4:	ff 4f       	sbci	r31, 0xFF	; 255
    47d6:	60 81       	ld	r22, Z
    47d8:	71 81       	ldd	r23, Z+1	; 0x01
    47da:	82 81       	ldd	r24, Z+2	; 0x02
    47dc:	93 81       	ldd	r25, Z+3	; 0x03
    47de:	20 e0       	ldi	r18, 0x00	; 0
    47e0:	3f ef       	ldi	r19, 0xFF	; 255
    47e2:	4f e7       	ldi	r20, 0x7F	; 127
    47e4:	57 e4       	ldi	r21, 0x47	; 71
    47e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47ea:	18 16       	cp	r1, r24
    47ec:	0c f0       	brlt	.+2      	; 0x47f0 <main+0x78a>
    47ee:	43 c0       	rjmp	.+134    	; 0x4876 <main+0x810>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47f0:	fe 01       	movw	r30, r28
    47f2:	ef 5a       	subi	r30, 0xAF	; 175
    47f4:	ff 4f       	sbci	r31, 0xFF	; 255
    47f6:	60 81       	ld	r22, Z
    47f8:	71 81       	ldd	r23, Z+1	; 0x01
    47fa:	82 81       	ldd	r24, Z+2	; 0x02
    47fc:	93 81       	ldd	r25, Z+3	; 0x03
    47fe:	20 e0       	ldi	r18, 0x00	; 0
    4800:	30 e0       	ldi	r19, 0x00	; 0
    4802:	40 e2       	ldi	r20, 0x20	; 32
    4804:	51 e4       	ldi	r21, 0x41	; 65
    4806:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    480a:	dc 01       	movw	r26, r24
    480c:	cb 01       	movw	r24, r22
    480e:	8e 01       	movw	r16, r28
    4810:	05 5b       	subi	r16, 0xB5	; 181
    4812:	1f 4f       	sbci	r17, 0xFF	; 255
    4814:	bc 01       	movw	r22, r24
    4816:	cd 01       	movw	r24, r26
    4818:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    481c:	dc 01       	movw	r26, r24
    481e:	cb 01       	movw	r24, r22
    4820:	f8 01       	movw	r30, r16
    4822:	91 83       	std	Z+1, r25	; 0x01
    4824:	80 83       	st	Z, r24
    4826:	1f c0       	rjmp	.+62     	; 0x4866 <main+0x800>
    4828:	fe 01       	movw	r30, r28
    482a:	e7 5b       	subi	r30, 0xB7	; 183
    482c:	ff 4f       	sbci	r31, 0xFF	; 255
    482e:	80 e9       	ldi	r24, 0x90	; 144
    4830:	91 e0       	ldi	r25, 0x01	; 1
    4832:	91 83       	std	Z+1, r25	; 0x01
    4834:	80 83       	st	Z, r24
    4836:	fe 01       	movw	r30, r28
    4838:	e7 5b       	subi	r30, 0xB7	; 183
    483a:	ff 4f       	sbci	r31, 0xFF	; 255
    483c:	80 81       	ld	r24, Z
    483e:	91 81       	ldd	r25, Z+1	; 0x01
    4840:	01 97       	sbiw	r24, 0x01	; 1
    4842:	f1 f7       	brne	.-4      	; 0x4840 <main+0x7da>
    4844:	fe 01       	movw	r30, r28
    4846:	e7 5b       	subi	r30, 0xB7	; 183
    4848:	ff 4f       	sbci	r31, 0xFF	; 255
    484a:	91 83       	std	Z+1, r25	; 0x01
    484c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    484e:	de 01       	movw	r26, r28
    4850:	a5 5b       	subi	r26, 0xB5	; 181
    4852:	bf 4f       	sbci	r27, 0xFF	; 255
    4854:	fe 01       	movw	r30, r28
    4856:	e5 5b       	subi	r30, 0xB5	; 181
    4858:	ff 4f       	sbci	r31, 0xFF	; 255
    485a:	80 81       	ld	r24, Z
    485c:	91 81       	ldd	r25, Z+1	; 0x01
    485e:	01 97       	sbiw	r24, 0x01	; 1
    4860:	11 96       	adiw	r26, 0x01	; 1
    4862:	9c 93       	st	X, r25
    4864:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4866:	fe 01       	movw	r30, r28
    4868:	e5 5b       	subi	r30, 0xB5	; 181
    486a:	ff 4f       	sbci	r31, 0xFF	; 255
    486c:	80 81       	ld	r24, Z
    486e:	91 81       	ldd	r25, Z+1	; 0x01
    4870:	00 97       	sbiw	r24, 0x00	; 0
    4872:	d1 f6       	brne	.-76     	; 0x4828 <main+0x7c2>
    4874:	28 c0       	rjmp	.+80     	; 0x48c6 <main+0x860>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4876:	8e 01       	movw	r16, r28
    4878:	05 5b       	subi	r16, 0xB5	; 181
    487a:	1f 4f       	sbci	r17, 0xFF	; 255
    487c:	fe 01       	movw	r30, r28
    487e:	e3 5b       	subi	r30, 0xB3	; 179
    4880:	ff 4f       	sbci	r31, 0xFF	; 255
    4882:	60 81       	ld	r22, Z
    4884:	71 81       	ldd	r23, Z+1	; 0x01
    4886:	82 81       	ldd	r24, Z+2	; 0x02
    4888:	93 81       	ldd	r25, Z+3	; 0x03
    488a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    488e:	dc 01       	movw	r26, r24
    4890:	cb 01       	movw	r24, r22
    4892:	f8 01       	movw	r30, r16
    4894:	91 83       	std	Z+1, r25	; 0x01
    4896:	80 83       	st	Z, r24
    4898:	de 01       	movw	r26, r28
    489a:	a9 5b       	subi	r26, 0xB9	; 185
    489c:	bf 4f       	sbci	r27, 0xFF	; 255
    489e:	fe 01       	movw	r30, r28
    48a0:	e5 5b       	subi	r30, 0xB5	; 181
    48a2:	ff 4f       	sbci	r31, 0xFF	; 255
    48a4:	80 81       	ld	r24, Z
    48a6:	91 81       	ldd	r25, Z+1	; 0x01
    48a8:	11 96       	adiw	r26, 0x01	; 1
    48aa:	9c 93       	st	X, r25
    48ac:	8e 93       	st	-X, r24
    48ae:	fe 01       	movw	r30, r28
    48b0:	e9 5b       	subi	r30, 0xB9	; 185
    48b2:	ff 4f       	sbci	r31, 0xFF	; 255
    48b4:	80 81       	ld	r24, Z
    48b6:	91 81       	ldd	r25, Z+1	; 0x01
    48b8:	01 97       	sbiw	r24, 0x01	; 1
    48ba:	f1 f7       	brne	.-4      	; 0x48b8 <main+0x852>
    48bc:	fe 01       	movw	r30, r28
    48be:	e9 5b       	subi	r30, 0xB9	; 185
    48c0:	ff 4f       	sbci	r31, 0xFF	; 255
    48c2:	91 83       	std	Z+1, r25	; 0x01
    48c4:	80 83       	st	Z, r24
					_delay_ms(2000);
					gettingMotorOption=0;
    48c6:	10 92 ee 02 	sts	0x02EE, r1
					currentState = STATE_MOTOR_OPTIONS;
    48ca:	82 e0       	ldi	r24, 0x02	; 2
    48cc:	80 93 ff 02 	sts	0x02FF, r24
    48d0:	05 cc       	rjmp	.-2038   	; 0x40dc <main+0x76>
				}
			}
			break;

		case STATE_DC_MOTOR_MOVE:
			if (!gettingMovingOption) {
    48d2:	80 91 ef 02 	lds	r24, 0x02EF
    48d6:	88 23       	and	r24, r24
    48d8:	89 f4       	brne	.+34     	; 0x48fc <main+0x896>
				lcd_ES_tclear();
    48da:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <lcd_ES_tclear>
				Lcd_ES_tsendString("1- Rotate CW");
    48de:	87 ee       	ldi	r24, 0xE7	; 231
    48e0:	90 e0       	ldi	r25, 0x00	; 0
    48e2:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <Lcd_ES_tsendString>
				LCD_ES_tGoTo(1, 0);
    48e6:	81 e0       	ldi	r24, 0x01	; 1
    48e8:	60 e0       	ldi	r22, 0x00	; 0
    48ea:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <LCD_ES_tGoTo>
				Lcd_ES_tsendString("2- Rotate CCW");
    48ee:	84 ef       	ldi	r24, 0xF4	; 244
    48f0:	90 e0       	ldi	r25, 0x00	; 0
    48f2:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <Lcd_ES_tsendString>
				gettingMovingOption = 1;
    48f6:	81 e0       	ldi	r24, 0x01	; 1
    48f8:	80 93 ef 02 	sts	0x02EF, r24
			}

			KPD_ES_tGetKeyPressed(&Option2);
    48fc:	ce 01       	movw	r24, r28
    48fe:	8b 57       	subi	r24, 0x7B	; 123
    4900:	9f 4f       	sbci	r25, 0xFF	; 255
    4902:	0e 94 65 1e 	call	0x3cca	; 0x3cca <KPD_ES_tGetKeyPressed>
			if (Option2 != KPD_U8_NOT_PRESSED) {
    4906:	fe 01       	movw	r30, r28
    4908:	eb 57       	subi	r30, 0x7B	; 123
    490a:	ff 4f       	sbci	r31, 0xFF	; 255
    490c:	80 81       	ld	r24, Z
    490e:	8f 3f       	cpi	r24, 0xFF	; 255
    4910:	09 f4       	brne	.+2      	; 0x4914 <main+0x8ae>
    4912:	e4 cb       	rjmp	.-2104   	; 0x40dc <main+0x76>
				if (Option2 == '1') {
    4914:	fe 01       	movw	r30, r28
    4916:	eb 57       	subi	r30, 0x7B	; 123
    4918:	ff 4f       	sbci	r31, 0xFF	; 255
    491a:	80 81       	ld	r24, Z
    491c:	81 33       	cpi	r24, 0x31	; 49
    491e:	09 f0       	breq	.+2      	; 0x4922 <main+0x8bc>
    4920:	92 c0       	rjmp	.+292    	; 0x4a46 <main+0x9e0>
					DC_Motor_Move(DC_MOTOR_0, DC_MOTOR_CW);
    4922:	80 e0       	ldi	r24, 0x00	; 0
    4924:	60 e0       	ldi	r22, 0x00	; 0
    4926:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <DC_Motor_Move>
    492a:	fe 01       	movw	r30, r28
    492c:	ed 5b       	subi	r30, 0xBD	; 189
    492e:	ff 4f       	sbci	r31, 0xFF	; 255
    4930:	80 e0       	ldi	r24, 0x00	; 0
    4932:	90 e8       	ldi	r25, 0x80	; 128
    4934:	ab e3       	ldi	r26, 0x3B	; 59
    4936:	b5 e4       	ldi	r27, 0x45	; 69
    4938:	80 83       	st	Z, r24
    493a:	91 83       	std	Z+1, r25	; 0x01
    493c:	a2 83       	std	Z+2, r26	; 0x02
    493e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4940:	8e 01       	movw	r16, r28
    4942:	01 5c       	subi	r16, 0xC1	; 193
    4944:	1f 4f       	sbci	r17, 0xFF	; 255
    4946:	fe 01       	movw	r30, r28
    4948:	ed 5b       	subi	r30, 0xBD	; 189
    494a:	ff 4f       	sbci	r31, 0xFF	; 255
    494c:	60 81       	ld	r22, Z
    494e:	71 81       	ldd	r23, Z+1	; 0x01
    4950:	82 81       	ldd	r24, Z+2	; 0x02
    4952:	93 81       	ldd	r25, Z+3	; 0x03
    4954:	20 e0       	ldi	r18, 0x00	; 0
    4956:	30 e0       	ldi	r19, 0x00	; 0
    4958:	4a e7       	ldi	r20, 0x7A	; 122
    495a:	55 e4       	ldi	r21, 0x45	; 69
    495c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4960:	dc 01       	movw	r26, r24
    4962:	cb 01       	movw	r24, r22
    4964:	f8 01       	movw	r30, r16
    4966:	80 83       	st	Z, r24
    4968:	91 83       	std	Z+1, r25	; 0x01
    496a:	a2 83       	std	Z+2, r26	; 0x02
    496c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    496e:	fe 01       	movw	r30, r28
    4970:	ff 96       	adiw	r30, 0x3f	; 63
    4972:	60 81       	ld	r22, Z
    4974:	71 81       	ldd	r23, Z+1	; 0x01
    4976:	82 81       	ldd	r24, Z+2	; 0x02
    4978:	93 81       	ldd	r25, Z+3	; 0x03
    497a:	20 e0       	ldi	r18, 0x00	; 0
    497c:	30 e0       	ldi	r19, 0x00	; 0
    497e:	40 e8       	ldi	r20, 0x80	; 128
    4980:	5f e3       	ldi	r21, 0x3F	; 63
    4982:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4986:	88 23       	and	r24, r24
    4988:	2c f4       	brge	.+10     	; 0x4994 <main+0x92e>
		__ticks = 1;
    498a:	81 e0       	ldi	r24, 0x01	; 1
    498c:	90 e0       	ldi	r25, 0x00	; 0
    498e:	9e af       	std	Y+62, r25	; 0x3e
    4990:	8d af       	std	Y+61, r24	; 0x3d
    4992:	46 c0       	rjmp	.+140    	; 0x4a20 <main+0x9ba>
	else if (__tmp > 65535)
    4994:	fe 01       	movw	r30, r28
    4996:	ff 96       	adiw	r30, 0x3f	; 63
    4998:	60 81       	ld	r22, Z
    499a:	71 81       	ldd	r23, Z+1	; 0x01
    499c:	82 81       	ldd	r24, Z+2	; 0x02
    499e:	93 81       	ldd	r25, Z+3	; 0x03
    49a0:	20 e0       	ldi	r18, 0x00	; 0
    49a2:	3f ef       	ldi	r19, 0xFF	; 255
    49a4:	4f e7       	ldi	r20, 0x7F	; 127
    49a6:	57 e4       	ldi	r21, 0x47	; 71
    49a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    49ac:	18 16       	cp	r1, r24
    49ae:	64 f5       	brge	.+88     	; 0x4a08 <main+0x9a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49b0:	fe 01       	movw	r30, r28
    49b2:	ed 5b       	subi	r30, 0xBD	; 189
    49b4:	ff 4f       	sbci	r31, 0xFF	; 255
    49b6:	60 81       	ld	r22, Z
    49b8:	71 81       	ldd	r23, Z+1	; 0x01
    49ba:	82 81       	ldd	r24, Z+2	; 0x02
    49bc:	93 81       	ldd	r25, Z+3	; 0x03
    49be:	20 e0       	ldi	r18, 0x00	; 0
    49c0:	30 e0       	ldi	r19, 0x00	; 0
    49c2:	40 e2       	ldi	r20, 0x20	; 32
    49c4:	51 e4       	ldi	r21, 0x41	; 65
    49c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49ca:	dc 01       	movw	r26, r24
    49cc:	cb 01       	movw	r24, r22
    49ce:	bc 01       	movw	r22, r24
    49d0:	cd 01       	movw	r24, r26
    49d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49d6:	dc 01       	movw	r26, r24
    49d8:	cb 01       	movw	r24, r22
    49da:	9e af       	std	Y+62, r25	; 0x3e
    49dc:	8d af       	std	Y+61, r24	; 0x3d
    49de:	0f c0       	rjmp	.+30     	; 0x49fe <main+0x998>
    49e0:	80 e9       	ldi	r24, 0x90	; 144
    49e2:	91 e0       	ldi	r25, 0x01	; 1
    49e4:	9c af       	std	Y+60, r25	; 0x3c
    49e6:	8b af       	std	Y+59, r24	; 0x3b
    49e8:	8b ad       	ldd	r24, Y+59	; 0x3b
    49ea:	9c ad       	ldd	r25, Y+60	; 0x3c
    49ec:	01 97       	sbiw	r24, 0x01	; 1
    49ee:	f1 f7       	brne	.-4      	; 0x49ec <main+0x986>
    49f0:	9c af       	std	Y+60, r25	; 0x3c
    49f2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    49f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    49f8:	01 97       	sbiw	r24, 0x01	; 1
    49fa:	9e af       	std	Y+62, r25	; 0x3e
    49fc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    4a00:	9e ad       	ldd	r25, Y+62	; 0x3e
    4a02:	00 97       	sbiw	r24, 0x00	; 0
    4a04:	69 f7       	brne	.-38     	; 0x49e0 <main+0x97a>
    4a06:	16 c0       	rjmp	.+44     	; 0x4a34 <main+0x9ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a08:	fe 01       	movw	r30, r28
    4a0a:	ff 96       	adiw	r30, 0x3f	; 63
    4a0c:	60 81       	ld	r22, Z
    4a0e:	71 81       	ldd	r23, Z+1	; 0x01
    4a10:	82 81       	ldd	r24, Z+2	; 0x02
    4a12:	93 81       	ldd	r25, Z+3	; 0x03
    4a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a18:	dc 01       	movw	r26, r24
    4a1a:	cb 01       	movw	r24, r22
    4a1c:	9e af       	std	Y+62, r25	; 0x3e
    4a1e:	8d af       	std	Y+61, r24	; 0x3d
    4a20:	8d ad       	ldd	r24, Y+61	; 0x3d
    4a22:	9e ad       	ldd	r25, Y+62	; 0x3e
    4a24:	9a af       	std	Y+58, r25	; 0x3a
    4a26:	89 af       	std	Y+57, r24	; 0x39
    4a28:	89 ad       	ldd	r24, Y+57	; 0x39
    4a2a:	9a ad       	ldd	r25, Y+58	; 0x3a
    4a2c:	01 97       	sbiw	r24, 0x01	; 1
    4a2e:	f1 f7       	brne	.-4      	; 0x4a2c <main+0x9c6>
    4a30:	9a af       	std	Y+58, r25	; 0x3a
    4a32:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(3000);
					DC_Motor_Stop(DC_MOTOR_0);
    4a34:	80 e0       	ldi	r24, 0x00	; 0
    4a36:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <DC_Motor_Stop>
					gettingMovingOption = 0;
    4a3a:	10 92 ef 02 	sts	0x02EF, r1
					currentState = STATE_MOTOR_OPTIONS;
    4a3e:	82 e0       	ldi	r24, 0x02	; 2
    4a40:	80 93 ff 02 	sts	0x02FF, r24
    4a44:	4b cb       	rjmp	.-2410   	; 0x40dc <main+0x76>
				} else if (Option2 == '2') {
    4a46:	fe 01       	movw	r30, r28
    4a48:	eb 57       	subi	r30, 0x7B	; 123
    4a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a4c:	80 81       	ld	r24, Z
    4a4e:	82 33       	cpi	r24, 0x32	; 50
    4a50:	09 f0       	breq	.+2      	; 0x4a54 <main+0x9ee>
    4a52:	7f c0       	rjmp	.+254    	; 0x4b52 <main+0xaec>
					DC_Motor_Move(DC_MOTOR_0, DC_MOTOR_CCW);
    4a54:	80 e0       	ldi	r24, 0x00	; 0
    4a56:	61 e0       	ldi	r22, 0x01	; 1
    4a58:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <DC_Motor_Move>
    4a5c:	80 e0       	ldi	r24, 0x00	; 0
    4a5e:	90 e8       	ldi	r25, 0x80	; 128
    4a60:	ab e3       	ldi	r26, 0x3B	; 59
    4a62:	b5 e4       	ldi	r27, 0x45	; 69
    4a64:	8d ab       	std	Y+53, r24	; 0x35
    4a66:	9e ab       	std	Y+54, r25	; 0x36
    4a68:	af ab       	std	Y+55, r26	; 0x37
    4a6a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a6c:	6d a9       	ldd	r22, Y+53	; 0x35
    4a6e:	7e a9       	ldd	r23, Y+54	; 0x36
    4a70:	8f a9       	ldd	r24, Y+55	; 0x37
    4a72:	98 ad       	ldd	r25, Y+56	; 0x38
    4a74:	20 e0       	ldi	r18, 0x00	; 0
    4a76:	30 e0       	ldi	r19, 0x00	; 0
    4a78:	4a e7       	ldi	r20, 0x7A	; 122
    4a7a:	55 e4       	ldi	r21, 0x45	; 69
    4a7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a80:	dc 01       	movw	r26, r24
    4a82:	cb 01       	movw	r24, r22
    4a84:	89 ab       	std	Y+49, r24	; 0x31
    4a86:	9a ab       	std	Y+50, r25	; 0x32
    4a88:	ab ab       	std	Y+51, r26	; 0x33
    4a8a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4a8c:	69 a9       	ldd	r22, Y+49	; 0x31
    4a8e:	7a a9       	ldd	r23, Y+50	; 0x32
    4a90:	8b a9       	ldd	r24, Y+51	; 0x33
    4a92:	9c a9       	ldd	r25, Y+52	; 0x34
    4a94:	20 e0       	ldi	r18, 0x00	; 0
    4a96:	30 e0       	ldi	r19, 0x00	; 0
    4a98:	40 e8       	ldi	r20, 0x80	; 128
    4a9a:	5f e3       	ldi	r21, 0x3F	; 63
    4a9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4aa0:	88 23       	and	r24, r24
    4aa2:	2c f4       	brge	.+10     	; 0x4aae <main+0xa48>
		__ticks = 1;
    4aa4:	81 e0       	ldi	r24, 0x01	; 1
    4aa6:	90 e0       	ldi	r25, 0x00	; 0
    4aa8:	98 ab       	std	Y+48, r25	; 0x30
    4aaa:	8f a7       	std	Y+47, r24	; 0x2f
    4aac:	3f c0       	rjmp	.+126    	; 0x4b2c <main+0xac6>
	else if (__tmp > 65535)
    4aae:	69 a9       	ldd	r22, Y+49	; 0x31
    4ab0:	7a a9       	ldd	r23, Y+50	; 0x32
    4ab2:	8b a9       	ldd	r24, Y+51	; 0x33
    4ab4:	9c a9       	ldd	r25, Y+52	; 0x34
    4ab6:	20 e0       	ldi	r18, 0x00	; 0
    4ab8:	3f ef       	ldi	r19, 0xFF	; 255
    4aba:	4f e7       	ldi	r20, 0x7F	; 127
    4abc:	57 e4       	ldi	r21, 0x47	; 71
    4abe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ac2:	18 16       	cp	r1, r24
    4ac4:	4c f5       	brge	.+82     	; 0x4b18 <main+0xab2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ac6:	6d a9       	ldd	r22, Y+53	; 0x35
    4ac8:	7e a9       	ldd	r23, Y+54	; 0x36
    4aca:	8f a9       	ldd	r24, Y+55	; 0x37
    4acc:	98 ad       	ldd	r25, Y+56	; 0x38
    4ace:	20 e0       	ldi	r18, 0x00	; 0
    4ad0:	30 e0       	ldi	r19, 0x00	; 0
    4ad2:	40 e2       	ldi	r20, 0x20	; 32
    4ad4:	51 e4       	ldi	r21, 0x41	; 65
    4ad6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ada:	dc 01       	movw	r26, r24
    4adc:	cb 01       	movw	r24, r22
    4ade:	bc 01       	movw	r22, r24
    4ae0:	cd 01       	movw	r24, r26
    4ae2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ae6:	dc 01       	movw	r26, r24
    4ae8:	cb 01       	movw	r24, r22
    4aea:	98 ab       	std	Y+48, r25	; 0x30
    4aec:	8f a7       	std	Y+47, r24	; 0x2f
    4aee:	0f c0       	rjmp	.+30     	; 0x4b0e <main+0xaa8>
    4af0:	80 e9       	ldi	r24, 0x90	; 144
    4af2:	91 e0       	ldi	r25, 0x01	; 1
    4af4:	9e a7       	std	Y+46, r25	; 0x2e
    4af6:	8d a7       	std	Y+45, r24	; 0x2d
    4af8:	8d a5       	ldd	r24, Y+45	; 0x2d
    4afa:	9e a5       	ldd	r25, Y+46	; 0x2e
    4afc:	01 97       	sbiw	r24, 0x01	; 1
    4afe:	f1 f7       	brne	.-4      	; 0x4afc <main+0xa96>
    4b00:	9e a7       	std	Y+46, r25	; 0x2e
    4b02:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b04:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b06:	98 a9       	ldd	r25, Y+48	; 0x30
    4b08:	01 97       	sbiw	r24, 0x01	; 1
    4b0a:	98 ab       	std	Y+48, r25	; 0x30
    4b0c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b10:	98 a9       	ldd	r25, Y+48	; 0x30
    4b12:	00 97       	sbiw	r24, 0x00	; 0
    4b14:	69 f7       	brne	.-38     	; 0x4af0 <main+0xa8a>
    4b16:	14 c0       	rjmp	.+40     	; 0x4b40 <main+0xada>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b18:	69 a9       	ldd	r22, Y+49	; 0x31
    4b1a:	7a a9       	ldd	r23, Y+50	; 0x32
    4b1c:	8b a9       	ldd	r24, Y+51	; 0x33
    4b1e:	9c a9       	ldd	r25, Y+52	; 0x34
    4b20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b24:	dc 01       	movw	r26, r24
    4b26:	cb 01       	movw	r24, r22
    4b28:	98 ab       	std	Y+48, r25	; 0x30
    4b2a:	8f a7       	std	Y+47, r24	; 0x2f
    4b2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b2e:	98 a9       	ldd	r25, Y+48	; 0x30
    4b30:	9c a7       	std	Y+44, r25	; 0x2c
    4b32:	8b a7       	std	Y+43, r24	; 0x2b
    4b34:	8b a5       	ldd	r24, Y+43	; 0x2b
    4b36:	9c a5       	ldd	r25, Y+44	; 0x2c
    4b38:	01 97       	sbiw	r24, 0x01	; 1
    4b3a:	f1 f7       	brne	.-4      	; 0x4b38 <main+0xad2>
    4b3c:	9c a7       	std	Y+44, r25	; 0x2c
    4b3e:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(3000);
					DC_Motor_Stop(DC_MOTOR_0);
    4b40:	80 e0       	ldi	r24, 0x00	; 0
    4b42:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <DC_Motor_Stop>
					gettingMovingOption = 0;
    4b46:	10 92 ef 02 	sts	0x02EF, r1
					currentState = STATE_MOTOR_OPTIONS;
    4b4a:	82 e0       	ldi	r24, 0x02	; 2
    4b4c:	80 93 ff 02 	sts	0x02FF, r24
    4b50:	c5 ca       	rjmp	.-2678   	; 0x40dc <main+0x76>
				} else {
					lcd_ES_tclear();
    4b52:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <lcd_ES_tclear>
					Lcd_ES_tsendString("Invalid Option");
    4b56:	88 ed       	ldi	r24, 0xD8	; 216
    4b58:	90 e0       	ldi	r25, 0x00	; 0
    4b5a:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <Lcd_ES_tsendString>
    4b5e:	80 e0       	ldi	r24, 0x00	; 0
    4b60:	90 e0       	ldi	r25, 0x00	; 0
    4b62:	aa ef       	ldi	r26, 0xFA	; 250
    4b64:	b4 e4       	ldi	r27, 0x44	; 68
    4b66:	8f a3       	std	Y+39, r24	; 0x27
    4b68:	98 a7       	std	Y+40, r25	; 0x28
    4b6a:	a9 a7       	std	Y+41, r26	; 0x29
    4b6c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b6e:	6f a1       	ldd	r22, Y+39	; 0x27
    4b70:	78 a5       	ldd	r23, Y+40	; 0x28
    4b72:	89 a5       	ldd	r24, Y+41	; 0x29
    4b74:	9a a5       	ldd	r25, Y+42	; 0x2a
    4b76:	20 e0       	ldi	r18, 0x00	; 0
    4b78:	30 e0       	ldi	r19, 0x00	; 0
    4b7a:	4a e7       	ldi	r20, 0x7A	; 122
    4b7c:	55 e4       	ldi	r21, 0x45	; 69
    4b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b82:	dc 01       	movw	r26, r24
    4b84:	cb 01       	movw	r24, r22
    4b86:	8b a3       	std	Y+35, r24	; 0x23
    4b88:	9c a3       	std	Y+36, r25	; 0x24
    4b8a:	ad a3       	std	Y+37, r26	; 0x25
    4b8c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4b8e:	6b a1       	ldd	r22, Y+35	; 0x23
    4b90:	7c a1       	ldd	r23, Y+36	; 0x24
    4b92:	8d a1       	ldd	r24, Y+37	; 0x25
    4b94:	9e a1       	ldd	r25, Y+38	; 0x26
    4b96:	20 e0       	ldi	r18, 0x00	; 0
    4b98:	30 e0       	ldi	r19, 0x00	; 0
    4b9a:	40 e8       	ldi	r20, 0x80	; 128
    4b9c:	5f e3       	ldi	r21, 0x3F	; 63
    4b9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ba2:	88 23       	and	r24, r24
    4ba4:	2c f4       	brge	.+10     	; 0x4bb0 <main+0xb4a>
		__ticks = 1;
    4ba6:	81 e0       	ldi	r24, 0x01	; 1
    4ba8:	90 e0       	ldi	r25, 0x00	; 0
    4baa:	9a a3       	std	Y+34, r25	; 0x22
    4bac:	89 a3       	std	Y+33, r24	; 0x21
    4bae:	3f c0       	rjmp	.+126    	; 0x4c2e <main+0xbc8>
	else if (__tmp > 65535)
    4bb0:	6b a1       	ldd	r22, Y+35	; 0x23
    4bb2:	7c a1       	ldd	r23, Y+36	; 0x24
    4bb4:	8d a1       	ldd	r24, Y+37	; 0x25
    4bb6:	9e a1       	ldd	r25, Y+38	; 0x26
    4bb8:	20 e0       	ldi	r18, 0x00	; 0
    4bba:	3f ef       	ldi	r19, 0xFF	; 255
    4bbc:	4f e7       	ldi	r20, 0x7F	; 127
    4bbe:	57 e4       	ldi	r21, 0x47	; 71
    4bc0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4bc4:	18 16       	cp	r1, r24
    4bc6:	4c f5       	brge	.+82     	; 0x4c1a <main+0xbb4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bc8:	6f a1       	ldd	r22, Y+39	; 0x27
    4bca:	78 a5       	ldd	r23, Y+40	; 0x28
    4bcc:	89 a5       	ldd	r24, Y+41	; 0x29
    4bce:	9a a5       	ldd	r25, Y+42	; 0x2a
    4bd0:	20 e0       	ldi	r18, 0x00	; 0
    4bd2:	30 e0       	ldi	r19, 0x00	; 0
    4bd4:	40 e2       	ldi	r20, 0x20	; 32
    4bd6:	51 e4       	ldi	r21, 0x41	; 65
    4bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bdc:	dc 01       	movw	r26, r24
    4bde:	cb 01       	movw	r24, r22
    4be0:	bc 01       	movw	r22, r24
    4be2:	cd 01       	movw	r24, r26
    4be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4be8:	dc 01       	movw	r26, r24
    4bea:	cb 01       	movw	r24, r22
    4bec:	9a a3       	std	Y+34, r25	; 0x22
    4bee:	89 a3       	std	Y+33, r24	; 0x21
    4bf0:	0f c0       	rjmp	.+30     	; 0x4c10 <main+0xbaa>
    4bf2:	80 e9       	ldi	r24, 0x90	; 144
    4bf4:	91 e0       	ldi	r25, 0x01	; 1
    4bf6:	98 a3       	std	Y+32, r25	; 0x20
    4bf8:	8f 8f       	std	Y+31, r24	; 0x1f
    4bfa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4bfc:	98 a1       	ldd	r25, Y+32	; 0x20
    4bfe:	01 97       	sbiw	r24, 0x01	; 1
    4c00:	f1 f7       	brne	.-4      	; 0x4bfe <main+0xb98>
    4c02:	98 a3       	std	Y+32, r25	; 0x20
    4c04:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c06:	89 a1       	ldd	r24, Y+33	; 0x21
    4c08:	9a a1       	ldd	r25, Y+34	; 0x22
    4c0a:	01 97       	sbiw	r24, 0x01	; 1
    4c0c:	9a a3       	std	Y+34, r25	; 0x22
    4c0e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c10:	89 a1       	ldd	r24, Y+33	; 0x21
    4c12:	9a a1       	ldd	r25, Y+34	; 0x22
    4c14:	00 97       	sbiw	r24, 0x00	; 0
    4c16:	69 f7       	brne	.-38     	; 0x4bf2 <main+0xb8c>
    4c18:	14 c0       	rjmp	.+40     	; 0x4c42 <main+0xbdc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c1a:	6b a1       	ldd	r22, Y+35	; 0x23
    4c1c:	7c a1       	ldd	r23, Y+36	; 0x24
    4c1e:	8d a1       	ldd	r24, Y+37	; 0x25
    4c20:	9e a1       	ldd	r25, Y+38	; 0x26
    4c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c26:	dc 01       	movw	r26, r24
    4c28:	cb 01       	movw	r24, r22
    4c2a:	9a a3       	std	Y+34, r25	; 0x22
    4c2c:	89 a3       	std	Y+33, r24	; 0x21
    4c2e:	89 a1       	ldd	r24, Y+33	; 0x21
    4c30:	9a a1       	ldd	r25, Y+34	; 0x22
    4c32:	9e 8f       	std	Y+30, r25	; 0x1e
    4c34:	8d 8f       	std	Y+29, r24	; 0x1d
    4c36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4c38:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4c3a:	01 97       	sbiw	r24, 0x01	; 1
    4c3c:	f1 f7       	brne	.-4      	; 0x4c3a <main+0xbd4>
    4c3e:	9e 8f       	std	Y+30, r25	; 0x1e
    4c40:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(2000);
					gettingMovingOption=0;
    4c42:	10 92 ef 02 	sts	0x02EF, r1
					currentState = STATE_DC_MOTOR_MOVE;
    4c46:	83 e0       	ldi	r24, 0x03	; 3
    4c48:	80 93 ff 02 	sts	0x02FF, r24
    4c4c:	47 ca       	rjmp	.-2930   	; 0x40dc <main+0x76>
			break;



		case STATE_STEPPER_MOVE:
			if (!gettingStepperOption) {
    4c4e:	80 91 f0 02 	lds	r24, 0x02F0
    4c52:	88 23       	and	r24, r24
    4c54:	49 f4       	brne	.+18     	; 0x4c68 <main+0xc02>
				lcd_ES_tclear();
    4c56:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <lcd_ES_tclear>
				Lcd_ES_tsendString("Angle(3dig) :");
    4c5a:	82 e0       	ldi	r24, 0x02	; 2
    4c5c:	91 e0       	ldi	r25, 0x01	; 1
    4c5e:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <Lcd_ES_tsendString>
				gettingStepperOption = 1;
    4c62:	81 e0       	ldi	r24, 0x01	; 1
    4c64:	80 93 f0 02 	sts	0x02F0, r24
			}
			KPD_ES_tGetKeyPressed(&Option3);
    4c68:	ce 01       	movw	r24, r28
    4c6a:	8a 57       	subi	r24, 0x7A	; 122
    4c6c:	9f 4f       	sbci	r25, 0xFF	; 255
    4c6e:	0e 94 65 1e 	call	0x3cca	; 0x3cca <KPD_ES_tGetKeyPressed>
			if (Option3 != KPD_U8_NOT_PRESSED) {
    4c72:	fe 01       	movw	r30, r28
    4c74:	ea 57       	subi	r30, 0x7A	; 122
    4c76:	ff 4f       	sbci	r31, 0xFF	; 255
    4c78:	80 81       	ld	r24, Z
    4c7a:	8f 3f       	cpi	r24, 0xFF	; 255
    4c7c:	09 f4       	brne	.+2      	; 0x4c80 <main+0xc1a>
    4c7e:	2e ca       	rjmp	.-2980   	; 0x40dc <main+0x76>
				LCD_ES_tGoTo(1, indexStepper);
    4c80:	90 91 e7 02 	lds	r25, 0x02E7
    4c84:	81 e0       	ldi	r24, 0x01	; 1
    4c86:	69 2f       	mov	r22, r25
    4c88:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <LCD_ES_tGoTo>
				Lcd_ES_tsendChar(Option3);
    4c8c:	fe 01       	movw	r30, r28
    4c8e:	ea 57       	subi	r30, 0x7A	; 122
    4c90:	ff 4f       	sbci	r31, 0xFF	; 255
    4c92:	80 81       	ld	r24, Z
    4c94:	0e 94 20 1a 	call	0x3440	; 0x3440 <Lcd_ES_tsendChar>
				inputSteper[indexStepper] = Option3 - '0'; // Convert character to integer
    4c98:	80 91 e7 02 	lds	r24, 0x02E7
    4c9c:	28 2f       	mov	r18, r24
    4c9e:	30 e0       	ldi	r19, 0x00	; 0
    4ca0:	fe 01       	movw	r30, r28
    4ca2:	ea 57       	subi	r30, 0x7A	; 122
    4ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ca6:	80 81       	ld	r24, Z
    4ca8:	80 53       	subi	r24, 0x30	; 48
    4caa:	f9 01       	movw	r30, r18
    4cac:	ee 51       	subi	r30, 0x1E	; 30
    4cae:	fd 4f       	sbci	r31, 0xFD	; 253
    4cb0:	80 83       	st	Z, r24
				indexStepper++;
    4cb2:	80 91 e7 02 	lds	r24, 0x02E7
    4cb6:	8f 5f       	subi	r24, 0xFF	; 255
    4cb8:	80 93 e7 02 	sts	0x02E7, r24
				if (indexStepper >= 3) { // Use indexStepper instead of indexz
    4cbc:	80 91 e7 02 	lds	r24, 0x02E7
    4cc0:	83 30       	cpi	r24, 0x03	; 3
    4cc2:	08 f4       	brcc	.+2      	; 0x4cc6 <main+0xc60>
    4cc4:	0b ca       	rjmp	.-3050   	; 0x40dc <main+0x76>
					stepperAngle = (inputSteper[0] * 100) + (inputSteper[1] * 10) + inputSteper[2];
    4cc6:	80 91 e2 02 	lds	r24, 0x02E2
    4cca:	28 2f       	mov	r18, r24
    4ccc:	30 e0       	ldi	r19, 0x00	; 0
    4cce:	84 e6       	ldi	r24, 0x64	; 100
    4cd0:	90 e0       	ldi	r25, 0x00	; 0
    4cd2:	ac 01       	movw	r20, r24
    4cd4:	24 9f       	mul	r18, r20
    4cd6:	c0 01       	movw	r24, r0
    4cd8:	25 9f       	mul	r18, r21
    4cda:	90 0d       	add	r25, r0
    4cdc:	34 9f       	mul	r19, r20
    4cde:	90 0d       	add	r25, r0
    4ce0:	11 24       	eor	r1, r1
    4ce2:	48 2f       	mov	r20, r24
    4ce4:	80 91 e3 02 	lds	r24, 0x02E3
    4ce8:	88 2f       	mov	r24, r24
    4cea:	90 e0       	ldi	r25, 0x00	; 0
    4cec:	9c 01       	movw	r18, r24
    4cee:	22 0f       	add	r18, r18
    4cf0:	33 1f       	adc	r19, r19
    4cf2:	c9 01       	movw	r24, r18
    4cf4:	88 0f       	add	r24, r24
    4cf6:	99 1f       	adc	r25, r25
    4cf8:	88 0f       	add	r24, r24
    4cfa:	99 1f       	adc	r25, r25
    4cfc:	82 0f       	add	r24, r18
    4cfe:	93 1f       	adc	r25, r19
    4d00:	94 2f       	mov	r25, r20
    4d02:	98 0f       	add	r25, r24
    4d04:	80 91 e4 02 	lds	r24, 0x02E4
    4d08:	fe 01       	movw	r30, r28
    4d0a:	ef 57       	subi	r30, 0x7F	; 127
    4d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d0e:	89 0f       	add	r24, r25
    4d10:	80 83       	st	Z, r24
					Stepper_Rotate(stepperAngle);
    4d12:	fe 01       	movw	r30, r28
    4d14:	ef 57       	subi	r30, 0x7F	; 127
    4d16:	ff 4f       	sbci	r31, 0xFF	; 255
    4d18:	80 81       	ld	r24, Z
    4d1a:	0e 94 3d 14 	call	0x287a	; 0x287a <Stepper_Rotate>
					memset(inputSteper, '\0', sizeof(inputSteper));
    4d1e:	82 ee       	ldi	r24, 0xE2	; 226
    4d20:	92 e0       	ldi	r25, 0x02	; 2
    4d22:	60 e0       	ldi	r22, 0x00	; 0
    4d24:	70 e0       	ldi	r23, 0x00	; 0
    4d26:	45 e0       	ldi	r20, 0x05	; 5
    4d28:	50 e0       	ldi	r21, 0x00	; 0
    4d2a:	0e 94 c0 28 	call	0x5180	; 0x5180 <memset>
					indexStepper = 0;
    4d2e:	10 92 e7 02 	sts	0x02E7, r1
					gettingStepperOption = 0;
    4d32:	10 92 f0 02 	sts	0x02F0, r1
					gettingMotorOption=0;
    4d36:	10 92 ee 02 	sts	0x02EE, r1
					currentState = STATE_MOTOR_OPTIONS;
    4d3a:	82 e0       	ldi	r24, 0x02	; 2
    4d3c:	80 93 ff 02 	sts	0x02FF, r24
    4d40:	cd c9       	rjmp	.-3174   	; 0x40dc <main+0x76>
			}
			break;


		case STATE_SERVO_MOVE:
			if (!gettingServoOption) {
    4d42:	80 91 f1 02 	lds	r24, 0x02F1
    4d46:	88 23       	and	r24, r24
    4d48:	49 f4       	brne	.+18     	; 0x4d5c <main+0xcf6>
				lcd_ES_tclear();
    4d4a:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <lcd_ES_tclear>
				Lcd_ES_tsendString("Signed angle :");
    4d4e:	80 e1       	ldi	r24, 0x10	; 16
    4d50:	91 e0       	ldi	r25, 0x01	; 1
    4d52:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <Lcd_ES_tsendString>
				gettingServoOption = 1;
    4d56:	81 e0       	ldi	r24, 0x01	; 1
    4d58:	80 93 f1 02 	sts	0x02F1, r24
			}
			KPD_ES_tGetKeyPressed(&Option4);
    4d5c:	ce 01       	movw	r24, r28
    4d5e:	89 57       	subi	r24, 0x79	; 121
    4d60:	9f 4f       	sbci	r25, 0xFF	; 255
    4d62:	0e 94 65 1e 	call	0x3cca	; 0x3cca <KPD_ES_tGetKeyPressed>
			if (Option4 != KPD_U8_NOT_PRESSED) {
    4d66:	fe 01       	movw	r30, r28
    4d68:	e9 57       	subi	r30, 0x79	; 121
    4d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d6c:	80 81       	ld	r24, Z
    4d6e:	8f 3f       	cpi	r24, 0xFF	; 255
    4d70:	09 f4       	brne	.+2      	; 0x4d74 <main+0xd0e>
    4d72:	b4 c9       	rjmp	.-3224   	; 0x40dc <main+0x76>
				LCD_ES_tGoTo(1, indexServo);
    4d74:	90 91 ed 02 	lds	r25, 0x02ED
    4d78:	81 e0       	ldi	r24, 0x01	; 1
    4d7a:	69 2f       	mov	r22, r25
    4d7c:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <LCD_ES_tGoTo>
				Lcd_ES_tsendChar(Option4);
    4d80:	fe 01       	movw	r30, r28
    4d82:	e9 57       	subi	r30, 0x79	; 121
    4d84:	ff 4f       	sbci	r31, 0xFF	; 255
    4d86:	80 81       	ld	r24, Z
    4d88:	0e 94 20 1a 	call	0x3440	; 0x3440 <Lcd_ES_tsendChar>
				if(indexServo == 0)
    4d8c:	80 91 ed 02 	lds	r24, 0x02ED
    4d90:	88 23       	and	r24, r24
    4d92:	31 f4       	brne	.+12     	; 0x4da0 <main+0xd3a>
					Sign = Option4;
    4d94:	fe 01       	movw	r30, r28
    4d96:	e9 57       	subi	r30, 0x79	; 121
    4d98:	ff 4f       	sbci	r31, 0xFF	; 255
    4d9a:	80 81       	ld	r24, Z
    4d9c:	80 93 db 02 	sts	0x02DB, r24
				inputServo[indexServo] = Option4 - '0'; // Convert character to integer
    4da0:	80 91 ed 02 	lds	r24, 0x02ED
    4da4:	28 2f       	mov	r18, r24
    4da6:	30 e0       	ldi	r19, 0x00	; 0
    4da8:	fe 01       	movw	r30, r28
    4daa:	e9 57       	subi	r30, 0x79	; 121
    4dac:	ff 4f       	sbci	r31, 0xFF	; 255
    4dae:	80 81       	ld	r24, Z
    4db0:	80 53       	subi	r24, 0x30	; 48
    4db2:	f9 01       	movw	r30, r18
    4db4:	e8 51       	subi	r30, 0x18	; 24
    4db6:	fd 4f       	sbci	r31, 0xFD	; 253
    4db8:	80 83       	st	Z, r24
				indexServo++;
    4dba:	80 91 ed 02 	lds	r24, 0x02ED
    4dbe:	8f 5f       	subi	r24, 0xFF	; 255
    4dc0:	80 93 ed 02 	sts	0x02ED, r24
				if (indexServo >= 3) { // Use indexStepper instead of indexz
    4dc4:	80 91 ed 02 	lds	r24, 0x02ED
    4dc8:	83 30       	cpi	r24, 0x03	; 3
    4dca:	08 f4       	brcc	.+2      	; 0x4dce <main+0xd68>
    4dcc:	87 c9       	rjmp	.-3314   	; 0x40dc <main+0x76>
					if(Sign == '+'){
    4dce:	80 91 db 02 	lds	r24, 0x02DB
    4dd2:	8b 32       	cpi	r24, 0x2B	; 43
    4dd4:	d1 f4       	brne	.+52     	; 0x4e0a <main+0xda4>
						ServoAngle = +((inputServo[1] * 10) + inputServo[2]);
    4dd6:	80 91 e9 02 	lds	r24, 0x02E9
    4dda:	88 2f       	mov	r24, r24
    4ddc:	90 e0       	ldi	r25, 0x00	; 0
    4dde:	9c 01       	movw	r18, r24
    4de0:	22 0f       	add	r18, r18
    4de2:	33 1f       	adc	r19, r19
    4de4:	c9 01       	movw	r24, r18
    4de6:	88 0f       	add	r24, r24
    4de8:	99 1f       	adc	r25, r25
    4dea:	88 0f       	add	r24, r24
    4dec:	99 1f       	adc	r25, r25
    4dee:	28 0f       	add	r18, r24
    4df0:	39 1f       	adc	r19, r25
    4df2:	80 91 ea 02 	lds	r24, 0x02EA
    4df6:	88 2f       	mov	r24, r24
    4df8:	90 e0       	ldi	r25, 0x00	; 0
    4dfa:	fe 01       	movw	r30, r28
    4dfc:	e1 58       	subi	r30, 0x81	; 129
    4dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    4e00:	82 0f       	add	r24, r18
    4e02:	93 1f       	adc	r25, r19
    4e04:	91 83       	std	Z+1, r25	; 0x01
    4e06:	80 83       	st	Z, r24
    4e08:	1c c0       	rjmp	.+56     	; 0x4e42 <main+0xddc>
					}else{
						ServoAngle = -((inputServo[1] * 10) + inputServo[2]);
    4e0a:	80 91 e9 02 	lds	r24, 0x02E9
    4e0e:	88 2f       	mov	r24, r24
    4e10:	90 e0       	ldi	r25, 0x00	; 0
    4e12:	9c 01       	movw	r18, r24
    4e14:	22 0f       	add	r18, r18
    4e16:	33 1f       	adc	r19, r19
    4e18:	c9 01       	movw	r24, r18
    4e1a:	88 0f       	add	r24, r24
    4e1c:	99 1f       	adc	r25, r25
    4e1e:	88 0f       	add	r24, r24
    4e20:	99 1f       	adc	r25, r25
    4e22:	82 0f       	add	r24, r18
    4e24:	93 1f       	adc	r25, r19
    4e26:	90 95       	com	r25
    4e28:	81 95       	neg	r24
    4e2a:	9f 4f       	sbci	r25, 0xFF	; 255
    4e2c:	20 91 ea 02 	lds	r18, 0x02EA
    4e30:	22 2f       	mov	r18, r18
    4e32:	30 e0       	ldi	r19, 0x00	; 0
    4e34:	fe 01       	movw	r30, r28
    4e36:	e1 58       	subi	r30, 0x81	; 129
    4e38:	ff 4f       	sbci	r31, 0xFF	; 255
    4e3a:	82 1b       	sub	r24, r18
    4e3c:	93 0b       	sbc	r25, r19
    4e3e:	91 83       	std	Z+1, r25	; 0x01
    4e40:	80 83       	st	Z, r24
					}
					Servo_Turn(ServoAngle);
    4e42:	fe 01       	movw	r30, r28
    4e44:	e1 58       	subi	r30, 0x81	; 129
    4e46:	ff 4f       	sbci	r31, 0xFF	; 255
    4e48:	80 81       	ld	r24, Z
    4e4a:	91 81       	ldd	r25, Z+1	; 0x01
    4e4c:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <Servo_Turn>

					memset(inputServo, '\0', sizeof(inputServo));
    4e50:	88 ee       	ldi	r24, 0xE8	; 232
    4e52:	92 e0       	ldi	r25, 0x02	; 2
    4e54:	60 e0       	ldi	r22, 0x00	; 0
    4e56:	70 e0       	ldi	r23, 0x00	; 0
    4e58:	45 e0       	ldi	r20, 0x05	; 5
    4e5a:	50 e0       	ldi	r21, 0x00	; 0
    4e5c:	0e 94 c0 28 	call	0x5180	; 0x5180 <memset>
					indexServo = 0;
    4e60:	10 92 ed 02 	sts	0x02ED, r1
    4e64:	80 e0       	ldi	r24, 0x00	; 0
    4e66:	90 e0       	ldi	r25, 0x00	; 0
    4e68:	aa e7       	ldi	r26, 0x7A	; 122
    4e6a:	b4 e4       	ldi	r27, 0x44	; 68
    4e6c:	89 8f       	std	Y+25, r24	; 0x19
    4e6e:	9a 8f       	std	Y+26, r25	; 0x1a
    4e70:	ab 8f       	std	Y+27, r26	; 0x1b
    4e72:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e74:	69 8d       	ldd	r22, Y+25	; 0x19
    4e76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e7c:	20 e0       	ldi	r18, 0x00	; 0
    4e7e:	30 e0       	ldi	r19, 0x00	; 0
    4e80:	4a e7       	ldi	r20, 0x7A	; 122
    4e82:	55 e4       	ldi	r21, 0x45	; 69
    4e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e88:	dc 01       	movw	r26, r24
    4e8a:	cb 01       	movw	r24, r22
    4e8c:	8d 8b       	std	Y+21, r24	; 0x15
    4e8e:	9e 8b       	std	Y+22, r25	; 0x16
    4e90:	af 8b       	std	Y+23, r26	; 0x17
    4e92:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4e94:	6d 89       	ldd	r22, Y+21	; 0x15
    4e96:	7e 89       	ldd	r23, Y+22	; 0x16
    4e98:	8f 89       	ldd	r24, Y+23	; 0x17
    4e9a:	98 8d       	ldd	r25, Y+24	; 0x18
    4e9c:	20 e0       	ldi	r18, 0x00	; 0
    4e9e:	30 e0       	ldi	r19, 0x00	; 0
    4ea0:	40 e8       	ldi	r20, 0x80	; 128
    4ea2:	5f e3       	ldi	r21, 0x3F	; 63
    4ea4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ea8:	88 23       	and	r24, r24
    4eaa:	2c f4       	brge	.+10     	; 0x4eb6 <main+0xe50>
		__ticks = 1;
    4eac:	81 e0       	ldi	r24, 0x01	; 1
    4eae:	90 e0       	ldi	r25, 0x00	; 0
    4eb0:	9c 8b       	std	Y+20, r25	; 0x14
    4eb2:	8b 8b       	std	Y+19, r24	; 0x13
    4eb4:	3f c0       	rjmp	.+126    	; 0x4f34 <main+0xece>
	else if (__tmp > 65535)
    4eb6:	6d 89       	ldd	r22, Y+21	; 0x15
    4eb8:	7e 89       	ldd	r23, Y+22	; 0x16
    4eba:	8f 89       	ldd	r24, Y+23	; 0x17
    4ebc:	98 8d       	ldd	r25, Y+24	; 0x18
    4ebe:	20 e0       	ldi	r18, 0x00	; 0
    4ec0:	3f ef       	ldi	r19, 0xFF	; 255
    4ec2:	4f e7       	ldi	r20, 0x7F	; 127
    4ec4:	57 e4       	ldi	r21, 0x47	; 71
    4ec6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4eca:	18 16       	cp	r1, r24
    4ecc:	4c f5       	brge	.+82     	; 0x4f20 <main+0xeba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ece:	69 8d       	ldd	r22, Y+25	; 0x19
    4ed0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4ed2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ed4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ed6:	20 e0       	ldi	r18, 0x00	; 0
    4ed8:	30 e0       	ldi	r19, 0x00	; 0
    4eda:	40 e2       	ldi	r20, 0x20	; 32
    4edc:	51 e4       	ldi	r21, 0x41	; 65
    4ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ee2:	dc 01       	movw	r26, r24
    4ee4:	cb 01       	movw	r24, r22
    4ee6:	bc 01       	movw	r22, r24
    4ee8:	cd 01       	movw	r24, r26
    4eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4eee:	dc 01       	movw	r26, r24
    4ef0:	cb 01       	movw	r24, r22
    4ef2:	9c 8b       	std	Y+20, r25	; 0x14
    4ef4:	8b 8b       	std	Y+19, r24	; 0x13
    4ef6:	0f c0       	rjmp	.+30     	; 0x4f16 <main+0xeb0>
    4ef8:	80 e9       	ldi	r24, 0x90	; 144
    4efa:	91 e0       	ldi	r25, 0x01	; 1
    4efc:	9a 8b       	std	Y+18, r25	; 0x12
    4efe:	89 8b       	std	Y+17, r24	; 0x11
    4f00:	89 89       	ldd	r24, Y+17	; 0x11
    4f02:	9a 89       	ldd	r25, Y+18	; 0x12
    4f04:	01 97       	sbiw	r24, 0x01	; 1
    4f06:	f1 f7       	brne	.-4      	; 0x4f04 <main+0xe9e>
    4f08:	9a 8b       	std	Y+18, r25	; 0x12
    4f0a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f0c:	8b 89       	ldd	r24, Y+19	; 0x13
    4f0e:	9c 89       	ldd	r25, Y+20	; 0x14
    4f10:	01 97       	sbiw	r24, 0x01	; 1
    4f12:	9c 8b       	std	Y+20, r25	; 0x14
    4f14:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f16:	8b 89       	ldd	r24, Y+19	; 0x13
    4f18:	9c 89       	ldd	r25, Y+20	; 0x14
    4f1a:	00 97       	sbiw	r24, 0x00	; 0
    4f1c:	69 f7       	brne	.-38     	; 0x4ef8 <main+0xe92>
    4f1e:	14 c0       	rjmp	.+40     	; 0x4f48 <main+0xee2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f20:	6d 89       	ldd	r22, Y+21	; 0x15
    4f22:	7e 89       	ldd	r23, Y+22	; 0x16
    4f24:	8f 89       	ldd	r24, Y+23	; 0x17
    4f26:	98 8d       	ldd	r25, Y+24	; 0x18
    4f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f2c:	dc 01       	movw	r26, r24
    4f2e:	cb 01       	movw	r24, r22
    4f30:	9c 8b       	std	Y+20, r25	; 0x14
    4f32:	8b 8b       	std	Y+19, r24	; 0x13
    4f34:	8b 89       	ldd	r24, Y+19	; 0x13
    4f36:	9c 89       	ldd	r25, Y+20	; 0x14
    4f38:	98 8b       	std	Y+16, r25	; 0x10
    4f3a:	8f 87       	std	Y+15, r24	; 0x0f
    4f3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f3e:	98 89       	ldd	r25, Y+16	; 0x10
    4f40:	01 97       	sbiw	r24, 0x01	; 1
    4f42:	f1 f7       	brne	.-4      	; 0x4f40 <main+0xeda>
    4f44:	98 8b       	std	Y+16, r25	; 0x10
    4f46:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(1000);
					Servo_Stop();
    4f48:	0e 94 29 17 	call	0x2e52	; 0x2e52 <Servo_Stop>
					gettingServoOption = 0;
    4f4c:	10 92 f1 02 	sts	0x02F1, r1
					gettingMotorOption=0;
    4f50:	10 92 ee 02 	sts	0x02EE, r1
					currentState = STATE_MOTOR_OPTIONS;
    4f54:	82 e0       	ldi	r24, 0x02	; 2
    4f56:	80 93 ff 02 	sts	0x02FF, r24
    4f5a:	c0 c8       	rjmp	.-3712   	; 0x40dc <main+0x76>
			break;



		case STATE_EXIT:
			lcd_ES_tclear();
    4f5c:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <lcd_ES_tclear>
			Lcd_ES_tsendString("Exit System :)");
    4f60:	8f e1       	ldi	r24, 0x1F	; 31
    4f62:	91 e0       	ldi	r25, 0x01	; 1
    4f64:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <Lcd_ES_tsendString>
    4f68:	80 e0       	ldi	r24, 0x00	; 0
    4f6a:	90 e0       	ldi	r25, 0x00	; 0
    4f6c:	aa e7       	ldi	r26, 0x7A	; 122
    4f6e:	b4 e4       	ldi	r27, 0x44	; 68
    4f70:	8b 87       	std	Y+11, r24	; 0x0b
    4f72:	9c 87       	std	Y+12, r25	; 0x0c
    4f74:	ad 87       	std	Y+13, r26	; 0x0d
    4f76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f78:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f80:	20 e0       	ldi	r18, 0x00	; 0
    4f82:	30 e0       	ldi	r19, 0x00	; 0
    4f84:	4a e7       	ldi	r20, 0x7A	; 122
    4f86:	55 e4       	ldi	r21, 0x45	; 69
    4f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f8c:	dc 01       	movw	r26, r24
    4f8e:	cb 01       	movw	r24, r22
    4f90:	8f 83       	std	Y+7, r24	; 0x07
    4f92:	98 87       	std	Y+8, r25	; 0x08
    4f94:	a9 87       	std	Y+9, r26	; 0x09
    4f96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4f98:	6f 81       	ldd	r22, Y+7	; 0x07
    4f9a:	78 85       	ldd	r23, Y+8	; 0x08
    4f9c:	89 85       	ldd	r24, Y+9	; 0x09
    4f9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fa0:	20 e0       	ldi	r18, 0x00	; 0
    4fa2:	30 e0       	ldi	r19, 0x00	; 0
    4fa4:	40 e8       	ldi	r20, 0x80	; 128
    4fa6:	5f e3       	ldi	r21, 0x3F	; 63
    4fa8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4fac:	88 23       	and	r24, r24
    4fae:	2c f4       	brge	.+10     	; 0x4fba <main+0xf54>
		__ticks = 1;
    4fb0:	81 e0       	ldi	r24, 0x01	; 1
    4fb2:	90 e0       	ldi	r25, 0x00	; 0
    4fb4:	9e 83       	std	Y+6, r25	; 0x06
    4fb6:	8d 83       	std	Y+5, r24	; 0x05
    4fb8:	3f c0       	rjmp	.+126    	; 0x5038 <main+0xfd2>
	else if (__tmp > 65535)
    4fba:	6f 81       	ldd	r22, Y+7	; 0x07
    4fbc:	78 85       	ldd	r23, Y+8	; 0x08
    4fbe:	89 85       	ldd	r24, Y+9	; 0x09
    4fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fc2:	20 e0       	ldi	r18, 0x00	; 0
    4fc4:	3f ef       	ldi	r19, 0xFF	; 255
    4fc6:	4f e7       	ldi	r20, 0x7F	; 127
    4fc8:	57 e4       	ldi	r21, 0x47	; 71
    4fca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4fce:	18 16       	cp	r1, r24
    4fd0:	4c f5       	brge	.+82     	; 0x5024 <main+0xfbe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    4fd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    4fd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fda:	20 e0       	ldi	r18, 0x00	; 0
    4fdc:	30 e0       	ldi	r19, 0x00	; 0
    4fde:	40 e2       	ldi	r20, 0x20	; 32
    4fe0:	51 e4       	ldi	r21, 0x41	; 65
    4fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fe6:	dc 01       	movw	r26, r24
    4fe8:	cb 01       	movw	r24, r22
    4fea:	bc 01       	movw	r22, r24
    4fec:	cd 01       	movw	r24, r26
    4fee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ff2:	dc 01       	movw	r26, r24
    4ff4:	cb 01       	movw	r24, r22
    4ff6:	9e 83       	std	Y+6, r25	; 0x06
    4ff8:	8d 83       	std	Y+5, r24	; 0x05
    4ffa:	0f c0       	rjmp	.+30     	; 0x501a <main+0xfb4>
    4ffc:	80 e9       	ldi	r24, 0x90	; 144
    4ffe:	91 e0       	ldi	r25, 0x01	; 1
    5000:	9c 83       	std	Y+4, r25	; 0x04
    5002:	8b 83       	std	Y+3, r24	; 0x03
    5004:	8b 81       	ldd	r24, Y+3	; 0x03
    5006:	9c 81       	ldd	r25, Y+4	; 0x04
    5008:	01 97       	sbiw	r24, 0x01	; 1
    500a:	f1 f7       	brne	.-4      	; 0x5008 <main+0xfa2>
    500c:	9c 83       	std	Y+4, r25	; 0x04
    500e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5010:	8d 81       	ldd	r24, Y+5	; 0x05
    5012:	9e 81       	ldd	r25, Y+6	; 0x06
    5014:	01 97       	sbiw	r24, 0x01	; 1
    5016:	9e 83       	std	Y+6, r25	; 0x06
    5018:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    501a:	8d 81       	ldd	r24, Y+5	; 0x05
    501c:	9e 81       	ldd	r25, Y+6	; 0x06
    501e:	00 97       	sbiw	r24, 0x00	; 0
    5020:	69 f7       	brne	.-38     	; 0x4ffc <main+0xf96>
    5022:	14 c0       	rjmp	.+40     	; 0x504c <main+0xfe6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5024:	6f 81       	ldd	r22, Y+7	; 0x07
    5026:	78 85       	ldd	r23, Y+8	; 0x08
    5028:	89 85       	ldd	r24, Y+9	; 0x09
    502a:	9a 85       	ldd	r25, Y+10	; 0x0a
    502c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5030:	dc 01       	movw	r26, r24
    5032:	cb 01       	movw	r24, r22
    5034:	9e 83       	std	Y+6, r25	; 0x06
    5036:	8d 83       	std	Y+5, r24	; 0x05
    5038:	8d 81       	ldd	r24, Y+5	; 0x05
    503a:	9e 81       	ldd	r25, Y+6	; 0x06
    503c:	9a 83       	std	Y+2, r25	; 0x02
    503e:	89 83       	std	Y+1, r24	; 0x01
    5040:	89 81       	ldd	r24, Y+1	; 0x01
    5042:	9a 81       	ldd	r25, Y+2	; 0x02
    5044:	01 97       	sbiw	r24, 0x01	; 1
    5046:	f1 f7       	brne	.-4      	; 0x5044 <main+0xfde>
    5048:	9a 83       	std	Y+2, r25	; 0x02
    504a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			return 0;
    504c:	80 e0       	ldi	r24, 0x00	; 0
    504e:	90 e0       	ldi	r25, 0x00	; 0
		}
	}

	return 0;
}
    5050:	c7 57       	subi	r28, 0x77	; 119
    5052:	df 4f       	sbci	r29, 0xFF	; 255
    5054:	0f b6       	in	r0, 0x3f	; 63
    5056:	f8 94       	cli
    5058:	de bf       	out	0x3e, r29	; 62
    505a:	0f be       	out	0x3f, r0	; 63
    505c:	cd bf       	out	0x3d, r28	; 61
    505e:	cf 91       	pop	r28
    5060:	df 91       	pop	r29
    5062:	1f 91       	pop	r17
    5064:	0f 91       	pop	r16
    5066:	08 95       	ret

00005068 <__mulsi3>:
    5068:	62 9f       	mul	r22, r18
    506a:	d0 01       	movw	r26, r0
    506c:	73 9f       	mul	r23, r19
    506e:	f0 01       	movw	r30, r0
    5070:	82 9f       	mul	r24, r18
    5072:	e0 0d       	add	r30, r0
    5074:	f1 1d       	adc	r31, r1
    5076:	64 9f       	mul	r22, r20
    5078:	e0 0d       	add	r30, r0
    507a:	f1 1d       	adc	r31, r1
    507c:	92 9f       	mul	r25, r18
    507e:	f0 0d       	add	r31, r0
    5080:	83 9f       	mul	r24, r19
    5082:	f0 0d       	add	r31, r0
    5084:	74 9f       	mul	r23, r20
    5086:	f0 0d       	add	r31, r0
    5088:	65 9f       	mul	r22, r21
    508a:	f0 0d       	add	r31, r0
    508c:	99 27       	eor	r25, r25
    508e:	72 9f       	mul	r23, r18
    5090:	b0 0d       	add	r27, r0
    5092:	e1 1d       	adc	r30, r1
    5094:	f9 1f       	adc	r31, r25
    5096:	63 9f       	mul	r22, r19
    5098:	b0 0d       	add	r27, r0
    509a:	e1 1d       	adc	r30, r1
    509c:	f9 1f       	adc	r31, r25
    509e:	bd 01       	movw	r22, r26
    50a0:	cf 01       	movw	r24, r30
    50a2:	11 24       	eor	r1, r1
    50a4:	08 95       	ret

000050a6 <__udivmodhi4>:
    50a6:	aa 1b       	sub	r26, r26
    50a8:	bb 1b       	sub	r27, r27
    50aa:	51 e1       	ldi	r21, 0x11	; 17
    50ac:	07 c0       	rjmp	.+14     	; 0x50bc <__udivmodhi4_ep>

000050ae <__udivmodhi4_loop>:
    50ae:	aa 1f       	adc	r26, r26
    50b0:	bb 1f       	adc	r27, r27
    50b2:	a6 17       	cp	r26, r22
    50b4:	b7 07       	cpc	r27, r23
    50b6:	10 f0       	brcs	.+4      	; 0x50bc <__udivmodhi4_ep>
    50b8:	a6 1b       	sub	r26, r22
    50ba:	b7 0b       	sbc	r27, r23

000050bc <__udivmodhi4_ep>:
    50bc:	88 1f       	adc	r24, r24
    50be:	99 1f       	adc	r25, r25
    50c0:	5a 95       	dec	r21
    50c2:	a9 f7       	brne	.-22     	; 0x50ae <__udivmodhi4_loop>
    50c4:	80 95       	com	r24
    50c6:	90 95       	com	r25
    50c8:	bc 01       	movw	r22, r24
    50ca:	cd 01       	movw	r24, r26
    50cc:	08 95       	ret

000050ce <__udivmodsi4>:
    50ce:	a1 e2       	ldi	r26, 0x21	; 33
    50d0:	1a 2e       	mov	r1, r26
    50d2:	aa 1b       	sub	r26, r26
    50d4:	bb 1b       	sub	r27, r27
    50d6:	fd 01       	movw	r30, r26
    50d8:	0d c0       	rjmp	.+26     	; 0x50f4 <__udivmodsi4_ep>

000050da <__udivmodsi4_loop>:
    50da:	aa 1f       	adc	r26, r26
    50dc:	bb 1f       	adc	r27, r27
    50de:	ee 1f       	adc	r30, r30
    50e0:	ff 1f       	adc	r31, r31
    50e2:	a2 17       	cp	r26, r18
    50e4:	b3 07       	cpc	r27, r19
    50e6:	e4 07       	cpc	r30, r20
    50e8:	f5 07       	cpc	r31, r21
    50ea:	20 f0       	brcs	.+8      	; 0x50f4 <__udivmodsi4_ep>
    50ec:	a2 1b       	sub	r26, r18
    50ee:	b3 0b       	sbc	r27, r19
    50f0:	e4 0b       	sbc	r30, r20
    50f2:	f5 0b       	sbc	r31, r21

000050f4 <__udivmodsi4_ep>:
    50f4:	66 1f       	adc	r22, r22
    50f6:	77 1f       	adc	r23, r23
    50f8:	88 1f       	adc	r24, r24
    50fa:	99 1f       	adc	r25, r25
    50fc:	1a 94       	dec	r1
    50fe:	69 f7       	brne	.-38     	; 0x50da <__udivmodsi4_loop>
    5100:	60 95       	com	r22
    5102:	70 95       	com	r23
    5104:	80 95       	com	r24
    5106:	90 95       	com	r25
    5108:	9b 01       	movw	r18, r22
    510a:	ac 01       	movw	r20, r24
    510c:	bd 01       	movw	r22, r26
    510e:	cf 01       	movw	r24, r30
    5110:	08 95       	ret

00005112 <__prologue_saves__>:
    5112:	2f 92       	push	r2
    5114:	3f 92       	push	r3
    5116:	4f 92       	push	r4
    5118:	5f 92       	push	r5
    511a:	6f 92       	push	r6
    511c:	7f 92       	push	r7
    511e:	8f 92       	push	r8
    5120:	9f 92       	push	r9
    5122:	af 92       	push	r10
    5124:	bf 92       	push	r11
    5126:	cf 92       	push	r12
    5128:	df 92       	push	r13
    512a:	ef 92       	push	r14
    512c:	ff 92       	push	r15
    512e:	0f 93       	push	r16
    5130:	1f 93       	push	r17
    5132:	cf 93       	push	r28
    5134:	df 93       	push	r29
    5136:	cd b7       	in	r28, 0x3d	; 61
    5138:	de b7       	in	r29, 0x3e	; 62
    513a:	ca 1b       	sub	r28, r26
    513c:	db 0b       	sbc	r29, r27
    513e:	0f b6       	in	r0, 0x3f	; 63
    5140:	f8 94       	cli
    5142:	de bf       	out	0x3e, r29	; 62
    5144:	0f be       	out	0x3f, r0	; 63
    5146:	cd bf       	out	0x3d, r28	; 61
    5148:	09 94       	ijmp

0000514a <__epilogue_restores__>:
    514a:	2a 88       	ldd	r2, Y+18	; 0x12
    514c:	39 88       	ldd	r3, Y+17	; 0x11
    514e:	48 88       	ldd	r4, Y+16	; 0x10
    5150:	5f 84       	ldd	r5, Y+15	; 0x0f
    5152:	6e 84       	ldd	r6, Y+14	; 0x0e
    5154:	7d 84       	ldd	r7, Y+13	; 0x0d
    5156:	8c 84       	ldd	r8, Y+12	; 0x0c
    5158:	9b 84       	ldd	r9, Y+11	; 0x0b
    515a:	aa 84       	ldd	r10, Y+10	; 0x0a
    515c:	b9 84       	ldd	r11, Y+9	; 0x09
    515e:	c8 84       	ldd	r12, Y+8	; 0x08
    5160:	df 80       	ldd	r13, Y+7	; 0x07
    5162:	ee 80       	ldd	r14, Y+6	; 0x06
    5164:	fd 80       	ldd	r15, Y+5	; 0x05
    5166:	0c 81       	ldd	r16, Y+4	; 0x04
    5168:	1b 81       	ldd	r17, Y+3	; 0x03
    516a:	aa 81       	ldd	r26, Y+2	; 0x02
    516c:	b9 81       	ldd	r27, Y+1	; 0x01
    516e:	ce 0f       	add	r28, r30
    5170:	d1 1d       	adc	r29, r1
    5172:	0f b6       	in	r0, 0x3f	; 63
    5174:	f8 94       	cli
    5176:	de bf       	out	0x3e, r29	; 62
    5178:	0f be       	out	0x3f, r0	; 63
    517a:	cd bf       	out	0x3d, r28	; 61
    517c:	ed 01       	movw	r28, r26
    517e:	08 95       	ret

00005180 <memset>:
    5180:	dc 01       	movw	r26, r24
    5182:	01 c0       	rjmp	.+2      	; 0x5186 <memset+0x6>
    5184:	6d 93       	st	X+, r22
    5186:	41 50       	subi	r20, 0x01	; 1
    5188:	50 40       	sbci	r21, 0x00	; 0
    518a:	e0 f7       	brcc	.-8      	; 0x5184 <memset+0x4>
    518c:	08 95       	ret

0000518e <strcmp>:
    518e:	fb 01       	movw	r30, r22
    5190:	dc 01       	movw	r26, r24
    5192:	8d 91       	ld	r24, X+
    5194:	01 90       	ld	r0, Z+
    5196:	80 19       	sub	r24, r0
    5198:	01 10       	cpse	r0, r1
    519a:	d9 f3       	breq	.-10     	; 0x5192 <strcmp+0x4>
    519c:	99 0b       	sbc	r25, r25
    519e:	08 95       	ret

000051a0 <_exit>:
    51a0:	f8 94       	cli

000051a2 <__stop_program>:
    51a2:	ff cf       	rjmp	.-2      	; 0x51a2 <__stop_program>
