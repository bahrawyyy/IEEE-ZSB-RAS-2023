
Motors_Dashboard_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004eaa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016a  00800060  00004eaa  00004f3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000032  008001ca  008001ca  000050a8  2**0
                  ALLOC
  3 .stab         000044dc  00000000  00000000  000050a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001f7c  00000000  00000000  00009584  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000b500  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000b660  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000b7ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000d834  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000e935  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000f8b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000fa38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000fcfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010588  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a7 09 	jmp	0x134e	; 0x134e <__vector_1>
       8:	0c 94 da 09 	jmp	0x13b4	; 0x13b4 <__vector_2>
       c:	0c 94 0d 0a 	jmp	0x141a	; 0x141a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ea       	ldi	r30, 0xAA	; 170
      68:	fe e4       	ldi	r31, 0x4E	; 78
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3c       	cpi	r26, 0xCA	; 202
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ec       	ldi	r26, 0xCA	; 202
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3f       	cpi	r26, 0xFC	; 252
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 07 1a 	call	0x340e	; 0x340e <main>
      8a:	0c 94 53 27 	jmp	0x4ea6	; 0x4ea6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0c 27 	jmp	0x4e18	; 0x4e18 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e3       	ldi	r26, 0x3C	; 60
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 28 27 	jmp	0x4e50	; 0x4e50 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 18 27 	jmp	0x4e30	; 0x4e30 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 34 27 	jmp	0x4e68	; 0x4e68 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 18 27 	jmp	0x4e30	; 0x4e30 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 34 27 	jmp	0x4e68	; 0x4e68 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0c 27 	jmp	0x4e18	; 0x4e18 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e3       	ldi	r24, 0x3C	; 60
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 28 27 	jmp	0x4e50	; 0x4e50 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 14 27 	jmp	0x4e28	; 0x4e28 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e3       	ldi	r22, 0x3C	; 60
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 30 27 	jmp	0x4e60	; 0x4e60 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 18 27 	jmp	0x4e30	; 0x4e30 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 34 27 	jmp	0x4e68	; 0x4e68 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 18 27 	jmp	0x4e30	; 0x4e30 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 34 27 	jmp	0x4e68	; 0x4e68 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 18 27 	jmp	0x4e30	; 0x4e30 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 34 27 	jmp	0x4e68	; 0x4e68 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 1c 27 	jmp	0x4e38	; 0x4e38 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 38 27 	jmp	0x4e70	; 0x4e70 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <SPI_Init>:


static void (*GP_SPI_STC)(void);

void SPI_Init(SPI_Config_t * SPI_Cfg)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <SPI_Init+0x6>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	9a 83       	std	Y+2, r25	; 0x02
     caa:	89 83       	std	Y+1, r24	; 0x01
	if(SPI_Cfg->Device_Mode == SPI_DEVICE_MODE_MASTER)
     cac:	e9 81       	ldd	r30, Y+1	; 0x01
     cae:	fa 81       	ldd	r31, Y+2	; 0x02
     cb0:	80 81       	ld	r24, Z
     cb2:	80 31       	cpi	r24, 0x10	; 16
     cb4:	09 f0       	breq	.+2      	; 0xcb8 <SPI_Init+0x1a>
     cb6:	d8 c0       	rjmp	.+432    	; 0xe68 <SPI_Init+0x1ca>
	{
		// SCK, MOSI, SS Output
		DIO_ES_tSetPinDirection(SPI_REG, SCK, OUTPUT);
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	67 e0       	ldi	r22, 0x07	; 7
     cbc:	41 e0       	ldi	r20, 0x01	; 1
     cbe:	0e 94 40 0a 	call	0x1480	; 0x1480 <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(SPI_REG, MOSI, OUTPUT);
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	65 e0       	ldi	r22, 0x05	; 5
     cc6:	41 e0       	ldi	r20, 0x01	; 1
     cc8:	0e 94 40 0a 	call	0x1480	; 0x1480 <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(SPI_REG, SS, OUTPUT);
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	64 e0       	ldi	r22, 0x04	; 4
     cd0:	41 e0       	ldi	r20, 0x01	; 1
     cd2:	0e 94 40 0a 	call	0x1480	; 0x1480 <DIO_ES_tSetPinDirection>

		// Set MISO pin as INPUT
		DIO_ES_tSetPinDirection(SPI_REG, MISO, INPUT);
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	66 e0       	ldi	r22, 0x06	; 6
     cda:	40 e0       	ldi	r20, 0x00	; 0
     cdc:	0e 94 40 0a 	call	0x1480	; 0x1480 <DIO_ES_tSetPinDirection>


		SPCR |= SPI_DEVICE_MODE_MASTER;
     ce0:	ad e2       	ldi	r26, 0x2D	; 45
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	ed e2       	ldi	r30, 0x2D	; 45
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	80 61       	ori	r24, 0x10	; 16
     cec:	8c 93       	st	X, r24

		// The master is the one who generates the clock
		if(SPI_Cfg->Prescalar == SPI_Prescalar_4){
     cee:	e9 81       	ldd	r30, Y+1	; 0x01
     cf0:	fa 81       	ldd	r31, Y+2	; 0x02
     cf2:	84 81       	ldd	r24, Z+4	; 0x04
     cf4:	88 23       	and	r24, r24
     cf6:	b1 f4       	brne	.+44     	; 0xd24 <SPI_Init+0x86>
			CLR_BIT(SPCR,SPR0);
     cf8:	ad e2       	ldi	r26, 0x2D	; 45
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	ed e2       	ldi	r30, 0x2D	; 45
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	8e 7f       	andi	r24, 0xFE	; 254
     d04:	8c 93       	st	X, r24
			CLR_BIT(SPCR,SPR1);
     d06:	ad e2       	ldi	r26, 0x2D	; 45
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	ed e2       	ldi	r30, 0x2D	; 45
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	8d 7f       	andi	r24, 0xFD	; 253
     d12:	8c 93       	st	X, r24
			CLR_BIT(SPSR,SPI2X);
     d14:	ae e2       	ldi	r26, 0x2E	; 46
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	ee e2       	ldi	r30, 0x2E	; 46
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	8e 7f       	andi	r24, 0xFE	; 254
     d20:	8c 93       	st	X, r24
     d22:	bd c0       	rjmp	.+378    	; 0xe9e <SPI_Init+0x200>
		}else if(SPI_Cfg->Prescalar == SPI_Prescalar_16){
     d24:	e9 81       	ldd	r30, Y+1	; 0x01
     d26:	fa 81       	ldd	r31, Y+2	; 0x02
     d28:	84 81       	ldd	r24, Z+4	; 0x04
     d2a:	81 30       	cpi	r24, 0x01	; 1
     d2c:	b1 f4       	brne	.+44     	; 0xd5a <SPI_Init+0xbc>
			SET_BIT(SPCR,SPR0);
     d2e:	ad e2       	ldi	r26, 0x2D	; 45
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	ed e2       	ldi	r30, 0x2D	; 45
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	81 60       	ori	r24, 0x01	; 1
     d3a:	8c 93       	st	X, r24
			CLR_BIT(SPCR,SPR1);
     d3c:	ad e2       	ldi	r26, 0x2D	; 45
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	ed e2       	ldi	r30, 0x2D	; 45
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	8d 7f       	andi	r24, 0xFD	; 253
     d48:	8c 93       	st	X, r24
			CLR_BIT(SPSR,SPI2X);
     d4a:	ae e2       	ldi	r26, 0x2E	; 46
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	ee e2       	ldi	r30, 0x2E	; 46
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	8e 7f       	andi	r24, 0xFE	; 254
     d56:	8c 93       	st	X, r24
     d58:	a2 c0       	rjmp	.+324    	; 0xe9e <SPI_Init+0x200>
		}else if(SPI_Cfg->Prescalar == SPI_Prescalar_64){
     d5a:	e9 81       	ldd	r30, Y+1	; 0x01
     d5c:	fa 81       	ldd	r31, Y+2	; 0x02
     d5e:	84 81       	ldd	r24, Z+4	; 0x04
     d60:	82 30       	cpi	r24, 0x02	; 2
     d62:	b1 f4       	brne	.+44     	; 0xd90 <SPI_Init+0xf2>
			CLR_BIT(SPCR,SPR0);
     d64:	ad e2       	ldi	r26, 0x2D	; 45
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	ed e2       	ldi	r30, 0x2D	; 45
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	8e 7f       	andi	r24, 0xFE	; 254
     d70:	8c 93       	st	X, r24
			SET_BIT(SPCR,SPR1);
     d72:	ad e2       	ldi	r26, 0x2D	; 45
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	ed e2       	ldi	r30, 0x2D	; 45
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	82 60       	ori	r24, 0x02	; 2
     d7e:	8c 93       	st	X, r24
			CLR_BIT(SPSR,SPI2X);
     d80:	ae e2       	ldi	r26, 0x2E	; 46
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	ee e2       	ldi	r30, 0x2E	; 46
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	8e 7f       	andi	r24, 0xFE	; 254
     d8c:	8c 93       	st	X, r24
     d8e:	87 c0       	rjmp	.+270    	; 0xe9e <SPI_Init+0x200>
		}else if(SPI_Cfg->Prescalar == SPI_Prescalar_128){
     d90:	e9 81       	ldd	r30, Y+1	; 0x01
     d92:	fa 81       	ldd	r31, Y+2	; 0x02
     d94:	84 81       	ldd	r24, Z+4	; 0x04
     d96:	83 30       	cpi	r24, 0x03	; 3
     d98:	b1 f4       	brne	.+44     	; 0xdc6 <SPI_Init+0x128>
			SET_BIT(SPCR,SPR0);
     d9a:	ad e2       	ldi	r26, 0x2D	; 45
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	ed e2       	ldi	r30, 0x2D	; 45
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	81 60       	ori	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
			SET_BIT(SPCR,SPR1);
     da8:	ad e2       	ldi	r26, 0x2D	; 45
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	ed e2       	ldi	r30, 0x2D	; 45
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	82 60       	ori	r24, 0x02	; 2
     db4:	8c 93       	st	X, r24
			CLR_BIT(SPSR,SPI2X);
     db6:	ae e2       	ldi	r26, 0x2E	; 46
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	ee e2       	ldi	r30, 0x2E	; 46
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	8e 7f       	andi	r24, 0xFE	; 254
     dc2:	8c 93       	st	X, r24
     dc4:	6c c0       	rjmp	.+216    	; 0xe9e <SPI_Init+0x200>
		}else if(SPI_Cfg->Prescalar == SPI_Prescalar_2){
     dc6:	e9 81       	ldd	r30, Y+1	; 0x01
     dc8:	fa 81       	ldd	r31, Y+2	; 0x02
     dca:	84 81       	ldd	r24, Z+4	; 0x04
     dcc:	84 30       	cpi	r24, 0x04	; 4
     dce:	b1 f4       	brne	.+44     	; 0xdfc <SPI_Init+0x15e>
			CLR_BIT(SPCR,SPR0);
     dd0:	ad e2       	ldi	r26, 0x2D	; 45
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	ed e2       	ldi	r30, 0x2D	; 45
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	8e 7f       	andi	r24, 0xFE	; 254
     ddc:	8c 93       	st	X, r24
			CLR_BIT(SPCR,SPR1);
     dde:	ad e2       	ldi	r26, 0x2D	; 45
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	ed e2       	ldi	r30, 0x2D	; 45
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	8d 7f       	andi	r24, 0xFD	; 253
     dea:	8c 93       	st	X, r24
			SET_BIT(SPSR,SPI2X);
     dec:	ae e2       	ldi	r26, 0x2E	; 46
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	ee e2       	ldi	r30, 0x2E	; 46
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	81 60       	ori	r24, 0x01	; 1
     df8:	8c 93       	st	X, r24
     dfa:	51 c0       	rjmp	.+162    	; 0xe9e <SPI_Init+0x200>
		}else if(SPI_Cfg->Prescalar == SPI_Prescalar_8){
     dfc:	e9 81       	ldd	r30, Y+1	; 0x01
     dfe:	fa 81       	ldd	r31, Y+2	; 0x02
     e00:	84 81       	ldd	r24, Z+4	; 0x04
     e02:	85 30       	cpi	r24, 0x05	; 5
     e04:	b1 f4       	brne	.+44     	; 0xe32 <SPI_Init+0x194>
			SET_BIT(SPCR,SPR0);
     e06:	ad e2       	ldi	r26, 0x2D	; 45
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	ed e2       	ldi	r30, 0x2D	; 45
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	81 60       	ori	r24, 0x01	; 1
     e12:	8c 93       	st	X, r24
			CLR_BIT(SPCR,SPR1);
     e14:	ad e2       	ldi	r26, 0x2D	; 45
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	ed e2       	ldi	r30, 0x2D	; 45
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	8d 7f       	andi	r24, 0xFD	; 253
     e20:	8c 93       	st	X, r24
			SET_BIT(SPSR,SPI2X);
     e22:	ae e2       	ldi	r26, 0x2E	; 46
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	ee e2       	ldi	r30, 0x2E	; 46
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	81 60       	ori	r24, 0x01	; 1
     e2e:	8c 93       	st	X, r24
     e30:	36 c0       	rjmp	.+108    	; 0xe9e <SPI_Init+0x200>
		}else if(SPI_Cfg->Prescalar == SPI_Prescalar_32){
     e32:	e9 81       	ldd	r30, Y+1	; 0x01
     e34:	fa 81       	ldd	r31, Y+2	; 0x02
     e36:	84 81       	ldd	r24, Z+4	; 0x04
     e38:	86 30       	cpi	r24, 0x06	; 6
     e3a:	89 f5       	brne	.+98     	; 0xe9e <SPI_Init+0x200>
			CLR_BIT(SPCR,SPR0);
     e3c:	ad e2       	ldi	r26, 0x2D	; 45
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	ed e2       	ldi	r30, 0x2D	; 45
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	8e 7f       	andi	r24, 0xFE	; 254
     e48:	8c 93       	st	X, r24
			SET_BIT(SPCR,SPR1);
     e4a:	ad e2       	ldi	r26, 0x2D	; 45
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	ed e2       	ldi	r30, 0x2D	; 45
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	82 60       	ori	r24, 0x02	; 2
     e56:	8c 93       	st	X, r24
			SET_BIT(SPSR,SPI2X);
     e58:	ae e2       	ldi	r26, 0x2E	; 46
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	ee e2       	ldi	r30, 0x2E	; 46
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	81 60       	ori	r24, 0x01	; 1
     e64:	8c 93       	st	X, r24
     e66:	1b c0       	rjmp	.+54     	; 0xe9e <SPI_Init+0x200>
		}

	}else
	{   // Slave

		DIO_ES_tSetPinDirection(SPI_REG, MISO, OUTPUT);
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	66 e0       	ldi	r22, 0x06	; 6
     e6c:	41 e0       	ldi	r20, 0x01	; 1
     e6e:	0e 94 40 0a 	call	0x1480	; 0x1480 <DIO_ES_tSetPinDirection>
		// Set SCK, MOSI, and SS pins as INPUT (slave mode doesn't need them as output)
		DIO_ES_tSetPinDirection(SPI_REG, SCK, INPUT);
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	67 e0       	ldi	r22, 0x07	; 7
     e76:	40 e0       	ldi	r20, 0x00	; 0
     e78:	0e 94 40 0a 	call	0x1480	; 0x1480 <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(SPI_REG, MOSI, INPUT);
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	65 e0       	ldi	r22, 0x05	; 5
     e80:	40 e0       	ldi	r20, 0x00	; 0
     e82:	0e 94 40 0a 	call	0x1480	; 0x1480 <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(SPI_REG, SS, INPUT);
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	64 e0       	ldi	r22, 0x04	; 4
     e8a:	40 e0       	ldi	r20, 0x00	; 0
     e8c:	0e 94 40 0a 	call	0x1480	; 0x1480 <DIO_ES_tSetPinDirection>


		SPCR &= SPI_DEVICE_MODE_SLAVE;
     e90:	ad e2       	ldi	r26, 0x2D	; 45
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	ed e2       	ldi	r30, 0x2D	; 45
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	8f 7e       	andi	r24, 0xEF	; 239
     e9c:	8c 93       	st	X, r24
	}



	// Common Configurations
	SPCR |= SPI_Cfg->CLK_Polarity;
     e9e:	ad e2       	ldi	r26, 0x2D	; 45
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	ed e2       	ldi	r30, 0x2D	; 45
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	90 81       	ld	r25, Z
     ea8:	e9 81       	ldd	r30, Y+1	; 0x01
     eaa:	fa 81       	ldd	r31, Y+2	; 0x02
     eac:	82 81       	ldd	r24, Z+2	; 0x02
     eae:	89 2b       	or	r24, r25
     eb0:	8c 93       	st	X, r24

	SPCR |= SPI_Cfg->CLK_PHASE;
     eb2:	ad e2       	ldi	r26, 0x2D	; 45
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	ed e2       	ldi	r30, 0x2D	; 45
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	90 81       	ld	r25, Z
     ebc:	e9 81       	ldd	r30, Y+1	; 0x01
     ebe:	fa 81       	ldd	r31, Y+2	; 0x02
     ec0:	83 81       	ldd	r24, Z+3	; 0x03
     ec2:	89 2b       	or	r24, r25
     ec4:	8c 93       	st	X, r24

	SPCR |= SPI_Cfg->Data_Order;
     ec6:	ad e2       	ldi	r26, 0x2D	; 45
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	ed e2       	ldi	r30, 0x2D	; 45
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	90 81       	ld	r25, Z
     ed0:	e9 81       	ldd	r30, Y+1	; 0x01
     ed2:	fa 81       	ldd	r31, Y+2	; 0x02
     ed4:	81 81       	ldd	r24, Z+1	; 0x01
     ed6:	89 2b       	or	r24, r25
     ed8:	8c 93       	st	X, r24


	// If interrupt is enabled
	if(SPI_Cfg->IRQ_Mode != SPI_IRQ_Disable)
     eda:	e9 81       	ldd	r30, Y+1	; 0x01
     edc:	fa 81       	ldd	r31, Y+2	; 0x02
     ede:	85 81       	ldd	r24, Z+5	; 0x05
     ee0:	88 23       	and	r24, r24
     ee2:	39 f0       	breq	.+14     	; 0xef2 <SPI_Init+0x254>
	{
		SPCR |= (1<<SPIE);
     ee4:	ad e2       	ldi	r26, 0x2D	; 45
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	ed e2       	ldi	r30, 0x2D	; 45
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	80 68       	ori	r24, 0x80	; 128
     ef0:	8c 93       	st	X, r24
	}

	GP_SPI_STC = SPI_Cfg->SPI_P_to_Func;
     ef2:	e9 81       	ldd	r30, Y+1	; 0x01
     ef4:	fa 81       	ldd	r31, Y+2	; 0x02
     ef6:	86 81       	ldd	r24, Z+6	; 0x06
     ef8:	97 81       	ldd	r25, Z+7	; 0x07
     efa:	90 93 cb 01 	sts	0x01CB, r25
     efe:	80 93 ca 01 	sts	0x01CA, r24

	// Enable SPI
	SET_BIT(SPCR,SPE);
     f02:	ad e2       	ldi	r26, 0x2D	; 45
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	ed e2       	ldi	r30, 0x2D	; 45
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	80 64       	ori	r24, 0x40	; 64
     f0e:	8c 93       	st	X, r24
}
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	08 95       	ret

00000f1a <SPI_Transmit_Receive>:




u8 SPI_Transmit_Receive(u8 data)
{
     f1a:	df 93       	push	r29
     f1c:	cf 93       	push	r28
     f1e:	0f 92       	push	r0
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
     f24:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
     f26:	ef e2       	ldi	r30, 0x2F	; 47
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	80 83       	st	Z, r24
	while(!GET_BIT(SPSR,SPIF));
     f2e:	ee e2       	ldi	r30, 0x2E	; 46
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	88 23       	and	r24, r24
     f36:	dc f7       	brge	.-10     	; 0xf2e <SPI_Transmit_Receive+0x14>
	// Return data received from slave
	return SPDR;
     f38:	ef e2       	ldi	r30, 0x2F	; 47
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
}
     f3e:	0f 90       	pop	r0
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <__vector_12>:


ISR(SPI_STC_vect)
{
     f46:	1f 92       	push	r1
     f48:	0f 92       	push	r0
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	0f 92       	push	r0
     f4e:	11 24       	eor	r1, r1
     f50:	2f 93       	push	r18
     f52:	3f 93       	push	r19
     f54:	4f 93       	push	r20
     f56:	5f 93       	push	r21
     f58:	6f 93       	push	r22
     f5a:	7f 93       	push	r23
     f5c:	8f 93       	push	r24
     f5e:	9f 93       	push	r25
     f60:	af 93       	push	r26
     f62:	bf 93       	push	r27
     f64:	ef 93       	push	r30
     f66:	ff 93       	push	r31
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
	if(GP_SPI_STC != NULLPTR){
     f70:	80 91 ca 01 	lds	r24, 0x01CA
     f74:	90 91 cb 01 	lds	r25, 0x01CB
     f78:	00 97       	sbiw	r24, 0x00	; 0
     f7a:	29 f0       	breq	.+10     	; 0xf86 <__vector_12+0x40>
		GP_SPI_STC();
     f7c:	e0 91 ca 01 	lds	r30, 0x01CA
     f80:	f0 91 cb 01 	lds	r31, 0x01CB
     f84:	09 95       	icall
	}
}
     f86:	cf 91       	pop	r28
     f88:	df 91       	pop	r29
     f8a:	ff 91       	pop	r31
     f8c:	ef 91       	pop	r30
     f8e:	bf 91       	pop	r27
     f90:	af 91       	pop	r26
     f92:	9f 91       	pop	r25
     f94:	8f 91       	pop	r24
     f96:	7f 91       	pop	r23
     f98:	6f 91       	pop	r22
     f9a:	5f 91       	pop	r21
     f9c:	4f 91       	pop	r20
     f9e:	3f 91       	pop	r19
     fa0:	2f 91       	pop	r18
     fa2:	0f 90       	pop	r0
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	0f 90       	pop	r0
     fa8:	1f 90       	pop	r1
     faa:	18 95       	reti

00000fac <SPI_Receive>:


u8 SPI_Receive()
{
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
    // Wait for data reception to complete
    while (!GET_BIT(SPSR, SPIF));
     fb4:	ee e2       	ldi	r30, 0x2E	; 46
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	88 23       	and	r24, r24
     fbc:	dc f7       	brge	.-10     	; 0xfb4 <SPI_Receive+0x8>

    // Return data received from slave
    return SPDR;
     fbe:	ef e2       	ldi	r30, 0x2F	; 47
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
}
     fc4:	cf 91       	pop	r28
     fc6:	df 91       	pop	r29
     fc8:	08 95       	ret

00000fca <SPI_Transmit>:


void SPI_Transmit(u8 data)
{
     fca:	df 93       	push	r29
     fcc:	cf 93       	push	r28
     fce:	0f 92       	push	r0
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
     fd4:	89 83       	std	Y+1, r24	; 0x01
    SPDR = data;
     fd6:	ef e2       	ldi	r30, 0x2F	; 47
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	80 83       	st	Z, r24
    while (!GET_BIT(SPSR, SPIF));
     fde:	ee e2       	ldi	r30, 0x2E	; 46
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	88 23       	and	r24, r24
     fe6:	dc f7       	brge	.-10     	; 0xfde <SPI_Transmit+0x14>
}
     fe8:	0f 90       	pop	r0
     fea:	cf 91       	pop	r28
     fec:	df 91       	pop	r29
     fee:	08 95       	ret

00000ff0 <EXI_Set_CallBack>:
/* void (*LocalPtr)(void) is a local pointer to function */
/* The name of function without () is an address to that function */
/* The function he passes must take void and return void also */
/************************************************************************/

void EXI_Set_CallBack(EX_Interrupt_Source_type interrupt, void (*LocalPtr)(void)){
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	00 d0       	rcall	.+0      	; 0xff6 <EXI_Set_CallBack+0x6>
     ff6:	00 d0       	rcall	.+0      	; 0xff8 <EXI_Set_CallBack+0x8>
     ff8:	0f 92       	push	r0
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
     ffe:	89 83       	std	Y+1, r24	; 0x01
    1000:	7b 83       	std	Y+3, r23	; 0x03
    1002:	6a 83       	std	Y+2, r22	; 0x02
	switch(interrupt){
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	3d 83       	std	Y+5, r19	; 0x05
    100c:	2c 83       	std	Y+4, r18	; 0x04
    100e:	8c 81       	ldd	r24, Y+4	; 0x04
    1010:	9d 81       	ldd	r25, Y+5	; 0x05
    1012:	81 30       	cpi	r24, 0x01	; 1
    1014:	91 05       	cpc	r25, r1
    1016:	81 f0       	breq	.+32     	; 0x1038 <EXI_Set_CallBack+0x48>
    1018:	2c 81       	ldd	r18, Y+4	; 0x04
    101a:	3d 81       	ldd	r19, Y+5	; 0x05
    101c:	22 30       	cpi	r18, 0x02	; 2
    101e:	31 05       	cpc	r19, r1
    1020:	91 f0       	breq	.+36     	; 0x1046 <EXI_Set_CallBack+0x56>
    1022:	8c 81       	ldd	r24, Y+4	; 0x04
    1024:	9d 81       	ldd	r25, Y+5	; 0x05
    1026:	00 97       	sbiw	r24, 0x00	; 0
    1028:	a1 f4       	brne	.+40     	; 0x1052 <EXI_Set_CallBack+0x62>
	case EX_INT0:
		INT0_Fptr = LocalPtr;
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	9b 81       	ldd	r25, Y+3	; 0x03
    102e:	90 93 cd 01 	sts	0x01CD, r25
    1032:	80 93 cc 01 	sts	0x01CC, r24
    1036:	0d c0       	rjmp	.+26     	; 0x1052 <EXI_Set_CallBack+0x62>
		break;
	case EX_INT1:
		INT1_Fptr = LocalPtr;
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	9b 81       	ldd	r25, Y+3	; 0x03
    103c:	90 93 cf 01 	sts	0x01CF, r25
    1040:	80 93 ce 01 	sts	0x01CE, r24
    1044:	06 c0       	rjmp	.+12     	; 0x1052 <EXI_Set_CallBack+0x62>
		break;
	case EX_INT2:
		INT2_Fptr = LocalPtr;
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	9b 81       	ldd	r25, Y+3	; 0x03
    104a:	90 93 d1 01 	sts	0x01D1, r25
    104e:	80 93 d0 01 	sts	0x01D0, r24
		break;
	}
}
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	cf 91       	pop	r28
    105e:	df 91       	pop	r29
    1060:	08 95       	ret

00001062 <EXI_ENABLE>:
/************************************************************************/
/*  Enabling and disabling the interrupt                                */
/************************************************************************/


void EXI_ENABLE(EX_Interrupt_Source_type interrupt){
    1062:	df 93       	push	r29
    1064:	cf 93       	push	r28
    1066:	00 d0       	rcall	.+0      	; 0x1068 <EXI_ENABLE+0x6>
    1068:	0f 92       	push	r0
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
    106e:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt){
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	3b 83       	std	Y+3, r19	; 0x03
    1078:	2a 83       	std	Y+2, r18	; 0x02
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	9b 81       	ldd	r25, Y+3	; 0x03
    107e:	81 30       	cpi	r24, 0x01	; 1
    1080:	91 05       	cpc	r25, r1
    1082:	89 f0       	breq	.+34     	; 0x10a6 <EXI_ENABLE+0x44>
    1084:	2a 81       	ldd	r18, Y+2	; 0x02
    1086:	3b 81       	ldd	r19, Y+3	; 0x03
    1088:	22 30       	cpi	r18, 0x02	; 2
    108a:	31 05       	cpc	r19, r1
    108c:	a1 f0       	breq	.+40     	; 0x10b6 <EXI_ENABLE+0x54>
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	9b 81       	ldd	r25, Y+3	; 0x03
    1092:	00 97       	sbiw	r24, 0x00	; 0
    1094:	b9 f4       	brne	.+46     	; 0x10c4 <EXI_ENABLE+0x62>
	case EX_INT0:
		SET_BIT(GICR,INT0);
    1096:	ab e5       	ldi	r26, 0x5B	; 91
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	eb e5       	ldi	r30, 0x5B	; 91
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	80 64       	ori	r24, 0x40	; 64
    10a2:	8c 93       	st	X, r24
    10a4:	0f c0       	rjmp	.+30     	; 0x10c4 <EXI_ENABLE+0x62>
		break;
	case EX_INT1:
		SET_BIT(GICR,INT1);
    10a6:	ab e5       	ldi	r26, 0x5B	; 91
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	eb e5       	ldi	r30, 0x5B	; 91
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	80 68       	ori	r24, 0x80	; 128
    10b2:	8c 93       	st	X, r24
    10b4:	07 c0       	rjmp	.+14     	; 0x10c4 <EXI_ENABLE+0x62>
		break;
	case EX_INT2:
		SET_BIT(GICR,INT2);
    10b6:	ab e5       	ldi	r26, 0x5B	; 91
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	eb e5       	ldi	r30, 0x5B	; 91
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	80 62       	ori	r24, 0x20	; 32
    10c2:	8c 93       	st	X, r24
		break;
	}
}
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	cf 91       	pop	r28
    10cc:	df 91       	pop	r29
    10ce:	08 95       	ret

000010d0 <EXI_DISABLE>:


void EXI_DISABLE(EX_Interrupt_Source_type interrupt){
    10d0:	df 93       	push	r29
    10d2:	cf 93       	push	r28
    10d4:	00 d0       	rcall	.+0      	; 0x10d6 <EXI_DISABLE+0x6>
    10d6:	0f 92       	push	r0
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt){
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	3b 83       	std	Y+3, r19	; 0x03
    10e6:	2a 83       	std	Y+2, r18	; 0x02
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	9b 81       	ldd	r25, Y+3	; 0x03
    10ec:	81 30       	cpi	r24, 0x01	; 1
    10ee:	91 05       	cpc	r25, r1
    10f0:	89 f0       	breq	.+34     	; 0x1114 <EXI_DISABLE+0x44>
    10f2:	2a 81       	ldd	r18, Y+2	; 0x02
    10f4:	3b 81       	ldd	r19, Y+3	; 0x03
    10f6:	22 30       	cpi	r18, 0x02	; 2
    10f8:	31 05       	cpc	r19, r1
    10fa:	a1 f0       	breq	.+40     	; 0x1124 <EXI_DISABLE+0x54>
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1100:	00 97       	sbiw	r24, 0x00	; 0
    1102:	b9 f4       	brne	.+46     	; 0x1132 <EXI_DISABLE+0x62>
	case EX_INT0:
		CLR_BIT(GICR,INT0);
    1104:	ab e5       	ldi	r26, 0x5B	; 91
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	eb e5       	ldi	r30, 0x5B	; 91
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	8f 7b       	andi	r24, 0xBF	; 191
    1110:	8c 93       	st	X, r24
    1112:	0f c0       	rjmp	.+30     	; 0x1132 <EXI_DISABLE+0x62>
		break;
	case EX_INT1:
		CLR_BIT(GICR,INT1);
    1114:	ab e5       	ldi	r26, 0x5B	; 91
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	eb e5       	ldi	r30, 0x5B	; 91
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	8f 77       	andi	r24, 0x7F	; 127
    1120:	8c 93       	st	X, r24
    1122:	07 c0       	rjmp	.+14     	; 0x1132 <EXI_DISABLE+0x62>
		break;
	case EX_INT2:
		CLR_BIT(GICR,INT2);
    1124:	ab e5       	ldi	r26, 0x5B	; 91
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	eb e5       	ldi	r30, 0x5B	; 91
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	8f 7d       	andi	r24, 0xDF	; 223
    1130:	8c 93       	st	X, r24
		break;
	}
}
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	08 95       	ret

0000113e <EXI_TriggerEdge>:

void EXI_TriggerEdge(EX_Interrupt_Source_type interrupt,Trigger_Edge_type edge){
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    1146:	2a 97       	sbiw	r28, 0x0a	; 10
    1148:	0f b6       	in	r0, 0x3f	; 63
    114a:	f8 94       	cli
    114c:	de bf       	out	0x3e, r29	; 62
    114e:	0f be       	out	0x3f, r0	; 63
    1150:	cd bf       	out	0x3d, r28	; 61
    1152:	89 83       	std	Y+1, r24	; 0x01
    1154:	6a 83       	std	Y+2, r22	; 0x02
	switch(interrupt){
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	3a 87       	std	Y+10, r19	; 0x0a
    115e:	29 87       	std	Y+9, r18	; 0x09
    1160:	89 85       	ldd	r24, Y+9	; 0x09
    1162:	9a 85       	ldd	r25, Y+10	; 0x0a
    1164:	81 30       	cpi	r24, 0x01	; 1
    1166:	91 05       	cpc	r25, r1
    1168:	09 f4       	brne	.+2      	; 0x116c <EXI_TriggerEdge+0x2e>
    116a:	66 c0       	rjmp	.+204    	; 0x1238 <EXI_TriggerEdge+0xfa>
    116c:	29 85       	ldd	r18, Y+9	; 0x09
    116e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1170:	22 30       	cpi	r18, 0x02	; 2
    1172:	31 05       	cpc	r19, r1
    1174:	09 f4       	brne	.+2      	; 0x1178 <EXI_TriggerEdge+0x3a>
    1176:	bb c0       	rjmp	.+374    	; 0x12ee <EXI_TriggerEdge+0x1b0>
    1178:	89 85       	ldd	r24, Y+9	; 0x09
    117a:	9a 85       	ldd	r25, Y+10	; 0x0a
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	09 f0       	breq	.+2      	; 0x1182 <EXI_TriggerEdge+0x44>
    1180:	dd c0       	rjmp	.+442    	; 0x133c <EXI_TriggerEdge+0x1fe>
	case EX_INT0:
		switch(edge){
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	38 87       	std	Y+8, r19	; 0x08
    118a:	2f 83       	std	Y+7, r18	; 0x07
    118c:	8f 81       	ldd	r24, Y+7	; 0x07
    118e:	98 85       	ldd	r25, Y+8	; 0x08
    1190:	81 30       	cpi	r24, 0x01	; 1
    1192:	91 05       	cpc	r25, r1
    1194:	21 f1       	breq	.+72     	; 0x11de <EXI_TriggerEdge+0xa0>
    1196:	2f 81       	ldd	r18, Y+7	; 0x07
    1198:	38 85       	ldd	r19, Y+8	; 0x08
    119a:	22 30       	cpi	r18, 0x02	; 2
    119c:	31 05       	cpc	r19, r1
    119e:	2c f4       	brge	.+10     	; 0x11aa <EXI_TriggerEdge+0x6c>
    11a0:	8f 81       	ldd	r24, Y+7	; 0x07
    11a2:	98 85       	ldd	r25, Y+8	; 0x08
    11a4:	00 97       	sbiw	r24, 0x00	; 0
    11a6:	61 f0       	breq	.+24     	; 0x11c0 <EXI_TriggerEdge+0x82>
    11a8:	c9 c0       	rjmp	.+402    	; 0x133c <EXI_TriggerEdge+0x1fe>
    11aa:	2f 81       	ldd	r18, Y+7	; 0x07
    11ac:	38 85       	ldd	r19, Y+8	; 0x08
    11ae:	22 30       	cpi	r18, 0x02	; 2
    11b0:	31 05       	cpc	r19, r1
    11b2:	21 f1       	breq	.+72     	; 0x11fc <EXI_TriggerEdge+0xbe>
    11b4:	8f 81       	ldd	r24, Y+7	; 0x07
    11b6:	98 85       	ldd	r25, Y+8	; 0x08
    11b8:	83 30       	cpi	r24, 0x03	; 3
    11ba:	91 05       	cpc	r25, r1
    11bc:	71 f1       	breq	.+92     	; 0x121a <EXI_TriggerEdge+0xdc>
    11be:	be c0       	rjmp	.+380    	; 0x133c <EXI_TriggerEdge+0x1fe>
		case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC00);
    11c0:	a5 e5       	ldi	r26, 0x55	; 85
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e5 e5       	ldi	r30, 0x55	; 85
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	8e 7f       	andi	r24, 0xFE	; 254
    11cc:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
    11ce:	a5 e5       	ldi	r26, 0x55	; 85
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	e5 e5       	ldi	r30, 0x55	; 85
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	8d 7f       	andi	r24, 0xFD	; 253
    11da:	8c 93       	st	X, r24
    11dc:	af c0       	rjmp	.+350    	; 0x133c <EXI_TriggerEdge+0x1fe>
			break;
		case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC00);
    11de:	a5 e5       	ldi	r26, 0x55	; 85
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e5 e5       	ldi	r30, 0x55	; 85
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	81 60       	ori	r24, 0x01	; 1
    11ea:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
    11ec:	a5 e5       	ldi	r26, 0x55	; 85
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e5 e5       	ldi	r30, 0x55	; 85
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	8d 7f       	andi	r24, 0xFD	; 253
    11f8:	8c 93       	st	X, r24
    11fa:	a0 c0       	rjmp	.+320    	; 0x133c <EXI_TriggerEdge+0x1fe>
			break;
		case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC00);
    11fc:	a5 e5       	ldi	r26, 0x55	; 85
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e5 e5       	ldi	r30, 0x55	; 85
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	8e 7f       	andi	r24, 0xFE	; 254
    1208:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    120a:	a5 e5       	ldi	r26, 0x55	; 85
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e5 e5       	ldi	r30, 0x55	; 85
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	82 60       	ori	r24, 0x02	; 2
    1216:	8c 93       	st	X, r24
    1218:	91 c0       	rjmp	.+290    	; 0x133c <EXI_TriggerEdge+0x1fe>
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
    121a:	a5 e5       	ldi	r26, 0x55	; 85
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e5 e5       	ldi	r30, 0x55	; 85
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	81 60       	ori	r24, 0x01	; 1
    1226:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    1228:	a5 e5       	ldi	r26, 0x55	; 85
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e5 e5       	ldi	r30, 0x55	; 85
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	82 60       	ori	r24, 0x02	; 2
    1234:	8c 93       	st	X, r24
    1236:	82 c0       	rjmp	.+260    	; 0x133c <EXI_TriggerEdge+0x1fe>
			break;
		}
		break;
		case EX_INT1:
			switch(edge){
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	3e 83       	std	Y+6, r19	; 0x06
    1240:	2d 83       	std	Y+5, r18	; 0x05
    1242:	8d 81       	ldd	r24, Y+5	; 0x05
    1244:	9e 81       	ldd	r25, Y+6	; 0x06
    1246:	81 30       	cpi	r24, 0x01	; 1
    1248:	91 05       	cpc	r25, r1
    124a:	21 f1       	breq	.+72     	; 0x1294 <EXI_TriggerEdge+0x156>
    124c:	2d 81       	ldd	r18, Y+5	; 0x05
    124e:	3e 81       	ldd	r19, Y+6	; 0x06
    1250:	22 30       	cpi	r18, 0x02	; 2
    1252:	31 05       	cpc	r19, r1
    1254:	2c f4       	brge	.+10     	; 0x1260 <EXI_TriggerEdge+0x122>
    1256:	8d 81       	ldd	r24, Y+5	; 0x05
    1258:	9e 81       	ldd	r25, Y+6	; 0x06
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	61 f0       	breq	.+24     	; 0x1276 <EXI_TriggerEdge+0x138>
    125e:	6e c0       	rjmp	.+220    	; 0x133c <EXI_TriggerEdge+0x1fe>
    1260:	2d 81       	ldd	r18, Y+5	; 0x05
    1262:	3e 81       	ldd	r19, Y+6	; 0x06
    1264:	22 30       	cpi	r18, 0x02	; 2
    1266:	31 05       	cpc	r19, r1
    1268:	21 f1       	breq	.+72     	; 0x12b2 <EXI_TriggerEdge+0x174>
    126a:	8d 81       	ldd	r24, Y+5	; 0x05
    126c:	9e 81       	ldd	r25, Y+6	; 0x06
    126e:	83 30       	cpi	r24, 0x03	; 3
    1270:	91 05       	cpc	r25, r1
    1272:	71 f1       	breq	.+92     	; 0x12d0 <EXI_TriggerEdge+0x192>
    1274:	63 c0       	rjmp	.+198    	; 0x133c <EXI_TriggerEdge+0x1fe>
			case LOW_LEVEL:
				CLR_BIT(MCUCR,ISC10);
    1276:	a5 e5       	ldi	r26, 0x55	; 85
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e5 e5       	ldi	r30, 0x55	; 85
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	8b 7f       	andi	r24, 0xFB	; 251
    1282:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC11);
    1284:	a5 e5       	ldi	r26, 0x55	; 85
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	e5 e5       	ldi	r30, 0x55	; 85
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	87 7f       	andi	r24, 0xF7	; 247
    1290:	8c 93       	st	X, r24
    1292:	54 c0       	rjmp	.+168    	; 0x133c <EXI_TriggerEdge+0x1fe>
				break;
			case ANY_LOGIC_CHANGE:
				SET_BIT(MCUCR,ISC10);
    1294:	a5 e5       	ldi	r26, 0x55	; 85
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e5 e5       	ldi	r30, 0x55	; 85
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	84 60       	ori	r24, 0x04	; 4
    12a0:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC11);
    12a2:	a5 e5       	ldi	r26, 0x55	; 85
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e5 e5       	ldi	r30, 0x55	; 85
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	87 7f       	andi	r24, 0xF7	; 247
    12ae:	8c 93       	st	X, r24
    12b0:	45 c0       	rjmp	.+138    	; 0x133c <EXI_TriggerEdge+0x1fe>
				break;
			case FALLING_EDGE:
				CLR_BIT(MCUCR,ISC10);
    12b2:	a5 e5       	ldi	r26, 0x55	; 85
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e5 e5       	ldi	r30, 0x55	; 85
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	8b 7f       	andi	r24, 0xFB	; 251
    12be:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
    12c0:	a5 e5       	ldi	r26, 0x55	; 85
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e5 e5       	ldi	r30, 0x55	; 85
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	88 60       	ori	r24, 0x08	; 8
    12cc:	8c 93       	st	X, r24
    12ce:	36 c0       	rjmp	.+108    	; 0x133c <EXI_TriggerEdge+0x1fe>
				break;
			case RISING_EDGE:
				SET_BIT(MCUCR,ISC10);
    12d0:	a5 e5       	ldi	r26, 0x55	; 85
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e5 e5       	ldi	r30, 0x55	; 85
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	84 60       	ori	r24, 0x04	; 4
    12dc:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
    12de:	a5 e5       	ldi	r26, 0x55	; 85
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e5 e5       	ldi	r30, 0x55	; 85
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	88 60       	ori	r24, 0x08	; 8
    12ea:	8c 93       	st	X, r24
    12ec:	27 c0       	rjmp	.+78     	; 0x133c <EXI_TriggerEdge+0x1fe>
				break;
			}
			break;
			case EX_INT2:
				switch(edge){
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	3c 83       	std	Y+4, r19	; 0x04
    12f6:	2b 83       	std	Y+3, r18	; 0x03
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	9c 81       	ldd	r25, Y+4	; 0x04
    12fc:	82 30       	cpi	r24, 0x02	; 2
    12fe:	91 05       	cpc	r25, r1
    1300:	31 f0       	breq	.+12     	; 0x130e <EXI_TriggerEdge+0x1d0>
    1302:	2b 81       	ldd	r18, Y+3	; 0x03
    1304:	3c 81       	ldd	r19, Y+4	; 0x04
    1306:	23 30       	cpi	r18, 0x03	; 3
    1308:	31 05       	cpc	r19, r1
    130a:	49 f0       	breq	.+18     	; 0x131e <EXI_TriggerEdge+0x1e0>
    130c:	10 c0       	rjmp	.+32     	; 0x132e <EXI_TriggerEdge+0x1f0>
				case FALLING_EDGE:
					CLR_BIT(MCUCSR,ISC2);
    130e:	a4 e5       	ldi	r26, 0x54	; 84
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e4 e5       	ldi	r30, 0x54	; 84
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	8f 7b       	andi	r24, 0xBF	; 191
    131a:	8c 93       	st	X, r24
    131c:	0f c0       	rjmp	.+30     	; 0x133c <EXI_TriggerEdge+0x1fe>
					break;
				case RISING_EDGE:
					SET_BIT(MCUCSR,ISC2);
    131e:	a4 e5       	ldi	r26, 0x54	; 84
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	e4 e5       	ldi	r30, 0x54	; 84
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	80 64       	ori	r24, 0x40	; 64
    132a:	8c 93       	st	X, r24
    132c:	07 c0       	rjmp	.+14     	; 0x133c <EXI_TriggerEdge+0x1fe>
					break;
				default:   // Because we haven't handled all cases just cuz of data sheet
					CLR_BIT(MCUCSR,ISC2);
    132e:	a4 e5       	ldi	r26, 0x54	; 84
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	e4 e5       	ldi	r30, 0x54	; 84
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	8f 7b       	andi	r24, 0xBF	; 191
    133a:	8c 93       	st	X, r24
				}
				break;
	}
}
    133c:	2a 96       	adiw	r28, 0x0a	; 10
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	f8 94       	cli
    1342:	de bf       	out	0x3e, r29	; 62
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	cd bf       	out	0x3d, r28	; 61
    1348:	cf 91       	pop	r28
    134a:	df 91       	pop	r29
    134c:	08 95       	ret

0000134e <__vector_1>:
/*                     ISR                                              */
/************************************************************************/

/* What if the user forgot to send a function to SetCallBack, We made an initialization with NULLPTR, So we can't call a NULLPTR, it will give undefined behavior  */

ISR(INT0_vect){
    134e:	1f 92       	push	r1
    1350:	0f 92       	push	r0
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	0f 92       	push	r0
    1356:	11 24       	eor	r1, r1
    1358:	2f 93       	push	r18
    135a:	3f 93       	push	r19
    135c:	4f 93       	push	r20
    135e:	5f 93       	push	r21
    1360:	6f 93       	push	r22
    1362:	7f 93       	push	r23
    1364:	8f 93       	push	r24
    1366:	9f 93       	push	r25
    1368:	af 93       	push	r26
    136a:	bf 93       	push	r27
    136c:	ef 93       	push	r30
    136e:	ff 93       	push	r31
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
	if(INT0_Fptr != NULLPTR){
    1378:	80 91 cc 01 	lds	r24, 0x01CC
    137c:	90 91 cd 01 	lds	r25, 0x01CD
    1380:	00 97       	sbiw	r24, 0x00	; 0
    1382:	29 f0       	breq	.+10     	; 0x138e <__vector_1+0x40>
		INT0_Fptr();
    1384:	e0 91 cc 01 	lds	r30, 0x01CC
    1388:	f0 91 cd 01 	lds	r31, 0x01CD
    138c:	09 95       	icall
	}
}
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	ff 91       	pop	r31
    1394:	ef 91       	pop	r30
    1396:	bf 91       	pop	r27
    1398:	af 91       	pop	r26
    139a:	9f 91       	pop	r25
    139c:	8f 91       	pop	r24
    139e:	7f 91       	pop	r23
    13a0:	6f 91       	pop	r22
    13a2:	5f 91       	pop	r21
    13a4:	4f 91       	pop	r20
    13a6:	3f 91       	pop	r19
    13a8:	2f 91       	pop	r18
    13aa:	0f 90       	pop	r0
    13ac:	0f be       	out	0x3f, r0	; 63
    13ae:	0f 90       	pop	r0
    13b0:	1f 90       	pop	r1
    13b2:	18 95       	reti

000013b4 <__vector_2>:

ISR(INT1_vect){
    13b4:	1f 92       	push	r1
    13b6:	0f 92       	push	r0
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	0f 92       	push	r0
    13bc:	11 24       	eor	r1, r1
    13be:	2f 93       	push	r18
    13c0:	3f 93       	push	r19
    13c2:	4f 93       	push	r20
    13c4:	5f 93       	push	r21
    13c6:	6f 93       	push	r22
    13c8:	7f 93       	push	r23
    13ca:	8f 93       	push	r24
    13cc:	9f 93       	push	r25
    13ce:	af 93       	push	r26
    13d0:	bf 93       	push	r27
    13d2:	ef 93       	push	r30
    13d4:	ff 93       	push	r31
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
	if(INT1_Fptr != NULLPTR){
    13de:	80 91 ce 01 	lds	r24, 0x01CE
    13e2:	90 91 cf 01 	lds	r25, 0x01CF
    13e6:	00 97       	sbiw	r24, 0x00	; 0
    13e8:	29 f0       	breq	.+10     	; 0x13f4 <__vector_2+0x40>
		INT1_Fptr();
    13ea:	e0 91 ce 01 	lds	r30, 0x01CE
    13ee:	f0 91 cf 01 	lds	r31, 0x01CF
    13f2:	09 95       	icall
	}
}
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	ff 91       	pop	r31
    13fa:	ef 91       	pop	r30
    13fc:	bf 91       	pop	r27
    13fe:	af 91       	pop	r26
    1400:	9f 91       	pop	r25
    1402:	8f 91       	pop	r24
    1404:	7f 91       	pop	r23
    1406:	6f 91       	pop	r22
    1408:	5f 91       	pop	r21
    140a:	4f 91       	pop	r20
    140c:	3f 91       	pop	r19
    140e:	2f 91       	pop	r18
    1410:	0f 90       	pop	r0
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	0f 90       	pop	r0
    1416:	1f 90       	pop	r1
    1418:	18 95       	reti

0000141a <__vector_3>:

ISR(INT2_vect){
    141a:	1f 92       	push	r1
    141c:	0f 92       	push	r0
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	0f 92       	push	r0
    1422:	11 24       	eor	r1, r1
    1424:	2f 93       	push	r18
    1426:	3f 93       	push	r19
    1428:	4f 93       	push	r20
    142a:	5f 93       	push	r21
    142c:	6f 93       	push	r22
    142e:	7f 93       	push	r23
    1430:	8f 93       	push	r24
    1432:	9f 93       	push	r25
    1434:	af 93       	push	r26
    1436:	bf 93       	push	r27
    1438:	ef 93       	push	r30
    143a:	ff 93       	push	r31
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
	if(INT2_Fptr != NULLPTR){
    1444:	80 91 d0 01 	lds	r24, 0x01D0
    1448:	90 91 d1 01 	lds	r25, 0x01D1
    144c:	00 97       	sbiw	r24, 0x00	; 0
    144e:	29 f0       	breq	.+10     	; 0x145a <__vector_3+0x40>
		INT2_Fptr();
    1450:	e0 91 d0 01 	lds	r30, 0x01D0
    1454:	f0 91 d1 01 	lds	r31, 0x01D1
    1458:	09 95       	icall
	}
}
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	ff 91       	pop	r31
    1460:	ef 91       	pop	r30
    1462:	bf 91       	pop	r27
    1464:	af 91       	pop	r26
    1466:	9f 91       	pop	r25
    1468:	8f 91       	pop	r24
    146a:	7f 91       	pop	r23
    146c:	6f 91       	pop	r22
    146e:	5f 91       	pop	r21
    1470:	4f 91       	pop	r20
    1472:	3f 91       	pop	r19
    1474:	2f 91       	pop	r18
    1476:	0f 90       	pop	r0
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	0f 90       	pop	r0
    147c:	1f 90       	pop	r1
    147e:	18 95       	reti

00001480 <DIO_ES_tSetPinDirection>:
 * DIO_ES_tSetPinDirection is used to set pin direction
 * ( INPUT or OUTPUT )
 */

ES_t DIO_ES_tSetPinDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Dir_Type copy_u8_PinDirection)
{
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	00 d0       	rcall	.+0      	; 0x1486 <DIO_ES_tSetPinDirection+0x6>
    1486:	00 d0       	rcall	.+0      	; 0x1488 <DIO_ES_tSetPinDirection+0x8>
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	89 83       	std	Y+1, r24	; 0x01
    148e:	6a 83       	std	Y+2, r22	; 0x02
    1490:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	88 30       	cpi	r24, 0x08	; 8
    1496:	18 f0       	brcs	.+6      	; 0x149e <DIO_ES_tSetPinDirection+0x1e>
		return ES_NOT_OK;
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	8c 83       	std	Y+4, r24	; 0x04
    149c:	d8 c0       	rjmp	.+432    	; 0x164e <DIO_ES_tSetPinDirection+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	88 23       	and	r24, r24
    14a2:	91 f5       	brne	.+100    	; 0x1508 <DIO_ES_tSetPinDirection+0x88>
		if(copy_u8_PinDirection == OUTPUT){
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	81 30       	cpi	r24, 0x01	; 1
    14a8:	a1 f4       	brne	.+40     	; 0x14d2 <DIO_ES_tSetPinDirection+0x52>
			SET_BIT(DDRA,copy_u8_PinId);
    14aa:	aa e3       	ldi	r26, 0x3A	; 58
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	ea e3       	ldi	r30, 0x3A	; 58
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	48 2f       	mov	r20, r24
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	02 2e       	mov	r0, r18
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <DIO_ES_tSetPinDirection+0x48>
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	0a 94       	dec	r0
    14ca:	e2 f7       	brpl	.-8      	; 0x14c4 <DIO_ES_tSetPinDirection+0x44>
    14cc:	84 2b       	or	r24, r20
    14ce:	8c 93       	st	X, r24
    14d0:	bd c0       	rjmp	.+378    	; 0x164c <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	88 23       	and	r24, r24
    14d6:	a9 f4       	brne	.+42     	; 0x1502 <DIO_ES_tSetPinDirection+0x82>
			CLR_BIT(DDRA,copy_u8_PinId);
    14d8:	aa e3       	ldi	r26, 0x3A	; 58
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	ea e3       	ldi	r30, 0x3A	; 58
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	48 2f       	mov	r20, r24
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	02 2e       	mov	r0, r18
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <DIO_ES_tSetPinDirection+0x76>
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	0a 94       	dec	r0
    14f8:	e2 f7       	brpl	.-8      	; 0x14f2 <DIO_ES_tSetPinDirection+0x72>
    14fa:	80 95       	com	r24
    14fc:	84 23       	and	r24, r20
    14fe:	8c 93       	st	X, r24
    1500:	a5 c0       	rjmp	.+330    	; 0x164c <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	8c 83       	std	Y+4, r24	; 0x04
    1506:	a3 c0       	rjmp	.+326    	; 0x164e <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	81 30       	cpi	r24, 0x01	; 1
    150c:	91 f5       	brne	.+100    	; 0x1572 <DIO_ES_tSetPinDirection+0xf2>
		if(copy_u8_PinDirection == OUTPUT){
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	81 30       	cpi	r24, 0x01	; 1
    1512:	a1 f4       	brne	.+40     	; 0x153c <DIO_ES_tSetPinDirection+0xbc>
			SET_BIT(DDRB,copy_u8_PinId);
    1514:	a7 e3       	ldi	r26, 0x37	; 55
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e7 e3       	ldi	r30, 0x37	; 55
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	48 2f       	mov	r20, r24
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	02 2e       	mov	r0, r18
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <DIO_ES_tSetPinDirection+0xb2>
    152e:	88 0f       	add	r24, r24
    1530:	99 1f       	adc	r25, r25
    1532:	0a 94       	dec	r0
    1534:	e2 f7       	brpl	.-8      	; 0x152e <DIO_ES_tSetPinDirection+0xae>
    1536:	84 2b       	or	r24, r20
    1538:	8c 93       	st	X, r24
    153a:	88 c0       	rjmp	.+272    	; 0x164c <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	88 23       	and	r24, r24
    1540:	a9 f4       	brne	.+42     	; 0x156c <DIO_ES_tSetPinDirection+0xec>
			CLR_BIT(DDRB,copy_u8_PinId);
    1542:	a7 e3       	ldi	r26, 0x37	; 55
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e7 e3       	ldi	r30, 0x37	; 55
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	48 2f       	mov	r20, r24
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	02 2e       	mov	r0, r18
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <DIO_ES_tSetPinDirection+0xe0>
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	0a 94       	dec	r0
    1562:	e2 f7       	brpl	.-8      	; 0x155c <DIO_ES_tSetPinDirection+0xdc>
    1564:	80 95       	com	r24
    1566:	84 23       	and	r24, r20
    1568:	8c 93       	st	X, r24
    156a:	70 c0       	rjmp	.+224    	; 0x164c <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	8c 83       	std	Y+4, r24	; 0x04
    1570:	6e c0       	rjmp	.+220    	; 0x164e <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	82 30       	cpi	r24, 0x02	; 2
    1576:	91 f5       	brne	.+100    	; 0x15dc <DIO_ES_tSetPinDirection+0x15c>
		if(copy_u8_PinDirection == OUTPUT){
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	81 30       	cpi	r24, 0x01	; 1
    157c:	a1 f4       	brne	.+40     	; 0x15a6 <DIO_ES_tSetPinDirection+0x126>
			SET_BIT(DDRC,copy_u8_PinId);
    157e:	a4 e3       	ldi	r26, 0x34	; 52
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e4 e3       	ldi	r30, 0x34	; 52
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	48 2f       	mov	r20, r24
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	02 2e       	mov	r0, r18
    1596:	02 c0       	rjmp	.+4      	; 0x159c <DIO_ES_tSetPinDirection+0x11c>
    1598:	88 0f       	add	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	0a 94       	dec	r0
    159e:	e2 f7       	brpl	.-8      	; 0x1598 <DIO_ES_tSetPinDirection+0x118>
    15a0:	84 2b       	or	r24, r20
    15a2:	8c 93       	st	X, r24
    15a4:	53 c0       	rjmp	.+166    	; 0x164c <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	88 23       	and	r24, r24
    15aa:	a9 f4       	brne	.+42     	; 0x15d6 <DIO_ES_tSetPinDirection+0x156>
			CLR_BIT(DDRC,copy_u8_PinId);
    15ac:	a4 e3       	ldi	r26, 0x34	; 52
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e4 e3       	ldi	r30, 0x34	; 52
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	48 2f       	mov	r20, r24
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	02 2e       	mov	r0, r18
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <DIO_ES_tSetPinDirection+0x14a>
    15c6:	88 0f       	add	r24, r24
    15c8:	99 1f       	adc	r25, r25
    15ca:	0a 94       	dec	r0
    15cc:	e2 f7       	brpl	.-8      	; 0x15c6 <DIO_ES_tSetPinDirection+0x146>
    15ce:	80 95       	com	r24
    15d0:	84 23       	and	r24, r20
    15d2:	8c 93       	st	X, r24
    15d4:	3b c0       	rjmp	.+118    	; 0x164c <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	8c 83       	std	Y+4, r24	; 0x04
    15da:	39 c0       	rjmp	.+114    	; 0x164e <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	83 30       	cpi	r24, 0x03	; 3
    15e0:	91 f5       	brne	.+100    	; 0x1646 <DIO_ES_tSetPinDirection+0x1c6>
		if(copy_u8_PinDirection == OUTPUT){
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	81 30       	cpi	r24, 0x01	; 1
    15e6:	a1 f4       	brne	.+40     	; 0x1610 <DIO_ES_tSetPinDirection+0x190>
			SET_BIT(DDRD,copy_u8_PinId);
    15e8:	a1 e3       	ldi	r26, 0x31	; 49
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	e1 e3       	ldi	r30, 0x31	; 49
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	48 2f       	mov	r20, r24
    15f4:	8a 81       	ldd	r24, Y+2	; 0x02
    15f6:	28 2f       	mov	r18, r24
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	02 2e       	mov	r0, r18
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <DIO_ES_tSetPinDirection+0x186>
    1602:	88 0f       	add	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	0a 94       	dec	r0
    1608:	e2 f7       	brpl	.-8      	; 0x1602 <DIO_ES_tSetPinDirection+0x182>
    160a:	84 2b       	or	r24, r20
    160c:	8c 93       	st	X, r24
    160e:	1e c0       	rjmp	.+60     	; 0x164c <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	88 23       	and	r24, r24
    1614:	a9 f4       	brne	.+42     	; 0x1640 <DIO_ES_tSetPinDirection+0x1c0>
			CLR_BIT(DDRD,copy_u8_PinId);
    1616:	a1 e3       	ldi	r26, 0x31	; 49
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e1 e3       	ldi	r30, 0x31	; 49
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	48 2f       	mov	r20, r24
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	28 2f       	mov	r18, r24
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	02 2e       	mov	r0, r18
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <DIO_ES_tSetPinDirection+0x1b4>
    1630:	88 0f       	add	r24, r24
    1632:	99 1f       	adc	r25, r25
    1634:	0a 94       	dec	r0
    1636:	e2 f7       	brpl	.-8      	; 0x1630 <DIO_ES_tSetPinDirection+0x1b0>
    1638:	80 95       	com	r24
    163a:	84 23       	and	r24, r20
    163c:	8c 93       	st	X, r24
    163e:	06 c0       	rjmp	.+12     	; 0x164c <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	8c 83       	std	Y+4, r24	; 0x04
    1644:	04 c0       	rjmp	.+8      	; 0x164e <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else{
		return ES_NOT_OK;
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	8c 83       	std	Y+4, r24	; 0x04
    164a:	01 c0       	rjmp	.+2      	; 0x164e <DIO_ES_tSetPinDirection+0x1ce>
	}
	return ES_OK;
    164c:	1c 82       	std	Y+4, r1	; 0x04
    164e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <DIO_ES_tSetPinValue>:
 * DIO_ES_tSetPinValue is used to set pin value
 * ( LOW or HIGH )
 */

ES_t DIO_ES_tSetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type copy_u8_PinValue)
{
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	00 d0       	rcall	.+0      	; 0x1664 <DIO_ES_tSetPinValue+0x6>
    1664:	00 d0       	rcall	.+0      	; 0x1666 <DIO_ES_tSetPinValue+0x8>
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	89 83       	std	Y+1, r24	; 0x01
    166c:	6a 83       	std	Y+2, r22	; 0x02
    166e:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	88 30       	cpi	r24, 0x08	; 8
    1674:	18 f0       	brcs	.+6      	; 0x167c <DIO_ES_tSetPinValue+0x1e>
		return ES_NOT_OK;
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	8c 83       	std	Y+4, r24	; 0x04
    167a:	d8 c0       	rjmp	.+432    	; 0x182c <DIO_ES_tSetPinValue+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    167c:	89 81       	ldd	r24, Y+1	; 0x01
    167e:	88 23       	and	r24, r24
    1680:	91 f5       	brne	.+100    	; 0x16e6 <DIO_ES_tSetPinValue+0x88>
		if(copy_u8_PinValue == HIGH){
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	81 30       	cpi	r24, 0x01	; 1
    1686:	a1 f4       	brne	.+40     	; 0x16b0 <DIO_ES_tSetPinValue+0x52>
			SET_BIT(PORTA,copy_u8_PinId);
    1688:	ab e3       	ldi	r26, 0x3B	; 59
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	eb e3       	ldi	r30, 0x3B	; 59
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	48 2f       	mov	r20, r24
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	02 2e       	mov	r0, r18
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <DIO_ES_tSetPinValue+0x48>
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	0a 94       	dec	r0
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <DIO_ES_tSetPinValue+0x44>
    16aa:	84 2b       	or	r24, r20
    16ac:	8c 93       	st	X, r24
    16ae:	bd c0       	rjmp	.+378    	; 0x182a <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	88 23       	and	r24, r24
    16b4:	a9 f4       	brne	.+42     	; 0x16e0 <DIO_ES_tSetPinValue+0x82>
			CLR_BIT(PORTA,copy_u8_PinId);
    16b6:	ab e3       	ldi	r26, 0x3B	; 59
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	eb e3       	ldi	r30, 0x3B	; 59
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	48 2f       	mov	r20, r24
    16c2:	8a 81       	ldd	r24, Y+2	; 0x02
    16c4:	28 2f       	mov	r18, r24
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	02 2e       	mov	r0, r18
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <DIO_ES_tSetPinValue+0x76>
    16d0:	88 0f       	add	r24, r24
    16d2:	99 1f       	adc	r25, r25
    16d4:	0a 94       	dec	r0
    16d6:	e2 f7       	brpl	.-8      	; 0x16d0 <DIO_ES_tSetPinValue+0x72>
    16d8:	80 95       	com	r24
    16da:	84 23       	and	r24, r20
    16dc:	8c 93       	st	X, r24
    16de:	a5 c0       	rjmp	.+330    	; 0x182a <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	8c 83       	std	Y+4, r24	; 0x04
    16e4:	a3 c0       	rjmp	.+326    	; 0x182c <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	81 30       	cpi	r24, 0x01	; 1
    16ea:	91 f5       	brne	.+100    	; 0x1750 <DIO_ES_tSetPinValue+0xf2>
		if(copy_u8_PinValue == HIGH){
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	81 30       	cpi	r24, 0x01	; 1
    16f0:	a1 f4       	brne	.+40     	; 0x171a <DIO_ES_tSetPinValue+0xbc>
			SET_BIT(PORTB,copy_u8_PinId);
    16f2:	a8 e3       	ldi	r26, 0x38	; 56
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	e8 e3       	ldi	r30, 0x38	; 56
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	48 2f       	mov	r20, r24
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	28 2f       	mov	r18, r24
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	02 2e       	mov	r0, r18
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <DIO_ES_tSetPinValue+0xb2>
    170c:	88 0f       	add	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	0a 94       	dec	r0
    1712:	e2 f7       	brpl	.-8      	; 0x170c <DIO_ES_tSetPinValue+0xae>
    1714:	84 2b       	or	r24, r20
    1716:	8c 93       	st	X, r24
    1718:	88 c0       	rjmp	.+272    	; 0x182a <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	88 23       	and	r24, r24
    171e:	a9 f4       	brne	.+42     	; 0x174a <DIO_ES_tSetPinValue+0xec>
			CLR_BIT(PORTB,copy_u8_PinId);
    1720:	a8 e3       	ldi	r26, 0x38	; 56
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	e8 e3       	ldi	r30, 0x38	; 56
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	48 2f       	mov	r20, r24
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	28 2f       	mov	r18, r24
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	02 2e       	mov	r0, r18
    1738:	02 c0       	rjmp	.+4      	; 0x173e <DIO_ES_tSetPinValue+0xe0>
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	0a 94       	dec	r0
    1740:	e2 f7       	brpl	.-8      	; 0x173a <DIO_ES_tSetPinValue+0xdc>
    1742:	80 95       	com	r24
    1744:	84 23       	and	r24, r20
    1746:	8c 93       	st	X, r24
    1748:	70 c0       	rjmp	.+224    	; 0x182a <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	8c 83       	std	Y+4, r24	; 0x04
    174e:	6e c0       	rjmp	.+220    	; 0x182c <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    1750:	89 81       	ldd	r24, Y+1	; 0x01
    1752:	82 30       	cpi	r24, 0x02	; 2
    1754:	91 f5       	brne	.+100    	; 0x17ba <DIO_ES_tSetPinValue+0x15c>
		if(copy_u8_PinValue == HIGH){
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	81 30       	cpi	r24, 0x01	; 1
    175a:	a1 f4       	brne	.+40     	; 0x1784 <DIO_ES_tSetPinValue+0x126>
			SET_BIT(PORTC,copy_u8_PinId);
    175c:	a5 e3       	ldi	r26, 0x35	; 53
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e5 e3       	ldi	r30, 0x35	; 53
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	48 2f       	mov	r20, r24
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	28 2f       	mov	r18, r24
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	02 2e       	mov	r0, r18
    1774:	02 c0       	rjmp	.+4      	; 0x177a <DIO_ES_tSetPinValue+0x11c>
    1776:	88 0f       	add	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	0a 94       	dec	r0
    177c:	e2 f7       	brpl	.-8      	; 0x1776 <DIO_ES_tSetPinValue+0x118>
    177e:	84 2b       	or	r24, r20
    1780:	8c 93       	st	X, r24
    1782:	53 c0       	rjmp	.+166    	; 0x182a <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	88 23       	and	r24, r24
    1788:	a9 f4       	brne	.+42     	; 0x17b4 <DIO_ES_tSetPinValue+0x156>
			CLR_BIT(PORTC,copy_u8_PinId);
    178a:	a5 e3       	ldi	r26, 0x35	; 53
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e5 e3       	ldi	r30, 0x35	; 53
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	48 2f       	mov	r20, r24
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	02 2e       	mov	r0, r18
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <DIO_ES_tSetPinValue+0x14a>
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	0a 94       	dec	r0
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <DIO_ES_tSetPinValue+0x146>
    17ac:	80 95       	com	r24
    17ae:	84 23       	and	r24, r20
    17b0:	8c 93       	st	X, r24
    17b2:	3b c0       	rjmp	.+118    	; 0x182a <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	8c 83       	std	Y+4, r24	; 0x04
    17b8:	39 c0       	rjmp	.+114    	; 0x182c <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	83 30       	cpi	r24, 0x03	; 3
    17be:	91 f5       	brne	.+100    	; 0x1824 <DIO_ES_tSetPinValue+0x1c6>
		if(copy_u8_PinValue == HIGH){
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	81 30       	cpi	r24, 0x01	; 1
    17c4:	a1 f4       	brne	.+40     	; 0x17ee <DIO_ES_tSetPinValue+0x190>
			SET_BIT(PORTD,copy_u8_PinId);
    17c6:	a2 e3       	ldi	r26, 0x32	; 50
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e2 e3       	ldi	r30, 0x32	; 50
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	48 2f       	mov	r20, r24
    17d2:	8a 81       	ldd	r24, Y+2	; 0x02
    17d4:	28 2f       	mov	r18, r24
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	02 2e       	mov	r0, r18
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <DIO_ES_tSetPinValue+0x186>
    17e0:	88 0f       	add	r24, r24
    17e2:	99 1f       	adc	r25, r25
    17e4:	0a 94       	dec	r0
    17e6:	e2 f7       	brpl	.-8      	; 0x17e0 <DIO_ES_tSetPinValue+0x182>
    17e8:	84 2b       	or	r24, r20
    17ea:	8c 93       	st	X, r24
    17ec:	1e c0       	rjmp	.+60     	; 0x182a <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	88 23       	and	r24, r24
    17f2:	a9 f4       	brne	.+42     	; 0x181e <DIO_ES_tSetPinValue+0x1c0>
			CLR_BIT(PORTD,copy_u8_PinId);
    17f4:	a2 e3       	ldi	r26, 0x32	; 50
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e2 e3       	ldi	r30, 0x32	; 50
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	48 2f       	mov	r20, r24
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	28 2f       	mov	r18, r24
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	02 2e       	mov	r0, r18
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <DIO_ES_tSetPinValue+0x1b4>
    180e:	88 0f       	add	r24, r24
    1810:	99 1f       	adc	r25, r25
    1812:	0a 94       	dec	r0
    1814:	e2 f7       	brpl	.-8      	; 0x180e <DIO_ES_tSetPinValue+0x1b0>
    1816:	80 95       	com	r24
    1818:	84 23       	and	r24, r20
    181a:	8c 93       	st	X, r24
    181c:	06 c0       	rjmp	.+12     	; 0x182a <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	8c 83       	std	Y+4, r24	; 0x04
    1822:	04 c0       	rjmp	.+8      	; 0x182c <DIO_ES_tSetPinValue+0x1ce>
		}
	}else{
		return ES_NOT_OK;
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	8c 83       	std	Y+4, r24	; 0x04
    1828:	01 c0       	rjmp	.+2      	; 0x182c <DIO_ES_tSetPinValue+0x1ce>
	}
	return ES_OK;
    182a:	1c 82       	std	Y+4, r1	; 0x04
    182c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	0f 90       	pop	r0
    1836:	cf 91       	pop	r28
    1838:	df 91       	pop	r29
    183a:	08 95       	ret

0000183c <DIO_ES_tGetPinValue>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tGetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type* copy_pu8_PinValue)
{
    183c:	df 93       	push	r29
    183e:	cf 93       	push	r28
    1840:	00 d0       	rcall	.+0      	; 0x1842 <DIO_ES_tGetPinValue+0x6>
    1842:	00 d0       	rcall	.+0      	; 0x1844 <DIO_ES_tGetPinValue+0x8>
    1844:	0f 92       	push	r0
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
    184a:	89 83       	std	Y+1, r24	; 0x01
    184c:	6a 83       	std	Y+2, r22	; 0x02
    184e:	5c 83       	std	Y+4, r21	; 0x04
    1850:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    1852:	8a 81       	ldd	r24, Y+2	; 0x02
    1854:	88 30       	cpi	r24, 0x08	; 8
    1856:	18 f0       	brcs	.+6      	; 0x185e <DIO_ES_tGetPinValue+0x22>
		return ES_NOT_OK;
    1858:	41 e0       	ldi	r20, 0x01	; 1
    185a:	4d 83       	std	Y+5, r20	; 0x05
    185c:	60 c0       	rjmp	.+192    	; 0x191e <DIO_ES_tGetPinValue+0xe2>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	88 23       	and	r24, r24
    1862:	a1 f4       	brne	.+40     	; 0x188c <DIO_ES_tGetPinValue+0x50>
		*copy_pu8_PinValue = GET_BIT(PINA,copy_u8_PinId);
    1864:	e9 e3       	ldi	r30, 0x39	; 57
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	28 2f       	mov	r18, r24
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	8a 81       	ldd	r24, Y+2	; 0x02
    1870:	88 2f       	mov	r24, r24
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	a9 01       	movw	r20, r18
    1876:	02 c0       	rjmp	.+4      	; 0x187c <DIO_ES_tGetPinValue+0x40>
    1878:	55 95       	asr	r21
    187a:	47 95       	ror	r20
    187c:	8a 95       	dec	r24
    187e:	e2 f7       	brpl	.-8      	; 0x1878 <DIO_ES_tGetPinValue+0x3c>
    1880:	ca 01       	movw	r24, r20
    1882:	81 70       	andi	r24, 0x01	; 1
    1884:	eb 81       	ldd	r30, Y+3	; 0x03
    1886:	fc 81       	ldd	r31, Y+4	; 0x04
    1888:	80 83       	st	Z, r24
    188a:	48 c0       	rjmp	.+144    	; 0x191c <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    188c:	89 81       	ldd	r24, Y+1	; 0x01
    188e:	81 30       	cpi	r24, 0x01	; 1
    1890:	a1 f4       	brne	.+40     	; 0x18ba <DIO_ES_tGetPinValue+0x7e>
		*copy_pu8_PinValue = GET_BIT(PINB,copy_u8_PinId);
    1892:	e6 e3       	ldi	r30, 0x36	; 54
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	88 2f       	mov	r24, r24
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	a9 01       	movw	r20, r18
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <DIO_ES_tGetPinValue+0x6e>
    18a6:	55 95       	asr	r21
    18a8:	47 95       	ror	r20
    18aa:	8a 95       	dec	r24
    18ac:	e2 f7       	brpl	.-8      	; 0x18a6 <DIO_ES_tGetPinValue+0x6a>
    18ae:	ca 01       	movw	r24, r20
    18b0:	81 70       	andi	r24, 0x01	; 1
    18b2:	eb 81       	ldd	r30, Y+3	; 0x03
    18b4:	fc 81       	ldd	r31, Y+4	; 0x04
    18b6:	80 83       	st	Z, r24
    18b8:	31 c0       	rjmp	.+98     	; 0x191c <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    18ba:	89 81       	ldd	r24, Y+1	; 0x01
    18bc:	82 30       	cpi	r24, 0x02	; 2
    18be:	a1 f4       	brne	.+40     	; 0x18e8 <DIO_ES_tGetPinValue+0xac>
		*copy_pu8_PinValue = GET_BIT(PINC,copy_u8_PinId);
    18c0:	e3 e3       	ldi	r30, 0x33	; 51
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	28 2f       	mov	r18, r24
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	88 2f       	mov	r24, r24
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	a9 01       	movw	r20, r18
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <DIO_ES_tGetPinValue+0x9c>
    18d4:	55 95       	asr	r21
    18d6:	47 95       	ror	r20
    18d8:	8a 95       	dec	r24
    18da:	e2 f7       	brpl	.-8      	; 0x18d4 <DIO_ES_tGetPinValue+0x98>
    18dc:	ca 01       	movw	r24, r20
    18de:	81 70       	andi	r24, 0x01	; 1
    18e0:	eb 81       	ldd	r30, Y+3	; 0x03
    18e2:	fc 81       	ldd	r31, Y+4	; 0x04
    18e4:	80 83       	st	Z, r24
    18e6:	1a c0       	rjmp	.+52     	; 0x191c <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
    18ea:	83 30       	cpi	r24, 0x03	; 3
    18ec:	a1 f4       	brne	.+40     	; 0x1916 <DIO_ES_tGetPinValue+0xda>
		*copy_pu8_PinValue = GET_BIT(PIND,copy_u8_PinId);
    18ee:	e0 e3       	ldi	r30, 0x30	; 48
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	88 2f       	mov	r24, r24
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	a9 01       	movw	r20, r18
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <DIO_ES_tGetPinValue+0xca>
    1902:	55 95       	asr	r21
    1904:	47 95       	ror	r20
    1906:	8a 95       	dec	r24
    1908:	e2 f7       	brpl	.-8      	; 0x1902 <DIO_ES_tGetPinValue+0xc6>
    190a:	ca 01       	movw	r24, r20
    190c:	81 70       	andi	r24, 0x01	; 1
    190e:	eb 81       	ldd	r30, Y+3	; 0x03
    1910:	fc 81       	ldd	r31, Y+4	; 0x04
    1912:	80 83       	st	Z, r24
    1914:	03 c0       	rjmp	.+6      	; 0x191c <DIO_ES_tGetPinValue+0xe0>
	}else{
		return ES_NOT_OK;
    1916:	51 e0       	ldi	r21, 0x01	; 1
    1918:	5d 83       	std	Y+5, r21	; 0x05
    191a:	01 c0       	rjmp	.+2      	; 0x191e <DIO_ES_tGetPinValue+0xe2>
	}
	return ES_OK;
    191c:	1d 82       	std	Y+5, r1	; 0x05
    191e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	cf 91       	pop	r28
    192c:	df 91       	pop	r29
    192e:	08 95       	ret

00001930 <DIO_ES_tSetPortDirection>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tSetPortDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Dir_Type copy_u8_PortDirection)
{
    1930:	df 93       	push	r29
    1932:	cf 93       	push	r28
    1934:	00 d0       	rcall	.+0      	; 0x1936 <DIO_ES_tSetPortDirection+0x6>
    1936:	00 d0       	rcall	.+0      	; 0x1938 <DIO_ES_tSetPortDirection+0x8>
    1938:	0f 92       	push	r0
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
    193e:	89 83       	std	Y+1, r24	; 0x01
    1940:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortDirection != OUTPUT) && (copy_u8_PortDirection != OUTPUT)){
    1942:	8a 81       	ldd	r24, Y+2	; 0x02
    1944:	81 30       	cpi	r24, 0x01	; 1
    1946:	31 f0       	breq	.+12     	; 0x1954 <DIO_ES_tSetPortDirection+0x24>
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	81 30       	cpi	r24, 0x01	; 1
    194c:	19 f0       	breq	.+6      	; 0x1954 <DIO_ES_tSetPortDirection+0x24>
		return ES_NOT_OK;
    194e:	21 e0       	ldi	r18, 0x01	; 1
    1950:	2d 83       	std	Y+5, r18	; 0x05
    1952:	53 c0       	rjmp	.+166    	; 0x19fa <DIO_ES_tSetPortDirection+0xca>
	}
	switch(copy_u8_PortId){
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	28 2f       	mov	r18, r24
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	3c 83       	std	Y+4, r19	; 0x04
    195c:	2b 83       	std	Y+3, r18	; 0x03
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	9c 81       	ldd	r25, Y+4	; 0x04
    1962:	81 30       	cpi	r24, 0x01	; 1
    1964:	91 05       	cpc	r25, r1
    1966:	09 f1       	breq	.+66     	; 0x19aa <DIO_ES_tSetPortDirection+0x7a>
    1968:	2b 81       	ldd	r18, Y+3	; 0x03
    196a:	3c 81       	ldd	r19, Y+4	; 0x04
    196c:	22 30       	cpi	r18, 0x02	; 2
    196e:	31 05       	cpc	r19, r1
    1970:	2c f4       	brge	.+10     	; 0x197c <DIO_ES_tSetPortDirection+0x4c>
    1972:	8b 81       	ldd	r24, Y+3	; 0x03
    1974:	9c 81       	ldd	r25, Y+4	; 0x04
    1976:	00 97       	sbiw	r24, 0x00	; 0
    1978:	61 f0       	breq	.+24     	; 0x1992 <DIO_ES_tSetPortDirection+0x62>
    197a:	3b c0       	rjmp	.+118    	; 0x19f2 <DIO_ES_tSetPortDirection+0xc2>
    197c:	2b 81       	ldd	r18, Y+3	; 0x03
    197e:	3c 81       	ldd	r19, Y+4	; 0x04
    1980:	22 30       	cpi	r18, 0x02	; 2
    1982:	31 05       	cpc	r19, r1
    1984:	f1 f0       	breq	.+60     	; 0x19c2 <DIO_ES_tSetPortDirection+0x92>
    1986:	8b 81       	ldd	r24, Y+3	; 0x03
    1988:	9c 81       	ldd	r25, Y+4	; 0x04
    198a:	83 30       	cpi	r24, 0x03	; 3
    198c:	91 05       	cpc	r25, r1
    198e:	29 f1       	breq	.+74     	; 0x19da <DIO_ES_tSetPortDirection+0xaa>
    1990:	30 c0       	rjmp	.+96     	; 0x19f2 <DIO_ES_tSetPortDirection+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortDirection == OUTPUT)
    1992:	8a 81       	ldd	r24, Y+2	; 0x02
    1994:	81 30       	cpi	r24, 0x01	; 1
    1996:	29 f4       	brne	.+10     	; 0x19a2 <DIO_ES_tSetPortDirection+0x72>
			DDRA = 0xff;
    1998:	ea e3       	ldi	r30, 0x3A	; 58
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	8f ef       	ldi	r24, 0xFF	; 255
    199e:	80 83       	st	Z, r24
    19a0:	2b c0       	rjmp	.+86     	; 0x19f8 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRA = 0x00;
    19a2:	ea e3       	ldi	r30, 0x3A	; 58
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	10 82       	st	Z, r1
    19a8:	27 c0       	rjmp	.+78     	; 0x19f8 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortDirection == OUTPUT)
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	81 30       	cpi	r24, 0x01	; 1
    19ae:	29 f4       	brne	.+10     	; 0x19ba <DIO_ES_tSetPortDirection+0x8a>
			DDRB = 0xff;
    19b0:	e7 e3       	ldi	r30, 0x37	; 55
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	8f ef       	ldi	r24, 0xFF	; 255
    19b6:	80 83       	st	Z, r24
    19b8:	1f c0       	rjmp	.+62     	; 0x19f8 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRB = 0x00;
    19ba:	e7 e3       	ldi	r30, 0x37	; 55
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	10 82       	st	Z, r1
    19c0:	1b c0       	rjmp	.+54     	; 0x19f8 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortDirection == OUTPUT)
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	81 30       	cpi	r24, 0x01	; 1
    19c6:	29 f4       	brne	.+10     	; 0x19d2 <DIO_ES_tSetPortDirection+0xa2>
			DDRC = 0xff;
    19c8:	e4 e3       	ldi	r30, 0x34	; 52
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	8f ef       	ldi	r24, 0xFF	; 255
    19ce:	80 83       	st	Z, r24
    19d0:	13 c0       	rjmp	.+38     	; 0x19f8 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRC = 0x00;
    19d2:	e4 e3       	ldi	r30, 0x34	; 52
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	10 82       	st	Z, r1
    19d8:	0f c0       	rjmp	.+30     	; 0x19f8 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortDirection == OUTPUT)
    19da:	8a 81       	ldd	r24, Y+2	; 0x02
    19dc:	81 30       	cpi	r24, 0x01	; 1
    19de:	29 f4       	brne	.+10     	; 0x19ea <DIO_ES_tSetPortDirection+0xba>
			DDRD = 0xff;
    19e0:	e1 e3       	ldi	r30, 0x31	; 49
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	8f ef       	ldi	r24, 0xFF	; 255
    19e6:	80 83       	st	Z, r24
    19e8:	07 c0       	rjmp	.+14     	; 0x19f8 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRD = 0x00;
    19ea:	e1 e3       	ldi	r30, 0x31	; 49
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	10 82       	st	Z, r1
    19f0:	03 c0       	rjmp	.+6      	; 0x19f8 <DIO_ES_tSetPortDirection+0xc8>
		break;
	default:
		return ES_NOT_OK;
    19f2:	91 e0       	ldi	r25, 0x01	; 1
    19f4:	9d 83       	std	Y+5, r25	; 0x05
    19f6:	01 c0       	rjmp	.+2      	; 0x19fa <DIO_ES_tSetPortDirection+0xca>
		break;
	}
	return ES_OK;
    19f8:	1d 82       	std	Y+5, r1	; 0x05
    19fa:	8d 81       	ldd	r24, Y+5	; 0x05
}
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	cf 91       	pop	r28
    1a08:	df 91       	pop	r29
    1a0a:	08 95       	ret

00001a0c <DIO_ES_tSetPortValue>:



ES_t DIO_ES_tSetPortValue(DIO_U8_Port_Type copy_u8_PortId, u8 copy_u8_PortValue)
{
    1a0c:	df 93       	push	r29
    1a0e:	cf 93       	push	r28
    1a10:	00 d0       	rcall	.+0      	; 0x1a12 <DIO_ES_tSetPortValue+0x6>
    1a12:	00 d0       	rcall	.+0      	; 0x1a14 <DIO_ES_tSetPortValue+0x8>
    1a14:	0f 92       	push	r0
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
    1a1a:	89 83       	std	Y+1, r24	; 0x01
    1a1c:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortValue != HIGH) && (copy_u8_PortValue != LOW)){
    1a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a20:	81 30       	cpi	r24, 0x01	; 1
    1a22:	31 f0       	breq	.+12     	; 0x1a30 <DIO_ES_tSetPortValue+0x24>
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	88 23       	and	r24, r24
    1a28:	19 f0       	breq	.+6      	; 0x1a30 <DIO_ES_tSetPortValue+0x24>
		return ES_NOT_OK;
    1a2a:	21 e0       	ldi	r18, 0x01	; 1
    1a2c:	2d 83       	std	Y+5, r18	; 0x05
    1a2e:	53 c0       	rjmp	.+166    	; 0x1ad6 <DIO_ES_tSetPortValue+0xca>
	}
	switch(copy_u8_PortId){
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	28 2f       	mov	r18, r24
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	3c 83       	std	Y+4, r19	; 0x04
    1a38:	2b 83       	std	Y+3, r18	; 0x03
    1a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3e:	81 30       	cpi	r24, 0x01	; 1
    1a40:	91 05       	cpc	r25, r1
    1a42:	09 f1       	breq	.+66     	; 0x1a86 <DIO_ES_tSetPortValue+0x7a>
    1a44:	2b 81       	ldd	r18, Y+3	; 0x03
    1a46:	3c 81       	ldd	r19, Y+4	; 0x04
    1a48:	22 30       	cpi	r18, 0x02	; 2
    1a4a:	31 05       	cpc	r19, r1
    1a4c:	2c f4       	brge	.+10     	; 0x1a58 <DIO_ES_tSetPortValue+0x4c>
    1a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a50:	9c 81       	ldd	r25, Y+4	; 0x04
    1a52:	00 97       	sbiw	r24, 0x00	; 0
    1a54:	61 f0       	breq	.+24     	; 0x1a6e <DIO_ES_tSetPortValue+0x62>
    1a56:	3b c0       	rjmp	.+118    	; 0x1ace <DIO_ES_tSetPortValue+0xc2>
    1a58:	2b 81       	ldd	r18, Y+3	; 0x03
    1a5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a5c:	22 30       	cpi	r18, 0x02	; 2
    1a5e:	31 05       	cpc	r19, r1
    1a60:	f1 f0       	breq	.+60     	; 0x1a9e <DIO_ES_tSetPortValue+0x92>
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	9c 81       	ldd	r25, Y+4	; 0x04
    1a66:	83 30       	cpi	r24, 0x03	; 3
    1a68:	91 05       	cpc	r25, r1
    1a6a:	29 f1       	breq	.+74     	; 0x1ab6 <DIO_ES_tSetPortValue+0xaa>
    1a6c:	30 c0       	rjmp	.+96     	; 0x1ace <DIO_ES_tSetPortValue+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortValue == HIGH)
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	81 30       	cpi	r24, 0x01	; 1
    1a72:	29 f4       	brne	.+10     	; 0x1a7e <DIO_ES_tSetPortValue+0x72>
			PORTA = 0xff;
    1a74:	eb e3       	ldi	r30, 0x3B	; 59
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	8f ef       	ldi	r24, 0xFF	; 255
    1a7a:	80 83       	st	Z, r24
    1a7c:	2b c0       	rjmp	.+86     	; 0x1ad4 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTA = 0x00;
    1a7e:	eb e3       	ldi	r30, 0x3B	; 59
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	10 82       	st	Z, r1
    1a84:	27 c0       	rjmp	.+78     	; 0x1ad4 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortValue == HIGH)
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	81 30       	cpi	r24, 0x01	; 1
    1a8a:	29 f4       	brne	.+10     	; 0x1a96 <DIO_ES_tSetPortValue+0x8a>
			PORTB = 0xff;
    1a8c:	e8 e3       	ldi	r30, 0x38	; 56
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	8f ef       	ldi	r24, 0xFF	; 255
    1a92:	80 83       	st	Z, r24
    1a94:	1f c0       	rjmp	.+62     	; 0x1ad4 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTB = 0x00;
    1a96:	e8 e3       	ldi	r30, 0x38	; 56
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	10 82       	st	Z, r1
    1a9c:	1b c0       	rjmp	.+54     	; 0x1ad4 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortValue == HIGH)
    1a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa0:	81 30       	cpi	r24, 0x01	; 1
    1aa2:	29 f4       	brne	.+10     	; 0x1aae <DIO_ES_tSetPortValue+0xa2>
			PORTC = 0xff;
    1aa4:	e5 e3       	ldi	r30, 0x35	; 53
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	8f ef       	ldi	r24, 0xFF	; 255
    1aaa:	80 83       	st	Z, r24
    1aac:	13 c0       	rjmp	.+38     	; 0x1ad4 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTC = 0x00;
    1aae:	e5 e3       	ldi	r30, 0x35	; 53
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	10 82       	st	Z, r1
    1ab4:	0f c0       	rjmp	.+30     	; 0x1ad4 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortValue == HIGH)
    1ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab8:	81 30       	cpi	r24, 0x01	; 1
    1aba:	29 f4       	brne	.+10     	; 0x1ac6 <DIO_ES_tSetPortValue+0xba>
			PORTD = 0xff;
    1abc:	e2 e3       	ldi	r30, 0x32	; 50
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	8f ef       	ldi	r24, 0xFF	; 255
    1ac2:	80 83       	st	Z, r24
    1ac4:	07 c0       	rjmp	.+14     	; 0x1ad4 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTD = 0x00;
    1ac6:	e2 e3       	ldi	r30, 0x32	; 50
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	10 82       	st	Z, r1
    1acc:	03 c0       	rjmp	.+6      	; 0x1ad4 <DIO_ES_tSetPortValue+0xc8>
		break;
	default:
		return ES_NOT_OK;
    1ace:	91 e0       	ldi	r25, 0x01	; 1
    1ad0:	9d 83       	std	Y+5, r25	; 0x05
    1ad2:	01 c0       	rjmp	.+2      	; 0x1ad6 <DIO_ES_tSetPortValue+0xca>
		break;
	}
	return ES_OK;
    1ad4:	1d 82       	std	Y+5, r1	; 0x05
    1ad6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1ad8:	0f 90       	pop	r0
    1ada:	0f 90       	pop	r0
    1adc:	0f 90       	pop	r0
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	cf 91       	pop	r28
    1ae4:	df 91       	pop	r29
    1ae6:	08 95       	ret

00001ae8 <DIO_ES_tTOGPin>:
/*
 * DIO_ES_tTOGPin is used to Toggle a specific pin
 */

ES_t DIO_ES_tTOGPin(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId)
{
    1ae8:	df 93       	push	r29
    1aea:	cf 93       	push	r28
    1aec:	00 d0       	rcall	.+0      	; 0x1aee <DIO_ES_tTOGPin+0x6>
    1aee:	0f 92       	push	r0
    1af0:	cd b7       	in	r28, 0x3d	; 61
    1af2:	de b7       	in	r29, 0x3e	; 62
    1af4:	89 83       	std	Y+1, r24	; 0x01
    1af6:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8_PinId > PIN_LIMIT){
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	88 30       	cpi	r24, 0x08	; 8
    1afc:	18 f0       	brcs	.+6      	; 0x1b04 <DIO_ES_tTOGPin+0x1c>
		return ES_NOT_OK;
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	8b 83       	std	Y+3, r24	; 0x03
    1b02:	60 c0       	rjmp	.+192    	; 0x1bc4 <DIO_ES_tTOGPin+0xdc>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
    1b06:	88 23       	and	r24, r24
    1b08:	a1 f4       	brne	.+40     	; 0x1b32 <DIO_ES_tTOGPin+0x4a>
		TOG_BIT(PORTA,copy_u8_PinId);
    1b0a:	ab e3       	ldi	r26, 0x3B	; 59
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	eb e3       	ldi	r30, 0x3B	; 59
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	48 2f       	mov	r20, r24
    1b16:	8a 81       	ldd	r24, Y+2	; 0x02
    1b18:	28 2f       	mov	r18, r24
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	02 2e       	mov	r0, r18
    1b22:	02 c0       	rjmp	.+4      	; 0x1b28 <DIO_ES_tTOGPin+0x40>
    1b24:	88 0f       	add	r24, r24
    1b26:	99 1f       	adc	r25, r25
    1b28:	0a 94       	dec	r0
    1b2a:	e2 f7       	brpl	.-8      	; 0x1b24 <DIO_ES_tTOGPin+0x3c>
    1b2c:	84 27       	eor	r24, r20
    1b2e:	8c 93       	st	X, r24
    1b30:	48 c0       	rjmp	.+144    	; 0x1bc2 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
    1b34:	81 30       	cpi	r24, 0x01	; 1
    1b36:	a1 f4       	brne	.+40     	; 0x1b60 <DIO_ES_tTOGPin+0x78>
		TOG_BIT(PORTB,copy_u8_PinId);
    1b38:	a8 e3       	ldi	r26, 0x38	; 56
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	e8 e3       	ldi	r30, 0x38	; 56
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	48 2f       	mov	r20, r24
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
    1b46:	28 2f       	mov	r18, r24
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	02 2e       	mov	r0, r18
    1b50:	02 c0       	rjmp	.+4      	; 0x1b56 <DIO_ES_tTOGPin+0x6e>
    1b52:	88 0f       	add	r24, r24
    1b54:	99 1f       	adc	r25, r25
    1b56:	0a 94       	dec	r0
    1b58:	e2 f7       	brpl	.-8      	; 0x1b52 <DIO_ES_tTOGPin+0x6a>
    1b5a:	84 27       	eor	r24, r20
    1b5c:	8c 93       	st	X, r24
    1b5e:	31 c0       	rjmp	.+98     	; 0x1bc2 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
    1b62:	82 30       	cpi	r24, 0x02	; 2
    1b64:	a1 f4       	brne	.+40     	; 0x1b8e <DIO_ES_tTOGPin+0xa6>
		TOG_BIT(PORTC,copy_u8_PinId);
    1b66:	a5 e3       	ldi	r26, 0x35	; 53
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	e5 e3       	ldi	r30, 0x35	; 53
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	48 2f       	mov	r20, r24
    1b72:	8a 81       	ldd	r24, Y+2	; 0x02
    1b74:	28 2f       	mov	r18, r24
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	02 2e       	mov	r0, r18
    1b7e:	02 c0       	rjmp	.+4      	; 0x1b84 <DIO_ES_tTOGPin+0x9c>
    1b80:	88 0f       	add	r24, r24
    1b82:	99 1f       	adc	r25, r25
    1b84:	0a 94       	dec	r0
    1b86:	e2 f7       	brpl	.-8      	; 0x1b80 <DIO_ES_tTOGPin+0x98>
    1b88:	84 27       	eor	r24, r20
    1b8a:	8c 93       	st	X, r24
    1b8c:	1a c0       	rjmp	.+52     	; 0x1bc2 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    1b8e:	89 81       	ldd	r24, Y+1	; 0x01
    1b90:	83 30       	cpi	r24, 0x03	; 3
    1b92:	a1 f4       	brne	.+40     	; 0x1bbc <DIO_ES_tTOGPin+0xd4>
		TOG_BIT(PORTD,copy_u8_PinId);
    1b94:	a2 e3       	ldi	r26, 0x32	; 50
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	e2 e3       	ldi	r30, 0x32	; 50
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	48 2f       	mov	r20, r24
    1ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba2:	28 2f       	mov	r18, r24
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	02 2e       	mov	r0, r18
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <DIO_ES_tTOGPin+0xca>
    1bae:	88 0f       	add	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	0a 94       	dec	r0
    1bb4:	e2 f7       	brpl	.-8      	; 0x1bae <DIO_ES_tTOGPin+0xc6>
    1bb6:	84 27       	eor	r24, r20
    1bb8:	8c 93       	st	X, r24
    1bba:	03 c0       	rjmp	.+6      	; 0x1bc2 <DIO_ES_tTOGPin+0xda>
	}else{
		return ES_NOT_OK;
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	8b 83       	std	Y+3, r24	; 0x03
    1bc0:	01 c0       	rjmp	.+2      	; 0x1bc4 <DIO_ES_tTOGPin+0xdc>
	}
	return ES_OK;
    1bc2:	1b 82       	std	Y+3, r1	; 0x03
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	cf 91       	pop	r28
    1bce:	df 91       	pop	r29
    1bd0:	08 95       	ret

00001bd2 <DIO_ES_tInit>:




ES_t DIO_ES_tInit(void)
{
    1bd2:	df 93       	push	r29
    1bd4:	cf 93       	push	r28
    1bd6:	00 d0       	rcall	.+0      	; 0x1bd8 <DIO_ES_tInit+0x6>
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
	int i = 0;
    1bdc:	1a 82       	std	Y+2, r1	; 0x02
    1bde:	19 82       	std	Y+1, r1	; 0x01
	for(i=0 ; i<PIN_COUNT ; i++){
    1be0:	1a 82       	std	Y+2, r1	; 0x02
    1be2:	19 82       	std	Y+1, r1	; 0x01
    1be4:	a3 c2       	rjmp	.+1350   	; 0x212c <DIO_ES_tInit+0x55a>
		if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_A){
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bea:	88 0f       	add	r24, r24
    1bec:	99 1f       	adc	r25, r25
    1bee:	88 0f       	add	r24, r24
    1bf0:	99 1f       	adc	r25, r25
    1bf2:	fc 01       	movw	r30, r24
    1bf4:	ec 5b       	subi	r30, 0xBC	; 188
    1bf6:	fe 4f       	sbci	r31, 0xFE	; 254
    1bf8:	80 81       	ld	r24, Z
    1bfa:	88 23       	and	r24, r24
    1bfc:	09 f0       	breq	.+2      	; 0x1c00 <DIO_ES_tInit+0x2e>
    1bfe:	9b c0       	rjmp	.+310    	; 0x1d36 <DIO_ES_tInit+0x164>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	9a 81       	ldd	r25, Y+2	; 0x02
    1c04:	88 0f       	add	r24, r24
    1c06:	99 1f       	adc	r25, r25
    1c08:	01 96       	adiw	r24, 0x01	; 1
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	fc 01       	movw	r30, r24
    1c10:	ec 5b       	subi	r30, 0xBC	; 188
    1c12:	fe 4f       	sbci	r31, 0xFE	; 254
    1c14:	80 81       	ld	r24, Z
    1c16:	81 30       	cpi	r24, 0x01	; 1
    1c18:	e9 f4       	brne	.+58     	; 0x1c54 <DIO_ES_tInit+0x82>
				SET_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    1c1a:	aa e3       	ldi	r26, 0x3A	; 58
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	ea e3       	ldi	r30, 0x3A	; 58
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	48 2f       	mov	r20, r24
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2a:	88 0f       	add	r24, r24
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	88 0f       	add	r24, r24
    1c30:	99 1f       	adc	r25, r25
    1c32:	fc 01       	movw	r30, r24
    1c34:	eb 5b       	subi	r30, 0xBB	; 187
    1c36:	fe 4f       	sbci	r31, 0xFE	; 254
    1c38:	80 81       	ld	r24, Z
    1c3a:	28 2f       	mov	r18, r24
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	02 2e       	mov	r0, r18
    1c44:	02 c0       	rjmp	.+4      	; 0x1c4a <DIO_ES_tInit+0x78>
    1c46:	88 0f       	add	r24, r24
    1c48:	99 1f       	adc	r25, r25
    1c4a:	0a 94       	dec	r0
    1c4c:	e2 f7       	brpl	.-8      	; 0x1c46 <DIO_ES_tInit+0x74>
    1c4e:	84 2b       	or	r24, r20
    1c50:	8c 93       	st	X, r24
    1c52:	67 c2       	rjmp	.+1230   	; 0x2122 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    1c54:	aa e3       	ldi	r26, 0x3A	; 58
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	ea e3       	ldi	r30, 0x3A	; 58
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	48 2f       	mov	r20, r24
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
    1c62:	9a 81       	ldd	r25, Y+2	; 0x02
    1c64:	88 0f       	add	r24, r24
    1c66:	99 1f       	adc	r25, r25
    1c68:	88 0f       	add	r24, r24
    1c6a:	99 1f       	adc	r25, r25
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	eb 5b       	subi	r30, 0xBB	; 187
    1c70:	fe 4f       	sbci	r31, 0xFE	; 254
    1c72:	80 81       	ld	r24, Z
    1c74:	28 2f       	mov	r18, r24
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	02 2e       	mov	r0, r18
    1c7e:	02 c0       	rjmp	.+4      	; 0x1c84 <DIO_ES_tInit+0xb2>
    1c80:	88 0f       	add	r24, r24
    1c82:	99 1f       	adc	r25, r25
    1c84:	0a 94       	dec	r0
    1c86:	e2 f7       	brpl	.-8      	; 0x1c80 <DIO_ES_tInit+0xae>
    1c88:	80 95       	com	r24
    1c8a:	84 23       	and	r24, r20
    1c8c:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
    1c90:	9a 81       	ldd	r25, Y+2	; 0x02
    1c92:	88 0f       	add	r24, r24
    1c94:	99 1f       	adc	r25, r25
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	fc 01       	movw	r30, r24
    1c9c:	e9 5b       	subi	r30, 0xB9	; 185
    1c9e:	fe 4f       	sbci	r31, 0xFE	; 254
    1ca0:	80 81       	ld	r24, Z
    1ca2:	81 30       	cpi	r24, 0x01	; 1
    1ca4:	e9 f4       	brne	.+58     	; 0x1ce0 <DIO_ES_tInit+0x10e>
					SET_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    1ca6:	ab e3       	ldi	r26, 0x3B	; 59
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	eb e3       	ldi	r30, 0x3B	; 59
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	48 2f       	mov	r20, r24
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb6:	88 0f       	add	r24, r24
    1cb8:	99 1f       	adc	r25, r25
    1cba:	88 0f       	add	r24, r24
    1cbc:	99 1f       	adc	r25, r25
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	eb 5b       	subi	r30, 0xBB	; 187
    1cc2:	fe 4f       	sbci	r31, 0xFE	; 254
    1cc4:	80 81       	ld	r24, Z
    1cc6:	28 2f       	mov	r18, r24
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	02 2e       	mov	r0, r18
    1cd0:	02 c0       	rjmp	.+4      	; 0x1cd6 <DIO_ES_tInit+0x104>
    1cd2:	88 0f       	add	r24, r24
    1cd4:	99 1f       	adc	r25, r25
    1cd6:	0a 94       	dec	r0
    1cd8:	e2 f7       	brpl	.-8      	; 0x1cd2 <DIO_ES_tInit+0x100>
    1cda:	84 2b       	or	r24, r20
    1cdc:	8c 93       	st	X, r24
    1cde:	21 c2       	rjmp	.+1090   	; 0x2122 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce4:	88 0f       	add	r24, r24
    1ce6:	99 1f       	adc	r25, r25
    1ce8:	88 0f       	add	r24, r24
    1cea:	99 1f       	adc	r25, r25
    1cec:	fc 01       	movw	r30, r24
    1cee:	e9 5b       	subi	r30, 0xB9	; 185
    1cf0:	fe 4f       	sbci	r31, 0xFE	; 254
    1cf2:	80 81       	ld	r24, Z
    1cf4:	88 23       	and	r24, r24
    1cf6:	09 f0       	breq	.+2      	; 0x1cfa <DIO_ES_tInit+0x128>
    1cf8:	14 c2       	rjmp	.+1064   	; 0x2122 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    1cfa:	ab e3       	ldi	r26, 0x3B	; 59
    1cfc:	b0 e0       	ldi	r27, 0x00	; 0
    1cfe:	eb e3       	ldi	r30, 0x3B	; 59
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	80 81       	ld	r24, Z
    1d04:	48 2f       	mov	r20, r24
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
    1d08:	9a 81       	ldd	r25, Y+2	; 0x02
    1d0a:	88 0f       	add	r24, r24
    1d0c:	99 1f       	adc	r25, r25
    1d0e:	88 0f       	add	r24, r24
    1d10:	99 1f       	adc	r25, r25
    1d12:	fc 01       	movw	r30, r24
    1d14:	eb 5b       	subi	r30, 0xBB	; 187
    1d16:	fe 4f       	sbci	r31, 0xFE	; 254
    1d18:	80 81       	ld	r24, Z
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	02 2e       	mov	r0, r18
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <DIO_ES_tInit+0x158>
    1d26:	88 0f       	add	r24, r24
    1d28:	99 1f       	adc	r25, r25
    1d2a:	0a 94       	dec	r0
    1d2c:	e2 f7       	brpl	.-8      	; 0x1d26 <DIO_ES_tInit+0x154>
    1d2e:	80 95       	com	r24
    1d30:	84 23       	and	r24, r20
    1d32:	8c 93       	st	X, r24
    1d34:	f6 c1       	rjmp	.+1004   	; 0x2122 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_B){
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3a:	88 0f       	add	r24, r24
    1d3c:	99 1f       	adc	r25, r25
    1d3e:	88 0f       	add	r24, r24
    1d40:	99 1f       	adc	r25, r25
    1d42:	fc 01       	movw	r30, r24
    1d44:	ec 5b       	subi	r30, 0xBC	; 188
    1d46:	fe 4f       	sbci	r31, 0xFE	; 254
    1d48:	80 81       	ld	r24, Z
    1d4a:	81 30       	cpi	r24, 0x01	; 1
    1d4c:	09 f0       	breq	.+2      	; 0x1d50 <DIO_ES_tInit+0x17e>
    1d4e:	9b c0       	rjmp	.+310    	; 0x1e86 <DIO_ES_tInit+0x2b4>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	9a 81       	ldd	r25, Y+2	; 0x02
    1d54:	88 0f       	add	r24, r24
    1d56:	99 1f       	adc	r25, r25
    1d58:	01 96       	adiw	r24, 0x01	; 1
    1d5a:	88 0f       	add	r24, r24
    1d5c:	99 1f       	adc	r25, r25
    1d5e:	fc 01       	movw	r30, r24
    1d60:	ec 5b       	subi	r30, 0xBC	; 188
    1d62:	fe 4f       	sbci	r31, 0xFE	; 254
    1d64:	80 81       	ld	r24, Z
    1d66:	81 30       	cpi	r24, 0x01	; 1
    1d68:	e9 f4       	brne	.+58     	; 0x1da4 <DIO_ES_tInit+0x1d2>
				SET_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    1d6a:	a7 e3       	ldi	r26, 0x37	; 55
    1d6c:	b0 e0       	ldi	r27, 0x00	; 0
    1d6e:	e7 e3       	ldi	r30, 0x37	; 55
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	48 2f       	mov	r20, r24
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7a:	88 0f       	add	r24, r24
    1d7c:	99 1f       	adc	r25, r25
    1d7e:	88 0f       	add	r24, r24
    1d80:	99 1f       	adc	r25, r25
    1d82:	fc 01       	movw	r30, r24
    1d84:	eb 5b       	subi	r30, 0xBB	; 187
    1d86:	fe 4f       	sbci	r31, 0xFE	; 254
    1d88:	80 81       	ld	r24, Z
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	02 2e       	mov	r0, r18
    1d94:	02 c0       	rjmp	.+4      	; 0x1d9a <DIO_ES_tInit+0x1c8>
    1d96:	88 0f       	add	r24, r24
    1d98:	99 1f       	adc	r25, r25
    1d9a:	0a 94       	dec	r0
    1d9c:	e2 f7       	brpl	.-8      	; 0x1d96 <DIO_ES_tInit+0x1c4>
    1d9e:	84 2b       	or	r24, r20
    1da0:	8c 93       	st	X, r24
    1da2:	bf c1       	rjmp	.+894    	; 0x2122 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    1da4:	a7 e3       	ldi	r26, 0x37	; 55
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	e7 e3       	ldi	r30, 0x37	; 55
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	48 2f       	mov	r20, r24
    1db0:	89 81       	ldd	r24, Y+1	; 0x01
    1db2:	9a 81       	ldd	r25, Y+2	; 0x02
    1db4:	88 0f       	add	r24, r24
    1db6:	99 1f       	adc	r25, r25
    1db8:	88 0f       	add	r24, r24
    1dba:	99 1f       	adc	r25, r25
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	eb 5b       	subi	r30, 0xBB	; 187
    1dc0:	fe 4f       	sbci	r31, 0xFE	; 254
    1dc2:	80 81       	ld	r24, Z
    1dc4:	28 2f       	mov	r18, r24
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	02 2e       	mov	r0, r18
    1dce:	02 c0       	rjmp	.+4      	; 0x1dd4 <DIO_ES_tInit+0x202>
    1dd0:	88 0f       	add	r24, r24
    1dd2:	99 1f       	adc	r25, r25
    1dd4:	0a 94       	dec	r0
    1dd6:	e2 f7       	brpl	.-8      	; 0x1dd0 <DIO_ES_tInit+0x1fe>
    1dd8:	80 95       	com	r24
    1dda:	84 23       	and	r24, r20
    1ddc:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	9a 81       	ldd	r25, Y+2	; 0x02
    1de2:	88 0f       	add	r24, r24
    1de4:	99 1f       	adc	r25, r25
    1de6:	88 0f       	add	r24, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	fc 01       	movw	r30, r24
    1dec:	e9 5b       	subi	r30, 0xB9	; 185
    1dee:	fe 4f       	sbci	r31, 0xFE	; 254
    1df0:	80 81       	ld	r24, Z
    1df2:	81 30       	cpi	r24, 0x01	; 1
    1df4:	e9 f4       	brne	.+58     	; 0x1e30 <DIO_ES_tInit+0x25e>
					SET_BIT(PORTB,Dio_CfgPinsArray[i].Pin);
    1df6:	a8 e3       	ldi	r26, 0x38	; 56
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	e8 e3       	ldi	r30, 0x38	; 56
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	48 2f       	mov	r20, r24
    1e02:	89 81       	ldd	r24, Y+1	; 0x01
    1e04:	9a 81       	ldd	r25, Y+2	; 0x02
    1e06:	88 0f       	add	r24, r24
    1e08:	99 1f       	adc	r25, r25
    1e0a:	88 0f       	add	r24, r24
    1e0c:	99 1f       	adc	r25, r25
    1e0e:	fc 01       	movw	r30, r24
    1e10:	eb 5b       	subi	r30, 0xBB	; 187
    1e12:	fe 4f       	sbci	r31, 0xFE	; 254
    1e14:	80 81       	ld	r24, Z
    1e16:	28 2f       	mov	r18, r24
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	02 2e       	mov	r0, r18
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <DIO_ES_tInit+0x254>
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	0a 94       	dec	r0
    1e28:	e2 f7       	brpl	.-8      	; 0x1e22 <DIO_ES_tInit+0x250>
    1e2a:	84 2b       	or	r24, r20
    1e2c:	8c 93       	st	X, r24
    1e2e:	79 c1       	rjmp	.+754    	; 0x2122 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	9a 81       	ldd	r25, Y+2	; 0x02
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	88 0f       	add	r24, r24
    1e3a:	99 1f       	adc	r25, r25
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	e9 5b       	subi	r30, 0xB9	; 185
    1e40:	fe 4f       	sbci	r31, 0xFE	; 254
    1e42:	80 81       	ld	r24, Z
    1e44:	88 23       	and	r24, r24
    1e46:	09 f0       	breq	.+2      	; 0x1e4a <DIO_ES_tInit+0x278>
    1e48:	6c c1       	rjmp	.+728    	; 0x2122 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    1e4a:	ab e3       	ldi	r26, 0x3B	; 59
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	eb e3       	ldi	r30, 0x3B	; 59
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	48 2f       	mov	r20, r24
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5a:	88 0f       	add	r24, r24
    1e5c:	99 1f       	adc	r25, r25
    1e5e:	88 0f       	add	r24, r24
    1e60:	99 1f       	adc	r25, r25
    1e62:	fc 01       	movw	r30, r24
    1e64:	eb 5b       	subi	r30, 0xBB	; 187
    1e66:	fe 4f       	sbci	r31, 0xFE	; 254
    1e68:	80 81       	ld	r24, Z
    1e6a:	28 2f       	mov	r18, r24
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	02 2e       	mov	r0, r18
    1e74:	02 c0       	rjmp	.+4      	; 0x1e7a <DIO_ES_tInit+0x2a8>
    1e76:	88 0f       	add	r24, r24
    1e78:	99 1f       	adc	r25, r25
    1e7a:	0a 94       	dec	r0
    1e7c:	e2 f7       	brpl	.-8      	; 0x1e76 <DIO_ES_tInit+0x2a4>
    1e7e:	80 95       	com	r24
    1e80:	84 23       	and	r24, r20
    1e82:	8c 93       	st	X, r24
    1e84:	4e c1       	rjmp	.+668    	; 0x2122 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_C){
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
    1e88:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8a:	88 0f       	add	r24, r24
    1e8c:	99 1f       	adc	r25, r25
    1e8e:	88 0f       	add	r24, r24
    1e90:	99 1f       	adc	r25, r25
    1e92:	fc 01       	movw	r30, r24
    1e94:	ec 5b       	subi	r30, 0xBC	; 188
    1e96:	fe 4f       	sbci	r31, 0xFE	; 254
    1e98:	80 81       	ld	r24, Z
    1e9a:	82 30       	cpi	r24, 0x02	; 2
    1e9c:	09 f0       	breq	.+2      	; 0x1ea0 <DIO_ES_tInit+0x2ce>
    1e9e:	9b c0       	rjmp	.+310    	; 0x1fd6 <DIO_ES_tInit+0x404>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    1ea0:	89 81       	ldd	r24, Y+1	; 0x01
    1ea2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea4:	88 0f       	add	r24, r24
    1ea6:	99 1f       	adc	r25, r25
    1ea8:	01 96       	adiw	r24, 0x01	; 1
    1eaa:	88 0f       	add	r24, r24
    1eac:	99 1f       	adc	r25, r25
    1eae:	fc 01       	movw	r30, r24
    1eb0:	ec 5b       	subi	r30, 0xBC	; 188
    1eb2:	fe 4f       	sbci	r31, 0xFE	; 254
    1eb4:	80 81       	ld	r24, Z
    1eb6:	81 30       	cpi	r24, 0x01	; 1
    1eb8:	e9 f4       	brne	.+58     	; 0x1ef4 <DIO_ES_tInit+0x322>
				SET_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    1eba:	a4 e3       	ldi	r26, 0x34	; 52
    1ebc:	b0 e0       	ldi	r27, 0x00	; 0
    1ebe:	e4 e3       	ldi	r30, 0x34	; 52
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	48 2f       	mov	r20, r24
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
    1ec8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eca:	88 0f       	add	r24, r24
    1ecc:	99 1f       	adc	r25, r25
    1ece:	88 0f       	add	r24, r24
    1ed0:	99 1f       	adc	r25, r25
    1ed2:	fc 01       	movw	r30, r24
    1ed4:	eb 5b       	subi	r30, 0xBB	; 187
    1ed6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ed8:	80 81       	ld	r24, Z
    1eda:	28 2f       	mov	r18, r24
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	02 2e       	mov	r0, r18
    1ee4:	02 c0       	rjmp	.+4      	; 0x1eea <DIO_ES_tInit+0x318>
    1ee6:	88 0f       	add	r24, r24
    1ee8:	99 1f       	adc	r25, r25
    1eea:	0a 94       	dec	r0
    1eec:	e2 f7       	brpl	.-8      	; 0x1ee6 <DIO_ES_tInit+0x314>
    1eee:	84 2b       	or	r24, r20
    1ef0:	8c 93       	st	X, r24
    1ef2:	17 c1       	rjmp	.+558    	; 0x2122 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    1ef4:	a4 e3       	ldi	r26, 0x34	; 52
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e4 e3       	ldi	r30, 0x34	; 52
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	48 2f       	mov	r20, r24
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	9a 81       	ldd	r25, Y+2	; 0x02
    1f04:	88 0f       	add	r24, r24
    1f06:	99 1f       	adc	r25, r25
    1f08:	88 0f       	add	r24, r24
    1f0a:	99 1f       	adc	r25, r25
    1f0c:	fc 01       	movw	r30, r24
    1f0e:	eb 5b       	subi	r30, 0xBB	; 187
    1f10:	fe 4f       	sbci	r31, 0xFE	; 254
    1f12:	80 81       	ld	r24, Z
    1f14:	28 2f       	mov	r18, r24
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	02 2e       	mov	r0, r18
    1f1e:	02 c0       	rjmp	.+4      	; 0x1f24 <DIO_ES_tInit+0x352>
    1f20:	88 0f       	add	r24, r24
    1f22:	99 1f       	adc	r25, r25
    1f24:	0a 94       	dec	r0
    1f26:	e2 f7       	brpl	.-8      	; 0x1f20 <DIO_ES_tInit+0x34e>
    1f28:	80 95       	com	r24
    1f2a:	84 23       	and	r24, r20
    1f2c:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	9a 81       	ldd	r25, Y+2	; 0x02
    1f32:	88 0f       	add	r24, r24
    1f34:	99 1f       	adc	r25, r25
    1f36:	88 0f       	add	r24, r24
    1f38:	99 1f       	adc	r25, r25
    1f3a:	fc 01       	movw	r30, r24
    1f3c:	e9 5b       	subi	r30, 0xB9	; 185
    1f3e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f40:	80 81       	ld	r24, Z
    1f42:	81 30       	cpi	r24, 0x01	; 1
    1f44:	e9 f4       	brne	.+58     	; 0x1f80 <DIO_ES_tInit+0x3ae>
					SET_BIT(PORTC,Dio_CfgPinsArray[i].Pin);
    1f46:	a5 e3       	ldi	r26, 0x35	; 53
    1f48:	b0 e0       	ldi	r27, 0x00	; 0
    1f4a:	e5 e3       	ldi	r30, 0x35	; 53
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	48 2f       	mov	r20, r24
    1f52:	89 81       	ldd	r24, Y+1	; 0x01
    1f54:	9a 81       	ldd	r25, Y+2	; 0x02
    1f56:	88 0f       	add	r24, r24
    1f58:	99 1f       	adc	r25, r25
    1f5a:	88 0f       	add	r24, r24
    1f5c:	99 1f       	adc	r25, r25
    1f5e:	fc 01       	movw	r30, r24
    1f60:	eb 5b       	subi	r30, 0xBB	; 187
    1f62:	fe 4f       	sbci	r31, 0xFE	; 254
    1f64:	80 81       	ld	r24, Z
    1f66:	28 2f       	mov	r18, r24
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	02 2e       	mov	r0, r18
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <DIO_ES_tInit+0x3a4>
    1f72:	88 0f       	add	r24, r24
    1f74:	99 1f       	adc	r25, r25
    1f76:	0a 94       	dec	r0
    1f78:	e2 f7       	brpl	.-8      	; 0x1f72 <DIO_ES_tInit+0x3a0>
    1f7a:	84 2b       	or	r24, r20
    1f7c:	8c 93       	st	X, r24
    1f7e:	d1 c0       	rjmp	.+418    	; 0x2122 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    1f80:	89 81       	ldd	r24, Y+1	; 0x01
    1f82:	9a 81       	ldd	r25, Y+2	; 0x02
    1f84:	88 0f       	add	r24, r24
    1f86:	99 1f       	adc	r25, r25
    1f88:	88 0f       	add	r24, r24
    1f8a:	99 1f       	adc	r25, r25
    1f8c:	fc 01       	movw	r30, r24
    1f8e:	e9 5b       	subi	r30, 0xB9	; 185
    1f90:	fe 4f       	sbci	r31, 0xFE	; 254
    1f92:	80 81       	ld	r24, Z
    1f94:	88 23       	and	r24, r24
    1f96:	09 f0       	breq	.+2      	; 0x1f9a <DIO_ES_tInit+0x3c8>
    1f98:	c4 c0       	rjmp	.+392    	; 0x2122 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    1f9a:	ab e3       	ldi	r26, 0x3B	; 59
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	eb e3       	ldi	r30, 0x3B	; 59
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	48 2f       	mov	r20, r24
    1fa6:	89 81       	ldd	r24, Y+1	; 0x01
    1fa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1faa:	88 0f       	add	r24, r24
    1fac:	99 1f       	adc	r25, r25
    1fae:	88 0f       	add	r24, r24
    1fb0:	99 1f       	adc	r25, r25
    1fb2:	fc 01       	movw	r30, r24
    1fb4:	eb 5b       	subi	r30, 0xBB	; 187
    1fb6:	fe 4f       	sbci	r31, 0xFE	; 254
    1fb8:	80 81       	ld	r24, Z
    1fba:	28 2f       	mov	r18, r24
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	02 2e       	mov	r0, r18
    1fc4:	02 c0       	rjmp	.+4      	; 0x1fca <DIO_ES_tInit+0x3f8>
    1fc6:	88 0f       	add	r24, r24
    1fc8:	99 1f       	adc	r25, r25
    1fca:	0a 94       	dec	r0
    1fcc:	e2 f7       	brpl	.-8      	; 0x1fc6 <DIO_ES_tInit+0x3f4>
    1fce:	80 95       	com	r24
    1fd0:	84 23       	and	r24, r20
    1fd2:	8c 93       	st	X, r24
    1fd4:	a6 c0       	rjmp	.+332    	; 0x2122 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_D){
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
    1fd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fda:	88 0f       	add	r24, r24
    1fdc:	99 1f       	adc	r25, r25
    1fde:	88 0f       	add	r24, r24
    1fe0:	99 1f       	adc	r25, r25
    1fe2:	fc 01       	movw	r30, r24
    1fe4:	ec 5b       	subi	r30, 0xBC	; 188
    1fe6:	fe 4f       	sbci	r31, 0xFE	; 254
    1fe8:	80 81       	ld	r24, Z
    1fea:	83 30       	cpi	r24, 0x03	; 3
    1fec:	09 f0       	breq	.+2      	; 0x1ff0 <DIO_ES_tInit+0x41e>
    1fee:	99 c0       	rjmp	.+306    	; 0x2122 <DIO_ES_tInit+0x550>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff4:	88 0f       	add	r24, r24
    1ff6:	99 1f       	adc	r25, r25
    1ff8:	01 96       	adiw	r24, 0x01	; 1
    1ffa:	88 0f       	add	r24, r24
    1ffc:	99 1f       	adc	r25, r25
    1ffe:	fc 01       	movw	r30, r24
    2000:	ec 5b       	subi	r30, 0xBC	; 188
    2002:	fe 4f       	sbci	r31, 0xFE	; 254
    2004:	80 81       	ld	r24, Z
    2006:	81 30       	cpi	r24, 0x01	; 1
    2008:	e9 f4       	brne	.+58     	; 0x2044 <DIO_ES_tInit+0x472>
				SET_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    200a:	a1 e3       	ldi	r26, 0x31	; 49
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	e1 e3       	ldi	r30, 0x31	; 49
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	48 2f       	mov	r20, r24
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	9a 81       	ldd	r25, Y+2	; 0x02
    201a:	88 0f       	add	r24, r24
    201c:	99 1f       	adc	r25, r25
    201e:	88 0f       	add	r24, r24
    2020:	99 1f       	adc	r25, r25
    2022:	fc 01       	movw	r30, r24
    2024:	eb 5b       	subi	r30, 0xBB	; 187
    2026:	fe 4f       	sbci	r31, 0xFE	; 254
    2028:	80 81       	ld	r24, Z
    202a:	28 2f       	mov	r18, r24
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	02 2e       	mov	r0, r18
    2034:	02 c0       	rjmp	.+4      	; 0x203a <DIO_ES_tInit+0x468>
    2036:	88 0f       	add	r24, r24
    2038:	99 1f       	adc	r25, r25
    203a:	0a 94       	dec	r0
    203c:	e2 f7       	brpl	.-8      	; 0x2036 <DIO_ES_tInit+0x464>
    203e:	84 2b       	or	r24, r20
    2040:	8c 93       	st	X, r24
    2042:	6f c0       	rjmp	.+222    	; 0x2122 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    2044:	a1 e3       	ldi	r26, 0x31	; 49
    2046:	b0 e0       	ldi	r27, 0x00	; 0
    2048:	e1 e3       	ldi	r30, 0x31	; 49
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	48 2f       	mov	r20, r24
    2050:	89 81       	ldd	r24, Y+1	; 0x01
    2052:	9a 81       	ldd	r25, Y+2	; 0x02
    2054:	88 0f       	add	r24, r24
    2056:	99 1f       	adc	r25, r25
    2058:	88 0f       	add	r24, r24
    205a:	99 1f       	adc	r25, r25
    205c:	fc 01       	movw	r30, r24
    205e:	eb 5b       	subi	r30, 0xBB	; 187
    2060:	fe 4f       	sbci	r31, 0xFE	; 254
    2062:	80 81       	ld	r24, Z
    2064:	28 2f       	mov	r18, r24
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	02 2e       	mov	r0, r18
    206e:	02 c0       	rjmp	.+4      	; 0x2074 <DIO_ES_tInit+0x4a2>
    2070:	88 0f       	add	r24, r24
    2072:	99 1f       	adc	r25, r25
    2074:	0a 94       	dec	r0
    2076:	e2 f7       	brpl	.-8      	; 0x2070 <DIO_ES_tInit+0x49e>
    2078:	80 95       	com	r24
    207a:	84 23       	and	r24, r20
    207c:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    207e:	89 81       	ldd	r24, Y+1	; 0x01
    2080:	9a 81       	ldd	r25, Y+2	; 0x02
    2082:	88 0f       	add	r24, r24
    2084:	99 1f       	adc	r25, r25
    2086:	88 0f       	add	r24, r24
    2088:	99 1f       	adc	r25, r25
    208a:	fc 01       	movw	r30, r24
    208c:	e9 5b       	subi	r30, 0xB9	; 185
    208e:	fe 4f       	sbci	r31, 0xFE	; 254
    2090:	80 81       	ld	r24, Z
    2092:	81 30       	cpi	r24, 0x01	; 1
    2094:	e9 f4       	brne	.+58     	; 0x20d0 <DIO_ES_tInit+0x4fe>
					SET_BIT(PORTD,Dio_CfgPinsArray[i].Pin);
    2096:	a2 e3       	ldi	r26, 0x32	; 50
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	e2 e3       	ldi	r30, 0x32	; 50
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	48 2f       	mov	r20, r24
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	9a 81       	ldd	r25, Y+2	; 0x02
    20a6:	88 0f       	add	r24, r24
    20a8:	99 1f       	adc	r25, r25
    20aa:	88 0f       	add	r24, r24
    20ac:	99 1f       	adc	r25, r25
    20ae:	fc 01       	movw	r30, r24
    20b0:	eb 5b       	subi	r30, 0xBB	; 187
    20b2:	fe 4f       	sbci	r31, 0xFE	; 254
    20b4:	80 81       	ld	r24, Z
    20b6:	28 2f       	mov	r18, r24
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	81 e0       	ldi	r24, 0x01	; 1
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	02 2e       	mov	r0, r18
    20c0:	02 c0       	rjmp	.+4      	; 0x20c6 <DIO_ES_tInit+0x4f4>
    20c2:	88 0f       	add	r24, r24
    20c4:	99 1f       	adc	r25, r25
    20c6:	0a 94       	dec	r0
    20c8:	e2 f7       	brpl	.-8      	; 0x20c2 <DIO_ES_tInit+0x4f0>
    20ca:	84 2b       	or	r24, r20
    20cc:	8c 93       	st	X, r24
    20ce:	29 c0       	rjmp	.+82     	; 0x2122 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	9a 81       	ldd	r25, Y+2	; 0x02
    20d4:	88 0f       	add	r24, r24
    20d6:	99 1f       	adc	r25, r25
    20d8:	88 0f       	add	r24, r24
    20da:	99 1f       	adc	r25, r25
    20dc:	fc 01       	movw	r30, r24
    20de:	e9 5b       	subi	r30, 0xB9	; 185
    20e0:	fe 4f       	sbci	r31, 0xFE	; 254
    20e2:	80 81       	ld	r24, Z
    20e4:	88 23       	and	r24, r24
    20e6:	e9 f4       	brne	.+58     	; 0x2122 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    20e8:	ab e3       	ldi	r26, 0x3B	; 59
    20ea:	b0 e0       	ldi	r27, 0x00	; 0
    20ec:	eb e3       	ldi	r30, 0x3B	; 59
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	80 81       	ld	r24, Z
    20f2:	48 2f       	mov	r20, r24
    20f4:	89 81       	ldd	r24, Y+1	; 0x01
    20f6:	9a 81       	ldd	r25, Y+2	; 0x02
    20f8:	88 0f       	add	r24, r24
    20fa:	99 1f       	adc	r25, r25
    20fc:	88 0f       	add	r24, r24
    20fe:	99 1f       	adc	r25, r25
    2100:	fc 01       	movw	r30, r24
    2102:	eb 5b       	subi	r30, 0xBB	; 187
    2104:	fe 4f       	sbci	r31, 0xFE	; 254
    2106:	80 81       	ld	r24, Z
    2108:	28 2f       	mov	r18, r24
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	02 2e       	mov	r0, r18
    2112:	02 c0       	rjmp	.+4      	; 0x2118 <DIO_ES_tInit+0x546>
    2114:	88 0f       	add	r24, r24
    2116:	99 1f       	adc	r25, r25
    2118:	0a 94       	dec	r0
    211a:	e2 f7       	brpl	.-8      	; 0x2114 <DIO_ES_tInit+0x542>
    211c:	80 95       	com	r24
    211e:	84 23       	and	r24, r20
    2120:	8c 93       	st	X, r24


ES_t DIO_ES_tInit(void)
{
	int i = 0;
	for(i=0 ; i<PIN_COUNT ; i++){
    2122:	89 81       	ldd	r24, Y+1	; 0x01
    2124:	9a 81       	ldd	r25, Y+2	; 0x02
    2126:	01 96       	adiw	r24, 0x01	; 1
    2128:	9a 83       	std	Y+2, r25	; 0x02
    212a:	89 83       	std	Y+1, r24	; 0x01
    212c:	89 81       	ldd	r24, Y+1	; 0x01
    212e:	9a 81       	ldd	r25, Y+2	; 0x02
    2130:	8a 31       	cpi	r24, 0x1A	; 26
    2132:	91 05       	cpc	r25, r1
    2134:	0c f4       	brge	.+2      	; 0x2138 <DIO_ES_tInit+0x566>
    2136:	57 cd       	rjmp	.-1362   	; 0x1be6 <DIO_ES_tInit+0x14>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
				}
			}
		}
	}
	return ES_OK;
    2138:	80 e0       	ldi	r24, 0x00	; 0
}
    213a:	0f 90       	pop	r0
    213c:	0f 90       	pop	r0
    213e:	cf 91       	pop	r28
    2140:	df 91       	pop	r29
    2142:	08 95       	ret

00002144 <LCD_ES_tTrigger_Enable>:
//ProtoType of static is defined in source file itself(Private declaration)
static ES_t LCD_ES_tTrigger_Enable(void);
static ES_t LCD_ES_tSet_Cursor_Pos(u8 row,u8 column);

//We make it static cuz we won't use it anywhere but here
static ES_t LCD_ES_tTrigger_Enable(void){
    2144:	df 93       	push	r29
    2146:	cf 93       	push	r28
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	e0 97       	sbiw	r28, 0x30	; 48
    214e:	0f b6       	in	r0, 0x3f	; 63
    2150:	f8 94       	cli
    2152:	de bf       	out	0x3e, r29	; 62
    2154:	0f be       	out	0x3f, r0	; 63
    2156:	cd bf       	out	0x3d, r28	; 61
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, HIGH);
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	60 e0       	ldi	r22, 0x00	; 0
    215c:	41 e0       	ldi	r20, 0x01	; 1
    215e:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	a0 e2       	ldi	r26, 0x20	; 32
    2168:	b1 e4       	ldi	r27, 0x41	; 65
    216a:	8d a7       	std	Y+45, r24	; 0x2d
    216c:	9e a7       	std	Y+46, r25	; 0x2e
    216e:	af a7       	std	Y+47, r26	; 0x2f
    2170:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2172:	6d a5       	ldd	r22, Y+45	; 0x2d
    2174:	7e a5       	ldd	r23, Y+46	; 0x2e
    2176:	8f a5       	ldd	r24, Y+47	; 0x2f
    2178:	98 a9       	ldd	r25, Y+48	; 0x30
    217a:	2b ea       	ldi	r18, 0xAB	; 171
    217c:	3a ea       	ldi	r19, 0xAA	; 170
    217e:	4a ea       	ldi	r20, 0xAA	; 170
    2180:	50 e4       	ldi	r21, 0x40	; 64
    2182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	89 a7       	std	Y+41, r24	; 0x29
    218c:	9a a7       	std	Y+42, r25	; 0x2a
    218e:	ab a7       	std	Y+43, r26	; 0x2b
    2190:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2192:	69 a5       	ldd	r22, Y+41	; 0x29
    2194:	7a a5       	ldd	r23, Y+42	; 0x2a
    2196:	8b a5       	ldd	r24, Y+43	; 0x2b
    2198:	9c a5       	ldd	r25, Y+44	; 0x2c
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	40 e8       	ldi	r20, 0x80	; 128
    21a0:	5f e3       	ldi	r21, 0x3F	; 63
    21a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21a6:	88 23       	and	r24, r24
    21a8:	1c f4       	brge	.+6      	; 0x21b0 <LCD_ES_tTrigger_Enable+0x6c>
		__ticks = 1;
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	88 a7       	std	Y+40, r24	; 0x28
    21ae:	91 c0       	rjmp	.+290    	; 0x22d2 <LCD_ES_tTrigger_Enable+0x18e>
	else if (__tmp > 255)
    21b0:	69 a5       	ldd	r22, Y+41	; 0x29
    21b2:	7a a5       	ldd	r23, Y+42	; 0x2a
    21b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    21b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	4f e7       	ldi	r20, 0x7F	; 127
    21be:	53 e4       	ldi	r21, 0x43	; 67
    21c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21c4:	18 16       	cp	r1, r24
    21c6:	0c f0       	brlt	.+2      	; 0x21ca <LCD_ES_tTrigger_Enable+0x86>
    21c8:	7b c0       	rjmp	.+246    	; 0x22c0 <LCD_ES_tTrigger_Enable+0x17c>
	{
		_delay_ms(__us / 1000.0);
    21ca:	6d a5       	ldd	r22, Y+45	; 0x2d
    21cc:	7e a5       	ldd	r23, Y+46	; 0x2e
    21ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    21d0:	98 a9       	ldd	r25, Y+48	; 0x30
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	4a e7       	ldi	r20, 0x7A	; 122
    21d8:	54 e4       	ldi	r21, 0x44	; 68
    21da:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	8c a3       	std	Y+36, r24	; 0x24
    21e4:	9d a3       	std	Y+37, r25	; 0x25
    21e6:	ae a3       	std	Y+38, r26	; 0x26
    21e8:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ea:	6c a1       	ldd	r22, Y+36	; 0x24
    21ec:	7d a1       	ldd	r23, Y+37	; 0x25
    21ee:	8e a1       	ldd	r24, Y+38	; 0x26
    21f0:	9f a1       	ldd	r25, Y+39	; 0x27
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	4a e7       	ldi	r20, 0x7A	; 122
    21f8:	55 e4       	ldi	r21, 0x45	; 69
    21fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	88 a3       	std	Y+32, r24	; 0x20
    2204:	99 a3       	std	Y+33, r25	; 0x21
    2206:	aa a3       	std	Y+34, r26	; 0x22
    2208:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    220a:	68 a1       	ldd	r22, Y+32	; 0x20
    220c:	79 a1       	ldd	r23, Y+33	; 0x21
    220e:	8a a1       	ldd	r24, Y+34	; 0x22
    2210:	9b a1       	ldd	r25, Y+35	; 0x23
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e8       	ldi	r20, 0x80	; 128
    2218:	5f e3       	ldi	r21, 0x3F	; 63
    221a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    221e:	88 23       	and	r24, r24
    2220:	2c f4       	brge	.+10     	; 0x222c <LCD_ES_tTrigger_Enable+0xe8>
		__ticks = 1;
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	9f 8f       	std	Y+31, r25	; 0x1f
    2228:	8e 8f       	std	Y+30, r24	; 0x1e
    222a:	3f c0       	rjmp	.+126    	; 0x22aa <LCD_ES_tTrigger_Enable+0x166>
	else if (__tmp > 65535)
    222c:	68 a1       	ldd	r22, Y+32	; 0x20
    222e:	79 a1       	ldd	r23, Y+33	; 0x21
    2230:	8a a1       	ldd	r24, Y+34	; 0x22
    2232:	9b a1       	ldd	r25, Y+35	; 0x23
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	3f ef       	ldi	r19, 0xFF	; 255
    2238:	4f e7       	ldi	r20, 0x7F	; 127
    223a:	57 e4       	ldi	r21, 0x47	; 71
    223c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2240:	18 16       	cp	r1, r24
    2242:	4c f5       	brge	.+82     	; 0x2296 <LCD_ES_tTrigger_Enable+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2244:	6c a1       	ldd	r22, Y+36	; 0x24
    2246:	7d a1       	ldd	r23, Y+37	; 0x25
    2248:	8e a1       	ldd	r24, Y+38	; 0x26
    224a:	9f a1       	ldd	r25, Y+39	; 0x27
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e2       	ldi	r20, 0x20	; 32
    2252:	51 e4       	ldi	r21, 0x41	; 65
    2254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	bc 01       	movw	r22, r24
    225e:	cd 01       	movw	r24, r26
    2260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	9f 8f       	std	Y+31, r25	; 0x1f
    226a:	8e 8f       	std	Y+30, r24	; 0x1e
    226c:	0f c0       	rjmp	.+30     	; 0x228c <LCD_ES_tTrigger_Enable+0x148>
    226e:	80 e9       	ldi	r24, 0x90	; 144
    2270:	91 e0       	ldi	r25, 0x01	; 1
    2272:	9d 8f       	std	Y+29, r25	; 0x1d
    2274:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2276:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2278:	9d 8d       	ldd	r25, Y+29	; 0x1d
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	f1 f7       	brne	.-4      	; 0x227a <LCD_ES_tTrigger_Enable+0x136>
    227e:	9d 8f       	std	Y+29, r25	; 0x1d
    2280:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2282:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2284:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	9f 8f       	std	Y+31, r25	; 0x1f
    228a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    228e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2290:	00 97       	sbiw	r24, 0x00	; 0
    2292:	69 f7       	brne	.-38     	; 0x226e <LCD_ES_tTrigger_Enable+0x12a>
    2294:	24 c0       	rjmp	.+72     	; 0x22de <LCD_ES_tTrigger_Enable+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2296:	68 a1       	ldd	r22, Y+32	; 0x20
    2298:	79 a1       	ldd	r23, Y+33	; 0x21
    229a:	8a a1       	ldd	r24, Y+34	; 0x22
    229c:	9b a1       	ldd	r25, Y+35	; 0x23
    229e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	9f 8f       	std	Y+31, r25	; 0x1f
    22a8:	8e 8f       	std	Y+30, r24	; 0x1e
    22aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22ac:	9f 8d       	ldd	r25, Y+31	; 0x1f
    22ae:	9b 8f       	std	Y+27, r25	; 0x1b
    22b0:	8a 8f       	std	Y+26, r24	; 0x1a
    22b2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    22b4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	f1 f7       	brne	.-4      	; 0x22b6 <LCD_ES_tTrigger_Enable+0x172>
    22ba:	9b 8f       	std	Y+27, r25	; 0x1b
    22bc:	8a 8f       	std	Y+26, r24	; 0x1a
    22be:	0f c0       	rjmp	.+30     	; 0x22de <LCD_ES_tTrigger_Enable+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22c0:	69 a5       	ldd	r22, Y+41	; 0x29
    22c2:	7a a5       	ldd	r23, Y+42	; 0x2a
    22c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    22c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    22c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	88 a7       	std	Y+40, r24	; 0x28
    22d2:	88 a5       	ldd	r24, Y+40	; 0x28
    22d4:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22d6:	89 8d       	ldd	r24, Y+25	; 0x19
    22d8:	8a 95       	dec	r24
    22da:	f1 f7       	brne	.-4      	; 0x22d8 <LCD_ES_tTrigger_Enable+0x194>
    22dc:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, LOW);
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	60 e0       	ldi	r22, 0x00	; 0
    22e2:	40 e0       	ldi	r20, 0x00	; 0
    22e4:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	aa ef       	ldi	r26, 0xFA	; 250
    22ee:	b4 e4       	ldi	r27, 0x44	; 68
    22f0:	8d 8b       	std	Y+21, r24	; 0x15
    22f2:	9e 8b       	std	Y+22, r25	; 0x16
    22f4:	af 8b       	std	Y+23, r26	; 0x17
    22f6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22f8:	6d 89       	ldd	r22, Y+21	; 0x15
    22fa:	7e 89       	ldd	r23, Y+22	; 0x16
    22fc:	8f 89       	ldd	r24, Y+23	; 0x17
    22fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2300:	2b ea       	ldi	r18, 0xAB	; 171
    2302:	3a ea       	ldi	r19, 0xAA	; 170
    2304:	4a ea       	ldi	r20, 0xAA	; 170
    2306:	50 e4       	ldi	r21, 0x40	; 64
    2308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	89 8b       	std	Y+17, r24	; 0x11
    2312:	9a 8b       	std	Y+18, r25	; 0x12
    2314:	ab 8b       	std	Y+19, r26	; 0x13
    2316:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2318:	69 89       	ldd	r22, Y+17	; 0x11
    231a:	7a 89       	ldd	r23, Y+18	; 0x12
    231c:	8b 89       	ldd	r24, Y+19	; 0x13
    231e:	9c 89       	ldd	r25, Y+20	; 0x14
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	40 e8       	ldi	r20, 0x80	; 128
    2326:	5f e3       	ldi	r21, 0x3F	; 63
    2328:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    232c:	88 23       	and	r24, r24
    232e:	1c f4       	brge	.+6      	; 0x2336 <LCD_ES_tTrigger_Enable+0x1f2>
		__ticks = 1;
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	88 8b       	std	Y+16, r24	; 0x10
    2334:	91 c0       	rjmp	.+290    	; 0x2458 <LCD_ES_tTrigger_Enable+0x314>
	else if (__tmp > 255)
    2336:	69 89       	ldd	r22, Y+17	; 0x11
    2338:	7a 89       	ldd	r23, Y+18	; 0x12
    233a:	8b 89       	ldd	r24, Y+19	; 0x13
    233c:	9c 89       	ldd	r25, Y+20	; 0x14
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	4f e7       	ldi	r20, 0x7F	; 127
    2344:	53 e4       	ldi	r21, 0x43	; 67
    2346:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    234a:	18 16       	cp	r1, r24
    234c:	0c f0       	brlt	.+2      	; 0x2350 <LCD_ES_tTrigger_Enable+0x20c>
    234e:	7b c0       	rjmp	.+246    	; 0x2446 <LCD_ES_tTrigger_Enable+0x302>
	{
		_delay_ms(__us / 1000.0);
    2350:	6d 89       	ldd	r22, Y+21	; 0x15
    2352:	7e 89       	ldd	r23, Y+22	; 0x16
    2354:	8f 89       	ldd	r24, Y+23	; 0x17
    2356:	98 8d       	ldd	r25, Y+24	; 0x18
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	4a e7       	ldi	r20, 0x7A	; 122
    235e:	54 e4       	ldi	r21, 0x44	; 68
    2360:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	8c 87       	std	Y+12, r24	; 0x0c
    236a:	9d 87       	std	Y+13, r25	; 0x0d
    236c:	ae 87       	std	Y+14, r26	; 0x0e
    236e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2370:	6c 85       	ldd	r22, Y+12	; 0x0c
    2372:	7d 85       	ldd	r23, Y+13	; 0x0d
    2374:	8e 85       	ldd	r24, Y+14	; 0x0e
    2376:	9f 85       	ldd	r25, Y+15	; 0x0f
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	4a e7       	ldi	r20, 0x7A	; 122
    237e:	55 e4       	ldi	r21, 0x45	; 69
    2380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	88 87       	std	Y+8, r24	; 0x08
    238a:	99 87       	std	Y+9, r25	; 0x09
    238c:	aa 87       	std	Y+10, r26	; 0x0a
    238e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2390:	68 85       	ldd	r22, Y+8	; 0x08
    2392:	79 85       	ldd	r23, Y+9	; 0x09
    2394:	8a 85       	ldd	r24, Y+10	; 0x0a
    2396:	9b 85       	ldd	r25, Y+11	; 0x0b
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	40 e8       	ldi	r20, 0x80	; 128
    239e:	5f e3       	ldi	r21, 0x3F	; 63
    23a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23a4:	88 23       	and	r24, r24
    23a6:	2c f4       	brge	.+10     	; 0x23b2 <LCD_ES_tTrigger_Enable+0x26e>
		__ticks = 1;
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	9f 83       	std	Y+7, r25	; 0x07
    23ae:	8e 83       	std	Y+6, r24	; 0x06
    23b0:	3f c0       	rjmp	.+126    	; 0x2430 <LCD_ES_tTrigger_Enable+0x2ec>
	else if (__tmp > 65535)
    23b2:	68 85       	ldd	r22, Y+8	; 0x08
    23b4:	79 85       	ldd	r23, Y+9	; 0x09
    23b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    23b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	3f ef       	ldi	r19, 0xFF	; 255
    23be:	4f e7       	ldi	r20, 0x7F	; 127
    23c0:	57 e4       	ldi	r21, 0x47	; 71
    23c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23c6:	18 16       	cp	r1, r24
    23c8:	4c f5       	brge	.+82     	; 0x241c <LCD_ES_tTrigger_Enable+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ca:	6c 85       	ldd	r22, Y+12	; 0x0c
    23cc:	7d 85       	ldd	r23, Y+13	; 0x0d
    23ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    23d0:	9f 85       	ldd	r25, Y+15	; 0x0f
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	40 e2       	ldi	r20, 0x20	; 32
    23d8:	51 e4       	ldi	r21, 0x41	; 65
    23da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	bc 01       	movw	r22, r24
    23e4:	cd 01       	movw	r24, r26
    23e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	9f 83       	std	Y+7, r25	; 0x07
    23f0:	8e 83       	std	Y+6, r24	; 0x06
    23f2:	0f c0       	rjmp	.+30     	; 0x2412 <LCD_ES_tTrigger_Enable+0x2ce>
    23f4:	80 e9       	ldi	r24, 0x90	; 144
    23f6:	91 e0       	ldi	r25, 0x01	; 1
    23f8:	9d 83       	std	Y+5, r25	; 0x05
    23fa:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23fc:	8c 81       	ldd	r24, Y+4	; 0x04
    23fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	f1 f7       	brne	.-4      	; 0x2400 <LCD_ES_tTrigger_Enable+0x2bc>
    2404:	9d 83       	std	Y+5, r25	; 0x05
    2406:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2408:	8e 81       	ldd	r24, Y+6	; 0x06
    240a:	9f 81       	ldd	r25, Y+7	; 0x07
    240c:	01 97       	sbiw	r24, 0x01	; 1
    240e:	9f 83       	std	Y+7, r25	; 0x07
    2410:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2412:	8e 81       	ldd	r24, Y+6	; 0x06
    2414:	9f 81       	ldd	r25, Y+7	; 0x07
    2416:	00 97       	sbiw	r24, 0x00	; 0
    2418:	69 f7       	brne	.-38     	; 0x23f4 <LCD_ES_tTrigger_Enable+0x2b0>
    241a:	24 c0       	rjmp	.+72     	; 0x2464 <LCD_ES_tTrigger_Enable+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    241c:	68 85       	ldd	r22, Y+8	; 0x08
    241e:	79 85       	ldd	r23, Y+9	; 0x09
    2420:	8a 85       	ldd	r24, Y+10	; 0x0a
    2422:	9b 85       	ldd	r25, Y+11	; 0x0b
    2424:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	9f 83       	std	Y+7, r25	; 0x07
    242e:	8e 83       	std	Y+6, r24	; 0x06
    2430:	8e 81       	ldd	r24, Y+6	; 0x06
    2432:	9f 81       	ldd	r25, Y+7	; 0x07
    2434:	9b 83       	std	Y+3, r25	; 0x03
    2436:	8a 83       	std	Y+2, r24	; 0x02
    2438:	8a 81       	ldd	r24, Y+2	; 0x02
    243a:	9b 81       	ldd	r25, Y+3	; 0x03
    243c:	01 97       	sbiw	r24, 0x01	; 1
    243e:	f1 f7       	brne	.-4      	; 0x243c <LCD_ES_tTrigger_Enable+0x2f8>
    2440:	9b 83       	std	Y+3, r25	; 0x03
    2442:	8a 83       	std	Y+2, r24	; 0x02
    2444:	0f c0       	rjmp	.+30     	; 0x2464 <LCD_ES_tTrigger_Enable+0x320>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2446:	69 89       	ldd	r22, Y+17	; 0x11
    2448:	7a 89       	ldd	r23, Y+18	; 0x12
    244a:	8b 89       	ldd	r24, Y+19	; 0x13
    244c:	9c 89       	ldd	r25, Y+20	; 0x14
    244e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	88 8b       	std	Y+16, r24	; 0x10
    2458:	88 89       	ldd	r24, Y+16	; 0x10
    245a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    245c:	89 81       	ldd	r24, Y+1	; 0x01
    245e:	8a 95       	dec	r24
    2460:	f1 f7       	brne	.-4      	; 0x245e <LCD_ES_tTrigger_Enable+0x31a>
    2462:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2000);
	return ES_OK;
    2464:	80 e0       	ldi	r24, 0x00	; 0
}
    2466:	e0 96       	adiw	r28, 0x30	; 48
    2468:	0f b6       	in	r0, 0x3f	; 63
    246a:	f8 94       	cli
    246c:	de bf       	out	0x3e, r29	; 62
    246e:	0f be       	out	0x3f, r0	; 63
    2470:	cd bf       	out	0x3d, r28	; 61
    2472:	cf 91       	pop	r28
    2474:	df 91       	pop	r29
    2476:	08 95       	ret

00002478 <Lcd_ES_tInit>:


ES_t Lcd_ES_tInit(){
    2478:	df 93       	push	r29
    247a:	cf 93       	push	r28
    247c:	cd b7       	in	r28, 0x3d	; 61
    247e:	de b7       	in	r29, 0x3e	; 62
#if LCD_MODE == FOUR_BIT_MODE
	Lcd_ES_tsendCmd(Four_BitMode);   /* Go into 4-bit operating mode*/
    2480:	82 e0       	ldi	r24, 0x02	; 2
    2482:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(D4_D7);  /* 2 Line, 5*7 matrix in 4-bit mode */
    2486:	88 e2       	ldi	r24, 0x28	; 40
    2488:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
    248c:	8e e0       	ldi	r24, 0x0E	; 14
    248e:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
    2492:	86 e0       	ldi	r24, 0x06	; 6
    2494:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <Lcd_ES_tsendCmd>
	return ES_OK;
    249e:	80 e0       	ldi	r24, 0x00	; 0
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
	return ES_OK;
#endif
}
    24a0:	cf 91       	pop	r28
    24a2:	df 91       	pop	r29
    24a4:	08 95       	ret

000024a6 <lcd_ES_tclear>:
 *
 *	Ex. 0x28 0b 0010 1000  //Read bit by bit and see if it is low or high
 */

ES_t lcd_ES_tclear()
{
    24a6:	df 93       	push	r29
    24a8:	cf 93       	push	r28
    24aa:	cd b7       	in	r28, 0x3d	; 61
    24ac:	de b7       	in	r29, 0x3e	; 62
    24ae:	2e 97       	sbiw	r28, 0x0e	; 14
    24b0:	0f b6       	in	r0, 0x3f	; 63
    24b2:	f8 94       	cli
    24b4:	de bf       	out	0x3e, r29	; 62
    24b6:	0f be       	out	0x3f, r0	; 63
    24b8:	cd bf       	out	0x3d, r28	; 61
	Lcd_ES_tsendCmd(CLR_Display);
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <Lcd_ES_tsendCmd>
    24c0:	80 e0       	ldi	r24, 0x00	; 0
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	a0 e0       	ldi	r26, 0x00	; 0
    24c6:	b0 e4       	ldi	r27, 0x40	; 64
    24c8:	8b 87       	std	Y+11, r24	; 0x0b
    24ca:	9c 87       	std	Y+12, r25	; 0x0c
    24cc:	ad 87       	std	Y+13, r26	; 0x0d
    24ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	4a e7       	ldi	r20, 0x7A	; 122
    24de:	55 e4       	ldi	r21, 0x45	; 69
    24e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	8f 83       	std	Y+7, r24	; 0x07
    24ea:	98 87       	std	Y+8, r25	; 0x08
    24ec:	a9 87       	std	Y+9, r26	; 0x09
    24ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24f0:	6f 81       	ldd	r22, Y+7	; 0x07
    24f2:	78 85       	ldd	r23, Y+8	; 0x08
    24f4:	89 85       	ldd	r24, Y+9	; 0x09
    24f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	40 e8       	ldi	r20, 0x80	; 128
    24fe:	5f e3       	ldi	r21, 0x3F	; 63
    2500:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2504:	88 23       	and	r24, r24
    2506:	2c f4       	brge	.+10     	; 0x2512 <lcd_ES_tclear+0x6c>
		__ticks = 1;
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	9e 83       	std	Y+6, r25	; 0x06
    250e:	8d 83       	std	Y+5, r24	; 0x05
    2510:	3f c0       	rjmp	.+126    	; 0x2590 <lcd_ES_tclear+0xea>
	else if (__tmp > 65535)
    2512:	6f 81       	ldd	r22, Y+7	; 0x07
    2514:	78 85       	ldd	r23, Y+8	; 0x08
    2516:	89 85       	ldd	r24, Y+9	; 0x09
    2518:	9a 85       	ldd	r25, Y+10	; 0x0a
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	3f ef       	ldi	r19, 0xFF	; 255
    251e:	4f e7       	ldi	r20, 0x7F	; 127
    2520:	57 e4       	ldi	r21, 0x47	; 71
    2522:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2526:	18 16       	cp	r1, r24
    2528:	4c f5       	brge	.+82     	; 0x257c <lcd_ES_tclear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    252a:	6b 85       	ldd	r22, Y+11	; 0x0b
    252c:	7c 85       	ldd	r23, Y+12	; 0x0c
    252e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2530:	9e 85       	ldd	r25, Y+14	; 0x0e
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	40 e2       	ldi	r20, 0x20	; 32
    2538:	51 e4       	ldi	r21, 0x41	; 65
    253a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	bc 01       	movw	r22, r24
    2544:	cd 01       	movw	r24, r26
    2546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	9e 83       	std	Y+6, r25	; 0x06
    2550:	8d 83       	std	Y+5, r24	; 0x05
    2552:	0f c0       	rjmp	.+30     	; 0x2572 <lcd_ES_tclear+0xcc>
    2554:	80 e9       	ldi	r24, 0x90	; 144
    2556:	91 e0       	ldi	r25, 0x01	; 1
    2558:	9c 83       	std	Y+4, r25	; 0x04
    255a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    255c:	8b 81       	ldd	r24, Y+3	; 0x03
    255e:	9c 81       	ldd	r25, Y+4	; 0x04
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	f1 f7       	brne	.-4      	; 0x2560 <lcd_ES_tclear+0xba>
    2564:	9c 83       	std	Y+4, r25	; 0x04
    2566:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2568:	8d 81       	ldd	r24, Y+5	; 0x05
    256a:	9e 81       	ldd	r25, Y+6	; 0x06
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	9e 83       	std	Y+6, r25	; 0x06
    2570:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2572:	8d 81       	ldd	r24, Y+5	; 0x05
    2574:	9e 81       	ldd	r25, Y+6	; 0x06
    2576:	00 97       	sbiw	r24, 0x00	; 0
    2578:	69 f7       	brne	.-38     	; 0x2554 <lcd_ES_tclear+0xae>
    257a:	14 c0       	rjmp	.+40     	; 0x25a4 <lcd_ES_tclear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    257c:	6f 81       	ldd	r22, Y+7	; 0x07
    257e:	78 85       	ldd	r23, Y+8	; 0x08
    2580:	89 85       	ldd	r24, Y+9	; 0x09
    2582:	9a 85       	ldd	r25, Y+10	; 0x0a
    2584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	9e 83       	std	Y+6, r25	; 0x06
    258e:	8d 83       	std	Y+5, r24	; 0x05
    2590:	8d 81       	ldd	r24, Y+5	; 0x05
    2592:	9e 81       	ldd	r25, Y+6	; 0x06
    2594:	9a 83       	std	Y+2, r25	; 0x02
    2596:	89 83       	std	Y+1, r24	; 0x01
    2598:	89 81       	ldd	r24, Y+1	; 0x01
    259a:	9a 81       	ldd	r25, Y+2	; 0x02
    259c:	01 97       	sbiw	r24, 0x01	; 1
    259e:	f1 f7       	brne	.-4      	; 0x259c <lcd_ES_tclear+0xf6>
    25a0:	9a 83       	std	Y+2, r25	; 0x02
    25a2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	return ES_OK;
    25a4:	80 e0       	ldi	r24, 0x00	; 0
}
    25a6:	2e 96       	adiw	r28, 0x0e	; 14
    25a8:	0f b6       	in	r0, 0x3f	; 63
    25aa:	f8 94       	cli
    25ac:	de bf       	out	0x3e, r29	; 62
    25ae:	0f be       	out	0x3f, r0	; 63
    25b0:	cd bf       	out	0x3d, r28	; 61
    25b2:	cf 91       	pop	r28
    25b4:	df 91       	pop	r29
    25b6:	08 95       	ret

000025b8 <Lcd_ES_tsendCmd>:

ES_t Lcd_ES_tsendCmd(u8 cmd){
    25b8:	df 93       	push	r29
    25ba:	cf 93       	push	r28
    25bc:	0f 92       	push	r0
    25be:	cd b7       	in	r28, 0x3d	; 61
    25c0:	de b7       	in	r29, 0x3e	; 62
    25c2:	89 83       	std	Y+1, r24	; 0x01
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, LOW);
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	61 e0       	ldi	r22, 0x01	; 1
    25c8:	40 e0       	ldi	r20, 0x00	; 0
    25ca:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
	// DIO_ES_tGetPinValue, DIO_ES_tSetPinValue
	// if(GET_BIT(cmd,7)){Dio_Write(D7,HIGH);}else{Dio_write(D7,LOW);}
	// We use ternary operator instead
#if LCD_MODE == FOUR_BIT_MODE
	(GET_BIT(cmd,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    25ce:	89 81       	ldd	r24, Y+1	; 0x01
    25d0:	88 23       	and	r24, r24
    25d2:	34 f4       	brge	.+12     	; 0x25e0 <Lcd_ES_tsendCmd+0x28>
    25d4:	80 e0       	ldi	r24, 0x00	; 0
    25d6:	66 e0       	ldi	r22, 0x06	; 6
    25d8:	41 e0       	ldi	r20, 0x01	; 1
    25da:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
    25de:	05 c0       	rjmp	.+10     	; 0x25ea <Lcd_ES_tsendCmd+0x32>
    25e0:	80 e0       	ldi	r24, 0x00	; 0
    25e2:	66 e0       	ldi	r22, 0x06	; 6
    25e4:	40 e0       	ldi	r20, 0x00	; 0
    25e6:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    25ea:	89 81       	ldd	r24, Y+1	; 0x01
    25ec:	82 95       	swap	r24
    25ee:	86 95       	lsr	r24
    25f0:	86 95       	lsr	r24
    25f2:	83 70       	andi	r24, 0x03	; 3
    25f4:	88 2f       	mov	r24, r24
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	81 70       	andi	r24, 0x01	; 1
    25fa:	90 70       	andi	r25, 0x00	; 0
    25fc:	88 23       	and	r24, r24
    25fe:	31 f0       	breq	.+12     	; 0x260c <Lcd_ES_tsendCmd+0x54>
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	65 e0       	ldi	r22, 0x05	; 5
    2604:	41 e0       	ldi	r20, 0x01	; 1
    2606:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
    260a:	05 c0       	rjmp	.+10     	; 0x2616 <Lcd_ES_tsendCmd+0x5e>
    260c:	80 e0       	ldi	r24, 0x00	; 0
    260e:	65 e0       	ldi	r22, 0x05	; 5
    2610:	40 e0       	ldi	r20, 0x00	; 0
    2612:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	82 95       	swap	r24
    261a:	86 95       	lsr	r24
    261c:	87 70       	andi	r24, 0x07	; 7
    261e:	88 2f       	mov	r24, r24
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	81 70       	andi	r24, 0x01	; 1
    2624:	90 70       	andi	r25, 0x00	; 0
    2626:	88 23       	and	r24, r24
    2628:	31 f0       	breq	.+12     	; 0x2636 <Lcd_ES_tsendCmd+0x7e>
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	64 e0       	ldi	r22, 0x04	; 4
    262e:	41 e0       	ldi	r20, 0x01	; 1
    2630:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
    2634:	05 c0       	rjmp	.+10     	; 0x2640 <Lcd_ES_tsendCmd+0x88>
    2636:	80 e0       	ldi	r24, 0x00	; 0
    2638:	64 e0       	ldi	r22, 0x04	; 4
    263a:	40 e0       	ldi	r20, 0x00	; 0
    263c:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    2640:	89 81       	ldd	r24, Y+1	; 0x01
    2642:	82 95       	swap	r24
    2644:	8f 70       	andi	r24, 0x0F	; 15
    2646:	88 2f       	mov	r24, r24
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	81 70       	andi	r24, 0x01	; 1
    264c:	90 70       	andi	r25, 0x00	; 0
    264e:	88 23       	and	r24, r24
    2650:	31 f0       	breq	.+12     	; 0x265e <Lcd_ES_tsendCmd+0xa6>
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	63 e0       	ldi	r22, 0x03	; 3
    2656:	41 e0       	ldi	r20, 0x01	; 1
    2658:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
    265c:	05 c0       	rjmp	.+10     	; 0x2668 <Lcd_ES_tsendCmd+0xb0>
    265e:	80 e0       	ldi	r24, 0x00	; 0
    2660:	63 e0       	ldi	r22, 0x03	; 3
    2662:	40 e0       	ldi	r20, 0x00	; 0
    2664:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    2668:	0e 94 a2 10 	call	0x2144	; 0x2144 <LCD_ES_tTrigger_Enable>
	(GET_BIT(cmd,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    266c:	89 81       	ldd	r24, Y+1	; 0x01
    266e:	86 95       	lsr	r24
    2670:	86 95       	lsr	r24
    2672:	86 95       	lsr	r24
    2674:	88 2f       	mov	r24, r24
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	81 70       	andi	r24, 0x01	; 1
    267a:	90 70       	andi	r25, 0x00	; 0
    267c:	88 23       	and	r24, r24
    267e:	31 f0       	breq	.+12     	; 0x268c <Lcd_ES_tsendCmd+0xd4>
    2680:	80 e0       	ldi	r24, 0x00	; 0
    2682:	66 e0       	ldi	r22, 0x06	; 6
    2684:	41 e0       	ldi	r20, 0x01	; 1
    2686:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
    268a:	05 c0       	rjmp	.+10     	; 0x2696 <Lcd_ES_tsendCmd+0xde>
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	66 e0       	ldi	r22, 0x06	; 6
    2690:	40 e0       	ldi	r20, 0x00	; 0
    2692:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    2696:	89 81       	ldd	r24, Y+1	; 0x01
    2698:	86 95       	lsr	r24
    269a:	86 95       	lsr	r24
    269c:	88 2f       	mov	r24, r24
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	81 70       	andi	r24, 0x01	; 1
    26a2:	90 70       	andi	r25, 0x00	; 0
    26a4:	88 23       	and	r24, r24
    26a6:	31 f0       	breq	.+12     	; 0x26b4 <Lcd_ES_tsendCmd+0xfc>
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	65 e0       	ldi	r22, 0x05	; 5
    26ac:	41 e0       	ldi	r20, 0x01	; 1
    26ae:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
    26b2:	05 c0       	rjmp	.+10     	; 0x26be <Lcd_ES_tsendCmd+0x106>
    26b4:	80 e0       	ldi	r24, 0x00	; 0
    26b6:	65 e0       	ldi	r22, 0x05	; 5
    26b8:	40 e0       	ldi	r20, 0x00	; 0
    26ba:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    26be:	89 81       	ldd	r24, Y+1	; 0x01
    26c0:	86 95       	lsr	r24
    26c2:	88 2f       	mov	r24, r24
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	81 70       	andi	r24, 0x01	; 1
    26c8:	90 70       	andi	r25, 0x00	; 0
    26ca:	88 23       	and	r24, r24
    26cc:	31 f0       	breq	.+12     	; 0x26da <Lcd_ES_tsendCmd+0x122>
    26ce:	80 e0       	ldi	r24, 0x00	; 0
    26d0:	64 e0       	ldi	r22, 0x04	; 4
    26d2:	41 e0       	ldi	r20, 0x01	; 1
    26d4:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
    26d8:	05 c0       	rjmp	.+10     	; 0x26e4 <Lcd_ES_tsendCmd+0x12c>
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	64 e0       	ldi	r22, 0x04	; 4
    26de:	40 e0       	ldi	r20, 0x00	; 0
    26e0:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    26e4:	89 81       	ldd	r24, Y+1	; 0x01
    26e6:	88 2f       	mov	r24, r24
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	81 70       	andi	r24, 0x01	; 1
    26ec:	90 70       	andi	r25, 0x00	; 0
    26ee:	88 23       	and	r24, r24
    26f0:	31 f0       	breq	.+12     	; 0x26fe <Lcd_ES_tsendCmd+0x146>
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	63 e0       	ldi	r22, 0x03	; 3
    26f6:	41 e0       	ldi	r20, 0x01	; 1
    26f8:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
    26fc:	05 c0       	rjmp	.+10     	; 0x2708 <Lcd_ES_tsendCmd+0x150>
    26fe:	80 e0       	ldi	r24, 0x00	; 0
    2700:	63 e0       	ldi	r22, 0x03	; 3
    2702:	40 e0       	ldi	r20, 0x00	; 0
    2704:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    2708:	0e 94 a2 10 	call	0x2144	; 0x2144 <LCD_ES_tTrigger_Enable>
	return ES_OK;
    270c:	80 e0       	ldi	r24, 0x00	; 0
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D0,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D0,LOW);
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif
}
    270e:	0f 90       	pop	r0
    2710:	cf 91       	pop	r28
    2712:	df 91       	pop	r29
    2714:	08 95       	ret

00002716 <Lcd_ES_tsendChar>:
ES_t Lcd_ES_tsendChar(u8 data){
    2716:	df 93       	push	r29
    2718:	cf 93       	push	r28
    271a:	0f 92       	push	r0
    271c:	cd b7       	in	r28, 0x3d	; 61
    271e:	de b7       	in	r29, 0x3e	; 62
    2720:	89 83       	std	Y+1, r24	; 0x01
#if LCD_MODE == FOUR_BIT_MODE
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	61 e0       	ldi	r22, 0x01	; 1
    2726:	41 e0       	ldi	r20, 0x01	; 1
    2728:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
	(GET_BIT(data,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    272c:	89 81       	ldd	r24, Y+1	; 0x01
    272e:	88 23       	and	r24, r24
    2730:	34 f4       	brge	.+12     	; 0x273e <Lcd_ES_tsendChar+0x28>
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	66 e0       	ldi	r22, 0x06	; 6
    2736:	41 e0       	ldi	r20, 0x01	; 1
    2738:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
    273c:	05 c0       	rjmp	.+10     	; 0x2748 <Lcd_ES_tsendChar+0x32>
    273e:	80 e0       	ldi	r24, 0x00	; 0
    2740:	66 e0       	ldi	r22, 0x06	; 6
    2742:	40 e0       	ldi	r20, 0x00	; 0
    2744:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
	(GET_BIT(data,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    2748:	89 81       	ldd	r24, Y+1	; 0x01
    274a:	82 95       	swap	r24
    274c:	86 95       	lsr	r24
    274e:	86 95       	lsr	r24
    2750:	83 70       	andi	r24, 0x03	; 3
    2752:	88 2f       	mov	r24, r24
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	81 70       	andi	r24, 0x01	; 1
    2758:	90 70       	andi	r25, 0x00	; 0
    275a:	88 23       	and	r24, r24
    275c:	31 f0       	breq	.+12     	; 0x276a <Lcd_ES_tsendChar+0x54>
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	65 e0       	ldi	r22, 0x05	; 5
    2762:	41 e0       	ldi	r20, 0x01	; 1
    2764:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
    2768:	05 c0       	rjmp	.+10     	; 0x2774 <Lcd_ES_tsendChar+0x5e>
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	65 e0       	ldi	r22, 0x05	; 5
    276e:	40 e0       	ldi	r20, 0x00	; 0
    2770:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
	(GET_BIT(data,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    2774:	89 81       	ldd	r24, Y+1	; 0x01
    2776:	82 95       	swap	r24
    2778:	86 95       	lsr	r24
    277a:	87 70       	andi	r24, 0x07	; 7
    277c:	88 2f       	mov	r24, r24
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	81 70       	andi	r24, 0x01	; 1
    2782:	90 70       	andi	r25, 0x00	; 0
    2784:	88 23       	and	r24, r24
    2786:	31 f0       	breq	.+12     	; 0x2794 <Lcd_ES_tsendChar+0x7e>
    2788:	80 e0       	ldi	r24, 0x00	; 0
    278a:	64 e0       	ldi	r22, 0x04	; 4
    278c:	41 e0       	ldi	r20, 0x01	; 1
    278e:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
    2792:	05 c0       	rjmp	.+10     	; 0x279e <Lcd_ES_tsendChar+0x88>
    2794:	80 e0       	ldi	r24, 0x00	; 0
    2796:	64 e0       	ldi	r22, 0x04	; 4
    2798:	40 e0       	ldi	r20, 0x00	; 0
    279a:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
	(GET_BIT(data,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    279e:	89 81       	ldd	r24, Y+1	; 0x01
    27a0:	82 95       	swap	r24
    27a2:	8f 70       	andi	r24, 0x0F	; 15
    27a4:	88 2f       	mov	r24, r24
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	81 70       	andi	r24, 0x01	; 1
    27aa:	90 70       	andi	r25, 0x00	; 0
    27ac:	88 23       	and	r24, r24
    27ae:	31 f0       	breq	.+12     	; 0x27bc <Lcd_ES_tsendChar+0xa6>
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	63 e0       	ldi	r22, 0x03	; 3
    27b4:	41 e0       	ldi	r20, 0x01	; 1
    27b6:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
    27ba:	05 c0       	rjmp	.+10     	; 0x27c6 <Lcd_ES_tsendChar+0xb0>
    27bc:	80 e0       	ldi	r24, 0x00	; 0
    27be:	63 e0       	ldi	r22, 0x03	; 3
    27c0:	40 e0       	ldi	r20, 0x00	; 0
    27c2:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    27c6:	0e 94 a2 10 	call	0x2144	; 0x2144 <LCD_ES_tTrigger_Enable>
	(GET_BIT(data,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
    27cc:	86 95       	lsr	r24
    27ce:	86 95       	lsr	r24
    27d0:	86 95       	lsr	r24
    27d2:	88 2f       	mov	r24, r24
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	81 70       	andi	r24, 0x01	; 1
    27d8:	90 70       	andi	r25, 0x00	; 0
    27da:	88 23       	and	r24, r24
    27dc:	31 f0       	breq	.+12     	; 0x27ea <Lcd_ES_tsendChar+0xd4>
    27de:	80 e0       	ldi	r24, 0x00	; 0
    27e0:	66 e0       	ldi	r22, 0x06	; 6
    27e2:	41 e0       	ldi	r20, 0x01	; 1
    27e4:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
    27e8:	05 c0       	rjmp	.+10     	; 0x27f4 <Lcd_ES_tsendChar+0xde>
    27ea:	80 e0       	ldi	r24, 0x00	; 0
    27ec:	66 e0       	ldi	r22, 0x06	; 6
    27ee:	40 e0       	ldi	r20, 0x00	; 0
    27f0:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
	(GET_BIT(data,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    27f4:	89 81       	ldd	r24, Y+1	; 0x01
    27f6:	86 95       	lsr	r24
    27f8:	86 95       	lsr	r24
    27fa:	88 2f       	mov	r24, r24
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	81 70       	andi	r24, 0x01	; 1
    2800:	90 70       	andi	r25, 0x00	; 0
    2802:	88 23       	and	r24, r24
    2804:	31 f0       	breq	.+12     	; 0x2812 <Lcd_ES_tsendChar+0xfc>
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	65 e0       	ldi	r22, 0x05	; 5
    280a:	41 e0       	ldi	r20, 0x01	; 1
    280c:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
    2810:	05 c0       	rjmp	.+10     	; 0x281c <Lcd_ES_tsendChar+0x106>
    2812:	80 e0       	ldi	r24, 0x00	; 0
    2814:	65 e0       	ldi	r22, 0x05	; 5
    2816:	40 e0       	ldi	r20, 0x00	; 0
    2818:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
	(GET_BIT(data,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    281c:	89 81       	ldd	r24, Y+1	; 0x01
    281e:	86 95       	lsr	r24
    2820:	88 2f       	mov	r24, r24
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	81 70       	andi	r24, 0x01	; 1
    2826:	90 70       	andi	r25, 0x00	; 0
    2828:	88 23       	and	r24, r24
    282a:	31 f0       	breq	.+12     	; 0x2838 <Lcd_ES_tsendChar+0x122>
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	64 e0       	ldi	r22, 0x04	; 4
    2830:	41 e0       	ldi	r20, 0x01	; 1
    2832:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
    2836:	05 c0       	rjmp	.+10     	; 0x2842 <Lcd_ES_tsendChar+0x12c>
    2838:	80 e0       	ldi	r24, 0x00	; 0
    283a:	64 e0       	ldi	r22, 0x04	; 4
    283c:	40 e0       	ldi	r20, 0x00	; 0
    283e:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
	(GET_BIT(data,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    2842:	89 81       	ldd	r24, Y+1	; 0x01
    2844:	88 2f       	mov	r24, r24
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	81 70       	andi	r24, 0x01	; 1
    284a:	90 70       	andi	r25, 0x00	; 0
    284c:	88 23       	and	r24, r24
    284e:	31 f0       	breq	.+12     	; 0x285c <Lcd_ES_tsendChar+0x146>
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	63 e0       	ldi	r22, 0x03	; 3
    2854:	41 e0       	ldi	r20, 0x01	; 1
    2856:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
    285a:	05 c0       	rjmp	.+10     	; 0x2866 <Lcd_ES_tsendChar+0x150>
    285c:	80 e0       	ldi	r24, 0x00	; 0
    285e:	63 e0       	ldi	r22, 0x03	; 3
    2860:	40 e0       	ldi	r20, 0x00	; 0
    2862:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    2866:	0e 94 a2 10 	call	0x2144	; 0x2144 <LCD_ES_tTrigger_Enable>
	return ES_OK;
    286a:	80 e0       	ldi	r24, 0x00	; 0
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif

}
    286c:	0f 90       	pop	r0
    286e:	cf 91       	pop	r28
    2870:	df 91       	pop	r29
    2872:	08 95       	ret

00002874 <Lcd_ES_tsendString>:

ES_t Lcd_ES_tsendString(char *data)
{
    2874:	df 93       	push	r29
    2876:	cf 93       	push	r28
    2878:	00 d0       	rcall	.+0      	; 0x287a <Lcd_ES_tsendString+0x6>
    287a:	0f 92       	push	r0
    287c:	cd b7       	in	r28, 0x3d	; 61
    287e:	de b7       	in	r29, 0x3e	; 62
    2880:	9b 83       	std	Y+3, r25	; 0x03
    2882:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	61 e0       	ldi	r22, 0x01	; 1
    2888:	41 e0       	ldi	r20, 0x01	; 1
    288a:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>

	unsigned char i=0;
    288e:	19 82       	std	Y+1, r1	; 0x01
    2890:	0e c0       	rjmp	.+28     	; 0x28ae <Lcd_ES_tsendString+0x3a>
	while(data[i]!=0)
	{
		Lcd_ES_tsendChar(data[i]);
    2892:	89 81       	ldd	r24, Y+1	; 0x01
    2894:	28 2f       	mov	r18, r24
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	8a 81       	ldd	r24, Y+2	; 0x02
    289a:	9b 81       	ldd	r25, Y+3	; 0x03
    289c:	fc 01       	movw	r30, r24
    289e:	e2 0f       	add	r30, r18
    28a0:	f3 1f       	adc	r31, r19
    28a2:	80 81       	ld	r24, Z
    28a4:	0e 94 8b 13 	call	0x2716	; 0x2716 <Lcd_ES_tsendChar>
		i++;
    28a8:	89 81       	ldd	r24, Y+1	; 0x01
    28aa:	8f 5f       	subi	r24, 0xFF	; 255
    28ac:	89 83       	std	Y+1, r24	; 0x01
ES_t Lcd_ES_tsendString(char *data)
{
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);

	unsigned char i=0;
	while(data[i]!=0)
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	28 2f       	mov	r18, r24
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	8a 81       	ldd	r24, Y+2	; 0x02
    28b6:	9b 81       	ldd	r25, Y+3	; 0x03
    28b8:	fc 01       	movw	r30, r24
    28ba:	e2 0f       	add	r30, r18
    28bc:	f3 1f       	adc	r31, r19
    28be:	80 81       	ld	r24, Z
    28c0:	88 23       	and	r24, r24
    28c2:	39 f7       	brne	.-50     	; 0x2892 <Lcd_ES_tsendString+0x1e>
	{
		Lcd_ES_tsendChar(data[i]);
		i++;
	}
	return ES_OK;
    28c4:	80 e0       	ldi	r24, 0x00	; 0
}
    28c6:	0f 90       	pop	r0
    28c8:	0f 90       	pop	r0
    28ca:	0f 90       	pop	r0
    28cc:	cf 91       	pop	r28
    28ce:	df 91       	pop	r29
    28d0:	08 95       	ret

000028d2 <Lcd_ES_tsendString_xy>:

ES_t Lcd_ES_tsendString_xy(char *data,u8 row,u8 col){
    28d2:	df 93       	push	r29
    28d4:	cf 93       	push	r28
    28d6:	00 d0       	rcall	.+0      	; 0x28d8 <Lcd_ES_tsendString_xy+0x6>
    28d8:	00 d0       	rcall	.+0      	; 0x28da <Lcd_ES_tsendString_xy+0x8>
    28da:	cd b7       	in	r28, 0x3d	; 61
    28dc:	de b7       	in	r29, 0x3e	; 62
    28de:	9a 83       	std	Y+2, r25	; 0x02
    28e0:	89 83       	std	Y+1, r24	; 0x01
    28e2:	6b 83       	std	Y+3, r22	; 0x03
    28e4:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	61 e0       	ldi	r22, 0x01	; 1
    28ea:	41 e0       	ldi	r20, 0x01	; 1
    28ec:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>


	LCD_ES_tSet_Cursor_Pos(row,col);
    28f0:	8b 81       	ldd	r24, Y+3	; 0x03
    28f2:	6c 81       	ldd	r22, Y+4	; 0x04
    28f4:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_ES_tSet_Cursor_Pos>
	Lcd_ES_tsendString(data);
    28f8:	89 81       	ldd	r24, Y+1	; 0x01
    28fa:	9a 81       	ldd	r25, Y+2	; 0x02
    28fc:	0e 94 3a 14 	call	0x2874	; 0x2874 <Lcd_ES_tsendString>
	return ES_OK;
    2900:	80 e0       	ldi	r24, 0x00	; 0

}
    2902:	0f 90       	pop	r0
    2904:	0f 90       	pop	r0
    2906:	0f 90       	pop	r0
    2908:	0f 90       	pop	r0
    290a:	cf 91       	pop	r28
    290c:	df 91       	pop	r29
    290e:	08 95       	ret

00002910 <Lcd_ES_tdisplayNum>:


//A function to display Numbers instead of characters
ES_t Lcd_ES_tdisplayNum(u16 num)
{
    2910:	df 93       	push	r29
    2912:	cf 93       	push	r28
    2914:	cd b7       	in	r28, 0x3d	; 61
    2916:	de b7       	in	r29, 0x3e	; 62
    2918:	2e 97       	sbiw	r28, 0x0e	; 14
    291a:	0f b6       	in	r0, 0x3f	; 63
    291c:	f8 94       	cli
    291e:	de bf       	out	0x3e, r29	; 62
    2920:	0f be       	out	0x3f, r0	; 63
    2922:	cd bf       	out	0x3d, r28	; 61
    2924:	9e 87       	std	Y+14, r25	; 0x0e
    2926:	8d 87       	std	Y+13, r24	; 0x0d
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	61 e0       	ldi	r22, 0x01	; 1
    292c:	41 e0       	ldi	r20, 0x01	; 1
    292e:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>


	uint8_t ch[10],i=0,j=0;
    2932:	1a 82       	std	Y+2, r1	; 0x02
    2934:	19 82       	std	Y+1, r1	; 0x01
	if(num == 0)
    2936:	8d 85       	ldd	r24, Y+13	; 0x0d
    2938:	9e 85       	ldd	r25, Y+14	; 0x0e
    293a:	00 97       	sbiw	r24, 0x00	; 0
    293c:	11 f5       	brne	.+68     	; 0x2982 <Lcd_ES_tdisplayNum+0x72>
	{
		Lcd_ES_tsendChar('0');
    293e:	80 e3       	ldi	r24, 0x30	; 48
    2940:	0e 94 8b 13 	call	0x2716	; 0x2716 <Lcd_ES_tsendChar>
    2944:	39 c0       	rjmp	.+114    	; 0x29b8 <Lcd_ES_tdisplayNum+0xa8>
	}
	else
	{
		while(num)
		{
			ch[i] = num % 10 + '0';  //To convert int to char
    2946:	8a 81       	ldd	r24, Y+2	; 0x02
    2948:	e8 2f       	mov	r30, r24
    294a:	f0 e0       	ldi	r31, 0x00	; 0
    294c:	8d 85       	ldd	r24, Y+13	; 0x0d
    294e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2950:	2a e0       	ldi	r18, 0x0A	; 10
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	b9 01       	movw	r22, r18
    2956:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <__udivmodhi4>
    295a:	28 2f       	mov	r18, r24
    295c:	20 5d       	subi	r18, 0xD0	; 208
    295e:	ce 01       	movw	r24, r28
    2960:	03 96       	adiw	r24, 0x03	; 3
    2962:	e8 0f       	add	r30, r24
    2964:	f9 1f       	adc	r31, r25
    2966:	20 83       	st	Z, r18
			num /= 10;
    2968:	8d 85       	ldd	r24, Y+13	; 0x0d
    296a:	9e 85       	ldd	r25, Y+14	; 0x0e
    296c:	2a e0       	ldi	r18, 0x0A	; 10
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	b9 01       	movw	r22, r18
    2972:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <__udivmodhi4>
    2976:	cb 01       	movw	r24, r22
    2978:	9e 87       	std	Y+14, r25	; 0x0e
    297a:	8d 87       	std	Y+13, r24	; 0x0d
			i++;
    297c:	8a 81       	ldd	r24, Y+2	; 0x02
    297e:	8f 5f       	subi	r24, 0xFF	; 255
    2980:	8a 83       	std	Y+2, r24	; 0x02
	{
		Lcd_ES_tsendChar('0');
	}
	else
	{
		while(num)
    2982:	8d 85       	ldd	r24, Y+13	; 0x0d
    2984:	9e 85       	ldd	r25, Y+14	; 0x0e
    2986:	00 97       	sbiw	r24, 0x00	; 0
    2988:	f1 f6       	brne	.-68     	; 0x2946 <Lcd_ES_tdisplayNum+0x36>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    298a:	8a 81       	ldd	r24, Y+2	; 0x02
    298c:	89 83       	std	Y+1, r24	; 0x01
    298e:	11 c0       	rjmp	.+34     	; 0x29b2 <Lcd_ES_tdisplayNum+0xa2>
		{
			Lcd_ES_tsendChar(ch[j-1]);
    2990:	89 81       	ldd	r24, Y+1	; 0x01
    2992:	88 2f       	mov	r24, r24
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	9c 01       	movw	r18, r24
    2998:	21 50       	subi	r18, 0x01	; 1
    299a:	30 40       	sbci	r19, 0x00	; 0
    299c:	ce 01       	movw	r24, r28
    299e:	03 96       	adiw	r24, 0x03	; 3
    29a0:	fc 01       	movw	r30, r24
    29a2:	e2 0f       	add	r30, r18
    29a4:	f3 1f       	adc	r31, r19
    29a6:	80 81       	ld	r24, Z
    29a8:	0e 94 8b 13 	call	0x2716	; 0x2716 <Lcd_ES_tsendChar>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    29ac:	89 81       	ldd	r24, Y+1	; 0x01
    29ae:	81 50       	subi	r24, 0x01	; 1
    29b0:	89 83       	std	Y+1, r24	; 0x01
    29b2:	89 81       	ldd	r24, Y+1	; 0x01
    29b4:	88 23       	and	r24, r24
    29b6:	61 f7       	brne	.-40     	; 0x2990 <Lcd_ES_tdisplayNum+0x80>
		{
			Lcd_ES_tsendChar(ch[j-1]);
		}
	}
	return ES_OK;
    29b8:	80 e0       	ldi	r24, 0x00	; 0
}
    29ba:	2e 96       	adiw	r28, 0x0e	; 14
    29bc:	0f b6       	in	r0, 0x3f	; 63
    29be:	f8 94       	cli
    29c0:	de bf       	out	0x3e, r29	; 62
    29c2:	0f be       	out	0x3f, r0	; 63
    29c4:	cd bf       	out	0x3d, r28	; 61
    29c6:	cf 91       	pop	r28
    29c8:	df 91       	pop	r29
    29ca:	08 95       	ret

000029cc <Lcd_ES_tdisplayNum_xy>:

ES_t Lcd_ES_tdisplayNum_xy(u16 num,u8 row,u8 col){
    29cc:	df 93       	push	r29
    29ce:	cf 93       	push	r28
    29d0:	cd b7       	in	r28, 0x3d	; 61
    29d2:	de b7       	in	r29, 0x3e	; 62
    29d4:	a3 97       	sbiw	r28, 0x23	; 35
    29d6:	0f b6       	in	r0, 0x3f	; 63
    29d8:	f8 94       	cli
    29da:	de bf       	out	0x3e, r29	; 62
    29dc:	0f be       	out	0x3f, r0	; 63
    29de:	cd bf       	out	0x3d, r28	; 61
    29e0:	98 a3       	std	Y+32, r25	; 0x20
    29e2:	8f 8f       	std	Y+31, r24	; 0x1f
    29e4:	69 a3       	std	Y+33, r22	; 0x21
    29e6:	4a a3       	std	Y+34, r20	; 0x22

	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    29e8:	81 e0       	ldi	r24, 0x01	; 1
    29ea:	61 e0       	ldi	r22, 0x01	; 1
    29ec:	41 e0       	ldi	r20, 0x01	; 1
    29ee:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>


	if(row == 1){
    29f2:	89 a1       	ldd	r24, Y+33	; 0x21
    29f4:	81 30       	cpi	r24, 0x01	; 1
    29f6:	09 f0       	breq	.+2      	; 0x29fa <Lcd_ES_tdisplayNum_xy+0x2e>
    29f8:	76 c0       	rjmp	.+236    	; 0x2ae6 <Lcd_ES_tdisplayNum_xy+0x11a>
		Lcd_ES_tsendCmd(Force1stline);
    29fa:	80 e8       	ldi	r24, 0x80	; 128
    29fc:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <Lcd_ES_tsendCmd>
    2a00:	80 e0       	ldi	r24, 0x00	; 0
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	a0 e8       	ldi	r26, 0x80	; 128
    2a06:	bf e3       	ldi	r27, 0x3F	; 63
    2a08:	89 8f       	std	Y+25, r24	; 0x19
    2a0a:	9a 8f       	std	Y+26, r25	; 0x1a
    2a0c:	ab 8f       	std	Y+27, r26	; 0x1b
    2a0e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a10:	69 8d       	ldd	r22, Y+25	; 0x19
    2a12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	4a e7       	ldi	r20, 0x7A	; 122
    2a1e:	55 e4       	ldi	r21, 0x45	; 69
    2a20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	8d 8b       	std	Y+21, r24	; 0x15
    2a2a:	9e 8b       	std	Y+22, r25	; 0x16
    2a2c:	af 8b       	std	Y+23, r26	; 0x17
    2a2e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a30:	6d 89       	ldd	r22, Y+21	; 0x15
    2a32:	7e 89       	ldd	r23, Y+22	; 0x16
    2a34:	8f 89       	ldd	r24, Y+23	; 0x17
    2a36:	98 8d       	ldd	r25, Y+24	; 0x18
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	40 e8       	ldi	r20, 0x80	; 128
    2a3e:	5f e3       	ldi	r21, 0x3F	; 63
    2a40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a44:	88 23       	and	r24, r24
    2a46:	2c f4       	brge	.+10     	; 0x2a52 <Lcd_ES_tdisplayNum_xy+0x86>
		__ticks = 1;
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	9c 8b       	std	Y+20, r25	; 0x14
    2a4e:	8b 8b       	std	Y+19, r24	; 0x13
    2a50:	3f c0       	rjmp	.+126    	; 0x2ad0 <Lcd_ES_tdisplayNum_xy+0x104>
	else if (__tmp > 65535)
    2a52:	6d 89       	ldd	r22, Y+21	; 0x15
    2a54:	7e 89       	ldd	r23, Y+22	; 0x16
    2a56:	8f 89       	ldd	r24, Y+23	; 0x17
    2a58:	98 8d       	ldd	r25, Y+24	; 0x18
    2a5a:	20 e0       	ldi	r18, 0x00	; 0
    2a5c:	3f ef       	ldi	r19, 0xFF	; 255
    2a5e:	4f e7       	ldi	r20, 0x7F	; 127
    2a60:	57 e4       	ldi	r21, 0x47	; 71
    2a62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a66:	18 16       	cp	r1, r24
    2a68:	4c f5       	brge	.+82     	; 0x2abc <Lcd_ES_tdisplayNum_xy+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a6a:	69 8d       	ldd	r22, Y+25	; 0x19
    2a6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	40 e2       	ldi	r20, 0x20	; 32
    2a78:	51 e4       	ldi	r21, 0x41	; 65
    2a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a7e:	dc 01       	movw	r26, r24
    2a80:	cb 01       	movw	r24, r22
    2a82:	bc 01       	movw	r22, r24
    2a84:	cd 01       	movw	r24, r26
    2a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	9c 8b       	std	Y+20, r25	; 0x14
    2a90:	8b 8b       	std	Y+19, r24	; 0x13
    2a92:	0f c0       	rjmp	.+30     	; 0x2ab2 <Lcd_ES_tdisplayNum_xy+0xe6>
    2a94:	80 e9       	ldi	r24, 0x90	; 144
    2a96:	91 e0       	ldi	r25, 0x01	; 1
    2a98:	9a 8b       	std	Y+18, r25	; 0x12
    2a9a:	89 8b       	std	Y+17, r24	; 0x11
    2a9c:	89 89       	ldd	r24, Y+17	; 0x11
    2a9e:	9a 89       	ldd	r25, Y+18	; 0x12
    2aa0:	01 97       	sbiw	r24, 0x01	; 1
    2aa2:	f1 f7       	brne	.-4      	; 0x2aa0 <Lcd_ES_tdisplayNum_xy+0xd4>
    2aa4:	9a 8b       	std	Y+18, r25	; 0x12
    2aa6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa8:	8b 89       	ldd	r24, Y+19	; 0x13
    2aaa:	9c 89       	ldd	r25, Y+20	; 0x14
    2aac:	01 97       	sbiw	r24, 0x01	; 1
    2aae:	9c 8b       	std	Y+20, r25	; 0x14
    2ab0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ab2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ab4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ab6:	00 97       	sbiw	r24, 0x00	; 0
    2ab8:	69 f7       	brne	.-38     	; 0x2a94 <Lcd_ES_tdisplayNum_xy+0xc8>
    2aba:	92 c0       	rjmp	.+292    	; 0x2be0 <Lcd_ES_tdisplayNum_xy+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2abc:	6d 89       	ldd	r22, Y+21	; 0x15
    2abe:	7e 89       	ldd	r23, Y+22	; 0x16
    2ac0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ac2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	9c 8b       	std	Y+20, r25	; 0x14
    2ace:	8b 8b       	std	Y+19, r24	; 0x13
    2ad0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ad2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ad4:	98 8b       	std	Y+16, r25	; 0x10
    2ad6:	8f 87       	std	Y+15, r24	; 0x0f
    2ad8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ada:	98 89       	ldd	r25, Y+16	; 0x10
    2adc:	01 97       	sbiw	r24, 0x01	; 1
    2ade:	f1 f7       	brne	.-4      	; 0x2adc <Lcd_ES_tdisplayNum_xy+0x110>
    2ae0:	98 8b       	std	Y+16, r25	; 0x10
    2ae2:	8f 87       	std	Y+15, r24	; 0x0f
    2ae4:	7d c0       	rjmp	.+250    	; 0x2be0 <Lcd_ES_tdisplayNum_xy+0x214>
		_delay_ms(1);
	}else if(row == 2){
    2ae6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ae8:	82 30       	cpi	r24, 0x02	; 2
    2aea:	09 f0       	breq	.+2      	; 0x2aee <Lcd_ES_tdisplayNum_xy+0x122>
    2aec:	76 c0       	rjmp	.+236    	; 0x2bda <Lcd_ES_tdisplayNum_xy+0x20e>
		Lcd_ES_tsendCmd(Force2ndline);
    2aee:	80 ec       	ldi	r24, 0xC0	; 192
    2af0:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <Lcd_ES_tsendCmd>
    2af4:	80 e0       	ldi	r24, 0x00	; 0
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	a0 e2       	ldi	r26, 0x20	; 32
    2afa:	b1 e4       	ldi	r27, 0x41	; 65
    2afc:	8b 87       	std	Y+11, r24	; 0x0b
    2afe:	9c 87       	std	Y+12, r25	; 0x0c
    2b00:	ad 87       	std	Y+13, r26	; 0x0d
    2b02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b04:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b06:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b08:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b0c:	20 e0       	ldi	r18, 0x00	; 0
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	4a e7       	ldi	r20, 0x7A	; 122
    2b12:	55 e4       	ldi	r21, 0x45	; 69
    2b14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b18:	dc 01       	movw	r26, r24
    2b1a:	cb 01       	movw	r24, r22
    2b1c:	8f 83       	std	Y+7, r24	; 0x07
    2b1e:	98 87       	std	Y+8, r25	; 0x08
    2b20:	a9 87       	std	Y+9, r26	; 0x09
    2b22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b24:	6f 81       	ldd	r22, Y+7	; 0x07
    2b26:	78 85       	ldd	r23, Y+8	; 0x08
    2b28:	89 85       	ldd	r24, Y+9	; 0x09
    2b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	40 e8       	ldi	r20, 0x80	; 128
    2b32:	5f e3       	ldi	r21, 0x3F	; 63
    2b34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b38:	88 23       	and	r24, r24
    2b3a:	2c f4       	brge	.+10     	; 0x2b46 <Lcd_ES_tdisplayNum_xy+0x17a>
		__ticks = 1;
    2b3c:	81 e0       	ldi	r24, 0x01	; 1
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	9e 83       	std	Y+6, r25	; 0x06
    2b42:	8d 83       	std	Y+5, r24	; 0x05
    2b44:	3f c0       	rjmp	.+126    	; 0x2bc4 <Lcd_ES_tdisplayNum_xy+0x1f8>
	else if (__tmp > 65535)
    2b46:	6f 81       	ldd	r22, Y+7	; 0x07
    2b48:	78 85       	ldd	r23, Y+8	; 0x08
    2b4a:	89 85       	ldd	r24, Y+9	; 0x09
    2b4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	3f ef       	ldi	r19, 0xFF	; 255
    2b52:	4f e7       	ldi	r20, 0x7F	; 127
    2b54:	57 e4       	ldi	r21, 0x47	; 71
    2b56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b5a:	18 16       	cp	r1, r24
    2b5c:	4c f5       	brge	.+82     	; 0x2bb0 <Lcd_ES_tdisplayNum_xy+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b60:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b62:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b64:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b66:	20 e0       	ldi	r18, 0x00	; 0
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	40 e2       	ldi	r20, 0x20	; 32
    2b6c:	51 e4       	ldi	r21, 0x41	; 65
    2b6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b72:	dc 01       	movw	r26, r24
    2b74:	cb 01       	movw	r24, r22
    2b76:	bc 01       	movw	r22, r24
    2b78:	cd 01       	movw	r24, r26
    2b7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b7e:	dc 01       	movw	r26, r24
    2b80:	cb 01       	movw	r24, r22
    2b82:	9e 83       	std	Y+6, r25	; 0x06
    2b84:	8d 83       	std	Y+5, r24	; 0x05
    2b86:	0f c0       	rjmp	.+30     	; 0x2ba6 <Lcd_ES_tdisplayNum_xy+0x1da>
    2b88:	80 e9       	ldi	r24, 0x90	; 144
    2b8a:	91 e0       	ldi	r25, 0x01	; 1
    2b8c:	9c 83       	std	Y+4, r25	; 0x04
    2b8e:	8b 83       	std	Y+3, r24	; 0x03
    2b90:	8b 81       	ldd	r24, Y+3	; 0x03
    2b92:	9c 81       	ldd	r25, Y+4	; 0x04
    2b94:	01 97       	sbiw	r24, 0x01	; 1
    2b96:	f1 f7       	brne	.-4      	; 0x2b94 <Lcd_ES_tdisplayNum_xy+0x1c8>
    2b98:	9c 83       	std	Y+4, r25	; 0x04
    2b9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba0:	01 97       	sbiw	r24, 0x01	; 1
    2ba2:	9e 83       	std	Y+6, r25	; 0x06
    2ba4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    2baa:	00 97       	sbiw	r24, 0x00	; 0
    2bac:	69 f7       	brne	.-38     	; 0x2b88 <Lcd_ES_tdisplayNum_xy+0x1bc>
    2bae:	18 c0       	rjmp	.+48     	; 0x2be0 <Lcd_ES_tdisplayNum_xy+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb0:	6f 81       	ldd	r22, Y+7	; 0x07
    2bb2:	78 85       	ldd	r23, Y+8	; 0x08
    2bb4:	89 85       	ldd	r24, Y+9	; 0x09
    2bb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bbc:	dc 01       	movw	r26, r24
    2bbe:	cb 01       	movw	r24, r22
    2bc0:	9e 83       	std	Y+6, r25	; 0x06
    2bc2:	8d 83       	std	Y+5, r24	; 0x05
    2bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc8:	9a 83       	std	Y+2, r25	; 0x02
    2bca:	89 83       	std	Y+1, r24	; 0x01
    2bcc:	89 81       	ldd	r24, Y+1	; 0x01
    2bce:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd0:	01 97       	sbiw	r24, 0x01	; 1
    2bd2:	f1 f7       	brne	.-4      	; 0x2bd0 <Lcd_ES_tdisplayNum_xy+0x204>
    2bd4:	9a 83       	std	Y+2, r25	; 0x02
    2bd6:	89 83       	std	Y+1, r24	; 0x01
    2bd8:	03 c0       	rjmp	.+6      	; 0x2be0 <Lcd_ES_tdisplayNum_xy+0x214>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	8b a3       	std	Y+35, r24	; 0x23
    2bde:	1a c0       	rjmp	.+52     	; 0x2c14 <Lcd_ES_tdisplayNum_xy+0x248>
	}


	for(int j=1;j<=col;j++){
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	9e 8f       	std	Y+30, r25	; 0x1e
    2be6:	8d 8f       	std	Y+29, r24	; 0x1d
    2be8:	08 c0       	rjmp	.+16     	; 0x2bfa <Lcd_ES_tdisplayNum_xy+0x22e>
		Lcd_ES_tsendCmd(ShiftRight);
    2bea:	8c e1       	ldi	r24, 0x1C	; 28
    2bec:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <Lcd_ES_tsendCmd>
	}else{
		return ES_NOT_OK;
	}


	for(int j=1;j<=col;j++){
    2bf0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bf2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bf4:	01 96       	adiw	r24, 0x01	; 1
    2bf6:	9e 8f       	std	Y+30, r25	; 0x1e
    2bf8:	8d 8f       	std	Y+29, r24	; 0x1d
    2bfa:	8a a1       	ldd	r24, Y+34	; 0x22
    2bfc:	28 2f       	mov	r18, r24
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c02:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c04:	28 17       	cp	r18, r24
    2c06:	39 07       	cpc	r19, r25
    2c08:	84 f7       	brge	.-32     	; 0x2bea <Lcd_ES_tdisplayNum_xy+0x21e>
		Lcd_ES_tsendCmd(ShiftRight);
	}

	Lcd_ES_tdisplayNum(num);
    2c0a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c0c:	98 a1       	ldd	r25, Y+32	; 0x20
    2c0e:	0e 94 88 14 	call	0x2910	; 0x2910 <Lcd_ES_tdisplayNum>
	return ES_OK;
    2c12:	1b a2       	std	Y+35, r1	; 0x23
    2c14:	8b a1       	ldd	r24, Y+35	; 0x23

}
    2c16:	a3 96       	adiw	r28, 0x23	; 35
    2c18:	0f b6       	in	r0, 0x3f	; 63
    2c1a:	f8 94       	cli
    2c1c:	de bf       	out	0x3e, r29	; 62
    2c1e:	0f be       	out	0x3f, r0	; 63
    2c20:	cd bf       	out	0x3d, r28	; 61
    2c22:	cf 91       	pop	r28
    2c24:	df 91       	pop	r29
    2c26:	08 95       	ret

00002c28 <Lcd_ES_tsendChar_xy>:

ES_t Lcd_ES_tsendChar_xy(u8 data,u8 row,u8 col){
    2c28:	df 93       	push	r29
    2c2a:	cf 93       	push	r28
    2c2c:	cd b7       	in	r28, 0x3d	; 61
    2c2e:	de b7       	in	r29, 0x3e	; 62
    2c30:	a2 97       	sbiw	r28, 0x22	; 34
    2c32:	0f b6       	in	r0, 0x3f	; 63
    2c34:	f8 94       	cli
    2c36:	de bf       	out	0x3e, r29	; 62
    2c38:	0f be       	out	0x3f, r0	; 63
    2c3a:	cd bf       	out	0x3d, r28	; 61
    2c3c:	8f 8f       	std	Y+31, r24	; 0x1f
    2c3e:	68 a3       	std	Y+32, r22	; 0x20
    2c40:	49 a3       	std	Y+33, r20	; 0x21
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2c42:	81 e0       	ldi	r24, 0x01	; 1
    2c44:	61 e0       	ldi	r22, 0x01	; 1
    2c46:	41 e0       	ldi	r20, 0x01	; 1
    2c48:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>


	if(row == 1){
    2c4c:	88 a1       	ldd	r24, Y+32	; 0x20
    2c4e:	81 30       	cpi	r24, 0x01	; 1
    2c50:	09 f0       	breq	.+2      	; 0x2c54 <Lcd_ES_tsendChar_xy+0x2c>
    2c52:	76 c0       	rjmp	.+236    	; 0x2d40 <Lcd_ES_tsendChar_xy+0x118>
		Lcd_ES_tsendCmd(Force1stline);
    2c54:	80 e8       	ldi	r24, 0x80	; 128
    2c56:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <Lcd_ES_tsendCmd>
    2c5a:	80 e0       	ldi	r24, 0x00	; 0
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	a0 e8       	ldi	r26, 0x80	; 128
    2c60:	bf e3       	ldi	r27, 0x3F	; 63
    2c62:	89 8f       	std	Y+25, r24	; 0x19
    2c64:	9a 8f       	std	Y+26, r25	; 0x1a
    2c66:	ab 8f       	std	Y+27, r26	; 0x1b
    2c68:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c6a:	69 8d       	ldd	r22, Y+25	; 0x19
    2c6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c72:	20 e0       	ldi	r18, 0x00	; 0
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	4a e7       	ldi	r20, 0x7A	; 122
    2c78:	55 e4       	ldi	r21, 0x45	; 69
    2c7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c7e:	dc 01       	movw	r26, r24
    2c80:	cb 01       	movw	r24, r22
    2c82:	8d 8b       	std	Y+21, r24	; 0x15
    2c84:	9e 8b       	std	Y+22, r25	; 0x16
    2c86:	af 8b       	std	Y+23, r26	; 0x17
    2c88:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c8a:	6d 89       	ldd	r22, Y+21	; 0x15
    2c8c:	7e 89       	ldd	r23, Y+22	; 0x16
    2c8e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c90:	98 8d       	ldd	r25, Y+24	; 0x18
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	40 e8       	ldi	r20, 0x80	; 128
    2c98:	5f e3       	ldi	r21, 0x3F	; 63
    2c9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c9e:	88 23       	and	r24, r24
    2ca0:	2c f4       	brge	.+10     	; 0x2cac <Lcd_ES_tsendChar_xy+0x84>
		__ticks = 1;
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	9c 8b       	std	Y+20, r25	; 0x14
    2ca8:	8b 8b       	std	Y+19, r24	; 0x13
    2caa:	3f c0       	rjmp	.+126    	; 0x2d2a <Lcd_ES_tsendChar_xy+0x102>
	else if (__tmp > 65535)
    2cac:	6d 89       	ldd	r22, Y+21	; 0x15
    2cae:	7e 89       	ldd	r23, Y+22	; 0x16
    2cb0:	8f 89       	ldd	r24, Y+23	; 0x17
    2cb2:	98 8d       	ldd	r25, Y+24	; 0x18
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	3f ef       	ldi	r19, 0xFF	; 255
    2cb8:	4f e7       	ldi	r20, 0x7F	; 127
    2cba:	57 e4       	ldi	r21, 0x47	; 71
    2cbc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cc0:	18 16       	cp	r1, r24
    2cc2:	4c f5       	brge	.+82     	; 0x2d16 <Lcd_ES_tsendChar_xy+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cc4:	69 8d       	ldd	r22, Y+25	; 0x19
    2cc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ccc:	20 e0       	ldi	r18, 0x00	; 0
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	40 e2       	ldi	r20, 0x20	; 32
    2cd2:	51 e4       	ldi	r21, 0x41	; 65
    2cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd8:	dc 01       	movw	r26, r24
    2cda:	cb 01       	movw	r24, r22
    2cdc:	bc 01       	movw	r22, r24
    2cde:	cd 01       	movw	r24, r26
    2ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	9c 8b       	std	Y+20, r25	; 0x14
    2cea:	8b 8b       	std	Y+19, r24	; 0x13
    2cec:	0f c0       	rjmp	.+30     	; 0x2d0c <Lcd_ES_tsendChar_xy+0xe4>
    2cee:	80 e9       	ldi	r24, 0x90	; 144
    2cf0:	91 e0       	ldi	r25, 0x01	; 1
    2cf2:	9a 8b       	std	Y+18, r25	; 0x12
    2cf4:	89 8b       	std	Y+17, r24	; 0x11
    2cf6:	89 89       	ldd	r24, Y+17	; 0x11
    2cf8:	9a 89       	ldd	r25, Y+18	; 0x12
    2cfa:	01 97       	sbiw	r24, 0x01	; 1
    2cfc:	f1 f7       	brne	.-4      	; 0x2cfa <Lcd_ES_tsendChar_xy+0xd2>
    2cfe:	9a 8b       	std	Y+18, r25	; 0x12
    2d00:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d02:	8b 89       	ldd	r24, Y+19	; 0x13
    2d04:	9c 89       	ldd	r25, Y+20	; 0x14
    2d06:	01 97       	sbiw	r24, 0x01	; 1
    2d08:	9c 8b       	std	Y+20, r25	; 0x14
    2d0a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d0c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d0e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d10:	00 97       	sbiw	r24, 0x00	; 0
    2d12:	69 f7       	brne	.-38     	; 0x2cee <Lcd_ES_tsendChar_xy+0xc6>
    2d14:	92 c0       	rjmp	.+292    	; 0x2e3a <Lcd_ES_tsendChar_xy+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d16:	6d 89       	ldd	r22, Y+21	; 0x15
    2d18:	7e 89       	ldd	r23, Y+22	; 0x16
    2d1a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d1c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	9c 8b       	std	Y+20, r25	; 0x14
    2d28:	8b 8b       	std	Y+19, r24	; 0x13
    2d2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d2e:	98 8b       	std	Y+16, r25	; 0x10
    2d30:	8f 87       	std	Y+15, r24	; 0x0f
    2d32:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d34:	98 89       	ldd	r25, Y+16	; 0x10
    2d36:	01 97       	sbiw	r24, 0x01	; 1
    2d38:	f1 f7       	brne	.-4      	; 0x2d36 <Lcd_ES_tsendChar_xy+0x10e>
    2d3a:	98 8b       	std	Y+16, r25	; 0x10
    2d3c:	8f 87       	std	Y+15, r24	; 0x0f
    2d3e:	7d c0       	rjmp	.+250    	; 0x2e3a <Lcd_ES_tsendChar_xy+0x212>
		_delay_ms(1);
	}else if(row == 2){
    2d40:	88 a1       	ldd	r24, Y+32	; 0x20
    2d42:	82 30       	cpi	r24, 0x02	; 2
    2d44:	09 f0       	breq	.+2      	; 0x2d48 <Lcd_ES_tsendChar_xy+0x120>
    2d46:	76 c0       	rjmp	.+236    	; 0x2e34 <Lcd_ES_tsendChar_xy+0x20c>
		Lcd_ES_tsendCmd(Force2ndline);
    2d48:	80 ec       	ldi	r24, 0xC0	; 192
    2d4a:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <Lcd_ES_tsendCmd>
    2d4e:	80 e0       	ldi	r24, 0x00	; 0
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	a0 e2       	ldi	r26, 0x20	; 32
    2d54:	b1 e4       	ldi	r27, 0x41	; 65
    2d56:	8b 87       	std	Y+11, r24	; 0x0b
    2d58:	9c 87       	std	Y+12, r25	; 0x0c
    2d5a:	ad 87       	std	Y+13, r26	; 0x0d
    2d5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d60:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d62:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d64:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	4a e7       	ldi	r20, 0x7A	; 122
    2d6c:	55 e4       	ldi	r21, 0x45	; 69
    2d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d72:	dc 01       	movw	r26, r24
    2d74:	cb 01       	movw	r24, r22
    2d76:	8f 83       	std	Y+7, r24	; 0x07
    2d78:	98 87       	std	Y+8, r25	; 0x08
    2d7a:	a9 87       	std	Y+9, r26	; 0x09
    2d7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d7e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d80:	78 85       	ldd	r23, Y+8	; 0x08
    2d82:	89 85       	ldd	r24, Y+9	; 0x09
    2d84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d86:	20 e0       	ldi	r18, 0x00	; 0
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	40 e8       	ldi	r20, 0x80	; 128
    2d8c:	5f e3       	ldi	r21, 0x3F	; 63
    2d8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d92:	88 23       	and	r24, r24
    2d94:	2c f4       	brge	.+10     	; 0x2da0 <Lcd_ES_tsendChar_xy+0x178>
		__ticks = 1;
    2d96:	81 e0       	ldi	r24, 0x01	; 1
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	9e 83       	std	Y+6, r25	; 0x06
    2d9c:	8d 83       	std	Y+5, r24	; 0x05
    2d9e:	3f c0       	rjmp	.+126    	; 0x2e1e <Lcd_ES_tsendChar_xy+0x1f6>
	else if (__tmp > 65535)
    2da0:	6f 81       	ldd	r22, Y+7	; 0x07
    2da2:	78 85       	ldd	r23, Y+8	; 0x08
    2da4:	89 85       	ldd	r24, Y+9	; 0x09
    2da6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	3f ef       	ldi	r19, 0xFF	; 255
    2dac:	4f e7       	ldi	r20, 0x7F	; 127
    2dae:	57 e4       	ldi	r21, 0x47	; 71
    2db0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2db4:	18 16       	cp	r1, r24
    2db6:	4c f5       	brge	.+82     	; 0x2e0a <Lcd_ES_tsendChar_xy+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2db8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dba:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dc0:	20 e0       	ldi	r18, 0x00	; 0
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	40 e2       	ldi	r20, 0x20	; 32
    2dc6:	51 e4       	ldi	r21, 0x41	; 65
    2dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dcc:	dc 01       	movw	r26, r24
    2dce:	cb 01       	movw	r24, r22
    2dd0:	bc 01       	movw	r22, r24
    2dd2:	cd 01       	movw	r24, r26
    2dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd8:	dc 01       	movw	r26, r24
    2dda:	cb 01       	movw	r24, r22
    2ddc:	9e 83       	std	Y+6, r25	; 0x06
    2dde:	8d 83       	std	Y+5, r24	; 0x05
    2de0:	0f c0       	rjmp	.+30     	; 0x2e00 <Lcd_ES_tsendChar_xy+0x1d8>
    2de2:	80 e9       	ldi	r24, 0x90	; 144
    2de4:	91 e0       	ldi	r25, 0x01	; 1
    2de6:	9c 83       	std	Y+4, r25	; 0x04
    2de8:	8b 83       	std	Y+3, r24	; 0x03
    2dea:	8b 81       	ldd	r24, Y+3	; 0x03
    2dec:	9c 81       	ldd	r25, Y+4	; 0x04
    2dee:	01 97       	sbiw	r24, 0x01	; 1
    2df0:	f1 f7       	brne	.-4      	; 0x2dee <Lcd_ES_tsendChar_xy+0x1c6>
    2df2:	9c 83       	std	Y+4, r25	; 0x04
    2df4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2df6:	8d 81       	ldd	r24, Y+5	; 0x05
    2df8:	9e 81       	ldd	r25, Y+6	; 0x06
    2dfa:	01 97       	sbiw	r24, 0x01	; 1
    2dfc:	9e 83       	std	Y+6, r25	; 0x06
    2dfe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e00:	8d 81       	ldd	r24, Y+5	; 0x05
    2e02:	9e 81       	ldd	r25, Y+6	; 0x06
    2e04:	00 97       	sbiw	r24, 0x00	; 0
    2e06:	69 f7       	brne	.-38     	; 0x2de2 <Lcd_ES_tsendChar_xy+0x1ba>
    2e08:	18 c0       	rjmp	.+48     	; 0x2e3a <Lcd_ES_tsendChar_xy+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e0c:	78 85       	ldd	r23, Y+8	; 0x08
    2e0e:	89 85       	ldd	r24, Y+9	; 0x09
    2e10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e16:	dc 01       	movw	r26, r24
    2e18:	cb 01       	movw	r24, r22
    2e1a:	9e 83       	std	Y+6, r25	; 0x06
    2e1c:	8d 83       	std	Y+5, r24	; 0x05
    2e1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e20:	9e 81       	ldd	r25, Y+6	; 0x06
    2e22:	9a 83       	std	Y+2, r25	; 0x02
    2e24:	89 83       	std	Y+1, r24	; 0x01
    2e26:	89 81       	ldd	r24, Y+1	; 0x01
    2e28:	9a 81       	ldd	r25, Y+2	; 0x02
    2e2a:	01 97       	sbiw	r24, 0x01	; 1
    2e2c:	f1 f7       	brne	.-4      	; 0x2e2a <Lcd_ES_tsendChar_xy+0x202>
    2e2e:	9a 83       	std	Y+2, r25	; 0x02
    2e30:	89 83       	std	Y+1, r24	; 0x01
    2e32:	03 c0       	rjmp	.+6      	; 0x2e3a <Lcd_ES_tsendChar_xy+0x212>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    2e34:	81 e0       	ldi	r24, 0x01	; 1
    2e36:	8a a3       	std	Y+34, r24	; 0x22
    2e38:	19 c0       	rjmp	.+50     	; 0x2e6c <Lcd_ES_tsendChar_xy+0x244>
	}

	for(int j=1;j<=col;j++){
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	9e 8f       	std	Y+30, r25	; 0x1e
    2e40:	8d 8f       	std	Y+29, r24	; 0x1d
    2e42:	08 c0       	rjmp	.+16     	; 0x2e54 <Lcd_ES_tsendChar_xy+0x22c>
		Lcd_ES_tsendCmd(ShiftRight);
    2e44:	8c e1       	ldi	r24, 0x1C	; 28
    2e46:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <Lcd_ES_tsendCmd>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
	}

	for(int j=1;j<=col;j++){
    2e4a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e4c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e4e:	01 96       	adiw	r24, 0x01	; 1
    2e50:	9e 8f       	std	Y+30, r25	; 0x1e
    2e52:	8d 8f       	std	Y+29, r24	; 0x1d
    2e54:	89 a1       	ldd	r24, Y+33	; 0x21
    2e56:	28 2f       	mov	r18, r24
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e5c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e5e:	28 17       	cp	r18, r24
    2e60:	39 07       	cpc	r19, r25
    2e62:	84 f7       	brge	.-32     	; 0x2e44 <Lcd_ES_tsendChar_xy+0x21c>
		Lcd_ES_tsendCmd(ShiftRight);
	}
	Lcd_ES_tsendChar(data);
    2e64:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e66:	0e 94 8b 13 	call	0x2716	; 0x2716 <Lcd_ES_tsendChar>
	return ES_OK;
    2e6a:	1a a2       	std	Y+34, r1	; 0x22
    2e6c:	8a a1       	ldd	r24, Y+34	; 0x22
}
    2e6e:	a2 96       	adiw	r28, 0x22	; 34
    2e70:	0f b6       	in	r0, 0x3f	; 63
    2e72:	f8 94       	cli
    2e74:	de bf       	out	0x3e, r29	; 62
    2e76:	0f be       	out	0x3f, r0	; 63
    2e78:	cd bf       	out	0x3d, r28	; 61
    2e7a:	cf 91       	pop	r28
    2e7c:	df 91       	pop	r29
    2e7e:	08 95       	ret

00002e80 <LCD_ES_tSet_Cursor_Pos>:

static ES_t LCD_ES_tSet_Cursor_Pos(u8 row,u8 column){
    2e80:	df 93       	push	r29
    2e82:	cf 93       	push	r28
    2e84:	00 d0       	rcall	.+0      	; 0x2e86 <LCD_ES_tSet_Cursor_Pos+0x6>
    2e86:	00 d0       	rcall	.+0      	; 0x2e88 <LCD_ES_tSet_Cursor_Pos+0x8>
    2e88:	0f 92       	push	r0
    2e8a:	cd b7       	in	r28, 0x3d	; 61
    2e8c:	de b7       	in	r29, 0x3e	; 62
    2e8e:	89 83       	std	Y+1, r24	; 0x01
    2e90:	6a 83       	std	Y+2, r22	; 0x02
	column--;
    2e92:	8a 81       	ldd	r24, Y+2	; 0x02
    2e94:	81 50       	subi	r24, 0x01	; 1
    2e96:	8a 83       	std	Y+2, r24	; 0x02
	switch(row){
    2e98:	89 81       	ldd	r24, Y+1	; 0x01
    2e9a:	28 2f       	mov	r18, r24
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	3d 83       	std	Y+5, r19	; 0x05
    2ea0:	2c 83       	std	Y+4, r18	; 0x04
    2ea2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ea4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ea6:	81 30       	cpi	r24, 0x01	; 1
    2ea8:	91 05       	cpc	r25, r1
    2eaa:	31 f0       	breq	.+12     	; 0x2eb8 <LCD_ES_tSet_Cursor_Pos+0x38>
    2eac:	2c 81       	ldd	r18, Y+4	; 0x04
    2eae:	3d 81       	ldd	r19, Y+5	; 0x05
    2eb0:	22 30       	cpi	r18, 0x02	; 2
    2eb2:	31 05       	cpc	r19, r1
    2eb4:	31 f0       	breq	.+12     	; 0x2ec2 <LCD_ES_tSet_Cursor_Pos+0x42>
    2eb6:	0a c0       	rjmp	.+20     	; 0x2ecc <LCD_ES_tSet_Cursor_Pos+0x4c>
	case 1:
		Lcd_ES_tsendCmd((0x80 + column));
    2eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eba:	80 58       	subi	r24, 0x80	; 128
    2ebc:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <Lcd_ES_tsendCmd>
    2ec0:	08 c0       	rjmp	.+16     	; 0x2ed2 <LCD_ES_tSet_Cursor_Pos+0x52>
		break;
	case 2:
		Lcd_ES_tsendCmd((0xc0 + column));
    2ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec4:	80 54       	subi	r24, 0x40	; 64
    2ec6:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <Lcd_ES_tsendCmd>
    2eca:	03 c0       	rjmp	.+6      	; 0x2ed2 <LCD_ES_tSet_Cursor_Pos+0x52>
		break;
	default:
		return ES_NOT_OK;
    2ecc:	31 e0       	ldi	r19, 0x01	; 1
    2ece:	3b 83       	std	Y+3, r19	; 0x03
    2ed0:	01 c0       	rjmp	.+2      	; 0x2ed4 <LCD_ES_tSet_Cursor_Pos+0x54>
	}
	return ES_OK;
    2ed2:	1b 82       	std	Y+3, r1	; 0x03
    2ed4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2ed6:	0f 90       	pop	r0
    2ed8:	0f 90       	pop	r0
    2eda:	0f 90       	pop	r0
    2edc:	0f 90       	pop	r0
    2ede:	0f 90       	pop	r0
    2ee0:	cf 91       	pop	r28
    2ee2:	df 91       	pop	r29
    2ee4:	08 95       	ret

00002ee6 <LCD_ES_tGoTo>:

/************************************************************************/
ES_t LCD_ES_tGoTo(u8 Line, u8 x){
    2ee6:	df 93       	push	r29
    2ee8:	cf 93       	push	r28
    2eea:	00 d0       	rcall	.+0      	; 0x2eec <LCD_ES_tGoTo+0x6>
    2eec:	0f 92       	push	r0
    2eee:	cd b7       	in	r28, 0x3d	; 61
    2ef0:	de b7       	in	r29, 0x3e	; 62
    2ef2:	89 83       	std	Y+1, r24	; 0x01
    2ef4:	6a 83       	std	Y+2, r22	; 0x02
	if(0 == Line)
    2ef6:	89 81       	ldd	r24, Y+1	; 0x01
    2ef8:	88 23       	and	r24, r24
    2efa:	41 f4       	brne	.+16     	; 0x2f0c <LCD_ES_tGoTo+0x26>
	{
		if ( x <=15)
    2efc:	8a 81       	ldd	r24, Y+2	; 0x02
    2efe:	80 31       	cpi	r24, 0x10	; 16
    2f00:	48 f5       	brcc	.+82     	; 0x2f54 <LCD_ES_tGoTo+0x6e>
		{
			Lcd_ES_tsendCmd(0x80 + x);
    2f02:	8a 81       	ldd	r24, Y+2	; 0x02
    2f04:	80 58       	subi	r24, 0x80	; 128
    2f06:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <Lcd_ES_tsendCmd>
    2f0a:	24 c0       	rjmp	.+72     	; 0x2f54 <LCD_ES_tGoTo+0x6e>
		}
	}
	else if (1 == Line)
    2f0c:	89 81       	ldd	r24, Y+1	; 0x01
    2f0e:	81 30       	cpi	r24, 0x01	; 1
    2f10:	41 f4       	brne	.+16     	; 0x2f22 <LCD_ES_tGoTo+0x3c>
	{
		if ( x <=15)
    2f12:	8a 81       	ldd	r24, Y+2	; 0x02
    2f14:	80 31       	cpi	r24, 0x10	; 16
    2f16:	f0 f4       	brcc	.+60     	; 0x2f54 <LCD_ES_tGoTo+0x6e>
		{
			Lcd_ES_tsendCmd(0xC0 + x);
    2f18:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1a:	80 54       	subi	r24, 0x40	; 64
    2f1c:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <Lcd_ES_tsendCmd>
    2f20:	19 c0       	rjmp	.+50     	; 0x2f54 <LCD_ES_tGoTo+0x6e>
		}
	}// In case of 16*4 lcd
	else if(2 == Line)
    2f22:	89 81       	ldd	r24, Y+1	; 0x01
    2f24:	82 30       	cpi	r24, 0x02	; 2
    2f26:	41 f4       	brne	.+16     	; 0x2f38 <LCD_ES_tGoTo+0x52>
	{
		if ( x <=15)
    2f28:	8a 81       	ldd	r24, Y+2	; 0x02
    2f2a:	80 31       	cpi	r24, 0x10	; 16
    2f2c:	98 f4       	brcc	.+38     	; 0x2f54 <LCD_ES_tGoTo+0x6e>
		{
			Lcd_ES_tsendCmd(0x90 + x);
    2f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f30:	80 57       	subi	r24, 0x70	; 112
    2f32:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <Lcd_ES_tsendCmd>
    2f36:	0e c0       	rjmp	.+28     	; 0x2f54 <LCD_ES_tGoTo+0x6e>
		}
	}else if(3 == Line)
    2f38:	89 81       	ldd	r24, Y+1	; 0x01
    2f3a:	83 30       	cpi	r24, 0x03	; 3
    2f3c:	41 f4       	brne	.+16     	; 0x2f4e <LCD_ES_tGoTo+0x68>
	{
		if ( x <=15)
    2f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f40:	80 31       	cpi	r24, 0x10	; 16
    2f42:	40 f4       	brcc	.+16     	; 0x2f54 <LCD_ES_tGoTo+0x6e>
		{
			Lcd_ES_tsendCmd(0xD0 + x);
    2f44:	8a 81       	ldd	r24, Y+2	; 0x02
    2f46:	80 53       	subi	r24, 0x30	; 48
    2f48:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <Lcd_ES_tsendCmd>
    2f4c:	03 c0       	rjmp	.+6      	; 0x2f54 <LCD_ES_tGoTo+0x6e>
		}
	}
	else{
		return ES_NOT_OK;
    2f4e:	81 e0       	ldi	r24, 0x01	; 1
    2f50:	8b 83       	std	Y+3, r24	; 0x03
    2f52:	01 c0       	rjmp	.+2      	; 0x2f56 <LCD_ES_tGoTo+0x70>
	}
	return ES_OK;
    2f54:	1b 82       	std	Y+3, r1	; 0x03
    2f56:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2f58:	0f 90       	pop	r0
    2f5a:	0f 90       	pop	r0
    2f5c:	0f 90       	pop	r0
    2f5e:	cf 91       	pop	r28
    2f60:	df 91       	pop	r29
    2f62:	08 95       	ret

00002f64 <KPD_ES_tGetKeyPressed>:
// To avoid the unarrangement and uncontiguous
const u8 KPD_Au8RowsPins[4] = {KPD_U8_R1,KPD_U8_R2,KPD_U8_R3,KPD_U8_R4};
const u8 KPD_Au8ColsPins[4] = {KPD_U8_C1,KPD_U8_C2,KPD_U8_C3,KPD_U8_C4};

ES_t KPD_ES_tGetKeyPressed(u8 *copy_pu8ReturnedKey)
{
    2f64:	df 93       	push	r29
    2f66:	cf 93       	push	r28
    2f68:	cd b7       	in	r28, 0x3d	; 61
    2f6a:	de b7       	in	r29, 0x3e	; 62
    2f6c:	65 97       	sbiw	r28, 0x15	; 21
    2f6e:	0f b6       	in	r0, 0x3f	; 63
    2f70:	f8 94       	cli
    2f72:	de bf       	out	0x3e, r29	; 62
    2f74:	0f be       	out	0x3f, r0	; 63
    2f76:	cd bf       	out	0x3d, r28	; 61
    2f78:	9c 8b       	std	Y+20, r25	; 0x14
    2f7a:	8b 8b       	std	Y+19, r24	; 0x13
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
    2f7c:	eb 89       	ldd	r30, Y+19	; 0x13
    2f7e:	fc 89       	ldd	r31, Y+20	; 0x14
    2f80:	8f ef       	ldi	r24, 0xFF	; 255
    2f82:	80 83       	st	Z, r24
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
    2f84:	1f 86       	std	Y+15, r1	; 0x0f
	if(copy_pu8ReturnedKey != NULL)
    2f86:	8b 89       	ldd	r24, Y+19	; 0x13
    2f88:	9c 89       	ldd	r25, Y+20	; 0x14
    2f8a:	00 97       	sbiw	r24, 0x00	; 0
    2f8c:	09 f4       	brne	.+2      	; 0x2f90 <KPD_ES_tGetKeyPressed+0x2c>
    2f8e:	ed c0       	rjmp	.+474    	; 0x316a <KPD_ES_tGetKeyPressed+0x206>
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
    2f90:	19 8a       	std	Y+17, r1	; 0x11
    2f92:	e5 c0       	rjmp	.+458    	; 0x315e <KPD_ES_tGetKeyPressed+0x1fa>
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
    2f94:	89 89       	ldd	r24, Y+17	; 0x11
    2f96:	88 2f       	mov	r24, r24
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	fc 01       	movw	r30, r24
    2f9c:	ee 53       	subi	r30, 0x3E	; 62
    2f9e:	fe 4f       	sbci	r31, 0xFE	; 254
    2fa0:	90 81       	ld	r25, Z
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	69 2f       	mov	r22, r25
    2fa6:	40 e0       	ldi	r20, 0x00	; 0
    2fa8:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
    2fac:	18 8a       	std	Y+16, r1	; 0x10
    2fae:	c1 c0       	rjmp	.+386    	; 0x3132 <KPD_ES_tGetKeyPressed+0x1ce>
			{
				DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);
    2fb0:	88 89       	ldd	r24, Y+16	; 0x10
    2fb2:	88 2f       	mov	r24, r24
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	fc 01       	movw	r30, r24
    2fb8:	ea 53       	subi	r30, 0x3A	; 58
    2fba:	fe 4f       	sbci	r31, 0xFE	; 254
    2fbc:	90 81       	ld	r25, Z
    2fbe:	9e 01       	movw	r18, r28
    2fc0:	2e 5e       	subi	r18, 0xEE	; 238
    2fc2:	3f 4f       	sbci	r19, 0xFF	; 255
    2fc4:	83 e0       	ldi	r24, 0x03	; 3
    2fc6:	69 2f       	mov	r22, r25
    2fc8:	a9 01       	movw	r20, r18
    2fca:	0e 94 1e 0c 	call	0x183c	; 0x183c <DIO_ES_tGetPinValue>
				if(Local_u8PinVal == LOW){ /* Switch is pressed */
    2fce:	8a 89       	ldd	r24, Y+18	; 0x12
    2fd0:	88 23       	and	r24, r24
    2fd2:	09 f0       	breq	.+2      	; 0x2fd6 <KPD_ES_tGetKeyPressed+0x72>
    2fd4:	ab c0       	rjmp	.+342    	; 0x312c <KPD_ES_tGetKeyPressed+0x1c8>
    2fd6:	80 e0       	ldi	r24, 0x00	; 0
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	a0 ea       	ldi	r26, 0xA0	; 160
    2fdc:	b1 e4       	ldi	r27, 0x41	; 65
    2fde:	8b 87       	std	Y+11, r24	; 0x0b
    2fe0:	9c 87       	std	Y+12, r25	; 0x0c
    2fe2:	ad 87       	std	Y+13, r26	; 0x0d
    2fe4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fe6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fe8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fea:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fec:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fee:	20 e0       	ldi	r18, 0x00	; 0
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
    2ff2:	4a e7       	ldi	r20, 0x7A	; 122
    2ff4:	55 e4       	ldi	r21, 0x45	; 69
    2ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ffa:	dc 01       	movw	r26, r24
    2ffc:	cb 01       	movw	r24, r22
    2ffe:	8f 83       	std	Y+7, r24	; 0x07
    3000:	98 87       	std	Y+8, r25	; 0x08
    3002:	a9 87       	std	Y+9, r26	; 0x09
    3004:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3006:	6f 81       	ldd	r22, Y+7	; 0x07
    3008:	78 85       	ldd	r23, Y+8	; 0x08
    300a:	89 85       	ldd	r24, Y+9	; 0x09
    300c:	9a 85       	ldd	r25, Y+10	; 0x0a
    300e:	20 e0       	ldi	r18, 0x00	; 0
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	40 e8       	ldi	r20, 0x80	; 128
    3014:	5f e3       	ldi	r21, 0x3F	; 63
    3016:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    301a:	88 23       	and	r24, r24
    301c:	2c f4       	brge	.+10     	; 0x3028 <KPD_ES_tGetKeyPressed+0xc4>
		__ticks = 1;
    301e:	81 e0       	ldi	r24, 0x01	; 1
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	9e 83       	std	Y+6, r25	; 0x06
    3024:	8d 83       	std	Y+5, r24	; 0x05
    3026:	3f c0       	rjmp	.+126    	; 0x30a6 <KPD_ES_tGetKeyPressed+0x142>
	else if (__tmp > 65535)
    3028:	6f 81       	ldd	r22, Y+7	; 0x07
    302a:	78 85       	ldd	r23, Y+8	; 0x08
    302c:	89 85       	ldd	r24, Y+9	; 0x09
    302e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3030:	20 e0       	ldi	r18, 0x00	; 0
    3032:	3f ef       	ldi	r19, 0xFF	; 255
    3034:	4f e7       	ldi	r20, 0x7F	; 127
    3036:	57 e4       	ldi	r21, 0x47	; 71
    3038:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    303c:	18 16       	cp	r1, r24
    303e:	4c f5       	brge	.+82     	; 0x3092 <KPD_ES_tGetKeyPressed+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3040:	6b 85       	ldd	r22, Y+11	; 0x0b
    3042:	7c 85       	ldd	r23, Y+12	; 0x0c
    3044:	8d 85       	ldd	r24, Y+13	; 0x0d
    3046:	9e 85       	ldd	r25, Y+14	; 0x0e
    3048:	20 e0       	ldi	r18, 0x00	; 0
    304a:	30 e0       	ldi	r19, 0x00	; 0
    304c:	40 e2       	ldi	r20, 0x20	; 32
    304e:	51 e4       	ldi	r21, 0x41	; 65
    3050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3054:	dc 01       	movw	r26, r24
    3056:	cb 01       	movw	r24, r22
    3058:	bc 01       	movw	r22, r24
    305a:	cd 01       	movw	r24, r26
    305c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3060:	dc 01       	movw	r26, r24
    3062:	cb 01       	movw	r24, r22
    3064:	9e 83       	std	Y+6, r25	; 0x06
    3066:	8d 83       	std	Y+5, r24	; 0x05
    3068:	0f c0       	rjmp	.+30     	; 0x3088 <KPD_ES_tGetKeyPressed+0x124>
    306a:	80 e9       	ldi	r24, 0x90	; 144
    306c:	91 e0       	ldi	r25, 0x01	; 1
    306e:	9c 83       	std	Y+4, r25	; 0x04
    3070:	8b 83       	std	Y+3, r24	; 0x03
    3072:	8b 81       	ldd	r24, Y+3	; 0x03
    3074:	9c 81       	ldd	r25, Y+4	; 0x04
    3076:	01 97       	sbiw	r24, 0x01	; 1
    3078:	f1 f7       	brne	.-4      	; 0x3076 <KPD_ES_tGetKeyPressed+0x112>
    307a:	9c 83       	std	Y+4, r25	; 0x04
    307c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    307e:	8d 81       	ldd	r24, Y+5	; 0x05
    3080:	9e 81       	ldd	r25, Y+6	; 0x06
    3082:	01 97       	sbiw	r24, 0x01	; 1
    3084:	9e 83       	std	Y+6, r25	; 0x06
    3086:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3088:	8d 81       	ldd	r24, Y+5	; 0x05
    308a:	9e 81       	ldd	r25, Y+6	; 0x06
    308c:	00 97       	sbiw	r24, 0x00	; 0
    308e:	69 f7       	brne	.-38     	; 0x306a <KPD_ES_tGetKeyPressed+0x106>
    3090:	14 c0       	rjmp	.+40     	; 0x30ba <KPD_ES_tGetKeyPressed+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3092:	6f 81       	ldd	r22, Y+7	; 0x07
    3094:	78 85       	ldd	r23, Y+8	; 0x08
    3096:	89 85       	ldd	r24, Y+9	; 0x09
    3098:	9a 85       	ldd	r25, Y+10	; 0x0a
    309a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    309e:	dc 01       	movw	r26, r24
    30a0:	cb 01       	movw	r24, r22
    30a2:	9e 83       	std	Y+6, r25	; 0x06
    30a4:	8d 83       	std	Y+5, r24	; 0x05
    30a6:	8d 81       	ldd	r24, Y+5	; 0x05
    30a8:	9e 81       	ldd	r25, Y+6	; 0x06
    30aa:	9a 83       	std	Y+2, r25	; 0x02
    30ac:	89 83       	std	Y+1, r24	; 0x01
    30ae:	89 81       	ldd	r24, Y+1	; 0x01
    30b0:	9a 81       	ldd	r25, Y+2	; 0x02
    30b2:	01 97       	sbiw	r24, 0x01	; 1
    30b4:	f1 f7       	brne	.-4      	; 0x30b2 <KPD_ES_tGetKeyPressed+0x14e>
    30b6:	9a 83       	std	Y+2, r25	; 0x02
    30b8:	89 83       	std	Y+1, r24	; 0x01
					/* The switch which reaches between the activated
					 * Column and the pressed key */
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    30ba:	88 89       	ldd	r24, Y+16	; 0x10
    30bc:	88 2f       	mov	r24, r24
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	fc 01       	movw	r30, r24
    30c2:	ea 53       	subi	r30, 0x3A	; 58
    30c4:	fe 4f       	sbci	r31, 0xFE	; 254
    30c6:	90 81       	ld	r25, Z
    30c8:	9e 01       	movw	r18, r28
    30ca:	2e 5e       	subi	r18, 0xEE	; 238
    30cc:	3f 4f       	sbci	r19, 0xFF	; 255
    30ce:	83 e0       	ldi	r24, 0x03	; 3
    30d0:	69 2f       	mov	r22, r25
    30d2:	a9 01       	movw	r20, r18
    30d4:	0e 94 1e 0c 	call	0x183c	; 0x183c <DIO_ES_tGetPinValue>
    30d8:	0f c0       	rjmp	.+30     	; 0x30f8 <KPD_ES_tGetKeyPressed+0x194>
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    30da:	88 89       	ldd	r24, Y+16	; 0x10
    30dc:	88 2f       	mov	r24, r24
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	fc 01       	movw	r30, r24
    30e2:	ea 53       	subi	r30, 0x3A	; 58
    30e4:	fe 4f       	sbci	r31, 0xFE	; 254
    30e6:	90 81       	ld	r25, Z
    30e8:	9e 01       	movw	r18, r28
    30ea:	2e 5e       	subi	r18, 0xEE	; 238
    30ec:	3f 4f       	sbci	r19, 0xFF	; 255
    30ee:	83 e0       	ldi	r24, 0x03	; 3
    30f0:	69 2f       	mov	r22, r25
    30f2:	a9 01       	movw	r20, r18
    30f4:	0e 94 1e 0c 	call	0x183c	; 0x183c <DIO_ES_tGetPinValue>
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
    30f8:	8a 89       	ldd	r24, Y+18	; 0x12
    30fa:	88 23       	and	r24, r24
    30fc:	71 f3       	breq	.-36     	; 0x30da <KPD_ES_tGetKeyPressed+0x176>
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					}
					*copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    30fe:	89 89       	ldd	r24, Y+17	; 0x11
    3100:	48 2f       	mov	r20, r24
    3102:	50 e0       	ldi	r21, 0x00	; 0
    3104:	88 89       	ldd	r24, Y+16	; 0x10
    3106:	28 2f       	mov	r18, r24
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	ca 01       	movw	r24, r20
    310c:	88 0f       	add	r24, r24
    310e:	99 1f       	adc	r25, r25
    3110:	88 0f       	add	r24, r24
    3112:	99 1f       	adc	r25, r25
    3114:	82 0f       	add	r24, r18
    3116:	93 1f       	adc	r25, r19
    3118:	fc 01       	movw	r30, r24
    311a:	ee 54       	subi	r30, 0x4E	; 78
    311c:	fe 4f       	sbci	r31, 0xFE	; 254
    311e:	80 81       	ld	r24, Z
    3120:	eb 89       	ldd	r30, Y+19	; 0x13
    3122:	fc 89       	ldd	r31, Y+20	; 0x14
    3124:	80 83       	st	Z, r24
					Local_u8Flag = HIGH;
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	8f 87       	std	Y+15, r24	; 0x0f
    312a:	07 c0       	rjmp	.+14     	; 0x313a <KPD_ES_tGetKeyPressed+0x1d6>
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
    312c:	88 89       	ldd	r24, Y+16	; 0x10
    312e:	8f 5f       	subi	r24, 0xFF	; 255
    3130:	88 8b       	std	Y+16, r24	; 0x10
    3132:	88 89       	ldd	r24, Y+16	; 0x10
    3134:	84 30       	cpi	r24, 0x04	; 4
    3136:	08 f4       	brcc	.+2      	; 0x313a <KPD_ES_tGetKeyPressed+0x1d6>
    3138:	3b cf       	rjmp	.-394    	; 0x2fb0 <KPD_ES_tGetKeyPressed+0x4c>
					Local_u8Flag = HIGH;
					break;
				}
			}
			// Deactivate ROW
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],HIGH);
    313a:	89 89       	ldd	r24, Y+17	; 0x11
    313c:	88 2f       	mov	r24, r24
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	fc 01       	movw	r30, r24
    3142:	ee 53       	subi	r30, 0x3E	; 62
    3144:	fe 4f       	sbci	r31, 0xFE	; 254
    3146:	90 81       	ld	r25, Z
    3148:	80 e0       	ldi	r24, 0x00	; 0
    314a:	69 2f       	mov	r22, r25
    314c:	41 e0       	ldi	r20, 0x01	; 1
    314e:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
			if(Local_u8Flag == HIGH)
    3152:	8f 85       	ldd	r24, Y+15	; 0x0f
    3154:	81 30       	cpi	r24, 0x01	; 1
    3156:	39 f0       	breq	.+14     	; 0x3166 <KPD_ES_tGetKeyPressed+0x202>
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
	if(copy_pu8ReturnedKey != NULL)
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
    3158:	89 89       	ldd	r24, Y+17	; 0x11
    315a:	8f 5f       	subi	r24, 0xFF	; 255
    315c:	89 8b       	std	Y+17, r24	; 0x11
    315e:	89 89       	ldd	r24, Y+17	; 0x11
    3160:	84 30       	cpi	r24, 0x04	; 4
    3162:	08 f4       	brcc	.+2      	; 0x3166 <KPD_ES_tGetKeyPressed+0x202>
    3164:	17 cf       	rjmp	.-466    	; 0x2f94 <KPD_ES_tGetKeyPressed+0x30>


	}else{
		return ES_NOT_OK;
	}
	return ES_OK;
    3166:	1d 8a       	std	Y+21, r1	; 0x15
    3168:	02 c0       	rjmp	.+4      	; 0x316e <KPD_ES_tGetKeyPressed+0x20a>
				break;
		}


	}else{
		return ES_NOT_OK;
    316a:	81 e0       	ldi	r24, 0x01	; 1
    316c:	8d 8b       	std	Y+21, r24	; 0x15
    316e:	8d 89       	ldd	r24, Y+21	; 0x15
	}
	return ES_OK;
}
    3170:	65 96       	adiw	r28, 0x15	; 21
    3172:	0f b6       	in	r0, 0x3f	; 63
    3174:	f8 94       	cli
    3176:	de bf       	out	0x3e, r29	; 62
    3178:	0f be       	out	0x3f, r0	; 63
    317a:	cd bf       	out	0x3d, r28	; 61
    317c:	cf 91       	pop	r28
    317e:	df 91       	pop	r29
    3180:	08 95       	ret

00003182 <Enter_IRQ_CallBack>:
State currentState;



void Enter_IRQ_CallBack(void)
{
    3182:	df 93       	push	r29
    3184:	cf 93       	push	r28
    3186:	cd b7       	in	r28, 0x3d	; 61
    3188:	de b7       	in	r29, 0x3e	; 62
	currentState = STATE_MAIN_SCREEN;
    318a:	81 e0       	ldi	r24, 0x01	; 1
    318c:	80 93 f9 01 	sts	0x01F9, r24
}
    3190:	cf 91       	pop	r28
    3192:	df 91       	pop	r29
    3194:	08 95       	ret

00003196 <SPI_Motors_Dash_Custom_Protocol>:


u8 state = ACTION_FAILED;

void SPI_Motors_Dash_Custom_Protocol(char motor, char dir, char SpeedOrAngle[])
{
    3196:	df 93       	push	r29
    3198:	cf 93       	push	r28
    319a:	cd b7       	in	r28, 0x3d	; 61
    319c:	de b7       	in	r29, 0x3e	; 62
    319e:	a1 97       	sbiw	r28, 0x21	; 33
    31a0:	0f b6       	in	r0, 0x3f	; 63
    31a2:	f8 94       	cli
    31a4:	de bf       	out	0x3e, r29	; 62
    31a6:	0f be       	out	0x3f, r0	; 63
    31a8:	cd bf       	out	0x3d, r28	; 61
    31aa:	8e 8f       	std	Y+30, r24	; 0x1e
    31ac:	6f 8f       	std	Y+31, r22	; 0x1f
    31ae:	59 a3       	std	Y+33, r21	; 0x21
    31b0:	48 a3       	std	Y+32, r20	; 0x20

	DIO_ES_tSetPinValue(SPI_REG, SS, LOW);
    31b2:	81 e0       	ldi	r24, 0x01	; 1
    31b4:	64 e0       	ldi	r22, 0x04	; 4
    31b6:	40 e0       	ldi	r20, 0x00	; 0
    31b8:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>

	// SPI sends and transmitts in hexadecimal
	SPI_Transmit(motor);
    31bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31be:	0e 94 e5 07 	call	0xfca	; 0xfca <SPI_Transmit>
    31c2:	80 e0       	ldi	r24, 0x00	; 0
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	a8 e4       	ldi	r26, 0x48	; 72
    31c8:	b3 e4       	ldi	r27, 0x43	; 67
    31ca:	89 8f       	std	Y+25, r24	; 0x19
    31cc:	9a 8f       	std	Y+26, r25	; 0x1a
    31ce:	ab 8f       	std	Y+27, r26	; 0x1b
    31d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31d2:	69 8d       	ldd	r22, Y+25	; 0x19
    31d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31da:	20 e0       	ldi	r18, 0x00	; 0
    31dc:	30 e0       	ldi	r19, 0x00	; 0
    31de:	4a e7       	ldi	r20, 0x7A	; 122
    31e0:	55 e4       	ldi	r21, 0x45	; 69
    31e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e6:	dc 01       	movw	r26, r24
    31e8:	cb 01       	movw	r24, r22
    31ea:	8d 8b       	std	Y+21, r24	; 0x15
    31ec:	9e 8b       	std	Y+22, r25	; 0x16
    31ee:	af 8b       	std	Y+23, r26	; 0x17
    31f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31f2:	6d 89       	ldd	r22, Y+21	; 0x15
    31f4:	7e 89       	ldd	r23, Y+22	; 0x16
    31f6:	8f 89       	ldd	r24, Y+23	; 0x17
    31f8:	98 8d       	ldd	r25, Y+24	; 0x18
    31fa:	20 e0       	ldi	r18, 0x00	; 0
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	40 e8       	ldi	r20, 0x80	; 128
    3200:	5f e3       	ldi	r21, 0x3F	; 63
    3202:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3206:	88 23       	and	r24, r24
    3208:	2c f4       	brge	.+10     	; 0x3214 <SPI_Motors_Dash_Custom_Protocol+0x7e>
		__ticks = 1;
    320a:	81 e0       	ldi	r24, 0x01	; 1
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	9c 8b       	std	Y+20, r25	; 0x14
    3210:	8b 8b       	std	Y+19, r24	; 0x13
    3212:	3f c0       	rjmp	.+126    	; 0x3292 <SPI_Motors_Dash_Custom_Protocol+0xfc>
	else if (__tmp > 65535)
    3214:	6d 89       	ldd	r22, Y+21	; 0x15
    3216:	7e 89       	ldd	r23, Y+22	; 0x16
    3218:	8f 89       	ldd	r24, Y+23	; 0x17
    321a:	98 8d       	ldd	r25, Y+24	; 0x18
    321c:	20 e0       	ldi	r18, 0x00	; 0
    321e:	3f ef       	ldi	r19, 0xFF	; 255
    3220:	4f e7       	ldi	r20, 0x7F	; 127
    3222:	57 e4       	ldi	r21, 0x47	; 71
    3224:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3228:	18 16       	cp	r1, r24
    322a:	4c f5       	brge	.+82     	; 0x327e <SPI_Motors_Dash_Custom_Protocol+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    322c:	69 8d       	ldd	r22, Y+25	; 0x19
    322e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3230:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3232:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3234:	20 e0       	ldi	r18, 0x00	; 0
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	40 e2       	ldi	r20, 0x20	; 32
    323a:	51 e4       	ldi	r21, 0x41	; 65
    323c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3240:	dc 01       	movw	r26, r24
    3242:	cb 01       	movw	r24, r22
    3244:	bc 01       	movw	r22, r24
    3246:	cd 01       	movw	r24, r26
    3248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    324c:	dc 01       	movw	r26, r24
    324e:	cb 01       	movw	r24, r22
    3250:	9c 8b       	std	Y+20, r25	; 0x14
    3252:	8b 8b       	std	Y+19, r24	; 0x13
    3254:	0f c0       	rjmp	.+30     	; 0x3274 <SPI_Motors_Dash_Custom_Protocol+0xde>
    3256:	80 e9       	ldi	r24, 0x90	; 144
    3258:	91 e0       	ldi	r25, 0x01	; 1
    325a:	9a 8b       	std	Y+18, r25	; 0x12
    325c:	89 8b       	std	Y+17, r24	; 0x11
    325e:	89 89       	ldd	r24, Y+17	; 0x11
    3260:	9a 89       	ldd	r25, Y+18	; 0x12
    3262:	01 97       	sbiw	r24, 0x01	; 1
    3264:	f1 f7       	brne	.-4      	; 0x3262 <SPI_Motors_Dash_Custom_Protocol+0xcc>
    3266:	9a 8b       	std	Y+18, r25	; 0x12
    3268:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    326a:	8b 89       	ldd	r24, Y+19	; 0x13
    326c:	9c 89       	ldd	r25, Y+20	; 0x14
    326e:	01 97       	sbiw	r24, 0x01	; 1
    3270:	9c 8b       	std	Y+20, r25	; 0x14
    3272:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3274:	8b 89       	ldd	r24, Y+19	; 0x13
    3276:	9c 89       	ldd	r25, Y+20	; 0x14
    3278:	00 97       	sbiw	r24, 0x00	; 0
    327a:	69 f7       	brne	.-38     	; 0x3256 <SPI_Motors_Dash_Custom_Protocol+0xc0>
    327c:	14 c0       	rjmp	.+40     	; 0x32a6 <SPI_Motors_Dash_Custom_Protocol+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    327e:	6d 89       	ldd	r22, Y+21	; 0x15
    3280:	7e 89       	ldd	r23, Y+22	; 0x16
    3282:	8f 89       	ldd	r24, Y+23	; 0x17
    3284:	98 8d       	ldd	r25, Y+24	; 0x18
    3286:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    328a:	dc 01       	movw	r26, r24
    328c:	cb 01       	movw	r24, r22
    328e:	9c 8b       	std	Y+20, r25	; 0x14
    3290:	8b 8b       	std	Y+19, r24	; 0x13
    3292:	8b 89       	ldd	r24, Y+19	; 0x13
    3294:	9c 89       	ldd	r25, Y+20	; 0x14
    3296:	98 8b       	std	Y+16, r25	; 0x10
    3298:	8f 87       	std	Y+15, r24	; 0x0f
    329a:	8f 85       	ldd	r24, Y+15	; 0x0f
    329c:	98 89       	ldd	r25, Y+16	; 0x10
    329e:	01 97       	sbiw	r24, 0x01	; 1
    32a0:	f1 f7       	brne	.-4      	; 0x329e <SPI_Motors_Dash_Custom_Protocol+0x108>
    32a2:	98 8b       	std	Y+16, r25	; 0x10
    32a4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);
	DIO_ES_tSetPinValue(SPI_REG, SS, LOW);
    32a6:	81 e0       	ldi	r24, 0x01	; 1
    32a8:	64 e0       	ldi	r22, 0x04	; 4
    32aa:	40 e0       	ldi	r20, 0x00	; 0
    32ac:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
	SPI_Transmit(dir);
    32b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32b2:	0e 94 e5 07 	call	0xfca	; 0xfca <SPI_Transmit>


	Lcd_ES_tsendString(SpeedOrAngle);
    32b6:	88 a1       	ldd	r24, Y+32	; 0x20
    32b8:	99 a1       	ldd	r25, Y+33	; 0x21
    32ba:	0e 94 3a 14 	call	0x2874	; 0x2874 <Lcd_ES_tsendString>

	u8 i=0;
    32be:	1d 8e       	std	Y+29, r1	; 0x1d
	for(i=0;SpeedOrAngle[i]!='\0';i++)
    32c0:	1d 8e       	std	Y+29, r1	; 0x1d
    32c2:	90 c0       	rjmp	.+288    	; 0x33e4 <SPI_Motors_Dash_Custom_Protocol+0x24e>
    32c4:	80 e0       	ldi	r24, 0x00	; 0
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	a6 e9       	ldi	r26, 0x96	; 150
    32ca:	b3 e4       	ldi	r27, 0x43	; 67
    32cc:	8b 87       	std	Y+11, r24	; 0x0b
    32ce:	9c 87       	std	Y+12, r25	; 0x0c
    32d0:	ad 87       	std	Y+13, r26	; 0x0d
    32d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    32d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    32d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    32da:	9e 85       	ldd	r25, Y+14	; 0x0e
    32dc:	20 e0       	ldi	r18, 0x00	; 0
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	4a e7       	ldi	r20, 0x7A	; 122
    32e2:	55 e4       	ldi	r21, 0x45	; 69
    32e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e8:	dc 01       	movw	r26, r24
    32ea:	cb 01       	movw	r24, r22
    32ec:	8f 83       	std	Y+7, r24	; 0x07
    32ee:	98 87       	std	Y+8, r25	; 0x08
    32f0:	a9 87       	std	Y+9, r26	; 0x09
    32f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32f4:	6f 81       	ldd	r22, Y+7	; 0x07
    32f6:	78 85       	ldd	r23, Y+8	; 0x08
    32f8:	89 85       	ldd	r24, Y+9	; 0x09
    32fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    32fc:	20 e0       	ldi	r18, 0x00	; 0
    32fe:	30 e0       	ldi	r19, 0x00	; 0
    3300:	40 e8       	ldi	r20, 0x80	; 128
    3302:	5f e3       	ldi	r21, 0x3F	; 63
    3304:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3308:	88 23       	and	r24, r24
    330a:	2c f4       	brge	.+10     	; 0x3316 <SPI_Motors_Dash_Custom_Protocol+0x180>
		__ticks = 1;
    330c:	81 e0       	ldi	r24, 0x01	; 1
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	9e 83       	std	Y+6, r25	; 0x06
    3312:	8d 83       	std	Y+5, r24	; 0x05
    3314:	3f c0       	rjmp	.+126    	; 0x3394 <SPI_Motors_Dash_Custom_Protocol+0x1fe>
	else if (__tmp > 65535)
    3316:	6f 81       	ldd	r22, Y+7	; 0x07
    3318:	78 85       	ldd	r23, Y+8	; 0x08
    331a:	89 85       	ldd	r24, Y+9	; 0x09
    331c:	9a 85       	ldd	r25, Y+10	; 0x0a
    331e:	20 e0       	ldi	r18, 0x00	; 0
    3320:	3f ef       	ldi	r19, 0xFF	; 255
    3322:	4f e7       	ldi	r20, 0x7F	; 127
    3324:	57 e4       	ldi	r21, 0x47	; 71
    3326:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    332a:	18 16       	cp	r1, r24
    332c:	4c f5       	brge	.+82     	; 0x3380 <SPI_Motors_Dash_Custom_Protocol+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    332e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3330:	7c 85       	ldd	r23, Y+12	; 0x0c
    3332:	8d 85       	ldd	r24, Y+13	; 0x0d
    3334:	9e 85       	ldd	r25, Y+14	; 0x0e
    3336:	20 e0       	ldi	r18, 0x00	; 0
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	40 e2       	ldi	r20, 0x20	; 32
    333c:	51 e4       	ldi	r21, 0x41	; 65
    333e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3342:	dc 01       	movw	r26, r24
    3344:	cb 01       	movw	r24, r22
    3346:	bc 01       	movw	r22, r24
    3348:	cd 01       	movw	r24, r26
    334a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    334e:	dc 01       	movw	r26, r24
    3350:	cb 01       	movw	r24, r22
    3352:	9e 83       	std	Y+6, r25	; 0x06
    3354:	8d 83       	std	Y+5, r24	; 0x05
    3356:	0f c0       	rjmp	.+30     	; 0x3376 <SPI_Motors_Dash_Custom_Protocol+0x1e0>
    3358:	80 e9       	ldi	r24, 0x90	; 144
    335a:	91 e0       	ldi	r25, 0x01	; 1
    335c:	9c 83       	std	Y+4, r25	; 0x04
    335e:	8b 83       	std	Y+3, r24	; 0x03
    3360:	8b 81       	ldd	r24, Y+3	; 0x03
    3362:	9c 81       	ldd	r25, Y+4	; 0x04
    3364:	01 97       	sbiw	r24, 0x01	; 1
    3366:	f1 f7       	brne	.-4      	; 0x3364 <SPI_Motors_Dash_Custom_Protocol+0x1ce>
    3368:	9c 83       	std	Y+4, r25	; 0x04
    336a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    336c:	8d 81       	ldd	r24, Y+5	; 0x05
    336e:	9e 81       	ldd	r25, Y+6	; 0x06
    3370:	01 97       	sbiw	r24, 0x01	; 1
    3372:	9e 83       	std	Y+6, r25	; 0x06
    3374:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3376:	8d 81       	ldd	r24, Y+5	; 0x05
    3378:	9e 81       	ldd	r25, Y+6	; 0x06
    337a:	00 97       	sbiw	r24, 0x00	; 0
    337c:	69 f7       	brne	.-38     	; 0x3358 <SPI_Motors_Dash_Custom_Protocol+0x1c2>
    337e:	14 c0       	rjmp	.+40     	; 0x33a8 <SPI_Motors_Dash_Custom_Protocol+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3380:	6f 81       	ldd	r22, Y+7	; 0x07
    3382:	78 85       	ldd	r23, Y+8	; 0x08
    3384:	89 85       	ldd	r24, Y+9	; 0x09
    3386:	9a 85       	ldd	r25, Y+10	; 0x0a
    3388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    338c:	dc 01       	movw	r26, r24
    338e:	cb 01       	movw	r24, r22
    3390:	9e 83       	std	Y+6, r25	; 0x06
    3392:	8d 83       	std	Y+5, r24	; 0x05
    3394:	8d 81       	ldd	r24, Y+5	; 0x05
    3396:	9e 81       	ldd	r25, Y+6	; 0x06
    3398:	9a 83       	std	Y+2, r25	; 0x02
    339a:	89 83       	std	Y+1, r24	; 0x01
    339c:	89 81       	ldd	r24, Y+1	; 0x01
    339e:	9a 81       	ldd	r25, Y+2	; 0x02
    33a0:	01 97       	sbiw	r24, 0x01	; 1
    33a2:	f1 f7       	brne	.-4      	; 0x33a0 <SPI_Motors_Dash_Custom_Protocol+0x20a>
    33a4:	9a 83       	std	Y+2, r25	; 0x02
    33a6:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(300);
		DIO_ES_tSetPinValue(SPI_REG, SS, LOW);
    33a8:	81 e0       	ldi	r24, 0x01	; 1
    33aa:	64 e0       	ldi	r22, 0x04	; 4
    33ac:	40 e0       	ldi	r20, 0x00	; 0
    33ae:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_ES_tSetPinValue>
		Lcd_ES_tsendChar(SpeedOrAngle[i]);
    33b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33b4:	28 2f       	mov	r18, r24
    33b6:	30 e0       	ldi	r19, 0x00	; 0
    33b8:	88 a1       	ldd	r24, Y+32	; 0x20
    33ba:	99 a1       	ldd	r25, Y+33	; 0x21
    33bc:	fc 01       	movw	r30, r24
    33be:	e2 0f       	add	r30, r18
    33c0:	f3 1f       	adc	r31, r19
    33c2:	80 81       	ld	r24, Z
    33c4:	0e 94 8b 13 	call	0x2716	; 0x2716 <Lcd_ES_tsendChar>
		SPI_Transmit(SpeedOrAngle[i]);
    33c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33ca:	28 2f       	mov	r18, r24
    33cc:	30 e0       	ldi	r19, 0x00	; 0
    33ce:	88 a1       	ldd	r24, Y+32	; 0x20
    33d0:	99 a1       	ldd	r25, Y+33	; 0x21
    33d2:	fc 01       	movw	r30, r24
    33d4:	e2 0f       	add	r30, r18
    33d6:	f3 1f       	adc	r31, r19
    33d8:	80 81       	ld	r24, Z
    33da:	0e 94 e5 07 	call	0xfca	; 0xfca <SPI_Transmit>


	Lcd_ES_tsendString(SpeedOrAngle);

	u8 i=0;
	for(i=0;SpeedOrAngle[i]!='\0';i++)
    33de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33e0:	8f 5f       	subi	r24, 0xFF	; 255
    33e2:	8d 8f       	std	Y+29, r24	; 0x1d
    33e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33e6:	28 2f       	mov	r18, r24
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	88 a1       	ldd	r24, Y+32	; 0x20
    33ec:	99 a1       	ldd	r25, Y+33	; 0x21
    33ee:	fc 01       	movw	r30, r24
    33f0:	e2 0f       	add	r30, r18
    33f2:	f3 1f       	adc	r31, r19
    33f4:	80 81       	ld	r24, Z
    33f6:	88 23       	and	r24, r24
    33f8:	09 f0       	breq	.+2      	; 0x33fc <SPI_Motors_Dash_Custom_Protocol+0x266>
    33fa:	64 cf       	rjmp	.-312    	; 0x32c4 <SPI_Motors_Dash_Custom_Protocol+0x12e>
		Lcd_ES_tsendChar(SpeedOrAngle[i]);
		SPI_Transmit(SpeedOrAngle[i]);
	}


}
    33fc:	a1 96       	adiw	r28, 0x21	; 33
    33fe:	0f b6       	in	r0, 0x3f	; 63
    3400:	f8 94       	cli
    3402:	de bf       	out	0x3e, r29	; 62
    3404:	0f be       	out	0x3f, r0	; 63
    3406:	cd bf       	out	0x3d, r28	; 61
    3408:	cf 91       	pop	r28
    340a:	df 91       	pop	r29
    340c:	08 95       	ret

0000340e <main>:



int main()
{
    340e:	0f 93       	push	r16
    3410:	1f 93       	push	r17
    3412:	df 93       	push	r29
    3414:	cf 93       	push	r28
    3416:	cd b7       	in	r28, 0x3d	; 61
    3418:	de b7       	in	r29, 0x3e	; 62
    341a:	c7 5e       	subi	r28, 0xE7	; 231
    341c:	d0 40       	sbci	r29, 0x00	; 0
    341e:	0f b6       	in	r0, 0x3f	; 63
    3420:	f8 94       	cli
    3422:	de bf       	out	0x3e, r29	; 62
    3424:	0f be       	out	0x3f, r0	; 63
    3426:	cd bf       	out	0x3d, r28	; 61
	DIO_ES_tInit();
    3428:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <DIO_ES_tInit>
	Lcd_ES_tInit();
    342c:	0e 94 3c 12 	call	0x2478	; 0x2478 <Lcd_ES_tInit>
	sei();
    3430:	78 94       	sei

	SPI_Config_t SPI_Cfg;

	SPI_Cfg.CLK_PHASE = SPI_CLK_PHASE_LEADING_SAMPLE;
    3432:	fe 01       	movw	r30, r28
    3434:	e8 52       	subi	r30, 0x28	; 40
    3436:	ff 4f       	sbci	r31, 0xFF	; 255
    3438:	13 82       	std	Z+3, r1	; 0x03
	SPI_Cfg.CLK_Polarity = SPI_CLK_Polarity_IDLE_LOW;
    343a:	fe 01       	movw	r30, r28
    343c:	e8 52       	subi	r30, 0x28	; 40
    343e:	ff 4f       	sbci	r31, 0xFF	; 255
    3440:	12 82       	std	Z+2, r1	; 0x02
	SPI_Cfg.Data_Order = SPI_DATA_ORDER_MSB;
    3442:	fe 01       	movw	r30, r28
    3444:	e8 52       	subi	r30, 0x28	; 40
    3446:	ff 4f       	sbci	r31, 0xFF	; 255
    3448:	11 82       	std	Z+1, r1	; 0x01

	SPI_Cfg.Device_Mode = SPI_DEVICE_MODE_MASTER;
    344a:	fe 01       	movw	r30, r28
    344c:	e8 52       	subi	r30, 0x28	; 40
    344e:	ff 4f       	sbci	r31, 0xFF	; 255
    3450:	80 e1       	ldi	r24, 0x10	; 16
    3452:	80 83       	st	Z, r24
	SPI_Cfg.Prescalar = SPI_Prescalar_16;
    3454:	fe 01       	movw	r30, r28
    3456:	e8 52       	subi	r30, 0x28	; 40
    3458:	ff 4f       	sbci	r31, 0xFF	; 255
    345a:	81 e0       	ldi	r24, 0x01	; 1
    345c:	84 83       	std	Z+4, r24	; 0x04

	SPI_Init(&SPI_Cfg);
    345e:	ce 01       	movw	r24, r28
    3460:	88 52       	subi	r24, 0x28	; 40
    3462:	9f 4f       	sbci	r25, 0xFF	; 255
    3464:	0e 94 4f 06 	call	0xc9e	; 0xc9e <SPI_Init>



	u8 Value;
	char Option,Option2,Option3,Option4,Option5;
	u8 count=0;
    3468:	fe 01       	movw	r30, r28
    346a:	e9 52       	subi	r30, 0x29	; 41
    346c:	ff 4f       	sbci	r31, 0xFF	; 255
    346e:	10 82       	st	Z, r1
	u8 stepperAngle=0;
    3470:	fe 01       	movw	r30, r28
    3472:	ea 52       	subi	r30, 0x2A	; 42
    3474:	ff 4f       	sbci	r31, 0xFF	; 255
    3476:	10 82       	st	Z, r1
	int ServoAngle=0;
    3478:	fe 01       	movw	r30, r28
    347a:	ec 52       	subi	r30, 0x2C	; 44
    347c:	ff 4f       	sbci	r31, 0xFF	; 255
    347e:	11 82       	std	Z+1, r1	; 0x01
    3480:	10 82       	st	Z, r1

	u8 flag=0;
    3482:	fe 01       	movw	r30, r28
    3484:	ed 52       	subi	r30, 0x2D	; 45
    3486:	ff 4f       	sbci	r31, 0xFF	; 255
    3488:	10 82       	st	Z, r1

	EXI_TriggerEdge(EX_INT2,RISING_EDGE);
    348a:	82 e0       	ldi	r24, 0x02	; 2
    348c:	63 e0       	ldi	r22, 0x03	; 3
    348e:	0e 94 9f 08 	call	0x113e	; 0x113e <EXI_TriggerEdge>
	EXI_ENABLE(EX_INT2);
    3492:	82 e0       	ldi	r24, 0x02	; 2
    3494:	0e 94 31 08 	call	0x1062	; 0x1062 <EXI_ENABLE>
	EXI_Set_CallBack(EX_INT2,Enter_IRQ_CallBack);
    3498:	21 ec       	ldi	r18, 0xC1	; 193
    349a:	38 e1       	ldi	r19, 0x18	; 24
    349c:	82 e0       	ldi	r24, 0x02	; 2
    349e:	b9 01       	movw	r22, r18
    34a0:	0e 94 f8 07 	call	0xff0	; 0xff0 <EXI_Set_CallBack>


	currentState = STATE_NULL_STATE;
    34a4:	10 92 f9 01 	sts	0x01F9, r1


	Lcd_ES_tsendString("Enter Password !");
    34a8:	80 e6       	ldi	r24, 0x60	; 96
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	0e 94 3a 14 	call	0x2874	; 0x2874 <Lcd_ES_tsendString>
	LCD_ES_tGoTo(1, 5);
    34b0:	81 e0       	ldi	r24, 0x01	; 1
    34b2:	65 e0       	ldi	r22, 0x05	; 5
    34b4:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <LCD_ES_tGoTo>

	while(1)
	{
		switch(currentState)
    34b8:	80 91 f9 01 	lds	r24, 0x01F9
    34bc:	28 2f       	mov	r18, r24
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	ca 51       	subi	r28, 0x1A	; 26
    34c2:	df 4f       	sbci	r29, 0xFF	; 255
    34c4:	39 83       	std	Y+1, r19	; 0x01
    34c6:	28 83       	st	Y, r18
    34c8:	c6 5e       	subi	r28, 0xE6	; 230
    34ca:	d0 40       	sbci	r29, 0x00	; 0
    34cc:	ca 51       	subi	r28, 0x1A	; 26
    34ce:	df 4f       	sbci	r29, 0xFF	; 255
    34d0:	48 81       	ld	r20, Y
    34d2:	59 81       	ldd	r21, Y+1	; 0x01
    34d4:	c6 5e       	subi	r28, 0xE6	; 230
    34d6:	d0 40       	sbci	r29, 0x00	; 0
    34d8:	43 30       	cpi	r20, 0x03	; 3
    34da:	51 05       	cpc	r21, r1
    34dc:	09 f4       	brne	.+2      	; 0x34e0 <main+0xd2>
    34de:	e8 c3       	rjmp	.+2000   	; 0x3cb0 <main+0x8a2>
    34e0:	ca 51       	subi	r28, 0x1A	; 26
    34e2:	df 4f       	sbci	r29, 0xFF	; 255
    34e4:	88 81       	ld	r24, Y
    34e6:	99 81       	ldd	r25, Y+1	; 0x01
    34e8:	c6 5e       	subi	r28, 0xE6	; 230
    34ea:	d0 40       	sbci	r29, 0x00	; 0
    34ec:	84 30       	cpi	r24, 0x04	; 4
    34ee:	91 05       	cpc	r25, r1
    34f0:	f4 f4       	brge	.+60     	; 0x352e <main+0x120>
    34f2:	ca 51       	subi	r28, 0x1A	; 26
    34f4:	df 4f       	sbci	r29, 0xFF	; 255
    34f6:	e8 81       	ld	r30, Y
    34f8:	f9 81       	ldd	r31, Y+1	; 0x01
    34fa:	c6 5e       	subi	r28, 0xE6	; 230
    34fc:	d0 40       	sbci	r29, 0x00	; 0
    34fe:	e1 30       	cpi	r30, 0x01	; 1
    3500:	f1 05       	cpc	r31, r1
    3502:	09 f4       	brne	.+2      	; 0x3506 <main+0xf8>
    3504:	ef c0       	rjmp	.+478    	; 0x36e4 <main+0x2d6>
    3506:	ca 51       	subi	r28, 0x1A	; 26
    3508:	df 4f       	sbci	r29, 0xFF	; 255
    350a:	28 81       	ld	r18, Y
    350c:	39 81       	ldd	r19, Y+1	; 0x01
    350e:	c6 5e       	subi	r28, 0xE6	; 230
    3510:	d0 40       	sbci	r29, 0x00	; 0
    3512:	22 30       	cpi	r18, 0x02	; 2
    3514:	31 05       	cpc	r19, r1
    3516:	0c f0       	brlt	.+2      	; 0x351a <main+0x10c>
    3518:	c2 c2       	rjmp	.+1412   	; 0x3a9e <main+0x690>
    351a:	ca 51       	subi	r28, 0x1A	; 26
    351c:	df 4f       	sbci	r29, 0xFF	; 255
    351e:	48 81       	ld	r20, Y
    3520:	59 81       	ldd	r21, Y+1	; 0x01
    3522:	c6 5e       	subi	r28, 0xE6	; 230
    3524:	d0 40       	sbci	r29, 0x00	; 0
    3526:	41 15       	cp	r20, r1
    3528:	51 05       	cpc	r21, r1
    352a:	19 f1       	breq	.+70     	; 0x3572 <main+0x164>
    352c:	c5 cf       	rjmp	.-118    	; 0x34b8 <main+0xaa>
    352e:	ca 51       	subi	r28, 0x1A	; 26
    3530:	df 4f       	sbci	r29, 0xFF	; 255
    3532:	88 81       	ld	r24, Y
    3534:	99 81       	ldd	r25, Y+1	; 0x01
    3536:	c6 5e       	subi	r28, 0xE6	; 230
    3538:	d0 40       	sbci	r29, 0x00	; 0
    353a:	85 30       	cpi	r24, 0x05	; 5
    353c:	91 05       	cpc	r25, r1
    353e:	11 f4       	brne	.+4      	; 0x3544 <main+0x136>
    3540:	0c 94 f2 24 	jmp	0x49e4	; 0x49e4 <main+0x15d6>
    3544:	ca 51       	subi	r28, 0x1A	; 26
    3546:	df 4f       	sbci	r29, 0xFF	; 255
    3548:	e8 81       	ld	r30, Y
    354a:	f9 81       	ldd	r31, Y+1	; 0x01
    354c:	c6 5e       	subi	r28, 0xE6	; 230
    354e:	d0 40       	sbci	r29, 0x00	; 0
    3550:	e5 30       	cpi	r30, 0x05	; 5
    3552:	f1 05       	cpc	r31, r1
    3554:	14 f4       	brge	.+4      	; 0x355a <main+0x14c>
    3556:	0c 94 7d 23 	jmp	0x46fa	; 0x46fa <main+0x12ec>
    355a:	ca 51       	subi	r28, 0x1A	; 26
    355c:	df 4f       	sbci	r29, 0xFF	; 255
    355e:	28 81       	ld	r18, Y
    3560:	39 81       	ldd	r19, Y+1	; 0x01
    3562:	c6 5e       	subi	r28, 0xE6	; 230
    3564:	d0 40       	sbci	r29, 0x00	; 0
    3566:	26 30       	cpi	r18, 0x06	; 6
    3568:	31 05       	cpc	r19, r1
    356a:	11 f4       	brne	.+4      	; 0x3570 <main+0x162>
    356c:	0c 94 72 26 	jmp	0x4ce4	; 0x4ce4 <main+0x18d6>
    3570:	a3 cf       	rjmp	.-186    	; 0x34b8 <main+0xaa>
		{
		case STATE_NULL_STATE:
			DIO_ES_tTOGPin(DIO_U8_PORT_D, DIO_U8_PIN_7);
    3572:	83 e0       	ldi	r24, 0x03	; 3
    3574:	67 e0       	ldi	r22, 0x07	; 7
    3576:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <DIO_ES_tTOGPin>
    357a:	fe 01       	movw	r30, r28
    357c:	e1 53       	subi	r30, 0x31	; 49
    357e:	ff 4f       	sbci	r31, 0xFF	; 255
    3580:	80 e0       	ldi	r24, 0x00	; 0
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	aa ef       	ldi	r26, 0xFA	; 250
    3586:	b3 e4       	ldi	r27, 0x43	; 67
    3588:	80 83       	st	Z, r24
    358a:	91 83       	std	Z+1, r25	; 0x01
    358c:	a2 83       	std	Z+2, r26	; 0x02
    358e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3590:	8e 01       	movw	r16, r28
    3592:	05 53       	subi	r16, 0x35	; 53
    3594:	1f 4f       	sbci	r17, 0xFF	; 255
    3596:	fe 01       	movw	r30, r28
    3598:	e1 53       	subi	r30, 0x31	; 49
    359a:	ff 4f       	sbci	r31, 0xFF	; 255
    359c:	60 81       	ld	r22, Z
    359e:	71 81       	ldd	r23, Z+1	; 0x01
    35a0:	82 81       	ldd	r24, Z+2	; 0x02
    35a2:	93 81       	ldd	r25, Z+3	; 0x03
    35a4:	20 e0       	ldi	r18, 0x00	; 0
    35a6:	30 e0       	ldi	r19, 0x00	; 0
    35a8:	4a e7       	ldi	r20, 0x7A	; 122
    35aa:	55 e4       	ldi	r21, 0x45	; 69
    35ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35b0:	dc 01       	movw	r26, r24
    35b2:	cb 01       	movw	r24, r22
    35b4:	f8 01       	movw	r30, r16
    35b6:	80 83       	st	Z, r24
    35b8:	91 83       	std	Z+1, r25	; 0x01
    35ba:	a2 83       	std	Z+2, r26	; 0x02
    35bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35be:	fe 01       	movw	r30, r28
    35c0:	e5 53       	subi	r30, 0x35	; 53
    35c2:	ff 4f       	sbci	r31, 0xFF	; 255
    35c4:	60 81       	ld	r22, Z
    35c6:	71 81       	ldd	r23, Z+1	; 0x01
    35c8:	82 81       	ldd	r24, Z+2	; 0x02
    35ca:	93 81       	ldd	r25, Z+3	; 0x03
    35cc:	20 e0       	ldi	r18, 0x00	; 0
    35ce:	30 e0       	ldi	r19, 0x00	; 0
    35d0:	40 e8       	ldi	r20, 0x80	; 128
    35d2:	5f e3       	ldi	r21, 0x3F	; 63
    35d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35d8:	88 23       	and	r24, r24
    35da:	44 f4       	brge	.+16     	; 0x35ec <main+0x1de>
		__ticks = 1;
    35dc:	fe 01       	movw	r30, r28
    35de:	e7 53       	subi	r30, 0x37	; 55
    35e0:	ff 4f       	sbci	r31, 0xFF	; 255
    35e2:	81 e0       	ldi	r24, 0x01	; 1
    35e4:	90 e0       	ldi	r25, 0x00	; 0
    35e6:	91 83       	std	Z+1, r25	; 0x01
    35e8:	80 83       	st	Z, r24
    35ea:	64 c0       	rjmp	.+200    	; 0x36b4 <main+0x2a6>
	else if (__tmp > 65535)
    35ec:	fe 01       	movw	r30, r28
    35ee:	e5 53       	subi	r30, 0x35	; 53
    35f0:	ff 4f       	sbci	r31, 0xFF	; 255
    35f2:	60 81       	ld	r22, Z
    35f4:	71 81       	ldd	r23, Z+1	; 0x01
    35f6:	82 81       	ldd	r24, Z+2	; 0x02
    35f8:	93 81       	ldd	r25, Z+3	; 0x03
    35fa:	20 e0       	ldi	r18, 0x00	; 0
    35fc:	3f ef       	ldi	r19, 0xFF	; 255
    35fe:	4f e7       	ldi	r20, 0x7F	; 127
    3600:	57 e4       	ldi	r21, 0x47	; 71
    3602:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3606:	18 16       	cp	r1, r24
    3608:	0c f0       	brlt	.+2      	; 0x360c <main+0x1fe>
    360a:	43 c0       	rjmp	.+134    	; 0x3692 <main+0x284>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    360c:	fe 01       	movw	r30, r28
    360e:	e1 53       	subi	r30, 0x31	; 49
    3610:	ff 4f       	sbci	r31, 0xFF	; 255
    3612:	60 81       	ld	r22, Z
    3614:	71 81       	ldd	r23, Z+1	; 0x01
    3616:	82 81       	ldd	r24, Z+2	; 0x02
    3618:	93 81       	ldd	r25, Z+3	; 0x03
    361a:	20 e0       	ldi	r18, 0x00	; 0
    361c:	30 e0       	ldi	r19, 0x00	; 0
    361e:	40 e2       	ldi	r20, 0x20	; 32
    3620:	51 e4       	ldi	r21, 0x41	; 65
    3622:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3626:	dc 01       	movw	r26, r24
    3628:	cb 01       	movw	r24, r22
    362a:	8e 01       	movw	r16, r28
    362c:	07 53       	subi	r16, 0x37	; 55
    362e:	1f 4f       	sbci	r17, 0xFF	; 255
    3630:	bc 01       	movw	r22, r24
    3632:	cd 01       	movw	r24, r26
    3634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3638:	dc 01       	movw	r26, r24
    363a:	cb 01       	movw	r24, r22
    363c:	f8 01       	movw	r30, r16
    363e:	91 83       	std	Z+1, r25	; 0x01
    3640:	80 83       	st	Z, r24
    3642:	1f c0       	rjmp	.+62     	; 0x3682 <main+0x274>
    3644:	fe 01       	movw	r30, r28
    3646:	e9 53       	subi	r30, 0x39	; 57
    3648:	ff 4f       	sbci	r31, 0xFF	; 255
    364a:	80 e9       	ldi	r24, 0x90	; 144
    364c:	91 e0       	ldi	r25, 0x01	; 1
    364e:	91 83       	std	Z+1, r25	; 0x01
    3650:	80 83       	st	Z, r24
    3652:	fe 01       	movw	r30, r28
    3654:	e9 53       	subi	r30, 0x39	; 57
    3656:	ff 4f       	sbci	r31, 0xFF	; 255
    3658:	80 81       	ld	r24, Z
    365a:	91 81       	ldd	r25, Z+1	; 0x01
    365c:	01 97       	sbiw	r24, 0x01	; 1
    365e:	f1 f7       	brne	.-4      	; 0x365c <main+0x24e>
    3660:	fe 01       	movw	r30, r28
    3662:	e9 53       	subi	r30, 0x39	; 57
    3664:	ff 4f       	sbci	r31, 0xFF	; 255
    3666:	91 83       	std	Z+1, r25	; 0x01
    3668:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    366a:	de 01       	movw	r26, r28
    366c:	a7 53       	subi	r26, 0x37	; 55
    366e:	bf 4f       	sbci	r27, 0xFF	; 255
    3670:	fe 01       	movw	r30, r28
    3672:	e7 53       	subi	r30, 0x37	; 55
    3674:	ff 4f       	sbci	r31, 0xFF	; 255
    3676:	80 81       	ld	r24, Z
    3678:	91 81       	ldd	r25, Z+1	; 0x01
    367a:	01 97       	sbiw	r24, 0x01	; 1
    367c:	11 96       	adiw	r26, 0x01	; 1
    367e:	9c 93       	st	X, r25
    3680:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3682:	fe 01       	movw	r30, r28
    3684:	e7 53       	subi	r30, 0x37	; 55
    3686:	ff 4f       	sbci	r31, 0xFF	; 255
    3688:	80 81       	ld	r24, Z
    368a:	91 81       	ldd	r25, Z+1	; 0x01
    368c:	00 97       	sbiw	r24, 0x00	; 0
    368e:	d1 f6       	brne	.-76     	; 0x3644 <main+0x236>
    3690:	13 cf       	rjmp	.-474    	; 0x34b8 <main+0xaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3692:	8e 01       	movw	r16, r28
    3694:	07 53       	subi	r16, 0x37	; 55
    3696:	1f 4f       	sbci	r17, 0xFF	; 255
    3698:	fe 01       	movw	r30, r28
    369a:	e5 53       	subi	r30, 0x35	; 53
    369c:	ff 4f       	sbci	r31, 0xFF	; 255
    369e:	60 81       	ld	r22, Z
    36a0:	71 81       	ldd	r23, Z+1	; 0x01
    36a2:	82 81       	ldd	r24, Z+2	; 0x02
    36a4:	93 81       	ldd	r25, Z+3	; 0x03
    36a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36aa:	dc 01       	movw	r26, r24
    36ac:	cb 01       	movw	r24, r22
    36ae:	f8 01       	movw	r30, r16
    36b0:	91 83       	std	Z+1, r25	; 0x01
    36b2:	80 83       	st	Z, r24
    36b4:	de 01       	movw	r26, r28
    36b6:	ab 53       	subi	r26, 0x3B	; 59
    36b8:	bf 4f       	sbci	r27, 0xFF	; 255
    36ba:	fe 01       	movw	r30, r28
    36bc:	e7 53       	subi	r30, 0x37	; 55
    36be:	ff 4f       	sbci	r31, 0xFF	; 255
    36c0:	80 81       	ld	r24, Z
    36c2:	91 81       	ldd	r25, Z+1	; 0x01
    36c4:	11 96       	adiw	r26, 0x01	; 1
    36c6:	9c 93       	st	X, r25
    36c8:	8e 93       	st	-X, r24
    36ca:	fe 01       	movw	r30, r28
    36cc:	eb 53       	subi	r30, 0x3B	; 59
    36ce:	ff 4f       	sbci	r31, 0xFF	; 255
    36d0:	80 81       	ld	r24, Z
    36d2:	91 81       	ldd	r25, Z+1	; 0x01
    36d4:	01 97       	sbiw	r24, 0x01	; 1
    36d6:	f1 f7       	brne	.-4      	; 0x36d4 <main+0x2c6>
    36d8:	fe 01       	movw	r30, r28
    36da:	eb 53       	subi	r30, 0x3B	; 59
    36dc:	ff 4f       	sbci	r31, 0xFF	; 255
    36de:	91 83       	std	Z+1, r25	; 0x01
    36e0:	80 83       	st	Z, r24
    36e2:	ea ce       	rjmp	.-556    	; 0x34b8 <main+0xaa>
			_delay_ms(500);
			break;


		case STATE_MAIN_SCREEN:
			KPD_ES_tGetKeyPressed(&Value);
    36e4:	ce 01       	movw	r24, r28
    36e6:	80 52       	subi	r24, 0x20	; 32
    36e8:	9f 4f       	sbci	r25, 0xFF	; 255
    36ea:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <KPD_ES_tGetKeyPressed>
			if(Value != KPD_U8_NOT_PRESSED){
    36ee:	fe 01       	movw	r30, r28
    36f0:	e0 52       	subi	r30, 0x20	; 32
    36f2:	ff 4f       	sbci	r31, 0xFF	; 255
    36f4:	80 81       	ld	r24, Z
    36f6:	8f 3f       	cpi	r24, 0xFF	; 255
    36f8:	09 f4       	brne	.+2      	; 0x36fc <main+0x2ee>
    36fa:	de ce       	rjmp	.-580    	; 0x34b8 <main+0xaa>

				Lcd_ES_tsendChar('*');
    36fc:	8a e2       	ldi	r24, 0x2A	; 42
    36fe:	0e 94 8b 13 	call	0x2716	; 0x2716 <Lcd_ES_tsendChar>
				input[indexz] = Value; // Store input in array
    3702:	80 91 dd 01 	lds	r24, 0x01DD
    3706:	88 2f       	mov	r24, r24
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	fe 01       	movw	r30, r28
    370c:	e0 52       	subi	r30, 0x20	; 32
    370e:	ff 4f       	sbci	r31, 0xFF	; 255
    3710:	20 81       	ld	r18, Z
    3712:	fc 01       	movw	r30, r24
    3714:	e8 52       	subi	r30, 0x28	; 40
    3716:	fe 4f       	sbci	r31, 0xFE	; 254
    3718:	20 83       	st	Z, r18
				indexz++;
    371a:	80 91 dd 01 	lds	r24, 0x01DD
    371e:	8f 5f       	subi	r24, 0xFF	; 255
    3720:	80 93 dd 01 	sts	0x01DD, r24
				if (indexz >= 4) { // Check if password entered
    3724:	80 91 dd 01 	lds	r24, 0x01DD
    3728:	84 30       	cpi	r24, 0x04	; 4
    372a:	08 f4       	brcc	.+2      	; 0x372e <main+0x320>
    372c:	c5 ce       	rjmp	.-630    	; 0x34b8 <main+0xaa>
					if (strcmp(input, password) == 0) {
    372e:	88 ed       	ldi	r24, 0xD8	; 216
    3730:	91 e0       	ldi	r25, 0x01	; 1
    3732:	2c ea       	ldi	r18, 0xAC	; 172
    3734:	31 e0       	ldi	r19, 0x01	; 1
    3736:	b9 01       	movw	r22, r18
    3738:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <strcmp>
    373c:	00 97       	sbiw	r24, 0x00	; 0
    373e:	09 f0       	breq	.+2      	; 0x3742 <main+0x334>
    3740:	c6 c0       	rjmp	.+396    	; 0x38ce <main+0x4c0>
						// Password is correct, perform action
						lcd_ES_tclear();
    3742:	0e 94 53 12 	call	0x24a6	; 0x24a6 <lcd_ES_tclear>
						Lcd_ES_tsendString("Welcome to Motor");
    3746:	81 e7       	ldi	r24, 0x71	; 113
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	0e 94 3a 14 	call	0x2874	; 0x2874 <Lcd_ES_tsendString>
						LCD_ES_tGoTo(1, 0);
    374e:	81 e0       	ldi	r24, 0x01	; 1
    3750:	60 e0       	ldi	r22, 0x00	; 0
    3752:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <LCD_ES_tGoTo>
						Lcd_ES_tsendString("Dash board");
    3756:	82 e8       	ldi	r24, 0x82	; 130
    3758:	90 e0       	ldi	r25, 0x00	; 0
    375a:	0e 94 3a 14 	call	0x2874	; 0x2874 <Lcd_ES_tsendString>
    375e:	fe 01       	movw	r30, r28
    3760:	ef 53       	subi	r30, 0x3F	; 63
    3762:	ff 4f       	sbci	r31, 0xFF	; 255
    3764:	80 e0       	ldi	r24, 0x00	; 0
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	aa ef       	ldi	r26, 0xFA	; 250
    376a:	b4 e4       	ldi	r27, 0x44	; 68
    376c:	80 83       	st	Z, r24
    376e:	91 83       	std	Z+1, r25	; 0x01
    3770:	a2 83       	std	Z+2, r26	; 0x02
    3772:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3774:	8e 01       	movw	r16, r28
    3776:	03 54       	subi	r16, 0x43	; 67
    3778:	1f 4f       	sbci	r17, 0xFF	; 255
    377a:	fe 01       	movw	r30, r28
    377c:	ef 53       	subi	r30, 0x3F	; 63
    377e:	ff 4f       	sbci	r31, 0xFF	; 255
    3780:	60 81       	ld	r22, Z
    3782:	71 81       	ldd	r23, Z+1	; 0x01
    3784:	82 81       	ldd	r24, Z+2	; 0x02
    3786:	93 81       	ldd	r25, Z+3	; 0x03
    3788:	20 e0       	ldi	r18, 0x00	; 0
    378a:	30 e0       	ldi	r19, 0x00	; 0
    378c:	4a e7       	ldi	r20, 0x7A	; 122
    378e:	55 e4       	ldi	r21, 0x45	; 69
    3790:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3794:	dc 01       	movw	r26, r24
    3796:	cb 01       	movw	r24, r22
    3798:	f8 01       	movw	r30, r16
    379a:	80 83       	st	Z, r24
    379c:	91 83       	std	Z+1, r25	; 0x01
    379e:	a2 83       	std	Z+2, r26	; 0x02
    37a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37a2:	fe 01       	movw	r30, r28
    37a4:	e3 54       	subi	r30, 0x43	; 67
    37a6:	ff 4f       	sbci	r31, 0xFF	; 255
    37a8:	60 81       	ld	r22, Z
    37aa:	71 81       	ldd	r23, Z+1	; 0x01
    37ac:	82 81       	ldd	r24, Z+2	; 0x02
    37ae:	93 81       	ldd	r25, Z+3	; 0x03
    37b0:	20 e0       	ldi	r18, 0x00	; 0
    37b2:	30 e0       	ldi	r19, 0x00	; 0
    37b4:	40 e8       	ldi	r20, 0x80	; 128
    37b6:	5f e3       	ldi	r21, 0x3F	; 63
    37b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37bc:	88 23       	and	r24, r24
    37be:	44 f4       	brge	.+16     	; 0x37d0 <main+0x3c2>
		__ticks = 1;
    37c0:	fe 01       	movw	r30, r28
    37c2:	e5 54       	subi	r30, 0x45	; 69
    37c4:	ff 4f       	sbci	r31, 0xFF	; 255
    37c6:	81 e0       	ldi	r24, 0x01	; 1
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	91 83       	std	Z+1, r25	; 0x01
    37cc:	80 83       	st	Z, r24
    37ce:	64 c0       	rjmp	.+200    	; 0x3898 <main+0x48a>
	else if (__tmp > 65535)
    37d0:	fe 01       	movw	r30, r28
    37d2:	e3 54       	subi	r30, 0x43	; 67
    37d4:	ff 4f       	sbci	r31, 0xFF	; 255
    37d6:	60 81       	ld	r22, Z
    37d8:	71 81       	ldd	r23, Z+1	; 0x01
    37da:	82 81       	ldd	r24, Z+2	; 0x02
    37dc:	93 81       	ldd	r25, Z+3	; 0x03
    37de:	20 e0       	ldi	r18, 0x00	; 0
    37e0:	3f ef       	ldi	r19, 0xFF	; 255
    37e2:	4f e7       	ldi	r20, 0x7F	; 127
    37e4:	57 e4       	ldi	r21, 0x47	; 71
    37e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37ea:	18 16       	cp	r1, r24
    37ec:	0c f0       	brlt	.+2      	; 0x37f0 <main+0x3e2>
    37ee:	43 c0       	rjmp	.+134    	; 0x3876 <main+0x468>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37f0:	fe 01       	movw	r30, r28
    37f2:	ef 53       	subi	r30, 0x3F	; 63
    37f4:	ff 4f       	sbci	r31, 0xFF	; 255
    37f6:	60 81       	ld	r22, Z
    37f8:	71 81       	ldd	r23, Z+1	; 0x01
    37fa:	82 81       	ldd	r24, Z+2	; 0x02
    37fc:	93 81       	ldd	r25, Z+3	; 0x03
    37fe:	20 e0       	ldi	r18, 0x00	; 0
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	40 e2       	ldi	r20, 0x20	; 32
    3804:	51 e4       	ldi	r21, 0x41	; 65
    3806:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    380a:	dc 01       	movw	r26, r24
    380c:	cb 01       	movw	r24, r22
    380e:	8e 01       	movw	r16, r28
    3810:	05 54       	subi	r16, 0x45	; 69
    3812:	1f 4f       	sbci	r17, 0xFF	; 255
    3814:	bc 01       	movw	r22, r24
    3816:	cd 01       	movw	r24, r26
    3818:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    381c:	dc 01       	movw	r26, r24
    381e:	cb 01       	movw	r24, r22
    3820:	f8 01       	movw	r30, r16
    3822:	91 83       	std	Z+1, r25	; 0x01
    3824:	80 83       	st	Z, r24
    3826:	1f c0       	rjmp	.+62     	; 0x3866 <main+0x458>
    3828:	fe 01       	movw	r30, r28
    382a:	e7 54       	subi	r30, 0x47	; 71
    382c:	ff 4f       	sbci	r31, 0xFF	; 255
    382e:	80 e9       	ldi	r24, 0x90	; 144
    3830:	91 e0       	ldi	r25, 0x01	; 1
    3832:	91 83       	std	Z+1, r25	; 0x01
    3834:	80 83       	st	Z, r24
    3836:	fe 01       	movw	r30, r28
    3838:	e7 54       	subi	r30, 0x47	; 71
    383a:	ff 4f       	sbci	r31, 0xFF	; 255
    383c:	80 81       	ld	r24, Z
    383e:	91 81       	ldd	r25, Z+1	; 0x01
    3840:	01 97       	sbiw	r24, 0x01	; 1
    3842:	f1 f7       	brne	.-4      	; 0x3840 <main+0x432>
    3844:	fe 01       	movw	r30, r28
    3846:	e7 54       	subi	r30, 0x47	; 71
    3848:	ff 4f       	sbci	r31, 0xFF	; 255
    384a:	91 83       	std	Z+1, r25	; 0x01
    384c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    384e:	de 01       	movw	r26, r28
    3850:	a5 54       	subi	r26, 0x45	; 69
    3852:	bf 4f       	sbci	r27, 0xFF	; 255
    3854:	fe 01       	movw	r30, r28
    3856:	e5 54       	subi	r30, 0x45	; 69
    3858:	ff 4f       	sbci	r31, 0xFF	; 255
    385a:	80 81       	ld	r24, Z
    385c:	91 81       	ldd	r25, Z+1	; 0x01
    385e:	01 97       	sbiw	r24, 0x01	; 1
    3860:	11 96       	adiw	r26, 0x01	; 1
    3862:	9c 93       	st	X, r25
    3864:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3866:	fe 01       	movw	r30, r28
    3868:	e5 54       	subi	r30, 0x45	; 69
    386a:	ff 4f       	sbci	r31, 0xFF	; 255
    386c:	80 81       	ld	r24, Z
    386e:	91 81       	ldd	r25, Z+1	; 0x01
    3870:	00 97       	sbiw	r24, 0x00	; 0
    3872:	d1 f6       	brne	.-76     	; 0x3828 <main+0x41a>
    3874:	28 c0       	rjmp	.+80     	; 0x38c6 <main+0x4b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3876:	8e 01       	movw	r16, r28
    3878:	05 54       	subi	r16, 0x45	; 69
    387a:	1f 4f       	sbci	r17, 0xFF	; 255
    387c:	fe 01       	movw	r30, r28
    387e:	e3 54       	subi	r30, 0x43	; 67
    3880:	ff 4f       	sbci	r31, 0xFF	; 255
    3882:	60 81       	ld	r22, Z
    3884:	71 81       	ldd	r23, Z+1	; 0x01
    3886:	82 81       	ldd	r24, Z+2	; 0x02
    3888:	93 81       	ldd	r25, Z+3	; 0x03
    388a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	f8 01       	movw	r30, r16
    3894:	91 83       	std	Z+1, r25	; 0x01
    3896:	80 83       	st	Z, r24
    3898:	de 01       	movw	r26, r28
    389a:	a9 54       	subi	r26, 0x49	; 73
    389c:	bf 4f       	sbci	r27, 0xFF	; 255
    389e:	fe 01       	movw	r30, r28
    38a0:	e5 54       	subi	r30, 0x45	; 69
    38a2:	ff 4f       	sbci	r31, 0xFF	; 255
    38a4:	80 81       	ld	r24, Z
    38a6:	91 81       	ldd	r25, Z+1	; 0x01
    38a8:	11 96       	adiw	r26, 0x01	; 1
    38aa:	9c 93       	st	X, r25
    38ac:	8e 93       	st	-X, r24
    38ae:	fe 01       	movw	r30, r28
    38b0:	e9 54       	subi	r30, 0x49	; 73
    38b2:	ff 4f       	sbci	r31, 0xFF	; 255
    38b4:	80 81       	ld	r24, Z
    38b6:	91 81       	ldd	r25, Z+1	; 0x01
    38b8:	01 97       	sbiw	r24, 0x01	; 1
    38ba:	f1 f7       	brne	.-4      	; 0x38b8 <main+0x4aa>
    38bc:	fe 01       	movw	r30, r28
    38be:	e9 54       	subi	r30, 0x49	; 73
    38c0:	ff 4f       	sbci	r31, 0xFF	; 255
    38c2:	91 83       	std	Z+1, r25	; 0x01
    38c4:	80 83       	st	Z, r24
						_delay_ms(2000);
						currentState = STATE_MOTOR_OPTIONS;
    38c6:	82 e0       	ldi	r24, 0x02	; 2
    38c8:	80 93 f9 01 	sts	0x01F9, r24
    38cc:	f5 cd       	rjmp	.-1046   	; 0x34b8 <main+0xaa>
					}
					else {
						// Password is incorrect, reset input
						lcd_ES_tclear();
    38ce:	0e 94 53 12 	call	0x24a6	; 0x24a6 <lcd_ES_tclear>
						Lcd_ES_tsendString("Wrong Password");
    38d2:	8d e8       	ldi	r24, 0x8D	; 141
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	0e 94 3a 14 	call	0x2874	; 0x2874 <Lcd_ES_tsendString>
						memset(input, '\0', sizeof(input));
    38da:	88 ed       	ldi	r24, 0xD8	; 216
    38dc:	91 e0       	ldi	r25, 0x01	; 1
    38de:	60 e0       	ldi	r22, 0x00	; 0
    38e0:	70 e0       	ldi	r23, 0x00	; 0
    38e2:	45 e0       	ldi	r20, 0x05	; 5
    38e4:	50 e0       	ldi	r21, 0x00	; 0
    38e6:	0e 94 43 27 	call	0x4e86	; 0x4e86 <memset>
						indexz = 0;
    38ea:	10 92 dd 01 	sts	0x01DD, r1
    38ee:	fe 01       	movw	r30, r28
    38f0:	ed 54       	subi	r30, 0x4D	; 77
    38f2:	ff 4f       	sbci	r31, 0xFF	; 255
    38f4:	80 e0       	ldi	r24, 0x00	; 0
    38f6:	90 e8       	ldi	r25, 0x80	; 128
    38f8:	ab eb       	ldi	r26, 0xBB	; 187
    38fa:	b4 e4       	ldi	r27, 0x44	; 68
    38fc:	80 83       	st	Z, r24
    38fe:	91 83       	std	Z+1, r25	; 0x01
    3900:	a2 83       	std	Z+2, r26	; 0x02
    3902:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3904:	8e 01       	movw	r16, r28
    3906:	01 55       	subi	r16, 0x51	; 81
    3908:	1f 4f       	sbci	r17, 0xFF	; 255
    390a:	fe 01       	movw	r30, r28
    390c:	ed 54       	subi	r30, 0x4D	; 77
    390e:	ff 4f       	sbci	r31, 0xFF	; 255
    3910:	60 81       	ld	r22, Z
    3912:	71 81       	ldd	r23, Z+1	; 0x01
    3914:	82 81       	ldd	r24, Z+2	; 0x02
    3916:	93 81       	ldd	r25, Z+3	; 0x03
    3918:	20 e0       	ldi	r18, 0x00	; 0
    391a:	30 e0       	ldi	r19, 0x00	; 0
    391c:	4a e7       	ldi	r20, 0x7A	; 122
    391e:	55 e4       	ldi	r21, 0x45	; 69
    3920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3924:	dc 01       	movw	r26, r24
    3926:	cb 01       	movw	r24, r22
    3928:	f8 01       	movw	r30, r16
    392a:	80 83       	st	Z, r24
    392c:	91 83       	std	Z+1, r25	; 0x01
    392e:	a2 83       	std	Z+2, r26	; 0x02
    3930:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3932:	fe 01       	movw	r30, r28
    3934:	e1 55       	subi	r30, 0x51	; 81
    3936:	ff 4f       	sbci	r31, 0xFF	; 255
    3938:	60 81       	ld	r22, Z
    393a:	71 81       	ldd	r23, Z+1	; 0x01
    393c:	82 81       	ldd	r24, Z+2	; 0x02
    393e:	93 81       	ldd	r25, Z+3	; 0x03
    3940:	20 e0       	ldi	r18, 0x00	; 0
    3942:	30 e0       	ldi	r19, 0x00	; 0
    3944:	40 e8       	ldi	r20, 0x80	; 128
    3946:	5f e3       	ldi	r21, 0x3F	; 63
    3948:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    394c:	88 23       	and	r24, r24
    394e:	44 f4       	brge	.+16     	; 0x3960 <main+0x552>
		__ticks = 1;
    3950:	fe 01       	movw	r30, r28
    3952:	e3 55       	subi	r30, 0x53	; 83
    3954:	ff 4f       	sbci	r31, 0xFF	; 255
    3956:	81 e0       	ldi	r24, 0x01	; 1
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	91 83       	std	Z+1, r25	; 0x01
    395c:	80 83       	st	Z, r24
    395e:	64 c0       	rjmp	.+200    	; 0x3a28 <main+0x61a>
	else if (__tmp > 65535)
    3960:	fe 01       	movw	r30, r28
    3962:	e1 55       	subi	r30, 0x51	; 81
    3964:	ff 4f       	sbci	r31, 0xFF	; 255
    3966:	60 81       	ld	r22, Z
    3968:	71 81       	ldd	r23, Z+1	; 0x01
    396a:	82 81       	ldd	r24, Z+2	; 0x02
    396c:	93 81       	ldd	r25, Z+3	; 0x03
    396e:	20 e0       	ldi	r18, 0x00	; 0
    3970:	3f ef       	ldi	r19, 0xFF	; 255
    3972:	4f e7       	ldi	r20, 0x7F	; 127
    3974:	57 e4       	ldi	r21, 0x47	; 71
    3976:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    397a:	18 16       	cp	r1, r24
    397c:	0c f0       	brlt	.+2      	; 0x3980 <main+0x572>
    397e:	43 c0       	rjmp	.+134    	; 0x3a06 <main+0x5f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3980:	fe 01       	movw	r30, r28
    3982:	ed 54       	subi	r30, 0x4D	; 77
    3984:	ff 4f       	sbci	r31, 0xFF	; 255
    3986:	60 81       	ld	r22, Z
    3988:	71 81       	ldd	r23, Z+1	; 0x01
    398a:	82 81       	ldd	r24, Z+2	; 0x02
    398c:	93 81       	ldd	r25, Z+3	; 0x03
    398e:	20 e0       	ldi	r18, 0x00	; 0
    3990:	30 e0       	ldi	r19, 0x00	; 0
    3992:	40 e2       	ldi	r20, 0x20	; 32
    3994:	51 e4       	ldi	r21, 0x41	; 65
    3996:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    399a:	dc 01       	movw	r26, r24
    399c:	cb 01       	movw	r24, r22
    399e:	8e 01       	movw	r16, r28
    39a0:	03 55       	subi	r16, 0x53	; 83
    39a2:	1f 4f       	sbci	r17, 0xFF	; 255
    39a4:	bc 01       	movw	r22, r24
    39a6:	cd 01       	movw	r24, r26
    39a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ac:	dc 01       	movw	r26, r24
    39ae:	cb 01       	movw	r24, r22
    39b0:	f8 01       	movw	r30, r16
    39b2:	91 83       	std	Z+1, r25	; 0x01
    39b4:	80 83       	st	Z, r24
    39b6:	1f c0       	rjmp	.+62     	; 0x39f6 <main+0x5e8>
    39b8:	fe 01       	movw	r30, r28
    39ba:	e5 55       	subi	r30, 0x55	; 85
    39bc:	ff 4f       	sbci	r31, 0xFF	; 255
    39be:	80 e9       	ldi	r24, 0x90	; 144
    39c0:	91 e0       	ldi	r25, 0x01	; 1
    39c2:	91 83       	std	Z+1, r25	; 0x01
    39c4:	80 83       	st	Z, r24
    39c6:	fe 01       	movw	r30, r28
    39c8:	e5 55       	subi	r30, 0x55	; 85
    39ca:	ff 4f       	sbci	r31, 0xFF	; 255
    39cc:	80 81       	ld	r24, Z
    39ce:	91 81       	ldd	r25, Z+1	; 0x01
    39d0:	01 97       	sbiw	r24, 0x01	; 1
    39d2:	f1 f7       	brne	.-4      	; 0x39d0 <main+0x5c2>
    39d4:	fe 01       	movw	r30, r28
    39d6:	e5 55       	subi	r30, 0x55	; 85
    39d8:	ff 4f       	sbci	r31, 0xFF	; 255
    39da:	91 83       	std	Z+1, r25	; 0x01
    39dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39de:	de 01       	movw	r26, r28
    39e0:	a3 55       	subi	r26, 0x53	; 83
    39e2:	bf 4f       	sbci	r27, 0xFF	; 255
    39e4:	fe 01       	movw	r30, r28
    39e6:	e3 55       	subi	r30, 0x53	; 83
    39e8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ea:	80 81       	ld	r24, Z
    39ec:	91 81       	ldd	r25, Z+1	; 0x01
    39ee:	01 97       	sbiw	r24, 0x01	; 1
    39f0:	11 96       	adiw	r26, 0x01	; 1
    39f2:	9c 93       	st	X, r25
    39f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39f6:	fe 01       	movw	r30, r28
    39f8:	e3 55       	subi	r30, 0x53	; 83
    39fa:	ff 4f       	sbci	r31, 0xFF	; 255
    39fc:	80 81       	ld	r24, Z
    39fe:	91 81       	ldd	r25, Z+1	; 0x01
    3a00:	00 97       	sbiw	r24, 0x00	; 0
    3a02:	d1 f6       	brne	.-76     	; 0x39b8 <main+0x5aa>
    3a04:	27 c0       	rjmp	.+78     	; 0x3a54 <main+0x646>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a06:	8e 01       	movw	r16, r28
    3a08:	03 55       	subi	r16, 0x53	; 83
    3a0a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a0c:	fe 01       	movw	r30, r28
    3a0e:	e1 55       	subi	r30, 0x51	; 81
    3a10:	ff 4f       	sbci	r31, 0xFF	; 255
    3a12:	60 81       	ld	r22, Z
    3a14:	71 81       	ldd	r23, Z+1	; 0x01
    3a16:	82 81       	ldd	r24, Z+2	; 0x02
    3a18:	93 81       	ldd	r25, Z+3	; 0x03
    3a1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a1e:	dc 01       	movw	r26, r24
    3a20:	cb 01       	movw	r24, r22
    3a22:	f8 01       	movw	r30, r16
    3a24:	91 83       	std	Z+1, r25	; 0x01
    3a26:	80 83       	st	Z, r24
    3a28:	de 01       	movw	r26, r28
    3a2a:	a7 55       	subi	r26, 0x57	; 87
    3a2c:	bf 4f       	sbci	r27, 0xFF	; 255
    3a2e:	fe 01       	movw	r30, r28
    3a30:	e3 55       	subi	r30, 0x53	; 83
    3a32:	ff 4f       	sbci	r31, 0xFF	; 255
    3a34:	80 81       	ld	r24, Z
    3a36:	91 81       	ldd	r25, Z+1	; 0x01
    3a38:	8d 93       	st	X+, r24
    3a3a:	9c 93       	st	X, r25
    3a3c:	fe 01       	movw	r30, r28
    3a3e:	e7 55       	subi	r30, 0x57	; 87
    3a40:	ff 4f       	sbci	r31, 0xFF	; 255
    3a42:	80 81       	ld	r24, Z
    3a44:	91 81       	ldd	r25, Z+1	; 0x01
    3a46:	01 97       	sbiw	r24, 0x01	; 1
    3a48:	f1 f7       	brne	.-4      	; 0x3a46 <main+0x638>
    3a4a:	fe 01       	movw	r30, r28
    3a4c:	e7 55       	subi	r30, 0x57	; 87
    3a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a50:	91 83       	std	Z+1, r25	; 0x01
    3a52:	80 83       	st	Z, r24
						_delay_ms(1500);
						count++;
    3a54:	de 01       	movw	r26, r28
    3a56:	a9 52       	subi	r26, 0x29	; 41
    3a58:	bf 4f       	sbci	r27, 0xFF	; 255
    3a5a:	fe 01       	movw	r30, r28
    3a5c:	e9 52       	subi	r30, 0x29	; 41
    3a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a60:	80 81       	ld	r24, Z
    3a62:	8f 5f       	subi	r24, 0xFF	; 255
    3a64:	8c 93       	st	X, r24
						lcd_ES_tclear();
    3a66:	0e 94 53 12 	call	0x24a6	; 0x24a6 <lcd_ES_tclear>
						Lcd_ES_tsendString("Try again");
    3a6a:	8c e9       	ldi	r24, 0x9C	; 156
    3a6c:	90 e0       	ldi	r25, 0x00	; 0
    3a6e:	0e 94 3a 14 	call	0x2874	; 0x2874 <Lcd_ES_tsendString>
						LCD_ES_tGoTo(1, 5);
    3a72:	81 e0       	ldi	r24, 0x01	; 1
    3a74:	65 e0       	ldi	r22, 0x05	; 5
    3a76:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <LCD_ES_tGoTo>
						if(count == 3){
    3a7a:	fe 01       	movw	r30, r28
    3a7c:	e9 52       	subi	r30, 0x29	; 41
    3a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a80:	80 81       	ld	r24, Z
    3a82:	83 30       	cpi	r24, 0x03	; 3
    3a84:	09 f0       	breq	.+2      	; 0x3a88 <main+0x67a>
    3a86:	18 cd       	rjmp	.-1488   	; 0x34b8 <main+0xaa>
							lcd_ES_tclear();
    3a88:	0e 94 53 12 	call	0x24a6	; 0x24a6 <lcd_ES_tclear>
							Lcd_ES_tsendString("Blocked !!!");
    3a8c:	86 ea       	ldi	r24, 0xA6	; 166
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	0e 94 3a 14 	call	0x2874	; 0x2874 <Lcd_ES_tsendString>
							count=0;
    3a94:	fe 01       	movw	r30, r28
    3a96:	e9 52       	subi	r30, 0x29	; 41
    3a98:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9a:	10 82       	st	Z, r1
    3a9c:	0d cd       	rjmp	.-1510   	; 0x34b8 <main+0xaa>

			break;


		case STATE_MOTOR_OPTIONS:
			if (!gettingMotorOption) {
    3a9e:	80 91 f4 01 	lds	r24, 0x01F4
    3aa2:	88 23       	and	r24, r24
    3aa4:	c9 f4       	brne	.+50     	; 0x3ad8 <main+0x6ca>
				lcd_ES_tclear();
    3aa6:	0e 94 53 12 	call	0x24a6	; 0x24a6 <lcd_ES_tclear>
				Lcd_ES_tsendString("1- DC Motor");
    3aaa:	82 eb       	ldi	r24, 0xB2	; 178
    3aac:	90 e0       	ldi	r25, 0x00	; 0
    3aae:	0e 94 3a 14 	call	0x2874	; 0x2874 <Lcd_ES_tsendString>
				LCD_ES_tGoTo(1, 0);
    3ab2:	81 e0       	ldi	r24, 0x01	; 1
    3ab4:	60 e0       	ldi	r22, 0x00	; 0
    3ab6:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <LCD_ES_tGoTo>
				Lcd_ES_tsendString("2- Stepper");
    3aba:	8e eb       	ldi	r24, 0xBE	; 190
    3abc:	90 e0       	ldi	r25, 0x00	; 0
    3abe:	0e 94 3a 14 	call	0x2874	; 0x2874 <Lcd_ES_tsendString>
				LCD_ES_tGoTo(2, 0);
    3ac2:	82 e0       	ldi	r24, 0x02	; 2
    3ac4:	60 e0       	ldi	r22, 0x00	; 0
    3ac6:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <LCD_ES_tGoTo>
				Lcd_ES_tsendString("3- Servo Motor");
    3aca:	89 ec       	ldi	r24, 0xC9	; 201
    3acc:	90 e0       	ldi	r25, 0x00	; 0
    3ace:	0e 94 3a 14 	call	0x2874	; 0x2874 <Lcd_ES_tsendString>
				gettingMotorOption = 1;
    3ad2:	81 e0       	ldi	r24, 0x01	; 1
    3ad4:	80 93 f4 01 	sts	0x01F4, r24
			}

			KPD_ES_tGetKeyPressed(&Option);
    3ad8:	ce 01       	movw	r24, r28
    3ada:	8f 51       	subi	r24, 0x1F	; 31
    3adc:	9f 4f       	sbci	r25, 0xFF	; 255
    3ade:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <KPD_ES_tGetKeyPressed>
			if (Option != KPD_U8_NOT_PRESSED) {
    3ae2:	fe 01       	movw	r30, r28
    3ae4:	ef 51       	subi	r30, 0x1F	; 31
    3ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae8:	80 81       	ld	r24, Z
    3aea:	8f 3f       	cpi	r24, 0xFF	; 255
    3aec:	09 f4       	brne	.+2      	; 0x3af0 <main+0x6e2>
    3aee:	e4 cc       	rjmp	.-1592   	; 0x34b8 <main+0xaa>
				if (Option == '1') {  // DC Motor
    3af0:	fe 01       	movw	r30, r28
    3af2:	ef 51       	subi	r30, 0x1F	; 31
    3af4:	ff 4f       	sbci	r31, 0xFF	; 255
    3af6:	80 81       	ld	r24, Z
    3af8:	81 33       	cpi	r24, 0x31	; 49
    3afa:	31 f4       	brne	.+12     	; 0x3b08 <main+0x6fa>
					gettingMotorOption = 0;
    3afc:	10 92 f4 01 	sts	0x01F4, r1
					currentState = STATE_DC_MOTOR_MOVE;
    3b00:	83 e0       	ldi	r24, 0x03	; 3
    3b02:	80 93 f9 01 	sts	0x01F9, r24
    3b06:	d8 cc       	rjmp	.-1616   	; 0x34b8 <main+0xaa>
				} else if (Option == '2') {  // Stepper Motor
    3b08:	fe 01       	movw	r30, r28
    3b0a:	ef 51       	subi	r30, 0x1F	; 31
    3b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0e:	80 81       	ld	r24, Z
    3b10:	82 33       	cpi	r24, 0x32	; 50
    3b12:	21 f4       	brne	.+8      	; 0x3b1c <main+0x70e>
					currentState = STATE_STEPPER_MOVE;
    3b14:	84 e0       	ldi	r24, 0x04	; 4
    3b16:	80 93 f9 01 	sts	0x01F9, r24
    3b1a:	ce cc       	rjmp	.-1636   	; 0x34b8 <main+0xaa>
				}else if (Option == '3') {  // Stepper Motor
    3b1c:	fe 01       	movw	r30, r28
    3b1e:	ef 51       	subi	r30, 0x1F	; 31
    3b20:	ff 4f       	sbci	r31, 0xFF	; 255
    3b22:	80 81       	ld	r24, Z
    3b24:	83 33       	cpi	r24, 0x33	; 51
    3b26:	21 f4       	brne	.+8      	; 0x3b30 <main+0x722>
					currentState = STATE_SERVO_MOVE;
    3b28:	85 e0       	ldi	r24, 0x05	; 5
    3b2a:	80 93 f9 01 	sts	0x01F9, r24
    3b2e:	c4 cc       	rjmp	.-1656   	; 0x34b8 <main+0xaa>
				}else {
					lcd_ES_tclear();
    3b30:	0e 94 53 12 	call	0x24a6	; 0x24a6 <lcd_ES_tclear>
					Lcd_ES_tsendString("Invalid Option");
    3b34:	88 ed       	ldi	r24, 0xD8	; 216
    3b36:	90 e0       	ldi	r25, 0x00	; 0
    3b38:	0e 94 3a 14 	call	0x2874	; 0x2874 <Lcd_ES_tsendString>
    3b3c:	fe 01       	movw	r30, r28
    3b3e:	eb 55       	subi	r30, 0x5B	; 91
    3b40:	ff 4f       	sbci	r31, 0xFF	; 255
    3b42:	80 e0       	ldi	r24, 0x00	; 0
    3b44:	90 e0       	ldi	r25, 0x00	; 0
    3b46:	aa ef       	ldi	r26, 0xFA	; 250
    3b48:	b4 e4       	ldi	r27, 0x44	; 68
    3b4a:	80 83       	st	Z, r24
    3b4c:	91 83       	std	Z+1, r25	; 0x01
    3b4e:	a2 83       	std	Z+2, r26	; 0x02
    3b50:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b52:	8e 01       	movw	r16, r28
    3b54:	0f 55       	subi	r16, 0x5F	; 95
    3b56:	1f 4f       	sbci	r17, 0xFF	; 255
    3b58:	fe 01       	movw	r30, r28
    3b5a:	eb 55       	subi	r30, 0x5B	; 91
    3b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5e:	60 81       	ld	r22, Z
    3b60:	71 81       	ldd	r23, Z+1	; 0x01
    3b62:	82 81       	ldd	r24, Z+2	; 0x02
    3b64:	93 81       	ldd	r25, Z+3	; 0x03
    3b66:	20 e0       	ldi	r18, 0x00	; 0
    3b68:	30 e0       	ldi	r19, 0x00	; 0
    3b6a:	4a e7       	ldi	r20, 0x7A	; 122
    3b6c:	55 e4       	ldi	r21, 0x45	; 69
    3b6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b72:	dc 01       	movw	r26, r24
    3b74:	cb 01       	movw	r24, r22
    3b76:	f8 01       	movw	r30, r16
    3b78:	80 83       	st	Z, r24
    3b7a:	91 83       	std	Z+1, r25	; 0x01
    3b7c:	a2 83       	std	Z+2, r26	; 0x02
    3b7e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b80:	fe 01       	movw	r30, r28
    3b82:	ef 55       	subi	r30, 0x5F	; 95
    3b84:	ff 4f       	sbci	r31, 0xFF	; 255
    3b86:	60 81       	ld	r22, Z
    3b88:	71 81       	ldd	r23, Z+1	; 0x01
    3b8a:	82 81       	ldd	r24, Z+2	; 0x02
    3b8c:	93 81       	ldd	r25, Z+3	; 0x03
    3b8e:	20 e0       	ldi	r18, 0x00	; 0
    3b90:	30 e0       	ldi	r19, 0x00	; 0
    3b92:	40 e8       	ldi	r20, 0x80	; 128
    3b94:	5f e3       	ldi	r21, 0x3F	; 63
    3b96:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b9a:	88 23       	and	r24, r24
    3b9c:	44 f4       	brge	.+16     	; 0x3bae <main+0x7a0>
		__ticks = 1;
    3b9e:	fe 01       	movw	r30, r28
    3ba0:	e1 56       	subi	r30, 0x61	; 97
    3ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba4:	81 e0       	ldi	r24, 0x01	; 1
    3ba6:	90 e0       	ldi	r25, 0x00	; 0
    3ba8:	91 83       	std	Z+1, r25	; 0x01
    3baa:	80 83       	st	Z, r24
    3bac:	64 c0       	rjmp	.+200    	; 0x3c76 <main+0x868>
	else if (__tmp > 65535)
    3bae:	fe 01       	movw	r30, r28
    3bb0:	ef 55       	subi	r30, 0x5F	; 95
    3bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb4:	60 81       	ld	r22, Z
    3bb6:	71 81       	ldd	r23, Z+1	; 0x01
    3bb8:	82 81       	ldd	r24, Z+2	; 0x02
    3bba:	93 81       	ldd	r25, Z+3	; 0x03
    3bbc:	20 e0       	ldi	r18, 0x00	; 0
    3bbe:	3f ef       	ldi	r19, 0xFF	; 255
    3bc0:	4f e7       	ldi	r20, 0x7F	; 127
    3bc2:	57 e4       	ldi	r21, 0x47	; 71
    3bc4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bc8:	18 16       	cp	r1, r24
    3bca:	0c f0       	brlt	.+2      	; 0x3bce <main+0x7c0>
    3bcc:	43 c0       	rjmp	.+134    	; 0x3c54 <main+0x846>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bce:	fe 01       	movw	r30, r28
    3bd0:	eb 55       	subi	r30, 0x5B	; 91
    3bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd4:	60 81       	ld	r22, Z
    3bd6:	71 81       	ldd	r23, Z+1	; 0x01
    3bd8:	82 81       	ldd	r24, Z+2	; 0x02
    3bda:	93 81       	ldd	r25, Z+3	; 0x03
    3bdc:	20 e0       	ldi	r18, 0x00	; 0
    3bde:	30 e0       	ldi	r19, 0x00	; 0
    3be0:	40 e2       	ldi	r20, 0x20	; 32
    3be2:	51 e4       	ldi	r21, 0x41	; 65
    3be4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3be8:	dc 01       	movw	r26, r24
    3bea:	cb 01       	movw	r24, r22
    3bec:	8e 01       	movw	r16, r28
    3bee:	01 56       	subi	r16, 0x61	; 97
    3bf0:	1f 4f       	sbci	r17, 0xFF	; 255
    3bf2:	bc 01       	movw	r22, r24
    3bf4:	cd 01       	movw	r24, r26
    3bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bfa:	dc 01       	movw	r26, r24
    3bfc:	cb 01       	movw	r24, r22
    3bfe:	f8 01       	movw	r30, r16
    3c00:	91 83       	std	Z+1, r25	; 0x01
    3c02:	80 83       	st	Z, r24
    3c04:	1f c0       	rjmp	.+62     	; 0x3c44 <main+0x836>
    3c06:	fe 01       	movw	r30, r28
    3c08:	e3 56       	subi	r30, 0x63	; 99
    3c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0c:	80 e9       	ldi	r24, 0x90	; 144
    3c0e:	91 e0       	ldi	r25, 0x01	; 1
    3c10:	91 83       	std	Z+1, r25	; 0x01
    3c12:	80 83       	st	Z, r24
    3c14:	fe 01       	movw	r30, r28
    3c16:	e3 56       	subi	r30, 0x63	; 99
    3c18:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1a:	80 81       	ld	r24, Z
    3c1c:	91 81       	ldd	r25, Z+1	; 0x01
    3c1e:	01 97       	sbiw	r24, 0x01	; 1
    3c20:	f1 f7       	brne	.-4      	; 0x3c1e <main+0x810>
    3c22:	fe 01       	movw	r30, r28
    3c24:	e3 56       	subi	r30, 0x63	; 99
    3c26:	ff 4f       	sbci	r31, 0xFF	; 255
    3c28:	91 83       	std	Z+1, r25	; 0x01
    3c2a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c2c:	de 01       	movw	r26, r28
    3c2e:	a1 56       	subi	r26, 0x61	; 97
    3c30:	bf 4f       	sbci	r27, 0xFF	; 255
    3c32:	fe 01       	movw	r30, r28
    3c34:	e1 56       	subi	r30, 0x61	; 97
    3c36:	ff 4f       	sbci	r31, 0xFF	; 255
    3c38:	80 81       	ld	r24, Z
    3c3a:	91 81       	ldd	r25, Z+1	; 0x01
    3c3c:	01 97       	sbiw	r24, 0x01	; 1
    3c3e:	11 96       	adiw	r26, 0x01	; 1
    3c40:	9c 93       	st	X, r25
    3c42:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c44:	fe 01       	movw	r30, r28
    3c46:	e1 56       	subi	r30, 0x61	; 97
    3c48:	ff 4f       	sbci	r31, 0xFF	; 255
    3c4a:	80 81       	ld	r24, Z
    3c4c:	91 81       	ldd	r25, Z+1	; 0x01
    3c4e:	00 97       	sbiw	r24, 0x00	; 0
    3c50:	d1 f6       	brne	.-76     	; 0x3c06 <main+0x7f8>
    3c52:	28 c0       	rjmp	.+80     	; 0x3ca4 <main+0x896>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c54:	8e 01       	movw	r16, r28
    3c56:	01 56       	subi	r16, 0x61	; 97
    3c58:	1f 4f       	sbci	r17, 0xFF	; 255
    3c5a:	fe 01       	movw	r30, r28
    3c5c:	ef 55       	subi	r30, 0x5F	; 95
    3c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c60:	60 81       	ld	r22, Z
    3c62:	71 81       	ldd	r23, Z+1	; 0x01
    3c64:	82 81       	ldd	r24, Z+2	; 0x02
    3c66:	93 81       	ldd	r25, Z+3	; 0x03
    3c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c6c:	dc 01       	movw	r26, r24
    3c6e:	cb 01       	movw	r24, r22
    3c70:	f8 01       	movw	r30, r16
    3c72:	91 83       	std	Z+1, r25	; 0x01
    3c74:	80 83       	st	Z, r24
    3c76:	de 01       	movw	r26, r28
    3c78:	a5 56       	subi	r26, 0x65	; 101
    3c7a:	bf 4f       	sbci	r27, 0xFF	; 255
    3c7c:	fe 01       	movw	r30, r28
    3c7e:	e1 56       	subi	r30, 0x61	; 97
    3c80:	ff 4f       	sbci	r31, 0xFF	; 255
    3c82:	80 81       	ld	r24, Z
    3c84:	91 81       	ldd	r25, Z+1	; 0x01
    3c86:	11 96       	adiw	r26, 0x01	; 1
    3c88:	9c 93       	st	X, r25
    3c8a:	8e 93       	st	-X, r24
    3c8c:	fe 01       	movw	r30, r28
    3c8e:	e5 56       	subi	r30, 0x65	; 101
    3c90:	ff 4f       	sbci	r31, 0xFF	; 255
    3c92:	80 81       	ld	r24, Z
    3c94:	91 81       	ldd	r25, Z+1	; 0x01
    3c96:	01 97       	sbiw	r24, 0x01	; 1
    3c98:	f1 f7       	brne	.-4      	; 0x3c96 <main+0x888>
    3c9a:	fe 01       	movw	r30, r28
    3c9c:	e5 56       	subi	r30, 0x65	; 101
    3c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca0:	91 83       	std	Z+1, r25	; 0x01
    3ca2:	80 83       	st	Z, r24
					_delay_ms(2000);
					gettingMotorOption=0;
    3ca4:	10 92 f4 01 	sts	0x01F4, r1
					currentState = STATE_MOTOR_OPTIONS;
    3ca8:	82 e0       	ldi	r24, 0x02	; 2
    3caa:	80 93 f9 01 	sts	0x01F9, r24
    3cae:	04 cc       	rjmp	.-2040   	; 0x34b8 <main+0xaa>
				}
			}
			break;

		case STATE_DC_MOTOR_MOVE:
			if(!flag)
    3cb0:	fe 01       	movw	r30, r28
    3cb2:	ed 52       	subi	r30, 0x2D	; 45
    3cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb6:	80 81       	ld	r24, Z
    3cb8:	88 23       	and	r24, r24
    3cba:	09 f0       	breq	.+2      	; 0x3cbe <main+0x8b0>
    3cbc:	2b c1       	rjmp	.+598    	; 0x3f14 <main+0xb06>
			{
				if(!gettingSpeedOption){
    3cbe:	80 91 f7 01 	lds	r24, 0x01F7
    3cc2:	88 23       	and	r24, r24
    3cc4:	49 f4       	brne	.+18     	; 0x3cd8 <main+0x8ca>
					lcd_ES_tclear();
    3cc6:	0e 94 53 12 	call	0x24a6	; 0x24a6 <lcd_ES_tclear>
					Lcd_ES_tsendString("Speed(0-99): ");
    3cca:	87 ee       	ldi	r24, 0xE7	; 231
    3ccc:	90 e0       	ldi	r25, 0x00	; 0
    3cce:	0e 94 3a 14 	call	0x2874	; 0x2874 <Lcd_ES_tsendString>
					gettingSpeedOption = 1;
    3cd2:	81 e0       	ldi	r24, 0x01	; 1
    3cd4:	80 93 f7 01 	sts	0x01F7, r24
				}
				KPD_ES_tGetKeyPressed(&Option5);
    3cd8:	ce 01       	movw	r24, r28
    3cda:	8b 51       	subi	r24, 0x1B	; 27
    3cdc:	9f 4f       	sbci	r25, 0xFF	; 255
    3cde:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <KPD_ES_tGetKeyPressed>
				if(Option5 != KPD_U8_NOT_PRESSED){
    3ce2:	fe 01       	movw	r30, r28
    3ce4:	eb 51       	subi	r30, 0x1B	; 27
    3ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce8:	80 81       	ld	r24, Z
    3cea:	8f 3f       	cpi	r24, 0xFF	; 255
    3cec:	09 f4       	brne	.+2      	; 0x3cf0 <main+0x8e2>
    3cee:	e4 cb       	rjmp	.-2104   	; 0x34b8 <main+0xaa>
					LCD_ES_tGoTo(1, 0);
    3cf0:	81 e0       	ldi	r24, 0x01	; 1
    3cf2:	60 e0       	ldi	r22, 0x00	; 0
    3cf4:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <LCD_ES_tGoTo>
					Lcd_ES_tsendChar(Option5);
    3cf8:	fe 01       	movw	r30, r28
    3cfa:	eb 51       	subi	r30, 0x1B	; 27
    3cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfe:	80 81       	ld	r24, Z
    3d00:	0e 94 8b 13 	call	0x2716	; 0x2716 <Lcd_ES_tsendChar>
					inputSpeed[indexSpeed] = Option5 - '0';
    3d04:	80 91 ee 01 	lds	r24, 0x01EE
    3d08:	28 2f       	mov	r18, r24
    3d0a:	30 e0       	ldi	r19, 0x00	; 0
    3d0c:	fe 01       	movw	r30, r28
    3d0e:	eb 51       	subi	r30, 0x1B	; 27
    3d10:	ff 4f       	sbci	r31, 0xFF	; 255
    3d12:	80 81       	ld	r24, Z
    3d14:	80 53       	subi	r24, 0x30	; 48
    3d16:	f9 01       	movw	r30, r18
    3d18:	e6 51       	subi	r30, 0x16	; 22
    3d1a:	fe 4f       	sbci	r31, 0xFE	; 254
    3d1c:	80 83       	st	Z, r24
					sentSpeed[indexSpeed] = inputSpeed[indexSpeed];
    3d1e:	80 91 ee 01 	lds	r24, 0x01EE
    3d22:	28 2f       	mov	r18, r24
    3d24:	30 e0       	ldi	r19, 0x00	; 0
    3d26:	80 91 ee 01 	lds	r24, 0x01EE
    3d2a:	88 2f       	mov	r24, r24
    3d2c:	90 e0       	ldi	r25, 0x00	; 0
    3d2e:	fc 01       	movw	r30, r24
    3d30:	e6 51       	subi	r30, 0x16	; 22
    3d32:	fe 4f       	sbci	r31, 0xFE	; 254
    3d34:	80 81       	ld	r24, Z
    3d36:	f9 01       	movw	r30, r18
    3d38:	e1 51       	subi	r30, 0x11	; 17
    3d3a:	fe 4f       	sbci	r31, 0xFE	; 254
    3d3c:	80 83       	st	Z, r24
					indexSpeed++;
    3d3e:	80 91 ee 01 	lds	r24, 0x01EE
    3d42:	8f 5f       	subi	r24, 0xFF	; 255
    3d44:	80 93 ee 01 	sts	0x01EE, r24
					if(indexSpeed>=2)
    3d48:	80 91 ee 01 	lds	r24, 0x01EE
    3d4c:	82 30       	cpi	r24, 0x02	; 2
    3d4e:	08 f4       	brcc	.+2      	; 0x3d52 <main+0x944>
    3d50:	b3 cb       	rjmp	.-2202   	; 0x34b8 <main+0xaa>
					{
						sentSpeed[indexSpeed] = '\0';
    3d52:	80 91 ee 01 	lds	r24, 0x01EE
    3d56:	88 2f       	mov	r24, r24
    3d58:	90 e0       	ldi	r25, 0x00	; 0
    3d5a:	fc 01       	movw	r30, r24
    3d5c:	e1 51       	subi	r30, 0x11	; 17
    3d5e:	fe 4f       	sbci	r31, 0xFE	; 254
    3d60:	10 82       	st	Z, r1
    3d62:	fe 01       	movw	r30, r28
    3d64:	e9 56       	subi	r30, 0x69	; 105
    3d66:	ff 4f       	sbci	r31, 0xFF	; 255
    3d68:	80 e0       	ldi	r24, 0x00	; 0
    3d6a:	90 e0       	ldi	r25, 0x00	; 0
    3d6c:	aa ef       	ldi	r26, 0xFA	; 250
    3d6e:	b4 e4       	ldi	r27, 0x44	; 68
    3d70:	80 83       	st	Z, r24
    3d72:	91 83       	std	Z+1, r25	; 0x01
    3d74:	a2 83       	std	Z+2, r26	; 0x02
    3d76:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d78:	8e 01       	movw	r16, r28
    3d7a:	0d 56       	subi	r16, 0x6D	; 109
    3d7c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d7e:	fe 01       	movw	r30, r28
    3d80:	e9 56       	subi	r30, 0x69	; 105
    3d82:	ff 4f       	sbci	r31, 0xFF	; 255
    3d84:	60 81       	ld	r22, Z
    3d86:	71 81       	ldd	r23, Z+1	; 0x01
    3d88:	82 81       	ldd	r24, Z+2	; 0x02
    3d8a:	93 81       	ldd	r25, Z+3	; 0x03
    3d8c:	20 e0       	ldi	r18, 0x00	; 0
    3d8e:	30 e0       	ldi	r19, 0x00	; 0
    3d90:	4a e7       	ldi	r20, 0x7A	; 122
    3d92:	55 e4       	ldi	r21, 0x45	; 69
    3d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d98:	dc 01       	movw	r26, r24
    3d9a:	cb 01       	movw	r24, r22
    3d9c:	f8 01       	movw	r30, r16
    3d9e:	80 83       	st	Z, r24
    3da0:	91 83       	std	Z+1, r25	; 0x01
    3da2:	a2 83       	std	Z+2, r26	; 0x02
    3da4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3da6:	fe 01       	movw	r30, r28
    3da8:	ed 56       	subi	r30, 0x6D	; 109
    3daa:	ff 4f       	sbci	r31, 0xFF	; 255
    3dac:	60 81       	ld	r22, Z
    3dae:	71 81       	ldd	r23, Z+1	; 0x01
    3db0:	82 81       	ldd	r24, Z+2	; 0x02
    3db2:	93 81       	ldd	r25, Z+3	; 0x03
    3db4:	20 e0       	ldi	r18, 0x00	; 0
    3db6:	30 e0       	ldi	r19, 0x00	; 0
    3db8:	40 e8       	ldi	r20, 0x80	; 128
    3dba:	5f e3       	ldi	r21, 0x3F	; 63
    3dbc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3dc0:	88 23       	and	r24, r24
    3dc2:	44 f4       	brge	.+16     	; 0x3dd4 <main+0x9c6>
		__ticks = 1;
    3dc4:	fe 01       	movw	r30, r28
    3dc6:	ef 56       	subi	r30, 0x6F	; 111
    3dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dca:	81 e0       	ldi	r24, 0x01	; 1
    3dcc:	90 e0       	ldi	r25, 0x00	; 0
    3dce:	91 83       	std	Z+1, r25	; 0x01
    3dd0:	80 83       	st	Z, r24
    3dd2:	64 c0       	rjmp	.+200    	; 0x3e9c <main+0xa8e>
	else if (__tmp > 65535)
    3dd4:	fe 01       	movw	r30, r28
    3dd6:	ed 56       	subi	r30, 0x6D	; 109
    3dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dda:	60 81       	ld	r22, Z
    3ddc:	71 81       	ldd	r23, Z+1	; 0x01
    3dde:	82 81       	ldd	r24, Z+2	; 0x02
    3de0:	93 81       	ldd	r25, Z+3	; 0x03
    3de2:	20 e0       	ldi	r18, 0x00	; 0
    3de4:	3f ef       	ldi	r19, 0xFF	; 255
    3de6:	4f e7       	ldi	r20, 0x7F	; 127
    3de8:	57 e4       	ldi	r21, 0x47	; 71
    3dea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3dee:	18 16       	cp	r1, r24
    3df0:	0c f0       	brlt	.+2      	; 0x3df4 <main+0x9e6>
    3df2:	43 c0       	rjmp	.+134    	; 0x3e7a <main+0xa6c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3df4:	fe 01       	movw	r30, r28
    3df6:	e9 56       	subi	r30, 0x69	; 105
    3df8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dfa:	60 81       	ld	r22, Z
    3dfc:	71 81       	ldd	r23, Z+1	; 0x01
    3dfe:	82 81       	ldd	r24, Z+2	; 0x02
    3e00:	93 81       	ldd	r25, Z+3	; 0x03
    3e02:	20 e0       	ldi	r18, 0x00	; 0
    3e04:	30 e0       	ldi	r19, 0x00	; 0
    3e06:	40 e2       	ldi	r20, 0x20	; 32
    3e08:	51 e4       	ldi	r21, 0x41	; 65
    3e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e0e:	dc 01       	movw	r26, r24
    3e10:	cb 01       	movw	r24, r22
    3e12:	8e 01       	movw	r16, r28
    3e14:	0f 56       	subi	r16, 0x6F	; 111
    3e16:	1f 4f       	sbci	r17, 0xFF	; 255
    3e18:	bc 01       	movw	r22, r24
    3e1a:	cd 01       	movw	r24, r26
    3e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e20:	dc 01       	movw	r26, r24
    3e22:	cb 01       	movw	r24, r22
    3e24:	f8 01       	movw	r30, r16
    3e26:	91 83       	std	Z+1, r25	; 0x01
    3e28:	80 83       	st	Z, r24
    3e2a:	1f c0       	rjmp	.+62     	; 0x3e6a <main+0xa5c>
    3e2c:	fe 01       	movw	r30, r28
    3e2e:	e1 57       	subi	r30, 0x71	; 113
    3e30:	ff 4f       	sbci	r31, 0xFF	; 255
    3e32:	80 e9       	ldi	r24, 0x90	; 144
    3e34:	91 e0       	ldi	r25, 0x01	; 1
    3e36:	91 83       	std	Z+1, r25	; 0x01
    3e38:	80 83       	st	Z, r24
    3e3a:	fe 01       	movw	r30, r28
    3e3c:	e1 57       	subi	r30, 0x71	; 113
    3e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e40:	80 81       	ld	r24, Z
    3e42:	91 81       	ldd	r25, Z+1	; 0x01
    3e44:	01 97       	sbiw	r24, 0x01	; 1
    3e46:	f1 f7       	brne	.-4      	; 0x3e44 <main+0xa36>
    3e48:	fe 01       	movw	r30, r28
    3e4a:	e1 57       	subi	r30, 0x71	; 113
    3e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4e:	91 83       	std	Z+1, r25	; 0x01
    3e50:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e52:	de 01       	movw	r26, r28
    3e54:	af 56       	subi	r26, 0x6F	; 111
    3e56:	bf 4f       	sbci	r27, 0xFF	; 255
    3e58:	fe 01       	movw	r30, r28
    3e5a:	ef 56       	subi	r30, 0x6F	; 111
    3e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5e:	80 81       	ld	r24, Z
    3e60:	91 81       	ldd	r25, Z+1	; 0x01
    3e62:	01 97       	sbiw	r24, 0x01	; 1
    3e64:	11 96       	adiw	r26, 0x01	; 1
    3e66:	9c 93       	st	X, r25
    3e68:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e6a:	fe 01       	movw	r30, r28
    3e6c:	ef 56       	subi	r30, 0x6F	; 111
    3e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e70:	80 81       	ld	r24, Z
    3e72:	91 81       	ldd	r25, Z+1	; 0x01
    3e74:	00 97       	sbiw	r24, 0x00	; 0
    3e76:	d1 f6       	brne	.-76     	; 0x3e2c <main+0xa1e>
    3e78:	27 c0       	rjmp	.+78     	; 0x3ec8 <main+0xaba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e7a:	8e 01       	movw	r16, r28
    3e7c:	0f 56       	subi	r16, 0x6F	; 111
    3e7e:	1f 4f       	sbci	r17, 0xFF	; 255
    3e80:	fe 01       	movw	r30, r28
    3e82:	ed 56       	subi	r30, 0x6D	; 109
    3e84:	ff 4f       	sbci	r31, 0xFF	; 255
    3e86:	60 81       	ld	r22, Z
    3e88:	71 81       	ldd	r23, Z+1	; 0x01
    3e8a:	82 81       	ldd	r24, Z+2	; 0x02
    3e8c:	93 81       	ldd	r25, Z+3	; 0x03
    3e8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e92:	dc 01       	movw	r26, r24
    3e94:	cb 01       	movw	r24, r22
    3e96:	f8 01       	movw	r30, r16
    3e98:	91 83       	std	Z+1, r25	; 0x01
    3e9a:	80 83       	st	Z, r24
    3e9c:	de 01       	movw	r26, r28
    3e9e:	a3 57       	subi	r26, 0x73	; 115
    3ea0:	bf 4f       	sbci	r27, 0xFF	; 255
    3ea2:	fe 01       	movw	r30, r28
    3ea4:	ef 56       	subi	r30, 0x6F	; 111
    3ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea8:	80 81       	ld	r24, Z
    3eaa:	91 81       	ldd	r25, Z+1	; 0x01
    3eac:	8d 93       	st	X+, r24
    3eae:	9c 93       	st	X, r25
    3eb0:	fe 01       	movw	r30, r28
    3eb2:	e3 57       	subi	r30, 0x73	; 115
    3eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb6:	80 81       	ld	r24, Z
    3eb8:	91 81       	ldd	r25, Z+1	; 0x01
    3eba:	01 97       	sbiw	r24, 0x01	; 1
    3ebc:	f1 f7       	brne	.-4      	; 0x3eba <main+0xaac>
    3ebe:	fe 01       	movw	r30, r28
    3ec0:	e3 57       	subi	r30, 0x73	; 115
    3ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec4:	91 83       	std	Z+1, r25	; 0x01
    3ec6:	80 83       	st	Z, r24
						_delay_ms(2000);
						Speed = (inputSpeed[0] * 10) + inputSpeed[1];
    3ec8:	80 91 ea 01 	lds	r24, 0x01EA
    3ecc:	88 2f       	mov	r24, r24
    3ece:	90 e0       	ldi	r25, 0x00	; 0
    3ed0:	9c 01       	movw	r18, r24
    3ed2:	22 0f       	add	r18, r18
    3ed4:	33 1f       	adc	r19, r19
    3ed6:	c9 01       	movw	r24, r18
    3ed8:	88 0f       	add	r24, r24
    3eda:	99 1f       	adc	r25, r25
    3edc:	88 0f       	add	r24, r24
    3ede:	99 1f       	adc	r25, r25
    3ee0:	82 0f       	add	r24, r18
    3ee2:	93 1f       	adc	r25, r19
    3ee4:	98 2f       	mov	r25, r24
    3ee6:	80 91 eb 01 	lds	r24, 0x01EB
    3eea:	89 0f       	add	r24, r25
    3eec:	80 93 f3 01 	sts	0x01F3, r24
						memset(inputSpeed, '\0', sizeof(inputSteper));
    3ef0:	8a ee       	ldi	r24, 0xEA	; 234
    3ef2:	91 e0       	ldi	r25, 0x01	; 1
    3ef4:	60 e0       	ldi	r22, 0x00	; 0
    3ef6:	70 e0       	ldi	r23, 0x00	; 0
    3ef8:	45 e0       	ldi	r20, 0x05	; 5
    3efa:	50 e0       	ldi	r21, 0x00	; 0
    3efc:	0e 94 43 27 	call	0x4e86	; 0x4e86 <memset>
						indexSpeed = 0;
    3f00:	10 92 ee 01 	sts	0x01EE, r1
						gettingSpeedOption = 0;
    3f04:	10 92 f7 01 	sts	0x01F7, r1
						flag = 1;
    3f08:	fe 01       	movw	r30, r28
    3f0a:	ed 52       	subi	r30, 0x2D	; 45
    3f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0e:	81 e0       	ldi	r24, 0x01	; 1
    3f10:	80 83       	st	Z, r24
    3f12:	d2 ca       	rjmp	.-2652   	; 0x34b8 <main+0xaa>
				}
			}else
			{


				if (!gettingMovingOption) {
    3f14:	80 91 f5 01 	lds	r24, 0x01F5
    3f18:	88 23       	and	r24, r24
    3f1a:	a9 f4       	brne	.+42     	; 0x3f46 <main+0xb38>
					lcd_ES_tclear();
    3f1c:	0e 94 53 12 	call	0x24a6	; 0x24a6 <lcd_ES_tclear>
					Lcd_ES_tsendString("1- Rotate CW");
    3f20:	85 ef       	ldi	r24, 0xF5	; 245
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	0e 94 3a 14 	call	0x2874	; 0x2874 <Lcd_ES_tsendString>
					LCD_ES_tGoTo(1, 0);
    3f28:	81 e0       	ldi	r24, 0x01	; 1
    3f2a:	60 e0       	ldi	r22, 0x00	; 0
    3f2c:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <LCD_ES_tGoTo>
					Lcd_ES_tsendString("2- Rotate CCW");
    3f30:	82 e0       	ldi	r24, 0x02	; 2
    3f32:	91 e0       	ldi	r25, 0x01	; 1
    3f34:	0e 94 3a 14 	call	0x2874	; 0x2874 <Lcd_ES_tsendString>
					Lcd_ES_tsendString(sentSpeed);
    3f38:	8f ee       	ldi	r24, 0xEF	; 239
    3f3a:	91 e0       	ldi	r25, 0x01	; 1
    3f3c:	0e 94 3a 14 	call	0x2874	; 0x2874 <Lcd_ES_tsendString>
					gettingMovingOption = 1;
    3f40:	81 e0       	ldi	r24, 0x01	; 1
    3f42:	80 93 f5 01 	sts	0x01F5, r24
				}
				KPD_ES_tGetKeyPressed(&Option2);
    3f46:	ce 01       	movw	r24, r28
    3f48:	8e 51       	subi	r24, 0x1E	; 30
    3f4a:	9f 4f       	sbci	r25, 0xFF	; 255
    3f4c:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <KPD_ES_tGetKeyPressed>
				if (Option2 != KPD_U8_NOT_PRESSED) {
    3f50:	fe 01       	movw	r30, r28
    3f52:	ee 51       	subi	r30, 0x1E	; 30
    3f54:	ff 4f       	sbci	r31, 0xFF	; 255
    3f56:	80 81       	ld	r24, Z
    3f58:	8f 3f       	cpi	r24, 0xFF	; 255
    3f5a:	09 f4       	brne	.+2      	; 0x3f5e <main+0xb50>
    3f5c:	ad ca       	rjmp	.-2726   	; 0x34b8 <main+0xaa>
					if (Option2 == '1') {
    3f5e:	fe 01       	movw	r30, r28
    3f60:	ee 51       	subi	r30, 0x1E	; 30
    3f62:	ff 4f       	sbci	r31, 0xFF	; 255
    3f64:	80 81       	ld	r24, Z
    3f66:	81 33       	cpi	r24, 0x31	; 49
    3f68:	09 f0       	breq	.+2      	; 0x3f6c <main+0xb5e>
    3f6a:	7e c1       	rjmp	.+764    	; 0x4268 <main+0xe5a>
    3f6c:	fe 01       	movw	r30, r28
    3f6e:	e7 57       	subi	r30, 0x77	; 119
    3f70:	ff 4f       	sbci	r31, 0xFF	; 255
    3f72:	80 e0       	ldi	r24, 0x00	; 0
    3f74:	90 e0       	ldi	r25, 0x00	; 0
    3f76:	a8 e4       	ldi	r26, 0x48	; 72
    3f78:	b3 e4       	ldi	r27, 0x43	; 67
    3f7a:	80 83       	st	Z, r24
    3f7c:	91 83       	std	Z+1, r25	; 0x01
    3f7e:	a2 83       	std	Z+2, r26	; 0x02
    3f80:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f82:	8e 01       	movw	r16, r28
    3f84:	0b 57       	subi	r16, 0x7B	; 123
    3f86:	1f 4f       	sbci	r17, 0xFF	; 255
    3f88:	fe 01       	movw	r30, r28
    3f8a:	e7 57       	subi	r30, 0x77	; 119
    3f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8e:	60 81       	ld	r22, Z
    3f90:	71 81       	ldd	r23, Z+1	; 0x01
    3f92:	82 81       	ldd	r24, Z+2	; 0x02
    3f94:	93 81       	ldd	r25, Z+3	; 0x03
    3f96:	20 e0       	ldi	r18, 0x00	; 0
    3f98:	30 e0       	ldi	r19, 0x00	; 0
    3f9a:	4a e7       	ldi	r20, 0x7A	; 122
    3f9c:	55 e4       	ldi	r21, 0x45	; 69
    3f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fa2:	dc 01       	movw	r26, r24
    3fa4:	cb 01       	movw	r24, r22
    3fa6:	f8 01       	movw	r30, r16
    3fa8:	80 83       	st	Z, r24
    3faa:	91 83       	std	Z+1, r25	; 0x01
    3fac:	a2 83       	std	Z+2, r26	; 0x02
    3fae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3fb0:	fe 01       	movw	r30, r28
    3fb2:	eb 57       	subi	r30, 0x7B	; 123
    3fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb6:	60 81       	ld	r22, Z
    3fb8:	71 81       	ldd	r23, Z+1	; 0x01
    3fba:	82 81       	ldd	r24, Z+2	; 0x02
    3fbc:	93 81       	ldd	r25, Z+3	; 0x03
    3fbe:	20 e0       	ldi	r18, 0x00	; 0
    3fc0:	30 e0       	ldi	r19, 0x00	; 0
    3fc2:	40 e8       	ldi	r20, 0x80	; 128
    3fc4:	5f e3       	ldi	r21, 0x3F	; 63
    3fc6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fca:	88 23       	and	r24, r24
    3fcc:	44 f4       	brge	.+16     	; 0x3fde <main+0xbd0>
		__ticks = 1;
    3fce:	fe 01       	movw	r30, r28
    3fd0:	ed 57       	subi	r30, 0x7D	; 125
    3fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd4:	81 e0       	ldi	r24, 0x01	; 1
    3fd6:	90 e0       	ldi	r25, 0x00	; 0
    3fd8:	91 83       	std	Z+1, r25	; 0x01
    3fda:	80 83       	st	Z, r24
    3fdc:	64 c0       	rjmp	.+200    	; 0x40a6 <main+0xc98>
	else if (__tmp > 65535)
    3fde:	fe 01       	movw	r30, r28
    3fe0:	eb 57       	subi	r30, 0x7B	; 123
    3fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe4:	60 81       	ld	r22, Z
    3fe6:	71 81       	ldd	r23, Z+1	; 0x01
    3fe8:	82 81       	ldd	r24, Z+2	; 0x02
    3fea:	93 81       	ldd	r25, Z+3	; 0x03
    3fec:	20 e0       	ldi	r18, 0x00	; 0
    3fee:	3f ef       	ldi	r19, 0xFF	; 255
    3ff0:	4f e7       	ldi	r20, 0x7F	; 127
    3ff2:	57 e4       	ldi	r21, 0x47	; 71
    3ff4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ff8:	18 16       	cp	r1, r24
    3ffa:	0c f0       	brlt	.+2      	; 0x3ffe <main+0xbf0>
    3ffc:	43 c0       	rjmp	.+134    	; 0x4084 <main+0xc76>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ffe:	fe 01       	movw	r30, r28
    4000:	e7 57       	subi	r30, 0x77	; 119
    4002:	ff 4f       	sbci	r31, 0xFF	; 255
    4004:	60 81       	ld	r22, Z
    4006:	71 81       	ldd	r23, Z+1	; 0x01
    4008:	82 81       	ldd	r24, Z+2	; 0x02
    400a:	93 81       	ldd	r25, Z+3	; 0x03
    400c:	20 e0       	ldi	r18, 0x00	; 0
    400e:	30 e0       	ldi	r19, 0x00	; 0
    4010:	40 e2       	ldi	r20, 0x20	; 32
    4012:	51 e4       	ldi	r21, 0x41	; 65
    4014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4018:	dc 01       	movw	r26, r24
    401a:	cb 01       	movw	r24, r22
    401c:	8e 01       	movw	r16, r28
    401e:	0d 57       	subi	r16, 0x7D	; 125
    4020:	1f 4f       	sbci	r17, 0xFF	; 255
    4022:	bc 01       	movw	r22, r24
    4024:	cd 01       	movw	r24, r26
    4026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    402a:	dc 01       	movw	r26, r24
    402c:	cb 01       	movw	r24, r22
    402e:	f8 01       	movw	r30, r16
    4030:	91 83       	std	Z+1, r25	; 0x01
    4032:	80 83       	st	Z, r24
    4034:	1f c0       	rjmp	.+62     	; 0x4074 <main+0xc66>
    4036:	fe 01       	movw	r30, r28
    4038:	ef 57       	subi	r30, 0x7F	; 127
    403a:	ff 4f       	sbci	r31, 0xFF	; 255
    403c:	80 e9       	ldi	r24, 0x90	; 144
    403e:	91 e0       	ldi	r25, 0x01	; 1
    4040:	91 83       	std	Z+1, r25	; 0x01
    4042:	80 83       	st	Z, r24
    4044:	fe 01       	movw	r30, r28
    4046:	ef 57       	subi	r30, 0x7F	; 127
    4048:	ff 4f       	sbci	r31, 0xFF	; 255
    404a:	80 81       	ld	r24, Z
    404c:	91 81       	ldd	r25, Z+1	; 0x01
    404e:	01 97       	sbiw	r24, 0x01	; 1
    4050:	f1 f7       	brne	.-4      	; 0x404e <main+0xc40>
    4052:	fe 01       	movw	r30, r28
    4054:	ef 57       	subi	r30, 0x7F	; 127
    4056:	ff 4f       	sbci	r31, 0xFF	; 255
    4058:	91 83       	std	Z+1, r25	; 0x01
    405a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    405c:	de 01       	movw	r26, r28
    405e:	ad 57       	subi	r26, 0x7D	; 125
    4060:	bf 4f       	sbci	r27, 0xFF	; 255
    4062:	fe 01       	movw	r30, r28
    4064:	ed 57       	subi	r30, 0x7D	; 125
    4066:	ff 4f       	sbci	r31, 0xFF	; 255
    4068:	80 81       	ld	r24, Z
    406a:	91 81       	ldd	r25, Z+1	; 0x01
    406c:	01 97       	sbiw	r24, 0x01	; 1
    406e:	11 96       	adiw	r26, 0x01	; 1
    4070:	9c 93       	st	X, r25
    4072:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4074:	fe 01       	movw	r30, r28
    4076:	ed 57       	subi	r30, 0x7D	; 125
    4078:	ff 4f       	sbci	r31, 0xFF	; 255
    407a:	80 81       	ld	r24, Z
    407c:	91 81       	ldd	r25, Z+1	; 0x01
    407e:	00 97       	sbiw	r24, 0x00	; 0
    4080:	d1 f6       	brne	.-76     	; 0x4036 <main+0xc28>
    4082:	27 c0       	rjmp	.+78     	; 0x40d2 <main+0xcc4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4084:	8e 01       	movw	r16, r28
    4086:	0d 57       	subi	r16, 0x7D	; 125
    4088:	1f 4f       	sbci	r17, 0xFF	; 255
    408a:	fe 01       	movw	r30, r28
    408c:	eb 57       	subi	r30, 0x7B	; 123
    408e:	ff 4f       	sbci	r31, 0xFF	; 255
    4090:	60 81       	ld	r22, Z
    4092:	71 81       	ldd	r23, Z+1	; 0x01
    4094:	82 81       	ldd	r24, Z+2	; 0x02
    4096:	93 81       	ldd	r25, Z+3	; 0x03
    4098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    409c:	dc 01       	movw	r26, r24
    409e:	cb 01       	movw	r24, r22
    40a0:	f8 01       	movw	r30, r16
    40a2:	91 83       	std	Z+1, r25	; 0x01
    40a4:	80 83       	st	Z, r24
    40a6:	de 01       	movw	r26, r28
    40a8:	a1 58       	subi	r26, 0x81	; 129
    40aa:	bf 4f       	sbci	r27, 0xFF	; 255
    40ac:	fe 01       	movw	r30, r28
    40ae:	ed 57       	subi	r30, 0x7D	; 125
    40b0:	ff 4f       	sbci	r31, 0xFF	; 255
    40b2:	80 81       	ld	r24, Z
    40b4:	91 81       	ldd	r25, Z+1	; 0x01
    40b6:	8d 93       	st	X+, r24
    40b8:	9c 93       	st	X, r25
    40ba:	fe 01       	movw	r30, r28
    40bc:	e1 58       	subi	r30, 0x81	; 129
    40be:	ff 4f       	sbci	r31, 0xFF	; 255
    40c0:	80 81       	ld	r24, Z
    40c2:	91 81       	ldd	r25, Z+1	; 0x01
    40c4:	01 97       	sbiw	r24, 0x01	; 1
    40c6:	f1 f7       	brne	.-4      	; 0x40c4 <main+0xcb6>
    40c8:	fe 01       	movw	r30, r28
    40ca:	e1 58       	subi	r30, 0x81	; 129
    40cc:	ff 4f       	sbci	r31, 0xFF	; 255
    40ce:	91 83       	std	Z+1, r25	; 0x01
    40d0:	80 83       	st	Z, r24
						//SPI_Motors_Dash_Custom_Protocol(DC_MOTOR_MOVE, DC_CW, sentSpeed);
						_delay_ms(200);
						SPI_Motors_Dash_Custom_Protocol(DC_MOTOR_MOVE, DC_CW, sentSpeed);
    40d2:	2f ee       	ldi	r18, 0xEF	; 239
    40d4:	31 e0       	ldi	r19, 0x01	; 1
    40d6:	83 e0       	ldi	r24, 0x03	; 3
    40d8:	67 e0       	ldi	r22, 0x07	; 7
    40da:	a9 01       	movw	r20, r18
    40dc:	0e 94 cb 18 	call	0x3196	; 0x3196 <SPI_Motors_Dash_Custom_Protocol>
    40e0:	fe 01       	movw	r30, r28
    40e2:	e5 58       	subi	r30, 0x85	; 133
    40e4:	ff 4f       	sbci	r31, 0xFF	; 255
    40e6:	80 e0       	ldi	r24, 0x00	; 0
    40e8:	90 e4       	ldi	r25, 0x40	; 64
    40ea:	ac e9       	ldi	r26, 0x9C	; 156
    40ec:	b5 e4       	ldi	r27, 0x45	; 69
    40ee:	80 83       	st	Z, r24
    40f0:	91 83       	std	Z+1, r25	; 0x01
    40f2:	a2 83       	std	Z+2, r26	; 0x02
    40f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40f6:	8e 01       	movw	r16, r28
    40f8:	09 58       	subi	r16, 0x89	; 137
    40fa:	1f 4f       	sbci	r17, 0xFF	; 255
    40fc:	fe 01       	movw	r30, r28
    40fe:	e5 58       	subi	r30, 0x85	; 133
    4100:	ff 4f       	sbci	r31, 0xFF	; 255
    4102:	60 81       	ld	r22, Z
    4104:	71 81       	ldd	r23, Z+1	; 0x01
    4106:	82 81       	ldd	r24, Z+2	; 0x02
    4108:	93 81       	ldd	r25, Z+3	; 0x03
    410a:	20 e0       	ldi	r18, 0x00	; 0
    410c:	30 e0       	ldi	r19, 0x00	; 0
    410e:	4a e7       	ldi	r20, 0x7A	; 122
    4110:	55 e4       	ldi	r21, 0x45	; 69
    4112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4116:	dc 01       	movw	r26, r24
    4118:	cb 01       	movw	r24, r22
    411a:	f8 01       	movw	r30, r16
    411c:	80 83       	st	Z, r24
    411e:	91 83       	std	Z+1, r25	; 0x01
    4120:	a2 83       	std	Z+2, r26	; 0x02
    4122:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4124:	fe 01       	movw	r30, r28
    4126:	e9 58       	subi	r30, 0x89	; 137
    4128:	ff 4f       	sbci	r31, 0xFF	; 255
    412a:	60 81       	ld	r22, Z
    412c:	71 81       	ldd	r23, Z+1	; 0x01
    412e:	82 81       	ldd	r24, Z+2	; 0x02
    4130:	93 81       	ldd	r25, Z+3	; 0x03
    4132:	20 e0       	ldi	r18, 0x00	; 0
    4134:	30 e0       	ldi	r19, 0x00	; 0
    4136:	40 e8       	ldi	r20, 0x80	; 128
    4138:	5f e3       	ldi	r21, 0x3F	; 63
    413a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    413e:	88 23       	and	r24, r24
    4140:	44 f4       	brge	.+16     	; 0x4152 <main+0xd44>
		__ticks = 1;
    4142:	fe 01       	movw	r30, r28
    4144:	eb 58       	subi	r30, 0x8B	; 139
    4146:	ff 4f       	sbci	r31, 0xFF	; 255
    4148:	81 e0       	ldi	r24, 0x01	; 1
    414a:	90 e0       	ldi	r25, 0x00	; 0
    414c:	91 83       	std	Z+1, r25	; 0x01
    414e:	80 83       	st	Z, r24
    4150:	64 c0       	rjmp	.+200    	; 0x421a <main+0xe0c>
	else if (__tmp > 65535)
    4152:	fe 01       	movw	r30, r28
    4154:	e9 58       	subi	r30, 0x89	; 137
    4156:	ff 4f       	sbci	r31, 0xFF	; 255
    4158:	60 81       	ld	r22, Z
    415a:	71 81       	ldd	r23, Z+1	; 0x01
    415c:	82 81       	ldd	r24, Z+2	; 0x02
    415e:	93 81       	ldd	r25, Z+3	; 0x03
    4160:	20 e0       	ldi	r18, 0x00	; 0
    4162:	3f ef       	ldi	r19, 0xFF	; 255
    4164:	4f e7       	ldi	r20, 0x7F	; 127
    4166:	57 e4       	ldi	r21, 0x47	; 71
    4168:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    416c:	18 16       	cp	r1, r24
    416e:	0c f0       	brlt	.+2      	; 0x4172 <main+0xd64>
    4170:	43 c0       	rjmp	.+134    	; 0x41f8 <main+0xdea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4172:	fe 01       	movw	r30, r28
    4174:	e5 58       	subi	r30, 0x85	; 133
    4176:	ff 4f       	sbci	r31, 0xFF	; 255
    4178:	60 81       	ld	r22, Z
    417a:	71 81       	ldd	r23, Z+1	; 0x01
    417c:	82 81       	ldd	r24, Z+2	; 0x02
    417e:	93 81       	ldd	r25, Z+3	; 0x03
    4180:	20 e0       	ldi	r18, 0x00	; 0
    4182:	30 e0       	ldi	r19, 0x00	; 0
    4184:	40 e2       	ldi	r20, 0x20	; 32
    4186:	51 e4       	ldi	r21, 0x41	; 65
    4188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    418c:	dc 01       	movw	r26, r24
    418e:	cb 01       	movw	r24, r22
    4190:	8e 01       	movw	r16, r28
    4192:	0b 58       	subi	r16, 0x8B	; 139
    4194:	1f 4f       	sbci	r17, 0xFF	; 255
    4196:	bc 01       	movw	r22, r24
    4198:	cd 01       	movw	r24, r26
    419a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    419e:	dc 01       	movw	r26, r24
    41a0:	cb 01       	movw	r24, r22
    41a2:	f8 01       	movw	r30, r16
    41a4:	91 83       	std	Z+1, r25	; 0x01
    41a6:	80 83       	st	Z, r24
    41a8:	1f c0       	rjmp	.+62     	; 0x41e8 <main+0xdda>
    41aa:	fe 01       	movw	r30, r28
    41ac:	ed 58       	subi	r30, 0x8D	; 141
    41ae:	ff 4f       	sbci	r31, 0xFF	; 255
    41b0:	80 e9       	ldi	r24, 0x90	; 144
    41b2:	91 e0       	ldi	r25, 0x01	; 1
    41b4:	91 83       	std	Z+1, r25	; 0x01
    41b6:	80 83       	st	Z, r24
    41b8:	fe 01       	movw	r30, r28
    41ba:	ed 58       	subi	r30, 0x8D	; 141
    41bc:	ff 4f       	sbci	r31, 0xFF	; 255
    41be:	80 81       	ld	r24, Z
    41c0:	91 81       	ldd	r25, Z+1	; 0x01
    41c2:	01 97       	sbiw	r24, 0x01	; 1
    41c4:	f1 f7       	brne	.-4      	; 0x41c2 <main+0xdb4>
    41c6:	fe 01       	movw	r30, r28
    41c8:	ed 58       	subi	r30, 0x8D	; 141
    41ca:	ff 4f       	sbci	r31, 0xFF	; 255
    41cc:	91 83       	std	Z+1, r25	; 0x01
    41ce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41d0:	de 01       	movw	r26, r28
    41d2:	ab 58       	subi	r26, 0x8B	; 139
    41d4:	bf 4f       	sbci	r27, 0xFF	; 255
    41d6:	fe 01       	movw	r30, r28
    41d8:	eb 58       	subi	r30, 0x8B	; 139
    41da:	ff 4f       	sbci	r31, 0xFF	; 255
    41dc:	80 81       	ld	r24, Z
    41de:	91 81       	ldd	r25, Z+1	; 0x01
    41e0:	01 97       	sbiw	r24, 0x01	; 1
    41e2:	11 96       	adiw	r26, 0x01	; 1
    41e4:	9c 93       	st	X, r25
    41e6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41e8:	fe 01       	movw	r30, r28
    41ea:	eb 58       	subi	r30, 0x8B	; 139
    41ec:	ff 4f       	sbci	r31, 0xFF	; 255
    41ee:	80 81       	ld	r24, Z
    41f0:	91 81       	ldd	r25, Z+1	; 0x01
    41f2:	00 97       	sbiw	r24, 0x00	; 0
    41f4:	d1 f6       	brne	.-76     	; 0x41aa <main+0xd9c>
    41f6:	28 c0       	rjmp	.+80     	; 0x4248 <main+0xe3a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41f8:	8e 01       	movw	r16, r28
    41fa:	0b 58       	subi	r16, 0x8B	; 139
    41fc:	1f 4f       	sbci	r17, 0xFF	; 255
    41fe:	fe 01       	movw	r30, r28
    4200:	e9 58       	subi	r30, 0x89	; 137
    4202:	ff 4f       	sbci	r31, 0xFF	; 255
    4204:	60 81       	ld	r22, Z
    4206:	71 81       	ldd	r23, Z+1	; 0x01
    4208:	82 81       	ldd	r24, Z+2	; 0x02
    420a:	93 81       	ldd	r25, Z+3	; 0x03
    420c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4210:	dc 01       	movw	r26, r24
    4212:	cb 01       	movw	r24, r22
    4214:	f8 01       	movw	r30, r16
    4216:	91 83       	std	Z+1, r25	; 0x01
    4218:	80 83       	st	Z, r24
    421a:	de 01       	movw	r26, r28
    421c:	af 58       	subi	r26, 0x8F	; 143
    421e:	bf 4f       	sbci	r27, 0xFF	; 255
    4220:	fe 01       	movw	r30, r28
    4222:	eb 58       	subi	r30, 0x8B	; 139
    4224:	ff 4f       	sbci	r31, 0xFF	; 255
    4226:	80 81       	ld	r24, Z
    4228:	91 81       	ldd	r25, Z+1	; 0x01
    422a:	11 96       	adiw	r26, 0x01	; 1
    422c:	9c 93       	st	X, r25
    422e:	8e 93       	st	-X, r24
    4230:	fe 01       	movw	r30, r28
    4232:	ef 58       	subi	r30, 0x8F	; 143
    4234:	ff 4f       	sbci	r31, 0xFF	; 255
    4236:	80 81       	ld	r24, Z
    4238:	91 81       	ldd	r25, Z+1	; 0x01
    423a:	01 97       	sbiw	r24, 0x01	; 1
    423c:	f1 f7       	brne	.-4      	; 0x423a <main+0xe2c>
    423e:	fe 01       	movw	r30, r28
    4240:	ef 58       	subi	r30, 0x8F	; 143
    4242:	ff 4f       	sbci	r31, 0xFF	; 255
    4244:	91 83       	std	Z+1, r25	; 0x01
    4246:	80 83       	st	Z, r24
//							state = SPI_Receive();
//							_delay_ms(1); // Add a small delay to reduce CPU load
//							waitCycles++;
//						}
						_delay_ms(5000);
						waitCycles=0;
    4248:	10 92 d7 01 	sts	0x01D7, r1
    424c:	10 92 d6 01 	sts	0x01D6, r1
						gettingMovingOption = 0;
    4250:	10 92 f5 01 	sts	0x01F5, r1
						gettingMotorOption=0;
    4254:	10 92 f4 01 	sts	0x01F4, r1
						flag = 0; // Reset the flag after direction selection
    4258:	fe 01       	movw	r30, r28
    425a:	ed 52       	subi	r30, 0x2D	; 45
    425c:	ff 4f       	sbci	r31, 0xFF	; 255
    425e:	10 82       	st	Z, r1
						currentState = STATE_MOTOR_OPTIONS;
    4260:	82 e0       	ldi	r24, 0x02	; 2
    4262:	80 93 f9 01 	sts	0x01F9, r24
    4266:	28 c9       	rjmp	.-3504   	; 0x34b8 <main+0xaa>
					} else if (Option2 == '2') {
    4268:	fe 01       	movw	r30, r28
    426a:	ee 51       	subi	r30, 0x1E	; 30
    426c:	ff 4f       	sbci	r31, 0xFF	; 255
    426e:	80 81       	ld	r24, Z
    4270:	82 33       	cpi	r24, 0x32	; 50
    4272:	09 f0       	breq	.+2      	; 0x4276 <main+0xe68>
    4274:	7f c1       	rjmp	.+766    	; 0x4574 <main+0x1166>
    4276:	fe 01       	movw	r30, r28
    4278:	e3 59       	subi	r30, 0x93	; 147
    427a:	ff 4f       	sbci	r31, 0xFF	; 255
    427c:	80 e0       	ldi	r24, 0x00	; 0
    427e:	90 e0       	ldi	r25, 0x00	; 0
    4280:	a8 e4       	ldi	r26, 0x48	; 72
    4282:	b3 e4       	ldi	r27, 0x43	; 67
    4284:	80 83       	st	Z, r24
    4286:	91 83       	std	Z+1, r25	; 0x01
    4288:	a2 83       	std	Z+2, r26	; 0x02
    428a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    428c:	8e 01       	movw	r16, r28
    428e:	07 59       	subi	r16, 0x97	; 151
    4290:	1f 4f       	sbci	r17, 0xFF	; 255
    4292:	fe 01       	movw	r30, r28
    4294:	e3 59       	subi	r30, 0x93	; 147
    4296:	ff 4f       	sbci	r31, 0xFF	; 255
    4298:	60 81       	ld	r22, Z
    429a:	71 81       	ldd	r23, Z+1	; 0x01
    429c:	82 81       	ldd	r24, Z+2	; 0x02
    429e:	93 81       	ldd	r25, Z+3	; 0x03
    42a0:	20 e0       	ldi	r18, 0x00	; 0
    42a2:	30 e0       	ldi	r19, 0x00	; 0
    42a4:	4a e7       	ldi	r20, 0x7A	; 122
    42a6:	55 e4       	ldi	r21, 0x45	; 69
    42a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42ac:	dc 01       	movw	r26, r24
    42ae:	cb 01       	movw	r24, r22
    42b0:	f8 01       	movw	r30, r16
    42b2:	80 83       	st	Z, r24
    42b4:	91 83       	std	Z+1, r25	; 0x01
    42b6:	a2 83       	std	Z+2, r26	; 0x02
    42b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    42ba:	fe 01       	movw	r30, r28
    42bc:	e7 59       	subi	r30, 0x97	; 151
    42be:	ff 4f       	sbci	r31, 0xFF	; 255
    42c0:	60 81       	ld	r22, Z
    42c2:	71 81       	ldd	r23, Z+1	; 0x01
    42c4:	82 81       	ldd	r24, Z+2	; 0x02
    42c6:	93 81       	ldd	r25, Z+3	; 0x03
    42c8:	20 e0       	ldi	r18, 0x00	; 0
    42ca:	30 e0       	ldi	r19, 0x00	; 0
    42cc:	40 e8       	ldi	r20, 0x80	; 128
    42ce:	5f e3       	ldi	r21, 0x3F	; 63
    42d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42d4:	88 23       	and	r24, r24
    42d6:	44 f4       	brge	.+16     	; 0x42e8 <main+0xeda>
		__ticks = 1;
    42d8:	fe 01       	movw	r30, r28
    42da:	e9 59       	subi	r30, 0x99	; 153
    42dc:	ff 4f       	sbci	r31, 0xFF	; 255
    42de:	81 e0       	ldi	r24, 0x01	; 1
    42e0:	90 e0       	ldi	r25, 0x00	; 0
    42e2:	91 83       	std	Z+1, r25	; 0x01
    42e4:	80 83       	st	Z, r24
    42e6:	64 c0       	rjmp	.+200    	; 0x43b0 <main+0xfa2>
	else if (__tmp > 65535)
    42e8:	fe 01       	movw	r30, r28
    42ea:	e7 59       	subi	r30, 0x97	; 151
    42ec:	ff 4f       	sbci	r31, 0xFF	; 255
    42ee:	60 81       	ld	r22, Z
    42f0:	71 81       	ldd	r23, Z+1	; 0x01
    42f2:	82 81       	ldd	r24, Z+2	; 0x02
    42f4:	93 81       	ldd	r25, Z+3	; 0x03
    42f6:	20 e0       	ldi	r18, 0x00	; 0
    42f8:	3f ef       	ldi	r19, 0xFF	; 255
    42fa:	4f e7       	ldi	r20, 0x7F	; 127
    42fc:	57 e4       	ldi	r21, 0x47	; 71
    42fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4302:	18 16       	cp	r1, r24
    4304:	0c f0       	brlt	.+2      	; 0x4308 <main+0xefa>
    4306:	43 c0       	rjmp	.+134    	; 0x438e <main+0xf80>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4308:	fe 01       	movw	r30, r28
    430a:	e3 59       	subi	r30, 0x93	; 147
    430c:	ff 4f       	sbci	r31, 0xFF	; 255
    430e:	60 81       	ld	r22, Z
    4310:	71 81       	ldd	r23, Z+1	; 0x01
    4312:	82 81       	ldd	r24, Z+2	; 0x02
    4314:	93 81       	ldd	r25, Z+3	; 0x03
    4316:	20 e0       	ldi	r18, 0x00	; 0
    4318:	30 e0       	ldi	r19, 0x00	; 0
    431a:	40 e2       	ldi	r20, 0x20	; 32
    431c:	51 e4       	ldi	r21, 0x41	; 65
    431e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4322:	dc 01       	movw	r26, r24
    4324:	cb 01       	movw	r24, r22
    4326:	8e 01       	movw	r16, r28
    4328:	09 59       	subi	r16, 0x99	; 153
    432a:	1f 4f       	sbci	r17, 0xFF	; 255
    432c:	bc 01       	movw	r22, r24
    432e:	cd 01       	movw	r24, r26
    4330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4334:	dc 01       	movw	r26, r24
    4336:	cb 01       	movw	r24, r22
    4338:	f8 01       	movw	r30, r16
    433a:	91 83       	std	Z+1, r25	; 0x01
    433c:	80 83       	st	Z, r24
    433e:	1f c0       	rjmp	.+62     	; 0x437e <main+0xf70>
    4340:	fe 01       	movw	r30, r28
    4342:	eb 59       	subi	r30, 0x9B	; 155
    4344:	ff 4f       	sbci	r31, 0xFF	; 255
    4346:	80 e9       	ldi	r24, 0x90	; 144
    4348:	91 e0       	ldi	r25, 0x01	; 1
    434a:	91 83       	std	Z+1, r25	; 0x01
    434c:	80 83       	st	Z, r24
    434e:	fe 01       	movw	r30, r28
    4350:	eb 59       	subi	r30, 0x9B	; 155
    4352:	ff 4f       	sbci	r31, 0xFF	; 255
    4354:	80 81       	ld	r24, Z
    4356:	91 81       	ldd	r25, Z+1	; 0x01
    4358:	01 97       	sbiw	r24, 0x01	; 1
    435a:	f1 f7       	brne	.-4      	; 0x4358 <main+0xf4a>
    435c:	fe 01       	movw	r30, r28
    435e:	eb 59       	subi	r30, 0x9B	; 155
    4360:	ff 4f       	sbci	r31, 0xFF	; 255
    4362:	91 83       	std	Z+1, r25	; 0x01
    4364:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4366:	de 01       	movw	r26, r28
    4368:	a9 59       	subi	r26, 0x99	; 153
    436a:	bf 4f       	sbci	r27, 0xFF	; 255
    436c:	fe 01       	movw	r30, r28
    436e:	e9 59       	subi	r30, 0x99	; 153
    4370:	ff 4f       	sbci	r31, 0xFF	; 255
    4372:	80 81       	ld	r24, Z
    4374:	91 81       	ldd	r25, Z+1	; 0x01
    4376:	01 97       	sbiw	r24, 0x01	; 1
    4378:	11 96       	adiw	r26, 0x01	; 1
    437a:	9c 93       	st	X, r25
    437c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    437e:	fe 01       	movw	r30, r28
    4380:	e9 59       	subi	r30, 0x99	; 153
    4382:	ff 4f       	sbci	r31, 0xFF	; 255
    4384:	80 81       	ld	r24, Z
    4386:	91 81       	ldd	r25, Z+1	; 0x01
    4388:	00 97       	sbiw	r24, 0x00	; 0
    438a:	d1 f6       	brne	.-76     	; 0x4340 <main+0xf32>
    438c:	27 c0       	rjmp	.+78     	; 0x43dc <main+0xfce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    438e:	8e 01       	movw	r16, r28
    4390:	09 59       	subi	r16, 0x99	; 153
    4392:	1f 4f       	sbci	r17, 0xFF	; 255
    4394:	fe 01       	movw	r30, r28
    4396:	e7 59       	subi	r30, 0x97	; 151
    4398:	ff 4f       	sbci	r31, 0xFF	; 255
    439a:	60 81       	ld	r22, Z
    439c:	71 81       	ldd	r23, Z+1	; 0x01
    439e:	82 81       	ldd	r24, Z+2	; 0x02
    43a0:	93 81       	ldd	r25, Z+3	; 0x03
    43a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43a6:	dc 01       	movw	r26, r24
    43a8:	cb 01       	movw	r24, r22
    43aa:	f8 01       	movw	r30, r16
    43ac:	91 83       	std	Z+1, r25	; 0x01
    43ae:	80 83       	st	Z, r24
    43b0:	de 01       	movw	r26, r28
    43b2:	ad 59       	subi	r26, 0x9D	; 157
    43b4:	bf 4f       	sbci	r27, 0xFF	; 255
    43b6:	fe 01       	movw	r30, r28
    43b8:	e9 59       	subi	r30, 0x99	; 153
    43ba:	ff 4f       	sbci	r31, 0xFF	; 255
    43bc:	80 81       	ld	r24, Z
    43be:	91 81       	ldd	r25, Z+1	; 0x01
    43c0:	8d 93       	st	X+, r24
    43c2:	9c 93       	st	X, r25
    43c4:	fe 01       	movw	r30, r28
    43c6:	ed 59       	subi	r30, 0x9D	; 157
    43c8:	ff 4f       	sbci	r31, 0xFF	; 255
    43ca:	80 81       	ld	r24, Z
    43cc:	91 81       	ldd	r25, Z+1	; 0x01
    43ce:	01 97       	sbiw	r24, 0x01	; 1
    43d0:	f1 f7       	brne	.-4      	; 0x43ce <main+0xfc0>
    43d2:	fe 01       	movw	r30, r28
    43d4:	ed 59       	subi	r30, 0x9D	; 157
    43d6:	ff 4f       	sbci	r31, 0xFF	; 255
    43d8:	91 83       	std	Z+1, r25	; 0x01
    43da:	80 83       	st	Z, r24
						//SPI_Motors_Dash_Custom_Protocol(DC_MOTOR_MOVE, DC_CCW, sentSpeed);
						_delay_ms(200);
						SPI_Motors_Dash_Custom_Protocol(DC_MOTOR_MOVE, DC_CCW, sentSpeed);
    43dc:	2f ee       	ldi	r18, 0xEF	; 239
    43de:	31 e0       	ldi	r19, 0x01	; 1
    43e0:	83 e0       	ldi	r24, 0x03	; 3
    43e2:	68 e0       	ldi	r22, 0x08	; 8
    43e4:	a9 01       	movw	r20, r18
    43e6:	0e 94 cb 18 	call	0x3196	; 0x3196 <SPI_Motors_Dash_Custom_Protocol>
    43ea:	fe 01       	movw	r30, r28
    43ec:	e1 5a       	subi	r30, 0xA1	; 161
    43ee:	ff 4f       	sbci	r31, 0xFF	; 255
    43f0:	80 e0       	ldi	r24, 0x00	; 0
    43f2:	90 e4       	ldi	r25, 0x40	; 64
    43f4:	ac e9       	ldi	r26, 0x9C	; 156
    43f6:	b5 e4       	ldi	r27, 0x45	; 69
    43f8:	80 83       	st	Z, r24
    43fa:	91 83       	std	Z+1, r25	; 0x01
    43fc:	a2 83       	std	Z+2, r26	; 0x02
    43fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4400:	8e 01       	movw	r16, r28
    4402:	05 5a       	subi	r16, 0xA5	; 165
    4404:	1f 4f       	sbci	r17, 0xFF	; 255
    4406:	fe 01       	movw	r30, r28
    4408:	e1 5a       	subi	r30, 0xA1	; 161
    440a:	ff 4f       	sbci	r31, 0xFF	; 255
    440c:	60 81       	ld	r22, Z
    440e:	71 81       	ldd	r23, Z+1	; 0x01
    4410:	82 81       	ldd	r24, Z+2	; 0x02
    4412:	93 81       	ldd	r25, Z+3	; 0x03
    4414:	20 e0       	ldi	r18, 0x00	; 0
    4416:	30 e0       	ldi	r19, 0x00	; 0
    4418:	4a e7       	ldi	r20, 0x7A	; 122
    441a:	55 e4       	ldi	r21, 0x45	; 69
    441c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4420:	dc 01       	movw	r26, r24
    4422:	cb 01       	movw	r24, r22
    4424:	f8 01       	movw	r30, r16
    4426:	80 83       	st	Z, r24
    4428:	91 83       	std	Z+1, r25	; 0x01
    442a:	a2 83       	std	Z+2, r26	; 0x02
    442c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    442e:	fe 01       	movw	r30, r28
    4430:	e5 5a       	subi	r30, 0xA5	; 165
    4432:	ff 4f       	sbci	r31, 0xFF	; 255
    4434:	60 81       	ld	r22, Z
    4436:	71 81       	ldd	r23, Z+1	; 0x01
    4438:	82 81       	ldd	r24, Z+2	; 0x02
    443a:	93 81       	ldd	r25, Z+3	; 0x03
    443c:	20 e0       	ldi	r18, 0x00	; 0
    443e:	30 e0       	ldi	r19, 0x00	; 0
    4440:	40 e8       	ldi	r20, 0x80	; 128
    4442:	5f e3       	ldi	r21, 0x3F	; 63
    4444:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4448:	88 23       	and	r24, r24
    444a:	44 f4       	brge	.+16     	; 0x445c <main+0x104e>
		__ticks = 1;
    444c:	fe 01       	movw	r30, r28
    444e:	e7 5a       	subi	r30, 0xA7	; 167
    4450:	ff 4f       	sbci	r31, 0xFF	; 255
    4452:	81 e0       	ldi	r24, 0x01	; 1
    4454:	90 e0       	ldi	r25, 0x00	; 0
    4456:	91 83       	std	Z+1, r25	; 0x01
    4458:	80 83       	st	Z, r24
    445a:	64 c0       	rjmp	.+200    	; 0x4524 <main+0x1116>
	else if (__tmp > 65535)
    445c:	fe 01       	movw	r30, r28
    445e:	e5 5a       	subi	r30, 0xA5	; 165
    4460:	ff 4f       	sbci	r31, 0xFF	; 255
    4462:	60 81       	ld	r22, Z
    4464:	71 81       	ldd	r23, Z+1	; 0x01
    4466:	82 81       	ldd	r24, Z+2	; 0x02
    4468:	93 81       	ldd	r25, Z+3	; 0x03
    446a:	20 e0       	ldi	r18, 0x00	; 0
    446c:	3f ef       	ldi	r19, 0xFF	; 255
    446e:	4f e7       	ldi	r20, 0x7F	; 127
    4470:	57 e4       	ldi	r21, 0x47	; 71
    4472:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4476:	18 16       	cp	r1, r24
    4478:	0c f0       	brlt	.+2      	; 0x447c <main+0x106e>
    447a:	43 c0       	rjmp	.+134    	; 0x4502 <main+0x10f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    447c:	fe 01       	movw	r30, r28
    447e:	e1 5a       	subi	r30, 0xA1	; 161
    4480:	ff 4f       	sbci	r31, 0xFF	; 255
    4482:	60 81       	ld	r22, Z
    4484:	71 81       	ldd	r23, Z+1	; 0x01
    4486:	82 81       	ldd	r24, Z+2	; 0x02
    4488:	93 81       	ldd	r25, Z+3	; 0x03
    448a:	20 e0       	ldi	r18, 0x00	; 0
    448c:	30 e0       	ldi	r19, 0x00	; 0
    448e:	40 e2       	ldi	r20, 0x20	; 32
    4490:	51 e4       	ldi	r21, 0x41	; 65
    4492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4496:	dc 01       	movw	r26, r24
    4498:	cb 01       	movw	r24, r22
    449a:	8e 01       	movw	r16, r28
    449c:	07 5a       	subi	r16, 0xA7	; 167
    449e:	1f 4f       	sbci	r17, 0xFF	; 255
    44a0:	bc 01       	movw	r22, r24
    44a2:	cd 01       	movw	r24, r26
    44a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44a8:	dc 01       	movw	r26, r24
    44aa:	cb 01       	movw	r24, r22
    44ac:	f8 01       	movw	r30, r16
    44ae:	91 83       	std	Z+1, r25	; 0x01
    44b0:	80 83       	st	Z, r24
    44b2:	1f c0       	rjmp	.+62     	; 0x44f2 <main+0x10e4>
    44b4:	fe 01       	movw	r30, r28
    44b6:	e9 5a       	subi	r30, 0xA9	; 169
    44b8:	ff 4f       	sbci	r31, 0xFF	; 255
    44ba:	80 e9       	ldi	r24, 0x90	; 144
    44bc:	91 e0       	ldi	r25, 0x01	; 1
    44be:	91 83       	std	Z+1, r25	; 0x01
    44c0:	80 83       	st	Z, r24
    44c2:	fe 01       	movw	r30, r28
    44c4:	e9 5a       	subi	r30, 0xA9	; 169
    44c6:	ff 4f       	sbci	r31, 0xFF	; 255
    44c8:	80 81       	ld	r24, Z
    44ca:	91 81       	ldd	r25, Z+1	; 0x01
    44cc:	01 97       	sbiw	r24, 0x01	; 1
    44ce:	f1 f7       	brne	.-4      	; 0x44cc <main+0x10be>
    44d0:	fe 01       	movw	r30, r28
    44d2:	e9 5a       	subi	r30, 0xA9	; 169
    44d4:	ff 4f       	sbci	r31, 0xFF	; 255
    44d6:	91 83       	std	Z+1, r25	; 0x01
    44d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44da:	de 01       	movw	r26, r28
    44dc:	a7 5a       	subi	r26, 0xA7	; 167
    44de:	bf 4f       	sbci	r27, 0xFF	; 255
    44e0:	fe 01       	movw	r30, r28
    44e2:	e7 5a       	subi	r30, 0xA7	; 167
    44e4:	ff 4f       	sbci	r31, 0xFF	; 255
    44e6:	80 81       	ld	r24, Z
    44e8:	91 81       	ldd	r25, Z+1	; 0x01
    44ea:	01 97       	sbiw	r24, 0x01	; 1
    44ec:	11 96       	adiw	r26, 0x01	; 1
    44ee:	9c 93       	st	X, r25
    44f0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44f2:	fe 01       	movw	r30, r28
    44f4:	e7 5a       	subi	r30, 0xA7	; 167
    44f6:	ff 4f       	sbci	r31, 0xFF	; 255
    44f8:	80 81       	ld	r24, Z
    44fa:	91 81       	ldd	r25, Z+1	; 0x01
    44fc:	00 97       	sbiw	r24, 0x00	; 0
    44fe:	d1 f6       	brne	.-76     	; 0x44b4 <main+0x10a6>
    4500:	28 c0       	rjmp	.+80     	; 0x4552 <main+0x1144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4502:	8e 01       	movw	r16, r28
    4504:	07 5a       	subi	r16, 0xA7	; 167
    4506:	1f 4f       	sbci	r17, 0xFF	; 255
    4508:	fe 01       	movw	r30, r28
    450a:	e5 5a       	subi	r30, 0xA5	; 165
    450c:	ff 4f       	sbci	r31, 0xFF	; 255
    450e:	60 81       	ld	r22, Z
    4510:	71 81       	ldd	r23, Z+1	; 0x01
    4512:	82 81       	ldd	r24, Z+2	; 0x02
    4514:	93 81       	ldd	r25, Z+3	; 0x03
    4516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    451a:	dc 01       	movw	r26, r24
    451c:	cb 01       	movw	r24, r22
    451e:	f8 01       	movw	r30, r16
    4520:	91 83       	std	Z+1, r25	; 0x01
    4522:	80 83       	st	Z, r24
    4524:	de 01       	movw	r26, r28
    4526:	ab 5a       	subi	r26, 0xAB	; 171
    4528:	bf 4f       	sbci	r27, 0xFF	; 255
    452a:	fe 01       	movw	r30, r28
    452c:	e7 5a       	subi	r30, 0xA7	; 167
    452e:	ff 4f       	sbci	r31, 0xFF	; 255
    4530:	80 81       	ld	r24, Z
    4532:	91 81       	ldd	r25, Z+1	; 0x01
    4534:	11 96       	adiw	r26, 0x01	; 1
    4536:	9c 93       	st	X, r25
    4538:	8e 93       	st	-X, r24
    453a:	fe 01       	movw	r30, r28
    453c:	eb 5a       	subi	r30, 0xAB	; 171
    453e:	ff 4f       	sbci	r31, 0xFF	; 255
    4540:	80 81       	ld	r24, Z
    4542:	91 81       	ldd	r25, Z+1	; 0x01
    4544:	01 97       	sbiw	r24, 0x01	; 1
    4546:	f1 f7       	brne	.-4      	; 0x4544 <main+0x1136>
    4548:	fe 01       	movw	r30, r28
    454a:	eb 5a       	subi	r30, 0xAB	; 171
    454c:	ff 4f       	sbci	r31, 0xFF	; 255
    454e:	91 83       	std	Z+1, r25	; 0x01
    4550:	80 83       	st	Z, r24
//							state = SPI_Receive();
//							_delay_ms(1); // Add a small delay to reduce CPU load
//							waitCycles++;
//						}
						_delay_ms(5000);
						gettingMovingOption = 0;
    4552:	10 92 f5 01 	sts	0x01F5, r1
						gettingMotorOption=0;
    4556:	10 92 f4 01 	sts	0x01F4, r1
						waitCycles=0;
    455a:	10 92 d7 01 	sts	0x01D7, r1
    455e:	10 92 d6 01 	sts	0x01D6, r1
						flag = 0; // Reset the flag after direction selection
    4562:	fe 01       	movw	r30, r28
    4564:	ed 52       	subi	r30, 0x2D	; 45
    4566:	ff 4f       	sbci	r31, 0xFF	; 255
    4568:	10 82       	st	Z, r1
						currentState = STATE_MOTOR_OPTIONS;
    456a:	82 e0       	ldi	r24, 0x02	; 2
    456c:	80 93 f9 01 	sts	0x01F9, r24
    4570:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <main+0xaa>
					} else {
						lcd_ES_tclear();
    4574:	0e 94 53 12 	call	0x24a6	; 0x24a6 <lcd_ES_tclear>
						Lcd_ES_tsendString("Invalid Option");
    4578:	88 ed       	ldi	r24, 0xD8	; 216
    457a:	90 e0       	ldi	r25, 0x00	; 0
    457c:	0e 94 3a 14 	call	0x2874	; 0x2874 <Lcd_ES_tsendString>
    4580:	fe 01       	movw	r30, r28
    4582:	ef 5a       	subi	r30, 0xAF	; 175
    4584:	ff 4f       	sbci	r31, 0xFF	; 255
    4586:	80 e0       	ldi	r24, 0x00	; 0
    4588:	90 e0       	ldi	r25, 0x00	; 0
    458a:	aa ef       	ldi	r26, 0xFA	; 250
    458c:	b4 e4       	ldi	r27, 0x44	; 68
    458e:	80 83       	st	Z, r24
    4590:	91 83       	std	Z+1, r25	; 0x01
    4592:	a2 83       	std	Z+2, r26	; 0x02
    4594:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4596:	8e 01       	movw	r16, r28
    4598:	03 5b       	subi	r16, 0xB3	; 179
    459a:	1f 4f       	sbci	r17, 0xFF	; 255
    459c:	fe 01       	movw	r30, r28
    459e:	ef 5a       	subi	r30, 0xAF	; 175
    45a0:	ff 4f       	sbci	r31, 0xFF	; 255
    45a2:	60 81       	ld	r22, Z
    45a4:	71 81       	ldd	r23, Z+1	; 0x01
    45a6:	82 81       	ldd	r24, Z+2	; 0x02
    45a8:	93 81       	ldd	r25, Z+3	; 0x03
    45aa:	20 e0       	ldi	r18, 0x00	; 0
    45ac:	30 e0       	ldi	r19, 0x00	; 0
    45ae:	4a e7       	ldi	r20, 0x7A	; 122
    45b0:	55 e4       	ldi	r21, 0x45	; 69
    45b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45b6:	dc 01       	movw	r26, r24
    45b8:	cb 01       	movw	r24, r22
    45ba:	f8 01       	movw	r30, r16
    45bc:	80 83       	st	Z, r24
    45be:	91 83       	std	Z+1, r25	; 0x01
    45c0:	a2 83       	std	Z+2, r26	; 0x02
    45c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    45c4:	fe 01       	movw	r30, r28
    45c6:	e3 5b       	subi	r30, 0xB3	; 179
    45c8:	ff 4f       	sbci	r31, 0xFF	; 255
    45ca:	60 81       	ld	r22, Z
    45cc:	71 81       	ldd	r23, Z+1	; 0x01
    45ce:	82 81       	ldd	r24, Z+2	; 0x02
    45d0:	93 81       	ldd	r25, Z+3	; 0x03
    45d2:	20 e0       	ldi	r18, 0x00	; 0
    45d4:	30 e0       	ldi	r19, 0x00	; 0
    45d6:	40 e8       	ldi	r20, 0x80	; 128
    45d8:	5f e3       	ldi	r21, 0x3F	; 63
    45da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45de:	88 23       	and	r24, r24
    45e0:	44 f4       	brge	.+16     	; 0x45f2 <main+0x11e4>
		__ticks = 1;
    45e2:	fe 01       	movw	r30, r28
    45e4:	e5 5b       	subi	r30, 0xB5	; 181
    45e6:	ff 4f       	sbci	r31, 0xFF	; 255
    45e8:	81 e0       	ldi	r24, 0x01	; 1
    45ea:	90 e0       	ldi	r25, 0x00	; 0
    45ec:	91 83       	std	Z+1, r25	; 0x01
    45ee:	80 83       	st	Z, r24
    45f0:	64 c0       	rjmp	.+200    	; 0x46ba <main+0x12ac>
	else if (__tmp > 65535)
    45f2:	fe 01       	movw	r30, r28
    45f4:	e3 5b       	subi	r30, 0xB3	; 179
    45f6:	ff 4f       	sbci	r31, 0xFF	; 255
    45f8:	60 81       	ld	r22, Z
    45fa:	71 81       	ldd	r23, Z+1	; 0x01
    45fc:	82 81       	ldd	r24, Z+2	; 0x02
    45fe:	93 81       	ldd	r25, Z+3	; 0x03
    4600:	20 e0       	ldi	r18, 0x00	; 0
    4602:	3f ef       	ldi	r19, 0xFF	; 255
    4604:	4f e7       	ldi	r20, 0x7F	; 127
    4606:	57 e4       	ldi	r21, 0x47	; 71
    4608:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    460c:	18 16       	cp	r1, r24
    460e:	0c f0       	brlt	.+2      	; 0x4612 <main+0x1204>
    4610:	43 c0       	rjmp	.+134    	; 0x4698 <main+0x128a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4612:	fe 01       	movw	r30, r28
    4614:	ef 5a       	subi	r30, 0xAF	; 175
    4616:	ff 4f       	sbci	r31, 0xFF	; 255
    4618:	60 81       	ld	r22, Z
    461a:	71 81       	ldd	r23, Z+1	; 0x01
    461c:	82 81       	ldd	r24, Z+2	; 0x02
    461e:	93 81       	ldd	r25, Z+3	; 0x03
    4620:	20 e0       	ldi	r18, 0x00	; 0
    4622:	30 e0       	ldi	r19, 0x00	; 0
    4624:	40 e2       	ldi	r20, 0x20	; 32
    4626:	51 e4       	ldi	r21, 0x41	; 65
    4628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    462c:	dc 01       	movw	r26, r24
    462e:	cb 01       	movw	r24, r22
    4630:	8e 01       	movw	r16, r28
    4632:	05 5b       	subi	r16, 0xB5	; 181
    4634:	1f 4f       	sbci	r17, 0xFF	; 255
    4636:	bc 01       	movw	r22, r24
    4638:	cd 01       	movw	r24, r26
    463a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    463e:	dc 01       	movw	r26, r24
    4640:	cb 01       	movw	r24, r22
    4642:	f8 01       	movw	r30, r16
    4644:	91 83       	std	Z+1, r25	; 0x01
    4646:	80 83       	st	Z, r24
    4648:	1f c0       	rjmp	.+62     	; 0x4688 <main+0x127a>
    464a:	fe 01       	movw	r30, r28
    464c:	e7 5b       	subi	r30, 0xB7	; 183
    464e:	ff 4f       	sbci	r31, 0xFF	; 255
    4650:	80 e9       	ldi	r24, 0x90	; 144
    4652:	91 e0       	ldi	r25, 0x01	; 1
    4654:	91 83       	std	Z+1, r25	; 0x01
    4656:	80 83       	st	Z, r24
    4658:	fe 01       	movw	r30, r28
    465a:	e7 5b       	subi	r30, 0xB7	; 183
    465c:	ff 4f       	sbci	r31, 0xFF	; 255
    465e:	80 81       	ld	r24, Z
    4660:	91 81       	ldd	r25, Z+1	; 0x01
    4662:	01 97       	sbiw	r24, 0x01	; 1
    4664:	f1 f7       	brne	.-4      	; 0x4662 <main+0x1254>
    4666:	fe 01       	movw	r30, r28
    4668:	e7 5b       	subi	r30, 0xB7	; 183
    466a:	ff 4f       	sbci	r31, 0xFF	; 255
    466c:	91 83       	std	Z+1, r25	; 0x01
    466e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4670:	de 01       	movw	r26, r28
    4672:	a5 5b       	subi	r26, 0xB5	; 181
    4674:	bf 4f       	sbci	r27, 0xFF	; 255
    4676:	fe 01       	movw	r30, r28
    4678:	e5 5b       	subi	r30, 0xB5	; 181
    467a:	ff 4f       	sbci	r31, 0xFF	; 255
    467c:	80 81       	ld	r24, Z
    467e:	91 81       	ldd	r25, Z+1	; 0x01
    4680:	01 97       	sbiw	r24, 0x01	; 1
    4682:	11 96       	adiw	r26, 0x01	; 1
    4684:	9c 93       	st	X, r25
    4686:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4688:	fe 01       	movw	r30, r28
    468a:	e5 5b       	subi	r30, 0xB5	; 181
    468c:	ff 4f       	sbci	r31, 0xFF	; 255
    468e:	80 81       	ld	r24, Z
    4690:	91 81       	ldd	r25, Z+1	; 0x01
    4692:	00 97       	sbiw	r24, 0x00	; 0
    4694:	d1 f6       	brne	.-76     	; 0x464a <main+0x123c>
    4696:	28 c0       	rjmp	.+80     	; 0x46e8 <main+0x12da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4698:	8e 01       	movw	r16, r28
    469a:	05 5b       	subi	r16, 0xB5	; 181
    469c:	1f 4f       	sbci	r17, 0xFF	; 255
    469e:	fe 01       	movw	r30, r28
    46a0:	e3 5b       	subi	r30, 0xB3	; 179
    46a2:	ff 4f       	sbci	r31, 0xFF	; 255
    46a4:	60 81       	ld	r22, Z
    46a6:	71 81       	ldd	r23, Z+1	; 0x01
    46a8:	82 81       	ldd	r24, Z+2	; 0x02
    46aa:	93 81       	ldd	r25, Z+3	; 0x03
    46ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46b0:	dc 01       	movw	r26, r24
    46b2:	cb 01       	movw	r24, r22
    46b4:	f8 01       	movw	r30, r16
    46b6:	91 83       	std	Z+1, r25	; 0x01
    46b8:	80 83       	st	Z, r24
    46ba:	de 01       	movw	r26, r28
    46bc:	a9 5b       	subi	r26, 0xB9	; 185
    46be:	bf 4f       	sbci	r27, 0xFF	; 255
    46c0:	fe 01       	movw	r30, r28
    46c2:	e5 5b       	subi	r30, 0xB5	; 181
    46c4:	ff 4f       	sbci	r31, 0xFF	; 255
    46c6:	80 81       	ld	r24, Z
    46c8:	91 81       	ldd	r25, Z+1	; 0x01
    46ca:	11 96       	adiw	r26, 0x01	; 1
    46cc:	9c 93       	st	X, r25
    46ce:	8e 93       	st	-X, r24
    46d0:	fe 01       	movw	r30, r28
    46d2:	e9 5b       	subi	r30, 0xB9	; 185
    46d4:	ff 4f       	sbci	r31, 0xFF	; 255
    46d6:	80 81       	ld	r24, Z
    46d8:	91 81       	ldd	r25, Z+1	; 0x01
    46da:	01 97       	sbiw	r24, 0x01	; 1
    46dc:	f1 f7       	brne	.-4      	; 0x46da <main+0x12cc>
    46de:	fe 01       	movw	r30, r28
    46e0:	e9 5b       	subi	r30, 0xB9	; 185
    46e2:	ff 4f       	sbci	r31, 0xFF	; 255
    46e4:	91 83       	std	Z+1, r25	; 0x01
    46e6:	80 83       	st	Z, r24
						_delay_ms(2000);
						flag = 0; // Reset the flag after direction selection
    46e8:	fe 01       	movw	r30, r28
    46ea:	ed 52       	subi	r30, 0x2D	; 45
    46ec:	ff 4f       	sbci	r31, 0xFF	; 255
    46ee:	10 82       	st	Z, r1
						currentState = STATE_DC_MOTOR_MOVE;
    46f0:	83 e0       	ldi	r24, 0x03	; 3
    46f2:	80 93 f9 01 	sts	0x01F9, r24
    46f6:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <main+0xaa>
			break;



		case STATE_STEPPER_MOVE:
			if (!gettingStepperOption) {
    46fa:	80 91 f6 01 	lds	r24, 0x01F6
    46fe:	88 23       	and	r24, r24
    4700:	49 f4       	brne	.+18     	; 0x4714 <main+0x1306>
				lcd_ES_tclear();
    4702:	0e 94 53 12 	call	0x24a6	; 0x24a6 <lcd_ES_tclear>
				Lcd_ES_tsendString("Angle(3dig) :");
    4706:	80 e1       	ldi	r24, 0x10	; 16
    4708:	91 e0       	ldi	r25, 0x01	; 1
    470a:	0e 94 3a 14 	call	0x2874	; 0x2874 <Lcd_ES_tsendString>
				gettingStepperOption = 1;
    470e:	81 e0       	ldi	r24, 0x01	; 1
    4710:	80 93 f6 01 	sts	0x01F6, r24
			}
			KPD_ES_tGetKeyPressed(&Option3);
    4714:	ce 01       	movw	r24, r28
    4716:	8d 51       	subi	r24, 0x1D	; 29
    4718:	9f 4f       	sbci	r25, 0xFF	; 255
    471a:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <KPD_ES_tGetKeyPressed>
			if (Option3 != KPD_U8_NOT_PRESSED) {
    471e:	fe 01       	movw	r30, r28
    4720:	ed 51       	subi	r30, 0x1D	; 29
    4722:	ff 4f       	sbci	r31, 0xFF	; 255
    4724:	80 81       	ld	r24, Z
    4726:	8f 3f       	cpi	r24, 0xFF	; 255
    4728:	11 f4       	brne	.+4      	; 0x472e <main+0x1320>
    472a:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <main+0xaa>
				LCD_ES_tGoTo(1, indexStepper);
    472e:	90 91 e3 01 	lds	r25, 0x01E3
    4732:	81 e0       	ldi	r24, 0x01	; 1
    4734:	69 2f       	mov	r22, r25
    4736:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <LCD_ES_tGoTo>
				Lcd_ES_tsendChar(Option3);
    473a:	fe 01       	movw	r30, r28
    473c:	ed 51       	subi	r30, 0x1D	; 29
    473e:	ff 4f       	sbci	r31, 0xFF	; 255
    4740:	80 81       	ld	r24, Z
    4742:	0e 94 8b 13 	call	0x2716	; 0x2716 <Lcd_ES_tsendChar>
				inputSteper[indexStepper] = Option3 - '0'; // Convert character to integer
    4746:	80 91 e3 01 	lds	r24, 0x01E3
    474a:	28 2f       	mov	r18, r24
    474c:	30 e0       	ldi	r19, 0x00	; 0
    474e:	fe 01       	movw	r30, r28
    4750:	ed 51       	subi	r30, 0x1D	; 29
    4752:	ff 4f       	sbci	r31, 0xFF	; 255
    4754:	80 81       	ld	r24, Z
    4756:	80 53       	subi	r24, 0x30	; 48
    4758:	f9 01       	movw	r30, r18
    475a:	e2 52       	subi	r30, 0x22	; 34
    475c:	fe 4f       	sbci	r31, 0xFE	; 254
    475e:	80 83       	st	Z, r24
				indexStepper++;
    4760:	80 91 e3 01 	lds	r24, 0x01E3
    4764:	8f 5f       	subi	r24, 0xFF	; 255
    4766:	80 93 e3 01 	sts	0x01E3, r24
				if (indexStepper >= 3) { // Use indexStepper instead of indexz
    476a:	80 91 e3 01 	lds	r24, 0x01E3
    476e:	83 30       	cpi	r24, 0x03	; 3
    4770:	10 f4       	brcc	.+4      	; 0x4776 <main+0x1368>
    4772:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <main+0xaa>
					stepperAngle = (inputSteper[0] * 100) + (inputSteper[1] * 10) + inputSteper[2];
    4776:	80 91 de 01 	lds	r24, 0x01DE
    477a:	28 2f       	mov	r18, r24
    477c:	30 e0       	ldi	r19, 0x00	; 0
    477e:	84 e6       	ldi	r24, 0x64	; 100
    4780:	90 e0       	ldi	r25, 0x00	; 0
    4782:	ac 01       	movw	r20, r24
    4784:	24 9f       	mul	r18, r20
    4786:	c0 01       	movw	r24, r0
    4788:	25 9f       	mul	r18, r21
    478a:	90 0d       	add	r25, r0
    478c:	34 9f       	mul	r19, r20
    478e:	90 0d       	add	r25, r0
    4790:	11 24       	eor	r1, r1
    4792:	48 2f       	mov	r20, r24
    4794:	80 91 df 01 	lds	r24, 0x01DF
    4798:	88 2f       	mov	r24, r24
    479a:	90 e0       	ldi	r25, 0x00	; 0
    479c:	9c 01       	movw	r18, r24
    479e:	22 0f       	add	r18, r18
    47a0:	33 1f       	adc	r19, r19
    47a2:	c9 01       	movw	r24, r18
    47a4:	88 0f       	add	r24, r24
    47a6:	99 1f       	adc	r25, r25
    47a8:	88 0f       	add	r24, r24
    47aa:	99 1f       	adc	r25, r25
    47ac:	82 0f       	add	r24, r18
    47ae:	93 1f       	adc	r25, r19
    47b0:	94 2f       	mov	r25, r20
    47b2:	98 0f       	add	r25, r24
    47b4:	80 91 e0 01 	lds	r24, 0x01E0
    47b8:	fe 01       	movw	r30, r28
    47ba:	ea 52       	subi	r30, 0x2A	; 42
    47bc:	ff 4f       	sbci	r31, 0xFF	; 255
    47be:	89 0f       	add	r24, r25
    47c0:	80 83       	st	Z, r24
    47c2:	fe 01       	movw	r30, r28
    47c4:	ed 5b       	subi	r30, 0xBD	; 189
    47c6:	ff 4f       	sbci	r31, 0xFF	; 255
    47c8:	80 e0       	ldi	r24, 0x00	; 0
    47ca:	90 e0       	ldi	r25, 0x00	; 0
    47cc:	a8 e4       	ldi	r26, 0x48	; 72
    47ce:	b3 e4       	ldi	r27, 0x43	; 67
    47d0:	80 83       	st	Z, r24
    47d2:	91 83       	std	Z+1, r25	; 0x01
    47d4:	a2 83       	std	Z+2, r26	; 0x02
    47d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47d8:	8e 01       	movw	r16, r28
    47da:	01 5c       	subi	r16, 0xC1	; 193
    47dc:	1f 4f       	sbci	r17, 0xFF	; 255
    47de:	fe 01       	movw	r30, r28
    47e0:	ed 5b       	subi	r30, 0xBD	; 189
    47e2:	ff 4f       	sbci	r31, 0xFF	; 255
    47e4:	60 81       	ld	r22, Z
    47e6:	71 81       	ldd	r23, Z+1	; 0x01
    47e8:	82 81       	ldd	r24, Z+2	; 0x02
    47ea:	93 81       	ldd	r25, Z+3	; 0x03
    47ec:	20 e0       	ldi	r18, 0x00	; 0
    47ee:	30 e0       	ldi	r19, 0x00	; 0
    47f0:	4a e7       	ldi	r20, 0x7A	; 122
    47f2:	55 e4       	ldi	r21, 0x45	; 69
    47f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47f8:	dc 01       	movw	r26, r24
    47fa:	cb 01       	movw	r24, r22
    47fc:	f8 01       	movw	r30, r16
    47fe:	80 83       	st	Z, r24
    4800:	91 83       	std	Z+1, r25	; 0x01
    4802:	a2 83       	std	Z+2, r26	; 0x02
    4804:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4806:	fe 01       	movw	r30, r28
    4808:	ff 96       	adiw	r30, 0x3f	; 63
    480a:	60 81       	ld	r22, Z
    480c:	71 81       	ldd	r23, Z+1	; 0x01
    480e:	82 81       	ldd	r24, Z+2	; 0x02
    4810:	93 81       	ldd	r25, Z+3	; 0x03
    4812:	20 e0       	ldi	r18, 0x00	; 0
    4814:	30 e0       	ldi	r19, 0x00	; 0
    4816:	40 e8       	ldi	r20, 0x80	; 128
    4818:	5f e3       	ldi	r21, 0x3F	; 63
    481a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    481e:	88 23       	and	r24, r24
    4820:	2c f4       	brge	.+10     	; 0x482c <main+0x141e>
		__ticks = 1;
    4822:	81 e0       	ldi	r24, 0x01	; 1
    4824:	90 e0       	ldi	r25, 0x00	; 0
    4826:	9e af       	std	Y+62, r25	; 0x3e
    4828:	8d af       	std	Y+61, r24	; 0x3d
    482a:	46 c0       	rjmp	.+140    	; 0x48b8 <main+0x14aa>
	else if (__tmp > 65535)
    482c:	fe 01       	movw	r30, r28
    482e:	ff 96       	adiw	r30, 0x3f	; 63
    4830:	60 81       	ld	r22, Z
    4832:	71 81       	ldd	r23, Z+1	; 0x01
    4834:	82 81       	ldd	r24, Z+2	; 0x02
    4836:	93 81       	ldd	r25, Z+3	; 0x03
    4838:	20 e0       	ldi	r18, 0x00	; 0
    483a:	3f ef       	ldi	r19, 0xFF	; 255
    483c:	4f e7       	ldi	r20, 0x7F	; 127
    483e:	57 e4       	ldi	r21, 0x47	; 71
    4840:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4844:	18 16       	cp	r1, r24
    4846:	64 f5       	brge	.+88     	; 0x48a0 <main+0x1492>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4848:	fe 01       	movw	r30, r28
    484a:	ed 5b       	subi	r30, 0xBD	; 189
    484c:	ff 4f       	sbci	r31, 0xFF	; 255
    484e:	60 81       	ld	r22, Z
    4850:	71 81       	ldd	r23, Z+1	; 0x01
    4852:	82 81       	ldd	r24, Z+2	; 0x02
    4854:	93 81       	ldd	r25, Z+3	; 0x03
    4856:	20 e0       	ldi	r18, 0x00	; 0
    4858:	30 e0       	ldi	r19, 0x00	; 0
    485a:	40 e2       	ldi	r20, 0x20	; 32
    485c:	51 e4       	ldi	r21, 0x41	; 65
    485e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4862:	dc 01       	movw	r26, r24
    4864:	cb 01       	movw	r24, r22
    4866:	bc 01       	movw	r22, r24
    4868:	cd 01       	movw	r24, r26
    486a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    486e:	dc 01       	movw	r26, r24
    4870:	cb 01       	movw	r24, r22
    4872:	9e af       	std	Y+62, r25	; 0x3e
    4874:	8d af       	std	Y+61, r24	; 0x3d
    4876:	0f c0       	rjmp	.+30     	; 0x4896 <main+0x1488>
    4878:	80 e9       	ldi	r24, 0x90	; 144
    487a:	91 e0       	ldi	r25, 0x01	; 1
    487c:	9c af       	std	Y+60, r25	; 0x3c
    487e:	8b af       	std	Y+59, r24	; 0x3b
    4880:	8b ad       	ldd	r24, Y+59	; 0x3b
    4882:	9c ad       	ldd	r25, Y+60	; 0x3c
    4884:	01 97       	sbiw	r24, 0x01	; 1
    4886:	f1 f7       	brne	.-4      	; 0x4884 <main+0x1476>
    4888:	9c af       	std	Y+60, r25	; 0x3c
    488a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    488c:	8d ad       	ldd	r24, Y+61	; 0x3d
    488e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4890:	01 97       	sbiw	r24, 0x01	; 1
    4892:	9e af       	std	Y+62, r25	; 0x3e
    4894:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4896:	8d ad       	ldd	r24, Y+61	; 0x3d
    4898:	9e ad       	ldd	r25, Y+62	; 0x3e
    489a:	00 97       	sbiw	r24, 0x00	; 0
    489c:	69 f7       	brne	.-38     	; 0x4878 <main+0x146a>
    489e:	16 c0       	rjmp	.+44     	; 0x48cc <main+0x14be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48a0:	fe 01       	movw	r30, r28
    48a2:	ff 96       	adiw	r30, 0x3f	; 63
    48a4:	60 81       	ld	r22, Z
    48a6:	71 81       	ldd	r23, Z+1	; 0x01
    48a8:	82 81       	ldd	r24, Z+2	; 0x02
    48aa:	93 81       	ldd	r25, Z+3	; 0x03
    48ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48b0:	dc 01       	movw	r26, r24
    48b2:	cb 01       	movw	r24, r22
    48b4:	9e af       	std	Y+62, r25	; 0x3e
    48b6:	8d af       	std	Y+61, r24	; 0x3d
    48b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    48ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    48bc:	9a af       	std	Y+58, r25	; 0x3a
    48be:	89 af       	std	Y+57, r24	; 0x39
    48c0:	89 ad       	ldd	r24, Y+57	; 0x39
    48c2:	9a ad       	ldd	r25, Y+58	; 0x3a
    48c4:	01 97       	sbiw	r24, 0x01	; 1
    48c6:	f1 f7       	brne	.-4      	; 0x48c4 <main+0x14b6>
    48c8:	9a af       	std	Y+58, r25	; 0x3a
    48ca:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(200);
					SPI_Motors_Dash_Custom_Protocol(STEPPER_MOTOR_MOVE, Not_DC_Motor, inputSteper);
    48cc:	2e ed       	ldi	r18, 0xDE	; 222
    48ce:	31 e0       	ldi	r19, 0x01	; 1
    48d0:	85 e0       	ldi	r24, 0x05	; 5
    48d2:	66 e0       	ldi	r22, 0x06	; 6
    48d4:	a9 01       	movw	r20, r18
    48d6:	0e 94 cb 18 	call	0x3196	; 0x3196 <SPI_Motors_Dash_Custom_Protocol>
    48da:	80 e0       	ldi	r24, 0x00	; 0
    48dc:	90 e4       	ldi	r25, 0x40	; 64
    48de:	ac e9       	ldi	r26, 0x9C	; 156
    48e0:	b5 e4       	ldi	r27, 0x45	; 69
    48e2:	8d ab       	std	Y+53, r24	; 0x35
    48e4:	9e ab       	std	Y+54, r25	; 0x36
    48e6:	af ab       	std	Y+55, r26	; 0x37
    48e8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48ea:	6d a9       	ldd	r22, Y+53	; 0x35
    48ec:	7e a9       	ldd	r23, Y+54	; 0x36
    48ee:	8f a9       	ldd	r24, Y+55	; 0x37
    48f0:	98 ad       	ldd	r25, Y+56	; 0x38
    48f2:	20 e0       	ldi	r18, 0x00	; 0
    48f4:	30 e0       	ldi	r19, 0x00	; 0
    48f6:	4a e7       	ldi	r20, 0x7A	; 122
    48f8:	55 e4       	ldi	r21, 0x45	; 69
    48fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48fe:	dc 01       	movw	r26, r24
    4900:	cb 01       	movw	r24, r22
    4902:	89 ab       	std	Y+49, r24	; 0x31
    4904:	9a ab       	std	Y+50, r25	; 0x32
    4906:	ab ab       	std	Y+51, r26	; 0x33
    4908:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    490a:	69 a9       	ldd	r22, Y+49	; 0x31
    490c:	7a a9       	ldd	r23, Y+50	; 0x32
    490e:	8b a9       	ldd	r24, Y+51	; 0x33
    4910:	9c a9       	ldd	r25, Y+52	; 0x34
    4912:	20 e0       	ldi	r18, 0x00	; 0
    4914:	30 e0       	ldi	r19, 0x00	; 0
    4916:	40 e8       	ldi	r20, 0x80	; 128
    4918:	5f e3       	ldi	r21, 0x3F	; 63
    491a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    491e:	88 23       	and	r24, r24
    4920:	2c f4       	brge	.+10     	; 0x492c <main+0x151e>
		__ticks = 1;
    4922:	81 e0       	ldi	r24, 0x01	; 1
    4924:	90 e0       	ldi	r25, 0x00	; 0
    4926:	98 ab       	std	Y+48, r25	; 0x30
    4928:	8f a7       	std	Y+47, r24	; 0x2f
    492a:	3f c0       	rjmp	.+126    	; 0x49aa <main+0x159c>
	else if (__tmp > 65535)
    492c:	69 a9       	ldd	r22, Y+49	; 0x31
    492e:	7a a9       	ldd	r23, Y+50	; 0x32
    4930:	8b a9       	ldd	r24, Y+51	; 0x33
    4932:	9c a9       	ldd	r25, Y+52	; 0x34
    4934:	20 e0       	ldi	r18, 0x00	; 0
    4936:	3f ef       	ldi	r19, 0xFF	; 255
    4938:	4f e7       	ldi	r20, 0x7F	; 127
    493a:	57 e4       	ldi	r21, 0x47	; 71
    493c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4940:	18 16       	cp	r1, r24
    4942:	4c f5       	brge	.+82     	; 0x4996 <main+0x1588>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4944:	6d a9       	ldd	r22, Y+53	; 0x35
    4946:	7e a9       	ldd	r23, Y+54	; 0x36
    4948:	8f a9       	ldd	r24, Y+55	; 0x37
    494a:	98 ad       	ldd	r25, Y+56	; 0x38
    494c:	20 e0       	ldi	r18, 0x00	; 0
    494e:	30 e0       	ldi	r19, 0x00	; 0
    4950:	40 e2       	ldi	r20, 0x20	; 32
    4952:	51 e4       	ldi	r21, 0x41	; 65
    4954:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4958:	dc 01       	movw	r26, r24
    495a:	cb 01       	movw	r24, r22
    495c:	bc 01       	movw	r22, r24
    495e:	cd 01       	movw	r24, r26
    4960:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4964:	dc 01       	movw	r26, r24
    4966:	cb 01       	movw	r24, r22
    4968:	98 ab       	std	Y+48, r25	; 0x30
    496a:	8f a7       	std	Y+47, r24	; 0x2f
    496c:	0f c0       	rjmp	.+30     	; 0x498c <main+0x157e>
    496e:	80 e9       	ldi	r24, 0x90	; 144
    4970:	91 e0       	ldi	r25, 0x01	; 1
    4972:	9e a7       	std	Y+46, r25	; 0x2e
    4974:	8d a7       	std	Y+45, r24	; 0x2d
    4976:	8d a5       	ldd	r24, Y+45	; 0x2d
    4978:	9e a5       	ldd	r25, Y+46	; 0x2e
    497a:	01 97       	sbiw	r24, 0x01	; 1
    497c:	f1 f7       	brne	.-4      	; 0x497a <main+0x156c>
    497e:	9e a7       	std	Y+46, r25	; 0x2e
    4980:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4982:	8f a5       	ldd	r24, Y+47	; 0x2f
    4984:	98 a9       	ldd	r25, Y+48	; 0x30
    4986:	01 97       	sbiw	r24, 0x01	; 1
    4988:	98 ab       	std	Y+48, r25	; 0x30
    498a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    498c:	8f a5       	ldd	r24, Y+47	; 0x2f
    498e:	98 a9       	ldd	r25, Y+48	; 0x30
    4990:	00 97       	sbiw	r24, 0x00	; 0
    4992:	69 f7       	brne	.-38     	; 0x496e <main+0x1560>
    4994:	14 c0       	rjmp	.+40     	; 0x49be <main+0x15b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4996:	69 a9       	ldd	r22, Y+49	; 0x31
    4998:	7a a9       	ldd	r23, Y+50	; 0x32
    499a:	8b a9       	ldd	r24, Y+51	; 0x33
    499c:	9c a9       	ldd	r25, Y+52	; 0x34
    499e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49a2:	dc 01       	movw	r26, r24
    49a4:	cb 01       	movw	r24, r22
    49a6:	98 ab       	std	Y+48, r25	; 0x30
    49a8:	8f a7       	std	Y+47, r24	; 0x2f
    49aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    49ac:	98 a9       	ldd	r25, Y+48	; 0x30
    49ae:	9c a7       	std	Y+44, r25	; 0x2c
    49b0:	8b a7       	std	Y+43, r24	; 0x2b
    49b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    49b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    49b6:	01 97       	sbiw	r24, 0x01	; 1
    49b8:	f1 f7       	brne	.-4      	; 0x49b6 <main+0x15a8>
    49ba:	9c a7       	std	Y+44, r25	; 0x2c
    49bc:	8b a7       	std	Y+43, r24	; 0x2b
//						_delay_ms(1); // Add a small delay to reduce CPU load
//						waitCycles++;
//					}
//					waitCycles=0;
					_delay_ms(5000);
					memset(inputSteper, '\0', sizeof(inputSteper));
    49be:	8e ed       	ldi	r24, 0xDE	; 222
    49c0:	91 e0       	ldi	r25, 0x01	; 1
    49c2:	60 e0       	ldi	r22, 0x00	; 0
    49c4:	70 e0       	ldi	r23, 0x00	; 0
    49c6:	45 e0       	ldi	r20, 0x05	; 5
    49c8:	50 e0       	ldi	r21, 0x00	; 0
    49ca:	0e 94 43 27 	call	0x4e86	; 0x4e86 <memset>
					indexStepper = 0;
    49ce:	10 92 e3 01 	sts	0x01E3, r1
					gettingStepperOption = 0;
    49d2:	10 92 f6 01 	sts	0x01F6, r1
					gettingMotorOption=0;
    49d6:	10 92 f4 01 	sts	0x01F4, r1
					currentState = STATE_MOTOR_OPTIONS;
    49da:	82 e0       	ldi	r24, 0x02	; 2
    49dc:	80 93 f9 01 	sts	0x01F9, r24
    49e0:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <main+0xaa>
			}
			break;


		case STATE_SERVO_MOVE:
			if (!gettingServoOption) {
    49e4:	80 91 f8 01 	lds	r24, 0x01F8
    49e8:	88 23       	and	r24, r24
    49ea:	49 f4       	brne	.+18     	; 0x49fe <main+0x15f0>
				lcd_ES_tclear();
    49ec:	0e 94 53 12 	call	0x24a6	; 0x24a6 <lcd_ES_tclear>
				Lcd_ES_tsendString("Signed angle :");
    49f0:	8e e1       	ldi	r24, 0x1E	; 30
    49f2:	91 e0       	ldi	r25, 0x01	; 1
    49f4:	0e 94 3a 14 	call	0x2874	; 0x2874 <Lcd_ES_tsendString>
				gettingServoOption = 1;
    49f8:	81 e0       	ldi	r24, 0x01	; 1
    49fa:	80 93 f8 01 	sts	0x01F8, r24
			}
			KPD_ES_tGetKeyPressed(&Option4);
    49fe:	ce 01       	movw	r24, r28
    4a00:	8c 51       	subi	r24, 0x1C	; 28
    4a02:	9f 4f       	sbci	r25, 0xFF	; 255
    4a04:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <KPD_ES_tGetKeyPressed>
			if (Option4 != KPD_U8_NOT_PRESSED) {
    4a08:	fe 01       	movw	r30, r28
    4a0a:	ec 51       	subi	r30, 0x1C	; 28
    4a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a0e:	80 81       	ld	r24, Z
    4a10:	8f 3f       	cpi	r24, 0xFF	; 255
    4a12:	11 f4       	brne	.+4      	; 0x4a18 <main+0x160a>
    4a14:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <main+0xaa>
				LCD_ES_tGoTo(1, indexServo);
    4a18:	90 91 e9 01 	lds	r25, 0x01E9
    4a1c:	81 e0       	ldi	r24, 0x01	; 1
    4a1e:	69 2f       	mov	r22, r25
    4a20:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <LCD_ES_tGoTo>
				Lcd_ES_tsendChar(Option4);
    4a24:	fe 01       	movw	r30, r28
    4a26:	ec 51       	subi	r30, 0x1C	; 28
    4a28:	ff 4f       	sbci	r31, 0xFF	; 255
    4a2a:	80 81       	ld	r24, Z
    4a2c:	0e 94 8b 13 	call	0x2716	; 0x2716 <Lcd_ES_tsendChar>
				if(indexServo == 0)
    4a30:	80 91 e9 01 	lds	r24, 0x01E9
    4a34:	88 23       	and	r24, r24
    4a36:	31 f4       	brne	.+12     	; 0x4a44 <main+0x1636>
					Sign = Option4;
    4a38:	fe 01       	movw	r30, r28
    4a3a:	ec 51       	subi	r30, 0x1C	; 28
    4a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a3e:	80 81       	ld	r24, Z
    4a40:	80 93 d5 01 	sts	0x01D5, r24
				inputServo[indexServo] = Option4 - '0'; // Convert character to integer
    4a44:	80 91 e9 01 	lds	r24, 0x01E9
    4a48:	28 2f       	mov	r18, r24
    4a4a:	30 e0       	ldi	r19, 0x00	; 0
    4a4c:	fe 01       	movw	r30, r28
    4a4e:	ec 51       	subi	r30, 0x1C	; 28
    4a50:	ff 4f       	sbci	r31, 0xFF	; 255
    4a52:	80 81       	ld	r24, Z
    4a54:	80 53       	subi	r24, 0x30	; 48
    4a56:	f9 01       	movw	r30, r18
    4a58:	ec 51       	subi	r30, 0x1C	; 28
    4a5a:	fe 4f       	sbci	r31, 0xFE	; 254
    4a5c:	80 83       	st	Z, r24
				indexServo++;
    4a5e:	80 91 e9 01 	lds	r24, 0x01E9
    4a62:	8f 5f       	subi	r24, 0xFF	; 255
    4a64:	80 93 e9 01 	sts	0x01E9, r24
				if (indexServo >= 3) { // Use indexStepper instead of indexz
    4a68:	80 91 e9 01 	lds	r24, 0x01E9
    4a6c:	83 30       	cpi	r24, 0x03	; 3
    4a6e:	10 f4       	brcc	.+4      	; 0x4a74 <main+0x1666>
    4a70:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <main+0xaa>
					if(Sign == '+'){
    4a74:	80 91 d5 01 	lds	r24, 0x01D5
    4a78:	8b 32       	cpi	r24, 0x2B	; 43
    4a7a:	d1 f4       	brne	.+52     	; 0x4ab0 <main+0x16a2>
						ServoAngle = +((inputServo[1] * 10) + inputServo[2]);
    4a7c:	80 91 e5 01 	lds	r24, 0x01E5
    4a80:	88 2f       	mov	r24, r24
    4a82:	90 e0       	ldi	r25, 0x00	; 0
    4a84:	9c 01       	movw	r18, r24
    4a86:	22 0f       	add	r18, r18
    4a88:	33 1f       	adc	r19, r19
    4a8a:	c9 01       	movw	r24, r18
    4a8c:	88 0f       	add	r24, r24
    4a8e:	99 1f       	adc	r25, r25
    4a90:	88 0f       	add	r24, r24
    4a92:	99 1f       	adc	r25, r25
    4a94:	28 0f       	add	r18, r24
    4a96:	39 1f       	adc	r19, r25
    4a98:	80 91 e6 01 	lds	r24, 0x01E6
    4a9c:	88 2f       	mov	r24, r24
    4a9e:	90 e0       	ldi	r25, 0x00	; 0
    4aa0:	fe 01       	movw	r30, r28
    4aa2:	ec 52       	subi	r30, 0x2C	; 44
    4aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa6:	82 0f       	add	r24, r18
    4aa8:	93 1f       	adc	r25, r19
    4aaa:	91 83       	std	Z+1, r25	; 0x01
    4aac:	80 83       	st	Z, r24
    4aae:	1c c0       	rjmp	.+56     	; 0x4ae8 <main+0x16da>
					}else{
						ServoAngle = -((inputServo[1] * 10) + inputServo[2]);
    4ab0:	80 91 e5 01 	lds	r24, 0x01E5
    4ab4:	88 2f       	mov	r24, r24
    4ab6:	90 e0       	ldi	r25, 0x00	; 0
    4ab8:	9c 01       	movw	r18, r24
    4aba:	22 0f       	add	r18, r18
    4abc:	33 1f       	adc	r19, r19
    4abe:	c9 01       	movw	r24, r18
    4ac0:	88 0f       	add	r24, r24
    4ac2:	99 1f       	adc	r25, r25
    4ac4:	88 0f       	add	r24, r24
    4ac6:	99 1f       	adc	r25, r25
    4ac8:	82 0f       	add	r24, r18
    4aca:	93 1f       	adc	r25, r19
    4acc:	90 95       	com	r25
    4ace:	81 95       	neg	r24
    4ad0:	9f 4f       	sbci	r25, 0xFF	; 255
    4ad2:	20 91 e6 01 	lds	r18, 0x01E6
    4ad6:	22 2f       	mov	r18, r18
    4ad8:	30 e0       	ldi	r19, 0x00	; 0
    4ada:	fe 01       	movw	r30, r28
    4adc:	ec 52       	subi	r30, 0x2C	; 44
    4ade:	ff 4f       	sbci	r31, 0xFF	; 255
    4ae0:	82 1b       	sub	r24, r18
    4ae2:	93 0b       	sbc	r25, r19
    4ae4:	91 83       	std	Z+1, r25	; 0x01
    4ae6:	80 83       	st	Z, r24
    4ae8:	80 e0       	ldi	r24, 0x00	; 0
    4aea:	90 e0       	ldi	r25, 0x00	; 0
    4aec:	a8 e4       	ldi	r26, 0x48	; 72
    4aee:	b3 e4       	ldi	r27, 0x43	; 67
    4af0:	8f a3       	std	Y+39, r24	; 0x27
    4af2:	98 a7       	std	Y+40, r25	; 0x28
    4af4:	a9 a7       	std	Y+41, r26	; 0x29
    4af6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4af8:	6f a1       	ldd	r22, Y+39	; 0x27
    4afa:	78 a5       	ldd	r23, Y+40	; 0x28
    4afc:	89 a5       	ldd	r24, Y+41	; 0x29
    4afe:	9a a5       	ldd	r25, Y+42	; 0x2a
    4b00:	20 e0       	ldi	r18, 0x00	; 0
    4b02:	30 e0       	ldi	r19, 0x00	; 0
    4b04:	4a e7       	ldi	r20, 0x7A	; 122
    4b06:	55 e4       	ldi	r21, 0x45	; 69
    4b08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b0c:	dc 01       	movw	r26, r24
    4b0e:	cb 01       	movw	r24, r22
    4b10:	8b a3       	std	Y+35, r24	; 0x23
    4b12:	9c a3       	std	Y+36, r25	; 0x24
    4b14:	ad a3       	std	Y+37, r26	; 0x25
    4b16:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4b18:	6b a1       	ldd	r22, Y+35	; 0x23
    4b1a:	7c a1       	ldd	r23, Y+36	; 0x24
    4b1c:	8d a1       	ldd	r24, Y+37	; 0x25
    4b1e:	9e a1       	ldd	r25, Y+38	; 0x26
    4b20:	20 e0       	ldi	r18, 0x00	; 0
    4b22:	30 e0       	ldi	r19, 0x00	; 0
    4b24:	40 e8       	ldi	r20, 0x80	; 128
    4b26:	5f e3       	ldi	r21, 0x3F	; 63
    4b28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b2c:	88 23       	and	r24, r24
    4b2e:	2c f4       	brge	.+10     	; 0x4b3a <main+0x172c>
		__ticks = 1;
    4b30:	81 e0       	ldi	r24, 0x01	; 1
    4b32:	90 e0       	ldi	r25, 0x00	; 0
    4b34:	9a a3       	std	Y+34, r25	; 0x22
    4b36:	89 a3       	std	Y+33, r24	; 0x21
    4b38:	3f c0       	rjmp	.+126    	; 0x4bb8 <main+0x17aa>
	else if (__tmp > 65535)
    4b3a:	6b a1       	ldd	r22, Y+35	; 0x23
    4b3c:	7c a1       	ldd	r23, Y+36	; 0x24
    4b3e:	8d a1       	ldd	r24, Y+37	; 0x25
    4b40:	9e a1       	ldd	r25, Y+38	; 0x26
    4b42:	20 e0       	ldi	r18, 0x00	; 0
    4b44:	3f ef       	ldi	r19, 0xFF	; 255
    4b46:	4f e7       	ldi	r20, 0x7F	; 127
    4b48:	57 e4       	ldi	r21, 0x47	; 71
    4b4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b4e:	18 16       	cp	r1, r24
    4b50:	4c f5       	brge	.+82     	; 0x4ba4 <main+0x1796>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b52:	6f a1       	ldd	r22, Y+39	; 0x27
    4b54:	78 a5       	ldd	r23, Y+40	; 0x28
    4b56:	89 a5       	ldd	r24, Y+41	; 0x29
    4b58:	9a a5       	ldd	r25, Y+42	; 0x2a
    4b5a:	20 e0       	ldi	r18, 0x00	; 0
    4b5c:	30 e0       	ldi	r19, 0x00	; 0
    4b5e:	40 e2       	ldi	r20, 0x20	; 32
    4b60:	51 e4       	ldi	r21, 0x41	; 65
    4b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b66:	dc 01       	movw	r26, r24
    4b68:	cb 01       	movw	r24, r22
    4b6a:	bc 01       	movw	r22, r24
    4b6c:	cd 01       	movw	r24, r26
    4b6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b72:	dc 01       	movw	r26, r24
    4b74:	cb 01       	movw	r24, r22
    4b76:	9a a3       	std	Y+34, r25	; 0x22
    4b78:	89 a3       	std	Y+33, r24	; 0x21
    4b7a:	0f c0       	rjmp	.+30     	; 0x4b9a <main+0x178c>
    4b7c:	80 e9       	ldi	r24, 0x90	; 144
    4b7e:	91 e0       	ldi	r25, 0x01	; 1
    4b80:	98 a3       	std	Y+32, r25	; 0x20
    4b82:	8f 8f       	std	Y+31, r24	; 0x1f
    4b84:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4b86:	98 a1       	ldd	r25, Y+32	; 0x20
    4b88:	01 97       	sbiw	r24, 0x01	; 1
    4b8a:	f1 f7       	brne	.-4      	; 0x4b88 <main+0x177a>
    4b8c:	98 a3       	std	Y+32, r25	; 0x20
    4b8e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b90:	89 a1       	ldd	r24, Y+33	; 0x21
    4b92:	9a a1       	ldd	r25, Y+34	; 0x22
    4b94:	01 97       	sbiw	r24, 0x01	; 1
    4b96:	9a a3       	std	Y+34, r25	; 0x22
    4b98:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b9a:	89 a1       	ldd	r24, Y+33	; 0x21
    4b9c:	9a a1       	ldd	r25, Y+34	; 0x22
    4b9e:	00 97       	sbiw	r24, 0x00	; 0
    4ba0:	69 f7       	brne	.-38     	; 0x4b7c <main+0x176e>
    4ba2:	14 c0       	rjmp	.+40     	; 0x4bcc <main+0x17be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ba4:	6b a1       	ldd	r22, Y+35	; 0x23
    4ba6:	7c a1       	ldd	r23, Y+36	; 0x24
    4ba8:	8d a1       	ldd	r24, Y+37	; 0x25
    4baa:	9e a1       	ldd	r25, Y+38	; 0x26
    4bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bb0:	dc 01       	movw	r26, r24
    4bb2:	cb 01       	movw	r24, r22
    4bb4:	9a a3       	std	Y+34, r25	; 0x22
    4bb6:	89 a3       	std	Y+33, r24	; 0x21
    4bb8:	89 a1       	ldd	r24, Y+33	; 0x21
    4bba:	9a a1       	ldd	r25, Y+34	; 0x22
    4bbc:	9e 8f       	std	Y+30, r25	; 0x1e
    4bbe:	8d 8f       	std	Y+29, r24	; 0x1d
    4bc0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4bc2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4bc4:	01 97       	sbiw	r24, 0x01	; 1
    4bc6:	f1 f7       	brne	.-4      	; 0x4bc4 <main+0x17b6>
    4bc8:	9e 8f       	std	Y+30, r25	; 0x1e
    4bca:	8d 8f       	std	Y+29, r24	; 0x1d
					}
					_delay_ms(200);
					SPI_Motors_Dash_Custom_Protocol(SERVO_MOTOR_MOVE, Not_DC_Motor, inputServo);
    4bcc:	24 ee       	ldi	r18, 0xE4	; 228
    4bce:	31 e0       	ldi	r19, 0x01	; 1
    4bd0:	84 e0       	ldi	r24, 0x04	; 4
    4bd2:	66 e0       	ldi	r22, 0x06	; 6
    4bd4:	a9 01       	movw	r20, r18
    4bd6:	0e 94 cb 18 	call	0x3196	; 0x3196 <SPI_Motors_Dash_Custom_Protocol>
    4bda:	80 e0       	ldi	r24, 0x00	; 0
    4bdc:	90 e4       	ldi	r25, 0x40	; 64
    4bde:	ac e9       	ldi	r26, 0x9C	; 156
    4be0:	b5 e4       	ldi	r27, 0x45	; 69
    4be2:	89 8f       	std	Y+25, r24	; 0x19
    4be4:	9a 8f       	std	Y+26, r25	; 0x1a
    4be6:	ab 8f       	std	Y+27, r26	; 0x1b
    4be8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bea:	69 8d       	ldd	r22, Y+25	; 0x19
    4bec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4bee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4bf0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4bf2:	20 e0       	ldi	r18, 0x00	; 0
    4bf4:	30 e0       	ldi	r19, 0x00	; 0
    4bf6:	4a e7       	ldi	r20, 0x7A	; 122
    4bf8:	55 e4       	ldi	r21, 0x45	; 69
    4bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bfe:	dc 01       	movw	r26, r24
    4c00:	cb 01       	movw	r24, r22
    4c02:	8d 8b       	std	Y+21, r24	; 0x15
    4c04:	9e 8b       	std	Y+22, r25	; 0x16
    4c06:	af 8b       	std	Y+23, r26	; 0x17
    4c08:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4c0a:	6d 89       	ldd	r22, Y+21	; 0x15
    4c0c:	7e 89       	ldd	r23, Y+22	; 0x16
    4c0e:	8f 89       	ldd	r24, Y+23	; 0x17
    4c10:	98 8d       	ldd	r25, Y+24	; 0x18
    4c12:	20 e0       	ldi	r18, 0x00	; 0
    4c14:	30 e0       	ldi	r19, 0x00	; 0
    4c16:	40 e8       	ldi	r20, 0x80	; 128
    4c18:	5f e3       	ldi	r21, 0x3F	; 63
    4c1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c1e:	88 23       	and	r24, r24
    4c20:	2c f4       	brge	.+10     	; 0x4c2c <main+0x181e>
		__ticks = 1;
    4c22:	81 e0       	ldi	r24, 0x01	; 1
    4c24:	90 e0       	ldi	r25, 0x00	; 0
    4c26:	9c 8b       	std	Y+20, r25	; 0x14
    4c28:	8b 8b       	std	Y+19, r24	; 0x13
    4c2a:	3f c0       	rjmp	.+126    	; 0x4caa <main+0x189c>
	else if (__tmp > 65535)
    4c2c:	6d 89       	ldd	r22, Y+21	; 0x15
    4c2e:	7e 89       	ldd	r23, Y+22	; 0x16
    4c30:	8f 89       	ldd	r24, Y+23	; 0x17
    4c32:	98 8d       	ldd	r25, Y+24	; 0x18
    4c34:	20 e0       	ldi	r18, 0x00	; 0
    4c36:	3f ef       	ldi	r19, 0xFF	; 255
    4c38:	4f e7       	ldi	r20, 0x7F	; 127
    4c3a:	57 e4       	ldi	r21, 0x47	; 71
    4c3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c40:	18 16       	cp	r1, r24
    4c42:	4c f5       	brge	.+82     	; 0x4c96 <main+0x1888>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c44:	69 8d       	ldd	r22, Y+25	; 0x19
    4c46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4c48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c4c:	20 e0       	ldi	r18, 0x00	; 0
    4c4e:	30 e0       	ldi	r19, 0x00	; 0
    4c50:	40 e2       	ldi	r20, 0x20	; 32
    4c52:	51 e4       	ldi	r21, 0x41	; 65
    4c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c58:	dc 01       	movw	r26, r24
    4c5a:	cb 01       	movw	r24, r22
    4c5c:	bc 01       	movw	r22, r24
    4c5e:	cd 01       	movw	r24, r26
    4c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c64:	dc 01       	movw	r26, r24
    4c66:	cb 01       	movw	r24, r22
    4c68:	9c 8b       	std	Y+20, r25	; 0x14
    4c6a:	8b 8b       	std	Y+19, r24	; 0x13
    4c6c:	0f c0       	rjmp	.+30     	; 0x4c8c <main+0x187e>
    4c6e:	80 e9       	ldi	r24, 0x90	; 144
    4c70:	91 e0       	ldi	r25, 0x01	; 1
    4c72:	9a 8b       	std	Y+18, r25	; 0x12
    4c74:	89 8b       	std	Y+17, r24	; 0x11
    4c76:	89 89       	ldd	r24, Y+17	; 0x11
    4c78:	9a 89       	ldd	r25, Y+18	; 0x12
    4c7a:	01 97       	sbiw	r24, 0x01	; 1
    4c7c:	f1 f7       	brne	.-4      	; 0x4c7a <main+0x186c>
    4c7e:	9a 8b       	std	Y+18, r25	; 0x12
    4c80:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c82:	8b 89       	ldd	r24, Y+19	; 0x13
    4c84:	9c 89       	ldd	r25, Y+20	; 0x14
    4c86:	01 97       	sbiw	r24, 0x01	; 1
    4c88:	9c 8b       	std	Y+20, r25	; 0x14
    4c8a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c8c:	8b 89       	ldd	r24, Y+19	; 0x13
    4c8e:	9c 89       	ldd	r25, Y+20	; 0x14
    4c90:	00 97       	sbiw	r24, 0x00	; 0
    4c92:	69 f7       	brne	.-38     	; 0x4c6e <main+0x1860>
    4c94:	14 c0       	rjmp	.+40     	; 0x4cbe <main+0x18b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c96:	6d 89       	ldd	r22, Y+21	; 0x15
    4c98:	7e 89       	ldd	r23, Y+22	; 0x16
    4c9a:	8f 89       	ldd	r24, Y+23	; 0x17
    4c9c:	98 8d       	ldd	r25, Y+24	; 0x18
    4c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ca2:	dc 01       	movw	r26, r24
    4ca4:	cb 01       	movw	r24, r22
    4ca6:	9c 8b       	std	Y+20, r25	; 0x14
    4ca8:	8b 8b       	std	Y+19, r24	; 0x13
    4caa:	8b 89       	ldd	r24, Y+19	; 0x13
    4cac:	9c 89       	ldd	r25, Y+20	; 0x14
    4cae:	98 8b       	std	Y+16, r25	; 0x10
    4cb0:	8f 87       	std	Y+15, r24	; 0x0f
    4cb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    4cb4:	98 89       	ldd	r25, Y+16	; 0x10
    4cb6:	01 97       	sbiw	r24, 0x01	; 1
    4cb8:	f1 f7       	brne	.-4      	; 0x4cb6 <main+0x18a8>
    4cba:	98 8b       	std	Y+16, r25	; 0x10
    4cbc:	8f 87       	std	Y+15, r24	; 0x0f
//						_delay_ms(1); // Add a small delay to reduce CPU load
//						waitCycles++;
//					}
//					waitCycles=0;
					_delay_ms(5000);
					memset(inputServo, '\0', sizeof(inputServo));
    4cbe:	84 ee       	ldi	r24, 0xE4	; 228
    4cc0:	91 e0       	ldi	r25, 0x01	; 1
    4cc2:	60 e0       	ldi	r22, 0x00	; 0
    4cc4:	70 e0       	ldi	r23, 0x00	; 0
    4cc6:	45 e0       	ldi	r20, 0x05	; 5
    4cc8:	50 e0       	ldi	r21, 0x00	; 0
    4cca:	0e 94 43 27 	call	0x4e86	; 0x4e86 <memset>
					indexServo = 0;
    4cce:	10 92 e9 01 	sts	0x01E9, r1
					gettingServoOption = 0;
    4cd2:	10 92 f8 01 	sts	0x01F8, r1
					gettingMotorOption=0;
    4cd6:	10 92 f4 01 	sts	0x01F4, r1
					currentState = STATE_MOTOR_OPTIONS;
    4cda:	82 e0       	ldi	r24, 0x02	; 2
    4cdc:	80 93 f9 01 	sts	0x01F9, r24
    4ce0:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <main+0xaa>
			break;



		case STATE_EXIT:
			lcd_ES_tclear();
    4ce4:	0e 94 53 12 	call	0x24a6	; 0x24a6 <lcd_ES_tclear>
			Lcd_ES_tsendString("Exit System :)");
    4ce8:	8d e2       	ldi	r24, 0x2D	; 45
    4cea:	91 e0       	ldi	r25, 0x01	; 1
    4cec:	0e 94 3a 14 	call	0x2874	; 0x2874 <Lcd_ES_tsendString>
    4cf0:	80 e0       	ldi	r24, 0x00	; 0
    4cf2:	90 e0       	ldi	r25, 0x00	; 0
    4cf4:	aa e7       	ldi	r26, 0x7A	; 122
    4cf6:	b4 e4       	ldi	r27, 0x44	; 68
    4cf8:	8b 87       	std	Y+11, r24	; 0x0b
    4cfa:	9c 87       	std	Y+12, r25	; 0x0c
    4cfc:	ad 87       	std	Y+13, r26	; 0x0d
    4cfe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d00:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d02:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d04:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d06:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d08:	20 e0       	ldi	r18, 0x00	; 0
    4d0a:	30 e0       	ldi	r19, 0x00	; 0
    4d0c:	4a e7       	ldi	r20, 0x7A	; 122
    4d0e:	55 e4       	ldi	r21, 0x45	; 69
    4d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d14:	dc 01       	movw	r26, r24
    4d16:	cb 01       	movw	r24, r22
    4d18:	8f 83       	std	Y+7, r24	; 0x07
    4d1a:	98 87       	std	Y+8, r25	; 0x08
    4d1c:	a9 87       	std	Y+9, r26	; 0x09
    4d1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4d20:	6f 81       	ldd	r22, Y+7	; 0x07
    4d22:	78 85       	ldd	r23, Y+8	; 0x08
    4d24:	89 85       	ldd	r24, Y+9	; 0x09
    4d26:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d28:	20 e0       	ldi	r18, 0x00	; 0
    4d2a:	30 e0       	ldi	r19, 0x00	; 0
    4d2c:	40 e8       	ldi	r20, 0x80	; 128
    4d2e:	5f e3       	ldi	r21, 0x3F	; 63
    4d30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d34:	88 23       	and	r24, r24
    4d36:	2c f4       	brge	.+10     	; 0x4d42 <main+0x1934>
		__ticks = 1;
    4d38:	81 e0       	ldi	r24, 0x01	; 1
    4d3a:	90 e0       	ldi	r25, 0x00	; 0
    4d3c:	9e 83       	std	Y+6, r25	; 0x06
    4d3e:	8d 83       	std	Y+5, r24	; 0x05
    4d40:	3f c0       	rjmp	.+126    	; 0x4dc0 <main+0x19b2>
	else if (__tmp > 65535)
    4d42:	6f 81       	ldd	r22, Y+7	; 0x07
    4d44:	78 85       	ldd	r23, Y+8	; 0x08
    4d46:	89 85       	ldd	r24, Y+9	; 0x09
    4d48:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d4a:	20 e0       	ldi	r18, 0x00	; 0
    4d4c:	3f ef       	ldi	r19, 0xFF	; 255
    4d4e:	4f e7       	ldi	r20, 0x7F	; 127
    4d50:	57 e4       	ldi	r21, 0x47	; 71
    4d52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d56:	18 16       	cp	r1, r24
    4d58:	4c f5       	brge	.+82     	; 0x4dac <main+0x199e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d60:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d62:	20 e0       	ldi	r18, 0x00	; 0
    4d64:	30 e0       	ldi	r19, 0x00	; 0
    4d66:	40 e2       	ldi	r20, 0x20	; 32
    4d68:	51 e4       	ldi	r21, 0x41	; 65
    4d6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d6e:	dc 01       	movw	r26, r24
    4d70:	cb 01       	movw	r24, r22
    4d72:	bc 01       	movw	r22, r24
    4d74:	cd 01       	movw	r24, r26
    4d76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d7a:	dc 01       	movw	r26, r24
    4d7c:	cb 01       	movw	r24, r22
    4d7e:	9e 83       	std	Y+6, r25	; 0x06
    4d80:	8d 83       	std	Y+5, r24	; 0x05
    4d82:	0f c0       	rjmp	.+30     	; 0x4da2 <main+0x1994>
    4d84:	80 e9       	ldi	r24, 0x90	; 144
    4d86:	91 e0       	ldi	r25, 0x01	; 1
    4d88:	9c 83       	std	Y+4, r25	; 0x04
    4d8a:	8b 83       	std	Y+3, r24	; 0x03
    4d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    4d8e:	9c 81       	ldd	r25, Y+4	; 0x04
    4d90:	01 97       	sbiw	r24, 0x01	; 1
    4d92:	f1 f7       	brne	.-4      	; 0x4d90 <main+0x1982>
    4d94:	9c 83       	std	Y+4, r25	; 0x04
    4d96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d98:	8d 81       	ldd	r24, Y+5	; 0x05
    4d9a:	9e 81       	ldd	r25, Y+6	; 0x06
    4d9c:	01 97       	sbiw	r24, 0x01	; 1
    4d9e:	9e 83       	std	Y+6, r25	; 0x06
    4da0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4da2:	8d 81       	ldd	r24, Y+5	; 0x05
    4da4:	9e 81       	ldd	r25, Y+6	; 0x06
    4da6:	00 97       	sbiw	r24, 0x00	; 0
    4da8:	69 f7       	brne	.-38     	; 0x4d84 <main+0x1976>
    4daa:	14 c0       	rjmp	.+40     	; 0x4dd4 <main+0x19c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dac:	6f 81       	ldd	r22, Y+7	; 0x07
    4dae:	78 85       	ldd	r23, Y+8	; 0x08
    4db0:	89 85       	ldd	r24, Y+9	; 0x09
    4db2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4db4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4db8:	dc 01       	movw	r26, r24
    4dba:	cb 01       	movw	r24, r22
    4dbc:	9e 83       	std	Y+6, r25	; 0x06
    4dbe:	8d 83       	std	Y+5, r24	; 0x05
    4dc0:	8d 81       	ldd	r24, Y+5	; 0x05
    4dc2:	9e 81       	ldd	r25, Y+6	; 0x06
    4dc4:	9a 83       	std	Y+2, r25	; 0x02
    4dc6:	89 83       	std	Y+1, r24	; 0x01
    4dc8:	89 81       	ldd	r24, Y+1	; 0x01
    4dca:	9a 81       	ldd	r25, Y+2	; 0x02
    4dcc:	01 97       	sbiw	r24, 0x01	; 1
    4dce:	f1 f7       	brne	.-4      	; 0x4dcc <main+0x19be>
    4dd0:	9a 83       	std	Y+2, r25	; 0x02
    4dd2:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			return 0;
    4dd4:	80 e0       	ldi	r24, 0x00	; 0
    4dd6:	90 e0       	ldi	r25, 0x00	; 0
		}
	}

	return 0;
}
    4dd8:	c9 51       	subi	r28, 0x19	; 25
    4dda:	df 4f       	sbci	r29, 0xFF	; 255
    4ddc:	0f b6       	in	r0, 0x3f	; 63
    4dde:	f8 94       	cli
    4de0:	de bf       	out	0x3e, r29	; 62
    4de2:	0f be       	out	0x3f, r0	; 63
    4de4:	cd bf       	out	0x3d, r28	; 61
    4de6:	cf 91       	pop	r28
    4de8:	df 91       	pop	r29
    4dea:	1f 91       	pop	r17
    4dec:	0f 91       	pop	r16
    4dee:	08 95       	ret

00004df0 <__udivmodhi4>:
    4df0:	aa 1b       	sub	r26, r26
    4df2:	bb 1b       	sub	r27, r27
    4df4:	51 e1       	ldi	r21, 0x11	; 17
    4df6:	07 c0       	rjmp	.+14     	; 0x4e06 <__udivmodhi4_ep>

00004df8 <__udivmodhi4_loop>:
    4df8:	aa 1f       	adc	r26, r26
    4dfa:	bb 1f       	adc	r27, r27
    4dfc:	a6 17       	cp	r26, r22
    4dfe:	b7 07       	cpc	r27, r23
    4e00:	10 f0       	brcs	.+4      	; 0x4e06 <__udivmodhi4_ep>
    4e02:	a6 1b       	sub	r26, r22
    4e04:	b7 0b       	sbc	r27, r23

00004e06 <__udivmodhi4_ep>:
    4e06:	88 1f       	adc	r24, r24
    4e08:	99 1f       	adc	r25, r25
    4e0a:	5a 95       	dec	r21
    4e0c:	a9 f7       	brne	.-22     	; 0x4df8 <__udivmodhi4_loop>
    4e0e:	80 95       	com	r24
    4e10:	90 95       	com	r25
    4e12:	bc 01       	movw	r22, r24
    4e14:	cd 01       	movw	r24, r26
    4e16:	08 95       	ret

00004e18 <__prologue_saves__>:
    4e18:	2f 92       	push	r2
    4e1a:	3f 92       	push	r3
    4e1c:	4f 92       	push	r4
    4e1e:	5f 92       	push	r5
    4e20:	6f 92       	push	r6
    4e22:	7f 92       	push	r7
    4e24:	8f 92       	push	r8
    4e26:	9f 92       	push	r9
    4e28:	af 92       	push	r10
    4e2a:	bf 92       	push	r11
    4e2c:	cf 92       	push	r12
    4e2e:	df 92       	push	r13
    4e30:	ef 92       	push	r14
    4e32:	ff 92       	push	r15
    4e34:	0f 93       	push	r16
    4e36:	1f 93       	push	r17
    4e38:	cf 93       	push	r28
    4e3a:	df 93       	push	r29
    4e3c:	cd b7       	in	r28, 0x3d	; 61
    4e3e:	de b7       	in	r29, 0x3e	; 62
    4e40:	ca 1b       	sub	r28, r26
    4e42:	db 0b       	sbc	r29, r27
    4e44:	0f b6       	in	r0, 0x3f	; 63
    4e46:	f8 94       	cli
    4e48:	de bf       	out	0x3e, r29	; 62
    4e4a:	0f be       	out	0x3f, r0	; 63
    4e4c:	cd bf       	out	0x3d, r28	; 61
    4e4e:	09 94       	ijmp

00004e50 <__epilogue_restores__>:
    4e50:	2a 88       	ldd	r2, Y+18	; 0x12
    4e52:	39 88       	ldd	r3, Y+17	; 0x11
    4e54:	48 88       	ldd	r4, Y+16	; 0x10
    4e56:	5f 84       	ldd	r5, Y+15	; 0x0f
    4e58:	6e 84       	ldd	r6, Y+14	; 0x0e
    4e5a:	7d 84       	ldd	r7, Y+13	; 0x0d
    4e5c:	8c 84       	ldd	r8, Y+12	; 0x0c
    4e5e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4e60:	aa 84       	ldd	r10, Y+10	; 0x0a
    4e62:	b9 84       	ldd	r11, Y+9	; 0x09
    4e64:	c8 84       	ldd	r12, Y+8	; 0x08
    4e66:	df 80       	ldd	r13, Y+7	; 0x07
    4e68:	ee 80       	ldd	r14, Y+6	; 0x06
    4e6a:	fd 80       	ldd	r15, Y+5	; 0x05
    4e6c:	0c 81       	ldd	r16, Y+4	; 0x04
    4e6e:	1b 81       	ldd	r17, Y+3	; 0x03
    4e70:	aa 81       	ldd	r26, Y+2	; 0x02
    4e72:	b9 81       	ldd	r27, Y+1	; 0x01
    4e74:	ce 0f       	add	r28, r30
    4e76:	d1 1d       	adc	r29, r1
    4e78:	0f b6       	in	r0, 0x3f	; 63
    4e7a:	f8 94       	cli
    4e7c:	de bf       	out	0x3e, r29	; 62
    4e7e:	0f be       	out	0x3f, r0	; 63
    4e80:	cd bf       	out	0x3d, r28	; 61
    4e82:	ed 01       	movw	r28, r26
    4e84:	08 95       	ret

00004e86 <memset>:
    4e86:	dc 01       	movw	r26, r24
    4e88:	01 c0       	rjmp	.+2      	; 0x4e8c <memset+0x6>
    4e8a:	6d 93       	st	X+, r22
    4e8c:	41 50       	subi	r20, 0x01	; 1
    4e8e:	50 40       	sbci	r21, 0x00	; 0
    4e90:	e0 f7       	brcc	.-8      	; 0x4e8a <memset+0x4>
    4e92:	08 95       	ret

00004e94 <strcmp>:
    4e94:	fb 01       	movw	r30, r22
    4e96:	dc 01       	movw	r26, r24
    4e98:	8d 91       	ld	r24, X+
    4e9a:	01 90       	ld	r0, Z+
    4e9c:	80 19       	sub	r24, r0
    4e9e:	01 10       	cpse	r0, r1
    4ea0:	d9 f3       	breq	.-10     	; 0x4e98 <strcmp+0x4>
    4ea2:	99 0b       	sbc	r25, r25
    4ea4:	08 95       	ret

00004ea6 <_exit>:
    4ea6:	f8 94       	cli

00004ea8 <__stop_program>:
    4ea8:	ff cf       	rjmp	.-2      	; 0x4ea8 <__stop_program>
