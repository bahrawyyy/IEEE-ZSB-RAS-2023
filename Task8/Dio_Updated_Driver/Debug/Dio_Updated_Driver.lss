
Dio_Updated_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000dea  00000e5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000f0c  00000000  00000000  00000e70  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000812  00000000  00000000  00001d7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ee       	ldi	r30, 0xEA	; 234
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 a3 06 	call	0xd46	; 0xd46 <main>
  7a:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_ES_tSetPinDirection>:
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	00 d0       	rcall	.+0      	; 0x88 <DIO_ES_tSetPinDirection+0x6>
  88:	00 d0       	rcall	.+0      	; 0x8a <DIO_ES_tSetPinDirection+0x8>
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
  8e:	89 83       	std	Y+1, r24	; 0x01
  90:	6a 83       	std	Y+2, r22	; 0x02
  92:	4b 83       	std	Y+3, r20	; 0x03
  94:	8a 81       	ldd	r24, Y+2	; 0x02
  96:	88 30       	cpi	r24, 0x08	; 8
  98:	18 f0       	brcs	.+6      	; 0xa0 <DIO_ES_tSetPinDirection+0x1e>
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	8c 83       	std	Y+4, r24	; 0x04
  9e:	d8 c0       	rjmp	.+432    	; 0x250 <DIO_ES_tSetPinDirection+0x1ce>
  a0:	89 81       	ldd	r24, Y+1	; 0x01
  a2:	88 23       	and	r24, r24
  a4:	91 f5       	brne	.+100    	; 0x10a <DIO_ES_tSetPinDirection+0x88>
  a6:	8b 81       	ldd	r24, Y+3	; 0x03
  a8:	81 30       	cpi	r24, 0x01	; 1
  aa:	a1 f4       	brne	.+40     	; 0xd4 <DIO_ES_tSetPinDirection+0x52>
  ac:	aa e3       	ldi	r26, 0x3A	; 58
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	ea e3       	ldi	r30, 0x3A	; 58
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	48 2f       	mov	r20, r24
  b8:	8a 81       	ldd	r24, Y+2	; 0x02
  ba:	28 2f       	mov	r18, r24
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	02 2e       	mov	r0, r18
  c4:	02 c0       	rjmp	.+4      	; 0xca <DIO_ES_tSetPinDirection+0x48>
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	0a 94       	dec	r0
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <DIO_ES_tSetPinDirection+0x44>
  ce:	84 2b       	or	r24, r20
  d0:	8c 93       	st	X, r24
  d2:	bd c0       	rjmp	.+378    	; 0x24e <DIO_ES_tSetPinDirection+0x1cc>
  d4:	8b 81       	ldd	r24, Y+3	; 0x03
  d6:	88 23       	and	r24, r24
  d8:	a9 f4       	brne	.+42     	; 0x104 <DIO_ES_tSetPinDirection+0x82>
  da:	aa e3       	ldi	r26, 0x3A	; 58
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	ea e3       	ldi	r30, 0x3A	; 58
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	48 2f       	mov	r20, r24
  e6:	8a 81       	ldd	r24, Y+2	; 0x02
  e8:	28 2f       	mov	r18, r24
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	02 2e       	mov	r0, r18
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_ES_tSetPinDirection+0x76>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_ES_tSetPinDirection+0x72>
  fc:	80 95       	com	r24
  fe:	84 23       	and	r24, r20
 100:	8c 93       	st	X, r24
 102:	a5 c0       	rjmp	.+330    	; 0x24e <DIO_ES_tSetPinDirection+0x1cc>
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	8c 83       	std	Y+4, r24	; 0x04
 108:	a3 c0       	rjmp	.+326    	; 0x250 <DIO_ES_tSetPinDirection+0x1ce>
 10a:	89 81       	ldd	r24, Y+1	; 0x01
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	91 f5       	brne	.+100    	; 0x174 <DIO_ES_tSetPinDirection+0xf2>
 110:	8b 81       	ldd	r24, Y+3	; 0x03
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	a1 f4       	brne	.+40     	; 0x13e <DIO_ES_tSetPinDirection+0xbc>
 116:	a7 e3       	ldi	r26, 0x37	; 55
 118:	b0 e0       	ldi	r27, 0x00	; 0
 11a:	e7 e3       	ldi	r30, 0x37	; 55
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	48 2f       	mov	r20, r24
 122:	8a 81       	ldd	r24, Y+2	; 0x02
 124:	28 2f       	mov	r18, r24
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	02 2e       	mov	r0, r18
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_ES_tSetPinDirection+0xb2>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	0a 94       	dec	r0
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_ES_tSetPinDirection+0xae>
 138:	84 2b       	or	r24, r20
 13a:	8c 93       	st	X, r24
 13c:	88 c0       	rjmp	.+272    	; 0x24e <DIO_ES_tSetPinDirection+0x1cc>
 13e:	8b 81       	ldd	r24, Y+3	; 0x03
 140:	88 23       	and	r24, r24
 142:	a9 f4       	brne	.+42     	; 0x16e <DIO_ES_tSetPinDirection+0xec>
 144:	a7 e3       	ldi	r26, 0x37	; 55
 146:	b0 e0       	ldi	r27, 0x00	; 0
 148:	e7 e3       	ldi	r30, 0x37	; 55
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	48 2f       	mov	r20, r24
 150:	8a 81       	ldd	r24, Y+2	; 0x02
 152:	28 2f       	mov	r18, r24
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 2e       	mov	r0, r18
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_ES_tSetPinDirection+0xe0>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	0a 94       	dec	r0
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_ES_tSetPinDirection+0xdc>
 166:	80 95       	com	r24
 168:	84 23       	and	r24, r20
 16a:	8c 93       	st	X, r24
 16c:	70 c0       	rjmp	.+224    	; 0x24e <DIO_ES_tSetPinDirection+0x1cc>
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	8c 83       	std	Y+4, r24	; 0x04
 172:	6e c0       	rjmp	.+220    	; 0x250 <DIO_ES_tSetPinDirection+0x1ce>
 174:	89 81       	ldd	r24, Y+1	; 0x01
 176:	82 30       	cpi	r24, 0x02	; 2
 178:	91 f5       	brne	.+100    	; 0x1de <DIO_ES_tSetPinDirection+0x15c>
 17a:	8b 81       	ldd	r24, Y+3	; 0x03
 17c:	81 30       	cpi	r24, 0x01	; 1
 17e:	a1 f4       	brne	.+40     	; 0x1a8 <DIO_ES_tSetPinDirection+0x126>
 180:	a4 e3       	ldi	r26, 0x34	; 52
 182:	b0 e0       	ldi	r27, 0x00	; 0
 184:	e4 e3       	ldi	r30, 0x34	; 52
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	48 2f       	mov	r20, r24
 18c:	8a 81       	ldd	r24, Y+2	; 0x02
 18e:	28 2f       	mov	r18, r24
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	02 2e       	mov	r0, r18
 198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_ES_tSetPinDirection+0x11c>
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	0a 94       	dec	r0
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_ES_tSetPinDirection+0x118>
 1a2:	84 2b       	or	r24, r20
 1a4:	8c 93       	st	X, r24
 1a6:	53 c0       	rjmp	.+166    	; 0x24e <DIO_ES_tSetPinDirection+0x1cc>
 1a8:	8b 81       	ldd	r24, Y+3	; 0x03
 1aa:	88 23       	and	r24, r24
 1ac:	a9 f4       	brne	.+42     	; 0x1d8 <DIO_ES_tSetPinDirection+0x156>
 1ae:	a4 e3       	ldi	r26, 0x34	; 52
 1b0:	b0 e0       	ldi	r27, 0x00	; 0
 1b2:	e4 e3       	ldi	r30, 0x34	; 52
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	48 2f       	mov	r20, r24
 1ba:	8a 81       	ldd	r24, Y+2	; 0x02
 1bc:	28 2f       	mov	r18, r24
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 2e       	mov	r0, r18
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_ES_tSetPinDirection+0x14a>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	0a 94       	dec	r0
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_ES_tSetPinDirection+0x146>
 1d0:	80 95       	com	r24
 1d2:	84 23       	and	r24, r20
 1d4:	8c 93       	st	X, r24
 1d6:	3b c0       	rjmp	.+118    	; 0x24e <DIO_ES_tSetPinDirection+0x1cc>
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	8c 83       	std	Y+4, r24	; 0x04
 1dc:	39 c0       	rjmp	.+114    	; 0x250 <DIO_ES_tSetPinDirection+0x1ce>
 1de:	89 81       	ldd	r24, Y+1	; 0x01
 1e0:	83 30       	cpi	r24, 0x03	; 3
 1e2:	91 f5       	brne	.+100    	; 0x248 <DIO_ES_tSetPinDirection+0x1c6>
 1e4:	8b 81       	ldd	r24, Y+3	; 0x03
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	a1 f4       	brne	.+40     	; 0x212 <DIO_ES_tSetPinDirection+0x190>
 1ea:	a1 e3       	ldi	r26, 0x31	; 49
 1ec:	b0 e0       	ldi	r27, 0x00	; 0
 1ee:	e1 e3       	ldi	r30, 0x31	; 49
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	48 2f       	mov	r20, r24
 1f6:	8a 81       	ldd	r24, Y+2	; 0x02
 1f8:	28 2f       	mov	r18, r24
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 2e       	mov	r0, r18
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_ES_tSetPinDirection+0x186>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	0a 94       	dec	r0
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_ES_tSetPinDirection+0x182>
 20c:	84 2b       	or	r24, r20
 20e:	8c 93       	st	X, r24
 210:	1e c0       	rjmp	.+60     	; 0x24e <DIO_ES_tSetPinDirection+0x1cc>
 212:	8b 81       	ldd	r24, Y+3	; 0x03
 214:	88 23       	and	r24, r24
 216:	a9 f4       	brne	.+42     	; 0x242 <DIO_ES_tSetPinDirection+0x1c0>
 218:	a1 e3       	ldi	r26, 0x31	; 49
 21a:	b0 e0       	ldi	r27, 0x00	; 0
 21c:	e1 e3       	ldi	r30, 0x31	; 49
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	48 2f       	mov	r20, r24
 224:	8a 81       	ldd	r24, Y+2	; 0x02
 226:	28 2f       	mov	r18, r24
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 2e       	mov	r0, r18
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_ES_tSetPinDirection+0x1b4>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	0a 94       	dec	r0
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_ES_tSetPinDirection+0x1b0>
 23a:	80 95       	com	r24
 23c:	84 23       	and	r24, r20
 23e:	8c 93       	st	X, r24
 240:	06 c0       	rjmp	.+12     	; 0x24e <DIO_ES_tSetPinDirection+0x1cc>
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	8c 83       	std	Y+4, r24	; 0x04
 246:	04 c0       	rjmp	.+8      	; 0x250 <DIO_ES_tSetPinDirection+0x1ce>
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	8c 83       	std	Y+4, r24	; 0x04
 24c:	01 c0       	rjmp	.+2      	; 0x250 <DIO_ES_tSetPinDirection+0x1ce>
 24e:	1c 82       	std	Y+4, r1	; 0x04
 250:	8c 81       	ldd	r24, Y+4	; 0x04
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	0f 90       	pop	r0
 258:	0f 90       	pop	r0
 25a:	cf 91       	pop	r28
 25c:	df 91       	pop	r29
 25e:	08 95       	ret

00000260 <DIO_ES_tSetPinValue>:
 * DIO_ES_tSetPinValue is used to set pin value
 * ( LOW or HIGH )
 */

ES_t DIO_ES_tSetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type copy_u8_PinValue)
{
 260:	df 93       	push	r29
 262:	cf 93       	push	r28
 264:	00 d0       	rcall	.+0      	; 0x266 <DIO_ES_tSetPinValue+0x6>
 266:	00 d0       	rcall	.+0      	; 0x268 <DIO_ES_tSetPinValue+0x8>
 268:	cd b7       	in	r28, 0x3d	; 61
 26a:	de b7       	in	r29, 0x3e	; 62
 26c:	89 83       	std	Y+1, r24	; 0x01
 26e:	6a 83       	std	Y+2, r22	; 0x02
 270:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
 272:	8a 81       	ldd	r24, Y+2	; 0x02
 274:	88 30       	cpi	r24, 0x08	; 8
 276:	18 f0       	brcs	.+6      	; 0x27e <DIO_ES_tSetPinValue+0x1e>
		return ES_NOT_OK;
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	8c 83       	std	Y+4, r24	; 0x04
 27c:	d8 c0       	rjmp	.+432    	; 0x42e <DIO_ES_tSetPinValue+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
 27e:	89 81       	ldd	r24, Y+1	; 0x01
 280:	88 23       	and	r24, r24
 282:	91 f5       	brne	.+100    	; 0x2e8 <DIO_ES_tSetPinValue+0x88>
		if(copy_u8_PinValue == HIGH){
 284:	8b 81       	ldd	r24, Y+3	; 0x03
 286:	81 30       	cpi	r24, 0x01	; 1
 288:	a1 f4       	brne	.+40     	; 0x2b2 <DIO_ES_tSetPinValue+0x52>
			SET_BIT(PORTA,copy_u8_PinId);
 28a:	ab e3       	ldi	r26, 0x3B	; 59
 28c:	b0 e0       	ldi	r27, 0x00	; 0
 28e:	eb e3       	ldi	r30, 0x3B	; 59
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	48 2f       	mov	r20, r24
 296:	8a 81       	ldd	r24, Y+2	; 0x02
 298:	28 2f       	mov	r18, r24
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	02 2e       	mov	r0, r18
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_ES_tSetPinValue+0x48>
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	0a 94       	dec	r0
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_ES_tSetPinValue+0x44>
 2ac:	84 2b       	or	r24, r20
 2ae:	8c 93       	st	X, r24
 2b0:	bd c0       	rjmp	.+378    	; 0x42c <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
 2b2:	8b 81       	ldd	r24, Y+3	; 0x03
 2b4:	88 23       	and	r24, r24
 2b6:	a9 f4       	brne	.+42     	; 0x2e2 <DIO_ES_tSetPinValue+0x82>
			CLR_BIT(PORTA,copy_u8_PinId);
 2b8:	ab e3       	ldi	r26, 0x3B	; 59
 2ba:	b0 e0       	ldi	r27, 0x00	; 0
 2bc:	eb e3       	ldi	r30, 0x3B	; 59
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	48 2f       	mov	r20, r24
 2c4:	8a 81       	ldd	r24, Y+2	; 0x02
 2c6:	28 2f       	mov	r18, r24
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	02 2e       	mov	r0, r18
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_ES_tSetPinValue+0x76>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	0a 94       	dec	r0
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_ES_tSetPinValue+0x72>
 2da:	80 95       	com	r24
 2dc:	84 23       	and	r24, r20
 2de:	8c 93       	st	X, r24
 2e0:	a5 c0       	rjmp	.+330    	; 0x42c <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	8c 83       	std	Y+4, r24	; 0x04
 2e6:	a3 c0       	rjmp	.+326    	; 0x42e <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
 2e8:	89 81       	ldd	r24, Y+1	; 0x01
 2ea:	81 30       	cpi	r24, 0x01	; 1
 2ec:	91 f5       	brne	.+100    	; 0x352 <DIO_ES_tSetPinValue+0xf2>
		if(copy_u8_PinValue == HIGH){
 2ee:	8b 81       	ldd	r24, Y+3	; 0x03
 2f0:	81 30       	cpi	r24, 0x01	; 1
 2f2:	a1 f4       	brne	.+40     	; 0x31c <DIO_ES_tSetPinValue+0xbc>
			SET_BIT(PORTB,copy_u8_PinId);
 2f4:	a8 e3       	ldi	r26, 0x38	; 56
 2f6:	b0 e0       	ldi	r27, 0x00	; 0
 2f8:	e8 e3       	ldi	r30, 0x38	; 56
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
 2fe:	48 2f       	mov	r20, r24
 300:	8a 81       	ldd	r24, Y+2	; 0x02
 302:	28 2f       	mov	r18, r24
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	02 2e       	mov	r0, r18
 30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_ES_tSetPinValue+0xb2>
 30e:	88 0f       	add	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	0a 94       	dec	r0
 314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_ES_tSetPinValue+0xae>
 316:	84 2b       	or	r24, r20
 318:	8c 93       	st	X, r24
 31a:	88 c0       	rjmp	.+272    	; 0x42c <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
 31c:	8b 81       	ldd	r24, Y+3	; 0x03
 31e:	88 23       	and	r24, r24
 320:	a9 f4       	brne	.+42     	; 0x34c <DIO_ES_tSetPinValue+0xec>
			CLR_BIT(PORTB,copy_u8_PinId);
 322:	a8 e3       	ldi	r26, 0x38	; 56
 324:	b0 e0       	ldi	r27, 0x00	; 0
 326:	e8 e3       	ldi	r30, 0x38	; 56
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	48 2f       	mov	r20, r24
 32e:	8a 81       	ldd	r24, Y+2	; 0x02
 330:	28 2f       	mov	r18, r24
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	02 2e       	mov	r0, r18
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_ES_tSetPinValue+0xe0>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	0a 94       	dec	r0
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_ES_tSetPinValue+0xdc>
 344:	80 95       	com	r24
 346:	84 23       	and	r24, r20
 348:	8c 93       	st	X, r24
 34a:	70 c0       	rjmp	.+224    	; 0x42c <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	8c 83       	std	Y+4, r24	; 0x04
 350:	6e c0       	rjmp	.+220    	; 0x42e <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
 352:	89 81       	ldd	r24, Y+1	; 0x01
 354:	82 30       	cpi	r24, 0x02	; 2
 356:	91 f5       	brne	.+100    	; 0x3bc <DIO_ES_tSetPinValue+0x15c>
		if(copy_u8_PinValue == HIGH){
 358:	8b 81       	ldd	r24, Y+3	; 0x03
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	a1 f4       	brne	.+40     	; 0x386 <DIO_ES_tSetPinValue+0x126>
			SET_BIT(PORTC,copy_u8_PinId);
 35e:	a5 e3       	ldi	r26, 0x35	; 53
 360:	b0 e0       	ldi	r27, 0x00	; 0
 362:	e5 e3       	ldi	r30, 0x35	; 53
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	80 81       	ld	r24, Z
 368:	48 2f       	mov	r20, r24
 36a:	8a 81       	ldd	r24, Y+2	; 0x02
 36c:	28 2f       	mov	r18, r24
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	02 2e       	mov	r0, r18
 376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_ES_tSetPinValue+0x11c>
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	0a 94       	dec	r0
 37e:	e2 f7       	brpl	.-8      	; 0x378 <DIO_ES_tSetPinValue+0x118>
 380:	84 2b       	or	r24, r20
 382:	8c 93       	st	X, r24
 384:	53 c0       	rjmp	.+166    	; 0x42c <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
 386:	8b 81       	ldd	r24, Y+3	; 0x03
 388:	88 23       	and	r24, r24
 38a:	a9 f4       	brne	.+42     	; 0x3b6 <DIO_ES_tSetPinValue+0x156>
			CLR_BIT(PORTC,copy_u8_PinId);
 38c:	a5 e3       	ldi	r26, 0x35	; 53
 38e:	b0 e0       	ldi	r27, 0x00	; 0
 390:	e5 e3       	ldi	r30, 0x35	; 53
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	80 81       	ld	r24, Z
 396:	48 2f       	mov	r20, r24
 398:	8a 81       	ldd	r24, Y+2	; 0x02
 39a:	28 2f       	mov	r18, r24
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	02 2e       	mov	r0, r18
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_ES_tSetPinValue+0x14a>
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	0a 94       	dec	r0
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_ES_tSetPinValue+0x146>
 3ae:	80 95       	com	r24
 3b0:	84 23       	and	r24, r20
 3b2:	8c 93       	st	X, r24
 3b4:	3b c0       	rjmp	.+118    	; 0x42c <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	8c 83       	std	Y+4, r24	; 0x04
 3ba:	39 c0       	rjmp	.+114    	; 0x42e <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
 3bc:	89 81       	ldd	r24, Y+1	; 0x01
 3be:	83 30       	cpi	r24, 0x03	; 3
 3c0:	91 f5       	brne	.+100    	; 0x426 <DIO_ES_tSetPinValue+0x1c6>
		if(copy_u8_PinValue == HIGH){
 3c2:	8b 81       	ldd	r24, Y+3	; 0x03
 3c4:	81 30       	cpi	r24, 0x01	; 1
 3c6:	a1 f4       	brne	.+40     	; 0x3f0 <DIO_ES_tSetPinValue+0x190>
			SET_BIT(PORTD,copy_u8_PinId);
 3c8:	a2 e3       	ldi	r26, 0x32	; 50
 3ca:	b0 e0       	ldi	r27, 0x00	; 0
 3cc:	e2 e3       	ldi	r30, 0x32	; 50
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	80 81       	ld	r24, Z
 3d2:	48 2f       	mov	r20, r24
 3d4:	8a 81       	ldd	r24, Y+2	; 0x02
 3d6:	28 2f       	mov	r18, r24
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	02 2e       	mov	r0, r18
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_ES_tSetPinValue+0x186>
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	0a 94       	dec	r0
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_ES_tSetPinValue+0x182>
 3ea:	84 2b       	or	r24, r20
 3ec:	8c 93       	st	X, r24
 3ee:	1e c0       	rjmp	.+60     	; 0x42c <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
 3f0:	8b 81       	ldd	r24, Y+3	; 0x03
 3f2:	88 23       	and	r24, r24
 3f4:	a9 f4       	brne	.+42     	; 0x420 <DIO_ES_tSetPinValue+0x1c0>
			CLR_BIT(PORTD,copy_u8_PinId);
 3f6:	a2 e3       	ldi	r26, 0x32	; 50
 3f8:	b0 e0       	ldi	r27, 0x00	; 0
 3fa:	e2 e3       	ldi	r30, 0x32	; 50
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	80 81       	ld	r24, Z
 400:	48 2f       	mov	r20, r24
 402:	8a 81       	ldd	r24, Y+2	; 0x02
 404:	28 2f       	mov	r18, r24
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	02 2e       	mov	r0, r18
 40e:	02 c0       	rjmp	.+4      	; 0x414 <DIO_ES_tSetPinValue+0x1b4>
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	0a 94       	dec	r0
 416:	e2 f7       	brpl	.-8      	; 0x410 <DIO_ES_tSetPinValue+0x1b0>
 418:	80 95       	com	r24
 41a:	84 23       	and	r24, r20
 41c:	8c 93       	st	X, r24
 41e:	06 c0       	rjmp	.+12     	; 0x42c <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	8c 83       	std	Y+4, r24	; 0x04
 424:	04 c0       	rjmp	.+8      	; 0x42e <DIO_ES_tSetPinValue+0x1ce>
		}
	}else{
		return ES_NOT_OK;
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	8c 83       	std	Y+4, r24	; 0x04
 42a:	01 c0       	rjmp	.+2      	; 0x42e <DIO_ES_tSetPinValue+0x1ce>
	}
	return ES_OK;
 42c:	1c 82       	std	Y+4, r1	; 0x04
 42e:	8c 81       	ldd	r24, Y+4	; 0x04
}
 430:	0f 90       	pop	r0
 432:	0f 90       	pop	r0
 434:	0f 90       	pop	r0
 436:	0f 90       	pop	r0
 438:	cf 91       	pop	r28
 43a:	df 91       	pop	r29
 43c:	08 95       	ret

0000043e <DIO_ES_tGetPinValue>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tGetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type* copy_pu8_PinValue)
{
 43e:	df 93       	push	r29
 440:	cf 93       	push	r28
 442:	00 d0       	rcall	.+0      	; 0x444 <DIO_ES_tGetPinValue+0x6>
 444:	00 d0       	rcall	.+0      	; 0x446 <DIO_ES_tGetPinValue+0x8>
 446:	0f 92       	push	r0
 448:	cd b7       	in	r28, 0x3d	; 61
 44a:	de b7       	in	r29, 0x3e	; 62
 44c:	89 83       	std	Y+1, r24	; 0x01
 44e:	6a 83       	std	Y+2, r22	; 0x02
 450:	5c 83       	std	Y+4, r21	; 0x04
 452:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
 454:	8a 81       	ldd	r24, Y+2	; 0x02
 456:	88 30       	cpi	r24, 0x08	; 8
 458:	18 f0       	brcs	.+6      	; 0x460 <DIO_ES_tGetPinValue+0x22>
		return ES_NOT_OK;
 45a:	41 e0       	ldi	r20, 0x01	; 1
 45c:	4d 83       	std	Y+5, r20	; 0x05
 45e:	60 c0       	rjmp	.+192    	; 0x520 <DIO_ES_tGetPinValue+0xe2>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
 460:	89 81       	ldd	r24, Y+1	; 0x01
 462:	88 23       	and	r24, r24
 464:	a1 f4       	brne	.+40     	; 0x48e <DIO_ES_tGetPinValue+0x50>
		*copy_pu8_PinValue = GET_BIT(PINA,copy_u8_PinId);
 466:	e9 e3       	ldi	r30, 0x39	; 57
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	80 81       	ld	r24, Z
 46c:	28 2f       	mov	r18, r24
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	8a 81       	ldd	r24, Y+2	; 0x02
 472:	88 2f       	mov	r24, r24
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	a9 01       	movw	r20, r18
 478:	02 c0       	rjmp	.+4      	; 0x47e <DIO_ES_tGetPinValue+0x40>
 47a:	55 95       	asr	r21
 47c:	47 95       	ror	r20
 47e:	8a 95       	dec	r24
 480:	e2 f7       	brpl	.-8      	; 0x47a <DIO_ES_tGetPinValue+0x3c>
 482:	ca 01       	movw	r24, r20
 484:	81 70       	andi	r24, 0x01	; 1
 486:	eb 81       	ldd	r30, Y+3	; 0x03
 488:	fc 81       	ldd	r31, Y+4	; 0x04
 48a:	80 83       	st	Z, r24
 48c:	48 c0       	rjmp	.+144    	; 0x51e <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
 48e:	89 81       	ldd	r24, Y+1	; 0x01
 490:	81 30       	cpi	r24, 0x01	; 1
 492:	a1 f4       	brne	.+40     	; 0x4bc <DIO_ES_tGetPinValue+0x7e>
		*copy_pu8_PinValue = GET_BIT(PINB,copy_u8_PinId);
 494:	e6 e3       	ldi	r30, 0x36	; 54
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	80 81       	ld	r24, Z
 49a:	28 2f       	mov	r18, r24
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	8a 81       	ldd	r24, Y+2	; 0x02
 4a0:	88 2f       	mov	r24, r24
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	a9 01       	movw	r20, r18
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <DIO_ES_tGetPinValue+0x6e>
 4a8:	55 95       	asr	r21
 4aa:	47 95       	ror	r20
 4ac:	8a 95       	dec	r24
 4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <DIO_ES_tGetPinValue+0x6a>
 4b0:	ca 01       	movw	r24, r20
 4b2:	81 70       	andi	r24, 0x01	; 1
 4b4:	eb 81       	ldd	r30, Y+3	; 0x03
 4b6:	fc 81       	ldd	r31, Y+4	; 0x04
 4b8:	80 83       	st	Z, r24
 4ba:	31 c0       	rjmp	.+98     	; 0x51e <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
 4bc:	89 81       	ldd	r24, Y+1	; 0x01
 4be:	82 30       	cpi	r24, 0x02	; 2
 4c0:	a1 f4       	brne	.+40     	; 0x4ea <DIO_ES_tGetPinValue+0xac>
		*copy_pu8_PinValue = GET_BIT(PINC,copy_u8_PinId);
 4c2:	e3 e3       	ldi	r30, 0x33	; 51
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	80 81       	ld	r24, Z
 4c8:	28 2f       	mov	r18, r24
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	8a 81       	ldd	r24, Y+2	; 0x02
 4ce:	88 2f       	mov	r24, r24
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	a9 01       	movw	r20, r18
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <DIO_ES_tGetPinValue+0x9c>
 4d6:	55 95       	asr	r21
 4d8:	47 95       	ror	r20
 4da:	8a 95       	dec	r24
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <DIO_ES_tGetPinValue+0x98>
 4de:	ca 01       	movw	r24, r20
 4e0:	81 70       	andi	r24, 0x01	; 1
 4e2:	eb 81       	ldd	r30, Y+3	; 0x03
 4e4:	fc 81       	ldd	r31, Y+4	; 0x04
 4e6:	80 83       	st	Z, r24
 4e8:	1a c0       	rjmp	.+52     	; 0x51e <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
 4ea:	89 81       	ldd	r24, Y+1	; 0x01
 4ec:	83 30       	cpi	r24, 0x03	; 3
 4ee:	a1 f4       	brne	.+40     	; 0x518 <DIO_ES_tGetPinValue+0xda>
		*copy_pu8_PinValue = GET_BIT(PIND,copy_u8_PinId);
 4f0:	e0 e3       	ldi	r30, 0x30	; 48
 4f2:	f0 e0       	ldi	r31, 0x00	; 0
 4f4:	80 81       	ld	r24, Z
 4f6:	28 2f       	mov	r18, r24
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	8a 81       	ldd	r24, Y+2	; 0x02
 4fc:	88 2f       	mov	r24, r24
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	a9 01       	movw	r20, r18
 502:	02 c0       	rjmp	.+4      	; 0x508 <DIO_ES_tGetPinValue+0xca>
 504:	55 95       	asr	r21
 506:	47 95       	ror	r20
 508:	8a 95       	dec	r24
 50a:	e2 f7       	brpl	.-8      	; 0x504 <DIO_ES_tGetPinValue+0xc6>
 50c:	ca 01       	movw	r24, r20
 50e:	81 70       	andi	r24, 0x01	; 1
 510:	eb 81       	ldd	r30, Y+3	; 0x03
 512:	fc 81       	ldd	r31, Y+4	; 0x04
 514:	80 83       	st	Z, r24
 516:	03 c0       	rjmp	.+6      	; 0x51e <DIO_ES_tGetPinValue+0xe0>
	}else{
		return ES_NOT_OK;
 518:	51 e0       	ldi	r21, 0x01	; 1
 51a:	5d 83       	std	Y+5, r21	; 0x05
 51c:	01 c0       	rjmp	.+2      	; 0x520 <DIO_ES_tGetPinValue+0xe2>
	}
	return ES_OK;
 51e:	1d 82       	std	Y+5, r1	; 0x05
 520:	8d 81       	ldd	r24, Y+5	; 0x05
}
 522:	0f 90       	pop	r0
 524:	0f 90       	pop	r0
 526:	0f 90       	pop	r0
 528:	0f 90       	pop	r0
 52a:	0f 90       	pop	r0
 52c:	cf 91       	pop	r28
 52e:	df 91       	pop	r29
 530:	08 95       	ret

00000532 <DIO_ES_tSetPortDirection>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tSetPortDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Dir_Type copy_u8_PortDirection)
{
 532:	df 93       	push	r29
 534:	cf 93       	push	r28
 536:	00 d0       	rcall	.+0      	; 0x538 <DIO_ES_tSetPortDirection+0x6>
 538:	00 d0       	rcall	.+0      	; 0x53a <DIO_ES_tSetPortDirection+0x8>
 53a:	0f 92       	push	r0
 53c:	cd b7       	in	r28, 0x3d	; 61
 53e:	de b7       	in	r29, 0x3e	; 62
 540:	89 83       	std	Y+1, r24	; 0x01
 542:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortDirection != OUTPUT) && (copy_u8_PortDirection != OUTPUT)){
 544:	8a 81       	ldd	r24, Y+2	; 0x02
 546:	81 30       	cpi	r24, 0x01	; 1
 548:	31 f0       	breq	.+12     	; 0x556 <DIO_ES_tSetPortDirection+0x24>
 54a:	8a 81       	ldd	r24, Y+2	; 0x02
 54c:	81 30       	cpi	r24, 0x01	; 1
 54e:	19 f0       	breq	.+6      	; 0x556 <DIO_ES_tSetPortDirection+0x24>
		return ES_NOT_OK;
 550:	21 e0       	ldi	r18, 0x01	; 1
 552:	2d 83       	std	Y+5, r18	; 0x05
 554:	53 c0       	rjmp	.+166    	; 0x5fc <DIO_ES_tSetPortDirection+0xca>
	}
	switch(copy_u8_PortId){
 556:	89 81       	ldd	r24, Y+1	; 0x01
 558:	28 2f       	mov	r18, r24
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	3c 83       	std	Y+4, r19	; 0x04
 55e:	2b 83       	std	Y+3, r18	; 0x03
 560:	8b 81       	ldd	r24, Y+3	; 0x03
 562:	9c 81       	ldd	r25, Y+4	; 0x04
 564:	81 30       	cpi	r24, 0x01	; 1
 566:	91 05       	cpc	r25, r1
 568:	09 f1       	breq	.+66     	; 0x5ac <DIO_ES_tSetPortDirection+0x7a>
 56a:	2b 81       	ldd	r18, Y+3	; 0x03
 56c:	3c 81       	ldd	r19, Y+4	; 0x04
 56e:	22 30       	cpi	r18, 0x02	; 2
 570:	31 05       	cpc	r19, r1
 572:	2c f4       	brge	.+10     	; 0x57e <DIO_ES_tSetPortDirection+0x4c>
 574:	8b 81       	ldd	r24, Y+3	; 0x03
 576:	9c 81       	ldd	r25, Y+4	; 0x04
 578:	00 97       	sbiw	r24, 0x00	; 0
 57a:	61 f0       	breq	.+24     	; 0x594 <DIO_ES_tSetPortDirection+0x62>
 57c:	3b c0       	rjmp	.+118    	; 0x5f4 <DIO_ES_tSetPortDirection+0xc2>
 57e:	2b 81       	ldd	r18, Y+3	; 0x03
 580:	3c 81       	ldd	r19, Y+4	; 0x04
 582:	22 30       	cpi	r18, 0x02	; 2
 584:	31 05       	cpc	r19, r1
 586:	f1 f0       	breq	.+60     	; 0x5c4 <DIO_ES_tSetPortDirection+0x92>
 588:	8b 81       	ldd	r24, Y+3	; 0x03
 58a:	9c 81       	ldd	r25, Y+4	; 0x04
 58c:	83 30       	cpi	r24, 0x03	; 3
 58e:	91 05       	cpc	r25, r1
 590:	29 f1       	breq	.+74     	; 0x5dc <DIO_ES_tSetPortDirection+0xaa>
 592:	30 c0       	rjmp	.+96     	; 0x5f4 <DIO_ES_tSetPortDirection+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortDirection == OUTPUT)
 594:	8a 81       	ldd	r24, Y+2	; 0x02
 596:	81 30       	cpi	r24, 0x01	; 1
 598:	29 f4       	brne	.+10     	; 0x5a4 <DIO_ES_tSetPortDirection+0x72>
			DDRA = 0xff;
 59a:	ea e3       	ldi	r30, 0x3A	; 58
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	8f ef       	ldi	r24, 0xFF	; 255
 5a0:	80 83       	st	Z, r24
 5a2:	2b c0       	rjmp	.+86     	; 0x5fa <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRA = 0x00;
 5a4:	ea e3       	ldi	r30, 0x3A	; 58
 5a6:	f0 e0       	ldi	r31, 0x00	; 0
 5a8:	10 82       	st	Z, r1
 5aa:	27 c0       	rjmp	.+78     	; 0x5fa <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortDirection == OUTPUT)
 5ac:	8a 81       	ldd	r24, Y+2	; 0x02
 5ae:	81 30       	cpi	r24, 0x01	; 1
 5b0:	29 f4       	brne	.+10     	; 0x5bc <DIO_ES_tSetPortDirection+0x8a>
			DDRB = 0xff;
 5b2:	e7 e3       	ldi	r30, 0x37	; 55
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	8f ef       	ldi	r24, 0xFF	; 255
 5b8:	80 83       	st	Z, r24
 5ba:	1f c0       	rjmp	.+62     	; 0x5fa <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRB = 0x00;
 5bc:	e7 e3       	ldi	r30, 0x37	; 55
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	10 82       	st	Z, r1
 5c2:	1b c0       	rjmp	.+54     	; 0x5fa <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortDirection == OUTPUT)
 5c4:	8a 81       	ldd	r24, Y+2	; 0x02
 5c6:	81 30       	cpi	r24, 0x01	; 1
 5c8:	29 f4       	brne	.+10     	; 0x5d4 <DIO_ES_tSetPortDirection+0xa2>
			DDRC = 0xff;
 5ca:	e4 e3       	ldi	r30, 0x34	; 52
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	8f ef       	ldi	r24, 0xFF	; 255
 5d0:	80 83       	st	Z, r24
 5d2:	13 c0       	rjmp	.+38     	; 0x5fa <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRC = 0x00;
 5d4:	e4 e3       	ldi	r30, 0x34	; 52
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	10 82       	st	Z, r1
 5da:	0f c0       	rjmp	.+30     	; 0x5fa <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortDirection == OUTPUT)
 5dc:	8a 81       	ldd	r24, Y+2	; 0x02
 5de:	81 30       	cpi	r24, 0x01	; 1
 5e0:	29 f4       	brne	.+10     	; 0x5ec <DIO_ES_tSetPortDirection+0xba>
			DDRD = 0xff;
 5e2:	e1 e3       	ldi	r30, 0x31	; 49
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	8f ef       	ldi	r24, 0xFF	; 255
 5e8:	80 83       	st	Z, r24
 5ea:	07 c0       	rjmp	.+14     	; 0x5fa <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRD = 0x00;
 5ec:	e1 e3       	ldi	r30, 0x31	; 49
 5ee:	f0 e0       	ldi	r31, 0x00	; 0
 5f0:	10 82       	st	Z, r1
 5f2:	03 c0       	rjmp	.+6      	; 0x5fa <DIO_ES_tSetPortDirection+0xc8>
		break;
	default:
		return ES_NOT_OK;
 5f4:	91 e0       	ldi	r25, 0x01	; 1
 5f6:	9d 83       	std	Y+5, r25	; 0x05
 5f8:	01 c0       	rjmp	.+2      	; 0x5fc <DIO_ES_tSetPortDirection+0xca>
		break;
	}
	return ES_OK;
 5fa:	1d 82       	std	Y+5, r1	; 0x05
 5fc:	8d 81       	ldd	r24, Y+5	; 0x05
}
 5fe:	0f 90       	pop	r0
 600:	0f 90       	pop	r0
 602:	0f 90       	pop	r0
 604:	0f 90       	pop	r0
 606:	0f 90       	pop	r0
 608:	cf 91       	pop	r28
 60a:	df 91       	pop	r29
 60c:	08 95       	ret

0000060e <DIO_ES_tSetPortValue>:



ES_t DIO_ES_tSetPortValue(DIO_U8_Port_Type copy_u8_PortId, u8 copy_u8_PortValue)
{
 60e:	df 93       	push	r29
 610:	cf 93       	push	r28
 612:	00 d0       	rcall	.+0      	; 0x614 <DIO_ES_tSetPortValue+0x6>
 614:	00 d0       	rcall	.+0      	; 0x616 <DIO_ES_tSetPortValue+0x8>
 616:	0f 92       	push	r0
 618:	cd b7       	in	r28, 0x3d	; 61
 61a:	de b7       	in	r29, 0x3e	; 62
 61c:	89 83       	std	Y+1, r24	; 0x01
 61e:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortValue != HIGH) && (copy_u8_PortValue != LOW)){
 620:	8a 81       	ldd	r24, Y+2	; 0x02
 622:	81 30       	cpi	r24, 0x01	; 1
 624:	31 f0       	breq	.+12     	; 0x632 <DIO_ES_tSetPortValue+0x24>
 626:	8a 81       	ldd	r24, Y+2	; 0x02
 628:	88 23       	and	r24, r24
 62a:	19 f0       	breq	.+6      	; 0x632 <DIO_ES_tSetPortValue+0x24>
		return ES_NOT_OK;
 62c:	21 e0       	ldi	r18, 0x01	; 1
 62e:	2d 83       	std	Y+5, r18	; 0x05
 630:	53 c0       	rjmp	.+166    	; 0x6d8 <DIO_ES_tSetPortValue+0xca>
	}
	switch(copy_u8_PortId){
 632:	89 81       	ldd	r24, Y+1	; 0x01
 634:	28 2f       	mov	r18, r24
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	3c 83       	std	Y+4, r19	; 0x04
 63a:	2b 83       	std	Y+3, r18	; 0x03
 63c:	8b 81       	ldd	r24, Y+3	; 0x03
 63e:	9c 81       	ldd	r25, Y+4	; 0x04
 640:	81 30       	cpi	r24, 0x01	; 1
 642:	91 05       	cpc	r25, r1
 644:	09 f1       	breq	.+66     	; 0x688 <DIO_ES_tSetPortValue+0x7a>
 646:	2b 81       	ldd	r18, Y+3	; 0x03
 648:	3c 81       	ldd	r19, Y+4	; 0x04
 64a:	22 30       	cpi	r18, 0x02	; 2
 64c:	31 05       	cpc	r19, r1
 64e:	2c f4       	brge	.+10     	; 0x65a <DIO_ES_tSetPortValue+0x4c>
 650:	8b 81       	ldd	r24, Y+3	; 0x03
 652:	9c 81       	ldd	r25, Y+4	; 0x04
 654:	00 97       	sbiw	r24, 0x00	; 0
 656:	61 f0       	breq	.+24     	; 0x670 <DIO_ES_tSetPortValue+0x62>
 658:	3b c0       	rjmp	.+118    	; 0x6d0 <DIO_ES_tSetPortValue+0xc2>
 65a:	2b 81       	ldd	r18, Y+3	; 0x03
 65c:	3c 81       	ldd	r19, Y+4	; 0x04
 65e:	22 30       	cpi	r18, 0x02	; 2
 660:	31 05       	cpc	r19, r1
 662:	f1 f0       	breq	.+60     	; 0x6a0 <DIO_ES_tSetPortValue+0x92>
 664:	8b 81       	ldd	r24, Y+3	; 0x03
 666:	9c 81       	ldd	r25, Y+4	; 0x04
 668:	83 30       	cpi	r24, 0x03	; 3
 66a:	91 05       	cpc	r25, r1
 66c:	29 f1       	breq	.+74     	; 0x6b8 <DIO_ES_tSetPortValue+0xaa>
 66e:	30 c0       	rjmp	.+96     	; 0x6d0 <DIO_ES_tSetPortValue+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortValue == HIGH)
 670:	8a 81       	ldd	r24, Y+2	; 0x02
 672:	81 30       	cpi	r24, 0x01	; 1
 674:	29 f4       	brne	.+10     	; 0x680 <DIO_ES_tSetPortValue+0x72>
			PORTA = 0xff;
 676:	eb e3       	ldi	r30, 0x3B	; 59
 678:	f0 e0       	ldi	r31, 0x00	; 0
 67a:	8f ef       	ldi	r24, 0xFF	; 255
 67c:	80 83       	st	Z, r24
 67e:	2b c0       	rjmp	.+86     	; 0x6d6 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTA = 0x00;
 680:	eb e3       	ldi	r30, 0x3B	; 59
 682:	f0 e0       	ldi	r31, 0x00	; 0
 684:	10 82       	st	Z, r1
 686:	27 c0       	rjmp	.+78     	; 0x6d6 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortValue == HIGH)
 688:	8a 81       	ldd	r24, Y+2	; 0x02
 68a:	81 30       	cpi	r24, 0x01	; 1
 68c:	29 f4       	brne	.+10     	; 0x698 <DIO_ES_tSetPortValue+0x8a>
			PORTB = 0xff;
 68e:	e8 e3       	ldi	r30, 0x38	; 56
 690:	f0 e0       	ldi	r31, 0x00	; 0
 692:	8f ef       	ldi	r24, 0xFF	; 255
 694:	80 83       	st	Z, r24
 696:	1f c0       	rjmp	.+62     	; 0x6d6 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTB = 0x00;
 698:	e8 e3       	ldi	r30, 0x38	; 56
 69a:	f0 e0       	ldi	r31, 0x00	; 0
 69c:	10 82       	st	Z, r1
 69e:	1b c0       	rjmp	.+54     	; 0x6d6 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortValue == HIGH)
 6a0:	8a 81       	ldd	r24, Y+2	; 0x02
 6a2:	81 30       	cpi	r24, 0x01	; 1
 6a4:	29 f4       	brne	.+10     	; 0x6b0 <DIO_ES_tSetPortValue+0xa2>
			PORTC = 0xff;
 6a6:	e5 e3       	ldi	r30, 0x35	; 53
 6a8:	f0 e0       	ldi	r31, 0x00	; 0
 6aa:	8f ef       	ldi	r24, 0xFF	; 255
 6ac:	80 83       	st	Z, r24
 6ae:	13 c0       	rjmp	.+38     	; 0x6d6 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTC = 0x00;
 6b0:	e5 e3       	ldi	r30, 0x35	; 53
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	10 82       	st	Z, r1
 6b6:	0f c0       	rjmp	.+30     	; 0x6d6 <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortValue == HIGH)
 6b8:	8a 81       	ldd	r24, Y+2	; 0x02
 6ba:	81 30       	cpi	r24, 0x01	; 1
 6bc:	29 f4       	brne	.+10     	; 0x6c8 <DIO_ES_tSetPortValue+0xba>
			PORTD = 0xff;
 6be:	e2 e3       	ldi	r30, 0x32	; 50
 6c0:	f0 e0       	ldi	r31, 0x00	; 0
 6c2:	8f ef       	ldi	r24, 0xFF	; 255
 6c4:	80 83       	st	Z, r24
 6c6:	07 c0       	rjmp	.+14     	; 0x6d6 <DIO_ES_tSetPortValue+0xc8>
		else
			PORTD = 0x00;
 6c8:	e2 e3       	ldi	r30, 0x32	; 50
 6ca:	f0 e0       	ldi	r31, 0x00	; 0
 6cc:	10 82       	st	Z, r1
 6ce:	03 c0       	rjmp	.+6      	; 0x6d6 <DIO_ES_tSetPortValue+0xc8>
		break;
	default:
		return ES_NOT_OK;
 6d0:	91 e0       	ldi	r25, 0x01	; 1
 6d2:	9d 83       	std	Y+5, r25	; 0x05
 6d4:	01 c0       	rjmp	.+2      	; 0x6d8 <DIO_ES_tSetPortValue+0xca>
		break;
	}
	return ES_OK;
 6d6:	1d 82       	std	Y+5, r1	; 0x05
 6d8:	8d 81       	ldd	r24, Y+5	; 0x05
}
 6da:	0f 90       	pop	r0
 6dc:	0f 90       	pop	r0
 6de:	0f 90       	pop	r0
 6e0:	0f 90       	pop	r0
 6e2:	0f 90       	pop	r0
 6e4:	cf 91       	pop	r28
 6e6:	df 91       	pop	r29
 6e8:	08 95       	ret

000006ea <DIO_ES_tTOGPin>:
/*
 * DIO_ES_tTOGPin is used to Toggle a specific pin
 */

ES_t DIO_ES_tTOGPin(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId)
{
 6ea:	df 93       	push	r29
 6ec:	cf 93       	push	r28
 6ee:	00 d0       	rcall	.+0      	; 0x6f0 <DIO_ES_tTOGPin+0x6>
 6f0:	0f 92       	push	r0
 6f2:	cd b7       	in	r28, 0x3d	; 61
 6f4:	de b7       	in	r29, 0x3e	; 62
 6f6:	89 83       	std	Y+1, r24	; 0x01
 6f8:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8_PinId > PIN_LIMIT){
 6fa:	8a 81       	ldd	r24, Y+2	; 0x02
 6fc:	88 30       	cpi	r24, 0x08	; 8
 6fe:	18 f0       	brcs	.+6      	; 0x706 <DIO_ES_tTOGPin+0x1c>
		return ES_NOT_OK;
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	8b 83       	std	Y+3, r24	; 0x03
 704:	60 c0       	rjmp	.+192    	; 0x7c6 <DIO_ES_tTOGPin+0xdc>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
 706:	89 81       	ldd	r24, Y+1	; 0x01
 708:	88 23       	and	r24, r24
 70a:	a1 f4       	brne	.+40     	; 0x734 <DIO_ES_tTOGPin+0x4a>
		TOG_BIT(PINA,copy_u8_PinId);
 70c:	a9 e3       	ldi	r26, 0x39	; 57
 70e:	b0 e0       	ldi	r27, 0x00	; 0
 710:	e9 e3       	ldi	r30, 0x39	; 57
 712:	f0 e0       	ldi	r31, 0x00	; 0
 714:	80 81       	ld	r24, Z
 716:	48 2f       	mov	r20, r24
 718:	8a 81       	ldd	r24, Y+2	; 0x02
 71a:	28 2f       	mov	r18, r24
 71c:	30 e0       	ldi	r19, 0x00	; 0
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	02 2e       	mov	r0, r18
 724:	02 c0       	rjmp	.+4      	; 0x72a <DIO_ES_tTOGPin+0x40>
 726:	88 0f       	add	r24, r24
 728:	99 1f       	adc	r25, r25
 72a:	0a 94       	dec	r0
 72c:	e2 f7       	brpl	.-8      	; 0x726 <DIO_ES_tTOGPin+0x3c>
 72e:	84 27       	eor	r24, r20
 730:	8c 93       	st	X, r24
 732:	48 c0       	rjmp	.+144    	; 0x7c4 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
 734:	89 81       	ldd	r24, Y+1	; 0x01
 736:	81 30       	cpi	r24, 0x01	; 1
 738:	a1 f4       	brne	.+40     	; 0x762 <DIO_ES_tTOGPin+0x78>
		TOG_BIT(PINB,copy_u8_PinId);
 73a:	a6 e3       	ldi	r26, 0x36	; 54
 73c:	b0 e0       	ldi	r27, 0x00	; 0
 73e:	e6 e3       	ldi	r30, 0x36	; 54
 740:	f0 e0       	ldi	r31, 0x00	; 0
 742:	80 81       	ld	r24, Z
 744:	48 2f       	mov	r20, r24
 746:	8a 81       	ldd	r24, Y+2	; 0x02
 748:	28 2f       	mov	r18, r24
 74a:	30 e0       	ldi	r19, 0x00	; 0
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	02 2e       	mov	r0, r18
 752:	02 c0       	rjmp	.+4      	; 0x758 <DIO_ES_tTOGPin+0x6e>
 754:	88 0f       	add	r24, r24
 756:	99 1f       	adc	r25, r25
 758:	0a 94       	dec	r0
 75a:	e2 f7       	brpl	.-8      	; 0x754 <DIO_ES_tTOGPin+0x6a>
 75c:	84 27       	eor	r24, r20
 75e:	8c 93       	st	X, r24
 760:	31 c0       	rjmp	.+98     	; 0x7c4 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
 762:	89 81       	ldd	r24, Y+1	; 0x01
 764:	82 30       	cpi	r24, 0x02	; 2
 766:	a1 f4       	brne	.+40     	; 0x790 <DIO_ES_tTOGPin+0xa6>
		TOG_BIT(PINC,copy_u8_PinId);
 768:	a3 e3       	ldi	r26, 0x33	; 51
 76a:	b0 e0       	ldi	r27, 0x00	; 0
 76c:	e3 e3       	ldi	r30, 0x33	; 51
 76e:	f0 e0       	ldi	r31, 0x00	; 0
 770:	80 81       	ld	r24, Z
 772:	48 2f       	mov	r20, r24
 774:	8a 81       	ldd	r24, Y+2	; 0x02
 776:	28 2f       	mov	r18, r24
 778:	30 e0       	ldi	r19, 0x00	; 0
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	02 2e       	mov	r0, r18
 780:	02 c0       	rjmp	.+4      	; 0x786 <DIO_ES_tTOGPin+0x9c>
 782:	88 0f       	add	r24, r24
 784:	99 1f       	adc	r25, r25
 786:	0a 94       	dec	r0
 788:	e2 f7       	brpl	.-8      	; 0x782 <DIO_ES_tTOGPin+0x98>
 78a:	84 27       	eor	r24, r20
 78c:	8c 93       	st	X, r24
 78e:	1a c0       	rjmp	.+52     	; 0x7c4 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
 790:	89 81       	ldd	r24, Y+1	; 0x01
 792:	83 30       	cpi	r24, 0x03	; 3
 794:	a1 f4       	brne	.+40     	; 0x7be <DIO_ES_tTOGPin+0xd4>
		TOG_BIT(PIND,copy_u8_PinId);
 796:	a0 e3       	ldi	r26, 0x30	; 48
 798:	b0 e0       	ldi	r27, 0x00	; 0
 79a:	e0 e3       	ldi	r30, 0x30	; 48
 79c:	f0 e0       	ldi	r31, 0x00	; 0
 79e:	80 81       	ld	r24, Z
 7a0:	48 2f       	mov	r20, r24
 7a2:	8a 81       	ldd	r24, Y+2	; 0x02
 7a4:	28 2f       	mov	r18, r24
 7a6:	30 e0       	ldi	r19, 0x00	; 0
 7a8:	81 e0       	ldi	r24, 0x01	; 1
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	02 2e       	mov	r0, r18
 7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <DIO_ES_tTOGPin+0xca>
 7b0:	88 0f       	add	r24, r24
 7b2:	99 1f       	adc	r25, r25
 7b4:	0a 94       	dec	r0
 7b6:	e2 f7       	brpl	.-8      	; 0x7b0 <DIO_ES_tTOGPin+0xc6>
 7b8:	84 27       	eor	r24, r20
 7ba:	8c 93       	st	X, r24
 7bc:	03 c0       	rjmp	.+6      	; 0x7c4 <DIO_ES_tTOGPin+0xda>
	}else{
		return ES_NOT_OK;
 7be:	81 e0       	ldi	r24, 0x01	; 1
 7c0:	8b 83       	std	Y+3, r24	; 0x03
 7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <DIO_ES_tTOGPin+0xdc>
	}
	return ES_OK;
 7c4:	1b 82       	std	Y+3, r1	; 0x03
 7c6:	8b 81       	ldd	r24, Y+3	; 0x03
}
 7c8:	0f 90       	pop	r0
 7ca:	0f 90       	pop	r0
 7cc:	0f 90       	pop	r0
 7ce:	cf 91       	pop	r28
 7d0:	df 91       	pop	r29
 7d2:	08 95       	ret

000007d4 <DIO_ES_tInit>:




ES_t DIO_ES_tInit(void)
{
 7d4:	df 93       	push	r29
 7d6:	cf 93       	push	r28
 7d8:	00 d0       	rcall	.+0      	; 0x7da <DIO_ES_tInit+0x6>
 7da:	cd b7       	in	r28, 0x3d	; 61
 7dc:	de b7       	in	r29, 0x3e	; 62
	int i = 0;
 7de:	1a 82       	std	Y+2, r1	; 0x02
 7e0:	19 82       	std	Y+1, r1	; 0x01
	for(i=0 ; i<PIN_COUNT ; i++){
 7e2:	1a 82       	std	Y+2, r1	; 0x02
 7e4:	19 82       	std	Y+1, r1	; 0x01
 7e6:	a3 c2       	rjmp	.+1350   	; 0xd2e <__stack+0x4cf>
		if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_A){
 7e8:	89 81       	ldd	r24, Y+1	; 0x01
 7ea:	9a 81       	ldd	r25, Y+2	; 0x02
 7ec:	88 0f       	add	r24, r24
 7ee:	99 1f       	adc	r25, r25
 7f0:	88 0f       	add	r24, r24
 7f2:	99 1f       	adc	r25, r25
 7f4:	fc 01       	movw	r30, r24
 7f6:	e0 5a       	subi	r30, 0xA0	; 160
 7f8:	ff 4f       	sbci	r31, 0xFF	; 255
 7fa:	80 81       	ld	r24, Z
 7fc:	88 23       	and	r24, r24
 7fe:	09 f0       	breq	.+2      	; 0x802 <DIO_ES_tInit+0x2e>
 800:	9b c0       	rjmp	.+310    	; 0x938 <__stack+0xd9>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
 802:	89 81       	ldd	r24, Y+1	; 0x01
 804:	9a 81       	ldd	r25, Y+2	; 0x02
 806:	88 0f       	add	r24, r24
 808:	99 1f       	adc	r25, r25
 80a:	01 96       	adiw	r24, 0x01	; 1
 80c:	88 0f       	add	r24, r24
 80e:	99 1f       	adc	r25, r25
 810:	fc 01       	movw	r30, r24
 812:	e0 5a       	subi	r30, 0xA0	; 160
 814:	ff 4f       	sbci	r31, 0xFF	; 255
 816:	80 81       	ld	r24, Z
 818:	81 30       	cpi	r24, 0x01	; 1
 81a:	e9 f4       	brne	.+58     	; 0x856 <DIO_ES_tInit+0x82>
				SET_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
 81c:	aa e3       	ldi	r26, 0x3A	; 58
 81e:	b0 e0       	ldi	r27, 0x00	; 0
 820:	ea e3       	ldi	r30, 0x3A	; 58
 822:	f0 e0       	ldi	r31, 0x00	; 0
 824:	80 81       	ld	r24, Z
 826:	48 2f       	mov	r20, r24
 828:	89 81       	ldd	r24, Y+1	; 0x01
 82a:	9a 81       	ldd	r25, Y+2	; 0x02
 82c:	88 0f       	add	r24, r24
 82e:	99 1f       	adc	r25, r25
 830:	88 0f       	add	r24, r24
 832:	99 1f       	adc	r25, r25
 834:	fc 01       	movw	r30, r24
 836:	ef 59       	subi	r30, 0x9F	; 159
 838:	ff 4f       	sbci	r31, 0xFF	; 255
 83a:	80 81       	ld	r24, Z
 83c:	28 2f       	mov	r18, r24
 83e:	30 e0       	ldi	r19, 0x00	; 0
 840:	81 e0       	ldi	r24, 0x01	; 1
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	02 2e       	mov	r0, r18
 846:	02 c0       	rjmp	.+4      	; 0x84c <DIO_ES_tInit+0x78>
 848:	88 0f       	add	r24, r24
 84a:	99 1f       	adc	r25, r25
 84c:	0a 94       	dec	r0
 84e:	e2 f7       	brpl	.-8      	; 0x848 <DIO_ES_tInit+0x74>
 850:	84 2b       	or	r24, r20
 852:	8c 93       	st	X, r24
 854:	67 c2       	rjmp	.+1230   	; 0xd24 <__stack+0x4c5>
			}else{
				CLR_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
 856:	aa e3       	ldi	r26, 0x3A	; 58
 858:	b0 e0       	ldi	r27, 0x00	; 0
 85a:	ea e3       	ldi	r30, 0x3A	; 58
 85c:	f0 e0       	ldi	r31, 0x00	; 0
 85e:	80 81       	ld	r24, Z
 860:	48 2f       	mov	r20, r24
 862:	89 81       	ldd	r24, Y+1	; 0x01
 864:	9a 81       	ldd	r25, Y+2	; 0x02
 866:	88 0f       	add	r24, r24
 868:	99 1f       	adc	r25, r25
 86a:	88 0f       	add	r24, r24
 86c:	99 1f       	adc	r25, r25
 86e:	fc 01       	movw	r30, r24
 870:	ef 59       	subi	r30, 0x9F	; 159
 872:	ff 4f       	sbci	r31, 0xFF	; 255
 874:	80 81       	ld	r24, Z
 876:	28 2f       	mov	r18, r24
 878:	30 e0       	ldi	r19, 0x00	; 0
 87a:	81 e0       	ldi	r24, 0x01	; 1
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	02 2e       	mov	r0, r18
 880:	02 c0       	rjmp	.+4      	; 0x886 <__stack+0x27>
 882:	88 0f       	add	r24, r24
 884:	99 1f       	adc	r25, r25
 886:	0a 94       	dec	r0
 888:	e2 f7       	brpl	.-8      	; 0x882 <__stack+0x23>
 88a:	80 95       	com	r24
 88c:	84 23       	and	r24, r20
 88e:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
 890:	89 81       	ldd	r24, Y+1	; 0x01
 892:	9a 81       	ldd	r25, Y+2	; 0x02
 894:	88 0f       	add	r24, r24
 896:	99 1f       	adc	r25, r25
 898:	88 0f       	add	r24, r24
 89a:	99 1f       	adc	r25, r25
 89c:	fc 01       	movw	r30, r24
 89e:	ed 59       	subi	r30, 0x9D	; 157
 8a0:	ff 4f       	sbci	r31, 0xFF	; 255
 8a2:	80 81       	ld	r24, Z
 8a4:	81 30       	cpi	r24, 0x01	; 1
 8a6:	e9 f4       	brne	.+58     	; 0x8e2 <__stack+0x83>
					SET_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
 8a8:	ab e3       	ldi	r26, 0x3B	; 59
 8aa:	b0 e0       	ldi	r27, 0x00	; 0
 8ac:	eb e3       	ldi	r30, 0x3B	; 59
 8ae:	f0 e0       	ldi	r31, 0x00	; 0
 8b0:	80 81       	ld	r24, Z
 8b2:	48 2f       	mov	r20, r24
 8b4:	89 81       	ldd	r24, Y+1	; 0x01
 8b6:	9a 81       	ldd	r25, Y+2	; 0x02
 8b8:	88 0f       	add	r24, r24
 8ba:	99 1f       	adc	r25, r25
 8bc:	88 0f       	add	r24, r24
 8be:	99 1f       	adc	r25, r25
 8c0:	fc 01       	movw	r30, r24
 8c2:	ef 59       	subi	r30, 0x9F	; 159
 8c4:	ff 4f       	sbci	r31, 0xFF	; 255
 8c6:	80 81       	ld	r24, Z
 8c8:	28 2f       	mov	r18, r24
 8ca:	30 e0       	ldi	r19, 0x00	; 0
 8cc:	81 e0       	ldi	r24, 0x01	; 1
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	02 2e       	mov	r0, r18
 8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <__stack+0x79>
 8d4:	88 0f       	add	r24, r24
 8d6:	99 1f       	adc	r25, r25
 8d8:	0a 94       	dec	r0
 8da:	e2 f7       	brpl	.-8      	; 0x8d4 <__stack+0x75>
 8dc:	84 2b       	or	r24, r20
 8de:	8c 93       	st	X, r24
 8e0:	21 c2       	rjmp	.+1090   	; 0xd24 <__stack+0x4c5>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
 8e2:	89 81       	ldd	r24, Y+1	; 0x01
 8e4:	9a 81       	ldd	r25, Y+2	; 0x02
 8e6:	88 0f       	add	r24, r24
 8e8:	99 1f       	adc	r25, r25
 8ea:	88 0f       	add	r24, r24
 8ec:	99 1f       	adc	r25, r25
 8ee:	fc 01       	movw	r30, r24
 8f0:	ed 59       	subi	r30, 0x9D	; 157
 8f2:	ff 4f       	sbci	r31, 0xFF	; 255
 8f4:	80 81       	ld	r24, Z
 8f6:	81 30       	cpi	r24, 0x01	; 1
 8f8:	09 f0       	breq	.+2      	; 0x8fc <__stack+0x9d>
 8fa:	14 c2       	rjmp	.+1064   	; 0xd24 <__stack+0x4c5>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
 8fc:	ab e3       	ldi	r26, 0x3B	; 59
 8fe:	b0 e0       	ldi	r27, 0x00	; 0
 900:	eb e3       	ldi	r30, 0x3B	; 59
 902:	f0 e0       	ldi	r31, 0x00	; 0
 904:	80 81       	ld	r24, Z
 906:	48 2f       	mov	r20, r24
 908:	89 81       	ldd	r24, Y+1	; 0x01
 90a:	9a 81       	ldd	r25, Y+2	; 0x02
 90c:	88 0f       	add	r24, r24
 90e:	99 1f       	adc	r25, r25
 910:	88 0f       	add	r24, r24
 912:	99 1f       	adc	r25, r25
 914:	fc 01       	movw	r30, r24
 916:	ef 59       	subi	r30, 0x9F	; 159
 918:	ff 4f       	sbci	r31, 0xFF	; 255
 91a:	80 81       	ld	r24, Z
 91c:	28 2f       	mov	r18, r24
 91e:	30 e0       	ldi	r19, 0x00	; 0
 920:	81 e0       	ldi	r24, 0x01	; 1
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	02 2e       	mov	r0, r18
 926:	02 c0       	rjmp	.+4      	; 0x92c <__stack+0xcd>
 928:	88 0f       	add	r24, r24
 92a:	99 1f       	adc	r25, r25
 92c:	0a 94       	dec	r0
 92e:	e2 f7       	brpl	.-8      	; 0x928 <__stack+0xc9>
 930:	80 95       	com	r24
 932:	84 23       	and	r24, r20
 934:	8c 93       	st	X, r24
 936:	f6 c1       	rjmp	.+1004   	; 0xd24 <__stack+0x4c5>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_B){
 938:	89 81       	ldd	r24, Y+1	; 0x01
 93a:	9a 81       	ldd	r25, Y+2	; 0x02
 93c:	88 0f       	add	r24, r24
 93e:	99 1f       	adc	r25, r25
 940:	88 0f       	add	r24, r24
 942:	99 1f       	adc	r25, r25
 944:	fc 01       	movw	r30, r24
 946:	e0 5a       	subi	r30, 0xA0	; 160
 948:	ff 4f       	sbci	r31, 0xFF	; 255
 94a:	80 81       	ld	r24, Z
 94c:	81 30       	cpi	r24, 0x01	; 1
 94e:	09 f0       	breq	.+2      	; 0x952 <__stack+0xf3>
 950:	9b c0       	rjmp	.+310    	; 0xa88 <__stack+0x229>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
 952:	89 81       	ldd	r24, Y+1	; 0x01
 954:	9a 81       	ldd	r25, Y+2	; 0x02
 956:	88 0f       	add	r24, r24
 958:	99 1f       	adc	r25, r25
 95a:	01 96       	adiw	r24, 0x01	; 1
 95c:	88 0f       	add	r24, r24
 95e:	99 1f       	adc	r25, r25
 960:	fc 01       	movw	r30, r24
 962:	e0 5a       	subi	r30, 0xA0	; 160
 964:	ff 4f       	sbci	r31, 0xFF	; 255
 966:	80 81       	ld	r24, Z
 968:	81 30       	cpi	r24, 0x01	; 1
 96a:	e9 f4       	brne	.+58     	; 0x9a6 <__stack+0x147>
				SET_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
 96c:	a7 e3       	ldi	r26, 0x37	; 55
 96e:	b0 e0       	ldi	r27, 0x00	; 0
 970:	e7 e3       	ldi	r30, 0x37	; 55
 972:	f0 e0       	ldi	r31, 0x00	; 0
 974:	80 81       	ld	r24, Z
 976:	48 2f       	mov	r20, r24
 978:	89 81       	ldd	r24, Y+1	; 0x01
 97a:	9a 81       	ldd	r25, Y+2	; 0x02
 97c:	88 0f       	add	r24, r24
 97e:	99 1f       	adc	r25, r25
 980:	88 0f       	add	r24, r24
 982:	99 1f       	adc	r25, r25
 984:	fc 01       	movw	r30, r24
 986:	ef 59       	subi	r30, 0x9F	; 159
 988:	ff 4f       	sbci	r31, 0xFF	; 255
 98a:	80 81       	ld	r24, Z
 98c:	28 2f       	mov	r18, r24
 98e:	30 e0       	ldi	r19, 0x00	; 0
 990:	81 e0       	ldi	r24, 0x01	; 1
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	02 2e       	mov	r0, r18
 996:	02 c0       	rjmp	.+4      	; 0x99c <__stack+0x13d>
 998:	88 0f       	add	r24, r24
 99a:	99 1f       	adc	r25, r25
 99c:	0a 94       	dec	r0
 99e:	e2 f7       	brpl	.-8      	; 0x998 <__stack+0x139>
 9a0:	84 2b       	or	r24, r20
 9a2:	8c 93       	st	X, r24
 9a4:	bf c1       	rjmp	.+894    	; 0xd24 <__stack+0x4c5>
			}else{
				CLR_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
 9a6:	a7 e3       	ldi	r26, 0x37	; 55
 9a8:	b0 e0       	ldi	r27, 0x00	; 0
 9aa:	e7 e3       	ldi	r30, 0x37	; 55
 9ac:	f0 e0       	ldi	r31, 0x00	; 0
 9ae:	80 81       	ld	r24, Z
 9b0:	48 2f       	mov	r20, r24
 9b2:	89 81       	ldd	r24, Y+1	; 0x01
 9b4:	9a 81       	ldd	r25, Y+2	; 0x02
 9b6:	88 0f       	add	r24, r24
 9b8:	99 1f       	adc	r25, r25
 9ba:	88 0f       	add	r24, r24
 9bc:	99 1f       	adc	r25, r25
 9be:	fc 01       	movw	r30, r24
 9c0:	ef 59       	subi	r30, 0x9F	; 159
 9c2:	ff 4f       	sbci	r31, 0xFF	; 255
 9c4:	80 81       	ld	r24, Z
 9c6:	28 2f       	mov	r18, r24
 9c8:	30 e0       	ldi	r19, 0x00	; 0
 9ca:	81 e0       	ldi	r24, 0x01	; 1
 9cc:	90 e0       	ldi	r25, 0x00	; 0
 9ce:	02 2e       	mov	r0, r18
 9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <__stack+0x177>
 9d2:	88 0f       	add	r24, r24
 9d4:	99 1f       	adc	r25, r25
 9d6:	0a 94       	dec	r0
 9d8:	e2 f7       	brpl	.-8      	; 0x9d2 <__stack+0x173>
 9da:	80 95       	com	r24
 9dc:	84 23       	and	r24, r20
 9de:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
 9e0:	89 81       	ldd	r24, Y+1	; 0x01
 9e2:	9a 81       	ldd	r25, Y+2	; 0x02
 9e4:	88 0f       	add	r24, r24
 9e6:	99 1f       	adc	r25, r25
 9e8:	88 0f       	add	r24, r24
 9ea:	99 1f       	adc	r25, r25
 9ec:	fc 01       	movw	r30, r24
 9ee:	ed 59       	subi	r30, 0x9D	; 157
 9f0:	ff 4f       	sbci	r31, 0xFF	; 255
 9f2:	80 81       	ld	r24, Z
 9f4:	81 30       	cpi	r24, 0x01	; 1
 9f6:	e9 f4       	brne	.+58     	; 0xa32 <__stack+0x1d3>
					SET_BIT(PORTB,Dio_CfgPinsArray[i].Pin);
 9f8:	a8 e3       	ldi	r26, 0x38	; 56
 9fa:	b0 e0       	ldi	r27, 0x00	; 0
 9fc:	e8 e3       	ldi	r30, 0x38	; 56
 9fe:	f0 e0       	ldi	r31, 0x00	; 0
 a00:	80 81       	ld	r24, Z
 a02:	48 2f       	mov	r20, r24
 a04:	89 81       	ldd	r24, Y+1	; 0x01
 a06:	9a 81       	ldd	r25, Y+2	; 0x02
 a08:	88 0f       	add	r24, r24
 a0a:	99 1f       	adc	r25, r25
 a0c:	88 0f       	add	r24, r24
 a0e:	99 1f       	adc	r25, r25
 a10:	fc 01       	movw	r30, r24
 a12:	ef 59       	subi	r30, 0x9F	; 159
 a14:	ff 4f       	sbci	r31, 0xFF	; 255
 a16:	80 81       	ld	r24, Z
 a18:	28 2f       	mov	r18, r24
 a1a:	30 e0       	ldi	r19, 0x00	; 0
 a1c:	81 e0       	ldi	r24, 0x01	; 1
 a1e:	90 e0       	ldi	r25, 0x00	; 0
 a20:	02 2e       	mov	r0, r18
 a22:	02 c0       	rjmp	.+4      	; 0xa28 <__stack+0x1c9>
 a24:	88 0f       	add	r24, r24
 a26:	99 1f       	adc	r25, r25
 a28:	0a 94       	dec	r0
 a2a:	e2 f7       	brpl	.-8      	; 0xa24 <__stack+0x1c5>
 a2c:	84 2b       	or	r24, r20
 a2e:	8c 93       	st	X, r24
 a30:	79 c1       	rjmp	.+754    	; 0xd24 <__stack+0x4c5>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
 a32:	89 81       	ldd	r24, Y+1	; 0x01
 a34:	9a 81       	ldd	r25, Y+2	; 0x02
 a36:	88 0f       	add	r24, r24
 a38:	99 1f       	adc	r25, r25
 a3a:	88 0f       	add	r24, r24
 a3c:	99 1f       	adc	r25, r25
 a3e:	fc 01       	movw	r30, r24
 a40:	ed 59       	subi	r30, 0x9D	; 157
 a42:	ff 4f       	sbci	r31, 0xFF	; 255
 a44:	80 81       	ld	r24, Z
 a46:	81 30       	cpi	r24, 0x01	; 1
 a48:	09 f0       	breq	.+2      	; 0xa4c <__stack+0x1ed>
 a4a:	6c c1       	rjmp	.+728    	; 0xd24 <__stack+0x4c5>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
 a4c:	ab e3       	ldi	r26, 0x3B	; 59
 a4e:	b0 e0       	ldi	r27, 0x00	; 0
 a50:	eb e3       	ldi	r30, 0x3B	; 59
 a52:	f0 e0       	ldi	r31, 0x00	; 0
 a54:	80 81       	ld	r24, Z
 a56:	48 2f       	mov	r20, r24
 a58:	89 81       	ldd	r24, Y+1	; 0x01
 a5a:	9a 81       	ldd	r25, Y+2	; 0x02
 a5c:	88 0f       	add	r24, r24
 a5e:	99 1f       	adc	r25, r25
 a60:	88 0f       	add	r24, r24
 a62:	99 1f       	adc	r25, r25
 a64:	fc 01       	movw	r30, r24
 a66:	ef 59       	subi	r30, 0x9F	; 159
 a68:	ff 4f       	sbci	r31, 0xFF	; 255
 a6a:	80 81       	ld	r24, Z
 a6c:	28 2f       	mov	r18, r24
 a6e:	30 e0       	ldi	r19, 0x00	; 0
 a70:	81 e0       	ldi	r24, 0x01	; 1
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	02 2e       	mov	r0, r18
 a76:	02 c0       	rjmp	.+4      	; 0xa7c <__stack+0x21d>
 a78:	88 0f       	add	r24, r24
 a7a:	99 1f       	adc	r25, r25
 a7c:	0a 94       	dec	r0
 a7e:	e2 f7       	brpl	.-8      	; 0xa78 <__stack+0x219>
 a80:	80 95       	com	r24
 a82:	84 23       	and	r24, r20
 a84:	8c 93       	st	X, r24
 a86:	4e c1       	rjmp	.+668    	; 0xd24 <__stack+0x4c5>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_C){
 a88:	89 81       	ldd	r24, Y+1	; 0x01
 a8a:	9a 81       	ldd	r25, Y+2	; 0x02
 a8c:	88 0f       	add	r24, r24
 a8e:	99 1f       	adc	r25, r25
 a90:	88 0f       	add	r24, r24
 a92:	99 1f       	adc	r25, r25
 a94:	fc 01       	movw	r30, r24
 a96:	e0 5a       	subi	r30, 0xA0	; 160
 a98:	ff 4f       	sbci	r31, 0xFF	; 255
 a9a:	80 81       	ld	r24, Z
 a9c:	82 30       	cpi	r24, 0x02	; 2
 a9e:	09 f0       	breq	.+2      	; 0xaa2 <__stack+0x243>
 aa0:	9b c0       	rjmp	.+310    	; 0xbd8 <__stack+0x379>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
 aa2:	89 81       	ldd	r24, Y+1	; 0x01
 aa4:	9a 81       	ldd	r25, Y+2	; 0x02
 aa6:	88 0f       	add	r24, r24
 aa8:	99 1f       	adc	r25, r25
 aaa:	01 96       	adiw	r24, 0x01	; 1
 aac:	88 0f       	add	r24, r24
 aae:	99 1f       	adc	r25, r25
 ab0:	fc 01       	movw	r30, r24
 ab2:	e0 5a       	subi	r30, 0xA0	; 160
 ab4:	ff 4f       	sbci	r31, 0xFF	; 255
 ab6:	80 81       	ld	r24, Z
 ab8:	81 30       	cpi	r24, 0x01	; 1
 aba:	e9 f4       	brne	.+58     	; 0xaf6 <__stack+0x297>
				SET_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
 abc:	a4 e3       	ldi	r26, 0x34	; 52
 abe:	b0 e0       	ldi	r27, 0x00	; 0
 ac0:	e4 e3       	ldi	r30, 0x34	; 52
 ac2:	f0 e0       	ldi	r31, 0x00	; 0
 ac4:	80 81       	ld	r24, Z
 ac6:	48 2f       	mov	r20, r24
 ac8:	89 81       	ldd	r24, Y+1	; 0x01
 aca:	9a 81       	ldd	r25, Y+2	; 0x02
 acc:	88 0f       	add	r24, r24
 ace:	99 1f       	adc	r25, r25
 ad0:	88 0f       	add	r24, r24
 ad2:	99 1f       	adc	r25, r25
 ad4:	fc 01       	movw	r30, r24
 ad6:	ef 59       	subi	r30, 0x9F	; 159
 ad8:	ff 4f       	sbci	r31, 0xFF	; 255
 ada:	80 81       	ld	r24, Z
 adc:	28 2f       	mov	r18, r24
 ade:	30 e0       	ldi	r19, 0x00	; 0
 ae0:	81 e0       	ldi	r24, 0x01	; 1
 ae2:	90 e0       	ldi	r25, 0x00	; 0
 ae4:	02 2e       	mov	r0, r18
 ae6:	02 c0       	rjmp	.+4      	; 0xaec <__stack+0x28d>
 ae8:	88 0f       	add	r24, r24
 aea:	99 1f       	adc	r25, r25
 aec:	0a 94       	dec	r0
 aee:	e2 f7       	brpl	.-8      	; 0xae8 <__stack+0x289>
 af0:	84 2b       	or	r24, r20
 af2:	8c 93       	st	X, r24
 af4:	17 c1       	rjmp	.+558    	; 0xd24 <__stack+0x4c5>
			}else{
				CLR_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
 af6:	a4 e3       	ldi	r26, 0x34	; 52
 af8:	b0 e0       	ldi	r27, 0x00	; 0
 afa:	e4 e3       	ldi	r30, 0x34	; 52
 afc:	f0 e0       	ldi	r31, 0x00	; 0
 afe:	80 81       	ld	r24, Z
 b00:	48 2f       	mov	r20, r24
 b02:	89 81       	ldd	r24, Y+1	; 0x01
 b04:	9a 81       	ldd	r25, Y+2	; 0x02
 b06:	88 0f       	add	r24, r24
 b08:	99 1f       	adc	r25, r25
 b0a:	88 0f       	add	r24, r24
 b0c:	99 1f       	adc	r25, r25
 b0e:	fc 01       	movw	r30, r24
 b10:	ef 59       	subi	r30, 0x9F	; 159
 b12:	ff 4f       	sbci	r31, 0xFF	; 255
 b14:	80 81       	ld	r24, Z
 b16:	28 2f       	mov	r18, r24
 b18:	30 e0       	ldi	r19, 0x00	; 0
 b1a:	81 e0       	ldi	r24, 0x01	; 1
 b1c:	90 e0       	ldi	r25, 0x00	; 0
 b1e:	02 2e       	mov	r0, r18
 b20:	02 c0       	rjmp	.+4      	; 0xb26 <__stack+0x2c7>
 b22:	88 0f       	add	r24, r24
 b24:	99 1f       	adc	r25, r25
 b26:	0a 94       	dec	r0
 b28:	e2 f7       	brpl	.-8      	; 0xb22 <__stack+0x2c3>
 b2a:	80 95       	com	r24
 b2c:	84 23       	and	r24, r20
 b2e:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
 b30:	89 81       	ldd	r24, Y+1	; 0x01
 b32:	9a 81       	ldd	r25, Y+2	; 0x02
 b34:	88 0f       	add	r24, r24
 b36:	99 1f       	adc	r25, r25
 b38:	88 0f       	add	r24, r24
 b3a:	99 1f       	adc	r25, r25
 b3c:	fc 01       	movw	r30, r24
 b3e:	ed 59       	subi	r30, 0x9D	; 157
 b40:	ff 4f       	sbci	r31, 0xFF	; 255
 b42:	80 81       	ld	r24, Z
 b44:	81 30       	cpi	r24, 0x01	; 1
 b46:	e9 f4       	brne	.+58     	; 0xb82 <__stack+0x323>
					SET_BIT(PORTC,Dio_CfgPinsArray[i].Pin);
 b48:	a5 e3       	ldi	r26, 0x35	; 53
 b4a:	b0 e0       	ldi	r27, 0x00	; 0
 b4c:	e5 e3       	ldi	r30, 0x35	; 53
 b4e:	f0 e0       	ldi	r31, 0x00	; 0
 b50:	80 81       	ld	r24, Z
 b52:	48 2f       	mov	r20, r24
 b54:	89 81       	ldd	r24, Y+1	; 0x01
 b56:	9a 81       	ldd	r25, Y+2	; 0x02
 b58:	88 0f       	add	r24, r24
 b5a:	99 1f       	adc	r25, r25
 b5c:	88 0f       	add	r24, r24
 b5e:	99 1f       	adc	r25, r25
 b60:	fc 01       	movw	r30, r24
 b62:	ef 59       	subi	r30, 0x9F	; 159
 b64:	ff 4f       	sbci	r31, 0xFF	; 255
 b66:	80 81       	ld	r24, Z
 b68:	28 2f       	mov	r18, r24
 b6a:	30 e0       	ldi	r19, 0x00	; 0
 b6c:	81 e0       	ldi	r24, 0x01	; 1
 b6e:	90 e0       	ldi	r25, 0x00	; 0
 b70:	02 2e       	mov	r0, r18
 b72:	02 c0       	rjmp	.+4      	; 0xb78 <__stack+0x319>
 b74:	88 0f       	add	r24, r24
 b76:	99 1f       	adc	r25, r25
 b78:	0a 94       	dec	r0
 b7a:	e2 f7       	brpl	.-8      	; 0xb74 <__stack+0x315>
 b7c:	84 2b       	or	r24, r20
 b7e:	8c 93       	st	X, r24
 b80:	d1 c0       	rjmp	.+418    	; 0xd24 <__stack+0x4c5>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
 b82:	89 81       	ldd	r24, Y+1	; 0x01
 b84:	9a 81       	ldd	r25, Y+2	; 0x02
 b86:	88 0f       	add	r24, r24
 b88:	99 1f       	adc	r25, r25
 b8a:	88 0f       	add	r24, r24
 b8c:	99 1f       	adc	r25, r25
 b8e:	fc 01       	movw	r30, r24
 b90:	ed 59       	subi	r30, 0x9D	; 157
 b92:	ff 4f       	sbci	r31, 0xFF	; 255
 b94:	80 81       	ld	r24, Z
 b96:	81 30       	cpi	r24, 0x01	; 1
 b98:	09 f0       	breq	.+2      	; 0xb9c <__stack+0x33d>
 b9a:	c4 c0       	rjmp	.+392    	; 0xd24 <__stack+0x4c5>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
 b9c:	ab e3       	ldi	r26, 0x3B	; 59
 b9e:	b0 e0       	ldi	r27, 0x00	; 0
 ba0:	eb e3       	ldi	r30, 0x3B	; 59
 ba2:	f0 e0       	ldi	r31, 0x00	; 0
 ba4:	80 81       	ld	r24, Z
 ba6:	48 2f       	mov	r20, r24
 ba8:	89 81       	ldd	r24, Y+1	; 0x01
 baa:	9a 81       	ldd	r25, Y+2	; 0x02
 bac:	88 0f       	add	r24, r24
 bae:	99 1f       	adc	r25, r25
 bb0:	88 0f       	add	r24, r24
 bb2:	99 1f       	adc	r25, r25
 bb4:	fc 01       	movw	r30, r24
 bb6:	ef 59       	subi	r30, 0x9F	; 159
 bb8:	ff 4f       	sbci	r31, 0xFF	; 255
 bba:	80 81       	ld	r24, Z
 bbc:	28 2f       	mov	r18, r24
 bbe:	30 e0       	ldi	r19, 0x00	; 0
 bc0:	81 e0       	ldi	r24, 0x01	; 1
 bc2:	90 e0       	ldi	r25, 0x00	; 0
 bc4:	02 2e       	mov	r0, r18
 bc6:	02 c0       	rjmp	.+4      	; 0xbcc <__stack+0x36d>
 bc8:	88 0f       	add	r24, r24
 bca:	99 1f       	adc	r25, r25
 bcc:	0a 94       	dec	r0
 bce:	e2 f7       	brpl	.-8      	; 0xbc8 <__stack+0x369>
 bd0:	80 95       	com	r24
 bd2:	84 23       	and	r24, r20
 bd4:	8c 93       	st	X, r24
 bd6:	a6 c0       	rjmp	.+332    	; 0xd24 <__stack+0x4c5>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_D){
 bd8:	89 81       	ldd	r24, Y+1	; 0x01
 bda:	9a 81       	ldd	r25, Y+2	; 0x02
 bdc:	88 0f       	add	r24, r24
 bde:	99 1f       	adc	r25, r25
 be0:	88 0f       	add	r24, r24
 be2:	99 1f       	adc	r25, r25
 be4:	fc 01       	movw	r30, r24
 be6:	e0 5a       	subi	r30, 0xA0	; 160
 be8:	ff 4f       	sbci	r31, 0xFF	; 255
 bea:	80 81       	ld	r24, Z
 bec:	83 30       	cpi	r24, 0x03	; 3
 bee:	09 f0       	breq	.+2      	; 0xbf2 <__stack+0x393>
 bf0:	99 c0       	rjmp	.+306    	; 0xd24 <__stack+0x4c5>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
 bf2:	89 81       	ldd	r24, Y+1	; 0x01
 bf4:	9a 81       	ldd	r25, Y+2	; 0x02
 bf6:	88 0f       	add	r24, r24
 bf8:	99 1f       	adc	r25, r25
 bfa:	01 96       	adiw	r24, 0x01	; 1
 bfc:	88 0f       	add	r24, r24
 bfe:	99 1f       	adc	r25, r25
 c00:	fc 01       	movw	r30, r24
 c02:	e0 5a       	subi	r30, 0xA0	; 160
 c04:	ff 4f       	sbci	r31, 0xFF	; 255
 c06:	80 81       	ld	r24, Z
 c08:	81 30       	cpi	r24, 0x01	; 1
 c0a:	e9 f4       	brne	.+58     	; 0xc46 <__stack+0x3e7>
				SET_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
 c0c:	a1 e3       	ldi	r26, 0x31	; 49
 c0e:	b0 e0       	ldi	r27, 0x00	; 0
 c10:	e1 e3       	ldi	r30, 0x31	; 49
 c12:	f0 e0       	ldi	r31, 0x00	; 0
 c14:	80 81       	ld	r24, Z
 c16:	48 2f       	mov	r20, r24
 c18:	89 81       	ldd	r24, Y+1	; 0x01
 c1a:	9a 81       	ldd	r25, Y+2	; 0x02
 c1c:	88 0f       	add	r24, r24
 c1e:	99 1f       	adc	r25, r25
 c20:	88 0f       	add	r24, r24
 c22:	99 1f       	adc	r25, r25
 c24:	fc 01       	movw	r30, r24
 c26:	ef 59       	subi	r30, 0x9F	; 159
 c28:	ff 4f       	sbci	r31, 0xFF	; 255
 c2a:	80 81       	ld	r24, Z
 c2c:	28 2f       	mov	r18, r24
 c2e:	30 e0       	ldi	r19, 0x00	; 0
 c30:	81 e0       	ldi	r24, 0x01	; 1
 c32:	90 e0       	ldi	r25, 0x00	; 0
 c34:	02 2e       	mov	r0, r18
 c36:	02 c0       	rjmp	.+4      	; 0xc3c <__stack+0x3dd>
 c38:	88 0f       	add	r24, r24
 c3a:	99 1f       	adc	r25, r25
 c3c:	0a 94       	dec	r0
 c3e:	e2 f7       	brpl	.-8      	; 0xc38 <__stack+0x3d9>
 c40:	84 2b       	or	r24, r20
 c42:	8c 93       	st	X, r24
 c44:	6f c0       	rjmp	.+222    	; 0xd24 <__stack+0x4c5>
			}else{
				CLR_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
 c46:	a1 e3       	ldi	r26, 0x31	; 49
 c48:	b0 e0       	ldi	r27, 0x00	; 0
 c4a:	e1 e3       	ldi	r30, 0x31	; 49
 c4c:	f0 e0       	ldi	r31, 0x00	; 0
 c4e:	80 81       	ld	r24, Z
 c50:	48 2f       	mov	r20, r24
 c52:	89 81       	ldd	r24, Y+1	; 0x01
 c54:	9a 81       	ldd	r25, Y+2	; 0x02
 c56:	88 0f       	add	r24, r24
 c58:	99 1f       	adc	r25, r25
 c5a:	88 0f       	add	r24, r24
 c5c:	99 1f       	adc	r25, r25
 c5e:	fc 01       	movw	r30, r24
 c60:	ef 59       	subi	r30, 0x9F	; 159
 c62:	ff 4f       	sbci	r31, 0xFF	; 255
 c64:	80 81       	ld	r24, Z
 c66:	28 2f       	mov	r18, r24
 c68:	30 e0       	ldi	r19, 0x00	; 0
 c6a:	81 e0       	ldi	r24, 0x01	; 1
 c6c:	90 e0       	ldi	r25, 0x00	; 0
 c6e:	02 2e       	mov	r0, r18
 c70:	02 c0       	rjmp	.+4      	; 0xc76 <__stack+0x417>
 c72:	88 0f       	add	r24, r24
 c74:	99 1f       	adc	r25, r25
 c76:	0a 94       	dec	r0
 c78:	e2 f7       	brpl	.-8      	; 0xc72 <__stack+0x413>
 c7a:	80 95       	com	r24
 c7c:	84 23       	and	r24, r20
 c7e:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
 c80:	89 81       	ldd	r24, Y+1	; 0x01
 c82:	9a 81       	ldd	r25, Y+2	; 0x02
 c84:	88 0f       	add	r24, r24
 c86:	99 1f       	adc	r25, r25
 c88:	88 0f       	add	r24, r24
 c8a:	99 1f       	adc	r25, r25
 c8c:	fc 01       	movw	r30, r24
 c8e:	ed 59       	subi	r30, 0x9D	; 157
 c90:	ff 4f       	sbci	r31, 0xFF	; 255
 c92:	80 81       	ld	r24, Z
 c94:	81 30       	cpi	r24, 0x01	; 1
 c96:	e9 f4       	brne	.+58     	; 0xcd2 <__stack+0x473>
					SET_BIT(PORTD,Dio_CfgPinsArray[i].Pin);
 c98:	a2 e3       	ldi	r26, 0x32	; 50
 c9a:	b0 e0       	ldi	r27, 0x00	; 0
 c9c:	e2 e3       	ldi	r30, 0x32	; 50
 c9e:	f0 e0       	ldi	r31, 0x00	; 0
 ca0:	80 81       	ld	r24, Z
 ca2:	48 2f       	mov	r20, r24
 ca4:	89 81       	ldd	r24, Y+1	; 0x01
 ca6:	9a 81       	ldd	r25, Y+2	; 0x02
 ca8:	88 0f       	add	r24, r24
 caa:	99 1f       	adc	r25, r25
 cac:	88 0f       	add	r24, r24
 cae:	99 1f       	adc	r25, r25
 cb0:	fc 01       	movw	r30, r24
 cb2:	ef 59       	subi	r30, 0x9F	; 159
 cb4:	ff 4f       	sbci	r31, 0xFF	; 255
 cb6:	80 81       	ld	r24, Z
 cb8:	28 2f       	mov	r18, r24
 cba:	30 e0       	ldi	r19, 0x00	; 0
 cbc:	81 e0       	ldi	r24, 0x01	; 1
 cbe:	90 e0       	ldi	r25, 0x00	; 0
 cc0:	02 2e       	mov	r0, r18
 cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <__stack+0x469>
 cc4:	88 0f       	add	r24, r24
 cc6:	99 1f       	adc	r25, r25
 cc8:	0a 94       	dec	r0
 cca:	e2 f7       	brpl	.-8      	; 0xcc4 <__stack+0x465>
 ccc:	84 2b       	or	r24, r20
 cce:	8c 93       	st	X, r24
 cd0:	29 c0       	rjmp	.+82     	; 0xd24 <__stack+0x4c5>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
 cd2:	89 81       	ldd	r24, Y+1	; 0x01
 cd4:	9a 81       	ldd	r25, Y+2	; 0x02
 cd6:	88 0f       	add	r24, r24
 cd8:	99 1f       	adc	r25, r25
 cda:	88 0f       	add	r24, r24
 cdc:	99 1f       	adc	r25, r25
 cde:	fc 01       	movw	r30, r24
 ce0:	ed 59       	subi	r30, 0x9D	; 157
 ce2:	ff 4f       	sbci	r31, 0xFF	; 255
 ce4:	80 81       	ld	r24, Z
 ce6:	81 30       	cpi	r24, 0x01	; 1
 ce8:	e9 f4       	brne	.+58     	; 0xd24 <__stack+0x4c5>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
 cea:	ab e3       	ldi	r26, 0x3B	; 59
 cec:	b0 e0       	ldi	r27, 0x00	; 0
 cee:	eb e3       	ldi	r30, 0x3B	; 59
 cf0:	f0 e0       	ldi	r31, 0x00	; 0
 cf2:	80 81       	ld	r24, Z
 cf4:	48 2f       	mov	r20, r24
 cf6:	89 81       	ldd	r24, Y+1	; 0x01
 cf8:	9a 81       	ldd	r25, Y+2	; 0x02
 cfa:	88 0f       	add	r24, r24
 cfc:	99 1f       	adc	r25, r25
 cfe:	88 0f       	add	r24, r24
 d00:	99 1f       	adc	r25, r25
 d02:	fc 01       	movw	r30, r24
 d04:	ef 59       	subi	r30, 0x9F	; 159
 d06:	ff 4f       	sbci	r31, 0xFF	; 255
 d08:	80 81       	ld	r24, Z
 d0a:	28 2f       	mov	r18, r24
 d0c:	30 e0       	ldi	r19, 0x00	; 0
 d0e:	81 e0       	ldi	r24, 0x01	; 1
 d10:	90 e0       	ldi	r25, 0x00	; 0
 d12:	02 2e       	mov	r0, r18
 d14:	02 c0       	rjmp	.+4      	; 0xd1a <__stack+0x4bb>
 d16:	88 0f       	add	r24, r24
 d18:	99 1f       	adc	r25, r25
 d1a:	0a 94       	dec	r0
 d1c:	e2 f7       	brpl	.-8      	; 0xd16 <__stack+0x4b7>
 d1e:	80 95       	com	r24
 d20:	84 23       	and	r24, r20
 d22:	8c 93       	st	X, r24


ES_t DIO_ES_tInit(void)
{
	int i = 0;
	for(i=0 ; i<PIN_COUNT ; i++){
 d24:	89 81       	ldd	r24, Y+1	; 0x01
 d26:	9a 81       	ldd	r25, Y+2	; 0x02
 d28:	01 96       	adiw	r24, 0x01	; 1
 d2a:	9a 83       	std	Y+2, r25	; 0x02
 d2c:	89 83       	std	Y+1, r24	; 0x01
 d2e:	89 81       	ldd	r24, Y+1	; 0x01
 d30:	9a 81       	ldd	r25, Y+2	; 0x02
 d32:	84 30       	cpi	r24, 0x04	; 4
 d34:	91 05       	cpc	r25, r1
 d36:	0c f4       	brge	.+2      	; 0xd3a <__stack+0x4db>
 d38:	57 cd       	rjmp	.-1362   	; 0x7e8 <DIO_ES_tInit+0x14>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
				}
			}
		}
	}
	return ES_OK;
 d3a:	80 e0       	ldi	r24, 0x00	; 0
}
 d3c:	0f 90       	pop	r0
 d3e:	0f 90       	pop	r0
 d40:	cf 91       	pop	r28
 d42:	df 91       	pop	r29
 d44:	08 95       	ret

00000d46 <main>:

#include "../MCAL/Dio/Dio_interface.h"


int main()
{
 d46:	df 93       	push	r29
 d48:	cf 93       	push	r28
 d4a:	00 d0       	rcall	.+0      	; 0xd4c <main+0x6>
 d4c:	cd b7       	in	r28, 0x3d	; 61
 d4e:	de b7       	in	r29, 0x3e	; 62
	u8 Switch_Value,Switch2_Value;

	// Do the initialization of A1,C7, and B5 internally
	DIO_ES_tInit();
 d50:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_ES_tInit>

	DIO_ES_tSetPinDirection(DIO_U8_PORT_B, DIO_U8_PIN_3, OUTPUT);
 d54:	81 e0       	ldi	r24, 0x01	; 1
 d56:	63 e0       	ldi	r22, 0x03	; 3
 d58:	41 e0       	ldi	r20, 0x01	; 1
 d5a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(DIO_U8_PORT_C, DIO_U8_PIN_2, INPUT);
 d5e:	82 e0       	ldi	r24, 0x02	; 2
 d60:	62 e0       	ldi	r22, 0x02	; 2
 d62:	40 e0       	ldi	r20, 0x00	; 0
 d64:	0e 94 41 00 	call	0x82	; 0x82 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPortDirection(DIO_U8_PORT_D,OUTPUT);
 d68:	83 e0       	ldi	r24, 0x03	; 3
 d6a:	61 e0       	ldi	r22, 0x01	; 1
 d6c:	0e 94 99 02 	call	0x532	; 0x532 <DIO_ES_tSetPortDirection>
	while(1)
	{
		DIO_ES_tSetPortValue(DIO_U8_PORT_D,HIGH);
 d70:	83 e0       	ldi	r24, 0x03	; 3
 d72:	61 e0       	ldi	r22, 0x01	; 1
 d74:	0e 94 07 03 	call	0x60e	; 0x60e <DIO_ES_tSetPortValue>
		DIO_ES_tGetPinValue(DIO_U8_PORT_C, DIO_U8_PIN_2, &Switch_Value);
 d78:	82 e0       	ldi	r24, 0x02	; 2
 d7a:	62 e0       	ldi	r22, 0x02	; 2
 d7c:	9e 01       	movw	r18, r28
 d7e:	2f 5f       	subi	r18, 0xFF	; 255
 d80:	3f 4f       	sbci	r19, 0xFF	; 255
 d82:	a9 01       	movw	r20, r18
 d84:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_ES_tGetPinValue>
		DIO_ES_tGetPinValue(DIO_U8_PORT_A, DIO_U8_PIN_1, &Switch2_Value);
 d88:	9e 01       	movw	r18, r28
 d8a:	2e 5f       	subi	r18, 0xFE	; 254
 d8c:	3f 4f       	sbci	r19, 0xFF	; 255
 d8e:	80 e0       	ldi	r24, 0x00	; 0
 d90:	61 e0       	ldi	r22, 0x01	; 1
 d92:	a9 01       	movw	r20, r18
 d94:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_ES_tGetPinValue>
		if(Switch_Value == HIGH){
 d98:	89 81       	ldd	r24, Y+1	; 0x01
 d9a:	81 30       	cpi	r24, 0x01	; 1
 d9c:	31 f4       	brne	.+12     	; 0xdaa <main+0x64>
			DIO_ES_tSetPinValue(DIO_U8_PORT_B, DIO_U8_PIN_3, HIGH);
 d9e:	81 e0       	ldi	r24, 0x01	; 1
 da0:	63 e0       	ldi	r22, 0x03	; 3
 da2:	41 e0       	ldi	r20, 0x01	; 1
 da4:	0e 94 30 01 	call	0x260	; 0x260 <DIO_ES_tSetPinValue>
 da8:	05 c0       	rjmp	.+10     	; 0xdb4 <main+0x6e>
		}else{
			DIO_ES_tSetPinValue(DIO_U8_PORT_B, DIO_U8_PIN_3, LOW);
 daa:	81 e0       	ldi	r24, 0x01	; 1
 dac:	63 e0       	ldi	r22, 0x03	; 3
 dae:	40 e0       	ldi	r20, 0x00	; 0
 db0:	0e 94 30 01 	call	0x260	; 0x260 <DIO_ES_tSetPinValue>
		}
		if(Switch2_Value == HIGH){
 db4:	8a 81       	ldd	r24, Y+2	; 0x02
 db6:	81 30       	cpi	r24, 0x01	; 1
 db8:	59 f4       	brne	.+22     	; 0xdd0 <main+0x8a>
			DIO_ES_tSetPinValue(DIO_U8_PORT_B, DIO_U8_PIN_5, HIGH);
 dba:	81 e0       	ldi	r24, 0x01	; 1
 dbc:	65 e0       	ldi	r22, 0x05	; 5
 dbe:	41 e0       	ldi	r20, 0x01	; 1
 dc0:	0e 94 30 01 	call	0x260	; 0x260 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DIO_U8_PORT_C, DIO_U8_PIN_7, HIGH);
 dc4:	82 e0       	ldi	r24, 0x02	; 2
 dc6:	67 e0       	ldi	r22, 0x07	; 7
 dc8:	41 e0       	ldi	r20, 0x01	; 1
 dca:	0e 94 30 01 	call	0x260	; 0x260 <DIO_ES_tSetPinValue>
 dce:	d0 cf       	rjmp	.-96     	; 0xd70 <main+0x2a>
		}else{
			DIO_ES_tSetPinValue(DIO_U8_PORT_B, DIO_U8_PIN_5, LOW);
 dd0:	81 e0       	ldi	r24, 0x01	; 1
 dd2:	65 e0       	ldi	r22, 0x05	; 5
 dd4:	40 e0       	ldi	r20, 0x00	; 0
 dd6:	0e 94 30 01 	call	0x260	; 0x260 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DIO_U8_PORT_C, DIO_U8_PIN_7, LOW);
 dda:	82 e0       	ldi	r24, 0x02	; 2
 ddc:	67 e0       	ldi	r22, 0x07	; 7
 dde:	40 e0       	ldi	r20, 0x00	; 0
 de0:	0e 94 30 01 	call	0x260	; 0x260 <DIO_ES_tSetPinValue>
 de4:	c5 cf       	rjmp	.-118    	; 0xd70 <main+0x2a>

00000de6 <_exit>:
 de6:	f8 94       	cli

00000de8 <__stop_program>:
 de8:	ff cf       	rjmp	.-2      	; 0xde8 <__stop_program>
