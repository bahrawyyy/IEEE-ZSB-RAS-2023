
LCD_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  000029d0  00002a44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000219c  00000000  00000000  00002aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000012eb  00000000  00000000  00004c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00005f2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  0000608f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  0000621e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00008263  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00009364  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000a2e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000a468  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000a72a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000afb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ed       	ldi	r30, 0xD0	; 208
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3c       	cpi	r26, 0xC2	; 194
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 4b 13 	call	0x2696	; 0x2696 <main>
      7a:	0c 94 e6 14 	jmp	0x29cc	; 0x29cc <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 af 14 	jmp	0x295e	; 0x295e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ae e6       	ldi	r26, 0x6E	; 110
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 cb 14 	jmp	0x2996	; 0x2996 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 bb 14 	jmp	0x2976	; 0x2976 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 d7 14 	jmp	0x29ae	; 0x29ae <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 bb 14 	jmp	0x2976	; 0x2976 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 d7 14 	jmp	0x29ae	; 0x29ae <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 af 14 	jmp	0x295e	; 0x295e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8e e6       	ldi	r24, 0x6E	; 110
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 cb 14 	jmp	0x2996	; 0x2996 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 b7 14 	jmp	0x296e	; 0x296e <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6e e6       	ldi	r22, 0x6E	; 110
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 d3 14 	jmp	0x29a6	; 0x29a6 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 bb 14 	jmp	0x2976	; 0x2976 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 d7 14 	jmp	0x29ae	; 0x29ae <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 bb 14 	jmp	0x2976	; 0x2976 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 d7 14 	jmp	0x29ae	; 0x29ae <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 bb 14 	jmp	0x2976	; 0x2976 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 d7 14 	jmp	0x29ae	; 0x29ae <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 bf 14 	jmp	0x297e	; 0x297e <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DIO_ES_tSetPinDirection>:
 * DIO_ES_tSetPinDirection is used to set pin direction
 * ( INPUT or OUTPUT )
 */

ES_t DIO_ES_tSetPinDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Dir_Type copy_u8_PinDirection)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	00 d0       	rcall	.+0      	; 0xc94 <DIO_ES_tSetPinDirection+0x6>
     c94:	00 d0       	rcall	.+0      	; 0xc96 <DIO_ES_tSetPinDirection+0x8>
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	89 83       	std	Y+1, r24	; 0x01
     c9c:	6a 83       	std	Y+2, r22	; 0x02
     c9e:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
     ca0:	8a 81       	ldd	r24, Y+2	; 0x02
     ca2:	88 30       	cpi	r24, 0x08	; 8
     ca4:	18 f0       	brcs	.+6      	; 0xcac <DIO_ES_tSetPinDirection+0x1e>
		return ES_NOT_OK;
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	8c 83       	std	Y+4, r24	; 0x04
     caa:	d8 c0       	rjmp	.+432    	; 0xe5c <DIO_ES_tSetPinDirection+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	88 23       	and	r24, r24
     cb0:	91 f5       	brne	.+100    	; 0xd16 <DIO_ES_tSetPinDirection+0x88>
		if(copy_u8_PinDirection == OUTPUT){
     cb2:	8b 81       	ldd	r24, Y+3	; 0x03
     cb4:	81 30       	cpi	r24, 0x01	; 1
     cb6:	a1 f4       	brne	.+40     	; 0xce0 <DIO_ES_tSetPinDirection+0x52>
			SET_BIT(DDRA,copy_u8_PinId);
     cb8:	aa e3       	ldi	r26, 0x3A	; 58
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	ea e3       	ldi	r30, 0x3A	; 58
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	48 2f       	mov	r20, r24
     cc4:	8a 81       	ldd	r24, Y+2	; 0x02
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	02 2e       	mov	r0, r18
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <DIO_ES_tSetPinDirection+0x48>
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	0a 94       	dec	r0
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <DIO_ES_tSetPinDirection+0x44>
     cda:	84 2b       	or	r24, r20
     cdc:	8c 93       	st	X, r24
     cde:	bd c0       	rjmp	.+378    	; 0xe5a <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	88 23       	and	r24, r24
     ce4:	a9 f4       	brne	.+42     	; 0xd10 <DIO_ES_tSetPinDirection+0x82>
			CLR_BIT(DDRA,copy_u8_PinId);
     ce6:	aa e3       	ldi	r26, 0x3A	; 58
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	ea e3       	ldi	r30, 0x3A	; 58
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	48 2f       	mov	r20, r24
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	02 2e       	mov	r0, r18
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <DIO_ES_tSetPinDirection+0x76>
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	0a 94       	dec	r0
     d06:	e2 f7       	brpl	.-8      	; 0xd00 <DIO_ES_tSetPinDirection+0x72>
     d08:	80 95       	com	r24
     d0a:	84 23       	and	r24, r20
     d0c:	8c 93       	st	X, r24
     d0e:	a5 c0       	rjmp	.+330    	; 0xe5a <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	8c 83       	std	Y+4, r24	; 0x04
     d14:	a3 c0       	rjmp	.+326    	; 0xe5c <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	81 30       	cpi	r24, 0x01	; 1
     d1a:	91 f5       	brne	.+100    	; 0xd80 <DIO_ES_tSetPinDirection+0xf2>
		if(copy_u8_PinDirection == OUTPUT){
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	a1 f4       	brne	.+40     	; 0xd4a <DIO_ES_tSetPinDirection+0xbc>
			SET_BIT(DDRB,copy_u8_PinId);
     d22:	a7 e3       	ldi	r26, 0x37	; 55
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e7 e3       	ldi	r30, 0x37	; 55
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	48 2f       	mov	r20, r24
     d2e:	8a 81       	ldd	r24, Y+2	; 0x02
     d30:	28 2f       	mov	r18, r24
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	02 2e       	mov	r0, r18
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <DIO_ES_tSetPinDirection+0xb2>
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	0a 94       	dec	r0
     d42:	e2 f7       	brpl	.-8      	; 0xd3c <DIO_ES_tSetPinDirection+0xae>
     d44:	84 2b       	or	r24, r20
     d46:	8c 93       	st	X, r24
     d48:	88 c0       	rjmp	.+272    	; 0xe5a <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	88 23       	and	r24, r24
     d4e:	a9 f4       	brne	.+42     	; 0xd7a <DIO_ES_tSetPinDirection+0xec>
			CLR_BIT(DDRB,copy_u8_PinId);
     d50:	a7 e3       	ldi	r26, 0x37	; 55
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	e7 e3       	ldi	r30, 0x37	; 55
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	48 2f       	mov	r20, r24
     d5c:	8a 81       	ldd	r24, Y+2	; 0x02
     d5e:	28 2f       	mov	r18, r24
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	02 2e       	mov	r0, r18
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <DIO_ES_tSetPinDirection+0xe0>
     d6a:	88 0f       	add	r24, r24
     d6c:	99 1f       	adc	r25, r25
     d6e:	0a 94       	dec	r0
     d70:	e2 f7       	brpl	.-8      	; 0xd6a <DIO_ES_tSetPinDirection+0xdc>
     d72:	80 95       	com	r24
     d74:	84 23       	and	r24, r20
     d76:	8c 93       	st	X, r24
     d78:	70 c0       	rjmp	.+224    	; 0xe5a <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	8c 83       	std	Y+4, r24	; 0x04
     d7e:	6e c0       	rjmp	.+220    	; 0xe5c <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	82 30       	cpi	r24, 0x02	; 2
     d84:	91 f5       	brne	.+100    	; 0xdea <DIO_ES_tSetPinDirection+0x15c>
		if(copy_u8_PinDirection == OUTPUT){
     d86:	8b 81       	ldd	r24, Y+3	; 0x03
     d88:	81 30       	cpi	r24, 0x01	; 1
     d8a:	a1 f4       	brne	.+40     	; 0xdb4 <DIO_ES_tSetPinDirection+0x126>
			SET_BIT(DDRC,copy_u8_PinId);
     d8c:	a4 e3       	ldi	r26, 0x34	; 52
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e4 e3       	ldi	r30, 0x34	; 52
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	48 2f       	mov	r20, r24
     d98:	8a 81       	ldd	r24, Y+2	; 0x02
     d9a:	28 2f       	mov	r18, r24
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	02 2e       	mov	r0, r18
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <DIO_ES_tSetPinDirection+0x11c>
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	0a 94       	dec	r0
     dac:	e2 f7       	brpl	.-8      	; 0xda6 <DIO_ES_tSetPinDirection+0x118>
     dae:	84 2b       	or	r24, r20
     db0:	8c 93       	st	X, r24
     db2:	53 c0       	rjmp	.+166    	; 0xe5a <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
     db4:	8b 81       	ldd	r24, Y+3	; 0x03
     db6:	88 23       	and	r24, r24
     db8:	a9 f4       	brne	.+42     	; 0xde4 <DIO_ES_tSetPinDirection+0x156>
			CLR_BIT(DDRC,copy_u8_PinId);
     dba:	a4 e3       	ldi	r26, 0x34	; 52
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e4 e3       	ldi	r30, 0x34	; 52
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	48 2f       	mov	r20, r24
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	02 2e       	mov	r0, r18
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <DIO_ES_tSetPinDirection+0x14a>
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	0a 94       	dec	r0
     dda:	e2 f7       	brpl	.-8      	; 0xdd4 <DIO_ES_tSetPinDirection+0x146>
     ddc:	80 95       	com	r24
     dde:	84 23       	and	r24, r20
     de0:	8c 93       	st	X, r24
     de2:	3b c0       	rjmp	.+118    	; 0xe5a <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	8c 83       	std	Y+4, r24	; 0x04
     de8:	39 c0       	rjmp	.+114    	; 0xe5c <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	83 30       	cpi	r24, 0x03	; 3
     dee:	91 f5       	brne	.+100    	; 0xe54 <DIO_ES_tSetPinDirection+0x1c6>
		if(copy_u8_PinDirection == OUTPUT){
     df0:	8b 81       	ldd	r24, Y+3	; 0x03
     df2:	81 30       	cpi	r24, 0x01	; 1
     df4:	a1 f4       	brne	.+40     	; 0xe1e <DIO_ES_tSetPinDirection+0x190>
			SET_BIT(DDRD,copy_u8_PinId);
     df6:	a1 e3       	ldi	r26, 0x31	; 49
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e1 e3       	ldi	r30, 0x31	; 49
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	48 2f       	mov	r20, r24
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	02 2e       	mov	r0, r18
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <DIO_ES_tSetPinDirection+0x186>
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	0a 94       	dec	r0
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <DIO_ES_tSetPinDirection+0x182>
     e18:	84 2b       	or	r24, r20
     e1a:	8c 93       	st	X, r24
     e1c:	1e c0       	rjmp	.+60     	; 0xe5a <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	88 23       	and	r24, r24
     e22:	a9 f4       	brne	.+42     	; 0xe4e <DIO_ES_tSetPinDirection+0x1c0>
			CLR_BIT(DDRD,copy_u8_PinId);
     e24:	a1 e3       	ldi	r26, 0x31	; 49
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	e1 e3       	ldi	r30, 0x31	; 49
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	48 2f       	mov	r20, r24
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	02 2e       	mov	r0, r18
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <DIO_ES_tSetPinDirection+0x1b4>
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	0a 94       	dec	r0
     e44:	e2 f7       	brpl	.-8      	; 0xe3e <DIO_ES_tSetPinDirection+0x1b0>
     e46:	80 95       	com	r24
     e48:	84 23       	and	r24, r20
     e4a:	8c 93       	st	X, r24
     e4c:	06 c0       	rjmp	.+12     	; 0xe5a <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	8c 83       	std	Y+4, r24	; 0x04
     e52:	04 c0       	rjmp	.+8      	; 0xe5c <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else{
		return ES_NOT_OK;
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	8c 83       	std	Y+4, r24	; 0x04
     e58:	01 c0       	rjmp	.+2      	; 0xe5c <DIO_ES_tSetPinDirection+0x1ce>
	}
	return ES_OK;
     e5a:	1c 82       	std	Y+4, r1	; 0x04
     e5c:	8c 81       	ldd	r24, Y+4	; 0x04
}
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
     e62:	0f 90       	pop	r0
     e64:	0f 90       	pop	r0
     e66:	cf 91       	pop	r28
     e68:	df 91       	pop	r29
     e6a:	08 95       	ret

00000e6c <DIO_ES_tSetPinValue>:
 * DIO_ES_tSetPinValue is used to set pin value
 * ( LOW or HIGH )
 */

ES_t DIO_ES_tSetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type copy_u8_PinValue)
{
     e6c:	df 93       	push	r29
     e6e:	cf 93       	push	r28
     e70:	00 d0       	rcall	.+0      	; 0xe72 <DIO_ES_tSetPinValue+0x6>
     e72:	00 d0       	rcall	.+0      	; 0xe74 <DIO_ES_tSetPinValue+0x8>
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
     e78:	89 83       	std	Y+1, r24	; 0x01
     e7a:	6a 83       	std	Y+2, r22	; 0x02
     e7c:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	88 30       	cpi	r24, 0x08	; 8
     e82:	18 f0       	brcs	.+6      	; 0xe8a <DIO_ES_tSetPinValue+0x1e>
		return ES_NOT_OK;
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	8c 83       	std	Y+4, r24	; 0x04
     e88:	d8 c0       	rjmp	.+432    	; 0x103a <DIO_ES_tSetPinValue+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	88 23       	and	r24, r24
     e8e:	91 f5       	brne	.+100    	; 0xef4 <DIO_ES_tSetPinValue+0x88>
		if(copy_u8_PinValue == HIGH){
     e90:	8b 81       	ldd	r24, Y+3	; 0x03
     e92:	81 30       	cpi	r24, 0x01	; 1
     e94:	a1 f4       	brne	.+40     	; 0xebe <DIO_ES_tSetPinValue+0x52>
			SET_BIT(PORTA,copy_u8_PinId);
     e96:	ab e3       	ldi	r26, 0x3B	; 59
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	eb e3       	ldi	r30, 0x3B	; 59
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	48 2f       	mov	r20, r24
     ea2:	8a 81       	ldd	r24, Y+2	; 0x02
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	02 2e       	mov	r0, r18
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <DIO_ES_tSetPinValue+0x48>
     eb0:	88 0f       	add	r24, r24
     eb2:	99 1f       	adc	r25, r25
     eb4:	0a 94       	dec	r0
     eb6:	e2 f7       	brpl	.-8      	; 0xeb0 <DIO_ES_tSetPinValue+0x44>
     eb8:	84 2b       	or	r24, r20
     eba:	8c 93       	st	X, r24
     ebc:	bd c0       	rjmp	.+378    	; 0x1038 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
     ebe:	8b 81       	ldd	r24, Y+3	; 0x03
     ec0:	88 23       	and	r24, r24
     ec2:	a9 f4       	brne	.+42     	; 0xeee <DIO_ES_tSetPinValue+0x82>
			CLR_BIT(PORTA,copy_u8_PinId);
     ec4:	ab e3       	ldi	r26, 0x3B	; 59
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	eb e3       	ldi	r30, 0x3B	; 59
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	48 2f       	mov	r20, r24
     ed0:	8a 81       	ldd	r24, Y+2	; 0x02
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	02 2e       	mov	r0, r18
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <DIO_ES_tSetPinValue+0x76>
     ede:	88 0f       	add	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	0a 94       	dec	r0
     ee4:	e2 f7       	brpl	.-8      	; 0xede <DIO_ES_tSetPinValue+0x72>
     ee6:	80 95       	com	r24
     ee8:	84 23       	and	r24, r20
     eea:	8c 93       	st	X, r24
     eec:	a5 c0       	rjmp	.+330    	; 0x1038 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	8c 83       	std	Y+4, r24	; 0x04
     ef2:	a3 c0       	rjmp	.+326    	; 0x103a <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	81 30       	cpi	r24, 0x01	; 1
     ef8:	91 f5       	brne	.+100    	; 0xf5e <DIO_ES_tSetPinValue+0xf2>
		if(copy_u8_PinValue == HIGH){
     efa:	8b 81       	ldd	r24, Y+3	; 0x03
     efc:	81 30       	cpi	r24, 0x01	; 1
     efe:	a1 f4       	brne	.+40     	; 0xf28 <DIO_ES_tSetPinValue+0xbc>
			SET_BIT(PORTB,copy_u8_PinId);
     f00:	a8 e3       	ldi	r26, 0x38	; 56
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e8 e3       	ldi	r30, 0x38	; 56
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	48 2f       	mov	r20, r24
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 2e       	mov	r0, r18
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <DIO_ES_tSetPinValue+0xb2>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	0a 94       	dec	r0
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <DIO_ES_tSetPinValue+0xae>
     f22:	84 2b       	or	r24, r20
     f24:	8c 93       	st	X, r24
     f26:	88 c0       	rjmp	.+272    	; 0x1038 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	88 23       	and	r24, r24
     f2c:	a9 f4       	brne	.+42     	; 0xf58 <DIO_ES_tSetPinValue+0xec>
			CLR_BIT(PORTB,copy_u8_PinId);
     f2e:	a8 e3       	ldi	r26, 0x38	; 56
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e8 e3       	ldi	r30, 0x38	; 56
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	48 2f       	mov	r20, r24
     f3a:	8a 81       	ldd	r24, Y+2	; 0x02
     f3c:	28 2f       	mov	r18, r24
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	02 2e       	mov	r0, r18
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <DIO_ES_tSetPinValue+0xe0>
     f48:	88 0f       	add	r24, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	0a 94       	dec	r0
     f4e:	e2 f7       	brpl	.-8      	; 0xf48 <DIO_ES_tSetPinValue+0xdc>
     f50:	80 95       	com	r24
     f52:	84 23       	and	r24, r20
     f54:	8c 93       	st	X, r24
     f56:	70 c0       	rjmp	.+224    	; 0x1038 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	8c 83       	std	Y+4, r24	; 0x04
     f5c:	6e c0       	rjmp	.+220    	; 0x103a <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	82 30       	cpi	r24, 0x02	; 2
     f62:	91 f5       	brne	.+100    	; 0xfc8 <DIO_ES_tSetPinValue+0x15c>
		if(copy_u8_PinValue == HIGH){
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	81 30       	cpi	r24, 0x01	; 1
     f68:	a1 f4       	brne	.+40     	; 0xf92 <DIO_ES_tSetPinValue+0x126>
			SET_BIT(PORTC,copy_u8_PinId);
     f6a:	a5 e3       	ldi	r26, 0x35	; 53
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e5 e3       	ldi	r30, 0x35	; 53
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	48 2f       	mov	r20, r24
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	02 2e       	mov	r0, r18
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <DIO_ES_tSetPinValue+0x11c>
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	0a 94       	dec	r0
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <DIO_ES_tSetPinValue+0x118>
     f8c:	84 2b       	or	r24, r20
     f8e:	8c 93       	st	X, r24
     f90:	53 c0       	rjmp	.+166    	; 0x1038 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 23       	and	r24, r24
     f96:	a9 f4       	brne	.+42     	; 0xfc2 <DIO_ES_tSetPinValue+0x156>
			CLR_BIT(PORTC,copy_u8_PinId);
     f98:	a5 e3       	ldi	r26, 0x35	; 53
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e5 e3       	ldi	r30, 0x35	; 53
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	48 2f       	mov	r20, r24
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	02 2e       	mov	r0, r18
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <DIO_ES_tSetPinValue+0x14a>
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	0a 94       	dec	r0
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <DIO_ES_tSetPinValue+0x146>
     fba:	80 95       	com	r24
     fbc:	84 23       	and	r24, r20
     fbe:	8c 93       	st	X, r24
     fc0:	3b c0       	rjmp	.+118    	; 0x1038 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	8c 83       	std	Y+4, r24	; 0x04
     fc6:	39 c0       	rjmp	.+114    	; 0x103a <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	83 30       	cpi	r24, 0x03	; 3
     fcc:	91 f5       	brne	.+100    	; 0x1032 <DIO_ES_tSetPinValue+0x1c6>
		if(copy_u8_PinValue == HIGH){
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	81 30       	cpi	r24, 0x01	; 1
     fd2:	a1 f4       	brne	.+40     	; 0xffc <DIO_ES_tSetPinValue+0x190>
			SET_BIT(PORTD,copy_u8_PinId);
     fd4:	a2 e3       	ldi	r26, 0x32	; 50
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e2 e3       	ldi	r30, 0x32	; 50
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	48 2f       	mov	r20, r24
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	02 2e       	mov	r0, r18
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <DIO_ES_tSetPinValue+0x186>
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	0a 94       	dec	r0
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <DIO_ES_tSetPinValue+0x182>
     ff6:	84 2b       	or	r24, r20
     ff8:	8c 93       	st	X, r24
     ffa:	1e c0       	rjmp	.+60     	; 0x1038 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	88 23       	and	r24, r24
    1000:	a9 f4       	brne	.+42     	; 0x102c <DIO_ES_tSetPinValue+0x1c0>
			CLR_BIT(PORTD,copy_u8_PinId);
    1002:	a2 e3       	ldi	r26, 0x32	; 50
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e2 e3       	ldi	r30, 0x32	; 50
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	48 2f       	mov	r20, r24
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	02 2e       	mov	r0, r18
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <DIO_ES_tSetPinValue+0x1b4>
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	0a 94       	dec	r0
    1022:	e2 f7       	brpl	.-8      	; 0x101c <DIO_ES_tSetPinValue+0x1b0>
    1024:	80 95       	com	r24
    1026:	84 23       	and	r24, r20
    1028:	8c 93       	st	X, r24
    102a:	06 c0       	rjmp	.+12     	; 0x1038 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	8c 83       	std	Y+4, r24	; 0x04
    1030:	04 c0       	rjmp	.+8      	; 0x103a <DIO_ES_tSetPinValue+0x1ce>
		}
	}else{
		return ES_NOT_OK;
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	8c 83       	std	Y+4, r24	; 0x04
    1036:	01 c0       	rjmp	.+2      	; 0x103a <DIO_ES_tSetPinValue+0x1ce>
	}
	return ES_OK;
    1038:	1c 82       	std	Y+4, r1	; 0x04
    103a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	08 95       	ret

0000104a <DIO_ES_tGetPinValue>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tGetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type* copy_pu8_PinValue)
{
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	00 d0       	rcall	.+0      	; 0x1050 <DIO_ES_tGetPinValue+0x6>
    1050:	00 d0       	rcall	.+0      	; 0x1052 <DIO_ES_tGetPinValue+0x8>
    1052:	0f 92       	push	r0
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	89 83       	std	Y+1, r24	; 0x01
    105a:	6a 83       	std	Y+2, r22	; 0x02
    105c:	5c 83       	std	Y+4, r21	; 0x04
    105e:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	88 30       	cpi	r24, 0x08	; 8
    1064:	18 f0       	brcs	.+6      	; 0x106c <DIO_ES_tGetPinValue+0x22>
		return ES_NOT_OK;
    1066:	41 e0       	ldi	r20, 0x01	; 1
    1068:	4d 83       	std	Y+5, r20	; 0x05
    106a:	60 c0       	rjmp	.+192    	; 0x112c <DIO_ES_tGetPinValue+0xe2>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    106c:	89 81       	ldd	r24, Y+1	; 0x01
    106e:	88 23       	and	r24, r24
    1070:	a1 f4       	brne	.+40     	; 0x109a <DIO_ES_tGetPinValue+0x50>
		*copy_pu8_PinValue = GET_BIT(PINA,copy_u8_PinId);
    1072:	e9 e3       	ldi	r30, 0x39	; 57
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	8a 81       	ldd	r24, Y+2	; 0x02
    107e:	88 2f       	mov	r24, r24
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	a9 01       	movw	r20, r18
    1084:	02 c0       	rjmp	.+4      	; 0x108a <DIO_ES_tGetPinValue+0x40>
    1086:	55 95       	asr	r21
    1088:	47 95       	ror	r20
    108a:	8a 95       	dec	r24
    108c:	e2 f7       	brpl	.-8      	; 0x1086 <DIO_ES_tGetPinValue+0x3c>
    108e:	ca 01       	movw	r24, r20
    1090:	81 70       	andi	r24, 0x01	; 1
    1092:	eb 81       	ldd	r30, Y+3	; 0x03
    1094:	fc 81       	ldd	r31, Y+4	; 0x04
    1096:	80 83       	st	Z, r24
    1098:	48 c0       	rjmp	.+144    	; 0x112a <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	81 30       	cpi	r24, 0x01	; 1
    109e:	a1 f4       	brne	.+40     	; 0x10c8 <DIO_ES_tGetPinValue+0x7e>
		*copy_pu8_PinValue = GET_BIT(PINB,copy_u8_PinId);
    10a0:	e6 e3       	ldi	r30, 0x36	; 54
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	88 2f       	mov	r24, r24
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	a9 01       	movw	r20, r18
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <DIO_ES_tGetPinValue+0x6e>
    10b4:	55 95       	asr	r21
    10b6:	47 95       	ror	r20
    10b8:	8a 95       	dec	r24
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <DIO_ES_tGetPinValue+0x6a>
    10bc:	ca 01       	movw	r24, r20
    10be:	81 70       	andi	r24, 0x01	; 1
    10c0:	eb 81       	ldd	r30, Y+3	; 0x03
    10c2:	fc 81       	ldd	r31, Y+4	; 0x04
    10c4:	80 83       	st	Z, r24
    10c6:	31 c0       	rjmp	.+98     	; 0x112a <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	82 30       	cpi	r24, 0x02	; 2
    10cc:	a1 f4       	brne	.+40     	; 0x10f6 <DIO_ES_tGetPinValue+0xac>
		*copy_pu8_PinValue = GET_BIT(PINC,copy_u8_PinId);
    10ce:	e3 e3       	ldi	r30, 0x33	; 51
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	88 2f       	mov	r24, r24
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	a9 01       	movw	r20, r18
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <DIO_ES_tGetPinValue+0x9c>
    10e2:	55 95       	asr	r21
    10e4:	47 95       	ror	r20
    10e6:	8a 95       	dec	r24
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <DIO_ES_tGetPinValue+0x98>
    10ea:	ca 01       	movw	r24, r20
    10ec:	81 70       	andi	r24, 0x01	; 1
    10ee:	eb 81       	ldd	r30, Y+3	; 0x03
    10f0:	fc 81       	ldd	r31, Y+4	; 0x04
    10f2:	80 83       	st	Z, r24
    10f4:	1a c0       	rjmp	.+52     	; 0x112a <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	83 30       	cpi	r24, 0x03	; 3
    10fa:	a1 f4       	brne	.+40     	; 0x1124 <DIO_ES_tGetPinValue+0xda>
		*copy_pu8_PinValue = GET_BIT(PIND,copy_u8_PinId);
    10fc:	e0 e3       	ldi	r30, 0x30	; 48
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	88 2f       	mov	r24, r24
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	a9 01       	movw	r20, r18
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <DIO_ES_tGetPinValue+0xca>
    1110:	55 95       	asr	r21
    1112:	47 95       	ror	r20
    1114:	8a 95       	dec	r24
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <DIO_ES_tGetPinValue+0xc6>
    1118:	ca 01       	movw	r24, r20
    111a:	81 70       	andi	r24, 0x01	; 1
    111c:	eb 81       	ldd	r30, Y+3	; 0x03
    111e:	fc 81       	ldd	r31, Y+4	; 0x04
    1120:	80 83       	st	Z, r24
    1122:	03 c0       	rjmp	.+6      	; 0x112a <DIO_ES_tGetPinValue+0xe0>
	}else{
		return ES_NOT_OK;
    1124:	51 e0       	ldi	r21, 0x01	; 1
    1126:	5d 83       	std	Y+5, r21	; 0x05
    1128:	01 c0       	rjmp	.+2      	; 0x112c <DIO_ES_tGetPinValue+0xe2>
	}
	return ES_OK;
    112a:	1d 82       	std	Y+5, r1	; 0x05
    112c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	08 95       	ret

0000113e <DIO_ES_tSetPortDirection>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tSetPortDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Dir_Type copy_u8_PortDirection)
{
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	00 d0       	rcall	.+0      	; 0x1144 <DIO_ES_tSetPortDirection+0x6>
    1144:	00 d0       	rcall	.+0      	; 0x1146 <DIO_ES_tSetPortDirection+0x8>
    1146:	0f 92       	push	r0
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
    114c:	89 83       	std	Y+1, r24	; 0x01
    114e:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortDirection != OUTPUT) && (copy_u8_PortDirection != OUTPUT)){
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	31 f0       	breq	.+12     	; 0x1162 <DIO_ES_tSetPortDirection+0x24>
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	81 30       	cpi	r24, 0x01	; 1
    115a:	19 f0       	breq	.+6      	; 0x1162 <DIO_ES_tSetPortDirection+0x24>
		return ES_NOT_OK;
    115c:	21 e0       	ldi	r18, 0x01	; 1
    115e:	2d 83       	std	Y+5, r18	; 0x05
    1160:	53 c0       	rjmp	.+166    	; 0x1208 <DIO_ES_tSetPortDirection+0xca>
	}
	switch(copy_u8_PortId){
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	3c 83       	std	Y+4, r19	; 0x04
    116a:	2b 83       	std	Y+3, r18	; 0x03
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	81 30       	cpi	r24, 0x01	; 1
    1172:	91 05       	cpc	r25, r1
    1174:	09 f1       	breq	.+66     	; 0x11b8 <DIO_ES_tSetPortDirection+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	2c f4       	brge	.+10     	; 0x118a <DIO_ES_tSetPortDirection+0x4c>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	00 97       	sbiw	r24, 0x00	; 0
    1186:	61 f0       	breq	.+24     	; 0x11a0 <DIO_ES_tSetPortDirection+0x62>
    1188:	3b c0       	rjmp	.+118    	; 0x1200 <DIO_ES_tSetPortDirection+0xc2>
    118a:	2b 81       	ldd	r18, Y+3	; 0x03
    118c:	3c 81       	ldd	r19, Y+4	; 0x04
    118e:	22 30       	cpi	r18, 0x02	; 2
    1190:	31 05       	cpc	r19, r1
    1192:	f1 f0       	breq	.+60     	; 0x11d0 <DIO_ES_tSetPortDirection+0x92>
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	9c 81       	ldd	r25, Y+4	; 0x04
    1198:	83 30       	cpi	r24, 0x03	; 3
    119a:	91 05       	cpc	r25, r1
    119c:	29 f1       	breq	.+74     	; 0x11e8 <DIO_ES_tSetPortDirection+0xaa>
    119e:	30 c0       	rjmp	.+96     	; 0x1200 <DIO_ES_tSetPortDirection+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortDirection == OUTPUT)
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	81 30       	cpi	r24, 0x01	; 1
    11a4:	29 f4       	brne	.+10     	; 0x11b0 <DIO_ES_tSetPortDirection+0x72>
			DDRA = 0xff;
    11a6:	ea e3       	ldi	r30, 0x3A	; 58
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	8f ef       	ldi	r24, 0xFF	; 255
    11ac:	80 83       	st	Z, r24
    11ae:	2b c0       	rjmp	.+86     	; 0x1206 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRA = 0x00;
    11b0:	ea e3       	ldi	r30, 0x3A	; 58
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	10 82       	st	Z, r1
    11b6:	27 c0       	rjmp	.+78     	; 0x1206 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortDirection == OUTPUT)
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	81 30       	cpi	r24, 0x01	; 1
    11bc:	29 f4       	brne	.+10     	; 0x11c8 <DIO_ES_tSetPortDirection+0x8a>
			DDRB = 0xff;
    11be:	e7 e3       	ldi	r30, 0x37	; 55
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	8f ef       	ldi	r24, 0xFF	; 255
    11c4:	80 83       	st	Z, r24
    11c6:	1f c0       	rjmp	.+62     	; 0x1206 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRB = 0x00;
    11c8:	e7 e3       	ldi	r30, 0x37	; 55
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	10 82       	st	Z, r1
    11ce:	1b c0       	rjmp	.+54     	; 0x1206 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortDirection == OUTPUT)
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	81 30       	cpi	r24, 0x01	; 1
    11d4:	29 f4       	brne	.+10     	; 0x11e0 <DIO_ES_tSetPortDirection+0xa2>
			DDRC = 0xff;
    11d6:	e4 e3       	ldi	r30, 0x34	; 52
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	8f ef       	ldi	r24, 0xFF	; 255
    11dc:	80 83       	st	Z, r24
    11de:	13 c0       	rjmp	.+38     	; 0x1206 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRC = 0x00;
    11e0:	e4 e3       	ldi	r30, 0x34	; 52
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	10 82       	st	Z, r1
    11e6:	0f c0       	rjmp	.+30     	; 0x1206 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortDirection == OUTPUT)
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	81 30       	cpi	r24, 0x01	; 1
    11ec:	29 f4       	brne	.+10     	; 0x11f8 <DIO_ES_tSetPortDirection+0xba>
			DDRD = 0xff;
    11ee:	e1 e3       	ldi	r30, 0x31	; 49
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	8f ef       	ldi	r24, 0xFF	; 255
    11f4:	80 83       	st	Z, r24
    11f6:	07 c0       	rjmp	.+14     	; 0x1206 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRD = 0x00;
    11f8:	e1 e3       	ldi	r30, 0x31	; 49
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	10 82       	st	Z, r1
    11fe:	03 c0       	rjmp	.+6      	; 0x1206 <DIO_ES_tSetPortDirection+0xc8>
		break;
	default:
		return ES_NOT_OK;
    1200:	91 e0       	ldi	r25, 0x01	; 1
    1202:	9d 83       	std	Y+5, r25	; 0x05
    1204:	01 c0       	rjmp	.+2      	; 0x1208 <DIO_ES_tSetPortDirection+0xca>
		break;
	}
	return ES_OK;
    1206:	1d 82       	std	Y+5, r1	; 0x05
    1208:	8d 81       	ldd	r24, Y+5	; 0x05
}
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <DIO_ES_tSetPortValue>:



ES_t DIO_ES_tSetPortValue(DIO_U8_Port_Type copy_u8_PortId, u8 copy_u8_PortValue)
{
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	00 d0       	rcall	.+0      	; 0x1220 <DIO_ES_tSetPortValue+0x6>
    1220:	00 d0       	rcall	.+0      	; 0x1222 <DIO_ES_tSetPortValue+0x8>
    1222:	0f 92       	push	r0
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
    1228:	89 83       	std	Y+1, r24	; 0x01
    122a:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8_PortId){
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	3d 83       	std	Y+5, r19	; 0x05
    1234:	2c 83       	std	Y+4, r18	; 0x04
    1236:	8c 81       	ldd	r24, Y+4	; 0x04
    1238:	9d 81       	ldd	r25, Y+5	; 0x05
    123a:	81 30       	cpi	r24, 0x01	; 1
    123c:	91 05       	cpc	r25, r1
    123e:	d1 f0       	breq	.+52     	; 0x1274 <DIO_ES_tSetPortValue+0x5a>
    1240:	2c 81       	ldd	r18, Y+4	; 0x04
    1242:	3d 81       	ldd	r19, Y+5	; 0x05
    1244:	22 30       	cpi	r18, 0x02	; 2
    1246:	31 05       	cpc	r19, r1
    1248:	2c f4       	brge	.+10     	; 0x1254 <DIO_ES_tSetPortValue+0x3a>
    124a:	8c 81       	ldd	r24, Y+4	; 0x04
    124c:	9d 81       	ldd	r25, Y+5	; 0x05
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	61 f0       	breq	.+24     	; 0x126a <DIO_ES_tSetPortValue+0x50>
    1252:	1f c0       	rjmp	.+62     	; 0x1292 <DIO_ES_tSetPortValue+0x78>
    1254:	2c 81       	ldd	r18, Y+4	; 0x04
    1256:	3d 81       	ldd	r19, Y+5	; 0x05
    1258:	22 30       	cpi	r18, 0x02	; 2
    125a:	31 05       	cpc	r19, r1
    125c:	81 f0       	breq	.+32     	; 0x127e <DIO_ES_tSetPortValue+0x64>
    125e:	8c 81       	ldd	r24, Y+4	; 0x04
    1260:	9d 81       	ldd	r25, Y+5	; 0x05
    1262:	83 30       	cpi	r24, 0x03	; 3
    1264:	91 05       	cpc	r25, r1
    1266:	81 f0       	breq	.+32     	; 0x1288 <DIO_ES_tSetPortValue+0x6e>
    1268:	14 c0       	rjmp	.+40     	; 0x1292 <DIO_ES_tSetPortValue+0x78>
	case DIO_U8_PORT_A:
		PORTA = copy_u8_PortValue;
    126a:	eb e3       	ldi	r30, 0x3B	; 59
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	80 83       	st	Z, r24
    1272:	12 c0       	rjmp	.+36     	; 0x1298 <DIO_ES_tSetPortValue+0x7e>
		break;
	case DIO_U8_PORT_B:
		PORTB = copy_u8_PortValue;
    1274:	e8 e3       	ldi	r30, 0x38	; 56
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	80 83       	st	Z, r24
    127c:	0d c0       	rjmp	.+26     	; 0x1298 <DIO_ES_tSetPortValue+0x7e>
		break;
	case DIO_U8_PORT_C:
		PORTC = copy_u8_PortValue;
    127e:	e5 e3       	ldi	r30, 0x35	; 53
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	80 83       	st	Z, r24
    1286:	08 c0       	rjmp	.+16     	; 0x1298 <DIO_ES_tSetPortValue+0x7e>
		break;
	case DIO_U8_PORT_D:
		PORTD = copy_u8_PortValue;
    1288:	e2 e3       	ldi	r30, 0x32	; 50
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	80 83       	st	Z, r24
    1290:	03 c0       	rjmp	.+6      	; 0x1298 <DIO_ES_tSetPortValue+0x7e>
		break;
	default:
		return ES_NOT_OK;
    1292:	91 e0       	ldi	r25, 0x01	; 1
    1294:	9b 83       	std	Y+3, r25	; 0x03
    1296:	01 c0       	rjmp	.+2      	; 0x129a <DIO_ES_tSetPortValue+0x80>
		break;
	}
	return ES_OK;
    1298:	1b 82       	std	Y+3, r1	; 0x03
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <DIO_ES_tTOGPin>:
/*
 * DIO_ES_tTOGPin is used to Toggle a specific pin
 */

ES_t DIO_ES_tTOGPin(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId)
{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	00 d0       	rcall	.+0      	; 0x12b2 <DIO_ES_tTOGPin+0x6>
    12b2:	0f 92       	push	r0
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
    12b8:	89 83       	std	Y+1, r24	; 0x01
    12ba:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8_PinId > PIN_LIMIT){
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	88 30       	cpi	r24, 0x08	; 8
    12c0:	18 f0       	brcs	.+6      	; 0x12c8 <DIO_ES_tTOGPin+0x1c>
		return ES_NOT_OK;
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	8b 83       	std	Y+3, r24	; 0x03
    12c6:	60 c0       	rjmp	.+192    	; 0x1388 <DIO_ES_tTOGPin+0xdc>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	88 23       	and	r24, r24
    12cc:	a1 f4       	brne	.+40     	; 0x12f6 <DIO_ES_tTOGPin+0x4a>
		TOG_BIT(PORTA,copy_u8_PinId);
    12ce:	ab e3       	ldi	r26, 0x3B	; 59
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	eb e3       	ldi	r30, 0x3B	; 59
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	48 2f       	mov	r20, r24
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	02 2e       	mov	r0, r18
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <DIO_ES_tTOGPin+0x40>
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	0a 94       	dec	r0
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <DIO_ES_tTOGPin+0x3c>
    12f0:	84 27       	eor	r24, r20
    12f2:	8c 93       	st	X, r24
    12f4:	48 c0       	rjmp	.+144    	; 0x1386 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	81 30       	cpi	r24, 0x01	; 1
    12fa:	a1 f4       	brne	.+40     	; 0x1324 <DIO_ES_tTOGPin+0x78>
		TOG_BIT(PORTB,copy_u8_PinId);
    12fc:	a8 e3       	ldi	r26, 0x38	; 56
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e8 e3       	ldi	r30, 0x38	; 56
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	48 2f       	mov	r20, r24
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	02 2e       	mov	r0, r18
    1314:	02 c0       	rjmp	.+4      	; 0x131a <DIO_ES_tTOGPin+0x6e>
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	0a 94       	dec	r0
    131c:	e2 f7       	brpl	.-8      	; 0x1316 <DIO_ES_tTOGPin+0x6a>
    131e:	84 27       	eor	r24, r20
    1320:	8c 93       	st	X, r24
    1322:	31 c0       	rjmp	.+98     	; 0x1386 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	82 30       	cpi	r24, 0x02	; 2
    1328:	a1 f4       	brne	.+40     	; 0x1352 <DIO_ES_tTOGPin+0xa6>
		TOG_BIT(PORTC,copy_u8_PinId);
    132a:	a5 e3       	ldi	r26, 0x35	; 53
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	e5 e3       	ldi	r30, 0x35	; 53
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	48 2f       	mov	r20, r24
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	02 2e       	mov	r0, r18
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <DIO_ES_tTOGPin+0x9c>
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	0a 94       	dec	r0
    134a:	e2 f7       	brpl	.-8      	; 0x1344 <DIO_ES_tTOGPin+0x98>
    134c:	84 27       	eor	r24, r20
    134e:	8c 93       	st	X, r24
    1350:	1a c0       	rjmp	.+52     	; 0x1386 <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	83 30       	cpi	r24, 0x03	; 3
    1356:	a1 f4       	brne	.+40     	; 0x1380 <DIO_ES_tTOGPin+0xd4>
		TOG_BIT(PORTD,copy_u8_PinId);
    1358:	a2 e3       	ldi	r26, 0x32	; 50
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e2 e3       	ldi	r30, 0x32	; 50
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	48 2f       	mov	r20, r24
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	02 2e       	mov	r0, r18
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <DIO_ES_tTOGPin+0xca>
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	0a 94       	dec	r0
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <DIO_ES_tTOGPin+0xc6>
    137a:	84 27       	eor	r24, r20
    137c:	8c 93       	st	X, r24
    137e:	03 c0       	rjmp	.+6      	; 0x1386 <DIO_ES_tTOGPin+0xda>
	}else{
		return ES_NOT_OK;
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	8b 83       	std	Y+3, r24	; 0x03
    1384:	01 c0       	rjmp	.+2      	; 0x1388 <DIO_ES_tTOGPin+0xdc>
	}
	return ES_OK;
    1386:	1b 82       	std	Y+3, r1	; 0x03
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
}
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	cf 91       	pop	r28
    1392:	df 91       	pop	r29
    1394:	08 95       	ret

00001396 <DIO_ES_tInit>:




ES_t DIO_ES_tInit(void)
{
    1396:	df 93       	push	r29
    1398:	cf 93       	push	r28
    139a:	00 d0       	rcall	.+0      	; 0x139c <DIO_ES_tInit+0x6>
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
	int i = 0;
    13a0:	1a 82       	std	Y+2, r1	; 0x02
    13a2:	19 82       	std	Y+1, r1	; 0x01
	for(i=0 ; i<PIN_COUNT ; i++){
    13a4:	1a 82       	std	Y+2, r1	; 0x02
    13a6:	19 82       	std	Y+1, r1	; 0x01
    13a8:	a3 c2       	rjmp	.+1350   	; 0x18f0 <DIO_ES_tInit+0x55a>
		if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_A){
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	9a 81       	ldd	r25, Y+2	; 0x02
    13ae:	88 0f       	add	r24, r24
    13b0:	99 1f       	adc	r25, r25
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	fc 01       	movw	r30, r24
    13b8:	ea 58       	subi	r30, 0x8A	; 138
    13ba:	ff 4f       	sbci	r31, 0xFF	; 255
    13bc:	80 81       	ld	r24, Z
    13be:	88 23       	and	r24, r24
    13c0:	09 f0       	breq	.+2      	; 0x13c4 <DIO_ES_tInit+0x2e>
    13c2:	9b c0       	rjmp	.+310    	; 0x14fa <DIO_ES_tInit+0x164>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	9a 81       	ldd	r25, Y+2	; 0x02
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	01 96       	adiw	r24, 0x01	; 1
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	fc 01       	movw	r30, r24
    13d4:	ea 58       	subi	r30, 0x8A	; 138
    13d6:	ff 4f       	sbci	r31, 0xFF	; 255
    13d8:	80 81       	ld	r24, Z
    13da:	81 30       	cpi	r24, 0x01	; 1
    13dc:	e9 f4       	brne	.+58     	; 0x1418 <DIO_ES_tInit+0x82>
				SET_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    13de:	aa e3       	ldi	r26, 0x3A	; 58
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	ea e3       	ldi	r30, 0x3A	; 58
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	48 2f       	mov	r20, r24
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
    13ec:	9a 81       	ldd	r25, Y+2	; 0x02
    13ee:	88 0f       	add	r24, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	88 0f       	add	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	fc 01       	movw	r30, r24
    13f8:	e9 58       	subi	r30, 0x89	; 137
    13fa:	ff 4f       	sbci	r31, 0xFF	; 255
    13fc:	80 81       	ld	r24, Z
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	02 2e       	mov	r0, r18
    1408:	02 c0       	rjmp	.+4      	; 0x140e <DIO_ES_tInit+0x78>
    140a:	88 0f       	add	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	0a 94       	dec	r0
    1410:	e2 f7       	brpl	.-8      	; 0x140a <DIO_ES_tInit+0x74>
    1412:	84 2b       	or	r24, r20
    1414:	8c 93       	st	X, r24
    1416:	67 c2       	rjmp	.+1230   	; 0x18e6 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    1418:	aa e3       	ldi	r26, 0x3A	; 58
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	ea e3       	ldi	r30, 0x3A	; 58
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	48 2f       	mov	r20, r24
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	9a 81       	ldd	r25, Y+2	; 0x02
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	fc 01       	movw	r30, r24
    1432:	e9 58       	subi	r30, 0x89	; 137
    1434:	ff 4f       	sbci	r31, 0xFF	; 255
    1436:	80 81       	ld	r24, Z
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	02 2e       	mov	r0, r18
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <DIO_ES_tInit+0xb2>
    1444:	88 0f       	add	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	0a 94       	dec	r0
    144a:	e2 f7       	brpl	.-8      	; 0x1444 <DIO_ES_tInit+0xae>
    144c:	80 95       	com	r24
    144e:	84 23       	and	r24, r20
    1450:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    1452:	89 81       	ldd	r24, Y+1	; 0x01
    1454:	9a 81       	ldd	r25, Y+2	; 0x02
    1456:	88 0f       	add	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	fc 01       	movw	r30, r24
    1460:	e7 58       	subi	r30, 0x87	; 135
    1462:	ff 4f       	sbci	r31, 0xFF	; 255
    1464:	80 81       	ld	r24, Z
    1466:	81 30       	cpi	r24, 0x01	; 1
    1468:	e9 f4       	brne	.+58     	; 0x14a4 <DIO_ES_tInit+0x10e>
					SET_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    146a:	ab e3       	ldi	r26, 0x3B	; 59
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	eb e3       	ldi	r30, 0x3B	; 59
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	48 2f       	mov	r20, r24
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	9a 81       	ldd	r25, Y+2	; 0x02
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	fc 01       	movw	r30, r24
    1484:	e9 58       	subi	r30, 0x89	; 137
    1486:	ff 4f       	sbci	r31, 0xFF	; 255
    1488:	80 81       	ld	r24, Z
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	02 2e       	mov	r0, r18
    1494:	02 c0       	rjmp	.+4      	; 0x149a <DIO_ES_tInit+0x104>
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	0a 94       	dec	r0
    149c:	e2 f7       	brpl	.-8      	; 0x1496 <DIO_ES_tInit+0x100>
    149e:	84 2b       	or	r24, r20
    14a0:	8c 93       	st	X, r24
    14a2:	21 c2       	rjmp	.+1090   	; 0x18e6 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
    14a6:	9a 81       	ldd	r25, Y+2	; 0x02
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	fc 01       	movw	r30, r24
    14b2:	e7 58       	subi	r30, 0x87	; 135
    14b4:	ff 4f       	sbci	r31, 0xFF	; 255
    14b6:	80 81       	ld	r24, Z
    14b8:	88 23       	and	r24, r24
    14ba:	09 f0       	breq	.+2      	; 0x14be <DIO_ES_tInit+0x128>
    14bc:	14 c2       	rjmp	.+1064   	; 0x18e6 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    14be:	ab e3       	ldi	r26, 0x3B	; 59
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	eb e3       	ldi	r30, 0x3B	; 59
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	48 2f       	mov	r20, r24
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	9a 81       	ldd	r25, Y+2	; 0x02
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	88 0f       	add	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	fc 01       	movw	r30, r24
    14d8:	e9 58       	subi	r30, 0x89	; 137
    14da:	ff 4f       	sbci	r31, 0xFF	; 255
    14dc:	80 81       	ld	r24, Z
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	02 2e       	mov	r0, r18
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <DIO_ES_tInit+0x158>
    14ea:	88 0f       	add	r24, r24
    14ec:	99 1f       	adc	r25, r25
    14ee:	0a 94       	dec	r0
    14f0:	e2 f7       	brpl	.-8      	; 0x14ea <DIO_ES_tInit+0x154>
    14f2:	80 95       	com	r24
    14f4:	84 23       	and	r24, r20
    14f6:	8c 93       	st	X, r24
    14f8:	f6 c1       	rjmp	.+1004   	; 0x18e6 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_B){
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	9a 81       	ldd	r25, Y+2	; 0x02
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	fc 01       	movw	r30, r24
    1508:	ea 58       	subi	r30, 0x8A	; 138
    150a:	ff 4f       	sbci	r31, 0xFF	; 255
    150c:	80 81       	ld	r24, Z
    150e:	81 30       	cpi	r24, 0x01	; 1
    1510:	09 f0       	breq	.+2      	; 0x1514 <DIO_ES_tInit+0x17e>
    1512:	9b c0       	rjmp	.+310    	; 0x164a <DIO_ES_tInit+0x2b4>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	9a 81       	ldd	r25, Y+2	; 0x02
    1518:	88 0f       	add	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	01 96       	adiw	r24, 0x01	; 1
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	fc 01       	movw	r30, r24
    1524:	ea 58       	subi	r30, 0x8A	; 138
    1526:	ff 4f       	sbci	r31, 0xFF	; 255
    1528:	80 81       	ld	r24, Z
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	e9 f4       	brne	.+58     	; 0x1568 <DIO_ES_tInit+0x1d2>
				SET_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    152e:	a7 e3       	ldi	r26, 0x37	; 55
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	e7 e3       	ldi	r30, 0x37	; 55
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	48 2f       	mov	r20, r24
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	9a 81       	ldd	r25, Y+2	; 0x02
    153e:	88 0f       	add	r24, r24
    1540:	99 1f       	adc	r25, r25
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	fc 01       	movw	r30, r24
    1548:	e9 58       	subi	r30, 0x89	; 137
    154a:	ff 4f       	sbci	r31, 0xFF	; 255
    154c:	80 81       	ld	r24, Z
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	02 2e       	mov	r0, r18
    1558:	02 c0       	rjmp	.+4      	; 0x155e <DIO_ES_tInit+0x1c8>
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	0a 94       	dec	r0
    1560:	e2 f7       	brpl	.-8      	; 0x155a <DIO_ES_tInit+0x1c4>
    1562:	84 2b       	or	r24, r20
    1564:	8c 93       	st	X, r24
    1566:	bf c1       	rjmp	.+894    	; 0x18e6 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    1568:	a7 e3       	ldi	r26, 0x37	; 55
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e7 e3       	ldi	r30, 0x37	; 55
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	48 2f       	mov	r20, r24
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	9a 81       	ldd	r25, Y+2	; 0x02
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	88 0f       	add	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	fc 01       	movw	r30, r24
    1582:	e9 58       	subi	r30, 0x89	; 137
    1584:	ff 4f       	sbci	r31, 0xFF	; 255
    1586:	80 81       	ld	r24, Z
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	02 2e       	mov	r0, r18
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <DIO_ES_tInit+0x202>
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	0a 94       	dec	r0
    159a:	e2 f7       	brpl	.-8      	; 0x1594 <DIO_ES_tInit+0x1fe>
    159c:	80 95       	com	r24
    159e:	84 23       	and	r24, r20
    15a0:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	9a 81       	ldd	r25, Y+2	; 0x02
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	88 0f       	add	r24, r24
    15ac:	99 1f       	adc	r25, r25
    15ae:	fc 01       	movw	r30, r24
    15b0:	e7 58       	subi	r30, 0x87	; 135
    15b2:	ff 4f       	sbci	r31, 0xFF	; 255
    15b4:	80 81       	ld	r24, Z
    15b6:	81 30       	cpi	r24, 0x01	; 1
    15b8:	e9 f4       	brne	.+58     	; 0x15f4 <DIO_ES_tInit+0x25e>
					SET_BIT(PORTB,Dio_CfgPinsArray[i].Pin);
    15ba:	a8 e3       	ldi	r26, 0x38	; 56
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e8 e3       	ldi	r30, 0x38	; 56
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	48 2f       	mov	r20, r24
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ca:	88 0f       	add	r24, r24
    15cc:	99 1f       	adc	r25, r25
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	fc 01       	movw	r30, r24
    15d4:	e9 58       	subi	r30, 0x89	; 137
    15d6:	ff 4f       	sbci	r31, 0xFF	; 255
    15d8:	80 81       	ld	r24, Z
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	02 2e       	mov	r0, r18
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <DIO_ES_tInit+0x254>
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	0a 94       	dec	r0
    15ec:	e2 f7       	brpl	.-8      	; 0x15e6 <DIO_ES_tInit+0x250>
    15ee:	84 2b       	or	r24, r20
    15f0:	8c 93       	st	X, r24
    15f2:	79 c1       	rjmp	.+754    	; 0x18e6 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	9a 81       	ldd	r25, Y+2	; 0x02
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	fc 01       	movw	r30, r24
    1602:	e7 58       	subi	r30, 0x87	; 135
    1604:	ff 4f       	sbci	r31, 0xFF	; 255
    1606:	80 81       	ld	r24, Z
    1608:	88 23       	and	r24, r24
    160a:	09 f0       	breq	.+2      	; 0x160e <DIO_ES_tInit+0x278>
    160c:	6c c1       	rjmp	.+728    	; 0x18e6 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    160e:	ab e3       	ldi	r26, 0x3B	; 59
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	eb e3       	ldi	r30, 0x3B	; 59
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	48 2f       	mov	r20, r24
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	9a 81       	ldd	r25, Y+2	; 0x02
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	fc 01       	movw	r30, r24
    1628:	e9 58       	subi	r30, 0x89	; 137
    162a:	ff 4f       	sbci	r31, 0xFF	; 255
    162c:	80 81       	ld	r24, Z
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	02 2e       	mov	r0, r18
    1638:	02 c0       	rjmp	.+4      	; 0x163e <DIO_ES_tInit+0x2a8>
    163a:	88 0f       	add	r24, r24
    163c:	99 1f       	adc	r25, r25
    163e:	0a 94       	dec	r0
    1640:	e2 f7       	brpl	.-8      	; 0x163a <DIO_ES_tInit+0x2a4>
    1642:	80 95       	com	r24
    1644:	84 23       	and	r24, r20
    1646:	8c 93       	st	X, r24
    1648:	4e c1       	rjmp	.+668    	; 0x18e6 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_C){
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	9a 81       	ldd	r25, Y+2	; 0x02
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	fc 01       	movw	r30, r24
    1658:	ea 58       	subi	r30, 0x8A	; 138
    165a:	ff 4f       	sbci	r31, 0xFF	; 255
    165c:	80 81       	ld	r24, Z
    165e:	82 30       	cpi	r24, 0x02	; 2
    1660:	09 f0       	breq	.+2      	; 0x1664 <DIO_ES_tInit+0x2ce>
    1662:	9b c0       	rjmp	.+310    	; 0x179a <DIO_ES_tInit+0x404>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	9a 81       	ldd	r25, Y+2	; 0x02
    1668:	88 0f       	add	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	01 96       	adiw	r24, 0x01	; 1
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	fc 01       	movw	r30, r24
    1674:	ea 58       	subi	r30, 0x8A	; 138
    1676:	ff 4f       	sbci	r31, 0xFF	; 255
    1678:	80 81       	ld	r24, Z
    167a:	81 30       	cpi	r24, 0x01	; 1
    167c:	e9 f4       	brne	.+58     	; 0x16b8 <DIO_ES_tInit+0x322>
				SET_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    167e:	a4 e3       	ldi	r26, 0x34	; 52
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e4 e3       	ldi	r30, 0x34	; 52
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	48 2f       	mov	r20, r24
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	9a 81       	ldd	r25, Y+2	; 0x02
    168e:	88 0f       	add	r24, r24
    1690:	99 1f       	adc	r25, r25
    1692:	88 0f       	add	r24, r24
    1694:	99 1f       	adc	r25, r25
    1696:	fc 01       	movw	r30, r24
    1698:	e9 58       	subi	r30, 0x89	; 137
    169a:	ff 4f       	sbci	r31, 0xFF	; 255
    169c:	80 81       	ld	r24, Z
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	02 2e       	mov	r0, r18
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <DIO_ES_tInit+0x318>
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	0a 94       	dec	r0
    16b0:	e2 f7       	brpl	.-8      	; 0x16aa <DIO_ES_tInit+0x314>
    16b2:	84 2b       	or	r24, r20
    16b4:	8c 93       	st	X, r24
    16b6:	17 c1       	rjmp	.+558    	; 0x18e6 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    16b8:	a4 e3       	ldi	r26, 0x34	; 52
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	e4 e3       	ldi	r30, 0x34	; 52
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	48 2f       	mov	r20, r24
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	9a 81       	ldd	r25, Y+2	; 0x02
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	fc 01       	movw	r30, r24
    16d2:	e9 58       	subi	r30, 0x89	; 137
    16d4:	ff 4f       	sbci	r31, 0xFF	; 255
    16d6:	80 81       	ld	r24, Z
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	02 2e       	mov	r0, r18
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <DIO_ES_tInit+0x352>
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	0a 94       	dec	r0
    16ea:	e2 f7       	brpl	.-8      	; 0x16e4 <DIO_ES_tInit+0x34e>
    16ec:	80 95       	com	r24
    16ee:	84 23       	and	r24, r20
    16f0:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	9a 81       	ldd	r25, Y+2	; 0x02
    16f6:	88 0f       	add	r24, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	88 0f       	add	r24, r24
    16fc:	99 1f       	adc	r25, r25
    16fe:	fc 01       	movw	r30, r24
    1700:	e7 58       	subi	r30, 0x87	; 135
    1702:	ff 4f       	sbci	r31, 0xFF	; 255
    1704:	80 81       	ld	r24, Z
    1706:	81 30       	cpi	r24, 0x01	; 1
    1708:	e9 f4       	brne	.+58     	; 0x1744 <DIO_ES_tInit+0x3ae>
					SET_BIT(PORTC,Dio_CfgPinsArray[i].Pin);
    170a:	a5 e3       	ldi	r26, 0x35	; 53
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	e5 e3       	ldi	r30, 0x35	; 53
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	48 2f       	mov	r20, r24
    1716:	89 81       	ldd	r24, Y+1	; 0x01
    1718:	9a 81       	ldd	r25, Y+2	; 0x02
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	88 0f       	add	r24, r24
    1720:	99 1f       	adc	r25, r25
    1722:	fc 01       	movw	r30, r24
    1724:	e9 58       	subi	r30, 0x89	; 137
    1726:	ff 4f       	sbci	r31, 0xFF	; 255
    1728:	80 81       	ld	r24, Z
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	02 2e       	mov	r0, r18
    1734:	02 c0       	rjmp	.+4      	; 0x173a <DIO_ES_tInit+0x3a4>
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	0a 94       	dec	r0
    173c:	e2 f7       	brpl	.-8      	; 0x1736 <DIO_ES_tInit+0x3a0>
    173e:	84 2b       	or	r24, r20
    1740:	8c 93       	st	X, r24
    1742:	d1 c0       	rjmp	.+418    	; 0x18e6 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	9a 81       	ldd	r25, Y+2	; 0x02
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	fc 01       	movw	r30, r24
    1752:	e7 58       	subi	r30, 0x87	; 135
    1754:	ff 4f       	sbci	r31, 0xFF	; 255
    1756:	80 81       	ld	r24, Z
    1758:	88 23       	and	r24, r24
    175a:	09 f0       	breq	.+2      	; 0x175e <DIO_ES_tInit+0x3c8>
    175c:	c4 c0       	rjmp	.+392    	; 0x18e6 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    175e:	ab e3       	ldi	r26, 0x3B	; 59
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	eb e3       	ldi	r30, 0x3B	; 59
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	48 2f       	mov	r20, r24
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	9a 81       	ldd	r25, Y+2	; 0x02
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	88 0f       	add	r24, r24
    1774:	99 1f       	adc	r25, r25
    1776:	fc 01       	movw	r30, r24
    1778:	e9 58       	subi	r30, 0x89	; 137
    177a:	ff 4f       	sbci	r31, 0xFF	; 255
    177c:	80 81       	ld	r24, Z
    177e:	28 2f       	mov	r18, r24
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	02 2e       	mov	r0, r18
    1788:	02 c0       	rjmp	.+4      	; 0x178e <DIO_ES_tInit+0x3f8>
    178a:	88 0f       	add	r24, r24
    178c:	99 1f       	adc	r25, r25
    178e:	0a 94       	dec	r0
    1790:	e2 f7       	brpl	.-8      	; 0x178a <DIO_ES_tInit+0x3f4>
    1792:	80 95       	com	r24
    1794:	84 23       	and	r24, r20
    1796:	8c 93       	st	X, r24
    1798:	a6 c0       	rjmp	.+332    	; 0x18e6 <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_D){
    179a:	89 81       	ldd	r24, Y+1	; 0x01
    179c:	9a 81       	ldd	r25, Y+2	; 0x02
    179e:	88 0f       	add	r24, r24
    17a0:	99 1f       	adc	r25, r25
    17a2:	88 0f       	add	r24, r24
    17a4:	99 1f       	adc	r25, r25
    17a6:	fc 01       	movw	r30, r24
    17a8:	ea 58       	subi	r30, 0x8A	; 138
    17aa:	ff 4f       	sbci	r31, 0xFF	; 255
    17ac:	80 81       	ld	r24, Z
    17ae:	83 30       	cpi	r24, 0x03	; 3
    17b0:	09 f0       	breq	.+2      	; 0x17b4 <DIO_ES_tInit+0x41e>
    17b2:	99 c0       	rjmp	.+306    	; 0x18e6 <DIO_ES_tInit+0x550>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	9a 81       	ldd	r25, Y+2	; 0x02
    17b8:	88 0f       	add	r24, r24
    17ba:	99 1f       	adc	r25, r25
    17bc:	01 96       	adiw	r24, 0x01	; 1
    17be:	88 0f       	add	r24, r24
    17c0:	99 1f       	adc	r25, r25
    17c2:	fc 01       	movw	r30, r24
    17c4:	ea 58       	subi	r30, 0x8A	; 138
    17c6:	ff 4f       	sbci	r31, 0xFF	; 255
    17c8:	80 81       	ld	r24, Z
    17ca:	81 30       	cpi	r24, 0x01	; 1
    17cc:	e9 f4       	brne	.+58     	; 0x1808 <DIO_ES_tInit+0x472>
				SET_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    17ce:	a1 e3       	ldi	r26, 0x31	; 49
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e1 e3       	ldi	r30, 0x31	; 49
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	48 2f       	mov	r20, r24
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	9a 81       	ldd	r25, Y+2	; 0x02
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	88 0f       	add	r24, r24
    17e4:	99 1f       	adc	r25, r25
    17e6:	fc 01       	movw	r30, r24
    17e8:	e9 58       	subi	r30, 0x89	; 137
    17ea:	ff 4f       	sbci	r31, 0xFF	; 255
    17ec:	80 81       	ld	r24, Z
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	02 2e       	mov	r0, r18
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <DIO_ES_tInit+0x468>
    17fa:	88 0f       	add	r24, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	0a 94       	dec	r0
    1800:	e2 f7       	brpl	.-8      	; 0x17fa <DIO_ES_tInit+0x464>
    1802:	84 2b       	or	r24, r20
    1804:	8c 93       	st	X, r24
    1806:	6f c0       	rjmp	.+222    	; 0x18e6 <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    1808:	a1 e3       	ldi	r26, 0x31	; 49
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	e1 e3       	ldi	r30, 0x31	; 49
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	48 2f       	mov	r20, r24
    1814:	89 81       	ldd	r24, Y+1	; 0x01
    1816:	9a 81       	ldd	r25, Y+2	; 0x02
    1818:	88 0f       	add	r24, r24
    181a:	99 1f       	adc	r25, r25
    181c:	88 0f       	add	r24, r24
    181e:	99 1f       	adc	r25, r25
    1820:	fc 01       	movw	r30, r24
    1822:	e9 58       	subi	r30, 0x89	; 137
    1824:	ff 4f       	sbci	r31, 0xFF	; 255
    1826:	80 81       	ld	r24, Z
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	02 2e       	mov	r0, r18
    1832:	02 c0       	rjmp	.+4      	; 0x1838 <DIO_ES_tInit+0x4a2>
    1834:	88 0f       	add	r24, r24
    1836:	99 1f       	adc	r25, r25
    1838:	0a 94       	dec	r0
    183a:	e2 f7       	brpl	.-8      	; 0x1834 <DIO_ES_tInit+0x49e>
    183c:	80 95       	com	r24
    183e:	84 23       	and	r24, r20
    1840:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	9a 81       	ldd	r25, Y+2	; 0x02
    1846:	88 0f       	add	r24, r24
    1848:	99 1f       	adc	r25, r25
    184a:	88 0f       	add	r24, r24
    184c:	99 1f       	adc	r25, r25
    184e:	fc 01       	movw	r30, r24
    1850:	e7 58       	subi	r30, 0x87	; 135
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	80 81       	ld	r24, Z
    1856:	81 30       	cpi	r24, 0x01	; 1
    1858:	e9 f4       	brne	.+58     	; 0x1894 <DIO_ES_tInit+0x4fe>
					SET_BIT(PORTD,Dio_CfgPinsArray[i].Pin);
    185a:	a2 e3       	ldi	r26, 0x32	; 50
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	e2 e3       	ldi	r30, 0x32	; 50
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	48 2f       	mov	r20, r24
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	9a 81       	ldd	r25, Y+2	; 0x02
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	fc 01       	movw	r30, r24
    1874:	e9 58       	subi	r30, 0x89	; 137
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    1878:	80 81       	ld	r24, Z
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	02 2e       	mov	r0, r18
    1884:	02 c0       	rjmp	.+4      	; 0x188a <DIO_ES_tInit+0x4f4>
    1886:	88 0f       	add	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	0a 94       	dec	r0
    188c:	e2 f7       	brpl	.-8      	; 0x1886 <DIO_ES_tInit+0x4f0>
    188e:	84 2b       	or	r24, r20
    1890:	8c 93       	st	X, r24
    1892:	29 c0       	rjmp	.+82     	; 0x18e6 <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	9a 81       	ldd	r25, Y+2	; 0x02
    1898:	88 0f       	add	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	88 0f       	add	r24, r24
    189e:	99 1f       	adc	r25, r25
    18a0:	fc 01       	movw	r30, r24
    18a2:	e7 58       	subi	r30, 0x87	; 135
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	80 81       	ld	r24, Z
    18a8:	88 23       	and	r24, r24
    18aa:	e9 f4       	brne	.+58     	; 0x18e6 <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    18ac:	ab e3       	ldi	r26, 0x3B	; 59
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	eb e3       	ldi	r30, 0x3B	; 59
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	48 2f       	mov	r20, r24
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	9a 81       	ldd	r25, Y+2	; 0x02
    18bc:	88 0f       	add	r24, r24
    18be:	99 1f       	adc	r25, r25
    18c0:	88 0f       	add	r24, r24
    18c2:	99 1f       	adc	r25, r25
    18c4:	fc 01       	movw	r30, r24
    18c6:	e9 58       	subi	r30, 0x89	; 137
    18c8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ca:	80 81       	ld	r24, Z
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	02 2e       	mov	r0, r18
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <DIO_ES_tInit+0x546>
    18d8:	88 0f       	add	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	0a 94       	dec	r0
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <DIO_ES_tInit+0x542>
    18e0:	80 95       	com	r24
    18e2:	84 23       	and	r24, r20
    18e4:	8c 93       	st	X, r24


ES_t DIO_ES_tInit(void)
{
	int i = 0;
	for(i=0 ; i<PIN_COUNT ; i++){
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
    18e8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ea:	01 96       	adiw	r24, 0x01	; 1
    18ec:	9a 83       	std	Y+2, r25	; 0x02
    18ee:	89 83       	std	Y+1, r24	; 0x01
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	9a 81       	ldd	r25, Y+2	; 0x02
    18f4:	81 31       	cpi	r24, 0x11	; 17
    18f6:	91 05       	cpc	r25, r1
    18f8:	0c f4       	brge	.+2      	; 0x18fc <DIO_ES_tInit+0x566>
    18fa:	57 cd       	rjmp	.-1362   	; 0x13aa <DIO_ES_tInit+0x14>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
				}
			}
		}
	}
	return ES_OK;
    18fc:	80 e0       	ldi	r24, 0x00	; 0
}
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	cf 91       	pop	r28
    1904:	df 91       	pop	r29
    1906:	08 95       	ret

00001908 <Lcd_ES_tInit>:
static ES_t LCD_ES_tSet_Cursor_Pos(u8 copy_u8_row,u8 copy_u8_column);


// ES_t DIO_ES_tTOGPin(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId);

ES_t Lcd_ES_tInit(){
    1908:	df 93       	push	r29
    190a:	cf 93       	push	r28
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
	Lcd_ES_tsendCmd(fourbit_mode);  /* Go into 4-bit operating mode*/
    1910:	83 e3       	ldi	r24, 0x33	; 51
    1912:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(fourbit_mode11);	/* Go into 4-bit operating mode*/
    1916:	82 e3       	ldi	r24, 0x32	; 50
    1918:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(D4_D7);  /* 2 Line, 5*7 matrix in 4-bit mode */
    191c:	88 e2       	ldi	r24, 0x28	; 40
    191e:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CursorOFF);  /* Display on cursor off */
    1922:	8c e0       	ldi	r24, 0x0C	; 12
    1924:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
    1928:	86 e0       	ldi	r24, 0x06	; 6
    192a:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Lcd_ES_tsendCmd>
	return ES_OK;
    1934:	80 e0       	ldi	r24, 0x00	; 0
}
    1936:	cf 91       	pop	r28
    1938:	df 91       	pop	r29
    193a:	08 95       	ret

0000193c <lcd_ES_tclear>:
 *
 *	Ex. 0x28 0b 0010 1000  //Read bit by bit and see if it is low or high
 */

ES_t lcd_ES_tclear()
{
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	2e 97       	sbiw	r28, 0x0e	; 14
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	de bf       	out	0x3e, r29	; 62
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	cd bf       	out	0x3d, r28	; 61
	Lcd_ES_tsendCmd(CLR_Display);
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Lcd_ES_tsendCmd>
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	a0 e0       	ldi	r26, 0x00	; 0
    195c:	b0 e4       	ldi	r27, 0x40	; 64
    195e:	8b 87       	std	Y+11, r24	; 0x0b
    1960:	9c 87       	std	Y+12, r25	; 0x0c
    1962:	ad 87       	std	Y+13, r26	; 0x0d
    1964:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1966:	6b 85       	ldd	r22, Y+11	; 0x0b
    1968:	7c 85       	ldd	r23, Y+12	; 0x0c
    196a:	8d 85       	ldd	r24, Y+13	; 0x0d
    196c:	9e 85       	ldd	r25, Y+14	; 0x0e
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	4a e7       	ldi	r20, 0x7A	; 122
    1974:	55 e4       	ldi	r21, 0x45	; 69
    1976:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	8f 83       	std	Y+7, r24	; 0x07
    1980:	98 87       	std	Y+8, r25	; 0x08
    1982:	a9 87       	std	Y+9, r26	; 0x09
    1984:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1986:	6f 81       	ldd	r22, Y+7	; 0x07
    1988:	78 85       	ldd	r23, Y+8	; 0x08
    198a:	89 85       	ldd	r24, Y+9	; 0x09
    198c:	9a 85       	ldd	r25, Y+10	; 0x0a
    198e:	20 e0       	ldi	r18, 0x00	; 0
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	40 e8       	ldi	r20, 0x80	; 128
    1994:	5f e3       	ldi	r21, 0x3F	; 63
    1996:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    199a:	88 23       	and	r24, r24
    199c:	2c f4       	brge	.+10     	; 0x19a8 <lcd_ES_tclear+0x6c>
		__ticks = 1;
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	9e 83       	std	Y+6, r25	; 0x06
    19a4:	8d 83       	std	Y+5, r24	; 0x05
    19a6:	3f c0       	rjmp	.+126    	; 0x1a26 <lcd_ES_tclear+0xea>
	else if (__tmp > 65535)
    19a8:	6f 81       	ldd	r22, Y+7	; 0x07
    19aa:	78 85       	ldd	r23, Y+8	; 0x08
    19ac:	89 85       	ldd	r24, Y+9	; 0x09
    19ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	3f ef       	ldi	r19, 0xFF	; 255
    19b4:	4f e7       	ldi	r20, 0x7F	; 127
    19b6:	57 e4       	ldi	r21, 0x47	; 71
    19b8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19bc:	18 16       	cp	r1, r24
    19be:	4c f5       	brge	.+82     	; 0x1a12 <lcd_ES_tclear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	40 e2       	ldi	r20, 0x20	; 32
    19ce:	51 e4       	ldi	r21, 0x41	; 65
    19d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	bc 01       	movw	r22, r24
    19da:	cd 01       	movw	r24, r26
    19dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	9e 83       	std	Y+6, r25	; 0x06
    19e6:	8d 83       	std	Y+5, r24	; 0x05
    19e8:	0f c0       	rjmp	.+30     	; 0x1a08 <lcd_ES_tclear+0xcc>
    19ea:	80 e9       	ldi	r24, 0x90	; 144
    19ec:	91 e0       	ldi	r25, 0x01	; 1
    19ee:	9c 83       	std	Y+4, r25	; 0x04
    19f0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19f2:	8b 81       	ldd	r24, Y+3	; 0x03
    19f4:	9c 81       	ldd	r25, Y+4	; 0x04
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	f1 f7       	brne	.-4      	; 0x19f6 <lcd_ES_tclear+0xba>
    19fa:	9c 83       	std	Y+4, r25	; 0x04
    19fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1a00:	9e 81       	ldd	r25, Y+6	; 0x06
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	9e 83       	std	Y+6, r25	; 0x06
    1a06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a08:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a0c:	00 97       	sbiw	r24, 0x00	; 0
    1a0e:	69 f7       	brne	.-38     	; 0x19ea <lcd_ES_tclear+0xae>
    1a10:	14 c0       	rjmp	.+40     	; 0x1a3a <lcd_ES_tclear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a12:	6f 81       	ldd	r22, Y+7	; 0x07
    1a14:	78 85       	ldd	r23, Y+8	; 0x08
    1a16:	89 85       	ldd	r24, Y+9	; 0x09
    1a18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	9e 83       	std	Y+6, r25	; 0x06
    1a24:	8d 83       	std	Y+5, r24	; 0x05
    1a26:	8d 81       	ldd	r24, Y+5	; 0x05
    1a28:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2a:	9a 83       	std	Y+2, r25	; 0x02
    1a2c:	89 83       	std	Y+1, r24	; 0x01
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
    1a30:	9a 81       	ldd	r25, Y+2	; 0x02
    1a32:	01 97       	sbiw	r24, 0x01	; 1
    1a34:	f1 f7       	brne	.-4      	; 0x1a32 <lcd_ES_tclear+0xf6>
    1a36:	9a 83       	std	Y+2, r25	; 0x02
    1a38:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	return ES_OK;
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
}
    1a3c:	2e 96       	adiw	r28, 0x0e	; 14
    1a3e:	0f b6       	in	r0, 0x3f	; 63
    1a40:	f8 94       	cli
    1a42:	de bf       	out	0x3e, r29	; 62
    1a44:	0f be       	out	0x3f, r0	; 63
    1a46:	cd bf       	out	0x3d, r28	; 61
    1a48:	cf 91       	pop	r28
    1a4a:	df 91       	pop	r29
    1a4c:	08 95       	ret

00001a4e <Lcd_ES_tsendCmd>:

ES_t Lcd_ES_tsendCmd(u8 copy_u8_cmd){
    1a4e:	df 93       	push	r29
    1a50:	cf 93       	push	r28
    1a52:	0f 92       	push	r0
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
    1a58:	89 83       	std	Y+1, r24	; 0x01
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, LOW);
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	61 e0       	ldi	r22, 0x01	; 1
    1a5e:	40 e0       	ldi	r20, 0x00	; 0
    1a60:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	60 e0       	ldi	r22, 0x00	; 0
    1a68:	40 e0       	ldi	r20, 0x00	; 0
    1a6a:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_ES_tSetPinValue>
	// DIO_ES_tGetPinValue, DIO_ES_tSetPinValue
	// 0b01111010
	// Higher nibble
	DIO_ES_tSetPortValue(LCD_DATA_PORT, (LCD_DATA_PORT & 0x0F) | (copy_u8_cmd & 0xF0));
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	98 2f       	mov	r25, r24
    1a72:	90 7f       	andi	r25, 0xF0	; 240
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	69 2f       	mov	r22, r25
    1a78:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_ES_tSetPortValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    1a7c:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_ES_tTrigger_Enable>
	// Lower nibble
	DIO_ES_tSetPortValue(LCD_DATA_PORT, (LCD_DATA_PORT & 0x0F) | (copy_u8_cmd << NIBBLE_SIZE));
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	98 2f       	mov	r25, r24
    1a84:	92 95       	swap	r25
    1a86:	90 7f       	andi	r25, 0xF0	; 240
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	69 2f       	mov	r22, r25
    1a8c:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_ES_tSetPortValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    1a90:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_ES_tTrigger_Enable>
	return ES_OK;
    1a94:	80 e0       	ldi	r24, 0x00	; 0
}
    1a96:	0f 90       	pop	r0
    1a98:	cf 91       	pop	r28
    1a9a:	df 91       	pop	r29
    1a9c:	08 95       	ret

00001a9e <Lcd_ES_tsendChar>:
ES_t Lcd_ES_tsendChar(u8 copy_u8_data){
    1a9e:	df 93       	push	r29
    1aa0:	cf 93       	push	r28
    1aa2:	0f 92       	push	r0
    1aa4:	cd b7       	in	r28, 0x3d	; 61
    1aa6:	de b7       	in	r29, 0x3e	; 62
    1aa8:	89 83       	std	Y+1, r24	; 0x01
	// ((REG>>PIN) & 0x1)
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	61 e0       	ldi	r22, 0x01	; 1
    1aae:	41 e0       	ldi	r20, 0x01	; 1
    1ab0:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	60 e0       	ldi	r22, 0x00	; 0
    1ab8:	40 e0       	ldi	r20, 0x00	; 0
    1aba:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_ES_tSetPinValue>
	((copy_u8_data>>D7) & LOCAL_ONE) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    1abe:	89 81       	ldd	r24, Y+1	; 0x01
    1ac0:	88 23       	and	r24, r24
    1ac2:	34 f4       	brge	.+12     	; 0x1ad0 <Lcd_ES_tsendChar+0x32>
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	67 e0       	ldi	r22, 0x07	; 7
    1ac8:	41 e0       	ldi	r20, 0x01	; 1
    1aca:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_ES_tSetPinValue>
    1ace:	05 c0       	rjmp	.+10     	; 0x1ada <Lcd_ES_tsendChar+0x3c>
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	67 e0       	ldi	r22, 0x07	; 7
    1ad4:	40 e0       	ldi	r20, 0x00	; 0
    1ad6:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_ES_tSetPinValue>
	((copy_u8_data>>D6) & LOCAL_ONE) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    1ada:	89 81       	ldd	r24, Y+1	; 0x01
    1adc:	82 95       	swap	r24
    1ade:	86 95       	lsr	r24
    1ae0:	86 95       	lsr	r24
    1ae2:	83 70       	andi	r24, 0x03	; 3
    1ae4:	88 2f       	mov	r24, r24
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	81 70       	andi	r24, 0x01	; 1
    1aea:	90 70       	andi	r25, 0x00	; 0
    1aec:	88 23       	and	r24, r24
    1aee:	31 f0       	breq	.+12     	; 0x1afc <Lcd_ES_tsendChar+0x5e>
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	66 e0       	ldi	r22, 0x06	; 6
    1af4:	41 e0       	ldi	r20, 0x01	; 1
    1af6:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_ES_tSetPinValue>
    1afa:	05 c0       	rjmp	.+10     	; 0x1b06 <Lcd_ES_tsendChar+0x68>
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	66 e0       	ldi	r22, 0x06	; 6
    1b00:	40 e0       	ldi	r20, 0x00	; 0
    1b02:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_ES_tSetPinValue>
	((copy_u8_data>>D5) & LOCAL_ONE) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    1b06:	89 81       	ldd	r24, Y+1	; 0x01
    1b08:	82 95       	swap	r24
    1b0a:	86 95       	lsr	r24
    1b0c:	87 70       	andi	r24, 0x07	; 7
    1b0e:	88 2f       	mov	r24, r24
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	81 70       	andi	r24, 0x01	; 1
    1b14:	90 70       	andi	r25, 0x00	; 0
    1b16:	88 23       	and	r24, r24
    1b18:	31 f0       	breq	.+12     	; 0x1b26 <Lcd_ES_tsendChar+0x88>
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	65 e0       	ldi	r22, 0x05	; 5
    1b1e:	41 e0       	ldi	r20, 0x01	; 1
    1b20:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_ES_tSetPinValue>
    1b24:	05 c0       	rjmp	.+10     	; 0x1b30 <Lcd_ES_tsendChar+0x92>
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	65 e0       	ldi	r22, 0x05	; 5
    1b2a:	40 e0       	ldi	r20, 0x00	; 0
    1b2c:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_ES_tSetPinValue>
	((copy_u8_data>>D4) & LOCAL_ONE) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	82 95       	swap	r24
    1b34:	8f 70       	andi	r24, 0x0F	; 15
    1b36:	88 2f       	mov	r24, r24
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	81 70       	andi	r24, 0x01	; 1
    1b3c:	90 70       	andi	r25, 0x00	; 0
    1b3e:	88 23       	and	r24, r24
    1b40:	31 f0       	breq	.+12     	; 0x1b4e <Lcd_ES_tsendChar+0xb0>
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	64 e0       	ldi	r22, 0x04	; 4
    1b46:	41 e0       	ldi	r20, 0x01	; 1
    1b48:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_ES_tSetPinValue>
    1b4c:	05 c0       	rjmp	.+10     	; 0x1b58 <Lcd_ES_tsendChar+0xba>
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	64 e0       	ldi	r22, 0x04	; 4
    1b52:	40 e0       	ldi	r20, 0x00	; 0
    1b54:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    1b58:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_ES_tTrigger_Enable>
	((copy_u8_data>>D3) & LOCAL_ONE) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	86 95       	lsr	r24
    1b60:	86 95       	lsr	r24
    1b62:	86 95       	lsr	r24
    1b64:	88 2f       	mov	r24, r24
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	81 70       	andi	r24, 0x01	; 1
    1b6a:	90 70       	andi	r25, 0x00	; 0
    1b6c:	88 23       	and	r24, r24
    1b6e:	31 f0       	breq	.+12     	; 0x1b7c <Lcd_ES_tsendChar+0xde>
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	67 e0       	ldi	r22, 0x07	; 7
    1b74:	41 e0       	ldi	r20, 0x01	; 1
    1b76:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_ES_tSetPinValue>
    1b7a:	05 c0       	rjmp	.+10     	; 0x1b86 <Lcd_ES_tsendChar+0xe8>
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	67 e0       	ldi	r22, 0x07	; 7
    1b80:	40 e0       	ldi	r20, 0x00	; 0
    1b82:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_ES_tSetPinValue>
	((copy_u8_data>>D2) & LOCAL_ONE) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    1b86:	89 81       	ldd	r24, Y+1	; 0x01
    1b88:	86 95       	lsr	r24
    1b8a:	86 95       	lsr	r24
    1b8c:	88 2f       	mov	r24, r24
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	81 70       	andi	r24, 0x01	; 1
    1b92:	90 70       	andi	r25, 0x00	; 0
    1b94:	88 23       	and	r24, r24
    1b96:	31 f0       	breq	.+12     	; 0x1ba4 <Lcd_ES_tsendChar+0x106>
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	66 e0       	ldi	r22, 0x06	; 6
    1b9c:	41 e0       	ldi	r20, 0x01	; 1
    1b9e:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_ES_tSetPinValue>
    1ba2:	05 c0       	rjmp	.+10     	; 0x1bae <Lcd_ES_tsendChar+0x110>
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	66 e0       	ldi	r22, 0x06	; 6
    1ba8:	40 e0       	ldi	r20, 0x00	; 0
    1baa:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_ES_tSetPinValue>
	((copy_u8_data>>D1) & LOCAL_ONE) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
    1bb0:	86 95       	lsr	r24
    1bb2:	88 2f       	mov	r24, r24
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	81 70       	andi	r24, 0x01	; 1
    1bb8:	90 70       	andi	r25, 0x00	; 0
    1bba:	88 23       	and	r24, r24
    1bbc:	31 f0       	breq	.+12     	; 0x1bca <Lcd_ES_tsendChar+0x12c>
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	65 e0       	ldi	r22, 0x05	; 5
    1bc2:	41 e0       	ldi	r20, 0x01	; 1
    1bc4:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_ES_tSetPinValue>
    1bc8:	05 c0       	rjmp	.+10     	; 0x1bd4 <Lcd_ES_tsendChar+0x136>
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    1bcc:	65 e0       	ldi	r22, 0x05	; 5
    1bce:	40 e0       	ldi	r20, 0x00	; 0
    1bd0:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_ES_tSetPinValue>
	((copy_u8_data>>D0) & LOCAL_ONE) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	88 2f       	mov	r24, r24
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	81 70       	andi	r24, 0x01	; 1
    1bdc:	90 70       	andi	r25, 0x00	; 0
    1bde:	88 23       	and	r24, r24
    1be0:	31 f0       	breq	.+12     	; 0x1bee <Lcd_ES_tsendChar+0x150>
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	64 e0       	ldi	r22, 0x04	; 4
    1be6:	41 e0       	ldi	r20, 0x01	; 1
    1be8:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_ES_tSetPinValue>
    1bec:	05 c0       	rjmp	.+10     	; 0x1bf8 <Lcd_ES_tsendChar+0x15a>
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	64 e0       	ldi	r22, 0x04	; 4
    1bf2:	40 e0       	ldi	r20, 0x00	; 0
    1bf4:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    1bf8:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_ES_tTrigger_Enable>
	return ES_OK;
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
}
    1bfe:	0f 90       	pop	r0
    1c00:	cf 91       	pop	r28
    1c02:	df 91       	pop	r29
    1c04:	08 95       	ret

00001c06 <Lcd_ES_tsendString>:

ES_t Lcd_ES_tsendString(s8 *copy_s8_data)
{
    1c06:	df 93       	push	r29
    1c08:	cf 93       	push	r28
    1c0a:	00 d0       	rcall	.+0      	; 0x1c0c <Lcd_ES_tsendString+0x6>
    1c0c:	0f 92       	push	r0
    1c0e:	cd b7       	in	r28, 0x3d	; 61
    1c10:	de b7       	in	r29, 0x3e	; 62
    1c12:	9b 83       	std	Y+3, r25	; 0x03
    1c14:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	61 e0       	ldi	r22, 0x01	; 1
    1c1a:	41 e0       	ldi	r20, 0x01	; 1
    1c1c:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	60 e0       	ldi	r22, 0x00	; 0
    1c24:	40 e0       	ldi	r20, 0x00	; 0
    1c26:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_ES_tSetPinValue>

	unsigned char i=0;
    1c2a:	19 82       	std	Y+1, r1	; 0x01
    1c2c:	0e c0       	rjmp	.+28     	; 0x1c4a <Lcd_ES_tsendString+0x44>
	while(copy_s8_data[i]!=NULL)
	{
		Lcd_ES_tsendChar(copy_s8_data[i]);
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
    1c30:	28 2f       	mov	r18, r24
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	9b 81       	ldd	r25, Y+3	; 0x03
    1c38:	fc 01       	movw	r30, r24
    1c3a:	e2 0f       	add	r30, r18
    1c3c:	f3 1f       	adc	r31, r19
    1c3e:	80 81       	ld	r24, Z
    1c40:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <Lcd_ES_tsendChar>
		i++;
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
    1c46:	8f 5f       	subi	r24, 0xFF	; 255
    1c48:	89 83       	std	Y+1, r24	; 0x01
{
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);

	unsigned char i=0;
	while(copy_s8_data[i]!=NULL)
    1c4a:	89 81       	ldd	r24, Y+1	; 0x01
    1c4c:	28 2f       	mov	r18, r24
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	9b 81       	ldd	r25, Y+3	; 0x03
    1c54:	fc 01       	movw	r30, r24
    1c56:	e2 0f       	add	r30, r18
    1c58:	f3 1f       	adc	r31, r19
    1c5a:	80 81       	ld	r24, Z
    1c5c:	99 27       	eor	r25, r25
    1c5e:	87 fd       	sbrc	r24, 7
    1c60:	90 95       	com	r25
    1c62:	00 97       	sbiw	r24, 0x00	; 0
    1c64:	21 f7       	brne	.-56     	; 0x1c2e <Lcd_ES_tsendString+0x28>
	{
		Lcd_ES_tsendChar(copy_s8_data[i]);
		i++;
	}
	return ES_OK;
    1c66:	80 e0       	ldi	r24, 0x00	; 0
}
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	cf 91       	pop	r28
    1c70:	df 91       	pop	r29
    1c72:	08 95       	ret

00001c74 <Lcd_ES_tsendString_xy>:

ES_t Lcd_ES_tsendString_xy(s8 *copy_s8_data,u8 copy_u8_row,u8 copy_u8_col){
    1c74:	df 93       	push	r29
    1c76:	cf 93       	push	r28
    1c78:	00 d0       	rcall	.+0      	; 0x1c7a <Lcd_ES_tsendString_xy+0x6>
    1c7a:	00 d0       	rcall	.+0      	; 0x1c7c <Lcd_ES_tsendString_xy+0x8>
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
    1c80:	9a 83       	std	Y+2, r25	; 0x02
    1c82:	89 83       	std	Y+1, r24	; 0x01
    1c84:	6b 83       	std	Y+3, r22	; 0x03
    1c86:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	61 e0       	ldi	r22, 0x01	; 1
    1c8c:	41 e0       	ldi	r20, 0x01	; 1
    1c8e:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	60 e0       	ldi	r22, 0x00	; 0
    1c96:	40 e0       	ldi	r20, 0x00	; 0
    1c98:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_ES_tSetPinValue>

	LCD_ES_tSet_Cursor_Pos(copy_u8_row,copy_u8_col);
    1c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9e:	6c 81       	ldd	r22, Y+4	; 0x04
    1ca0:	0e 94 bf 12 	call	0x257e	; 0x257e <LCD_ES_tSet_Cursor_Pos>
	Lcd_ES_tsendString(copy_s8_data);
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca8:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <Lcd_ES_tsendString>
	return ES_OK;
    1cac:	80 e0       	ldi	r24, 0x00	; 0

}
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	0f 90       	pop	r0
    1cb6:	cf 91       	pop	r28
    1cb8:	df 91       	pop	r29
    1cba:	08 95       	ret

00001cbc <LCD_ES_tTrigger_Enable>:

static ES_t LCD_ES_tTrigger_Enable(void){  //We make it static cuz we won't use it anywhere but here
    1cbc:	df 93       	push	r29
    1cbe:	cf 93       	push	r28
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
    1cc4:	e0 97       	sbiw	r28, 0x30	; 48
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, HIGH);
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	62 e0       	ldi	r22, 0x02	; 2
    1cd4:	41 e0       	ldi	r20, 0x01	; 1
    1cd6:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_ES_tSetPinValue>
    1cda:	80 e0       	ldi	r24, 0x00	; 0
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	a0 e2       	ldi	r26, 0x20	; 32
    1ce0:	b1 e4       	ldi	r27, 0x41	; 65
    1ce2:	8d a7       	std	Y+45, r24	; 0x2d
    1ce4:	9e a7       	std	Y+46, r25	; 0x2e
    1ce6:	af a7       	std	Y+47, r26	; 0x2f
    1ce8:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1cea:	6d a5       	ldd	r22, Y+45	; 0x2d
    1cec:	7e a5       	ldd	r23, Y+46	; 0x2e
    1cee:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cf0:	98 a9       	ldd	r25, Y+48	; 0x30
    1cf2:	2b ea       	ldi	r18, 0xAB	; 171
    1cf4:	3a ea       	ldi	r19, 0xAA	; 170
    1cf6:	4a ea       	ldi	r20, 0xAA	; 170
    1cf8:	50 e4       	ldi	r21, 0x40	; 64
    1cfa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	89 a7       	std	Y+41, r24	; 0x29
    1d04:	9a a7       	std	Y+42, r25	; 0x2a
    1d06:	ab a7       	std	Y+43, r26	; 0x2b
    1d08:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1d0a:	69 a5       	ldd	r22, Y+41	; 0x29
    1d0c:	7a a5       	ldd	r23, Y+42	; 0x2a
    1d0e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d10:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e8       	ldi	r20, 0x80	; 128
    1d18:	5f e3       	ldi	r21, 0x3F	; 63
    1d1a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d1e:	88 23       	and	r24, r24
    1d20:	1c f4       	brge	.+6      	; 0x1d28 <LCD_ES_tTrigger_Enable+0x6c>
		__ticks = 1;
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	88 a7       	std	Y+40, r24	; 0x28
    1d26:	91 c0       	rjmp	.+290    	; 0x1e4a <LCD_ES_tTrigger_Enable+0x18e>
	else if (__tmp > 255)
    1d28:	69 a5       	ldd	r22, Y+41	; 0x29
    1d2a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1d2c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d2e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	4f e7       	ldi	r20, 0x7F	; 127
    1d36:	53 e4       	ldi	r21, 0x43	; 67
    1d38:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d3c:	18 16       	cp	r1, r24
    1d3e:	0c f0       	brlt	.+2      	; 0x1d42 <LCD_ES_tTrigger_Enable+0x86>
    1d40:	7b c0       	rjmp	.+246    	; 0x1e38 <LCD_ES_tTrigger_Enable+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1d42:	6d a5       	ldd	r22, Y+45	; 0x2d
    1d44:	7e a5       	ldd	r23, Y+46	; 0x2e
    1d46:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d48:	98 a9       	ldd	r25, Y+48	; 0x30
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	4a e7       	ldi	r20, 0x7A	; 122
    1d50:	54 e4       	ldi	r21, 0x44	; 68
    1d52:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	8c a3       	std	Y+36, r24	; 0x24
    1d5c:	9d a3       	std	Y+37, r25	; 0x25
    1d5e:	ae a3       	std	Y+38, r26	; 0x26
    1d60:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d62:	6c a1       	ldd	r22, Y+36	; 0x24
    1d64:	7d a1       	ldd	r23, Y+37	; 0x25
    1d66:	8e a1       	ldd	r24, Y+38	; 0x26
    1d68:	9f a1       	ldd	r25, Y+39	; 0x27
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	4a e7       	ldi	r20, 0x7A	; 122
    1d70:	55 e4       	ldi	r21, 0x45	; 69
    1d72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	88 a3       	std	Y+32, r24	; 0x20
    1d7c:	99 a3       	std	Y+33, r25	; 0x21
    1d7e:	aa a3       	std	Y+34, r26	; 0x22
    1d80:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1d82:	68 a1       	ldd	r22, Y+32	; 0x20
    1d84:	79 a1       	ldd	r23, Y+33	; 0x21
    1d86:	8a a1       	ldd	r24, Y+34	; 0x22
    1d88:	9b a1       	ldd	r25, Y+35	; 0x23
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	40 e8       	ldi	r20, 0x80	; 128
    1d90:	5f e3       	ldi	r21, 0x3F	; 63
    1d92:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d96:	88 23       	and	r24, r24
    1d98:	2c f4       	brge	.+10     	; 0x1da4 <LCD_ES_tTrigger_Enable+0xe8>
		__ticks = 1;
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	9f 8f       	std	Y+31, r25	; 0x1f
    1da0:	8e 8f       	std	Y+30, r24	; 0x1e
    1da2:	3f c0       	rjmp	.+126    	; 0x1e22 <LCD_ES_tTrigger_Enable+0x166>
	else if (__tmp > 65535)
    1da4:	68 a1       	ldd	r22, Y+32	; 0x20
    1da6:	79 a1       	ldd	r23, Y+33	; 0x21
    1da8:	8a a1       	ldd	r24, Y+34	; 0x22
    1daa:	9b a1       	ldd	r25, Y+35	; 0x23
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	3f ef       	ldi	r19, 0xFF	; 255
    1db0:	4f e7       	ldi	r20, 0x7F	; 127
    1db2:	57 e4       	ldi	r21, 0x47	; 71
    1db4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1db8:	18 16       	cp	r1, r24
    1dba:	4c f5       	brge	.+82     	; 0x1e0e <LCD_ES_tTrigger_Enable+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dbc:	6c a1       	ldd	r22, Y+36	; 0x24
    1dbe:	7d a1       	ldd	r23, Y+37	; 0x25
    1dc0:	8e a1       	ldd	r24, Y+38	; 0x26
    1dc2:	9f a1       	ldd	r25, Y+39	; 0x27
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	40 e2       	ldi	r20, 0x20	; 32
    1dca:	51 e4       	ldi	r21, 0x41	; 65
    1dcc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	bc 01       	movw	r22, r24
    1dd6:	cd 01       	movw	r24, r26
    1dd8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ddc:	dc 01       	movw	r26, r24
    1dde:	cb 01       	movw	r24, r22
    1de0:	9f 8f       	std	Y+31, r25	; 0x1f
    1de2:	8e 8f       	std	Y+30, r24	; 0x1e
    1de4:	0f c0       	rjmp	.+30     	; 0x1e04 <LCD_ES_tTrigger_Enable+0x148>
    1de6:	80 e9       	ldi	r24, 0x90	; 144
    1de8:	91 e0       	ldi	r25, 0x01	; 1
    1dea:	9d 8f       	std	Y+29, r25	; 0x1d
    1dec:	8c 8f       	std	Y+28, r24	; 0x1c
    1dee:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1df0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1df2:	01 97       	sbiw	r24, 0x01	; 1
    1df4:	f1 f7       	brne	.-4      	; 0x1df2 <LCD_ES_tTrigger_Enable+0x136>
    1df6:	9d 8f       	std	Y+29, r25	; 0x1d
    1df8:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dfa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1dfc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1dfe:	01 97       	sbiw	r24, 0x01	; 1
    1e00:	9f 8f       	std	Y+31, r25	; 0x1f
    1e02:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e04:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e06:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e08:	00 97       	sbiw	r24, 0x00	; 0
    1e0a:	69 f7       	brne	.-38     	; 0x1de6 <LCD_ES_tTrigger_Enable+0x12a>
    1e0c:	24 c0       	rjmp	.+72     	; 0x1e56 <LCD_ES_tTrigger_Enable+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e0e:	68 a1       	ldd	r22, Y+32	; 0x20
    1e10:	79 a1       	ldd	r23, Y+33	; 0x21
    1e12:	8a a1       	ldd	r24, Y+34	; 0x22
    1e14:	9b a1       	ldd	r25, Y+35	; 0x23
    1e16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	9f 8f       	std	Y+31, r25	; 0x1f
    1e20:	8e 8f       	std	Y+30, r24	; 0x1e
    1e22:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e24:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e26:	9b 8f       	std	Y+27, r25	; 0x1b
    1e28:	8a 8f       	std	Y+26, r24	; 0x1a
    1e2a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e2c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	f1 f7       	brne	.-4      	; 0x1e2e <LCD_ES_tTrigger_Enable+0x172>
    1e32:	9b 8f       	std	Y+27, r25	; 0x1b
    1e34:	8a 8f       	std	Y+26, r24	; 0x1a
    1e36:	0f c0       	rjmp	.+30     	; 0x1e56 <LCD_ES_tTrigger_Enable+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e38:	69 a5       	ldd	r22, Y+41	; 0x29
    1e3a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e3c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e3e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	88 a7       	std	Y+40, r24	; 0x28
    1e4a:	88 a5       	ldd	r24, Y+40	; 0x28
    1e4c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e4e:	89 8d       	ldd	r24, Y+25	; 0x19
    1e50:	8a 95       	dec	r24
    1e52:	f1 f7       	brne	.-4      	; 0x1e50 <LCD_ES_tTrigger_Enable+0x194>
    1e54:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, LOW);
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	62 e0       	ldi	r22, 0x02	; 2
    1e5a:	40 e0       	ldi	r20, 0x00	; 0
    1e5c:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_ES_tSetPinValue>
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	aa ef       	ldi	r26, 0xFA	; 250
    1e66:	b4 e4       	ldi	r27, 0x44	; 68
    1e68:	8d 8b       	std	Y+21, r24	; 0x15
    1e6a:	9e 8b       	std	Y+22, r25	; 0x16
    1e6c:	af 8b       	std	Y+23, r26	; 0x17
    1e6e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e70:	6d 89       	ldd	r22, Y+21	; 0x15
    1e72:	7e 89       	ldd	r23, Y+22	; 0x16
    1e74:	8f 89       	ldd	r24, Y+23	; 0x17
    1e76:	98 8d       	ldd	r25, Y+24	; 0x18
    1e78:	2b ea       	ldi	r18, 0xAB	; 171
    1e7a:	3a ea       	ldi	r19, 0xAA	; 170
    1e7c:	4a ea       	ldi	r20, 0xAA	; 170
    1e7e:	50 e4       	ldi	r21, 0x40	; 64
    1e80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	89 8b       	std	Y+17, r24	; 0x11
    1e8a:	9a 8b       	std	Y+18, r25	; 0x12
    1e8c:	ab 8b       	std	Y+19, r26	; 0x13
    1e8e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1e90:	69 89       	ldd	r22, Y+17	; 0x11
    1e92:	7a 89       	ldd	r23, Y+18	; 0x12
    1e94:	8b 89       	ldd	r24, Y+19	; 0x13
    1e96:	9c 89       	ldd	r25, Y+20	; 0x14
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	40 e8       	ldi	r20, 0x80	; 128
    1e9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ea0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ea4:	88 23       	and	r24, r24
    1ea6:	1c f4       	brge	.+6      	; 0x1eae <LCD_ES_tTrigger_Enable+0x1f2>
		__ticks = 1;
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	88 8b       	std	Y+16, r24	; 0x10
    1eac:	91 c0       	rjmp	.+290    	; 0x1fd0 <LCD_ES_tTrigger_Enable+0x314>
	else if (__tmp > 255)
    1eae:	69 89       	ldd	r22, Y+17	; 0x11
    1eb0:	7a 89       	ldd	r23, Y+18	; 0x12
    1eb2:	8b 89       	ldd	r24, Y+19	; 0x13
    1eb4:	9c 89       	ldd	r25, Y+20	; 0x14
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	4f e7       	ldi	r20, 0x7F	; 127
    1ebc:	53 e4       	ldi	r21, 0x43	; 67
    1ebe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ec2:	18 16       	cp	r1, r24
    1ec4:	0c f0       	brlt	.+2      	; 0x1ec8 <LCD_ES_tTrigger_Enable+0x20c>
    1ec6:	7b c0       	rjmp	.+246    	; 0x1fbe <LCD_ES_tTrigger_Enable+0x302>
	{
		_delay_ms(__us / 1000.0);
    1ec8:	6d 89       	ldd	r22, Y+21	; 0x15
    1eca:	7e 89       	ldd	r23, Y+22	; 0x16
    1ecc:	8f 89       	ldd	r24, Y+23	; 0x17
    1ece:	98 8d       	ldd	r25, Y+24	; 0x18
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	4a e7       	ldi	r20, 0x7A	; 122
    1ed6:	54 e4       	ldi	r21, 0x44	; 68
    1ed8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	8c 87       	std	Y+12, r24	; 0x0c
    1ee2:	9d 87       	std	Y+13, r25	; 0x0d
    1ee4:	ae 87       	std	Y+14, r26	; 0x0e
    1ee6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee8:	6c 85       	ldd	r22, Y+12	; 0x0c
    1eea:	7d 85       	ldd	r23, Y+13	; 0x0d
    1eec:	8e 85       	ldd	r24, Y+14	; 0x0e
    1eee:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	4a e7       	ldi	r20, 0x7A	; 122
    1ef6:	55 e4       	ldi	r21, 0x45	; 69
    1ef8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	88 87       	std	Y+8, r24	; 0x08
    1f02:	99 87       	std	Y+9, r25	; 0x09
    1f04:	aa 87       	std	Y+10, r26	; 0x0a
    1f06:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1f08:	68 85       	ldd	r22, Y+8	; 0x08
    1f0a:	79 85       	ldd	r23, Y+9	; 0x09
    1f0c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f0e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	40 e8       	ldi	r20, 0x80	; 128
    1f16:	5f e3       	ldi	r21, 0x3F	; 63
    1f18:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f1c:	88 23       	and	r24, r24
    1f1e:	2c f4       	brge	.+10     	; 0x1f2a <LCD_ES_tTrigger_Enable+0x26e>
		__ticks = 1;
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	9f 83       	std	Y+7, r25	; 0x07
    1f26:	8e 83       	std	Y+6, r24	; 0x06
    1f28:	3f c0       	rjmp	.+126    	; 0x1fa8 <LCD_ES_tTrigger_Enable+0x2ec>
	else if (__tmp > 65535)
    1f2a:	68 85       	ldd	r22, Y+8	; 0x08
    1f2c:	79 85       	ldd	r23, Y+9	; 0x09
    1f2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f30:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	3f ef       	ldi	r19, 0xFF	; 255
    1f36:	4f e7       	ldi	r20, 0x7F	; 127
    1f38:	57 e4       	ldi	r21, 0x47	; 71
    1f3a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f3e:	18 16       	cp	r1, r24
    1f40:	4c f5       	brge	.+82     	; 0x1f94 <LCD_ES_tTrigger_Enable+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f42:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f44:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f46:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f48:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	40 e2       	ldi	r20, 0x20	; 32
    1f50:	51 e4       	ldi	r21, 0x41	; 65
    1f52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	bc 01       	movw	r22, r24
    1f5c:	cd 01       	movw	r24, r26
    1f5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	9f 83       	std	Y+7, r25	; 0x07
    1f68:	8e 83       	std	Y+6, r24	; 0x06
    1f6a:	0f c0       	rjmp	.+30     	; 0x1f8a <LCD_ES_tTrigger_Enable+0x2ce>
    1f6c:	80 e9       	ldi	r24, 0x90	; 144
    1f6e:	91 e0       	ldi	r25, 0x01	; 1
    1f70:	9d 83       	std	Y+5, r25	; 0x05
    1f72:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f74:	8c 81       	ldd	r24, Y+4	; 0x04
    1f76:	9d 81       	ldd	r25, Y+5	; 0x05
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	f1 f7       	brne	.-4      	; 0x1f78 <LCD_ES_tTrigger_Enable+0x2bc>
    1f7c:	9d 83       	std	Y+5, r25	; 0x05
    1f7e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f80:	8e 81       	ldd	r24, Y+6	; 0x06
    1f82:	9f 81       	ldd	r25, Y+7	; 0x07
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	9f 83       	std	Y+7, r25	; 0x07
    1f88:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f8e:	00 97       	sbiw	r24, 0x00	; 0
    1f90:	69 f7       	brne	.-38     	; 0x1f6c <LCD_ES_tTrigger_Enable+0x2b0>
    1f92:	24 c0       	rjmp	.+72     	; 0x1fdc <LCD_ES_tTrigger_Enable+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f94:	68 85       	ldd	r22, Y+8	; 0x08
    1f96:	79 85       	ldd	r23, Y+9	; 0x09
    1f98:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f9a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	9f 83       	std	Y+7, r25	; 0x07
    1fa6:	8e 83       	std	Y+6, r24	; 0x06
    1fa8:	8e 81       	ldd	r24, Y+6	; 0x06
    1faa:	9f 81       	ldd	r25, Y+7	; 0x07
    1fac:	9b 83       	std	Y+3, r25	; 0x03
    1fae:	8a 83       	std	Y+2, r24	; 0x02
    1fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb2:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <LCD_ES_tTrigger_Enable+0x2f8>
    1fb8:	9b 83       	std	Y+3, r25	; 0x03
    1fba:	8a 83       	std	Y+2, r24	; 0x02
    1fbc:	0f c0       	rjmp	.+30     	; 0x1fdc <LCD_ES_tTrigger_Enable+0x320>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fbe:	69 89       	ldd	r22, Y+17	; 0x11
    1fc0:	7a 89       	ldd	r23, Y+18	; 0x12
    1fc2:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc4:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	88 8b       	std	Y+16, r24	; 0x10
    1fd0:	88 89       	ldd	r24, Y+16	; 0x10
    1fd2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
    1fd6:	8a 95       	dec	r24
    1fd8:	f1 f7       	brne	.-4      	; 0x1fd6 <LCD_ES_tTrigger_Enable+0x31a>
    1fda:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2000);
	return ES_OK;
    1fdc:	80 e0       	ldi	r24, 0x00	; 0
}
    1fde:	e0 96       	adiw	r28, 0x30	; 48
    1fe0:	0f b6       	in	r0, 0x3f	; 63
    1fe2:	f8 94       	cli
    1fe4:	de bf       	out	0x3e, r29	; 62
    1fe6:	0f be       	out	0x3f, r0	; 63
    1fe8:	cd bf       	out	0x3d, r28	; 61
    1fea:	cf 91       	pop	r28
    1fec:	df 91       	pop	r29
    1fee:	08 95       	ret

00001ff0 <Lcd_ES_tdisplayNum>:

//A function to display Numbers instead of characters
ES_t Lcd_ES_tdisplayNum(u16 copy_u16_num)
{
    1ff0:	df 93       	push	r29
    1ff2:	cf 93       	push	r28
    1ff4:	cd b7       	in	r28, 0x3d	; 61
    1ff6:	de b7       	in	r29, 0x3e	; 62
    1ff8:	2e 97       	sbiw	r28, 0x0e	; 14
    1ffa:	0f b6       	in	r0, 0x3f	; 63
    1ffc:	f8 94       	cli
    1ffe:	de bf       	out	0x3e, r29	; 62
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	cd bf       	out	0x3d, r28	; 61
    2004:	9e 87       	std	Y+14, r25	; 0x0e
    2006:	8d 87       	std	Y+13, r24	; 0x0d
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	61 e0       	ldi	r22, 0x01	; 1
    200c:	41 e0       	ldi	r20, 0x01	; 1
    200e:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	60 e0       	ldi	r22, 0x00	; 0
    2016:	40 e0       	ldi	r20, 0x00	; 0
    2018:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_ES_tSetPinValue>

	u8 Local_u8_ch[10],i=0,j=0;
    201c:	1a 82       	std	Y+2, r1	; 0x02
    201e:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u16_num == 0)
    2020:	8d 85       	ldd	r24, Y+13	; 0x0d
    2022:	9e 85       	ldd	r25, Y+14	; 0x0e
    2024:	00 97       	sbiw	r24, 0x00	; 0
    2026:	11 f5       	brne	.+68     	; 0x206c <Lcd_ES_tdisplayNum+0x7c>
	{
		Lcd_ES_tsendChar('0');
    2028:	80 e3       	ldi	r24, 0x30	; 48
    202a:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <Lcd_ES_tsendChar>
    202e:	39 c0       	rjmp	.+114    	; 0x20a2 <Lcd_ES_tdisplayNum+0xb2>
	}
	else
	{
		while(copy_u16_num)
		{
			Local_u8_ch[i] = copy_u16_num % DECIMAL + '0';  //To convert int to char
    2030:	8a 81       	ldd	r24, Y+2	; 0x02
    2032:	e8 2f       	mov	r30, r24
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	8d 85       	ldd	r24, Y+13	; 0x0d
    2038:	9e 85       	ldd	r25, Y+14	; 0x0e
    203a:	2a e0       	ldi	r18, 0x0A	; 10
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	b9 01       	movw	r22, r18
    2040:	0e 94 9b 14 	call	0x2936	; 0x2936 <__udivmodhi4>
    2044:	28 2f       	mov	r18, r24
    2046:	20 5d       	subi	r18, 0xD0	; 208
    2048:	ce 01       	movw	r24, r28
    204a:	03 96       	adiw	r24, 0x03	; 3
    204c:	e8 0f       	add	r30, r24
    204e:	f9 1f       	adc	r31, r25
    2050:	20 83       	st	Z, r18
			copy_u16_num /= DECIMAL;
    2052:	8d 85       	ldd	r24, Y+13	; 0x0d
    2054:	9e 85       	ldd	r25, Y+14	; 0x0e
    2056:	2a e0       	ldi	r18, 0x0A	; 10
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	b9 01       	movw	r22, r18
    205c:	0e 94 9b 14 	call	0x2936	; 0x2936 <__udivmodhi4>
    2060:	cb 01       	movw	r24, r22
    2062:	9e 87       	std	Y+14, r25	; 0x0e
    2064:	8d 87       	std	Y+13, r24	; 0x0d
			i++;
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	8f 5f       	subi	r24, 0xFF	; 255
    206a:	8a 83       	std	Y+2, r24	; 0x02
	{
		Lcd_ES_tsendChar('0');
	}
	else
	{
		while(copy_u16_num)
    206c:	8d 85       	ldd	r24, Y+13	; 0x0d
    206e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2070:	00 97       	sbiw	r24, 0x00	; 0
    2072:	f1 f6       	brne	.-68     	; 0x2030 <Lcd_ES_tdisplayNum+0x40>
		{
			Local_u8_ch[i] = copy_u16_num % DECIMAL + '0';  //To convert int to char
			copy_u16_num /= DECIMAL;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    2074:	8a 81       	ldd	r24, Y+2	; 0x02
    2076:	89 83       	std	Y+1, r24	; 0x01
    2078:	11 c0       	rjmp	.+34     	; 0x209c <Lcd_ES_tdisplayNum+0xac>
		{
			Lcd_ES_tsendChar(Local_u8_ch[j-1]);
    207a:	89 81       	ldd	r24, Y+1	; 0x01
    207c:	88 2f       	mov	r24, r24
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	9c 01       	movw	r18, r24
    2082:	21 50       	subi	r18, 0x01	; 1
    2084:	30 40       	sbci	r19, 0x00	; 0
    2086:	ce 01       	movw	r24, r28
    2088:	03 96       	adiw	r24, 0x03	; 3
    208a:	fc 01       	movw	r30, r24
    208c:	e2 0f       	add	r30, r18
    208e:	f3 1f       	adc	r31, r19
    2090:	80 81       	ld	r24, Z
    2092:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <Lcd_ES_tsendChar>
		{
			Local_u8_ch[i] = copy_u16_num % DECIMAL + '0';  //To convert int to char
			copy_u16_num /= DECIMAL;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    2096:	89 81       	ldd	r24, Y+1	; 0x01
    2098:	81 50       	subi	r24, 0x01	; 1
    209a:	89 83       	std	Y+1, r24	; 0x01
    209c:	89 81       	ldd	r24, Y+1	; 0x01
    209e:	88 23       	and	r24, r24
    20a0:	61 f7       	brne	.-40     	; 0x207a <Lcd_ES_tdisplayNum+0x8a>
		{
			Lcd_ES_tsendChar(Local_u8_ch[j-1]);
		}
	}
	return ES_OK;
    20a2:	80 e0       	ldi	r24, 0x00	; 0
}
    20a4:	2e 96       	adiw	r28, 0x0e	; 14
    20a6:	0f b6       	in	r0, 0x3f	; 63
    20a8:	f8 94       	cli
    20aa:	de bf       	out	0x3e, r29	; 62
    20ac:	0f be       	out	0x3f, r0	; 63
    20ae:	cd bf       	out	0x3d, r28	; 61
    20b0:	cf 91       	pop	r28
    20b2:	df 91       	pop	r29
    20b4:	08 95       	ret

000020b6 <Lcd_ES_tdisplayNum_xy>:

ES_t Lcd_ES_tdisplayNum_xy(u16 copy_u16_num,u8 copy_u8_row,u8 copy_u8_col){
    20b6:	df 93       	push	r29
    20b8:	cf 93       	push	r28
    20ba:	cd b7       	in	r28, 0x3d	; 61
    20bc:	de b7       	in	r29, 0x3e	; 62
    20be:	a3 97       	sbiw	r28, 0x23	; 35
    20c0:	0f b6       	in	r0, 0x3f	; 63
    20c2:	f8 94       	cli
    20c4:	de bf       	out	0x3e, r29	; 62
    20c6:	0f be       	out	0x3f, r0	; 63
    20c8:	cd bf       	out	0x3d, r28	; 61
    20ca:	98 a3       	std	Y+32, r25	; 0x20
    20cc:	8f 8f       	std	Y+31, r24	; 0x1f
    20ce:	69 a3       	std	Y+33, r22	; 0x21
    20d0:	4a a3       	std	Y+34, r20	; 0x22

	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    20d2:	80 e0       	ldi	r24, 0x00	; 0
    20d4:	61 e0       	ldi	r22, 0x01	; 1
    20d6:	41 e0       	ldi	r20, 0x01	; 1
    20d8:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	60 e0       	ldi	r22, 0x00	; 0
    20e0:	40 e0       	ldi	r20, 0x00	; 0
    20e2:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_ES_tSetPinValue>


	if(copy_u8_row == FIRSTROW){
    20e6:	89 a1       	ldd	r24, Y+33	; 0x21
    20e8:	81 30       	cpi	r24, 0x01	; 1
    20ea:	09 f0       	breq	.+2      	; 0x20ee <Lcd_ES_tdisplayNum_xy+0x38>
    20ec:	76 c0       	rjmp	.+236    	; 0x21da <Lcd_ES_tdisplayNum_xy+0x124>
		Lcd_ES_tsendCmd(Force1stline);
    20ee:	80 e8       	ldi	r24, 0x80	; 128
    20f0:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Lcd_ES_tsendCmd>
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	a0 e8       	ldi	r26, 0x80	; 128
    20fa:	bf e3       	ldi	r27, 0x3F	; 63
    20fc:	89 8f       	std	Y+25, r24	; 0x19
    20fe:	9a 8f       	std	Y+26, r25	; 0x1a
    2100:	ab 8f       	std	Y+27, r26	; 0x1b
    2102:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2104:	69 8d       	ldd	r22, Y+25	; 0x19
    2106:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2108:	8b 8d       	ldd	r24, Y+27	; 0x1b
    210a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	4a e7       	ldi	r20, 0x7A	; 122
    2112:	55 e4       	ldi	r21, 0x45	; 69
    2114:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	8d 8b       	std	Y+21, r24	; 0x15
    211e:	9e 8b       	std	Y+22, r25	; 0x16
    2120:	af 8b       	std	Y+23, r26	; 0x17
    2122:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2124:	6d 89       	ldd	r22, Y+21	; 0x15
    2126:	7e 89       	ldd	r23, Y+22	; 0x16
    2128:	8f 89       	ldd	r24, Y+23	; 0x17
    212a:	98 8d       	ldd	r25, Y+24	; 0x18
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	40 e8       	ldi	r20, 0x80	; 128
    2132:	5f e3       	ldi	r21, 0x3F	; 63
    2134:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2138:	88 23       	and	r24, r24
    213a:	2c f4       	brge	.+10     	; 0x2146 <Lcd_ES_tdisplayNum_xy+0x90>
		__ticks = 1;
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	9c 8b       	std	Y+20, r25	; 0x14
    2142:	8b 8b       	std	Y+19, r24	; 0x13
    2144:	3f c0       	rjmp	.+126    	; 0x21c4 <Lcd_ES_tdisplayNum_xy+0x10e>
	else if (__tmp > 65535)
    2146:	6d 89       	ldd	r22, Y+21	; 0x15
    2148:	7e 89       	ldd	r23, Y+22	; 0x16
    214a:	8f 89       	ldd	r24, Y+23	; 0x17
    214c:	98 8d       	ldd	r25, Y+24	; 0x18
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	3f ef       	ldi	r19, 0xFF	; 255
    2152:	4f e7       	ldi	r20, 0x7F	; 127
    2154:	57 e4       	ldi	r21, 0x47	; 71
    2156:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    215a:	18 16       	cp	r1, r24
    215c:	4c f5       	brge	.+82     	; 0x21b0 <Lcd_ES_tdisplayNum_xy+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    215e:	69 8d       	ldd	r22, Y+25	; 0x19
    2160:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2162:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2164:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e2       	ldi	r20, 0x20	; 32
    216c:	51 e4       	ldi	r21, 0x41	; 65
    216e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	bc 01       	movw	r22, r24
    2178:	cd 01       	movw	r24, r26
    217a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	9c 8b       	std	Y+20, r25	; 0x14
    2184:	8b 8b       	std	Y+19, r24	; 0x13
    2186:	0f c0       	rjmp	.+30     	; 0x21a6 <Lcd_ES_tdisplayNum_xy+0xf0>
    2188:	80 e9       	ldi	r24, 0x90	; 144
    218a:	91 e0       	ldi	r25, 0x01	; 1
    218c:	9a 8b       	std	Y+18, r25	; 0x12
    218e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2190:	89 89       	ldd	r24, Y+17	; 0x11
    2192:	9a 89       	ldd	r25, Y+18	; 0x12
    2194:	01 97       	sbiw	r24, 0x01	; 1
    2196:	f1 f7       	brne	.-4      	; 0x2194 <Lcd_ES_tdisplayNum_xy+0xde>
    2198:	9a 8b       	std	Y+18, r25	; 0x12
    219a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    219c:	8b 89       	ldd	r24, Y+19	; 0x13
    219e:	9c 89       	ldd	r25, Y+20	; 0x14
    21a0:	01 97       	sbiw	r24, 0x01	; 1
    21a2:	9c 8b       	std	Y+20, r25	; 0x14
    21a4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a6:	8b 89       	ldd	r24, Y+19	; 0x13
    21a8:	9c 89       	ldd	r25, Y+20	; 0x14
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	69 f7       	brne	.-38     	; 0x2188 <Lcd_ES_tdisplayNum_xy+0xd2>
    21ae:	92 c0       	rjmp	.+292    	; 0x22d4 <Lcd_ES_tdisplayNum_xy+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b0:	6d 89       	ldd	r22, Y+21	; 0x15
    21b2:	7e 89       	ldd	r23, Y+22	; 0x16
    21b4:	8f 89       	ldd	r24, Y+23	; 0x17
    21b6:	98 8d       	ldd	r25, Y+24	; 0x18
    21b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	9c 8b       	std	Y+20, r25	; 0x14
    21c2:	8b 8b       	std	Y+19, r24	; 0x13
    21c4:	8b 89       	ldd	r24, Y+19	; 0x13
    21c6:	9c 89       	ldd	r25, Y+20	; 0x14
    21c8:	98 8b       	std	Y+16, r25	; 0x10
    21ca:	8f 87       	std	Y+15, r24	; 0x0f
    21cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ce:	98 89       	ldd	r25, Y+16	; 0x10
    21d0:	01 97       	sbiw	r24, 0x01	; 1
    21d2:	f1 f7       	brne	.-4      	; 0x21d0 <Lcd_ES_tdisplayNum_xy+0x11a>
    21d4:	98 8b       	std	Y+16, r25	; 0x10
    21d6:	8f 87       	std	Y+15, r24	; 0x0f
    21d8:	7d c0       	rjmp	.+250    	; 0x22d4 <Lcd_ES_tdisplayNum_xy+0x21e>
		_delay_ms(1);
	}else if(copy_u8_row == SECONDROW){
    21da:	89 a1       	ldd	r24, Y+33	; 0x21
    21dc:	82 30       	cpi	r24, 0x02	; 2
    21de:	09 f0       	breq	.+2      	; 0x21e2 <Lcd_ES_tdisplayNum_xy+0x12c>
    21e0:	76 c0       	rjmp	.+236    	; 0x22ce <Lcd_ES_tdisplayNum_xy+0x218>
		Lcd_ES_tsendCmd(Force2ndline);
    21e2:	80 ec       	ldi	r24, 0xC0	; 192
    21e4:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Lcd_ES_tsendCmd>
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	a0 e2       	ldi	r26, 0x20	; 32
    21ee:	b1 e4       	ldi	r27, 0x41	; 65
    21f0:	8b 87       	std	Y+11, r24	; 0x0b
    21f2:	9c 87       	std	Y+12, r25	; 0x0c
    21f4:	ad 87       	std	Y+13, r26	; 0x0d
    21f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    21fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    21fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    21fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	4a e7       	ldi	r20, 0x7A	; 122
    2206:	55 e4       	ldi	r21, 0x45	; 69
    2208:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	8f 83       	std	Y+7, r24	; 0x07
    2212:	98 87       	std	Y+8, r25	; 0x08
    2214:	a9 87       	std	Y+9, r26	; 0x09
    2216:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2218:	6f 81       	ldd	r22, Y+7	; 0x07
    221a:	78 85       	ldd	r23, Y+8	; 0x08
    221c:	89 85       	ldd	r24, Y+9	; 0x09
    221e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	40 e8       	ldi	r20, 0x80	; 128
    2226:	5f e3       	ldi	r21, 0x3F	; 63
    2228:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    222c:	88 23       	and	r24, r24
    222e:	2c f4       	brge	.+10     	; 0x223a <Lcd_ES_tdisplayNum_xy+0x184>
		__ticks = 1;
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	9e 83       	std	Y+6, r25	; 0x06
    2236:	8d 83       	std	Y+5, r24	; 0x05
    2238:	3f c0       	rjmp	.+126    	; 0x22b8 <Lcd_ES_tdisplayNum_xy+0x202>
	else if (__tmp > 65535)
    223a:	6f 81       	ldd	r22, Y+7	; 0x07
    223c:	78 85       	ldd	r23, Y+8	; 0x08
    223e:	89 85       	ldd	r24, Y+9	; 0x09
    2240:	9a 85       	ldd	r25, Y+10	; 0x0a
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	3f ef       	ldi	r19, 0xFF	; 255
    2246:	4f e7       	ldi	r20, 0x7F	; 127
    2248:	57 e4       	ldi	r21, 0x47	; 71
    224a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    224e:	18 16       	cp	r1, r24
    2250:	4c f5       	brge	.+82     	; 0x22a4 <Lcd_ES_tdisplayNum_xy+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2252:	6b 85       	ldd	r22, Y+11	; 0x0b
    2254:	7c 85       	ldd	r23, Y+12	; 0x0c
    2256:	8d 85       	ldd	r24, Y+13	; 0x0d
    2258:	9e 85       	ldd	r25, Y+14	; 0x0e
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	40 e2       	ldi	r20, 0x20	; 32
    2260:	51 e4       	ldi	r21, 0x41	; 65
    2262:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	bc 01       	movw	r22, r24
    226c:	cd 01       	movw	r24, r26
    226e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	9e 83       	std	Y+6, r25	; 0x06
    2278:	8d 83       	std	Y+5, r24	; 0x05
    227a:	0f c0       	rjmp	.+30     	; 0x229a <Lcd_ES_tdisplayNum_xy+0x1e4>
    227c:	80 e9       	ldi	r24, 0x90	; 144
    227e:	91 e0       	ldi	r25, 0x01	; 1
    2280:	9c 83       	std	Y+4, r25	; 0x04
    2282:	8b 83       	std	Y+3, r24	; 0x03
    2284:	8b 81       	ldd	r24, Y+3	; 0x03
    2286:	9c 81       	ldd	r25, Y+4	; 0x04
    2288:	01 97       	sbiw	r24, 0x01	; 1
    228a:	f1 f7       	brne	.-4      	; 0x2288 <Lcd_ES_tdisplayNum_xy+0x1d2>
    228c:	9c 83       	std	Y+4, r25	; 0x04
    228e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2290:	8d 81       	ldd	r24, Y+5	; 0x05
    2292:	9e 81       	ldd	r25, Y+6	; 0x06
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	9e 83       	std	Y+6, r25	; 0x06
    2298:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    229a:	8d 81       	ldd	r24, Y+5	; 0x05
    229c:	9e 81       	ldd	r25, Y+6	; 0x06
    229e:	00 97       	sbiw	r24, 0x00	; 0
    22a0:	69 f7       	brne	.-38     	; 0x227c <Lcd_ES_tdisplayNum_xy+0x1c6>
    22a2:	18 c0       	rjmp	.+48     	; 0x22d4 <Lcd_ES_tdisplayNum_xy+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a4:	6f 81       	ldd	r22, Y+7	; 0x07
    22a6:	78 85       	ldd	r23, Y+8	; 0x08
    22a8:	89 85       	ldd	r24, Y+9	; 0x09
    22aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	9e 83       	std	Y+6, r25	; 0x06
    22b6:	8d 83       	std	Y+5, r24	; 0x05
    22b8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ba:	9e 81       	ldd	r25, Y+6	; 0x06
    22bc:	9a 83       	std	Y+2, r25	; 0x02
    22be:	89 83       	std	Y+1, r24	; 0x01
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	9a 81       	ldd	r25, Y+2	; 0x02
    22c4:	01 97       	sbiw	r24, 0x01	; 1
    22c6:	f1 f7       	brne	.-4      	; 0x22c4 <Lcd_ES_tdisplayNum_xy+0x20e>
    22c8:	9a 83       	std	Y+2, r25	; 0x02
    22ca:	89 83       	std	Y+1, r24	; 0x01
    22cc:	03 c0       	rjmp	.+6      	; 0x22d4 <Lcd_ES_tdisplayNum_xy+0x21e>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	8b a3       	std	Y+35, r24	; 0x23
    22d2:	1a c0       	rjmp	.+52     	; 0x2308 <Lcd_ES_tdisplayNum_xy+0x252>
	}


	for(int j=1;j<=copy_u8_col;j++){
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	9e 8f       	std	Y+30, r25	; 0x1e
    22da:	8d 8f       	std	Y+29, r24	; 0x1d
    22dc:	08 c0       	rjmp	.+16     	; 0x22ee <Lcd_ES_tdisplayNum_xy+0x238>
		Lcd_ES_tsendCmd(ShiftRight);
    22de:	8c e1       	ldi	r24, 0x1C	; 28
    22e0:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Lcd_ES_tsendCmd>
	}else{
		return ES_NOT_OK;
	}


	for(int j=1;j<=copy_u8_col;j++){
    22e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22e8:	01 96       	adiw	r24, 0x01	; 1
    22ea:	9e 8f       	std	Y+30, r25	; 0x1e
    22ec:	8d 8f       	std	Y+29, r24	; 0x1d
    22ee:	8a a1       	ldd	r24, Y+34	; 0x22
    22f0:	28 2f       	mov	r18, r24
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22f8:	28 17       	cp	r18, r24
    22fa:	39 07       	cpc	r19, r25
    22fc:	84 f7       	brge	.-32     	; 0x22de <Lcd_ES_tdisplayNum_xy+0x228>
		Lcd_ES_tsendCmd(ShiftRight);
	}

	Lcd_ES_tdisplayNum(copy_u16_num);
    22fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2300:	98 a1       	ldd	r25, Y+32	; 0x20
    2302:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <Lcd_ES_tdisplayNum>
	return ES_OK;
    2306:	1b a2       	std	Y+35, r1	; 0x23
    2308:	8b a1       	ldd	r24, Y+35	; 0x23

}
    230a:	a3 96       	adiw	r28, 0x23	; 35
    230c:	0f b6       	in	r0, 0x3f	; 63
    230e:	f8 94       	cli
    2310:	de bf       	out	0x3e, r29	; 62
    2312:	0f be       	out	0x3f, r0	; 63
    2314:	cd bf       	out	0x3d, r28	; 61
    2316:	cf 91       	pop	r28
    2318:	df 91       	pop	r29
    231a:	08 95       	ret

0000231c <Lcd_ES_tsendChar_xy>:

ES_t Lcd_ES_tsendChar_xy(u8 copy_u8_data,u8 copy_u8_row,u8 copy_u8_col){
    231c:	df 93       	push	r29
    231e:	cf 93       	push	r28
    2320:	cd b7       	in	r28, 0x3d	; 61
    2322:	de b7       	in	r29, 0x3e	; 62
    2324:	a2 97       	sbiw	r28, 0x22	; 34
    2326:	0f b6       	in	r0, 0x3f	; 63
    2328:	f8 94       	cli
    232a:	de bf       	out	0x3e, r29	; 62
    232c:	0f be       	out	0x3f, r0	; 63
    232e:	cd bf       	out	0x3d, r28	; 61
    2330:	8f 8f       	std	Y+31, r24	; 0x1f
    2332:	68 a3       	std	Y+32, r22	; 0x20
    2334:	49 a3       	std	Y+33, r20	; 0x21
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	61 e0       	ldi	r22, 0x01	; 1
    233a:	41 e0       	ldi	r20, 0x01	; 1
    233c:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	60 e0       	ldi	r22, 0x00	; 0
    2344:	40 e0       	ldi	r20, 0x00	; 0
    2346:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_ES_tSetPinValue>


	if(copy_u8_row == FIRSTROW){
    234a:	88 a1       	ldd	r24, Y+32	; 0x20
    234c:	81 30       	cpi	r24, 0x01	; 1
    234e:	09 f0       	breq	.+2      	; 0x2352 <Lcd_ES_tsendChar_xy+0x36>
    2350:	76 c0       	rjmp	.+236    	; 0x243e <Lcd_ES_tsendChar_xy+0x122>
		Lcd_ES_tsendCmd(Force1stline);
    2352:	80 e8       	ldi	r24, 0x80	; 128
    2354:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Lcd_ES_tsendCmd>
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	a0 e8       	ldi	r26, 0x80	; 128
    235e:	bf e3       	ldi	r27, 0x3F	; 63
    2360:	89 8f       	std	Y+25, r24	; 0x19
    2362:	9a 8f       	std	Y+26, r25	; 0x1a
    2364:	ab 8f       	std	Y+27, r26	; 0x1b
    2366:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2368:	69 8d       	ldd	r22, Y+25	; 0x19
    236a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    236c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    236e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	4a e7       	ldi	r20, 0x7A	; 122
    2376:	55 e4       	ldi	r21, 0x45	; 69
    2378:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	8d 8b       	std	Y+21, r24	; 0x15
    2382:	9e 8b       	std	Y+22, r25	; 0x16
    2384:	af 8b       	std	Y+23, r26	; 0x17
    2386:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2388:	6d 89       	ldd	r22, Y+21	; 0x15
    238a:	7e 89       	ldd	r23, Y+22	; 0x16
    238c:	8f 89       	ldd	r24, Y+23	; 0x17
    238e:	98 8d       	ldd	r25, Y+24	; 0x18
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	40 e8       	ldi	r20, 0x80	; 128
    2396:	5f e3       	ldi	r21, 0x3F	; 63
    2398:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    239c:	88 23       	and	r24, r24
    239e:	2c f4       	brge	.+10     	; 0x23aa <Lcd_ES_tsendChar_xy+0x8e>
		__ticks = 1;
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	9c 8b       	std	Y+20, r25	; 0x14
    23a6:	8b 8b       	std	Y+19, r24	; 0x13
    23a8:	3f c0       	rjmp	.+126    	; 0x2428 <Lcd_ES_tsendChar_xy+0x10c>
	else if (__tmp > 65535)
    23aa:	6d 89       	ldd	r22, Y+21	; 0x15
    23ac:	7e 89       	ldd	r23, Y+22	; 0x16
    23ae:	8f 89       	ldd	r24, Y+23	; 0x17
    23b0:	98 8d       	ldd	r25, Y+24	; 0x18
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	3f ef       	ldi	r19, 0xFF	; 255
    23b6:	4f e7       	ldi	r20, 0x7F	; 127
    23b8:	57 e4       	ldi	r21, 0x47	; 71
    23ba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    23be:	18 16       	cp	r1, r24
    23c0:	4c f5       	brge	.+82     	; 0x2414 <Lcd_ES_tsendChar_xy+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c2:	69 8d       	ldd	r22, Y+25	; 0x19
    23c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	40 e2       	ldi	r20, 0x20	; 32
    23d0:	51 e4       	ldi	r21, 0x41	; 65
    23d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23d6:	dc 01       	movw	r26, r24
    23d8:	cb 01       	movw	r24, r22
    23da:	bc 01       	movw	r22, r24
    23dc:	cd 01       	movw	r24, r26
    23de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	9c 8b       	std	Y+20, r25	; 0x14
    23e8:	8b 8b       	std	Y+19, r24	; 0x13
    23ea:	0f c0       	rjmp	.+30     	; 0x240a <Lcd_ES_tsendChar_xy+0xee>
    23ec:	80 e9       	ldi	r24, 0x90	; 144
    23ee:	91 e0       	ldi	r25, 0x01	; 1
    23f0:	9a 8b       	std	Y+18, r25	; 0x12
    23f2:	89 8b       	std	Y+17, r24	; 0x11
    23f4:	89 89       	ldd	r24, Y+17	; 0x11
    23f6:	9a 89       	ldd	r25, Y+18	; 0x12
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	f1 f7       	brne	.-4      	; 0x23f8 <Lcd_ES_tsendChar_xy+0xdc>
    23fc:	9a 8b       	std	Y+18, r25	; 0x12
    23fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2400:	8b 89       	ldd	r24, Y+19	; 0x13
    2402:	9c 89       	ldd	r25, Y+20	; 0x14
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	9c 8b       	std	Y+20, r25	; 0x14
    2408:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    240a:	8b 89       	ldd	r24, Y+19	; 0x13
    240c:	9c 89       	ldd	r25, Y+20	; 0x14
    240e:	00 97       	sbiw	r24, 0x00	; 0
    2410:	69 f7       	brne	.-38     	; 0x23ec <Lcd_ES_tsendChar_xy+0xd0>
    2412:	92 c0       	rjmp	.+292    	; 0x2538 <Lcd_ES_tsendChar_xy+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2414:	6d 89       	ldd	r22, Y+21	; 0x15
    2416:	7e 89       	ldd	r23, Y+22	; 0x16
    2418:	8f 89       	ldd	r24, Y+23	; 0x17
    241a:	98 8d       	ldd	r25, Y+24	; 0x18
    241c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	9c 8b       	std	Y+20, r25	; 0x14
    2426:	8b 8b       	std	Y+19, r24	; 0x13
    2428:	8b 89       	ldd	r24, Y+19	; 0x13
    242a:	9c 89       	ldd	r25, Y+20	; 0x14
    242c:	98 8b       	std	Y+16, r25	; 0x10
    242e:	8f 87       	std	Y+15, r24	; 0x0f
    2430:	8f 85       	ldd	r24, Y+15	; 0x0f
    2432:	98 89       	ldd	r25, Y+16	; 0x10
    2434:	01 97       	sbiw	r24, 0x01	; 1
    2436:	f1 f7       	brne	.-4      	; 0x2434 <Lcd_ES_tsendChar_xy+0x118>
    2438:	98 8b       	std	Y+16, r25	; 0x10
    243a:	8f 87       	std	Y+15, r24	; 0x0f
    243c:	7d c0       	rjmp	.+250    	; 0x2538 <Lcd_ES_tsendChar_xy+0x21c>
		_delay_ms(1);
	}else if(copy_u8_row == FIRSTROW){
    243e:	88 a1       	ldd	r24, Y+32	; 0x20
    2440:	81 30       	cpi	r24, 0x01	; 1
    2442:	09 f0       	breq	.+2      	; 0x2446 <Lcd_ES_tsendChar_xy+0x12a>
    2444:	76 c0       	rjmp	.+236    	; 0x2532 <Lcd_ES_tsendChar_xy+0x216>
		Lcd_ES_tsendCmd(Force2ndline);
    2446:	80 ec       	ldi	r24, 0xC0	; 192
    2448:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Lcd_ES_tsendCmd>
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	a0 e2       	ldi	r26, 0x20	; 32
    2452:	b1 e4       	ldi	r27, 0x41	; 65
    2454:	8b 87       	std	Y+11, r24	; 0x0b
    2456:	9c 87       	std	Y+12, r25	; 0x0c
    2458:	ad 87       	std	Y+13, r26	; 0x0d
    245a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    245c:	6b 85       	ldd	r22, Y+11	; 0x0b
    245e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2460:	8d 85       	ldd	r24, Y+13	; 0x0d
    2462:	9e 85       	ldd	r25, Y+14	; 0x0e
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	4a e7       	ldi	r20, 0x7A	; 122
    246a:	55 e4       	ldi	r21, 0x45	; 69
    246c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	8f 83       	std	Y+7, r24	; 0x07
    2476:	98 87       	std	Y+8, r25	; 0x08
    2478:	a9 87       	std	Y+9, r26	; 0x09
    247a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    247c:	6f 81       	ldd	r22, Y+7	; 0x07
    247e:	78 85       	ldd	r23, Y+8	; 0x08
    2480:	89 85       	ldd	r24, Y+9	; 0x09
    2482:	9a 85       	ldd	r25, Y+10	; 0x0a
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 e8       	ldi	r20, 0x80	; 128
    248a:	5f e3       	ldi	r21, 0x3F	; 63
    248c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2490:	88 23       	and	r24, r24
    2492:	2c f4       	brge	.+10     	; 0x249e <Lcd_ES_tsendChar_xy+0x182>
		__ticks = 1;
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	9e 83       	std	Y+6, r25	; 0x06
    249a:	8d 83       	std	Y+5, r24	; 0x05
    249c:	3f c0       	rjmp	.+126    	; 0x251c <Lcd_ES_tsendChar_xy+0x200>
	else if (__tmp > 65535)
    249e:	6f 81       	ldd	r22, Y+7	; 0x07
    24a0:	78 85       	ldd	r23, Y+8	; 0x08
    24a2:	89 85       	ldd	r24, Y+9	; 0x09
    24a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	3f ef       	ldi	r19, 0xFF	; 255
    24aa:	4f e7       	ldi	r20, 0x7F	; 127
    24ac:	57 e4       	ldi	r21, 0x47	; 71
    24ae:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    24b2:	18 16       	cp	r1, r24
    24b4:	4c f5       	brge	.+82     	; 0x2508 <Lcd_ES_tsendChar_xy+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    24b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    24bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	40 e2       	ldi	r20, 0x20	; 32
    24c4:	51 e4       	ldi	r21, 0x41	; 65
    24c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	bc 01       	movw	r22, r24
    24d0:	cd 01       	movw	r24, r26
    24d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	9e 83       	std	Y+6, r25	; 0x06
    24dc:	8d 83       	std	Y+5, r24	; 0x05
    24de:	0f c0       	rjmp	.+30     	; 0x24fe <Lcd_ES_tsendChar_xy+0x1e2>
    24e0:	80 e9       	ldi	r24, 0x90	; 144
    24e2:	91 e0       	ldi	r25, 0x01	; 1
    24e4:	9c 83       	std	Y+4, r25	; 0x04
    24e6:	8b 83       	std	Y+3, r24	; 0x03
    24e8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ea:	9c 81       	ldd	r25, Y+4	; 0x04
    24ec:	01 97       	sbiw	r24, 0x01	; 1
    24ee:	f1 f7       	brne	.-4      	; 0x24ec <Lcd_ES_tsendChar_xy+0x1d0>
    24f0:	9c 83       	std	Y+4, r25	; 0x04
    24f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f4:	8d 81       	ldd	r24, Y+5	; 0x05
    24f6:	9e 81       	ldd	r25, Y+6	; 0x06
    24f8:	01 97       	sbiw	r24, 0x01	; 1
    24fa:	9e 83       	std	Y+6, r25	; 0x06
    24fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2500:	9e 81       	ldd	r25, Y+6	; 0x06
    2502:	00 97       	sbiw	r24, 0x00	; 0
    2504:	69 f7       	brne	.-38     	; 0x24e0 <Lcd_ES_tsendChar_xy+0x1c4>
    2506:	18 c0       	rjmp	.+48     	; 0x2538 <Lcd_ES_tsendChar_xy+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2508:	6f 81       	ldd	r22, Y+7	; 0x07
    250a:	78 85       	ldd	r23, Y+8	; 0x08
    250c:	89 85       	ldd	r24, Y+9	; 0x09
    250e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2510:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	9e 83       	std	Y+6, r25	; 0x06
    251a:	8d 83       	std	Y+5, r24	; 0x05
    251c:	8d 81       	ldd	r24, Y+5	; 0x05
    251e:	9e 81       	ldd	r25, Y+6	; 0x06
    2520:	9a 83       	std	Y+2, r25	; 0x02
    2522:	89 83       	std	Y+1, r24	; 0x01
    2524:	89 81       	ldd	r24, Y+1	; 0x01
    2526:	9a 81       	ldd	r25, Y+2	; 0x02
    2528:	01 97       	sbiw	r24, 0x01	; 1
    252a:	f1 f7       	brne	.-4      	; 0x2528 <Lcd_ES_tsendChar_xy+0x20c>
    252c:	9a 83       	std	Y+2, r25	; 0x02
    252e:	89 83       	std	Y+1, r24	; 0x01
    2530:	03 c0       	rjmp	.+6      	; 0x2538 <Lcd_ES_tsendChar_xy+0x21c>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	8a a3       	std	Y+34, r24	; 0x22
    2536:	19 c0       	rjmp	.+50     	; 0x256a <Lcd_ES_tsendChar_xy+0x24e>
	}

	for(int j=1;j<=copy_u8_col;j++){
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	9e 8f       	std	Y+30, r25	; 0x1e
    253e:	8d 8f       	std	Y+29, r24	; 0x1d
    2540:	08 c0       	rjmp	.+16     	; 0x2552 <Lcd_ES_tsendChar_xy+0x236>
		Lcd_ES_tsendCmd(ShiftRight);
    2542:	8c e1       	ldi	r24, 0x1C	; 28
    2544:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Lcd_ES_tsendCmd>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
	}

	for(int j=1;j<=copy_u8_col;j++){
    2548:	8d 8d       	ldd	r24, Y+29	; 0x1d
    254a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    254c:	01 96       	adiw	r24, 0x01	; 1
    254e:	9e 8f       	std	Y+30, r25	; 0x1e
    2550:	8d 8f       	std	Y+29, r24	; 0x1d
    2552:	89 a1       	ldd	r24, Y+33	; 0x21
    2554:	28 2f       	mov	r18, r24
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	8d 8d       	ldd	r24, Y+29	; 0x1d
    255a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    255c:	28 17       	cp	r18, r24
    255e:	39 07       	cpc	r19, r25
    2560:	84 f7       	brge	.-32     	; 0x2542 <Lcd_ES_tsendChar_xy+0x226>
		Lcd_ES_tsendCmd(ShiftRight);
	}
	Lcd_ES_tsendChar(copy_u8_data);
    2562:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2564:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <Lcd_ES_tsendChar>
	return ES_OK;
    2568:	1a a2       	std	Y+34, r1	; 0x22
    256a:	8a a1       	ldd	r24, Y+34	; 0x22
}
    256c:	a2 96       	adiw	r28, 0x22	; 34
    256e:	0f b6       	in	r0, 0x3f	; 63
    2570:	f8 94       	cli
    2572:	de bf       	out	0x3e, r29	; 62
    2574:	0f be       	out	0x3f, r0	; 63
    2576:	cd bf       	out	0x3d, r28	; 61
    2578:	cf 91       	pop	r28
    257a:	df 91       	pop	r29
    257c:	08 95       	ret

0000257e <LCD_ES_tSet_Cursor_Pos>:

static ES_t LCD_ES_tSet_Cursor_Pos(u8 copy_u8_row,u8 copy_u8_column){
    257e:	df 93       	push	r29
    2580:	cf 93       	push	r28
    2582:	00 d0       	rcall	.+0      	; 0x2584 <LCD_ES_tSet_Cursor_Pos+0x6>
    2584:	00 d0       	rcall	.+0      	; 0x2586 <LCD_ES_tSet_Cursor_Pos+0x8>
    2586:	0f 92       	push	r0
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
    258c:	89 83       	std	Y+1, r24	; 0x01
    258e:	6a 83       	std	Y+2, r22	; 0x02
	copy_u8_column--;
    2590:	8a 81       	ldd	r24, Y+2	; 0x02
    2592:	81 50       	subi	r24, 0x01	; 1
    2594:	8a 83       	std	Y+2, r24	; 0x02
	switch(copy_u8_row){
    2596:	89 81       	ldd	r24, Y+1	; 0x01
    2598:	28 2f       	mov	r18, r24
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	3d 83       	std	Y+5, r19	; 0x05
    259e:	2c 83       	std	Y+4, r18	; 0x04
    25a0:	8c 81       	ldd	r24, Y+4	; 0x04
    25a2:	9d 81       	ldd	r25, Y+5	; 0x05
    25a4:	81 30       	cpi	r24, 0x01	; 1
    25a6:	91 05       	cpc	r25, r1
    25a8:	31 f0       	breq	.+12     	; 0x25b6 <LCD_ES_tSet_Cursor_Pos+0x38>
    25aa:	2c 81       	ldd	r18, Y+4	; 0x04
    25ac:	3d 81       	ldd	r19, Y+5	; 0x05
    25ae:	22 30       	cpi	r18, 0x02	; 2
    25b0:	31 05       	cpc	r19, r1
    25b2:	31 f0       	breq	.+12     	; 0x25c0 <LCD_ES_tSet_Cursor_Pos+0x42>
    25b4:	0a c0       	rjmp	.+20     	; 0x25ca <LCD_ES_tSet_Cursor_Pos+0x4c>
	         case 1:
	        	 Lcd_ES_tsendCmd((Force1stline + copy_u8_column));
    25b6:	8a 81       	ldd	r24, Y+2	; 0x02
    25b8:	80 58       	subi	r24, 0x80	; 128
    25ba:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Lcd_ES_tsendCmd>
    25be:	08 c0       	rjmp	.+16     	; 0x25d0 <LCD_ES_tSet_Cursor_Pos+0x52>
	        	 break;
	         case 2:
	        	 Lcd_ES_tsendCmd((Force2ndline + copy_u8_column));
    25c0:	8a 81       	ldd	r24, Y+2	; 0x02
    25c2:	80 54       	subi	r24, 0x40	; 64
    25c4:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Lcd_ES_tsendCmd>
    25c8:	03 c0       	rjmp	.+6      	; 0x25d0 <LCD_ES_tSet_Cursor_Pos+0x52>
	        	 break;
	         default:
	        	 return ES_NOT_OK;
    25ca:	31 e0       	ldi	r19, 0x01	; 1
    25cc:	3b 83       	std	Y+3, r19	; 0x03
    25ce:	01 c0       	rjmp	.+2      	; 0x25d2 <LCD_ES_tSet_Cursor_Pos+0x54>
	}
	return ES_OK;
    25d0:	1b 82       	std	Y+3, r1	; 0x03
    25d2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	0f 90       	pop	r0
    25da:	0f 90       	pop	r0
    25dc:	0f 90       	pop	r0
    25de:	cf 91       	pop	r28
    25e0:	df 91       	pop	r29
    25e2:	08 95       	ret

000025e4 <LCD_ES_tGoTo>:

/************************************************************************/
ES_t LCD_ES_tGoTo(u8 copy_u8_Line, u8 copy_u8_Col){
    25e4:	df 93       	push	r29
    25e6:	cf 93       	push	r28
    25e8:	00 d0       	rcall	.+0      	; 0x25ea <LCD_ES_tGoTo+0x6>
    25ea:	0f 92       	push	r0
    25ec:	cd b7       	in	r28, 0x3d	; 61
    25ee:	de b7       	in	r29, 0x3e	; 62
    25f0:	89 83       	std	Y+1, r24	; 0x01
    25f2:	6a 83       	std	Y+2, r22	; 0x02
	if(0 == copy_u8_Line)
    25f4:	89 81       	ldd	r24, Y+1	; 0x01
    25f6:	88 23       	and	r24, r24
    25f8:	41 f4       	brne	.+16     	; 0x260a <LCD_ES_tGoTo+0x26>
	{
		if ( copy_u8_Col <=MAX_COL_SIZE)
    25fa:	8a 81       	ldd	r24, Y+2	; 0x02
    25fc:	80 31       	cpi	r24, 0x10	; 16
    25fe:	98 f4       	brcc	.+38     	; 0x2626 <LCD_ES_tGoTo+0x42>
		{
			Lcd_ES_tsendCmd(0x80 + copy_u8_Col);
    2600:	8a 81       	ldd	r24, Y+2	; 0x02
    2602:	80 58       	subi	r24, 0x80	; 128
    2604:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Lcd_ES_tsendCmd>
    2608:	0e c0       	rjmp	.+28     	; 0x2626 <LCD_ES_tGoTo+0x42>
		}
	}
	else if (FIRSTROW == copy_u8_Line)
    260a:	89 81       	ldd	r24, Y+1	; 0x01
    260c:	81 30       	cpi	r24, 0x01	; 1
    260e:	41 f4       	brne	.+16     	; 0x2620 <LCD_ES_tGoTo+0x3c>
	{
		if ( copy_u8_Col <=MAX_COL_SIZE)
    2610:	8a 81       	ldd	r24, Y+2	; 0x02
    2612:	80 31       	cpi	r24, 0x10	; 16
    2614:	40 f4       	brcc	.+16     	; 0x2626 <LCD_ES_tGoTo+0x42>
		{
			Lcd_ES_tsendCmd(0xC0 + copy_u8_Col);
    2616:	8a 81       	ldd	r24, Y+2	; 0x02
    2618:	80 54       	subi	r24, 0x40	; 64
    261a:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Lcd_ES_tsendCmd>
    261e:	03 c0       	rjmp	.+6      	; 0x2626 <LCD_ES_tGoTo+0x42>
		}
	}else{
		return ES_NOT_OK;
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	8b 83       	std	Y+3, r24	; 0x03
    2624:	01 c0       	rjmp	.+2      	; 0x2628 <LCD_ES_tGoTo+0x44>
	}
	return ES_OK;
    2626:	1b 82       	std	Y+3, r1	; 0x03
    2628:	8b 81       	ldd	r24, Y+3	; 0x03
}
    262a:	0f 90       	pop	r0
    262c:	0f 90       	pop	r0
    262e:	0f 90       	pop	r0
    2630:	cf 91       	pop	r28
    2632:	df 91       	pop	r29
    2634:	08 95       	ret

00002636 <Lcd_CreateCustomCharacter>:
                                                      
/************************************************************************/


ES_t Lcd_CreateCustomCharacter(u8 *Local_u8_pattern,u8 Local_u8_location)
{
    2636:	df 93       	push	r29
    2638:	cf 93       	push	r28
    263a:	00 d0       	rcall	.+0      	; 0x263c <Lcd_CreateCustomCharacter+0x6>
    263c:	00 d0       	rcall	.+0      	; 0x263e <Lcd_CreateCustomCharacter+0x8>
    263e:	cd b7       	in	r28, 0x3d	; 61
    2640:	de b7       	in	r29, 0x3e	; 62
    2642:	9b 83       	std	Y+3, r25	; 0x03
    2644:	8a 83       	std	Y+2, r24	; 0x02
    2646:	6c 83       	std	Y+4, r22	; 0x04
	// First send the address in CGRAM
	Lcd_ES_tsendCmd(CGRAM_ADD + (Local_u8_location * MAX_LOCATION));
    2648:	8c 81       	ldd	r24, Y+4	; 0x04
    264a:	88 2f       	mov	r24, r24
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	08 96       	adiw	r24, 0x08	; 8
    2650:	88 0f       	add	r24, r24
    2652:	99 1f       	adc	r25, r25
    2654:	88 0f       	add	r24, r24
    2656:	99 1f       	adc	r25, r25
    2658:	88 0f       	add	r24, r24
    265a:	99 1f       	adc	r25, r25
    265c:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Lcd_ES_tsendCmd>
	// Adding 0x40 is the command to set CGRAM address
	// + each character takes 8 bytes
	for(u8 Local_Iterator=LOW;Local_Iterator<MAX_LOCATION;Local_Iterator++){
    2660:	19 82       	std	Y+1, r1	; 0x01
    2662:	0e c0       	rjmp	.+28     	; 0x2680 <Lcd_CreateCustomCharacter+0x4a>
		// Passing the bytes on the pattern on LCD
		Lcd_ES_tsendChar(Local_u8_pattern[Local_Iterator]);
    2664:	89 81       	ldd	r24, Y+1	; 0x01
    2666:	28 2f       	mov	r18, r24
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	8a 81       	ldd	r24, Y+2	; 0x02
    266c:	9b 81       	ldd	r25, Y+3	; 0x03
    266e:	fc 01       	movw	r30, r24
    2670:	e2 0f       	add	r30, r18
    2672:	f3 1f       	adc	r31, r19
    2674:	80 81       	ld	r24, Z
    2676:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <Lcd_ES_tsendChar>
{
	// First send the address in CGRAM
	Lcd_ES_tsendCmd(CGRAM_ADD + (Local_u8_location * MAX_LOCATION));
	// Adding 0x40 is the command to set CGRAM address
	// + each character takes 8 bytes
	for(u8 Local_Iterator=LOW;Local_Iterator<MAX_LOCATION;Local_Iterator++){
    267a:	89 81       	ldd	r24, Y+1	; 0x01
    267c:	8f 5f       	subi	r24, 0xFF	; 255
    267e:	89 83       	std	Y+1, r24	; 0x01
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	88 30       	cpi	r24, 0x08	; 8
    2684:	78 f3       	brcs	.-34     	; 0x2664 <Lcd_CreateCustomCharacter+0x2e>
		// Passing the bytes on the pattern on LCD
		Lcd_ES_tsendChar(Local_u8_pattern[Local_Iterator]);
	}
	return ES_OK;
    2686:	80 e0       	ldi	r24, 0x00	; 0
}
    2688:	0f 90       	pop	r0
    268a:	0f 90       	pop	r0
    268c:	0f 90       	pop	r0
    268e:	0f 90       	pop	r0
    2690:	cf 91       	pop	r28
    2692:	df 91       	pop	r29
    2694:	08 95       	ret

00002696 <main>:


#define SMILE 0

int main()
{
    2696:	df 93       	push	r29
    2698:	cf 93       	push	r28
    269a:	cd b7       	in	r28, 0x3d	; 61
    269c:	de b7       	in	r29, 0x3e	; 62
    269e:	ab 97       	sbiw	r28, 0x2b	; 43
    26a0:	0f b6       	in	r0, 0x3f	; 63
    26a2:	f8 94       	cli
    26a4:	de bf       	out	0x3e, r29	; 62
    26a6:	0f be       	out	0x3f, r0	; 63
    26a8:	cd bf       	out	0x3d, r28	; 61
	DIO_ES_tInit();
    26aa:	0e 94 cb 09 	call	0x1396	; 0x1396 <DIO_ES_tInit>
	Lcd_ES_tInit();
    26ae:	0e 94 84 0c 	call	0x1908	; 0x1908 <Lcd_ES_tInit>
	LCD_ES_tGoTo(0, 0);
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	60 e0       	ldi	r22, 0x00	; 0
    26b6:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <LCD_ES_tGoTo>
	u8 Smile[] = {0x00,0x00,0x0A,0x00,0x11,0x11,0x0E,0x00};
    26ba:	ce 01       	movw	r24, r28
    26bc:	4e 96       	adiw	r24, 0x1e	; 30
    26be:	98 a7       	std	Y+40, r25	; 0x28
    26c0:	8f a3       	std	Y+39, r24	; 0x27
    26c2:	ea eb       	ldi	r30, 0xBA	; 186
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	fa a7       	std	Y+42, r31	; 0x2a
    26c8:	e9 a7       	std	Y+41, r30	; 0x29
    26ca:	f8 e0       	ldi	r31, 0x08	; 8
    26cc:	fb a7       	std	Y+43, r31	; 0x2b
    26ce:	e9 a5       	ldd	r30, Y+41	; 0x29
    26d0:	fa a5       	ldd	r31, Y+42	; 0x2a
    26d2:	00 80       	ld	r0, Z
    26d4:	89 a5       	ldd	r24, Y+41	; 0x29
    26d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    26d8:	01 96       	adiw	r24, 0x01	; 1
    26da:	9a a7       	std	Y+42, r25	; 0x2a
    26dc:	89 a7       	std	Y+41, r24	; 0x29
    26de:	ef a1       	ldd	r30, Y+39	; 0x27
    26e0:	f8 a5       	ldd	r31, Y+40	; 0x28
    26e2:	00 82       	st	Z, r0
    26e4:	8f a1       	ldd	r24, Y+39	; 0x27
    26e6:	98 a5       	ldd	r25, Y+40	; 0x28
    26e8:	01 96       	adiw	r24, 0x01	; 1
    26ea:	98 a7       	std	Y+40, r25	; 0x28
    26ec:	8f a3       	std	Y+39, r24	; 0x27
    26ee:	9b a5       	ldd	r25, Y+43	; 0x2b
    26f0:	91 50       	subi	r25, 0x01	; 1
    26f2:	9b a7       	std	Y+43, r25	; 0x2b
    26f4:	eb a5       	ldd	r30, Y+43	; 0x2b
    26f6:	ee 23       	and	r30, r30
    26f8:	51 f7       	brne	.-44     	; 0x26ce <main+0x38>
	Lcd_CreateCustomCharacter(Smile,SMILE);
    26fa:	ce 01       	movw	r24, r28
    26fc:	4e 96       	adiw	r24, 0x1e	; 30
    26fe:	60 e0       	ldi	r22, 0x00	; 0
    2700:	0e 94 1b 13 	call	0x2636	; 0x2636 <Lcd_CreateCustomCharacter>
	u8 Local_u8_SwitchVal;

	Lcd_ES_tsendCmd(0x80);   // Set DDRAM address to 0
    2704:	80 e8       	ldi	r24, 0x80	; 128
    2706:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Lcd_ES_tsendCmd>
	u8 Local_u8_counter;

	Lcd_ES_tsendString("COUNTER TO 10");
    270a:	80 e6       	ldi	r24, 0x60	; 96
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <Lcd_ES_tsendString>
	LCD_ES_tGoTo(0, 15);
    2712:	80 e0       	ldi	r24, 0x00	; 0
    2714:	6f e0       	ldi	r22, 0x0F	; 15
    2716:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <LCD_ES_tGoTo>
	Lcd_ES_tsendChar(SMILE);
    271a:	80 e0       	ldi	r24, 0x00	; 0
    271c:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <Lcd_ES_tsendChar>
	while(1)
	{
		DIO_ES_tGetPinValue(DIO_U8_PORT_D, DIO_U8_PIN_6, &Local_u8_SwitchVal);
    2720:	9e 01       	movw	r18, r28
    2722:	2a 5d       	subi	r18, 0xDA	; 218
    2724:	3f 4f       	sbci	r19, 0xFF	; 255
    2726:	83 e0       	ldi	r24, 0x03	; 3
    2728:	66 e0       	ldi	r22, 0x06	; 6
    272a:	a9 01       	movw	r20, r18
    272c:	0e 94 25 08 	call	0x104a	; 0x104a <DIO_ES_tGetPinValue>

		for(Local_u8_counter=0;Local_u8_counter<11;Local_u8_counter++){
    2730:	1d 8e       	std	Y+29, r1	; 0x1d
    2732:	7e c0       	rjmp	.+252    	; 0x2830 <main+0x19a>
			LCD_ES_tGoTo(1,5);
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	65 e0       	ldi	r22, 0x05	; 5
    2738:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <LCD_ES_tGoTo>
			Lcd_ES_tdisplayNum(Local_u8_counter);
    273c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    273e:	88 2f       	mov	r24, r24
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <Lcd_ES_tdisplayNum>
    2746:	80 e0       	ldi	r24, 0x00	; 0
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	aa ef       	ldi	r26, 0xFA	; 250
    274c:	b3 e4       	ldi	r27, 0x43	; 67
    274e:	89 8f       	std	Y+25, r24	; 0x19
    2750:	9a 8f       	std	Y+26, r25	; 0x1a
    2752:	ab 8f       	std	Y+27, r26	; 0x1b
    2754:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2756:	69 8d       	ldd	r22, Y+25	; 0x19
    2758:	7a 8d       	ldd	r23, Y+26	; 0x1a
    275a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    275c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	4a e7       	ldi	r20, 0x7A	; 122
    2764:	55 e4       	ldi	r21, 0x45	; 69
    2766:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    276a:	dc 01       	movw	r26, r24
    276c:	cb 01       	movw	r24, r22
    276e:	8d 8b       	std	Y+21, r24	; 0x15
    2770:	9e 8b       	std	Y+22, r25	; 0x16
    2772:	af 8b       	std	Y+23, r26	; 0x17
    2774:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2776:	6d 89       	ldd	r22, Y+21	; 0x15
    2778:	7e 89       	ldd	r23, Y+22	; 0x16
    277a:	8f 89       	ldd	r24, Y+23	; 0x17
    277c:	98 8d       	ldd	r25, Y+24	; 0x18
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	40 e8       	ldi	r20, 0x80	; 128
    2784:	5f e3       	ldi	r21, 0x3F	; 63
    2786:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    278a:	88 23       	and	r24, r24
    278c:	2c f4       	brge	.+10     	; 0x2798 <main+0x102>
		__ticks = 1;
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	9c 8b       	std	Y+20, r25	; 0x14
    2794:	8b 8b       	std	Y+19, r24	; 0x13
    2796:	3f c0       	rjmp	.+126    	; 0x2816 <main+0x180>
	else if (__tmp > 65535)
    2798:	6d 89       	ldd	r22, Y+21	; 0x15
    279a:	7e 89       	ldd	r23, Y+22	; 0x16
    279c:	8f 89       	ldd	r24, Y+23	; 0x17
    279e:	98 8d       	ldd	r25, Y+24	; 0x18
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	3f ef       	ldi	r19, 0xFF	; 255
    27a4:	4f e7       	ldi	r20, 0x7F	; 127
    27a6:	57 e4       	ldi	r21, 0x47	; 71
    27a8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    27ac:	18 16       	cp	r1, r24
    27ae:	4c f5       	brge	.+82     	; 0x2802 <main+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b0:	69 8d       	ldd	r22, Y+25	; 0x19
    27b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	40 e2       	ldi	r20, 0x20	; 32
    27be:	51 e4       	ldi	r21, 0x41	; 65
    27c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	bc 01       	movw	r22, r24
    27ca:	cd 01       	movw	r24, r26
    27cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	9c 8b       	std	Y+20, r25	; 0x14
    27d6:	8b 8b       	std	Y+19, r24	; 0x13
    27d8:	0f c0       	rjmp	.+30     	; 0x27f8 <main+0x162>
    27da:	80 e9       	ldi	r24, 0x90	; 144
    27dc:	91 e0       	ldi	r25, 0x01	; 1
    27de:	9a 8b       	std	Y+18, r25	; 0x12
    27e0:	89 8b       	std	Y+17, r24	; 0x11
    27e2:	89 89       	ldd	r24, Y+17	; 0x11
    27e4:	9a 89       	ldd	r25, Y+18	; 0x12
    27e6:	01 97       	sbiw	r24, 0x01	; 1
    27e8:	f1 f7       	brne	.-4      	; 0x27e6 <main+0x150>
    27ea:	9a 8b       	std	Y+18, r25	; 0x12
    27ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ee:	8b 89       	ldd	r24, Y+19	; 0x13
    27f0:	9c 89       	ldd	r25, Y+20	; 0x14
    27f2:	01 97       	sbiw	r24, 0x01	; 1
    27f4:	9c 8b       	std	Y+20, r25	; 0x14
    27f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f8:	8b 89       	ldd	r24, Y+19	; 0x13
    27fa:	9c 89       	ldd	r25, Y+20	; 0x14
    27fc:	00 97       	sbiw	r24, 0x00	; 0
    27fe:	69 f7       	brne	.-38     	; 0x27da <main+0x144>
    2800:	14 c0       	rjmp	.+40     	; 0x282a <main+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2802:	6d 89       	ldd	r22, Y+21	; 0x15
    2804:	7e 89       	ldd	r23, Y+22	; 0x16
    2806:	8f 89       	ldd	r24, Y+23	; 0x17
    2808:	98 8d       	ldd	r25, Y+24	; 0x18
    280a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	9c 8b       	std	Y+20, r25	; 0x14
    2814:	8b 8b       	std	Y+19, r24	; 0x13
    2816:	8b 89       	ldd	r24, Y+19	; 0x13
    2818:	9c 89       	ldd	r25, Y+20	; 0x14
    281a:	98 8b       	std	Y+16, r25	; 0x10
    281c:	8f 87       	std	Y+15, r24	; 0x0f
    281e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2820:	98 89       	ldd	r25, Y+16	; 0x10
    2822:	01 97       	sbiw	r24, 0x01	; 1
    2824:	f1 f7       	brne	.-4      	; 0x2822 <main+0x18c>
    2826:	98 8b       	std	Y+16, r25	; 0x10
    2828:	8f 87       	std	Y+15, r24	; 0x0f
	Lcd_ES_tsendChar(SMILE);
	while(1)
	{
		DIO_ES_tGetPinValue(DIO_U8_PORT_D, DIO_U8_PIN_6, &Local_u8_SwitchVal);

		for(Local_u8_counter=0;Local_u8_counter<11;Local_u8_counter++){
    282a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    282c:	8f 5f       	subi	r24, 0xFF	; 255
    282e:	8d 8f       	std	Y+29, r24	; 0x1d
    2830:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2832:	8b 30       	cpi	r24, 0x0B	; 11
    2834:	08 f4       	brcc	.+2      	; 0x2838 <main+0x1a2>
    2836:	7e cf       	rjmp	.-260    	; 0x2734 <main+0x9e>
			LCD_ES_tGoTo(1,5);
			Lcd_ES_tdisplayNum(Local_u8_counter);
			_delay_ms(500);
		}
		if(Local_u8_SwitchVal == HIGH)
    2838:	8e a1       	ldd	r24, Y+38	; 0x26
    283a:	81 30       	cpi	r24, 0x01	; 1
    283c:	11 f4       	brne	.+4      	; 0x2842 <main+0x1ac>
			lcd_ES_tclear();
    283e:	0e 94 9e 0c 	call	0x193c	; 0x193c <lcd_ES_tclear>
    2842:	80 e0       	ldi	r24, 0x00	; 0
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	aa ef       	ldi	r26, 0xFA	; 250
    2848:	b3 e4       	ldi	r27, 0x43	; 67
    284a:	8b 87       	std	Y+11, r24	; 0x0b
    284c:	9c 87       	std	Y+12, r25	; 0x0c
    284e:	ad 87       	std	Y+13, r26	; 0x0d
    2850:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2852:	6b 85       	ldd	r22, Y+11	; 0x0b
    2854:	7c 85       	ldd	r23, Y+12	; 0x0c
    2856:	8d 85       	ldd	r24, Y+13	; 0x0d
    2858:	9e 85       	ldd	r25, Y+14	; 0x0e
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	4a e7       	ldi	r20, 0x7A	; 122
    2860:	55 e4       	ldi	r21, 0x45	; 69
    2862:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2866:	dc 01       	movw	r26, r24
    2868:	cb 01       	movw	r24, r22
    286a:	8f 83       	std	Y+7, r24	; 0x07
    286c:	98 87       	std	Y+8, r25	; 0x08
    286e:	a9 87       	std	Y+9, r26	; 0x09
    2870:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2872:	6f 81       	ldd	r22, Y+7	; 0x07
    2874:	78 85       	ldd	r23, Y+8	; 0x08
    2876:	89 85       	ldd	r24, Y+9	; 0x09
    2878:	9a 85       	ldd	r25, Y+10	; 0x0a
    287a:	20 e0       	ldi	r18, 0x00	; 0
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	40 e8       	ldi	r20, 0x80	; 128
    2880:	5f e3       	ldi	r21, 0x3F	; 63
    2882:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2886:	88 23       	and	r24, r24
    2888:	2c f4       	brge	.+10     	; 0x2894 <main+0x1fe>
		__ticks = 1;
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	9e 83       	std	Y+6, r25	; 0x06
    2890:	8d 83       	std	Y+5, r24	; 0x05
    2892:	3f c0       	rjmp	.+126    	; 0x2912 <main+0x27c>
	else if (__tmp > 65535)
    2894:	6f 81       	ldd	r22, Y+7	; 0x07
    2896:	78 85       	ldd	r23, Y+8	; 0x08
    2898:	89 85       	ldd	r24, Y+9	; 0x09
    289a:	9a 85       	ldd	r25, Y+10	; 0x0a
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	3f ef       	ldi	r19, 0xFF	; 255
    28a0:	4f e7       	ldi	r20, 0x7F	; 127
    28a2:	57 e4       	ldi	r21, 0x47	; 71
    28a4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    28a8:	18 16       	cp	r1, r24
    28aa:	4c f5       	brge	.+82     	; 0x28fe <main+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    28b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    28b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	40 e2       	ldi	r20, 0x20	; 32
    28ba:	51 e4       	ldi	r21, 0x41	; 65
    28bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	bc 01       	movw	r22, r24
    28c6:	cd 01       	movw	r24, r26
    28c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28cc:	dc 01       	movw	r26, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	9e 83       	std	Y+6, r25	; 0x06
    28d2:	8d 83       	std	Y+5, r24	; 0x05
    28d4:	0f c0       	rjmp	.+30     	; 0x28f4 <main+0x25e>
    28d6:	80 e9       	ldi	r24, 0x90	; 144
    28d8:	91 e0       	ldi	r25, 0x01	; 1
    28da:	9c 83       	std	Y+4, r25	; 0x04
    28dc:	8b 83       	std	Y+3, r24	; 0x03
    28de:	8b 81       	ldd	r24, Y+3	; 0x03
    28e0:	9c 81       	ldd	r25, Y+4	; 0x04
    28e2:	01 97       	sbiw	r24, 0x01	; 1
    28e4:	f1 f7       	brne	.-4      	; 0x28e2 <main+0x24c>
    28e6:	9c 83       	std	Y+4, r25	; 0x04
    28e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ea:	8d 81       	ldd	r24, Y+5	; 0x05
    28ec:	9e 81       	ldd	r25, Y+6	; 0x06
    28ee:	01 97       	sbiw	r24, 0x01	; 1
    28f0:	9e 83       	std	Y+6, r25	; 0x06
    28f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f4:	8d 81       	ldd	r24, Y+5	; 0x05
    28f6:	9e 81       	ldd	r25, Y+6	; 0x06
    28f8:	00 97       	sbiw	r24, 0x00	; 0
    28fa:	69 f7       	brne	.-38     	; 0x28d6 <main+0x240>
    28fc:	14 c0       	rjmp	.+40     	; 0x2926 <main+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2900:	78 85       	ldd	r23, Y+8	; 0x08
    2902:	89 85       	ldd	r24, Y+9	; 0x09
    2904:	9a 85       	ldd	r25, Y+10	; 0x0a
    2906:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    290a:	dc 01       	movw	r26, r24
    290c:	cb 01       	movw	r24, r22
    290e:	9e 83       	std	Y+6, r25	; 0x06
    2910:	8d 83       	std	Y+5, r24	; 0x05
    2912:	8d 81       	ldd	r24, Y+5	; 0x05
    2914:	9e 81       	ldd	r25, Y+6	; 0x06
    2916:	9a 83       	std	Y+2, r25	; 0x02
    2918:	89 83       	std	Y+1, r24	; 0x01
    291a:	89 81       	ldd	r24, Y+1	; 0x01
    291c:	9a 81       	ldd	r25, Y+2	; 0x02
    291e:	01 97       	sbiw	r24, 0x01	; 1
    2920:	f1 f7       	brne	.-4      	; 0x291e <main+0x288>
    2922:	9a 83       	std	Y+2, r25	; 0x02
    2924:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		LCD_ES_tGoTo(1,6);
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	66 e0       	ldi	r22, 0x06	; 6
    292a:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <LCD_ES_tGoTo>
		Lcd_ES_tsendChar(' ');
    292e:	80 e2       	ldi	r24, 0x20	; 32
    2930:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <Lcd_ES_tsendChar>
    2934:	f5 ce       	rjmp	.-534    	; 0x2720 <main+0x8a>

00002936 <__udivmodhi4>:
    2936:	aa 1b       	sub	r26, r26
    2938:	bb 1b       	sub	r27, r27
    293a:	51 e1       	ldi	r21, 0x11	; 17
    293c:	07 c0       	rjmp	.+14     	; 0x294c <__udivmodhi4_ep>

0000293e <__udivmodhi4_loop>:
    293e:	aa 1f       	adc	r26, r26
    2940:	bb 1f       	adc	r27, r27
    2942:	a6 17       	cp	r26, r22
    2944:	b7 07       	cpc	r27, r23
    2946:	10 f0       	brcs	.+4      	; 0x294c <__udivmodhi4_ep>
    2948:	a6 1b       	sub	r26, r22
    294a:	b7 0b       	sbc	r27, r23

0000294c <__udivmodhi4_ep>:
    294c:	88 1f       	adc	r24, r24
    294e:	99 1f       	adc	r25, r25
    2950:	5a 95       	dec	r21
    2952:	a9 f7       	brne	.-22     	; 0x293e <__udivmodhi4_loop>
    2954:	80 95       	com	r24
    2956:	90 95       	com	r25
    2958:	bc 01       	movw	r22, r24
    295a:	cd 01       	movw	r24, r26
    295c:	08 95       	ret

0000295e <__prologue_saves__>:
    295e:	2f 92       	push	r2
    2960:	3f 92       	push	r3
    2962:	4f 92       	push	r4
    2964:	5f 92       	push	r5
    2966:	6f 92       	push	r6
    2968:	7f 92       	push	r7
    296a:	8f 92       	push	r8
    296c:	9f 92       	push	r9
    296e:	af 92       	push	r10
    2970:	bf 92       	push	r11
    2972:	cf 92       	push	r12
    2974:	df 92       	push	r13
    2976:	ef 92       	push	r14
    2978:	ff 92       	push	r15
    297a:	0f 93       	push	r16
    297c:	1f 93       	push	r17
    297e:	cf 93       	push	r28
    2980:	df 93       	push	r29
    2982:	cd b7       	in	r28, 0x3d	; 61
    2984:	de b7       	in	r29, 0x3e	; 62
    2986:	ca 1b       	sub	r28, r26
    2988:	db 0b       	sbc	r29, r27
    298a:	0f b6       	in	r0, 0x3f	; 63
    298c:	f8 94       	cli
    298e:	de bf       	out	0x3e, r29	; 62
    2990:	0f be       	out	0x3f, r0	; 63
    2992:	cd bf       	out	0x3d, r28	; 61
    2994:	09 94       	ijmp

00002996 <__epilogue_restores__>:
    2996:	2a 88       	ldd	r2, Y+18	; 0x12
    2998:	39 88       	ldd	r3, Y+17	; 0x11
    299a:	48 88       	ldd	r4, Y+16	; 0x10
    299c:	5f 84       	ldd	r5, Y+15	; 0x0f
    299e:	6e 84       	ldd	r6, Y+14	; 0x0e
    29a0:	7d 84       	ldd	r7, Y+13	; 0x0d
    29a2:	8c 84       	ldd	r8, Y+12	; 0x0c
    29a4:	9b 84       	ldd	r9, Y+11	; 0x0b
    29a6:	aa 84       	ldd	r10, Y+10	; 0x0a
    29a8:	b9 84       	ldd	r11, Y+9	; 0x09
    29aa:	c8 84       	ldd	r12, Y+8	; 0x08
    29ac:	df 80       	ldd	r13, Y+7	; 0x07
    29ae:	ee 80       	ldd	r14, Y+6	; 0x06
    29b0:	fd 80       	ldd	r15, Y+5	; 0x05
    29b2:	0c 81       	ldd	r16, Y+4	; 0x04
    29b4:	1b 81       	ldd	r17, Y+3	; 0x03
    29b6:	aa 81       	ldd	r26, Y+2	; 0x02
    29b8:	b9 81       	ldd	r27, Y+1	; 0x01
    29ba:	ce 0f       	add	r28, r30
    29bc:	d1 1d       	adc	r29, r1
    29be:	0f b6       	in	r0, 0x3f	; 63
    29c0:	f8 94       	cli
    29c2:	de bf       	out	0x3e, r29	; 62
    29c4:	0f be       	out	0x3f, r0	; 63
    29c6:	cd bf       	out	0x3d, r28	; 61
    29c8:	ed 01       	movw	r28, r26
    29ca:	08 95       	ret

000029cc <_exit>:
    29cc:	f8 94       	cli

000029ce <__stop_program>:
    29ce:	ff cf       	rjmp	.-2      	; 0x29ce <__stop_program>
